LX51 LINKER/LOCATER V4.41                                                               04/18/2017  18:27:29  PAGE 1





ASSEMBLER CODE PACKING OF MODULE:  OUT\FW (MAIN)


----- FUNCTION main (BEGIN) -----
 FILE: 'main.c'
   20: void main()
   21: {
   22: 	R_Test++;
   23: 	systemInit();
0004C2 904C62            MOV     DPTR,#R_Test
0004C5 E0                MOVX    A,@DPTR
0004C6 04                INC     A
0004C7 F0                MOVX    @DPTR,A
   24: 	while(1) {
0004C8 12112C            LCALL   systemInit
0004CB         ?C0001?MAIN:
   25: 		BTControlProcess();
   26: 		lxOptProcess();
0004CB 122041            LCALL   BTControlProcess
   27: 		//WechatProcess();
0004CE 1222CC            LCALL   lxOptProcess
   28: 		SysStatusProcess();
0004D1 B1A2              ACALL   SysStatusProcess
   29: 		if(sys_state == SYS_ST_RUN) {
0004D3 904E5B            MOV     DPTR,#sys_state
0004D6 E0                MOVX    A,@DPTR
0004D7 B402F1            CJNE    A,#02H,?C0001?MAIN
   30: 			YC_UtilTimerProcess();		
0004DA 122F04            LCALL   YC_UtilTimerProcess
   31: 			CS_Scale_1186Com();		//1186通信处理
0004DD 91E5              ACALL   CS_Scale_1186Com
   32: 			CS_Scale_Proc();
0004DF 1216D0            LCALL   CS_Scale_Proc
   33: 		}
   34: 	}
0004E2 80E7              SJMP    ?C0001?MAIN
0004E4 22                RET     
----- FUNCTION main (END) -------


----- FUNCTION CS_Scale_1186Com (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   31: void CS_Scale_1186Com(void)
   32: {	
   33: 	
   34: 	if(uartTimeoutCnt < CS_CommTo1186_TimeOut)	 
0004E5 904D68            MOV     DPTR,#uartTimeoutCnt
0004E8 E0                MOVX    A,@DPTR
0004E9 C3                CLR     C
0004EA 9415              SUBB    A,#015H
0004EC 502B              JNC     ?C0003?CS_COMMTO1186
   35: 		{
   36: 		
   37: 			switch(R_Scale_state)
0004EE 904CC5            MOV     DPTR,#R_Scale_state
0004F1 E0                MOVX    A,@DPTR
0004F2 24FE              ADD     A,#0FEH
0004F4 6014              JZ      ?C0006?CS_COMMTO1186
0004F6 04                INC     A
0004F7 24FC              ADD     A,#0FCH
0004F9 5016              JNC     ?C0009?CS_COMMTO1186
0004FB 2405              ADD     A,#05H
0004FD 702D              JNZ     ?C0013?CS_COMMTO1186
   38: 			{
   39: 			case CS_Scale_state_init:
0004FF         ?C0005?CS_COMMTO1186:
   40: 				CS_1186Com_Reset_Proc();			
0004FF F101              ACALL   CS_1186Com_Reset_Proc
   41: 				CS_1186Com_ReadMacAdress_Proc();
000501 121865            LCALL   CS_1186Com_ReadMacAdress_Proc
   42: 				CS_1186Com_ReadTime_Proc();
000504 B1E2              ACALL   CS_1186Com_ReadTime_Proc
   43: 				CS_1186Com_SetOpenWeight_Proc();
000506 F11B              ACALL   CS_1186Com_SetOpenWeight_Proc
   44: 				CS_1186Com_SetLcd_Proc();
000508 8023              SJMP    CS_1186Com_SetLcd_Proc
   45: 				break;			
   46: 			case CS_Scale_state_standby:
00050A         ?C0006?CS_COMMTO1186:
   47: 				CS_1186Com_SetSleepMode_Proc();
00050A D16D              ACALL   CS_1186Com_SetSleepMode_Proc
   48: 				CS_1186Com_ReadAdZero_Proc();
00050C 123C60            LCALL   CS_1186Com_ReadAdZero_Proc
   49: 				CS_1186Com_SetLcd_Proc();
00050F 801C              SJMP    CS_1186Com_SetLcd_Proc
   50: 				break;
   51: 			case CS_Scale_state_weighting:
   52: 			case CS_Scale_state_caling:
   53: 			case CS_Scale_state_locking:
000511         ?C0009?CS_COMMTO1186:
   54: 				CS_1186Com_ReadTime_Proc();
000511 B1E2              ACALL   CS_1186Com_ReadTime_Proc
   55: 				CS_1186Com_ReadAdc_Proc();
000513 123B8B            LCALL   CS_1186Com_ReadAdc_Proc
   56: 				CS_1186Com_SetLcd_Proc();
000516 8015              SJMP    CS_1186Com_SetLcd_Proc
   57: 
   58: 				/*
   59: 				if(B_Weight_AdOk == true)
   60: 					{
   61: 					R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplay;
   62: 					B_Weight_LcdOk =false;
   63: 					}
   64: 				if(B_Weight_LcdOk == true)
   65: 					{
   66: 					R_Weight_Com_Coo.now = CS_CommTo1186_ReadAd;	
   67: 					}
   68: 				*/
   69: 				break;
   70: 			default:
   71: 				break;			
   72: 			}		
   73: 		}
000518 22                RET     
000519         ?C0003?CS_COMMTO1186:
   74: 	else
   75: 		{
   76: 		YC_UARTClearBuffer();	// fresh rec buffer
000519 B192              ACALL   YC_UARTClearBuffer
   77: 		uartTimeoutCnt=0;
00051B E4                CLR     A
00051C 904D68            MOV     DPTR,#uartTimeoutCnt
00051F F0                MOVX    @DPTR,A
   78: 		if(R_Weight_Com_Coo.now !=CS_CommTo1186_Null)
000520 904D55            MOV     DPTR,#R_Weight_Com_Coo
000523 E0                MOVX    A,@DPTR
000524 6006              JZ      ?C0013?CS_COMMTO1186
   79: 		R_Weight_Com_Coo.now = R_Weight_Com_Coo.pre;	//re send
000526 A3                INC     DPTR
000527 E0                MOVX    A,@DPTR
000528 904D55            MOV     DPTR,#R_Weight_Com_Coo
00052B F0                MOVX    @DPTR,A
   80: 		}
   81: 
   82: }
00052C         ?C0013?CS_COMMTO1186:
00052C 22                RET     
----- FUNCTION CS_Scale_1186Com (END) -------


----- FUNCTION CS_1186Com_SetLcd_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  191: void CS_1186Com_SetLcd_Proc(void)
  192: {
  193: 
  194: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_LcdDisplay)
00052D 904D55            MOV     DPTR,#R_Weight_Com_Coo
000530 E0                MOVX    A,@DPTR
000531 B4E01E            CJNE    A,#0E0H,?C0029?CS_COMMTO1186
  195: 		{
  196: 		CS_CommTo1186_SendCmd(CS_CommTo1186_LcdDisplay,CS_Lcd_Send_Data);
000534 7B01              MOV     R3,#01H
000536 7A4D              MOV     R2,#HIGH CS_Lcd_Send_Data
000538 7928              MOV     R1,#LOW CS_Lcd_Send_Data
00053A 7FE0              MOV     R7,#0E0H
00053C 121917            LCALL   _CS_CommTo1186_SendCmd
  197: 		R_Weight_Com_Coo.pre = CS_CommTo1186_LcdDisplay;
00053F 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
000542 74E0              MOV     A,#0E0H
000544 F0                MOVX    @DPTR,A
  198: 		R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplayStandby;
000545 904D55            MOV     DPTR,#R_Weight_Com_Coo
000548 740B              MOV     A,#0BH
00054A F0                MOVX    @DPTR,A
  199: 		uartTimeoutCnt=0;
00054B E4                CLR     A
00054C 904D68            MOV     DPTR,#uartTimeoutCnt
00054F F0                MOVX    @DPTR,A
  200: 		YC_UARTClearBuffer();
000550 B192              ACALL   YC_UARTClearBuffer
  201: 		}
000552         ?C0029?CS_COMMTO1186:
  202: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_LcdDisplayStandby)
000552 904D55            MOV     DPTR,#R_Weight_Com_Coo
000555 E0                MOVX    A,@DPTR
000556 640B              XRL     A,#0BH
000558 7037              JNZ     ?C0036?CS_COMMTO1186
  203: 		{
  204: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 5)==5)
00055A 7B01              MOV     R3,#01H
00055C 7A4D              MOV     R2,#HIGH uartRcvBuf
00055E 7945              MOV     R1,#LOW uartRcvBuf
000560 7D05              MOV     R5,#05H
000562 FC                MOV     R4,A
000563 F1A8              ACALL   _YC_UARTReciveDataExpected
000565 EF                MOV     A,R7
000566 6405              XRL     A,#05H
000568 4E                ORL     A,R6
000569 7026              JNZ     ?C0036?CS_COMMTO1186
  205: 			{
  206: 			if(uartRcvBuf[3] == CS_CommTo1186_LcdDisplay)    
00056B 904D48            MOV     DPTR,#uartRcvBuf+03H
00056E E0                MOVX    A,@DPTR
00056F B4E019            CJNE    A,#0E0H,?C0032?CS_COMMTO1186
  207: 				{
  208: 				if(R_Scale_state==CS_Scale_state_init)
000572 904CC5            MOV     DPTR,#R_Scale_state
000575 E0                MOVX    A,@DPTR
000576 7006              JNZ     ?C0033?CS_COMMTO1186
  209: 					R_Weight_Com_Coo.now = CS_CommTo1186_Null;
000578 904D55            MOV     DPTR,#R_Weight_Com_Coo
00057B F0                MOVX    @DPTR,A
00057C 8006              SJMP    ?C0034?CS_COMMTO1186
00057E         ?C0033?CS_COMMTO1186:
  210: 				else
  211: 					R_Weight_Com_Coo.now = CS_CommTo1186_ReadAd;
00057E 904D55            MOV     DPTR,#R_Weight_Com_Coo
000581 7480              MOV     A,#080H
000583 F0                MOVX    @DPTR,A
000584         ?C0034?CS_COMMTO1186:
  212: 				R_Weight_Com_Coo.sucess=true;		
000584 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
000587 7401              MOV     A,#01H
000589 F0                MOVX    @DPTR,A
  213: 				}
00058A 22                RET     
00058B         ?C0032?CS_COMMTO1186:
  214: 			else
  215: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
00058B 904D68            MOV     DPTR,#uartTimeoutCnt
00058E 7415              MOV     A,#015H
000590 F0                MOVX    @DPTR,A
  216: 			}	
  217: 		}
  218: }
000591         ?C0036?CS_COMMTO1186:
000591 22                RET     
----- FUNCTION CS_1186Com_SetLcd_Proc (END) -------


----- FUNCTION YC_UARTClearBuffer (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  409: void YC_UARTClearBuffer(void)
  410: {
  411: 	REG_UART_RX_PTR_R = REG_UART_RX_PTR_W;
  412: 	//REG_UART_TX_PTR_W = REG_UART_TX_PTR_R;
000592 908116            MOV     DPTR,#08116H
000595 E0                MOVX    A,@DPTR
000596 FF                MOV     R7,A
000597 A3                INC     DPTR
000598 E0                MOVX    A,@DPTR
000599 908058            MOV     DPTR,#08058H
00059C CF                XCH     A,R7
00059D F0                MOVX    @DPTR,A
00059E A3                INC     DPTR
00059F EF                MOV     A,R7
0005A0 F0                MOVX    @DPTR,A
  413: }
0005A1 22                RET     
----- FUNCTION YC_UARTClearBuffer (END) -------


----- FUNCTION SysStatusProcess (BEGIN) -----
 FILE: 'system.c'
  174: void SysStatusProcess(void) 
  175: {
  176: 	if( sys_state == SYS_ST_IDLE) {	//can enter LPM
  177: 		if(bleConnStatus ==BLE_STATUS_DISCONN)
0005A2 904E5B            MOV     DPTR,#sys_state
0005A5 E0                MOVX    A,@DPTR
0005A6 B40121            CJNE    A,#01H,?C0029?SYSTEM
  178: 		{
0005A9 904C5B            MOV     DPTR,#bleConnStatus
0005AC E0                MOVX    A,@DPTR
0005AD 7032              JNZ     ?C0034?SYSTEM
  179: 			YC_UARTWaitSendData();
  180: 			YC_UARTClearBuffer();
0005AF D15B              ACALL   YC_UARTWaitSendData
  181: 		    	LPM_ENABLE();
0005B1 B192              ACALL   YC_UARTClearBuffer
  182: 
0005B3 9049FE            MOV     DPTR,#049FEH
0005B6 7401              MOV     A,#01H
0005B8 F0                MOVX    @DPTR,A
  183: 			btCmdBuf.len = 0x01;
0005B9 904C63            MOV     DPTR,#btCmdBuf
0005BC F0                MOVX    @DPTR,A
  184: 			btCmdBuf.DATA[0] = CS_CMD_SLEEP_REQ;
0005BD A3                INC     DPTR
0005BE 7420              MOV     A,#020H
0005C0 F0                MOVX    @DPTR,A
  185: 			BT_CmdFifoIn(&btCmdBuf);
0005C1 7B01              MOV     R3,#01H
0005C3 7A4C              MOV     R2,#HIGH btCmdBuf
0005C5 7963              MOV     R1,#LOW btCmdBuf
0005C7 022623            LJMP    _BT_CmdFifoIn
  186: 
  187: 				
  188: 		}
  189: 	}
0005CA         ?C0029?SYSTEM:
  190: 	else if( sys_state == SYS_ST_SLEEP) {//can enter LPM
0005CA 904E5B            MOV     DPTR,#sys_state
0005CD E0                MOVX    A,@DPTR
0005CE B4030B            CJNE    A,#03H,?C0032?SYSTEM
  191: 		YC_UARTWaitSendData();
0005D1 D15B              ACALL   YC_UARTWaitSendData
  192: 		YC_UARTClearBuffer();
0005D3 B192              ACALL   YC_UARTClearBuffer
  193: 	    	LPM_ENABLE();
0005D5 9049FE            MOV     DPTR,#049FEH
0005D8 7401              MOV     A,#01H
0005DA F0                MOVX    @DPTR,A
  194: 	} 
0005DB 22                RET     
0005DC         ?C0032?SYSTEM:
  195: 	else {
  196: 		LPM_DISABLE();
0005DC 9049FE            MOV     DPTR,#049FEH
0005DF E4                CLR     A
0005E0 F0                MOVX    @DPTR,A
  197: 	}
  198: }
0005E1         ?C0034?SYSTEM:
0005E1 22                RET     
----- FUNCTION SysStatusProcess (END) -------


----- FUNCTION CS_1186Com_ReadTime_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  222: void CS_1186Com_ReadTime_Proc(void)
  223: {
  224: 	//static u8_t xdata temp=0;
  225: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadTime)
0005E2 904D55            MOV     DPTR,#R_Weight_Com_Coo
0005E5 E0                MOVX    A,@DPTR
0005E6 B4821E            CJNE    A,#082H,?C0037?CS_COMMTO1186
  226: 		{
  227: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadTime,0);
0005E9 7B00              MOV     R3,#00H
0005EB 7A00              MOV     R2,#00H
0005ED 7900              MOV     R1,#00H
0005EF 7F82              MOV     R7,#082H
0005F1 121917            LCALL   _CS_CommTo1186_SendCmd
  228: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadTime;
0005F4 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
0005F7 7482              MOV     A,#082H
0005F9 F0                MOVX    @DPTR,A
  229: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadTimeStandby;
0005FA 904D55            MOV     DPTR,#R_Weight_Com_Coo
0005FD 7403              MOV     A,#03H
0005FF F0                MOVX    @DPTR,A
  230: 		uartTimeoutCnt=0;
000600 E4                CLR     A
000601 904D68            MOV     DPTR,#uartTimeoutCnt
000604 F0                MOVX    @DPTR,A
  231: 		YC_UARTClearBuffer();
000605 B192              ACALL   YC_UARTClearBuffer
  232: 		}
000607         ?C0037?CS_COMMTO1186:
  233: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadTimeStandby)
000607 904D55            MOV     DPTR,#R_Weight_Com_Coo
00060A E0                MOVX    A,@DPTR
00060B 6403              XRL     A,#03H
00060D 704B              JNZ     ?C0042?CS_COMMTO1186
  234: 		{
  235: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 9)==9)
00060F 7B01              MOV     R3,#01H
000611 7A4D              MOV     R2,#HIGH uartRcvBuf
000613 7945              MOV     R1,#LOW uartRcvBuf
000615 7D09              MOV     R5,#09H
000617 FC                MOV     R4,A
000618 F1A8              ACALL   _YC_UARTReciveDataExpected
00061A EF                MOV     A,R7
00061B 6409              XRL     A,#09H
00061D 4E                ORL     A,R6
00061E 703A              JNZ     ?C0042?CS_COMMTO1186
  236: 			{
  237: 			if(uartRcvBuf[3] == CS_CommTo1186_ReadTime)    
000620 904D48            MOV     DPTR,#uartRcvBuf+03H
000623 E0                MOVX    A,@DPTR
000624 B4822D            CJNE    A,#082H,?C0040?CS_COMMTO1186
  238: 				{			
  239: 				//读到时间的操作
  240: 				R_1186_RTC[3] = uartRcvBuf[4];
000627 A3                INC     DPTR
000628 E0                MOVX    A,@DPTR
000629 904CD6            MOV     DPTR,#R_1186_RTC+03H
00062C F0                MOVX    @DPTR,A
  241: 				R_1186_RTC[2] = uartRcvBuf[5];
00062D 904D4A            MOV     DPTR,#uartRcvBuf+05H
000630 E0                MOVX    A,@DPTR
000631 904CD5            MOV     DPTR,#R_1186_RTC+02H
000634 F0                MOVX    @DPTR,A
  242: 				R_1186_RTC[1] = uartRcvBuf[6];
000635 904D4B            MOV     DPTR,#uartRcvBuf+06H
000638 E0                MOVX    A,@DPTR
000639 904CD4            MOV     DPTR,#R_1186_RTC+01H
00063C F0                MOVX    @DPTR,A
  243: 				R_1186_RTC[0] = uartRcvBuf[7];
00063D 904D4C            MOV     DPTR,#uartRcvBuf+07H
000640 E0                MOVX    A,@DPTR
000641 904CD3            MOV     DPTR,#R_1186_RTC
000644 F0                MOVX    @DPTR,A
  244: 
  245: 			
  246: 				/*
  247: 				R_Debug_temp=R_1186RTC.R_32;
  248: 				CS_ScaleDisplay_Debug();
  249: 				while(temp==2);
  250: 				temp=2;
  251: 				*/
  252: 				/*
  253: 				R_1186RTC.R_BYTE[3]=  uartRcvBuf[4];
  254: 				R_1186RTC.R_BYTE[2] = uartRcvBuf[5];
  255: 				R_1186RTC.R_BYTE[1] = uartRcvBuf[6];
  256: 				R_1186RTC.R_BYTE[0] = uartRcvBuf[7];
  257: 				/*
  258: 				R_1186_RTC = uartRcvBuf[4];
  259: 				R_1186_RTC = R_1186_RTC<<8;
  260: 				R_1186_RTC |= uartRcvBuf[5];
  261: 				R_1186_RTC = R_1186_RTC<<8;
  262: 				R_1186_RTC |= uartRcvBuf[6];
  263: 				R_1186_RTC = R_1186_RTC<<8;
  264: 				R_1186_RTC |= uartRcvBuf[7];
  265: 				*/
  266: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
000645 E4                CLR     A
000646 904D55            MOV     DPTR,#R_Weight_Com_Coo
000649 F0                MOVX    @DPTR,A
  267: 				R_Weight_Com_Coo.sucess=true;
00064A 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
00064D 04                INC     A
00064E F0                MOVX    @DPTR,A
  268: 				B_Weight_AdOk = true;
00064F 904CD7            MOV     DPTR,#B_Weight_AdOk
000652 F0                MOVX    @DPTR,A
  269: 						
  270: 				}
000653 22                RET     
000654         ?C0040?CS_COMMTO1186:
  271: 			else
  272: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
000654 904D68            MOV     DPTR,#uartTimeoutCnt
000657 7415              MOV     A,#015H
000659 F0                MOVX    @DPTR,A
  273: 			}	
  274: 		}
  275: }
00065A         ?C0042?CS_COMMTO1186:
00065A 22                RET     
----- FUNCTION CS_1186Com_ReadTime_Proc (END) -------


----- FUNCTION YC_UARTWaitSendData (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  373: void YC_UARTWaitSendData(void)
  374: {
  375: 	while(ESWAP(REG_UART_TX_ITEMS));
00065B         ?C0009?YC_PERIPHERAL:
  376: }
00065B 90810E            MOV     DPTR,#0810EH
00065E A3                INC     DPTR
00065F E0                MOVX    A,@DPTR
000660 FC                MOV     R4,A
000661 90810E            MOV     DPTR,#0810EH
000664 E0                MOVX    A,@DPTR
000665 FF                MOV     R7,A
000666 EC                MOV     A,R4
000667 FE                MOV     R6,A
000668 EF                MOV     A,R7
000669 4E                ORL     A,R6
00066A 70EF              JNZ     ?C0009?YC_PERIPHERAL
  377: 
00066C 22                RET     
----- FUNCTION YC_UARTWaitSendData (END) -------


----- FUNCTION CS_1186Com_SetSleepMode_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  279: void CS_1186Com_SetSleepMode_Proc(void)
  280: {
  281: 	u16_t	R_AD_Zero;
  282: 	
  283: 	R_AD_Zero = CS_Scale_ZeroProc(GetRunningZero,0);
00066D E4                CLR     A
00066E FD                MOV     R5,A
00066F FC                MOV     R4,A
000670 7F01              MOV     R7,#01H
000672 12349A            LCALL   _CS_Scale_ZeroProc
;---- Variable 'R_AD_Zero' assigned to Register 'R4/R5' ----
000675 AD07              MOV     R5,AR7
000677 AC06              MOV     R4,AR6
  284: 		
  285: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetSleepMode)
000679 904D55            MOV     DPTR,#R_Weight_Com_Coo
00067C E0                MOVX    A,@DPTR
00067D 64A0              XRL     A,#0A0H
00067F 704E              JNZ     ?C0043?CS_COMMTO1186
  286: 		{
  287: 		
  288: 		uartTxBuf[0]= 0x91;
000681 904D58            MOV     DPTR,#uartTxBuf
000684 7491              MOV     A,#091H
000686 F0                MOVX    @DPTR,A
  289: 		uartTxBuf[1]= R_AD_Zero<<6;
000687 ED                MOV     A,R5
000688 7806              MOV     R0,#06H
00068A         ?C0082?CS_COMMTO1186:
00068A C3                CLR     C
00068B 33                RLC     A
00068C CE                XCH     A,R6
00068D 33                RLC     A
00068E CE                XCH     A,R6
00068F D8F9              DJNZ    R0,?C0082?CS_COMMTO1186
000691 904D59            MOV     DPTR,#uartTxBuf+01H
000694 F0                MOVX    @DPTR,A
  290: 		uartTxBuf[2]= R_AD_Zero>>2;
000695 ED                MOV     A,R5
000696 AE04              MOV     R6,AR4
000698 7802              MOV     R0,#02H
00069A         ?C0083?CS_COMMTO1186:
00069A CE                XCH     A,R6
00069B C3                CLR     C
00069C 13                RRC     A
00069D CE                XCH     A,R6
00069E 13                RRC     A
00069F D8F9              DJNZ    R0,?C0083?CS_COMMTO1186
0006A1 904D5A            MOV     DPTR,#uartTxBuf+02H
0006A4 F0                MOVX    @DPTR,A
  291: 		uartTxBuf[3]= R_AD_Zero>>10;
0006A5 EC                MOV     A,R4
0006A6 13                RRC     A
0006A7 13                RRC     A
0006A8 543F              ANL     A,#03FH
0006AA A3                INC     DPTR
0006AB F0                MOVX    @DPTR,A
  292: 		uartTxBuf[3]|= 0x80;
0006AC 4480              ORL     A,#080H
0006AE F0                MOVX    @DPTR,A
  293: 		CS_CommTo1186_SendCmd(CS_CommTo1186_SetSleepMode,uartTxBuf);
0006AF 7B01              MOV     R3,#01H
0006B1 7A4D              MOV     R2,#HIGH uartTxBuf
0006B3 7958              MOV     R1,#LOW uartTxBuf
0006B5 7FA0              MOV     R7,#0A0H
0006B7 121917            LCALL   _CS_CommTo1186_SendCmd
  294: 		
  295: 		YC_UARTWaitSendData();
0006BA D15B              ACALL   YC_UARTWaitSendData
  296: 		
  297: 		R_Weight_Com_Coo.pre = CS_CommTo1186_SetSleepMode;
0006BC 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
0006BF 74A0              MOV     A,#0A0H
0006C1 F0                MOVX    @DPTR,A
  298: 		R_Weight_Com_Coo.now = CS_CommTo1186_SetSleepModeStandby;
0006C2 904D55            MOV     DPTR,#R_Weight_Com_Coo
0006C5 7407              MOV     A,#07H
0006C7 F0                MOVX    @DPTR,A
  299: 		uartTimeoutCnt=0;
0006C8 E4                CLR     A
0006C9 904D68            MOV     DPTR,#uartTimeoutCnt
0006CC F0                MOVX    @DPTR,A
  300: 		YC_UARTClearBuffer();
0006CD B192              ACALL   YC_UARTClearBuffer
  301: 		}
0006CF         ?C0043?CS_COMMTO1186:
  302: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetSleepModeStandby)
0006CF 904D55            MOV     DPTR,#R_Weight_Com_Coo
0006D2 E0                MOVX    A,@DPTR
0006D3 B4072A            CJNE    A,#07H,?C0048?CS_COMMTO1186
  303: 		{
  304: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 5)==5)
0006D6 7B01              MOV     R3,#01H
0006D8 7A4D              MOV     R2,#HIGH uartRcvBuf
0006DA 7945              MOV     R1,#LOW uartRcvBuf
0006DC 7D05              MOV     R5,#05H
0006DE 7C00              MOV     R4,#00H
0006E0 F1A8              ACALL   _YC_UARTReciveDataExpected
0006E2 EF                MOV     A,R7
0006E3 6405              XRL     A,#05H
0006E5 4E                ORL     A,R6
0006E6 7018              JNZ     ?C0048?CS_COMMTO1186
  305: 			{
  306: 			if(uartRcvBuf[3] == CS_CommTo1186_SetSleepMode)    
0006E8 904D48            MOV     DPTR,#uartRcvBuf+03H
0006EB E0                MOVX    A,@DPTR
0006EC B4A00B            CJNE    A,#0A0H,?C0046?CS_COMMTO1186
  307: 				{			
  308: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
0006EF E4                CLR     A
0006F0 904D55            MOV     DPTR,#R_Weight_Com_Coo
0006F3 F0                MOVX    @DPTR,A
  309: 				R_Weight_Com_Coo.sucess=true;	
0006F4 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
0006F7 04                INC     A
0006F8 F0                MOVX    @DPTR,A
  310: 				}
0006F9 22                RET     
0006FA         ?C0046?CS_COMMTO1186:
  311: 			else
  312: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
0006FA 904D68            MOV     DPTR,#uartTimeoutCnt
0006FD 7415              MOV     A,#015H
0006FF F0                MOVX    @DPTR,A
  313: 			}	
  314: 		}
  315: }
000700         ?C0048?CS_COMMTO1186:
000700 22                RET     
----- FUNCTION CS_1186Com_SetSleepMode_Proc (END) -------


----- FUNCTION CS_1186Com_Reset_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  396: void CS_1186Com_Reset_Proc(void)
  397: {
  398: 
  399: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_Reset)
000701 904D55            MOV     DPTR,#R_Weight_Com_Coo
000704 E0                MOVX    A,@DPTR
000705 B4C512            CJNE    A,#0C5H,?C0062?CS_COMMTO1186
  400: 		{
  401: 		CS_CommTo1186_SendCmd(CS_CommTo1186_Reset,0);
000708 7B00              MOV     R3,#00H
00070A 7A00              MOV     R2,#00H
00070C 7900              MOV     R1,#00H
00070E 7FC5              MOV     R7,#0C5H
000710 121917            LCALL   _CS_CommTo1186_SendCmd
  402: 		YC_UARTClearBuffer();
000713 B192              ACALL   YC_UARTClearBuffer
  403: 		R_Weight_Com_Coo.now=CS_CommTo1186_Null;
000715 E4                CLR     A
000716 904D55            MOV     DPTR,#R_Weight_Com_Coo
000719 F0                MOVX    @DPTR,A
  404: 		
  405: 		}
  406: 													
  407: }
00071A         ?C0062?CS_COMMTO1186:
00071A 22                RET     
----- FUNCTION CS_1186Com_Reset_Proc (END) -------


----- FUNCTION CS_1186Com_SetOpenWeight_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  320: void CS_1186Com_SetOpenWeight_Proc(void)
  321: {
  322: 	u16_t	R_Open_Weight;
  323: 	R_Open_Weight = CS_Scale_CaliProc(CaliProcGetOpenWeight);	//获取开机重量值
00071B 7F07              MOV     R7,#07H
00071D 120A17            LCALL   _CS_Scale_CaliProc
;---- Variable 'R_Open_Weight' assigned to Register 'R4/R5' ----
000720 AD07              MOV     R5,AR7
000722 AC06              MOV     R4,AR6
  324: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetOpenWeight)
000724 904D55            MOV     DPTR,#R_Weight_Com_Coo
000727 E0                MOVX    A,@DPTR
000728 64A1              XRL     A,#0A1H
00072A 704A              JNZ     ?C0049?CS_COMMTO1186
  325: 		{
  326: 		uartTxBuf[0]= 0x20;
00072C 904D58            MOV     DPTR,#uartTxBuf
00072F 7420              MOV     A,#020H
000731 F0                MOVX    @DPTR,A
  327: 		uartTxBuf[1]= R_Open_Weight<<6;
000732 ED                MOV     A,R5
000733 7806              MOV     R0,#06H
000735         ?C0084?CS_COMMTO1186:
000735 C3                CLR     C
000736 33                RLC     A
000737 CE                XCH     A,R6
000738 33                RLC     A
000739 CE                XCH     A,R6
00073A D8F9              DJNZ    R0,?C0084?CS_COMMTO1186
00073C FB                MOV     R3,A
00073D 904D59            MOV     DPTR,#uartTxBuf+01H
000740 F0                MOVX    @DPTR,A
  328: 		uartTxBuf[2]= R_Open_Weight>>2;
000741 ED                MOV     A,R5
000742 AE04              MOV     R6,AR4
000744 7802              MOV     R0,#02H
000746         ?C0085?CS_COMMTO1186:
000746 CE                XCH     A,R6
000747 C3                CLR     C
000748 13                RRC     A
000749 CE                XCH     A,R6
00074A 13                RRC     A
00074B D8F9              DJNZ    R0,?C0085?CS_COMMTO1186
00074D FF                MOV     R7,A
00074E 904D5A            MOV     DPTR,#uartTxBuf+02H
000751 F0                MOVX    @DPTR,A
  329: 		uartTxBuf[3]= R_Open_Weight<<6;
000752 A3                INC     DPTR
000753 EB                MOV     A,R3
000754 F0                MOVX    @DPTR,A
  330: 		uartTxBuf[4]= R_Open_Weight>>2;	
000755 A3                INC     DPTR
000756 EF                MOV     A,R7
000757 F0                MOVX    @DPTR,A
  331: 		CS_CommTo1186_SendCmd(CS_CommTo1186_SetOpenWeight,uartTxBuf);
000758 7B01              MOV     R3,#01H
00075A 7A4D              MOV     R2,#HIGH uartTxBuf
00075C 7958              MOV     R1,#LOW uartTxBuf
00075E 7FA1              MOV     R7,#0A1H
000760 121917            LCALL   _CS_CommTo1186_SendCmd
  332: 		R_Weight_Com_Coo.pre = CS_CommTo1186_SetOpenWeight;
000763 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
000766 74A1              MOV     A,#0A1H
000768 F0                MOVX    @DPTR,A
  333: 		R_Weight_Com_Coo.now = CS_CommTo1186_SetOpenWeightStandby;
000769 904D55            MOV     DPTR,#R_Weight_Com_Coo
00076C 7408              MOV     A,#08H
00076E F0                MOVX    @DPTR,A
  334: 		uartTimeoutCnt=0;
00076F E4                CLR     A
000770 904D68            MOV     DPTR,#uartTimeoutCnt
000773 F0                MOVX    @DPTR,A
  335: 		YC_UARTClearBuffer();
000774 B192              ACALL   YC_UARTClearBuffer
  336: 		}
000776         ?C0049?CS_COMMTO1186:
  337: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetOpenWeightStandby)
000776 904D55            MOV     DPTR,#R_Weight_Com_Coo
000779 E0                MOVX    A,@DPTR
00077A B4082A            CJNE    A,#08H,?C0054?CS_COMMTO1186
  338: 		{
  339: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 5)==5)
00077D 7B01              MOV     R3,#01H
00077F 7A4D              MOV     R2,#HIGH uartRcvBuf
000781 7945              MOV     R1,#LOW uartRcvBuf
000783 7D05              MOV     R5,#05H
000785 7C00              MOV     R4,#00H
000787 F1A8              ACALL   _YC_UARTReciveDataExpected
000789 EF                MOV     A,R7
00078A 6405              XRL     A,#05H
00078C 4E                ORL     A,R6
00078D 7018              JNZ     ?C0054?CS_COMMTO1186
  340: 			{
  341: 			if(uartRcvBuf[3] == CS_CommTo1186_SetOpenWeight)    
00078F 904D48            MOV     DPTR,#uartRcvBuf+03H
000792 E0                MOVX    A,@DPTR
000793 B4A10B            CJNE    A,#0A1H,?C0052?CS_COMMTO1186
  342: 				{			
  343: 				//读到时间的操作
  344: 				//R_Debug_temp=uartRcvBuf[5];
  345: 				
  346: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
000796 E4                CLR     A
000797 904D55            MOV     DPTR,#R_Weight_Com_Coo
00079A F0                MOVX    @DPTR,A
  347: 				R_Weight_Com_Coo.sucess=true;
00079B 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
00079E 04                INC     A
00079F F0                MOVX    @DPTR,A
  348: 				
  349: 						
  350: 				}
0007A0 22                RET     
0007A1         ?C0052?CS_COMMTO1186:
  351: 			else
  352: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
0007A1 904D68            MOV     DPTR,#uartTimeoutCnt
0007A4 7415              MOV     A,#015H
0007A6 F0                MOVX    @DPTR,A
  353: 			}	
  354: 		}
  355: }
0007A7         ?C0054?CS_COMMTO1186:
0007A7 22                RET     
----- FUNCTION CS_1186Com_SetOpenWeight_Proc (END) -------


----- FUNCTION _YC_UARTReciveDataExpected (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  378: u16_t YC_UARTReciveDataExpected(u8_t* pbuff, u16_t len)
  379: {
0007A8 904DCC            MOV     DPTR,#pbuff
0007AB EB                MOV     A,R3
0007AC F0                MOVX    @DPTR,A
0007AD A3                INC     DPTR
0007AE EA                MOV     A,R2
0007AF F0                MOVX    @DPTR,A
0007B0 A3                INC     DPTR
0007B1 E9                MOV     A,R1
0007B2 F0                MOVX    @DPTR,A
0007B3 A3                INC     DPTR
0007B4 EC                MOV     A,R4
0007B5 F0                MOVX    @DPTR,A
0007B6 A3                INC     DPTR
0007B7 ED                MOV     A,R5
0007B8 F0                MOVX    @DPTR,A
  380: 	int i = 0;
  381: 	u8_t xdata* rrptr = (u8_t *)ESWAP(REG_UART_RX_PTR_R);
0007B9 E4                CLR     A
0007BA A3                INC     DPTR
0007BB F0                MOVX    @DPTR,A
0007BC A3                INC     DPTR
0007BD F0                MOVX    @DPTR,A
  382: 
0007BE 908058            MOV     DPTR,#08058H
0007C1 A3                INC     DPTR
0007C2 E0                MOVX    A,@DPTR
0007C3 FC                MOV     R4,A
0007C4 908058            MOV     DPTR,#08058H
0007C7 E0                MOVX    A,@DPTR
0007C8 FF                MOV     R7,A
0007C9 EC                MOV     A,R4
0007CA FE                MOV     R6,A
0007CB EF                MOV     A,R7
0007CC 904DD3            MOV     DPTR,#rrptr
0007CF EE                MOV     A,R6
0007D0 F0                MOVX    @DPTR,A
0007D1 A3                INC     DPTR
0007D2 EF                MOV     A,R7
0007D3 F0                MOVX    @DPTR,A
  383: 	if(ESWAP(REG_UART_RX_ITEMS)<len)
0007D4 908112            MOV     DPTR,#08112H
0007D7 A3                INC     DPTR
0007D8 E0                MOVX    A,@DPTR
0007D9 FC                MOV     R4,A
0007DA 908112            MOV     DPTR,#08112H
0007DD E0                MOVX    A,@DPTR
0007DE FF                MOV     R7,A
0007DF EC                MOV     A,R4
0007E0 FE                MOV     R6,A
0007E1 EF                MOV     A,R7
0007E2 D3                SETB    C
0007E3 904DD0            MOV     DPTR,#len+01H
0007E6 E0                MOVX    A,@DPTR
0007E7 9F                SUBB    A,R7
0007E8 904DCF            MOV     DPTR,#len
0007EB E0                MOVX    A,@DPTR
0007EC 9E                SUBB    A,R6
0007ED 4004              JC      ?C0012?YC_PERIPHERAL
  384: 	{
  385: 		return false;
0007EF E4                CLR     A
0007F0 FE                MOV     R6,A
0007F1 FF                MOV     R7,A
0007F2 22                RET     
  386: 	}
0007F3         ?C0012?YC_PERIPHERAL:
  387: 
  388: 	for(i=0;i<len;i++)
0007F3 E4                CLR     A
0007F4 904DD1            MOV     DPTR,#i
0007F7 F0                MOVX    @DPTR,A
0007F8 A3                INC     DPTR
0007F9 F0                MOVX    @DPTR,A
0007FA         ?C0014?YC_PERIPHERAL:
0007FA 904DCF            MOV     DPTR,#len
0007FD E0                MOVX    A,@DPTR
0007FE FE                MOV     R6,A
0007FF A3                INC     DPTR
000800 E0                MOVX    A,@DPTR
000801 FF                MOV     R7,A
000802 C3                CLR     C
000803 904DD2            MOV     DPTR,#i+01H
000806 E0                MOVX    A,@DPTR
000807 9F                SUBB    A,R7
000808 904DD1            MOV     DPTR,#i
00080B E0                MOVX    A,@DPTR
00080C 9E                SUBB    A,R6
00080D 4002              JC      $ + 4H
00080F 01CD              AJMP    ?C0015?YC_PERIPHERAL
  389: 	{
  390: 		memcpy(pbuff++, rrptr++, 1);
000811 904DD3            MOV     DPTR,#rrptr
000814 E4                CLR     A
000815 75F001            MOV     B,#01H
000818 1201C8            LCALL   ?C?ILDIX
00081B FA                MOV     R2,A
00081C A9F0              MOV     R1,B
00081E 7B01              MOV     R3,#01H
000820 C003              PUSH    AR3
000822 904DCC            MOV     DPTR,#pbuff
000825 E0                MOVX    A,@DPTR
000826 FB                MOV     R3,A
000827 A3                INC     DPTR
000828 E4                CLR     A
000829 75F001            MOV     B,#01H
00082C 1201C8            LCALL   ?C?ILDIX
00082F A8F0              MOV     R0,B
000831 FC                MOV     R4,A
000832 AD03              MOV     R5,AR3
000834 D003              POP     AR3
000836 7E00              MOV     R6,#00H
000838 7F01              MOV     R7,#01H
00083A 1200D3            LCALL   ?C?COPY
  391: 
  392: 		if((short)rrptr == ESWAP(REG_UART_RX_ADDR_E) + 1)		//rrptr reach the end of buffer
00083D 908056            MOV     DPTR,#08056H
000840 A3                INC     DPTR
000841 E0                MOVX    A,@DPTR
000842 FC                MOV     R4,A
000843 908056            MOV     DPTR,#08056H
000846 E0                MOVX    A,@DPTR
000847 FF                MOV     R7,A
000848 EC                MOV     A,R4
000849 FE                MOV     R6,A
00084A EF                MOV     A,R7
00084B 2401              ADD     A,#01H
00084D FF                MOV     R7,A
00084E E4                CLR     A
00084F 3E                ADDC    A,R6
000850 FE                MOV     R6,A
000851 904DD3            MOV     DPTR,#rrptr
000854 E0                MOVX    A,@DPTR
000855 FC                MOV     R4,A
000856 A3                INC     DPTR
000857 E0                MOVX    A,@DPTR
000858 B5071A            CJNE    A,AR7,?C0017?YC_PERIPHERAL
00085B EE                MOV     A,R6
00085C B50416            CJNE    A,AR4,?C0017?YC_PERIPHERAL
  393: 		{
  394: 			rrptr = (u8_t *)ESWAP(REG_UART_RX_ADDR_S);
00085F 908054            MOV     DPTR,#08054H
000862 A3                INC     DPTR
000863 E0                MOVX    A,@DPTR
000864 FC                MOV     R4,A
000865 908054            MOV     DPTR,#08054H
000868 E0                MOVX    A,@DPTR
000869 FF                MOV     R7,A
00086A EC                MOV     A,R4
00086B FE                MOV     R6,A
00086C EF                MOV     A,R7
00086D 904DD3            MOV     DPTR,#rrptr
000870 EE                MOV     A,R6
000871 F0                MOVX    @DPTR,A
000872 A3                INC     DPTR
000873 EF                MOV     A,R7
000874 F0                MOVX    @DPTR,A
  395: 		}
000875         ?C0017?YC_PERIPHERAL:
  396: 
  397: 		if((short)rrptr == ESWAP(REG_UART_RX_PTR_W) )	//read all data already
000875 908116            MOV     DPTR,#08116H
000878 A3                INC     DPTR
000879 E0                MOVX    A,@DPTR
00087A FC                MOV     R4,A
00087B 908116            MOV     DPTR,#08116H
00087E E0                MOVX    A,@DPTR
00087F FF                MOV     R7,A
000880 EC                MOV     A,R4
000881 FE                MOV     R6,A
000882 EF                MOV     A,R7
000883 904DD3            MOV     DPTR,#rrptr
000886 E0                MOVX    A,@DPTR
000887 FC                MOV     R4,A
000888 A3                INC     DPTR
000889 E0                MOVX    A,@DPTR
00088A FD                MOV     R5,A
00088B EF                MOV     A,R7
00088C 6D                XRL     A,R5
00088D 7002              JNZ     ?C0025?YC_PERIPHERAL
00088F EE                MOV     A,R6
000890 6C                XRL     A,R4
000891         ?C0025?YC_PERIPHERAL:
000891 7029              JNZ     ?C0016?YC_PERIPHERAL
  398: 		{
  399: 			REG_UART_RX_PTR_R = ESWAP((short)rrptr);
000893 904DD3            MOV     DPTR,#rrptr
000896 E0                MOVX    A,@DPTR
000897 FE                MOV     R6,A
000898 A3                INC     DPTR
000899 E0                MOVX    A,@DPTR
00089A FF                MOV     R7,A
00089B EC                MOV     A,R4
00089C FF                MOV     R7,A
00089D 33                RLC     A
00089E 95E0              SUBB    A,ACC
0008A0 AB07              MOV     R3,AR7
0008A2 ED                MOV     A,R5
0008A3 FF                MOV     R7,A
0008A4 EB                MOV     A,R3
0008A5 908058            MOV     DPTR,#08058H
0008A8 CF                XCH     A,R7
0008A9 F0                MOVX    @DPTR,A
0008AA A3                INC     DPTR
0008AB EF                MOV     A,R7
0008AC F0                MOVX    @DPTR,A
  400: 			return (i+1);
0008AD 904DD2            MOV     DPTR,#i+01H
0008B0 E0                MOVX    A,@DPTR
0008B1 2401              ADD     A,#01H
0008B3 FF                MOV     R7,A
0008B4 904DD1            MOV     DPTR,#i
0008B7 E0                MOVX    A,@DPTR
0008B8 3400              ADDC    A,#00H
0008BA FE                MOV     R6,A
0008BB 22                RET     
  401: 		}
  402: 	}
0008BC         ?C0016?YC_PERIPHERAL:
0008BC 904DD2            MOV     DPTR,#i+01H
0008BF E0                MOVX    A,@DPTR
0008C0 04                INC     A
0008C1 F0                MOVX    @DPTR,A
0008C2 7006              JNZ     ?C0026?YC_PERIPHERAL
0008C4 904DD1            MOV     DPTR,#i
0008C7 E0                MOVX    A,@DPTR
0008C8 04                INC     A
0008C9 F0                MOVX    @DPTR,A
0008CA         ?C0026?YC_PERIPHERAL:
0008CA 0207FA            LJMP    ?C0014?YC_PERIPHERAL
0008CD         ?C0015?YC_PERIPHERAL:
  403: 
  404: 	REG_UART_RX_PTR_R = ESWAP((short)rrptr);
0008CD 904DD3            MOV     DPTR,#rrptr
0008D0 E0                MOVX    A,@DPTR
0008D1 FE                MOV     R6,A
0008D2 A3                INC     DPTR
0008D3 E0                MOVX    A,@DPTR
0008D4 FF                MOV     R7,A
0008D5 FD                MOV     R5,A
0008D6 AC06              MOV     R4,AR6
0008D8 EC                MOV     A,R4
0008D9 FF                MOV     R7,A
0008DA 33                RLC     A
0008DB 95E0              SUBB    A,ACC
0008DD AB07              MOV     R3,AR7
0008DF ED                MOV     A,R5
0008E0 FF                MOV     R7,A
0008E1 EB                MOV     A,R3
0008E2 908058            MOV     DPTR,#08058H
0008E5 CF                XCH     A,R7
0008E6 F0                MOVX    @DPTR,A
0008E7 A3                INC     DPTR
0008E8 EF                MOV     A,R7
0008E9 F0                MOVX    @DPTR,A
  405: 	
  406: 	return len;
0008EA 904DCF            MOV     DPTR,#len
0008ED E0                MOVX    A,@DPTR
0008EE FE                MOV     R6,A
0008EF A3                INC     DPTR
0008F0 E0                MOVX    A,@DPTR
0008F1 FF                MOV     R7,A
  407: }
0008F2 22                RET     
----- FUNCTION _YC_UARTReciveDataExpected (END) -------


----- FUNCTION SoftTimer_10mSCallback (BEGIN) -----
 FILE: 'system.c'
   44: void SoftTimer_10mSCallback(void)
   45: {
   46: 	static u8_t count;
   47: 	YC_UtilTimerStartMs(10, SoftTimer_10mSCallback, &SoftTimer_10msTimerID);
0008F3 7BFF              MOV     R3,#0FFH
0008F5 7A08              MOV     R2,#HIGH SoftTimer_10mSCallback
0008F7 79F3              MOV     R1,#LOW SoftTimer_10mSCallback
0008F9 904DDA            MOV     DPTR,#?_YC_UtilTimerStartMs?BYTE+05H
0008FC 744E              MOV     A,#HIGH SoftTimer_10msTimerID
0008FE F0                MOVX    @DPTR,A
0008FF A3                INC     DPTR
000900 7440              MOV     A,#LOW SoftTimer_10msTimerID
000902 F0                MOVX    @DPTR,A
000903 7F0A              MOV     R7,#0AH
000905 7E00              MOV     R6,#00H
000907 1212BB            LCALL   _YC_UtilTimerStartMs
   48: 	//add user function
   49: 	if(uartTimeoutCnt<255) {
00090A 904D68            MOV     DPTR,#uartTimeoutCnt
00090D E0                MOVX    A,@DPTR
00090E C3                CLR     C
00090F 94FF              SUBB    A,#0FFH
000911 5003              JNC     ?C0001?SYSTEM
   50: 		uartTimeoutCnt++;
000913 E0                MOVX    A,@DPTR
000914 04                INC     A
000915 F0                MOVX    @DPTR,A
   51: 	}
000916         ?C0001?SYSTEM:
   52: 
   53: 
   54: 	if(count<100)
000916 904E3E            MOV     DPTR,#count
000919 E0                MOVX    A,@DPTR
00091A C3                CLR     C
00091B 9464              SUBB    A,#064H
00091D 5005              JNC     ?C0002?SYSTEM
   55: 		count++;
00091F E0                MOVX    A,@DPTR
000920 04                INC     A
000921 F0                MOVX    @DPTR,A
000922 800F              SJMP    ?C0003?SYSTEM
000924         ?C0002?SYSTEM:
   56: 	else
   57: 		{
   58: 		count=0;
000924 E4                CLR     A
000925 904E3E            MOV     DPTR,#count
000928 F0                MOVX    @DPTR,A
   59: 		CS_Scale_TimeOutProc(CS_SetTimeBase1S);
000929 7F07              MOV     R7,#07H
00092B 1215B3            LCALL   _CS_Scale_TimeOutProc
   60: 		CS_MemoryWeightClear_Timer(MemWeightTimerInc);
00092E 7F02              MOV     R7,#02H
000930 123B55            LCALL   _CS_MemoryWeightClear_Timer
   61: 		}
000933         ?C0003?SYSTEM:
   62: 		
   63: 	CS_SoftTimer(SoftTimerInc);
000933 E4                CLR     A
000934 FF                MOV     R7,A
000935 D1F4              ACALL   _CS_SoftTimer
;----                  JMP     CS_KeyScan
   64: 
   65: 	CS_KeyScan();
   66: 
----- FUNCTION SoftTimer_10mSCallback (END) -------


----- FUNCTION CS_KeyScan (BEGIN) -----
 FILE: 'CS_ScaleKey.c'
   17: void CS_KeyScan(void)
   18: {
   19: 	u8_t  keyState;
   20: 	static u8_t xdata keyState_prev=1;
   21: 	static u8_t xdata keyStateCnt;
   22: 	static u8_t xdata KeyPressDeal=0;
   23: 	static u8_t xdata KeyLongPressDeal=0;
   24: 	static u8_t xdata ShortPressCount=0;
   25: 	static u8_t xdata PressTimesCount=0;
   26: 	static u8_t xdata Press;
   27: 	
   28: 	
   29: 	keyState = YC_GPIOGetInputStatus(5);	//GPIO5	
000937 7F05              MOV     R7,#05H
000939 1211C3            LCALL   _YC_GPIOGetInputStatus
00093C E4                CLR     A
00093D 33                RLC     A
00093E FF                MOV     R7,A
;---- Variable 'keyState' assigned to Register 'R7' ----
   30: 
   31: 	if(ShortPressCount<255)		//短按计时
00093F 904E0F            MOV     DPTR,#ShortPressCount
000942 E0                MOVX    A,@DPTR
000943 C3                CLR     C
000944 94FF              SUBB    A,#0FFH
000946 5003              JNC     ?C0001?CS_SCALEKEY
   32: 		ShortPressCount++;
000948 E0                MOVX    A,@DPTR
000949 04                INC     A
00094A F0                MOVX    @DPTR,A
00094B         ?C0001?CS_SCALEKEY:
   33: 	
   34: 	if(keyState ==KEY_UP)
00094B EF                MOV     A,R7
00094C 6401              XRL     A,#01H
00094E 7052              JNZ     ?C0002?CS_SCALEKEY
   35: 		{
   36: 		keyState_prev = KEY_UP;	
000950 904E0B            MOV     DPTR,#keyState_prev
000953 04                INC     A
000954 F0                MOVX    @DPTR,A
   37: 		keyStateCnt = 0; 
000955 E4                CLR     A
000956 A3                INC     DPTR
000957 F0                MOVX    @DPTR,A
   38: 
   39: 		if(KeyLongPressDeal==1)
000958 904E0E            MOV     DPTR,#KeyLongPressDeal
00095B E0                MOVX    A,@DPTR
00095C B40105            CJNE    A,#01H,?C0003?CS_SCALEKEY
   40: 			Press = false;
00095F E4                CLR     A
000960 904E11            MOV     DPTR,#Press
000963 F0                MOVX    @DPTR,A
000964         ?C0003?CS_SCALEKEY:
   41: 		
   42: 		KeyPressDeal=0;
000964 E4                CLR     A
000965 904E0D            MOV     DPTR,#KeyPressDeal
000968 F0                MOVX    @DPTR,A
   43: 		KeyLongPressDeal=0;
000969 A3                INC     DPTR
00096A F0                MOVX    @DPTR,A
   44: 
   45: 		if(ShortPressCount>KEY_SHORT_PRESS_TIME&&PressTimesCount==1)
00096B A3                INC     DPTR
00096C E0                MOVX    A,@DPTR
00096D D3                SETB    C
00096E 9412              SUBB    A,#012H
000970 4009              JC      ?C0004?CS_SCALEKEY
000972 A3                INC     DPTR
000973 E0                MOVX    A,@DPTR
000974 B40104            CJNE    A,#01H,?C0004?CS_SCALEKEY
   46: 			{
   47: 			PressTimesCount = 0;
000977 E4                CLR     A
000978 F0                MOVX    @DPTR,A
   48: 			CS_Scale_ChangeUnit();	
000979 F132              ACALL   CS_Scale_ChangeUnit
   49: 			}
00097B         ?C0004?CS_SCALEKEY:
   50: 		
   51: 		if(Press == true)
00097B 904E11            MOV     DPTR,#Press
00097E E0                MOVX    A,@DPTR
00097F 6401              XRL     A,#01H
000981 6002              JZ      $ + 4H
000983 4116              AJMP    ?C0018?CS_SCALEKEY
   52: 			{
   53: 			Press = false;
000985 F0                MOVX    @DPTR,A
   54: 						
   55: 			//短按弹起处理
   56: 			if(ShortPressCount <KEY_SHORT_PRESS_TIME)
000986 904E0F            MOV     DPTR,#ShortPressCount
000989 E0                MOVX    A,@DPTR
00098A C3                CLR     C
00098B 9412              SUBB    A,#012H
00098D 5006              JNC     ?C0006?CS_SCALEKEY
   57: 				PressTimesCount++;
00098F A3                INC     DPTR
000990 E0                MOVX    A,@DPTR
000991 04                INC     A
000992 F0                MOVX    @DPTR,A
000993 8007              SJMP    ?C0007?CS_SCALEKEY
000995         ?C0006?CS_SCALEKEY:
   58: 			else
   59: 				{
   60: 				PressTimesCount = 0;
000995 E4                CLR     A
000996 904E10            MOV     DPTR,#PressTimesCount
000999 F0                MOVX    @DPTR,A
   61: 				CS_Scale_ChangeUnit();	
00099A F132              ACALL   CS_Scale_ChangeUnit
   62: 				}
00099C         ?C0007?CS_SCALEKEY:
   63: 			ShortPressCount =0;	
00099C E4                CLR     A
00099D 904E0F            MOV     DPTR,#ShortPressCount
0009A0 F0                MOVX    @DPTR,A
   64: 			}
   65: 		}
0009A1 22                RET     
0009A2         ?C0002?CS_SCALEKEY:
   66: 	else
   67: 		{
   68: 		if(keyState_prev == KEY_DOWN)
0009A2 904E0B            MOV     DPTR,#keyState_prev
0009A5 E0                MOVX    A,@DPTR
0009A6 7065              JNZ     ?C0009?CS_SCALEKEY
   69: 			{	
   70: 			if(keyStateCnt<255)
0009A8 A3                INC     DPTR
0009A9 E0                MOVX    A,@DPTR
0009AA C3                CLR     C
0009AB 94FF              SUBB    A,#0FFH
0009AD 5003              JNC     ?C0010?CS_SCALEKEY
   71: 				keyStateCnt++;
0009AF E0                MOVX    A,@DPTR
0009B0 04                INC     A
0009B1 F0                MOVX    @DPTR,A
0009B2         ?C0010?CS_SCALEKEY:
   72: 			 if(keyStateCnt > KEY_SHORT_PUSH_CNT)
0009B2 904E0C            MOV     DPTR,#keyStateCnt
0009B5 E0                MOVX    A,@DPTR
0009B6 FF                MOV     R7,A
0009B7 D3                SETB    C
0009B8 9403              SUBB    A,#03H
0009BA 401F              JC      ?C0011?CS_SCALEKEY
   73: 			 	{
   74: 			 	Press =true;
0009BC 904E11            MOV     DPTR,#Press
0009BF 7401              MOV     A,#01H
0009C1 F0                MOVX    @DPTR,A
   75: 				if(KeyPressDeal==0)
0009C2 904E0D            MOV     DPTR,#KeyPressDeal
0009C5 E0                MOVX    A,@DPTR
0009C6 7013              JNZ     ?C0011?CS_SCALEKEY
   76: 					{
   77: 					KeyPressDeal=1;
0009C8 04                INC     A
0009C9 F0                MOVX    @DPTR,A
   78: 					//按键刚按下的处理
   79: 					if(ShortPressCount > KEY_SHORT_PRESS_TIME)
0009CA 904E0F            MOV     DPTR,#ShortPressCount
0009CD E0                MOVX    A,@DPTR
0009CE D3                SETB    C
0009CF 9412              SUBB    A,#012H
0009D1 4003              JC      ?C0013?CS_SCALEKEY
   80: 						PressTimesCount = 0;
0009D3 E4                CLR     A
0009D4 A3                INC     DPTR
0009D5 F0                MOVX    @DPTR,A
0009D6         ?C0013?CS_SCALEKEY:
   81: 					ShortPressCount=0;
0009D6 E4                CLR     A
0009D7 904E0F            MOV     DPTR,#ShortPressCount
0009DA F0                MOVX    @DPTR,A
   82: 					}
   83: 			 	}
0009DB         ?C0011?CS_SCALEKEY:
   84: 			 if(keyStateCnt > KEY_LONG_PUSH_CNT)
0009DB EF                MOV     A,R7
0009DC D3                SETB    C
0009DD 9496              SUBB    A,#096H
0009DF 4035              JC      ?C0018?CS_SCALEKEY
   85: 			 	{
   86: 				if(KeyLongPressDeal==0)
0009E1 904E0E            MOV     DPTR,#KeyLongPressDeal
0009E4 E0                MOVX    A,@DPTR
0009E5 702F              JNZ     ?C0018?CS_SCALEKEY
   87: 					{
   88: 					//按键刚长按下的处理	
   89: 					KeyLongPressDeal=1;					
0009E7 04                INC     A
0009E8 F0                MOVX    @DPTR,A
   90: 					if(PressTimesCount==3)
0009E9 904E10            MOV     DPTR,#PressTimesCount
0009EC E0                MOVX    A,@DPTR
0009ED B40313            CJNE    A,#03H,?C0016?CS_SCALEKEY
   91: 						{
   92: 						R_Scale_state = CS_Scale_state_caling;	
0009F0 904CC5            MOV     DPTR,#R_Scale_state
0009F3 7403              MOV     A,#03H
0009F5 F0                MOVX    @DPTR,A
   93: 						CS_Scale_CaliProc(CaliProcReset);
0009F6 7F05              MOV     R7,#05H
0009F8 5117              ACALL   _CS_Scale_CaliProc
   94: 						Press = false;
0009FA E4                CLR     A
0009FB 904E11            MOV     DPTR,#Press
0009FE F0                MOVX    @DPTR,A
   95: 						keyStateCnt=0;
0009FF 904E0C            MOV     DPTR,#keyStateCnt
000A02 F0                MOVX    @DPTR,A
   96: 						}
000A03         ?C0016?CS_SCALEKEY:
   97: 					PressTimesCount = 0;
000A03 E4                CLR     A
000A04 904E10            MOV     DPTR,#PressTimesCount
000A07 F0                MOVX    @DPTR,A
   98: 					ShortPressCount =0;
000A08 904E0F            MOV     DPTR,#ShortPressCount
000A0B F0                MOVX    @DPTR,A
   99: 					}
  100: 			 	}
  101: 			}
000A0C 22                RET     
000A0D         ?C0009?CS_SCALEKEY:
  102: 		else
  103: 			{
  104: 			keyState_prev = KEY_DOWN;
000A0D E4                CLR     A
000A0E 904E0B            MOV     DPTR,#keyState_prev
000A11 F0                MOVX    @DPTR,A
  105: 			Press = false;
000A12 904E11            MOV     DPTR,#Press
000A15 F0                MOVX    @DPTR,A
  106: 			}
  107: 		}
  108: }
000A16         ?C0018?CS_SCALEKEY:
000A16 22                RET     
----- FUNCTION CS_KeyScan (END) -------


----- FUNCTION _CS_Scale_CaliProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  928: u16_t CS_Scale_CaliProc(u8_t option)
  929: {
;---- Variable 'option' assigned to Register 'R5' ----
000A17 AD07              MOV     R5,AR7
  930: 	static	u16_t xdata R_AD_CaliDot1;		//第一个标定点AD值
  931: 	static	u16_t xdata R_AD_CaliDot2;		//第二个标定点AD值
  932: 	static	u16_t xdata R_AD_CaliDot3;		//第三个标定点AD值
  933: 	static	u8_t	  xdata R_CaliState;			//标定状态
  934: 	static	u16_t xdata R_OpenWeight_Ad;	//开机重量AD值
  935: 	
  936: 	u16_t	R_AdFilTimes;	
  937: 	u16_t	weight_temp;
  938: 	u16_t	R_AD_BUF;
  939: 	u16_t	R_AD_PowerOnZero;
  940: 
  941: 	if(option==CaliProcReset)
000A19 ED                MOV     A,R5
000A1A B40508            CJNE    A,#05H,?C0130?CS_SCALE_PROC
  942: 		{
  943: 		R_CaliState=CS_CaliState_GetZero;
000A1D E4                CLR     A
000A1E 904CB1            MOV     DPTR,#R_CaliState
000A21 F0                MOVX    @DPTR,A
  944: 		return	0;
000A22 FE                MOV     R6,A
000A23 FF                MOV     R7,A
000A24 22                RET     
  945: 		}
000A25         ?C0130?CS_SCALE_PROC:
  946: 	if(option==CaliProcSetCali)
000A25 ED                MOV     A,R5
000A26 6401              XRL     A,#01H
000A28 6002              JZ      $ + 4H
000A2A 6109              AJMP    ?C0132?CS_SCALE_PROC
  947: 		{
  948: /*
  949: 		*(mem_sensor_buf )= 12;
  950: 		*(mem_sensor_buf+1) = 12;
  951: 		*(mem_sensor_buf+2 )= 12;
  952: 		*(mem_sensor_buf+3) = 12;
  953: 		*(mem_sensor_buf+4 )= 12;
  954: 		*(mem_sensor_buf+5) = 12;
  955: 		SpiFlashOperator(CS_CMD_WRITE_FLASH);
  956: 		//YC_Delay10ms(10);
  957: 		
  958: 		*(mem_sensor_buf )= 0;
  959: 		*(mem_sensor_buf+1) = 0;
  960: 		*(mem_sensor_buf+2 )= 0;
  961: 		*(mem_sensor_buf+3) = 0;
  962: 		*(mem_sensor_buf+4 )= 0;
  963: 		*(mem_sensor_buf+5) = 0;
  964: 		
  965: 		
  966: 		SpiFlashOperator( CS_CMD_READ_FLASH);
  967: 		
  968: 		
  969: 		
  970: 		R_Debug_temp=(u16_t) *(mem_sensor_buf+2 ) ;
  971: 		CS_ScaleDisplay_Debug();
  972: 		while(1);
  973: 		*/
  974: 		//YC_Delay1S(1);
  975: 		
  976: 		R_AD_BUF = *(mem_sensor_buf );
000A2C 904C08            MOV     DPTR,#04C08H
000A2F E0                MOVX    A,@DPTR
000A30 FF                MOV     R7,A
000A31 904DF9            MOV     DPTR,#R_AD_BUF
000A34 E4                CLR     A
000A35 F0                MOVX    @DPTR,A
000A36 A3                INC     DPTR
000A37 EF                MOV     A,R7
000A38 F0                MOVX    @DPTR,A
  977: 		R_AD_CaliDot1 =R_AD_BUF<<8 |  (*(mem_sensor_buf+1));
000A39 E0                MOVX    A,@DPTR
000A3A FE                MOV     R6,A
000A3B 904C09            MOV     DPTR,#04C09H
000A3E E0                MOVX    A,@DPTR
000A3F FB                MOV     R3,A
000A40 EE                MOV     A,R6
000A41 EB                MOV     A,R3
000A42 FF                MOV     R7,A
000A43 904CAB            MOV     DPTR,#R_AD_CaliDot1
000A46 EE                MOV     A,R6
000A47 F0                MOVX    @DPTR,A
000A48 A3                INC     DPTR
000A49 EF                MOV     A,R7
000A4A F0                MOVX    @DPTR,A
  978: 		R_AD_BUF = *(mem_sensor_buf+2 );
000A4B 904C0A            MOV     DPTR,#04C0AH
000A4E E0                MOVX    A,@DPTR
000A4F FF                MOV     R7,A
000A50 904DF9            MOV     DPTR,#R_AD_BUF
000A53 E4                CLR     A
000A54 F0                MOVX    @DPTR,A
000A55 A3                INC     DPTR
000A56 EF                MOV     A,R7
000A57 F0                MOVX    @DPTR,A
  979: 		R_AD_CaliDot2 =R_AD_BUF<<8 |  (*(mem_sensor_buf+3));
000A58 E0                MOVX    A,@DPTR
000A59 FE                MOV     R6,A
000A5A 904C0B            MOV     DPTR,#04C0BH
000A5D E0                MOVX    A,@DPTR
000A5E FB                MOV     R3,A
000A5F EE                MOV     A,R6
000A60 EB                MOV     A,R3
000A61 FF                MOV     R7,A
000A62 904CAD            MOV     DPTR,#R_AD_CaliDot2
000A65 EE                MOV     A,R6
000A66 F0                MOVX    @DPTR,A
000A67 A3                INC     DPTR
000A68 EF                MOV     A,R7
000A69 F0                MOVX    @DPTR,A
  980: 		R_AD_BUF = *(mem_sensor_buf+4 );
000A6A 904C0C            MOV     DPTR,#04C0CH
000A6D E0                MOVX    A,@DPTR
000A6E FF                MOV     R7,A
000A6F 904DF9            MOV     DPTR,#R_AD_BUF
000A72 E4                CLR     A
000A73 F0                MOVX    @DPTR,A
000A74 A3                INC     DPTR
000A75 EF                MOV     A,R7
000A76 F0                MOVX    @DPTR,A
  981: 		R_AD_CaliDot3 =R_AD_BUF<<8 |  (*(mem_sensor_buf+5));	
000A77 E0                MOVX    A,@DPTR
000A78 FE                MOV     R6,A
000A79 904C0D            MOV     DPTR,#04C0DH
000A7C E0                MOVX    A,@DPTR
000A7D FB                MOV     R3,A
000A7E EE                MOV     A,R6
000A7F EB                MOV     A,R3
000A80 FF                MOV     R7,A
000A81 904CAF            MOV     DPTR,#R_AD_CaliDot3
000A84 EE                MOV     A,R6
000A85 F0                MOVX    @DPTR,A
000A86 A3                INC     DPTR
000A87 EF                MOV     A,R7
000A88 F0                MOVX    @DPTR,A
  982: 
  983: 		
  984: 
  985: 		if(R_AD_CaliDot1<CS_CaliStateData_Down || R_AD_CaliDot1>CS_CaliStateData_Up)
000A89 904CAB            MOV     DPTR,#R_AD_CaliDot1
000A8C E0                MOVX    A,@DPTR
000A8D FE                MOV     R6,A
000A8E A3                INC     DPTR
000A8F E0                MOVX    A,@DPTR
000A90 FF                MOV     R7,A
000A91 C3                CLR     C
000A92 94E8              SUBB    A,#0E8H
000A94 EE                MOV     A,R6
000A95 9403              SUBB    A,#03H
000A97 4009              JC      ?C0134?CS_SCALE_PROC
000A99 D3                SETB    C
000A9A EF                MOV     A,R7
000A9B 9470              SUBB    A,#070H
000A9D EE                MOV     A,R6
000A9E 9417              SUBB    A,#017H
000AA0 404C              JC      ?C0133?CS_SCALE_PROC
000AA2         ?C0134?CS_SCALE_PROC:
  986: 			if(R_AD_CaliDot2<CS_CaliStateData_Down||R_AD_CaliDot2>CS_CaliStateData_Up)
000AA2 904CAD            MOV     DPTR,#R_AD_CaliDot2
000AA5 E0                MOVX    A,@DPTR
000AA6 FE                MOV     R6,A
000AA7 A3                INC     DPTR
000AA8 E0                MOVX    A,@DPTR
000AA9 FF                MOV     R7,A
000AAA C3                CLR     C
000AAB 94E8              SUBB    A,#0E8H
000AAD EE                MOV     A,R6
000AAE 9403              SUBB    A,#03H
000AB0 4009              JC      ?C0136?CS_SCALE_PROC
000AB2 D3                SETB    C
000AB3 EF                MOV     A,R7
000AB4 9470              SUBB    A,#070H
000AB6 EE                MOV     A,R6
000AB7 9417              SUBB    A,#017H
000AB9 4033              JC      ?C0133?CS_SCALE_PROC
000ABB         ?C0136?CS_SCALE_PROC:
  987: 				if(R_AD_CaliDot3<CS_CaliStateData_Down||R_AD_CaliDot3>CS_CaliStateData_Up)
000ABB 904CAF            MOV     DPTR,#R_AD_CaliDot3
000ABE E0                MOVX    A,@DPTR
000ABF FE                MOV     R6,A
000AC0 A3                INC     DPTR
000AC1 E0                MOVX    A,@DPTR
000AC2 FF                MOV     R7,A
000AC3 C3                CLR     C
000AC4 94E8              SUBB    A,#0E8H
000AC6 EE                MOV     A,R6
000AC7 9403              SUBB    A,#03H
000AC9 4009              JC      ?C0138?CS_SCALE_PROC
000ACB D3                SETB    C
000ACC EF                MOV     A,R7
000ACD 9470              SUBB    A,#070H
000ACF EE                MOV     A,R6
000AD0 9417              SUBB    A,#017H
000AD2 401A              JC      ?C0133?CS_SCALE_PROC
000AD4         ?C0138?CS_SCALE_PROC:
  988: 					{
  989: 					R_AD_CaliDot1	= 6000;
000AD4 904CAB            MOV     DPTR,#R_AD_CaliDot1
000AD7 7417              MOV     A,#017H
000AD9 F0                MOVX    @DPTR,A
000ADA A3                INC     DPTR
000ADB 7470              MOV     A,#070H
000ADD F0                MOVX    @DPTR,A
  990: 					R_AD_CaliDot2	= 5000;
000ADE A3                INC     DPTR
000ADF 7413              MOV     A,#013H
000AE1 F0                MOVX    @DPTR,A
000AE2 A3                INC     DPTR
000AE3 7488              MOV     A,#088H
000AE5 F0                MOVX    @DPTR,A
  991: 					R_AD_CaliDot3	= 4000;	
000AE6 A3                INC     DPTR
000AE7 740F              MOV     A,#0FH
000AE9 F0                MOVX    @DPTR,A
000AEA A3                INC     DPTR
000AEB 74A0              MOV     A,#0A0H
000AED F0                MOVX    @DPTR,A
  992: 					}	
000AEE         ?C0133?CS_SCALE_PROC:
  993: 		
  994: 		
  995: 		R_OpenWeight_Ad	= R_AD_CaliDot1/10;
000AEE 904CAB            MOV     DPTR,#R_AD_CaliDot1
000AF1 E0                MOVX    A,@DPTR
000AF2 FE                MOV     R6,A
000AF3 A3                INC     DPTR
000AF4 E0                MOVX    A,@DPTR
000AF5 FF                MOV     R7,A
000AF6 7C00              MOV     R4,#00H
000AF8 7D0A              MOV     R5,#0AH
000AFA 120173            LCALL   ?C?UIDIV
000AFD 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000B00 EE                MOV     A,R6
000B01 F0                MOVX    @DPTR,A
000B02 A3                INC     DPTR
000B03 EF                MOV     A,R7
000B04 F0                MOVX    @DPTR,A
  996: 		return	0;		
000B05 E4                CLR     A
000B06 FE                MOV     R6,A
000B07 FF                MOV     R7,A
000B08 22                RET     
  997: 		}
000B09         ?C0132?CS_SCALE_PROC:
  998: 	if(option==CaliProcSetOpenWeight)
000B09 ED                MOV     A,R5
000B0A B4061B            CJNE    A,#06H,?C0139?CS_SCALE_PROC
  999: 		{
 1000: 		R_OpenWeight_Ad	= R_AD_CaliDot1/10;
000B0D 904CAB            MOV     DPTR,#R_AD_CaliDot1
000B10 E0                MOVX    A,@DPTR
000B11 FE                MOV     R6,A
000B12 A3                INC     DPTR
000B13 E0                MOVX    A,@DPTR
000B14 FF                MOV     R7,A
000B15 7C00              MOV     R4,#00H
000B17 7D0A              MOV     R5,#0AH
000B19 120173            LCALL   ?C?UIDIV
000B1C 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000B1F EE                MOV     A,R6
000B20 F0                MOVX    @DPTR,A
000B21 A3                INC     DPTR
000B22 EF                MOV     A,R7
000B23 F0                MOVX    @DPTR,A
 1001: 		return	0;
000B24 E4                CLR     A
000B25 FE                MOV     R6,A
000B26 FF                MOV     R7,A
000B27 22                RET     
 1002: 		}
000B28         ?C0139?CS_SCALE_PROC:
 1003: 	
 1004: 	if(option==CaliProcGetOpenWeight)
000B28 ED                MOV     A,R5
000B29 B40709            CJNE    A,#07H,?C0140?CS_SCALE_PROC
 1005: 		return R_OpenWeight_Ad;
000B2C 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000B2F E0                MOVX    A,@DPTR
000B30 FE                MOV     R6,A
000B31 A3                INC     DPTR
000B32 E0                MOVX    A,@DPTR
000B33 FF                MOV     R7,A
000B34 22                RET     
000B35         ?C0140?CS_SCALE_PROC:
 1006: 	if(option==CaliProcGetCaliDot1)
000B35 ED                MOV     A,R5
000B36 B40209            CJNE    A,#02H,?C0141?CS_SCALE_PROC
 1007: 		return R_AD_CaliDot1;
000B39 904CAB            MOV     DPTR,#R_AD_CaliDot1
000B3C E0                MOVX    A,@DPTR
000B3D FE                MOV     R6,A
000B3E A3                INC     DPTR
000B3F E0                MOVX    A,@DPTR
000B40 FF                MOV     R7,A
000B41 22                RET     
000B42         ?C0141?CS_SCALE_PROC:
 1008: 	if(option==CaliProcGetCaliDot2)
000B42 ED                MOV     A,R5
000B43 B40309            CJNE    A,#03H,?C0142?CS_SCALE_PROC
 1009: 		return R_AD_CaliDot2;
000B46 904CAD            MOV     DPTR,#R_AD_CaliDot2
000B49 E0                MOVX    A,@DPTR
000B4A FE                MOV     R6,A
000B4B A3                INC     DPTR
000B4C E0                MOVX    A,@DPTR
000B4D FF                MOV     R7,A
000B4E 22                RET     
000B4F         ?C0142?CS_SCALE_PROC:
 1010: 	if(option==CaliProcGetCaliDot3)
000B4F ED                MOV     A,R5
000B50 B40409            CJNE    A,#04H,?C0143?CS_SCALE_PROC
 1011: 		return R_AD_CaliDot3;
000B53 904CAF            MOV     DPTR,#R_AD_CaliDot3
000B56 E0                MOVX    A,@DPTR
000B57 FE                MOV     R6,A
000B58 A3                INC     DPTR
000B59 E0                MOVX    A,@DPTR
000B5A FF                MOV     R7,A
000B5B 22                RET     
000B5C         ?C0143?CS_SCALE_PROC:
 1012: 	
 1013: 	R_AD_BUF = R_AD_Original;
000B5C 904CD8            MOV     DPTR,#R_AD_Original
000B5F E0                MOVX    A,@DPTR
000B60 FE                MOV     R6,A
000B61 A3                INC     DPTR
000B62 E0                MOVX    A,@DPTR
000B63 FF                MOV     R7,A
000B64 904DF9            MOV     DPTR,#R_AD_BUF
000B67 EE                MOV     A,R6
000B68 F0                MOVX    @DPTR,A
000B69 FC                MOV     R4,A
000B6A A3                INC     DPTR
000B6B EF                MOV     A,R7
000B6C F0                MOVX    @DPTR,A
000B6D FD                MOV     R5,A
 1014: 	R_AD_BUF=CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
000B6E E4                CLR     A
000B6F FF                MOV     R7,A
000B70 1237A5            LCALL   _CS_Scale_AdcFilter
000B73 904DF9            MOV     DPTR,#R_AD_BUF
000B76 EE                MOV     A,R6
000B77 F0                MOVX    @DPTR,A
000B78 FC                MOV     R4,A
000B79 A3                INC     DPTR
000B7A EF                MOV     A,R7
000B7B F0                MOVX    @DPTR,A
000B7C FD                MOV     R5,A
 1015: 	R_AdFilTimes = CS_Scale_AdcFilter(ScaleAdcFilterGetFilTimes,R_AD_BUF);
000B7D 7F02              MOV     R7,#02H
000B7F 1237A5            LCALL   _CS_Scale_AdcFilter
000B82 904DF5            MOV     DPTR,#R_AdFilTimes
000B85 EE                MOV     A,R6
000B86 F0                MOVX    @DPTR,A
000B87 A3                INC     DPTR
000B88 EF                MOV     A,R7
000B89 F0                MOVX    @DPTR,A
 1016: 	
 1017: 	
 1018: 
 1019: 	//数据稳定才处理
 1020: 		
 1021: 	if(R_CaliState==CS_CaliState_GetZero) 
000B8A 904CB1            MOV     DPTR,#R_CaliState
000B8D E0                MOVX    A,@DPTR
000B8E 7048              JNZ     ?C0144?CS_SCALE_PROC
 1022: 		{	
 1023: 
 1024: 			R_AD_CaliDot1 = R_AD_BUF;	//暂存零点用于显示
000B90 904DF9            MOV     DPTR,#R_AD_BUF
000B93 E0                MOVX    A,@DPTR
000B94 FC                MOV     R4,A
000B95 A3                INC     DPTR
000B96 E0                MOVX    A,@DPTR
000B97 FD                MOV     R5,A
000B98 904CAB            MOV     DPTR,#R_AD_CaliDot1
000B9B EC                MOV     A,R4
000B9C F0                MOVX    @DPTR,A
000B9D A3                INC     DPTR
000B9E ED                MOV     A,R5
000B9F F0                MOVX    @DPTR,A
 1025: 			if(R_AdFilTimes>=CS_Cali_Steadytimes)
000BA0 C3                CLR     C
000BA1 904DF6            MOV     DPTR,#R_AdFilTimes+01H
000BA4 E0                MOVX    A,@DPTR
000BA5 940C              SUBB    A,#0CH
000BA7 904DF5            MOV     DPTR,#R_AdFilTimes
000BAA E0                MOVX    A,@DPTR
000BAB 9400              SUBB    A,#00H
000BAD 401C              JC      ?C0145?CS_SCALE_PROC
 1026: 				{
 1027: 			CS_Scale_ZeroProc(SetPowerOnZero,R_AD_BUF);	
000BAF 7F05              MOV     R7,#05H
000BB1 12349A            LCALL   _CS_Scale_ZeroProc
 1028: 			CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000BB4 904DF9            MOV     DPTR,#R_AD_BUF
000BB7 E0                MOVX    A,@DPTR
000BB8 FC                MOV     R4,A
000BB9 A3                INC     DPTR
000BBA E0                MOVX    A,@DPTR
000BBB FD                MOV     R5,A
000BBC 7F01              MOV     R7,#01H
000BBE 1237A5            LCALL   _CS_Scale_AdcFilter
 1029: 			CS_SoftTimer(ResetSoftTimer);
000BC1 7F02              MOV     R7,#02H
000BC3 D1F4              ACALL   _CS_SoftTimer
 1030: 			R_CaliState = CS_CaliState_ShowCal1;
000BC5 904CB1            MOV     DPTR,#R_CaliState
000BC8 7401              MOV     A,#01H
000BCA F0                MOVX    @DPTR,A
 1031: 				}
000BCB         ?C0145?CS_SCALE_PROC:
 1032: 		CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_BUF);
000BCB 904DF9            MOV     DPTR,#R_AD_BUF
000BCE E0                MOVX    A,@DPTR
000BCF FC                MOV     R4,A
000BD0 A3                INC     DPTR
000BD1 E0                MOVX    A,@DPTR
000BD2 FD                MOV     R5,A
000BD3 7F21              MOV     R7,#021H
000BD5 121DCE            LCALL   _CS_ScaleDisplay_FreshBuf
 1033: 		}
000BD8         ?C0144?CS_SCALE_PROC:
 1034: 	
 1035: 	if(R_CaliState == CS_CaliState_ShowCal1)
000BD8 904CB1            MOV     DPTR,#R_CaliState
000BDB E0                MOVX    A,@DPTR
000BDC B40118            CJNE    A,#01H,?C0146?CS_SCALE_PROC
 1036: 		{
 1037: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 	
000BDF 7F01              MOV     R7,#01H
000BE1 D1F4              ACALL   _CS_SoftTimer
000BE3 EF                MOV     A,R7
000BE4 D3                SETB    C
000BE5 94C8              SUBB    A,#0C8H
000BE7 4006              JC      ?C0147?CS_SCALE_PROC
 1038: 			R_CaliState = CS_CaliState_GetCal1;
000BE9 904CB1            MOV     DPTR,#R_CaliState
000BEC 7402              MOV     A,#02H
000BEE F0                MOVX    @DPTR,A
000BEF         ?C0147?CS_SCALE_PROC:
 1039: 		CS_ScaleDisplay_FreshBuf(DisplayCal1,0);
000BEF E4                CLR     A
000BF0 FD                MOV     R5,A
000BF1 FC                MOV     R4,A
000BF2 7F81              MOV     R7,#081H
000BF4 121DCE            LCALL   _CS_ScaleDisplay_FreshBuf
 1040: 		}
000BF7         ?C0146?CS_SCALE_PROC:
 1041: 
 1042: 	if(R_CaliState==CS_CaliState_GetCal1)
000BF7 904CB1            MOV     DPTR,#R_CaliState
000BFA E0                MOVX    A,@DPTR
000BFB 6402              XRL     A,#02H
000BFD 6002              JZ      $ + 4H
000BFF 81B8              AJMP    ?C0148?CS_SCALE_PROC
 1043: 		{	
 1044: 			R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);	
000C01 FD                MOV     R5,A
000C02 FC                MOV     R4,A
000C03 FF                MOV     R7,A
000C04 12349A            LCALL   _CS_Scale_ZeroProc
000C07 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000C0A EE                MOV     A,R6
000C0B F0                MOVX    @DPTR,A
000C0C A3                INC     DPTR
000C0D EF                MOV     A,R7
000C0E F0                MOVX    @DPTR,A
 1045: 			R_AD_CaliDot1 = R_AD_BUF - R_AD_PowerOnZero;
000C0F C3                CLR     C
000C10 904DFA            MOV     DPTR,#R_AD_BUF+01H
000C13 E0                MOVX    A,@DPTR
000C14 9F                SUBB    A,R7
000C15 FF                MOV     R7,A
000C16 904DF9            MOV     DPTR,#R_AD_BUF
000C19 E0                MOVX    A,@DPTR
000C1A 9E                SUBB    A,R6
000C1B FE                MOV     R6,A
000C1C 904CAB            MOV     DPTR,#R_AD_CaliDot1
000C1F F0                MOVX    @DPTR,A
000C20 A3                INC     DPTR
000C21 EF                MOV     A,R7
000C22 F0                MOVX    @DPTR,A
 1046: 				
 1047: 			if((R_AD_CaliDot1 < R_OpenWeight_Ad)||(R_AD_BUF < R_AD_PowerOnZero))
000C23 D3                SETB    C
000C24 904CB3            MOV     DPTR,#R_OpenWeight_Ad+01H
000C27 E0                MOVX    A,@DPTR
000C28 9F                SUBB    A,R7
000C29 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000C2C E0                MOVX    A,@DPTR
000C2D 9E                SUBB    A,R6
000C2E 5015              JNC     ?C0150?CS_SCALE_PROC
000C30 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000C33 E0                MOVX    A,@DPTR
000C34 FE                MOV     R6,A
000C35 A3                INC     DPTR
000C36 E0                MOVX    A,@DPTR
000C37 FF                MOV     R7,A
000C38 C3                CLR     C
000C39 904DFA            MOV     DPTR,#R_AD_BUF+01H
000C3C E0                MOVX    A,@DPTR
000C3D 9F                SUBB    A,R7
000C3E 904DF9            MOV     DPTR,#R_AD_BUF
000C41 E0                MOVX    A,@DPTR
000C42 9E                SUBB    A,R6
000C43 5032              JNC     ?C0149?CS_SCALE_PROC
000C45         ?C0150?CS_SCALE_PROC:
 1048: 				{
 1049: 				if(R_AdFilTimes>=CS_Cali_Steadytimes)
000C45 C3                CLR     C
000C46 904DF6            MOV     DPTR,#R_AdFilTimes+01H
000C49 E0                MOVX    A,@DPTR
000C4A 940C              SUBB    A,#0CH
000C4C 904DF5            MOV     DPTR,#R_AdFilTimes
000C4F E0                MOVX    A,@DPTR
000C50 9400              SUBB    A,#00H
000C52 401A              JC      ?C0151?CS_SCALE_PROC
 1050: 					{
 1051: 					CS_Scale_ZeroProc(SetPowerOnZero,R_AD_BUF);	
000C54 904DF9            MOV     DPTR,#R_AD_BUF
000C57 E0                MOVX    A,@DPTR
000C58 FC                MOV     R4,A
000C59 A3                INC     DPTR
000C5A E0                MOVX    A,@DPTR
000C5B FD                MOV     R5,A
000C5C 7F05              MOV     R7,#05H
000C5E 12349A            LCALL   _CS_Scale_ZeroProc
 1052: 					CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000C61 904DF9            MOV     DPTR,#R_AD_BUF
000C64 E0                MOVX    A,@DPTR
000C65 FC                MOV     R4,A
000C66 A3                INC     DPTR
000C67 E0                MOVX    A,@DPTR
000C68 FD                MOV     R5,A
000C69 7F01              MOV     R7,#01H
000C6B 1237A5            LCALL   _CS_Scale_AdcFilter
 1053: 					}
000C6E         ?C0151?CS_SCALE_PROC:
 1054: 				R_AD_CaliDot1 = 0;
000C6E E4                CLR     A
000C6F 904CAB            MOV     DPTR,#R_AD_CaliDot1
000C72 F0                MOVX    @DPTR,A
000C73 A3                INC     DPTR
000C74 F0                MOVX    @DPTR,A
 1055: 				}
000C75 8034              SJMP    ?C0152?CS_SCALE_PROC
000C77         ?C0149?CS_SCALE_PROC:
 1056: 			else
 1057: 				{
 1058: 				if((R_AD_CaliDot1> 750)&&(R_AdFilTimes>=CS_Cali_Steadytimes))
000C77 D3                SETB    C
000C78 904CAC            MOV     DPTR,#R_AD_CaliDot1+01H
000C7B E0                MOVX    A,@DPTR
000C7C 94EE              SUBB    A,#0EEH
000C7E 904CAB            MOV     DPTR,#R_AD_CaliDot1
000C81 E0                MOVX    A,@DPTR
000C82 9402              SUBB    A,#02H
000C84 4025              JC      ?C0152?CS_SCALE_PROC
000C86 904DF6            MOV     DPTR,#R_AdFilTimes+01H
000C89 E0                MOVX    A,@DPTR
000C8A 940C              SUBB    A,#0CH
000C8C 904DF5            MOV     DPTR,#R_AdFilTimes
000C8F E0                MOVX    A,@DPTR
000C90 9400              SUBB    A,#00H
000C92 4017              JC      ?C0152?CS_SCALE_PROC
 1059: 					{				
 1060: 					CS_SoftTimer(ResetSoftTimer);
000C94 7F02              MOV     R7,#02H
000C96 D1F4              ACALL   _CS_SoftTimer
 1061: 					CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000C98 904DF9            MOV     DPTR,#R_AD_BUF
000C9B E0                MOVX    A,@DPTR
000C9C FC                MOV     R4,A
000C9D A3                INC     DPTR
000C9E E0                MOVX    A,@DPTR
000C9F FD                MOV     R5,A
000CA0 7F01              MOV     R7,#01H
000CA2 1237A5            LCALL   _CS_Scale_AdcFilter
 1062: 					R_CaliState = CS_CaliState_ShowCal2;
000CA5 904CB1            MOV     DPTR,#R_CaliState
000CA8 7403              MOV     A,#03H
000CAA F0                MOVX    @DPTR,A
 1063: 					}
 1064: 				}
000CAB         ?C0152?CS_SCALE_PROC:
 1065: 			CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_CaliDot1);
000CAB 904CAB            MOV     DPTR,#R_AD_CaliDot1
000CAE E0                MOVX    A,@DPTR
000CAF FC                MOV     R4,A
000CB0 A3                INC     DPTR
000CB1 E0                MOVX    A,@DPTR
000CB2 FD                MOV     R5,A
000CB3 7F21              MOV     R7,#021H
000CB5 121DCE            LCALL   _CS_ScaleDisplay_FreshBuf
 1066: 			
 1067: 		}
000CB8         ?C0148?CS_SCALE_PROC:
 1068: 
 1069: 	if(R_CaliState == CS_CaliState_ShowCal2)
000CB8 904CB1            MOV     DPTR,#R_CaliState
000CBB E0                MOVX    A,@DPTR
000CBC B40318            CJNE    A,#03H,?C0154?CS_SCALE_PROC
 1070: 		{
 1071: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 	
000CBF 7F01              MOV     R7,#01H
000CC1 D1F4              ACALL   _CS_SoftTimer
000CC3 EF                MOV     A,R7
000CC4 D3                SETB    C
000CC5 94C8              SUBB    A,#0C8H
000CC7 4006              JC      ?C0155?CS_SCALE_PROC
 1072: 			R_CaliState = CS_CaliState_GetCal2;
000CC9 904CB1            MOV     DPTR,#R_CaliState
000CCC 7404              MOV     A,#04H
000CCE F0                MOVX    @DPTR,A
000CCF         ?C0155?CS_SCALE_PROC:
 1073: 		CS_ScaleDisplay_FreshBuf(DisplayCal2,0);
000CCF E4                CLR     A
000CD0 FD                MOV     R5,A
000CD1 FC                MOV     R4,A
000CD2 7F82              MOV     R7,#082H
000CD4 121DCE            LCALL   _CS_ScaleDisplay_FreshBuf
 1074: 		}
000CD7         ?C0154?CS_SCALE_PROC:
 1075: 	
 1076: 	if(R_CaliState==CS_CaliState_GetCal2)
000CD7 904CB1            MOV     DPTR,#R_CaliState
000CDA E0                MOVX    A,@DPTR
000CDB 6404              XRL     A,#04H
000CDD 6002              JZ      $ + 4H
000CDF A17D              AJMP    ?C0156?CS_SCALE_PROC
 1077: 		{		
 1078: 			R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);		
000CE1 FD                MOV     R5,A
000CE2 FC                MOV     R4,A
000CE3 FF                MOV     R7,A
000CE4 12349A            LCALL   _CS_Scale_ZeroProc
000CE7 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000CEA EE                MOV     A,R6
000CEB F0                MOVX    @DPTR,A
000CEC A3                INC     DPTR
000CED EF                MOV     A,R7
000CEE F0                MOVX    @DPTR,A
 1079: 			weight_temp = R_AD_BUF - R_AD_PowerOnZero;
000CEF C3                CLR     C
000CF0 904DFA            MOV     DPTR,#R_AD_BUF+01H
000CF3 E0                MOVX    A,@DPTR
000CF4 9F                SUBB    A,R7
000CF5 FF                MOV     R7,A
000CF6 904DF9            MOV     DPTR,#R_AD_BUF
000CF9 E0                MOVX    A,@DPTR
000CFA 9E                SUBB    A,R6
000CFB FE                MOV     R6,A
000CFC 904DF7            MOV     DPTR,#weight_temp
000CFF F0                MOVX    @DPTR,A
000D00 A3                INC     DPTR
000D01 EF                MOV     A,R7
000D02 F0                MOVX    @DPTR,A
 1080: 					
 1081: 			if((weight_temp < R_AD_CaliDot1)||(R_AD_BUF < R_AD_PowerOnZero))
000D03 904CAB            MOV     DPTR,#R_AD_CaliDot1
000D06 E0                MOVX    A,@DPTR
000D07 FC                MOV     R4,A
000D08 A3                INC     DPTR
000D09 E0                MOVX    A,@DPTR
000D0A FD                MOV     R5,A
000D0B D3                SETB    C
000D0C 9F                SUBB    A,R7
000D0D EC                MOV     A,R4
000D0E 9E                SUBB    A,R6
000D0F 5015              JNC     ?C0158?CS_SCALE_PROC
000D11 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000D14 E0                MOVX    A,@DPTR
000D15 FE                MOV     R6,A
000D16 A3                INC     DPTR
000D17 E0                MOVX    A,@DPTR
000D18 FF                MOV     R7,A
000D19 C3                CLR     C
000D1A 904DFA            MOV     DPTR,#R_AD_BUF+01H
000D1D E0                MOVX    A,@DPTR
000D1E 9F                SUBB    A,R7
000D1F 904DF9            MOV     DPTR,#R_AD_BUF
000D22 E0                MOVX    A,@DPTR
000D23 9E                SUBB    A,R6
000D24 5009              JNC     ?C0157?CS_SCALE_PROC
000D26         ?C0158?CS_SCALE_PROC:
 1082: 				{
 1083: 				R_AD_CaliDot2 = 0;
000D26 E4                CLR     A
000D27 904CAD            MOV     DPTR,#R_AD_CaliDot2
000D2A F0                MOVX    @DPTR,A
000D2B A3                INC     DPTR
000D2C F0                MOVX    @DPTR,A
 1084: 				}
000D2D 8041              SJMP    ?C0159?CS_SCALE_PROC
000D2F         ?C0157?CS_SCALE_PROC:
 1085: 			else
 1086: 				{
 1087: 				R_AD_CaliDot2 = weight_temp -R_AD_CaliDot1;
000D2F C3                CLR     C
000D30 904DF8            MOV     DPTR,#weight_temp+01H
000D33 E0                MOVX    A,@DPTR
000D34 9D                SUBB    A,R5
000D35 FF                MOV     R7,A
000D36 904DF7            MOV     DPTR,#weight_temp
000D39 E0                MOVX    A,@DPTR
000D3A 9C                SUBB    A,R4
000D3B FE                MOV     R6,A
000D3C 904CAD            MOV     DPTR,#R_AD_CaliDot2
000D3F F0                MOVX    @DPTR,A
000D40 A3                INC     DPTR
000D41 EF                MOV     A,R7
000D42 F0                MOVX    @DPTR,A
 1088: 			
 1089: 				if((R_AD_CaliDot2> 750)&& (R_AdFilTimes>=CS_Cali_Steadytimes))
000D43 D3                SETB    C
000D44 94EE              SUBB    A,#0EEH
000D46 EE                MOV     A,R6
000D47 9402              SUBB    A,#02H
000D49 4025              JC      ?C0159?CS_SCALE_PROC
000D4B 904DF6            MOV     DPTR,#R_AdFilTimes+01H
000D4E E0                MOVX    A,@DPTR
000D4F 940C              SUBB    A,#0CH
000D51 904DF5            MOV     DPTR,#R_AdFilTimes
000D54 E0                MOVX    A,@DPTR
000D55 9400              SUBB    A,#00H
000D57 4017              JC      ?C0159?CS_SCALE_PROC
 1090: 					{
 1091: 					CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000D59 904DF9            MOV     DPTR,#R_AD_BUF
000D5C E0                MOVX    A,@DPTR
000D5D FC                MOV     R4,A
000D5E A3                INC     DPTR
000D5F E0                MOVX    A,@DPTR
000D60 FD                MOV     R5,A
000D61 7F01              MOV     R7,#01H
000D63 1237A5            LCALL   _CS_Scale_AdcFilter
 1092: 					CS_SoftTimer(ResetSoftTimer);
000D66 7F02              MOV     R7,#02H
000D68 D1F4              ACALL   _CS_SoftTimer
 1093: 					R_CaliState = CS_CaliState_ShowCal3;
000D6A 904CB1            MOV     DPTR,#R_CaliState
000D6D 7405              MOV     A,#05H
000D6F F0                MOVX    @DPTR,A
 1094: 					}
 1095: 				}
000D70         ?C0159?CS_SCALE_PROC:
 1096: 			CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_CaliDot2);
000D70 904CAD            MOV     DPTR,#R_AD_CaliDot2
000D73 E0                MOVX    A,@DPTR
000D74 FC                MOV     R4,A
000D75 A3                INC     DPTR
000D76 E0                MOVX    A,@DPTR
000D77 FD                MOV     R5,A
000D78 7F21              MOV     R7,#021H
000D7A 121DCE            LCALL   _CS_ScaleDisplay_FreshBuf
 1097: 		}
000D7D         ?C0156?CS_SCALE_PROC:
 1098: 
 1099: 	if(R_CaliState == CS_CaliState_ShowCal3)
000D7D 904CB1            MOV     DPTR,#R_CaliState
000D80 E0                MOVX    A,@DPTR
000D81 B40518            CJNE    A,#05H,?C0161?CS_SCALE_PROC
 1100: 		{
 1101: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 	
000D84 7F01              MOV     R7,#01H
000D86 D1F4              ACALL   _CS_SoftTimer
000D88 EF                MOV     A,R7
000D89 D3                SETB    C
000D8A 94C8              SUBB    A,#0C8H
000D8C 4006              JC      ?C0162?CS_SCALE_PROC
 1102: 			R_CaliState = CS_CaliState_GetCal3;
000D8E 904CB1            MOV     DPTR,#R_CaliState
000D91 7406              MOV     A,#06H
000D93 F0                MOVX    @DPTR,A
000D94         ?C0162?CS_SCALE_PROC:
 1103: 		CS_ScaleDisplay_FreshBuf(DisplayCal3,0);
000D94 E4                CLR     A
000D95 FD                MOV     R5,A
000D96 FC                MOV     R4,A
000D97 7F83              MOV     R7,#083H
000D99 121DCE            LCALL   _CS_ScaleDisplay_FreshBuf
 1104: 		}
000D9C         ?C0161?CS_SCALE_PROC:
 1105: 	
 1106: 	if(R_CaliState==CS_CaliState_GetCal3)
000D9C 904CB1            MOV     DPTR,#R_CaliState
000D9F E0                MOVX    A,@DPTR
000DA0 6406              XRL     A,#06H
000DA2 6002              JZ      $ + 4H
000DA4 C15B              AJMP    ?C0163?CS_SCALE_PROC
 1107: 		{		
 1108: 			R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);		
000DA6 FD                MOV     R5,A
000DA7 FC                MOV     R4,A
000DA8 FF                MOV     R7,A
000DA9 12349A            LCALL   _CS_Scale_ZeroProc
000DAC 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000DAF EE                MOV     A,R6
000DB0 F0                MOVX    @DPTR,A
000DB1 A3                INC     DPTR
000DB2 EF                MOV     A,R7
000DB3 F0                MOVX    @DPTR,A
 1109: 			weight_temp = R_AD_BUF - R_AD_PowerOnZero;
000DB4 C3                CLR     C
000DB5 904DFA            MOV     DPTR,#R_AD_BUF+01H
000DB8 E0                MOVX    A,@DPTR
000DB9 9F                SUBB    A,R7
000DBA FF                MOV     R7,A
000DBB 904DF9            MOV     DPTR,#R_AD_BUF
000DBE E0                MOVX    A,@DPTR
000DBF 9E                SUBB    A,R6
000DC0 FE                MOV     R6,A
000DC1 904DF7            MOV     DPTR,#weight_temp
000DC4 F0                MOVX    @DPTR,A
000DC5 A3                INC     DPTR
000DC6 EF                MOV     A,R7
000DC7 F0                MOVX    @DPTR,A
 1110: 					
 1111: 			if((weight_temp < R_AD_CaliDot1)||(R_AD_BUF < R_AD_PowerOnZero))
000DC8 904CAB            MOV     DPTR,#R_AD_CaliDot1
000DCB E0                MOVX    A,@DPTR
000DCC FC                MOV     R4,A
000DCD A3                INC     DPTR
000DCE E0                MOVX    A,@DPTR
000DCF FD                MOV     R5,A
000DD0 D3                SETB    C
000DD1 9F                SUBB    A,R7
000DD2 EC                MOV     A,R4
000DD3 9E                SUBB    A,R6
000DD4 5015              JNC     ?C0165?CS_SCALE_PROC
000DD6 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000DD9 E0                MOVX    A,@DPTR
000DDA FE                MOV     R6,A
000DDB A3                INC     DPTR
000DDC E0                MOVX    A,@DPTR
000DDD FF                MOV     R7,A
000DDE C3                CLR     C
000DDF 904DFA            MOV     DPTR,#R_AD_BUF+01H
000DE2 E0                MOVX    A,@DPTR
000DE3 9F                SUBB    A,R7
000DE4 904DF9            MOV     DPTR,#R_AD_BUF
000DE7 E0                MOVX    A,@DPTR
000DE8 9E                SUBB    A,R6
000DE9 5009              JNC     ?C0164?CS_SCALE_PROC
000DEB         ?C0165?CS_SCALE_PROC:
 1112: 				{
 1113: 				R_AD_CaliDot3 = 0;
000DEB E4                CLR     A
000DEC 904CAF            MOV     DPTR,#R_AD_CaliDot3
000DEF F0                MOVX    @DPTR,A
000DF0 A3                INC     DPTR
000DF1 F0                MOVX    @DPTR,A
 1114: 				}
000DF2 805A              SJMP    ?C0166?CS_SCALE_PROC
000DF4         ?C0164?CS_SCALE_PROC:
 1115: 			else
 1116: 				{
 1117: 				weight_temp = weight_temp -R_AD_CaliDot1;
000DF4 C3                CLR     C
000DF5 904DF8            MOV     DPTR,#weight_temp+01H
000DF8 E0                MOVX    A,@DPTR
000DF9 9D                SUBB    A,R5
000DFA FF                MOV     R7,A
000DFB 904DF7            MOV     DPTR,#weight_temp
000DFE E0                MOVX    A,@DPTR
000DFF 9C                SUBB    A,R4
000E00 FE                MOV     R6,A
000E01 F0                MOVX    @DPTR,A
000E02 A3                INC     DPTR
000E03 EF                MOV     A,R7
000E04 F0                MOVX    @DPTR,A
 1118: 
 1119: 				if(weight_temp < R_AD_CaliDot2)
000E05 904CAD            MOV     DPTR,#R_AD_CaliDot2
000E08 E0                MOVX    A,@DPTR
000E09 FC                MOV     R4,A
000E0A A3                INC     DPTR
000E0B E0                MOVX    A,@DPTR
000E0C FD                MOV     R5,A
000E0D D3                SETB    C
000E0E 9F                SUBB    A,R7
000E0F EC                MOV     A,R4
000E10 9E                SUBB    A,R6
000E11 4007              JC      ?C0167?CS_SCALE_PROC
 1120: 					{
 1121: 					R_AD_CaliDot3 = 0;
000E13 E4                CLR     A
000E14 A3                INC     DPTR
000E15 F0                MOVX    @DPTR,A
000E16 A3                INC     DPTR
000E17 F0                MOVX    @DPTR,A
 1122: 					
 1123: 					}
000E18 8034              SJMP    ?C0166?CS_SCALE_PROC
000E1A         ?C0167?CS_SCALE_PROC:
 1124: 				else
 1125: 					{
 1126: 				R_AD_CaliDot3 = weight_temp -R_AD_CaliDot2;
000E1A C3                CLR     C
000E1B 904DF8            MOV     DPTR,#weight_temp+01H
000E1E E0                MOVX    A,@DPTR
000E1F 9D                SUBB    A,R5
000E20 FF                MOV     R7,A
000E21 904DF7            MOV     DPTR,#weight_temp
000E24 E0                MOVX    A,@DPTR
000E25 9C                SUBB    A,R4
000E26 FE                MOV     R6,A
000E27 904CAF            MOV     DPTR,#R_AD_CaliDot3
000E2A F0                MOVX    @DPTR,A
000E2B A3                INC     DPTR
000E2C EF                MOV     A,R7
000E2D F0                MOVX    @DPTR,A
 1127: 			
 1128: 				if((R_AD_CaliDot3> 750)&& (R_AdFilTimes>=CS_Cali_Steadytimes))
000E2E D3                SETB    C
000E2F 94EE              SUBB    A,#0EEH
000E31 EE                MOV     A,R6
000E32 9402              SUBB    A,#02H
000E34 4018              JC      ?C0166?CS_SCALE_PROC
000E36 904DF6            MOV     DPTR,#R_AdFilTimes+01H
000E39 E0                MOVX    A,@DPTR
000E3A 940C              SUBB    A,#0CH
000E3C 904DF5            MOV     DPTR,#R_AdFilTimes
000E3F E0                MOVX    A,@DPTR
000E40 9400              SUBB    A,#00H
000E42 400A              JC      ?C0166?CS_SCALE_PROC
 1129: 					{
 1130: 					CS_SoftTimer(ResetSoftTimer);
000E44 7F02              MOV     R7,#02H
000E46 D1F4              ACALL   _CS_SoftTimer
 1131: 					R_CaliState = CS_CaliState_ShowCal4;
000E48 904CB1            MOV     DPTR,#R_CaliState
000E4B 7407              MOV     A,#07H
000E4D F0                MOVX    @DPTR,A
 1132: 					}
 1133: 					}
 1134: 				}
000E4E         ?C0166?CS_SCALE_PROC:
 1135: 			CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_CaliDot3);
000E4E 904CAF            MOV     DPTR,#R_AD_CaliDot3
000E51 E0                MOVX    A,@DPTR
000E52 FC                MOV     R4,A
000E53 A3                INC     DPTR
000E54 E0                MOVX    A,@DPTR
000E55 FD                MOV     R5,A
000E56 7F21              MOV     R7,#021H
000E58 121DCE            LCALL   _CS_ScaleDisplay_FreshBuf
 1136: 		}
000E5B         ?C0163?CS_SCALE_PROC:
 1137: 	
 1138: 	if(R_CaliState == CS_CaliState_ShowCal4)
000E5B 904CB1            MOV     DPTR,#R_CaliState
000E5E E0                MOVX    A,@DPTR
000E5F B40718            CJNE    A,#07H,?C0170?CS_SCALE_PROC
 1139: 		{
 1140: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 
000E62 7F01              MOV     R7,#01H
000E64 D1F4              ACALL   _CS_SoftTimer
000E66 EF                MOV     A,R7
000E67 D3                SETB    C
000E68 94C8              SUBB    A,#0C8H
000E6A 4006              JC      ?C0171?CS_SCALE_PROC
 1141: 			R_CaliState = CS_CaliState_SaveData;
000E6C 904CB1            MOV     DPTR,#R_CaliState
000E6F 7408              MOV     A,#08H
000E71 F0                MOVX    @DPTR,A
000E72         ?C0171?CS_SCALE_PROC:
 1142: 		CS_ScaleDisplay_FreshBuf(DisplayCal4,0);
000E72 E4                CLR     A
000E73 FD                MOV     R5,A
000E74 FC                MOV     R4,A
000E75 7F84              MOV     R7,#084H
000E77 121DCE            LCALL   _CS_ScaleDisplay_FreshBuf
 1143: 		}
000E7A         ?C0170?CS_SCALE_PROC:
 1144: 	
 1145: 	if(R_CaliState==CS_CaliState_SaveData)
000E7A 904CB1            MOV     DPTR,#R_CaliState
000E7D E0                MOVX    A,@DPTR
000E7E 6408              XRL     A,#08H
000E80 706E              JNZ     ?C0172?CS_SCALE_PROC
 1146: 		{
 1147: 		
 1148: 		R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);
000E82 FD                MOV     R5,A
000E83 FC                MOV     R4,A
000E84 FF                MOV     R7,A
000E85 12349A            LCALL   _CS_Scale_ZeroProc
000E88 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000E8B EE                MOV     A,R6
000E8C F0                MOVX    @DPTR,A
000E8D A3                INC     DPTR
000E8E EF                MOV     A,R7
000E8F F0                MOVX    @DPTR,A
 1149: 		CS_Scale_ZeroProc(SetRunningZero,R_AD_PowerOnZero);
000E90 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000E93 E0                MOVX    A,@DPTR
000E94 FC                MOV     R4,A
000E95 A3                INC     DPTR
000E96 E0                MOVX    A,@DPTR
000E97 FD                MOV     R5,A
000E98 7F06              MOV     R7,#06H
000E9A 12349A            LCALL   _CS_Scale_ZeroProc
 1150: 		R_Scale_state = CS_Scale_state_weighting;
000E9D 904CC5            MOV     DPTR,#R_Scale_state
000EA0 7401              MOV     A,#01H
000EA2 F0                MOVX    @DPTR,A
 1151: 		R_OpenWeight_Ad	=  R_AD_CaliDot1/10;
000EA3 904CAB            MOV     DPTR,#R_AD_CaliDot1
000EA6 E0                MOVX    A,@DPTR
000EA7 FA                MOV     R2,A
000EA8 A3                INC     DPTR
000EA9 E0                MOVX    A,@DPTR
000EAA 7C00              MOV     R4,#00H
000EAC 7D0A              MOV     R5,#0AH
000EAE FF                MOV     R7,A
000EAF AE02              MOV     R6,AR2
000EB1 120173            LCALL   ?C?UIDIV
000EB4 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000EB7 EE                MOV     A,R6
000EB8 F0                MOVX    @DPTR,A
000EB9 A3                INC     DPTR
000EBA EF                MOV     A,R7
000EBB F0                MOVX    @DPTR,A
 1152: 
 1153: 		/*
 1154: 		R_Debug_temp=R_AD_CaliDot2;
 1155: 		CS_ScaleDisplay_Debug();
 1156: 		while(1);
 1157: 		*/
 1158: 		
 1159: 		*(mem_sensor_buf )= HI_UINT16(R_AD_CaliDot1);
000EBC EA                MOV     A,R2
000EBD 904C08            MOV     DPTR,#04C08H
000EC0 F0                MOVX    @DPTR,A
 1160: 		*(mem_sensor_buf+1) = LO_UINT16(R_AD_CaliDot1);
000EC1 904CAB            MOV     DPTR,#R_AD_CaliDot1
000EC4 E0                MOVX    A,@DPTR
000EC5 A3                INC     DPTR
000EC6 E0                MOVX    A,@DPTR
000EC7 904C09            MOV     DPTR,#04C09H
000ECA F0                MOVX    @DPTR,A
 1161: 		*(mem_sensor_buf+2 )= HI_UINT16(R_AD_CaliDot2);
000ECB 904CAD            MOV     DPTR,#R_AD_CaliDot2
000ECE E0                MOVX    A,@DPTR
000ECF FC                MOV     R4,A
000ED0 A3                INC     DPTR
000ED1 E0                MOVX    A,@DPTR
000ED2 FD                MOV     R5,A
000ED3 EC                MOV     A,R4
000ED4 904C0A            MOV     DPTR,#04C0AH
000ED7 F0                MOVX    @DPTR,A
 1162: 		*(mem_sensor_buf+3) = LO_UINT16(R_AD_CaliDot2);
000ED8 ED                MOV     A,R5
000ED9 A3                INC     DPTR
000EDA F0                MOVX    @DPTR,A
 1163: 		*(mem_sensor_buf+4 )= HI_UINT16(R_AD_CaliDot3);
000EDB 904CAF            MOV     DPTR,#R_AD_CaliDot3
000EDE E0                MOVX    A,@DPTR
000EDF FC                MOV     R4,A
000EE0 A3                INC     DPTR
000EE1 E0                MOVX    A,@DPTR
000EE2 FD                MOV     R5,A
000EE3 EC                MOV     A,R4
000EE4 904C0C            MOV     DPTR,#04C0CH
000EE7 F0                MOVX    @DPTR,A
 1164: 		*(mem_sensor_buf+5) = LO_UINT16(R_AD_CaliDot3);
000EE8 ED                MOV     A,R5
000EE9 A3                INC     DPTR
000EEA F0                MOVX    @DPTR,A
 1165: 		SpiFlashOperator(CS_CMD_WRITE_FLASH);
000EEB 7F41              MOV     R7,#041H
000EED 1227E6            LCALL   _SpiFlashOperator
 1166: 
 1167: 		
 1168: 
 1169: 		}
000EF0         ?C0172?CS_SCALE_PROC:
 1170: 	return 0;
000EF0 E4                CLR     A
000EF1 FE                MOV     R6,A
000EF2 FF                MOV     R7,A
 1171: 	
 1172: }
000EF3 22                RET     
----- FUNCTION _CS_Scale_CaliProc (END) -------


----- FUNCTION _CS_SoftTimer (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1389: u8_t CS_SoftTimer(u8_t option)
 1390: {
;---- Variable 'option' assigned to Register 'R7' ----
 1391: 	static u8_t xdata timecount; 				//计时变量
 1392: 	static u8_t xdata B_Timeout;
 1393: 
 1394: 	if(option==ResetSoftTimer)
000EF4 EF                MOV     A,R7
000EF5 B40207            CJNE    A,#02H,?C0204?CS_SCALE_PROC
 1395: 		{
 1396: 		timecount=0;
000EF8 E4                CLR     A
000EF9 904CB8            MOV     DPTR,#timecount
000EFC F0                MOVX    @DPTR,A
 1397: 		B_Timeout = false;
000EFD A3                INC     DPTR
000EFE F0                MOVX    @DPTR,A
 1398: 		}
000EFF         ?C0204?CS_SCALE_PROC:
 1399: 
 1400: 	if(option==GetSoftTimerTime)
000EFF EF                MOV     A,R7
000F00 B40106            CJNE    A,#01H,?C0205?CS_SCALE_PROC
 1401: 		return	timecount;
000F03 904CB8            MOV     DPTR,#timecount
000F06 E0                MOVX    A,@DPTR
000F07 FF                MOV     R7,A
000F08 22                RET     
000F09         ?C0205?CS_SCALE_PROC:
 1402: 
 1403: 	if(option==SoftTimerInc)
000F09 EF                MOV     A,R7
000F0A 700C              JNZ     ?C0207?CS_SCALE_PROC
 1404: 		{
 1405: 		if(timecount<255 ) 
000F0C 904CB8            MOV     DPTR,#timecount
000F0F E0                MOVX    A,@DPTR
000F10 C3                CLR     C
000F11 94FF              SUBB    A,#0FFH
000F13 5003              JNC     ?C0207?CS_SCALE_PROC
 1406: 		timecount++;
000F15 E0                MOVX    A,@DPTR
000F16 04                INC     A
000F17 F0                MOVX    @DPTR,A
 1407: 		}
000F18         ?C0207?CS_SCALE_PROC:
 1408: 	
 1409: 	
 1410: 	if(timecount>SoftTimerTimeOut)
000F18 904CB8            MOV     DPTR,#timecount
000F1B E0                MOVX    A,@DPTR
000F1C D3                SETB    C
000F1D 9496              SUBB    A,#096H
000F1F 4004              JC      ?C0209?CS_SCALE_PROC
 1411: 		B_Timeout = true;
000F21 A3                INC     DPTR
000F22 7401              MOV     A,#01H
000F24 F0                MOVX    @DPTR,A
000F25         ?C0209?CS_SCALE_PROC:
 1412: 
 1413: 	if(option==GetIfTimeOut)
000F25 EF                MOV     A,R7
000F26 B40306            CJNE    A,#03H,?C0210?CS_SCALE_PROC
 1414: 		return	B_Timeout;
000F29 904CB9            MOV     DPTR,#B_Timeout
000F2C E0                MOVX    A,@DPTR
000F2D FF                MOV     R7,A
000F2E 22                RET     
000F2F         ?C0210?CS_SCALE_PROC:
 1415: 	
 1416: 	return 0;
000F2F 7F00              MOV     R7,#00H
 1417: 
 1418: }
000F31 22                RET     
----- FUNCTION _CS_SoftTimer (END) -------


----- FUNCTION CS_Scale_ChangeUnit (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  367: void CS_Scale_ChangeUnit()
  368: {
  369: 	switch(R_Selet_Unit)
  370: 		{
000F32 904CC6            MOV     DPTR,#R_Selet_Unit
000F35 E0                MOVX    A,@DPTR
000F36 14                DEC     A
000F37 6011              JZ      ?C0039?CS_SCALE_PROC
000F39 14                DEC     A
000F3A 601C              JZ      ?C0041?CS_SCALE_PROC
000F3C 14                DEC     A
000F3D 6012              JZ      ?C0040?CS_SCALE_PROC
000F3F 2403              ADD     A,#03H
000F41 701B              JNZ     ?C0042?CS_SCALE_PROC
  371: 		case CS_ScaleDisplay_L_kg:
  372: 			R_Selet_Unit=CS_ScaleDisplay_L_lb;
000F43         ?C0038?CS_SCALE_PROC:
  373: 			break;
000F43 904CC6            MOV     DPTR,#R_Selet_Unit
000F46 7401              MOV     A,#01H
000F48 F0                MOVX    @DPTR,A
  374: 		case CS_ScaleDisplay_L_lb:
000F49 22                RET     
  375: 			R_Selet_Unit=CS_ScaleDisplay_L_jin;
000F4A         ?C0039?CS_SCALE_PROC:
  376: 			break;
000F4A 904CC6            MOV     DPTR,#R_Selet_Unit
000F4D 7403              MOV     A,#03H
000F4F F0                MOVX    @DPTR,A
  377: 		case CS_ScaleDisplay_L_jin:
000F50 22                RET     
  378: 			R_Selet_Unit=CS_ScaleDisplay_L_gongjin;
000F51         ?C0040?CS_SCALE_PROC:
  379: 			break;
000F51 904CC6            MOV     DPTR,#R_Selet_Unit
000F54 7402              MOV     A,#02H
000F56 F0                MOVX    @DPTR,A
  380: 		case CS_ScaleDisplay_L_gongjin:
000F57 22                RET     
  381: 			R_Selet_Unit=CS_ScaleDisplay_L_kg;
000F58         ?C0041?CS_SCALE_PROC:
  382: 			break;
000F58 E4                CLR     A
000F59 904CC6            MOV     DPTR,#R_Selet_Unit
000F5C F0                MOVX    @DPTR,A
  383: 		default :
000F5D 22                RET     
  384: 			R_Selet_Unit=CS_ScaleDisplay_L_kg;
000F5E         ?C0042?CS_SCALE_PROC:
  385: 			break;
000F5E E4                CLR     A
000F5F 904CC6            MOV     DPTR,#R_Selet_Unit
000F62 F0                MOVX    @DPTR,A
  386: 		}
  387: }
  388: 
000F63 22                RET     
----- FUNCTION CS_Scale_ChangeUnit (END) -------


----- FUNCTION CS_ScaleDisplay_SteadyFlash (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  345: void CS_ScaleDisplay_SteadyFlash(void)
  346: {	 
  347: 
  348: 	u8_t xdata R_Weight_FlashTime;
  349: 
  350: 	
  351: 	if(CS_SoftTimer(GetIfTimeOut) == false)
000F64 7F03              MOV     R7,#03H
000F66 D1F4              ACALL   _CS_SoftTimer
000F68 EF                MOV     A,R7
000F69 702D              JNZ     ?C0057?CS_SCALEDISPLAY
  352: 		{
  353: 		R_Weight_FlashTime = CS_SoftTimer(GetSoftTimerTime);
000F6B 7F01              MOV     R7,#01H
000F6D D1F4              ACALL   _CS_SoftTimer
;---- Variable 'R_Weight_FlashTime' assigned to Register 'R7' ----
  354: 		   if(R_Weight_FlashTime<30) 
000F6F EF                MOV     A,R7
000F70 C3                CLR     C
000F71 941E              SUBB    A,#01EH
000F73 5003              JNC     ?C0048?CS_SCALEDISPLAY
  355: 		   	CS_ScaleDisplay_LcdBackup();
000F75 023E8D            LJMP    CS_ScaleDisplay_LcdBackup
000F78         ?C0048?CS_SCALEDISPLAY:
  356: 		    else if(R_Weight_FlashTime<60) 
000F78 EF                MOV     A,R7
000F79 C3                CLR     C
000F7A 943C              SUBB    A,#03CH
000F7C 5002              JNC     ?C0050?CS_SCALEDISPLAY
  357: 				CS_ScaleDisplay_LcdShowNoDigit();
000F7E 8019              SJMP    CS_ScaleDisplay_LcdShowNoDigit
000F80         ?C0050?CS_SCALEDISPLAY:
  358: 		    		else if(R_Weight_FlashTime<90)
000F80 EF                MOV     A,R7
000F81 C3                CLR     C
000F82 945A              SUBB    A,#05AH
000F84 5002              JNC     ?C0052?CS_SCALEDISPLAY
  359: 					CS_ScaleDisplay_LcdRestore();
000F86 802C              SJMP    CS_ScaleDisplay_LcdRestore
000F88         ?C0052?CS_SCALEDISPLAY:
  360: 		     			else if(R_Weight_FlashTime<120) 
000F88 EF                MOV     A,R7
000F89 C3                CLR     C
000F8A 9478              SUBB    A,#078H
000F8C 5002              JNC     ?C0054?CS_SCALEDISPLAY
  361: 						CS_ScaleDisplay_LcdShowNoDigit();
000F8E 8009              SJMP    CS_ScaleDisplay_LcdShowNoDigit
000F90         ?C0054?CS_SCALEDISPLAY:
  362: 		   			 	else if(R_Weight_FlashTime<150)
000F90 EF                MOV     A,R7
000F91 C3                CLR     C
000F92 9496              SUBB    A,#096H
000F94 5002              JNC     ?C0057?CS_SCALEDISPLAY
  363: 							CS_ScaleDisplay_LcdRestore();		
000F96 F1B4              ACALL   CS_ScaleDisplay_LcdRestore
  364: 		}
  365: }
000F98         ?C0057?CS_SCALEDISPLAY:
000F98 22                RET     
----- FUNCTION CS_ScaleDisplay_SteadyFlash (END) -------


----- FUNCTION CS_ScaleDisplay_LcdShowNoDigit (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  306: void CS_ScaleDisplay_LcdShowNoDigit(void)
  307: {
  308: 	CS_Lcd_Send_Data[0] &= 0x0f;
  309: 	CS_Lcd_Send_Data[1] &= 0x00;
000F99 904D28            MOV     DPTR,#CS_Lcd_Send_Data
000F9C E0                MOVX    A,@DPTR
000F9D 540F              ANL     A,#0FH
000F9F F0                MOVX    @DPTR,A
  310: 	CS_Lcd_Send_Data[2] &= 0x08;
000FA0 A3                INC     DPTR
000FA1 E0                MOVX    A,@DPTR
000FA2 E4                CLR     A
000FA3 F0                MOVX    @DPTR,A
  311: 	CS_Lcd_Send_Data[3] &= 0x08;
000FA4 A3                INC     DPTR
000FA5 E0                MOVX    A,@DPTR
000FA6 5408              ANL     A,#08H
000FA8 F0                MOVX    @DPTR,A
  312: 	CS_Lcd_Send_Data[4] &= 0xf0;
000FA9 A3                INC     DPTR
000FAA E0                MOVX    A,@DPTR
000FAB 5408              ANL     A,#08H
000FAD F0                MOVX    @DPTR,A
  313: }
000FAE A3                INC     DPTR
000FAF E0                MOVX    A,@DPTR
000FB0 54F0              ANL     A,#0F0H
000FB2 F0                MOVX    @DPTR,A
  314: 
000FB3 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdShowNoDigit (END) -------


----- FUNCTION CS_ScaleDisplay_LcdRestore (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  335: void CS_ScaleDisplay_LcdRestore(void)
  336: {
  337: 	CS_Lcd_Send_Data[0] = CS_Lcd_Send_Data_BAK[0];
  338: 	CS_Lcd_Send_Data[1] = CS_Lcd_Send_Data_BAK[1];
000FB4 904D1D            MOV     DPTR,#CS_Lcd_Send_Data_BAK
000FB7 E0                MOVX    A,@DPTR
000FB8 904D28            MOV     DPTR,#CS_Lcd_Send_Data
000FBB F0                MOVX    @DPTR,A
  339: 	CS_Lcd_Send_Data[2] = CS_Lcd_Send_Data_BAK[2];
000FBC 904D1E            MOV     DPTR,#CS_Lcd_Send_Data_BAK+01H
000FBF E0                MOVX    A,@DPTR
000FC0 904D29            MOV     DPTR,#CS_Lcd_Send_Data+01H
000FC3 F0                MOVX    @DPTR,A
  340: 	CS_Lcd_Send_Data[3] = CS_Lcd_Send_Data_BAK[3];
000FC4 904D1F            MOV     DPTR,#CS_Lcd_Send_Data_BAK+02H
000FC7 E0                MOVX    A,@DPTR
000FC8 904D2A            MOV     DPTR,#CS_Lcd_Send_Data+02H
000FCB F0                MOVX    @DPTR,A
  341: 	CS_Lcd_Send_Data[4] = CS_Lcd_Send_Data_BAK[4];
000FCC 904D20            MOV     DPTR,#CS_Lcd_Send_Data_BAK+03H
000FCF E0                MOVX    A,@DPTR
000FD0 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
000FD3 F0                MOVX    @DPTR,A
  342: }
000FD4 904D21            MOV     DPTR,#CS_Lcd_Send_Data_BAK+04H
000FD7 E0                MOVX    A,@DPTR
000FD8 904D2C            MOV     DPTR,#CS_Lcd_Send_Data+04H
000FDB F0                MOVX    @DPTR,A
  343: 
000FDC 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdRestore (END) -------


----- FUNCTION _CS_Scale_GetWeight (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  334: void CS_Scale_GetWeight(u16_t R_AD_BUF)
  335: {
000FDD 904DA0            MOV     DPTR,#R_AD_BUF
000FE0 EE                MOV     A,R6
000FE1 F0                MOVX    @DPTR,A
000FE2 A3                INC     DPTR
000FE3 EF                MOV     A,R7
000FE4 F0                MOVX    @DPTR,A
  336: 	u32_t	ad_temp;
  337: 	u16_t	ad_cal;
  338: 	u16_t	CaliDot1,CaliDot2,CaliDot3;
  339: 	
  340: 	CaliDot1 =CS_Scale_CaliProc(CaliProcGetCaliDot1);
000FE5 7F02              MOV     R7,#02H
000FE7 5117              ACALL   _CS_Scale_CaliProc
000FE9 904DA8            MOV     DPTR,#CaliDot1
000FEC EE                MOV     A,R6
000FED F0                MOVX    @DPTR,A
000FEE A3                INC     DPTR
000FEF EF                MOV     A,R7
000FF0 F0                MOVX    @DPTR,A
  341: 	CaliDot2 =CS_Scale_CaliProc(CaliProcGetCaliDot2);
000FF1 7F03              MOV     R7,#03H
000FF3 5117              ACALL   _CS_Scale_CaliProc
000FF5 904DAA            MOV     DPTR,#CaliDot2
000FF8 EE                MOV     A,R6
000FF9 F0                MOVX    @DPTR,A
000FFA A3                INC     DPTR
000FFB EF                MOV     A,R7
000FFC F0                MOVX    @DPTR,A
  342: 	CaliDot3 =CS_Scale_CaliProc(CaliProcGetCaliDot3);
000FFD 7F04              MOV     R7,#04H
000FFF 120A17            LCALL   _CS_Scale_CaliProc
001002 904DAC            MOV     DPTR,#CaliDot3
001005 EE                MOV     A,R6
001006 F0                MOVX    @DPTR,A
001007 A3                INC     DPTR
001008 EF                MOV     A,R7
001009 F0                MOVX    @DPTR,A
  343: 	
  344: 	if(R_AD_BUF <= CaliDot1 )
00100A 904DA8            MOV     DPTR,#CaliDot1
00100D E0                MOVX    A,@DPTR
00100E FE                MOV     R6,A
00100F A3                INC     DPTR
001010 E0                MOVX    A,@DPTR
001011 FF                MOV     R7,A
001012 904DA0            MOV     DPTR,#R_AD_BUF
001015 E0                MOVX    A,@DPTR
001016 FC                MOV     R4,A
001017 A3                INC     DPTR
001018 E0                MOVX    A,@DPTR
001019 FD                MOV     R5,A
00101A D3                SETB    C
00101B 9F                SUBB    A,R7
00101C EC                MOV     A,R4
00101D 9E                SUBB    A,R6
00101E 5033              JNC     ?C0034?CS_SCALE_PROC
  345: 		{
  346: 		ad_temp = (u32_t)R_AD_BUF  * 5000;	
001020 7E13              MOV     R6,#013H
001022 7F88              MOV     R7,#088H
001024 1203C8            LCALL   ?C?LIMUL
001027 A3                INC     DPTR
001028 120332            LCALL   ?C?LSTXDATA
  347: 		R_UnitWeight.origin = ad_temp / CaliDot1;
00102B 904DA8            MOV     DPTR,#CaliDot1
00102E E0                MOVX    A,@DPTR
00102F FE                MOV     R6,A
001030 A3                INC     DPTR
001031 E0                MOVX    A,@DPTR
001032 FF                MOV     R7,A
001033 FB                MOV     R3,A
001034 AA06              MOV     R2,AR6
001036 E4                CLR     A
001037 F9                MOV     R1,A
001038 F8                MOV     R0,A
001039 904DA2            MOV     DPTR,#ad_temp
00103C E0                MOVX    A,@DPTR
00103D FC                MOV     R4,A
00103E A3                INC     DPTR
00103F E0                MOVX    A,@DPTR
001040 FD                MOV     R5,A
001041 A3                INC     DPTR
001042 E0                MOVX    A,@DPTR
001043 FE                MOV     R6,A
001044 A3                INC     DPTR
001045 E0                MOVX    A,@DPTR
001046 FF                MOV     R7,A
001047 120269            LCALL   ?C?ULDIV
00104A 904CC9            MOV     DPTR,#R_UnitWeight
00104D EE                MOV     A,R6
00104E F0                MOVX    @DPTR,A
00104F A3                INC     DPTR
001050 EF                MOV     A,R7
001051 F0                MOVX    @DPTR,A
001052 22                RET     
  348: 		return;
  349: 		}
001053         ?C0034?CS_SCALE_PROC:
  350: 	ad_cal = R_AD_BUF - CaliDot1;
001053 904DA8            MOV     DPTR,#CaliDot1
001056 E0                MOVX    A,@DPTR
001057 FE                MOV     R6,A
001058 A3                INC     DPTR
001059 E0                MOVX    A,@DPTR
00105A FF                MOV     R7,A
00105B C3                CLR     C
00105C 904DA1            MOV     DPTR,#R_AD_BUF+01H
00105F E0                MOVX    A,@DPTR
001060 9F                SUBB    A,R7
001061 FF                MOV     R7,A
001062 904DA0            MOV     DPTR,#R_AD_BUF
001065 E0                MOVX    A,@DPTR
001066 9E                SUBB    A,R6
001067 FE                MOV     R6,A
001068 904DA6            MOV     DPTR,#ad_cal
00106B F0                MOVX    @DPTR,A
00106C A3                INC     DPTR
00106D EF                MOV     A,R7
00106E F0                MOVX    @DPTR,A
  351: 
  352: 	if(ad_cal <=CaliDot2)
00106F C3                CLR     C
001070 904DAB            MOV     DPTR,#CaliDot2+01H
001073 E0                MOVX    A,@DPTR
001074 9F                SUBB    A,R7
001075 904DAA            MOV     DPTR,#CaliDot2
001078 E0                MOVX    A,@DPTR
001079 9E                SUBB    A,R6
00107A 4043              JC      ?C0036?CS_SCALE_PROC
  353: 		{
  354: 		ad_temp = (u32_t)ad_cal  * 5000;	
00107C 904DA6            MOV     DPTR,#ad_cal
00107F E0                MOVX    A,@DPTR
001080 FE                MOV     R6,A
001081 A3                INC     DPTR
001082 E0                MOVX    A,@DPTR
001083 FF                MOV     R7,A
001084 7C13              MOV     R4,#013H
001086 7D88              MOV     R5,#088H
001088 1203C8            LCALL   ?C?LIMUL
00108B 904DA2            MOV     DPTR,#ad_temp
00108E 120332            LCALL   ?C?LSTXDATA
  355: 		R_UnitWeight.origin = ad_temp / CaliDot2 +5000 ;
001091 904DAA            MOV     DPTR,#CaliDot2
001094 E0                MOVX    A,@DPTR
001095 FE                MOV     R6,A
001096 A3                INC     DPTR
001097 E0                MOVX    A,@DPTR
001098 FF                MOV     R7,A
001099 FB                MOV     R3,A
00109A AA06              MOV     R2,AR6
00109C E4                CLR     A
00109D F9                MOV     R1,A
00109E F8                MOV     R0,A
00109F 904DA2            MOV     DPTR,#ad_temp
0010A2 E0                MOVX    A,@DPTR
0010A3 FC                MOV     R4,A
0010A4 A3                INC     DPTR
0010A5 E0                MOVX    A,@DPTR
0010A6 FD                MOV     R5,A
0010A7 A3                INC     DPTR
0010A8 E0                MOVX    A,@DPTR
0010A9 FE                MOV     R6,A
0010AA A3                INC     DPTR
0010AB E0                MOVX    A,@DPTR
0010AC FF                MOV     R7,A
0010AD 120269            LCALL   ?C?ULDIV
0010B0 EF                MOV     A,R7
0010B1 2488              ADD     A,#088H
0010B3 FF                MOV     R7,A
0010B4 EE                MOV     A,R6
0010B5 3413              ADDC    A,#013H
0010B7 904CC9            MOV     DPTR,#R_UnitWeight
0010BA F0                MOVX    @DPTR,A
0010BB A3                INC     DPTR
0010BC EF                MOV     A,R7
0010BD F0                MOVX    @DPTR,A
0010BE 22                RET     
  356: 		return;
  357: 		}
0010BF         ?C0036?CS_SCALE_PROC:
  358: 	
  359: 	ad_cal  = R_AD_BUF - CaliDot1 - CaliDot2 ;	
0010BF 904DA8            MOV     DPTR,#CaliDot1
0010C2 E0                MOVX    A,@DPTR
0010C3 FE                MOV     R6,A
0010C4 A3                INC     DPTR
0010C5 E0                MOVX    A,@DPTR
0010C6 FF                MOV     R7,A
0010C7 C3                CLR     C
0010C8 904DA1            MOV     DPTR,#R_AD_BUF+01H
0010CB E0                MOVX    A,@DPTR
0010CC 9F                SUBB    A,R7
0010CD FF                MOV     R7,A
0010CE 904DA0            MOV     DPTR,#R_AD_BUF
0010D1 E0                MOVX    A,@DPTR
0010D2 9E                SUBB    A,R6
0010D3 FE                MOV     R6,A
0010D4 904DAA            MOV     DPTR,#CaliDot2
0010D7 E0                MOVX    A,@DPTR
0010D8 FC                MOV     R4,A
0010D9 A3                INC     DPTR
0010DA E0                MOVX    A,@DPTR
0010DB FD                MOV     R5,A
0010DC C3                CLR     C
0010DD EF                MOV     A,R7
0010DE 9D                SUBB    A,R5
0010DF FF                MOV     R7,A
0010E0 EE                MOV     A,R6
0010E1 9C                SUBB    A,R4
0010E2 904DA6            MOV     DPTR,#ad_cal
0010E5 F0                MOVX    @DPTR,A
0010E6 A3                INC     DPTR
0010E7 EF                MOV     A,R7
0010E8 F0                MOVX    @DPTR,A
  360: 	ad_temp = (u32_t)ad_cal  * 5000;	
0010E9 904DA6            MOV     DPTR,#ad_cal
0010EC E0                MOVX    A,@DPTR
0010ED FE                MOV     R6,A
0010EE A3                INC     DPTR
0010EF E0                MOVX    A,@DPTR
0010F0 FF                MOV     R7,A
0010F1 7C13              MOV     R4,#013H
0010F3 7D88              MOV     R5,#088H
0010F5 1203C8            LCALL   ?C?LIMUL
0010F8 904DA2            MOV     DPTR,#ad_temp
0010FB 120332            LCALL   ?C?LSTXDATA
  361: 	R_UnitWeight.origin = ad_temp /CaliDot3 +10000 ;
0010FE 904DAC            MOV     DPTR,#CaliDot3
001101 E0                MOVX    A,@DPTR
001102 FE                MOV     R6,A
001103 A3                INC     DPTR
001104 E0                MOVX    A,@DPTR
001105 FF                MOV     R7,A
001106 FB                MOV     R3,A
001107 AA06              MOV     R2,AR6
001109 E4                CLR     A
00110A F9                MOV     R1,A
00110B F8                MOV     R0,A
00110C 904DA2            MOV     DPTR,#ad_temp
00110F E0                MOVX    A,@DPTR
001110 FC                MOV     R4,A
001111 A3                INC     DPTR
001112 E0                MOVX    A,@DPTR
001113 FD                MOV     R5,A
001114 A3                INC     DPTR
001115 E0                MOVX    A,@DPTR
001116 FE                MOV     R6,A
001117 A3                INC     DPTR
001118 E0                MOVX    A,@DPTR
001119 FF                MOV     R7,A
00111A 120269            LCALL   ?C?ULDIV
00111D EF                MOV     A,R7
00111E 2410              ADD     A,#010H
001120 FF                MOV     R7,A
001121 EE                MOV     A,R6
001122 3427              ADDC    A,#027H
001124 904CC9            MOV     DPTR,#R_UnitWeight
001127 F0                MOVX    @DPTR,A
001128 A3                INC     DPTR
001129 EF                MOV     A,R7
00112A F0                MOVX    @DPTR,A
  362: 
  363: 	
  364: }
00112B 22                RET     
----- FUNCTION _CS_Scale_GetWeight (END) -------


----- FUNCTION systemInit (BEGIN) -----
 FILE: 'system.c'
   69: void systemInit(void)
   70: {
   71: 	LPM_DISABLE();
   72: 	if(*mem_poweron_flag == CS_POWERON_FLAG		//poweron or reset
00112C 9049FE            MOV     DPTR,#049FEH
00112F E4                CLR     A
001130 F0                MOVX    @DPTR,A
   73: 	/*|| *mem_poweron_flag == CS_IOWAKE_FLAG*/) {		//iowake from sleep
001131 9049FC            MOV     DPTR,#049FCH
001134 E0                MOVX    A,@DPTR
001135 6410              XRL     A,#010H
001137 704E              JNZ     ?C0005?SYSTEM
   74: 		sys_state = SYS_ST_RUN;
   75: 		R_Scale_state = CS_Scale_state_init;
001139 904E5B            MOV     DPTR,#sys_state
00113C 7402              MOV     A,#02H
00113E F0                MOVX    @DPTR,A
   76: 
00113F E4                CLR     A
001140 904CC5            MOV     DPTR,#R_Scale_state
001143 F0                MOVX    @DPTR,A
   77: 		QueueInit();
001144 F1D3              ACALL   QueueInit
   78: 		//read spiflash data,save to buffer
   79: 		SpiFlashOperator(CS_CMD_READ_FLASH);
001146 7F40              MOV     R7,#040H
001148 1227E6            LCALL   _SpiFlashOperator
   80: 		bleConnStatus = BLE_STATUS_DISCONN;
00114B E4                CLR     A
00114C 904C5B            MOV     DPTR,#bleConnStatus
00114F F0                MOVX    @DPTR,A
   81: 		if(deviceInfo.registerFlag != DEVICE_REGISTERED)
001150 904C06            MOV     DPTR,#deviceInfo
001153 E0                MOVX    A,@DPTR
001154 6401              XRL     A,#01H
001156 600B              JZ      ?C0006?SYSTEM
   82: 		{
   83: 			xmemset(mem_register_buf, 0, sizeof(deviceInfo));
001158 7B0A              MOV     R3,#0AH
00115A E4                CLR     A
00115B FD                MOV     R5,A
00115C 7F0E              MOV     R7,#0EH
00115E 7E4C              MOV     R6,#04CH
001160 1227AA            LCALL   _xmemset
   84: 		}
001163         ?C0006?SYSTEM:
   85: 		*(mem_le_adv_data + 13) = deviceInfo.registerFlag;
001163 904C06            MOV     DPTR,#deviceInfo
001166 E0                MOVX    A,@DPTR
001167 9043E7            MOV     DPTR,#043E7H
00116A F0                MOVX    @DPTR,A
   86: 			
   87: 		YC_UtilTimerInit();
00116B 31F8              ACALL   YC_UtilTimerInit
   88: 		//YC_UtilTimerStart(1, SoftTimer_1SCallback, &SoftTimer_1STimerID);
   89: 		YC_UtilTimerStartMs(10, SoftTimer_10mSCallback, &SoftTimer_10msTimerID);
00116D 7BFF              MOV     R3,#0FFH
00116F 7A08              MOV     R2,#HIGH SoftTimer_10mSCallback
001171 79F3              MOV     R1,#LOW SoftTimer_10mSCallback
001173 904DDA            MOV     DPTR,#?_YC_UtilTimerStartMs?BYTE+05H
001176 744E              MOV     A,#HIGH SoftTimer_10msTimerID
001178 F0                MOVX    @DPTR,A
001179 A3                INC     DPTR
00117A 7440              MOV     A,#LOW SoftTimer_10msTimerID
00117C F0                MOVX    @DPTR,A
00117D 7F0A              MOV     R7,#0AH
00117F 7E00              MOV     R6,#00H
001181 51BB              ACALL   _YC_UtilTimerStartMs
   90: 		CS_Scale_PowerOn();	
001183 71FA              ACALL   CS_Scale_PowerOn
   91: 		
   92: 	}
001185 8036              SJMP    ?C0007?SYSTEM
001187         ?C0005?SYSTEM:
   93: 	else {	//wake from LPM mode
   94: 		if(YC_GPIOGetInputStatus(5) == 0 ||	//GPIO5, key is  down	
001187 7F05              MOV     R7,#05H
001189 31C3              ACALL   _YC_GPIOGetInputStatus
00118B 5006              JNC     ?C0009?SYSTEM
00118D 7F1B              MOV     R7,#01BH
00118F 31C3              ACALL   _YC_GPIOGetInputStatus
001191 4024              JC      ?C0008?SYSTEM
001193         ?C0009?SYSTEM:
   95: 		YC_GPIOGetInputStatus(27) == 0) {	//GPIO27, scale wakeup
   96: 			sys_state = SYS_ST_RUN;
001193 904E5B            MOV     DPTR,#sys_state
001196 7402              MOV     A,#02H
001198 F0                MOVX    @DPTR,A
   97: 			R_Scale_state = CS_Scale_state_standby;
001199 904CC5            MOV     DPTR,#R_Scale_state
00119C F0                MOVX    @DPTR,A
   98: 			YC_UtilTimerInit();
00119D 31F8              ACALL   YC_UtilTimerInit
   99: 			//YC_UtilTimerStart(1, SoftTimer_1SCallback, &SoftTimer_1STimerID);
  100: 			YC_UtilTimerStartMs(10, SoftTimer_10mSCallback, &SoftTimer_10msTimerID);
00119F 7BFF              MOV     R3,#0FFH
0011A1 7A08              MOV     R2,#HIGH SoftTimer_10mSCallback
0011A3 79F3              MOV     R1,#LOW SoftTimer_10mSCallback
0011A5 904DDA            MOV     DPTR,#?_YC_UtilTimerStartMs?BYTE+05H
0011A8 744E              MOV     A,#HIGH SoftTimer_10msTimerID
0011AA F0                MOVX    @DPTR,A
0011AB A3                INC     DPTR
0011AC 7440              MOV     A,#LOW SoftTimer_10msTimerID
0011AE F0                MOVX    @DPTR,A
0011AF 7F0A              MOV     R7,#0AH
0011B1 7E00              MOV     R6,#00H
0011B3 51BB              ACALL   _YC_UtilTimerStartMs
  101: 			//CS_Scale_PowerOn();	
  102: 
  103: 			//R_Debug_temp=R_Scale_state;
  104: 			//CS_ScaleDisplay_Debug();
  105: 			//while(1);
  106: 		}
0011B5 8006              SJMP    ?C0007?SYSTEM
0011B7         ?C0008?SYSTEM:
  107: 		else {	//remote bluetooth wakeup
  108: 			sys_state = SYS_ST_IDLE;
0011B7 904E5B            MOV     DPTR,#sys_state
0011BA 7401              MOV     A,#01H
0011BC F0                MOVX    @DPTR,A
  109: 		}
  110: 	}
0011BD         ?C0007?SYSTEM:
  111: 	*mem_poweron_flag = CS_NULL_FLAG;
0011BD 9049FC            MOV     DPTR,#049FCH
0011C0 E4                CLR     A
0011C1 F0                MOVX    @DPTR,A
  112: }
0011C2 22                RET     
----- FUNCTION systemInit (END) -------


----- FUNCTION _YC_GPIOGetInputStatus (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  140: bool YC_GPIOGetInputStatus(u8_t gpio_num)
  141: {
;---- Variable 'gpio_num' assigned to Register 'R7' ----
  142: 	u8_t queue, group;
  143: 
  144: 	queue = (gpio_num & 7);
0011C3 EF                MOV     A,R7
0011C4 5407              ANL     A,#07H
0011C6 FE                MOV     R6,A
;---- Variable 'queue' assigned to Register 'R6' ----
  145: 	group = (gpio_num>>3 & 3);
0011C7 EF                MOV     A,R7
0011C8 13                RRC     A
0011C9 13                RRC     A
0011CA 13                RRC     A
0011CB 5403              ANL     A,#03H
0011CD FF                MOV     R7,A
;---- Variable 'group' assigned to Register 'R7' ----
  146: 
  147: 	return (REG_GPIO_IN(group) & (1<<queue));
0011CE 241C              ADD     A,#01CH
0011D0 FD                MOV     R5,A
0011D1 E4                CLR     A
0011D2 3481              ADDC    A,#081H
0011D4 8D82              MOV     DPL,R5
0011D6 F583              MOV     DPH,A
0011D8 E0                MOVX    A,@DPTR
0011D9 FD                MOV     R5,A
0011DA 7C00              MOV     R4,#00H
0011DC AF06              MOV     R7,AR6
0011DE 7401              MOV     A,#01H
0011E0 7E00              MOV     R6,#00H
0011E2 A807              MOV     R0,AR7
0011E4 08                INC     R0
0011E5 8005              SJMP    ?C0021?YC_PERIPHERAL
0011E7         ?C0020?YC_PERIPHERAL:
0011E7 C3                CLR     C
0011E8 33                RLC     A
0011E9 CE                XCH     A,R6
0011EA 33                RLC     A
0011EB CE                XCH     A,R6
0011EC         ?C0021?YC_PERIPHERAL:
0011EC D8F9              DJNZ    R0,?C0020?YC_PERIPHERAL
0011EE FF                MOV     R7,A
0011EF EE                MOV     A,R6
0011F0 5C                ANL     A,R4
0011F1 FE                MOV     R6,A
0011F2 EF                MOV     A,R7
0011F3 5D                ANL     A,R5
0011F4 4E                ORL     A,R6
0011F5 24FF              ADD     A,#0FFH
  148: }
0011F7 22                RET     
----- FUNCTION _YC_GPIOGetInputStatus (END) -------


----- FUNCTION YC_UtilTimerInit (BEGIN) -----
 FILE: 'YC_Sys.c'
    8: void YC_UtilTimerInit(void)
    9: {
   10: 	u8_t i;
   11: 	
   12: 	YC_UtilTimer.timer_flages = 0;
0011F8 E4                CLR     A
0011F9 904CDB            MOV     DPTR,#YC_UtilTimer
0011FC F0                MOVX    @DPTR,A
   13: 	YC_UtilTimer.last_timer = YC_CLK_N;
0011FD 908101            MOV     DPTR,#08101H
001200 E0                MOVX    A,@DPTR
001201 FF                MOV     R7,A
001202 E4                CLR     A
001203 FC                MOV     R4,A
001204 FD                MOV     R5,A
001205 FE                MOV     R6,A
001206 7808              MOV     R0,#08H
001208 12031F            LCALL   ?C?LSHL
00120B A804              MOV     R0,AR4
00120D A905              MOV     R1,AR5
00120F AA06              MOV     R2,AR6
001211 AB07              MOV     R3,AR7
001213 908100            MOV     DPTR,#08100H
001216 E0                MOVX    A,@DPTR
001217 FF                MOV     R7,A
001218 E4                CLR     A
001219 EB                MOV     A,R3
00121A 4F                ORL     A,R7
00121B FF                MOV     R7,A
00121C EA                MOV     A,R2
00121D FE                MOV     R6,A
00121E E9                MOV     A,R1
00121F FD                MOV     R5,A
001220 E8                MOV     A,R0
001221 FC                MOV     R4,A
001222 C004              PUSH    AR4
001224 C005              PUSH    AR5
001226 C006              PUSH    AR6
001228 C007              PUSH    AR7
00122A 908102            MOV     DPTR,#08102H
00122D E0                MOVX    A,@DPTR
00122E FF                MOV     R7,A
00122F E4                CLR     A
001230 FC                MOV     R4,A
001231 FD                MOV     R5,A
001232 FE                MOV     R6,A
001233 7810              MOV     R0,#010H
001235 12031F            LCALL   ?C?LSHL
001238 D003              POP     AR3
00123A D002              POP     AR2
00123C D001              POP     AR1
00123E D000              POP     AR0
001240 EF                MOV     A,R7
001241 4B                ORL     A,R3
001242 FF                MOV     R7,A
001243 EE                MOV     A,R6
001244 4A                ORL     A,R2
001245 FE                MOV     R6,A
001246 ED                MOV     A,R5
001247 49                ORL     A,R1
001248 FD                MOV     R5,A
001249 EC                MOV     A,R4
00124A 48                ORL     A,R0
00124B FC                MOV     R4,A
00124C C004              PUSH    AR4
00124E C005              PUSH    AR5
001250 C006              PUSH    AR6
001252 C007              PUSH    AR7
001254 A3                INC     DPTR
001255 E0                MOVX    A,@DPTR
001256 FF                MOV     R7,A
001257 E4                CLR     A
001258 FC                MOV     R4,A
001259 FD                MOV     R5,A
00125A FE                MOV     R6,A
00125B 7818              MOV     R0,#018H
00125D 12031F            LCALL   ?C?LSHL
001260 D003              POP     AR3
001262 D002              POP     AR2
001264 D001              POP     AR1
001266 D000              POP     AR0
001268 EF                MOV     A,R7
001269 4B                ORL     A,R3
00126A FF                MOV     R7,A
00126B EE                MOV     A,R6
00126C 4A                ORL     A,R2
00126D FE                MOV     R6,A
00126E ED                MOV     A,R5
00126F 49                ORL     A,R1
001270 FD                MOV     R5,A
001271 EC                MOV     A,R4
001272 48                ORL     A,R0
001273 FC                MOV     R4,A
001274 904D14            MOV     DPTR,#YC_UtilTimer+039H
001277 120332            LCALL   ?C?LSTXDATA
   14: 	for(i = 0; i < YC_UTIL_TIMER_NUM; i++){
00127A E4                CLR     A
00127B 904E58            MOV     DPTR,#i
00127E F0                MOVX    @DPTR,A
00127F         ?C0001?YC_SYS:
00127F 904E58            MOV     DPTR,#i
001282 E0                MOVX    A,@DPTR
001283 FF                MOV     R7,A
001284 C3                CLR     C
001285 9408              SUBB    A,#08H
001287 5031              JNC     ?C0004?YC_SYS
   15: 		YC_UtilTimer.callback[i] = 0;
001289 EF                MOV     A,R7
00128A 75F003            MOV     B,#03H
00128D A4                MUL     AB
00128E 24DC              ADD     A,#LOW YC_UtilTimer+01H
001290 F582              MOV     DPL,A
001292 E4                CLR     A
001293 344C              ADDC    A,#HIGH YC_UtilTimer+01H
001295 F583              MOV     DPH,A
001297 E4                CLR     A
001298 F0                MOVX    @DPTR,A
001299 A3                INC     DPTR
00129A F0                MOVX    @DPTR,A
00129B A3                INC     DPTR
00129C F0                MOVX    @DPTR,A
   16: 		YC_UtilTimer.timer_end[i] = 0;
00129D EF                MOV     A,R7
00129E 25E0              ADD     A,ACC
0012A0 25E0              ADD     A,ACC
0012A2 24F4              ADD     A,#LOW YC_UtilTimer+019H
0012A4 F582              MOV     DPL,A
0012A6 E4                CLR     A
0012A7 344C              ADDC    A,#HIGH YC_UtilTimer+019H
0012A9 F583              MOV     DPH,A
0012AB 12033E            LCALL   ?C?LSTKXDATA
0012AE 00                DB      00H
0012AF 00                DB      00H
0012B0 00                DB      00H
0012B1 00                DB      00H
   17: 	}
0012B2 904E58            MOV     DPTR,#i
0012B5 E0                MOVX    A,@DPTR
0012B6 04                INC     A
0012B7 F0                MOVX    @DPTR,A
0012B8 80C5              SJMP    ?C0001?YC_SYS
   18: 	return;
   19: }
0012BA         ?C0004?YC_SYS:
0012BA 22                RET     
----- FUNCTION YC_UtilTimerInit (END) -------


----- FUNCTION _YC_UtilTimerStartMs (BEGIN) -----
 FILE: 'YC_Sys.c'
   44: bool YC_UtilTimerStartMs(u16_t time_in_ms, p_TimerCallback callback, pxbyte timer_id)
   45: {
0012BB 904DD5            MOV     DPTR,#time_in_ms
0012BE EE                MOV     A,R6
0012BF F0                MOVX    @DPTR,A
0012C0 A3                INC     DPTR
0012C1 EF                MOV     A,R7
0012C2 F0                MOVX    @DPTR,A
;---- Variable 'callback' assigned to Register 'R1/R2/R3' ----
   46: 	u8_t i = 0;
   47: 	
0012C3 E4                CLR     A
0012C4 904DDC            MOV     DPTR,#i
0012C7 F0                MOVX    @DPTR,A
   48: 	//do we have enough timers?
   49: 	if(YC_UtilTimer.timer_flages == 0xff){
0012C8 904CDB            MOV     DPTR,#YC_UtilTimer
0012CB E0                MOVX    A,@DPTR
0012CC B4FF02            CJNE    A,#0FFH,?C0007?YC_SYS
   50: 		return false;
0012CF C3                CLR     C
0012D0 22                RET     
   51: 	}
0012D1         ?C0007?YC_SYS:
   52: 	while(i < YC_UTIL_TIMER_NUM){
0012D1 904DDC            MOV     DPTR,#i
0012D4 E0                MOVX    A,@DPTR
0012D5 FF                MOV     R7,A
0012D6 C3                CLR     C
0012D7 9408              SUBB    A,#08H
0012D9 502D              JNC     ?C0008?YC_SYS
   53: 		if(!((YC_UtilTimer.timer_flages >> i) & 1)){
0012DB 904CDB            MOV     DPTR,#YC_UtilTimer
0012DE E0                MOVX    A,@DPTR
0012DF FE                MOV     R6,A
0012E0 A807              MOV     R0,AR7
0012E2 08                INC     R0
0012E3 8002              SJMP    ?C0022?YC_SYS
0012E5         ?C0021?YC_SYS:
0012E5 C3                CLR     C
0012E6 13                RRC     A
0012E7         ?C0022?YC_SYS:
0012E7 D8FC              DJNZ    R0,?C0021?YC_SYS
0012E9 20E014            JB      ACC.0,?C0009?YC_SYS
   54: 			if(timer_id)
0012EC 904DDA            MOV     DPTR,#timer_id
0012EF E0                MOVX    A,@DPTR
0012F0 FE                MOV     R6,A
0012F1 A3                INC     DPTR
0012F2 E0                MOVX    A,@DPTR
0012F3 FF                MOV     R7,A
0012F4 4E                ORL     A,R6
0012F5 6011              JZ      ?C0008?YC_SYS
   55: 				*timer_id = i;
0012F7 A3                INC     DPTR
0012F8 E0                MOVX    A,@DPTR
0012F9 8F82              MOV     DPL,R7
0012FB 8E83              MOV     DPH,R6
0012FD F0                MOVX    @DPTR,A
   56: 			break;
0012FE 8008              SJMP    ?C0008?YC_SYS
   57: 		}
001300         ?C0009?YC_SYS:
   58: 		++i;
001300 904DDC            MOV     DPTR,#i
001303 E0                MOVX    A,@DPTR
001304 04                INC     A
001305 F0                MOVX    @DPTR,A
   59: 	}
001306 80C9              SJMP    ?C0007?YC_SYS
001308         ?C0008?YC_SYS:
   60: 	YC_UtilTimer.timer_flages |= 1 << i;
001308 904CDB            MOV     DPTR,#YC_UtilTimer
00130B E0                MOVX    A,@DPTR
00130C FF                MOV     R7,A
00130D 904DDC            MOV     DPTR,#i
001310 E0                MOVX    A,@DPTR
001311 FE                MOV     R6,A
001312 7401              MOV     A,#01H
001314 A806              MOV     R0,AR6
001316 08                INC     R0
001317 8002              SJMP    ?C0024?YC_SYS
001319         ?C0023?YC_SYS:
001319 C3                CLR     C
00131A 33                RLC     A
00131B         ?C0024?YC_SYS:
00131B D8FC              DJNZ    R0,?C0023?YC_SYS
00131D 4F                ORL     A,R7
00131E 904CDB            MOV     DPTR,#YC_UtilTimer
001321 F0                MOVX    @DPTR,A
   61: 	YC_UtilTimer.callback[i] = callback;
001322 EE                MOV     A,R6
001323 75F003            MOV     B,#03H
001326 A4                MUL     AB
001327 24DC              ADD     A,#LOW YC_UtilTimer+01H
001329 F582              MOV     DPL,A
00132B E4                CLR     A
00132C 344C              ADDC    A,#HIGH YC_UtilTimer+01H
00132E F583              MOV     DPH,A
001330 EB                MOV     A,R3
001331 F0                MOVX    @DPTR,A
001332 A3                INC     DPTR
001333 EA                MOV     A,R2
001334 F0                MOVX    @DPTR,A
001335 A3                INC     DPTR
001336 E9                MOV     A,R1
001337 F0                MOVX    @DPTR,A
   62: 	YC_UtilTimer.timer_end[i] = YC_CLK_N + ((u32_t)time_in_ms << 4)/5;
001338 908101            MOV     DPTR,#08101H
00133B E0                MOVX    A,@DPTR
00133C FF                MOV     R7,A
00133D E4                CLR     A
00133E FC                MOV     R4,A
00133F FD                MOV     R5,A
001340 FE                MOV     R6,A
001341 7808              MOV     R0,#08H
001343 12031F            LCALL   ?C?LSHL
001346 A804              MOV     R0,AR4
001348 A905              MOV     R1,AR5
00134A AA06              MOV     R2,AR6
00134C AB07              MOV     R3,AR7
00134E 908100            MOV     DPTR,#08100H
001351 E0                MOVX    A,@DPTR
001352 FF                MOV     R7,A
001353 E4                CLR     A
001354 EB                MOV     A,R3
001355 4F                ORL     A,R7
001356 FF                MOV     R7,A
001357 EA                MOV     A,R2
001358 FE                MOV     R6,A
001359 E9                MOV     A,R1
00135A FD                MOV     R5,A
00135B E8                MOV     A,R0
00135C FC                MOV     R4,A
00135D C004              PUSH    AR4
00135F C005              PUSH    AR5
001361 C006              PUSH    AR6
001363 C007              PUSH    AR7
001365 908102            MOV     DPTR,#08102H
001368 E0                MOVX    A,@DPTR
001369 FF                MOV     R7,A
00136A E4                CLR     A
00136B FC                MOV     R4,A
00136C FD                MOV     R5,A
00136D FE                MOV     R6,A
00136E 7810              MOV     R0,#010H
001370 12031F            LCALL   ?C?LSHL
001373 D003              POP     AR3
001375 D002              POP     AR2
001377 D001              POP     AR1
001379 D000              POP     AR0
00137B EF                MOV     A,R7
00137C 4B                ORL     A,R3
00137D FF                MOV     R7,A
00137E EE                MOV     A,R6
00137F 4A                ORL     A,R2
001380 FE                MOV     R6,A
001381 ED                MOV     A,R5
001382 49                ORL     A,R1
001383 FD                MOV     R5,A
001384 EC                MOV     A,R4
001385 48                ORL     A,R0
001386 FC                MOV     R4,A
001387 C004              PUSH    AR4
001389 C005              PUSH    AR5
00138B C006              PUSH    AR6
00138D C007              PUSH    AR7
00138F A3                INC     DPTR
001390 E0                MOVX    A,@DPTR
001391 FF                MOV     R7,A
001392 E4                CLR     A
001393 FC                MOV     R4,A
001394 FD                MOV     R5,A
001395 FE                MOV     R6,A
001396 7818              MOV     R0,#018H
001398 12031F            LCALL   ?C?LSHL
00139B D003              POP     AR3
00139D D002              POP     AR2
00139F D001              POP     AR1
0013A1 D000              POP     AR0
0013A3 EF                MOV     A,R7
0013A4 4B                ORL     A,R3
0013A5 FF                MOV     R7,A
0013A6 EE                MOV     A,R6
0013A7 4A                ORL     A,R2
0013A8 FE                MOV     R6,A
0013A9 ED                MOV     A,R5
0013AA 49                ORL     A,R1
0013AB FD                MOV     R5,A
0013AC EC                MOV     A,R4
0013AD 48                ORL     A,R0
0013AE FC                MOV     R4,A
0013AF C004              PUSH    AR4
0013B1 C005              PUSH    AR5
0013B3 C006              PUSH    AR6
0013B5 C007              PUSH    AR7
0013B7 904DD5            MOV     DPTR,#time_in_ms
0013BA E0                MOVX    A,@DPTR
0013BB FE                MOV     R6,A
0013BC A3                INC     DPTR
0013BD E0                MOVX    A,@DPTR
0013BE FF                MOV     R7,A
0013BF E4                CLR     A
0013C0 FC                MOV     R4,A
0013C1 FD                MOV     R5,A
0013C2 7804              MOV     R0,#04H
0013C4 12031F            LCALL   ?C?LSHL
0013C7 E4                CLR     A
0013C8 7B05              MOV     R3,#05H
0013CA FA                MOV     R2,A
0013CB F9                MOV     R1,A
0013CC F8                MOV     R0,A
0013CD 120269            LCALL   ?C?ULDIV
0013D0 D003              POP     AR3
0013D2 D002              POP     AR2
0013D4 D001              POP     AR1
0013D6 D000              POP     AR0
0013D8 EF                MOV     A,R7
0013D9 2B                ADD     A,R3
0013DA FF                MOV     R7,A
0013DB EE                MOV     A,R6
0013DC 3A                ADDC    A,R2
0013DD FE                MOV     R6,A
0013DE ED                MOV     A,R5
0013DF 39                ADDC    A,R1
0013E0 FD                MOV     R5,A
0013E1 EC                MOV     A,R4
0013E2 38                ADDC    A,R0
0013E3 FC                MOV     R4,A
0013E4 904DDC            MOV     DPTR,#i
0013E7 E0                MOVX    A,@DPTR
0013E8 25E0              ADD     A,ACC
0013EA 25E0              ADD     A,ACC
0013EC 24F4              ADD     A,#LOW YC_UtilTimer+019H
0013EE F582              MOV     DPL,A
0013F0 E4                CLR     A
0013F1 344C              ADDC    A,#HIGH YC_UtilTimer+019H
0013F3 F583              MOV     DPH,A
0013F5 120332            LCALL   ?C?LSTXDATA
   63: 	return true;
0013F8 D3                SETB    C
   64: }
0013F9 22                RET     
----- FUNCTION _YC_UtilTimerStartMs (END) -------


----- FUNCTION CS_Scale_PowerOn (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  169: void CS_Scale_PowerOn(void)
  170: {
  171: 	
  172: 	if(R_Scale_state == CS_Scale_state_init)
0013FA 904CC5            MOV     DPTR,#R_Scale_state
0013FD E0                MOVX    A,@DPTR
0013FE 702B              JNZ     ?C0011?CS_SCALE_PROC
  173: 		{
  174: 		B_Weight_AdOk = false;
001400 904CD7            MOV     DPTR,#B_Weight_AdOk
001403 F0                MOVX    @DPTR,A
  175: 		R_Weight_Com_Coo.pre =CS_CommTo1186_Null;	
001404 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
001407 F0                MOVX    @DPTR,A
  176: 		R_Weight_Com_Coo.now = CS_CommTo1186_Null;	
001408 904D55            MOV     DPTR,#R_Weight_Com_Coo
00140B F0                MOVX    @DPTR,A
  177: 		//R_Scale_state =	CS_Scale_state_weighting;
  178: 		R_Selet_Unit = CS_ScaleDisplay_L_kg;
00140C 904CC6            MOV     DPTR,#R_Selet_Unit
00140F F0                MOVX    @DPTR,A
  179: 
  180: 		R_Debug_temp = 0;
001410 A3                INC     DPTR
001411 F0                MOVX    @DPTR,A
001412 A3                INC     DPTR
001413 F0                MOVX    @DPTR,A
  181: 		B_Debug_Test =false;
001414 C201              CLR     B_Debug_Test
  182: 		
  183: 		CS_Scale_CaliProc(CaliProcSetCali);		
001416 7F01              MOV     R7,#01H
001418 120A17            LCALL   _CS_Scale_CaliProc
  184: 		CS_Scale_ZeroProc(ZeroProcReset,0);	
00141B E4                CLR     A
00141C FD                MOV     R5,A
00141D FC                MOV     R4,A
00141E 7F04              MOV     R7,#04H
001420 12349A            LCALL   _CS_Scale_ZeroProc
  185: 		
  186: 		CS_Scale_TimeOutProc(CS_Reset_AllTime);
001423 7F06              MOV     R7,#06H
001425 B1B3              ACALL   _CS_Scale_TimeOutProc
  187: 		CS_Scale_PowerOnProc(1);
001427 D200              SETB    ?CS_Scale_PowerOnProc?BIT
001429 912C              ACALL   CS_Scale_PowerOnProc
  188: 		}
  189: }
00142B         ?C0011?CS_SCALE_PROC:
00142B 22                RET     
----- FUNCTION CS_Scale_PowerOn (END) -------


----- FUNCTION CS_Scale_PowerOnProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1283: void CS_Scale_PowerOnProc(bool B_Reset)
 1284: {
 1285: 	static u8_t xdata comm_doing;
 1286: 	static u8_t xdata PowerOnState;
 1287: 	
 1288: 	
 1289: 	if(B_Reset)
00142C 30000A            JNB     B_Reset,?C0184?CS_SCALE_PROC
 1290: 		{
 1291: 		PowerOnState=CS_PowerOn_State1_Reset;
00142F E4                CLR     A
001430 904CB7            MOV     DPTR,#PowerOnState
001433 F0                MOVX    @DPTR,A
 1292: 		comm_doing=false;
001434 904CB6            MOV     DPTR,#comm_doing
001437 F0                MOVX    @DPTR,A
001438 22                RET     
 1293: 		return;
 1294: 		}
001439         ?C0184?CS_SCALE_PROC:
 1295: 	
 1296: 	//-----------S1
 1297: 	if(PowerOnState==CS_PowerOn_State1_Reset)
001439 904CB7            MOV     DPTR,#PowerOnState
00143C E0                MOVX    A,@DPTR
00143D 7016              JNZ     ?C0186?CS_SCALE_PROC
 1298: 		{
 1299: 		if(comm_doing==false)
00143F 904CB6            MOV     DPTR,#comm_doing
001442 E0                MOVX    A,@DPTR
001443 7008              JNZ     ?C0187?CS_SCALE_PROC
 1300: 			{
 1301: 			comm_doing=true;
001445 04                INC     A
001446 F0                MOVX    @DPTR,A
 1302: 			CS_Scale_1186ComSend(CS_CommTo1186_Reset);
001447 7FC5              MOV     R7,#0C5H
001449 B10F              ACALL   _CS_Scale_1186ComSend
 1303: 			}
00144B 8008              SJMP    ?C0186?CS_SCALE_PROC
00144D         ?C0187?CS_SCALE_PROC:
 1304: 		else
 1305: 			{
 1306: 			comm_doing=false;
00144D E4                CLR     A
00144E 904CB6            MOV     DPTR,#comm_doing
001451 F0                MOVX    @DPTR,A
 1307: 			PowerOnState	= CS_PowerOn_State2_ReadOtp;
001452 A3                INC     DPTR
001453 04                INC     A
001454 F0                MOVX    @DPTR,A
 1308: 			}		
 1309: 		}
001455         ?C0186?CS_SCALE_PROC:
 1310: 	//-----------S2
 1311: 	if(PowerOnState==CS_PowerOn_State2_ReadOtp)
001455 904CB7            MOV     DPTR,#PowerOnState
001458 E0                MOVX    A,@DPTR
001459 B4011A            CJNE    A,#01H,?C0189?CS_SCALE_PROC
 1312: 		{
 1313: 		if(comm_doing==false)
00145C 904CB6            MOV     DPTR,#comm_doing
00145F E0                MOVX    A,@DPTR
001460 7006              JNZ     ?C0190?CS_SCALE_PROC
 1314: 			{
 1315: 			comm_doing=true;
001462 04                INC     A
001463 F0                MOVX    @DPTR,A
 1316: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadOtp);
001464 7F84              MOV     R7,#084H
001466 B10F              ACALL   _CS_Scale_1186ComSend
 1317: 			
 1318: 			}
001468         ?C0190?CS_SCALE_PROC:
 1319: 		if(CS_If1186ComSucess()==true)
001468 B11A              ACALL   CS_If1186ComSucess
00146A BF0109            CJNE    R7,#01H,?C0189?CS_SCALE_PROC
 1320: 			{
 1321: 			comm_doing=false;
00146D E4                CLR     A
00146E 904CB6            MOV     DPTR,#comm_doing
001471 F0                MOVX    @DPTR,A
 1322: 			PowerOnState =  CS_PowerOn_State3_ReadVersion;
001472 A3                INC     DPTR
001473 7402              MOV     A,#02H
001475 F0                MOVX    @DPTR,A
 1323: 			}
 1324: 		}
001476         ?C0189?CS_SCALE_PROC:
 1325: 	//-----------S3
 1326: 	if(PowerOnState==CS_PowerOn_State3_ReadVersion)
001476 904CB7            MOV     DPTR,#PowerOnState
001479 E0                MOVX    A,@DPTR
00147A B40203            CJNE    A,#02H,?C0192?CS_SCALE_PROC
 1327: 		{
 1328: 		PowerOnState =  CS_PowerOn_State4_ReadTime;		
00147D 7403              MOV     A,#03H
00147F F0                MOVX    @DPTR,A
 1329: 		}
001480         ?C0192?CS_SCALE_PROC:
 1330: 	//-----------S4
 1331: 	if(PowerOnState==CS_PowerOn_State4_ReadTime)
001480 904CB7            MOV     DPTR,#PowerOnState
001483 E0                MOVX    A,@DPTR
001484 B4031A            CJNE    A,#03H,?C0193?CS_SCALE_PROC
 1332: 		{
 1333: 		if(comm_doing==false)
001487 904CB6            MOV     DPTR,#comm_doing
00148A E0                MOVX    A,@DPTR
00148B 7006              JNZ     ?C0194?CS_SCALE_PROC
 1334: 			{
 1335: 			comm_doing=true;
00148D 04                INC     A
00148E F0                MOVX    @DPTR,A
 1336: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadTime);
00148F 7F82              MOV     R7,#082H
001491 B10F              ACALL   _CS_Scale_1186ComSend
 1337: 			}
001493         ?C0194?CS_SCALE_PROC:
 1338: 		if(CS_If1186ComSucess()==true)
001493 B11A              ACALL   CS_If1186ComSucess
001495 BF0109            CJNE    R7,#01H,?C0193?CS_SCALE_PROC
 1339: 			{
 1340: 			comm_doing=false;
001498 E4                CLR     A
001499 904CB6            MOV     DPTR,#comm_doing
00149C F0                MOVX    @DPTR,A
 1341: 			PowerOnState =  CS_PowerOn_State5_SetOpenWeight;	
00149D A3                INC     DPTR
00149E 7404              MOV     A,#04H
0014A0 F0                MOVX    @DPTR,A
 1342: 			}
 1343: 		}
0014A1         ?C0193?CS_SCALE_PROC:
 1344: 	//-----------S5
 1345: 	if(PowerOnState==CS_PowerOn_State5_SetOpenWeight)
0014A1 904CB7            MOV     DPTR,#PowerOnState
0014A4 E0                MOVX    A,@DPTR
0014A5 B4041A            CJNE    A,#04H,?C0196?CS_SCALE_PROC
 1346: 		{
 1347: 		if(comm_doing==false)
0014A8 904CB6            MOV     DPTR,#comm_doing
0014AB E0                MOVX    A,@DPTR
0014AC 7006              JNZ     ?C0197?CS_SCALE_PROC
 1348: 			{
 1349: 			comm_doing=true;
0014AE 04                INC     A
0014AF F0                MOVX    @DPTR,A
 1350: 			CS_Scale_1186ComSend(CS_CommTo1186_SetOpenWeight);
0014B0 7FA1              MOV     R7,#0A1H
0014B2 B10F              ACALL   _CS_Scale_1186ComSend
 1351: 			}
0014B4         ?C0197?CS_SCALE_PROC:
 1352: 		if(CS_If1186ComSucess()==true)
0014B4 B11A              ACALL   CS_If1186ComSucess
0014B6 BF0109            CJNE    R7,#01H,?C0196?CS_SCALE_PROC
 1353: 			{
 1354: 			comm_doing=false;
0014B9 E4                CLR     A
0014BA 904CB6            MOV     DPTR,#comm_doing
0014BD F0                MOVX    @DPTR,A
 1355: 			PowerOnState =  CS_PowerOn_State6_ShowOpenPic;
0014BE A3                INC     DPTR
0014BF 7405              MOV     A,#05H
0014C1 F0                MOVX    @DPTR,A
 1356: 			}
 1357: 		}
0014C2         ?C0196?CS_SCALE_PROC:
 1358: 	//-----------S6
 1359: 	if(PowerOnState==CS_PowerOn_State6_ShowOpenPic)
0014C2 904CB7            MOV     DPTR,#PowerOnState
0014C5 E0                MOVX    A,@DPTR
0014C6 6405              XRL     A,#05H
0014C8 7028              JNZ     ?C0199?CS_SCALE_PROC
 1360: 		{
 1361: 		if(comm_doing==false)
0014CA 904CB6            MOV     DPTR,#comm_doing
0014CD E0                MOVX    A,@DPTR
0014CE 700F              JNZ     ?C0200?CS_SCALE_PROC
 1362: 			{
 1363: 			comm_doing=true;	
0014D0 04                INC     A
0014D1 F0                MOVX    @DPTR,A
 1364: 			CS_ScaleDisplay_FreshBuf(DisplayData,8888);
0014D2 7DB8              MOV     R5,#0B8H
0014D4 7C22              MOV     R4,#022H
0014D6 7F21              MOV     R7,#021H
0014D8 121DCE            LCALL   _CS_ScaleDisplay_FreshBuf
 1365: 			CS_Scale_1186ComSend(CS_CommTo1186_LcdDisplay);
0014DB 7FE0              MOV     R7,#0E0H
0014DD B10F              ACALL   _CS_Scale_1186ComSend
 1366: 			}
0014DF         ?C0200?CS_SCALE_PROC:
 1367: 		if(CS_If1186ComSucess()==true)
0014DF B11A              ACALL   CS_If1186ComSucess
0014E1 BF010E            CJNE    R7,#01H,?C0199?CS_SCALE_PROC
 1368: 			{	
 1369: 			comm_doing=false;
0014E4 E4                CLR     A
0014E5 904CB6            MOV     DPTR,#comm_doing
0014E8 F0                MOVX    @DPTR,A
 1370: 			PowerOnState =	CS_PowerOn_State7_ShowOpenPicWait;
0014E9 A3                INC     DPTR
0014EA 7406              MOV     A,#06H
0014EC F0                MOVX    @DPTR,A
 1371: 			CS_SoftTimer(ResetSoftTimer);
0014ED 7F02              MOV     R7,#02H
0014EF 120EF4            LCALL   _CS_SoftTimer
 1372: 			}		
 1373: 		}
0014F2         ?C0199?CS_SCALE_PROC:
 1374: 	//-----------S7
 1375: 	if(PowerOnState==CS_PowerOn_State7_ShowOpenPicWait)
0014F2 904CB7            MOV     DPTR,#PowerOnState
0014F5 E0                MOVX    A,@DPTR
0014F6 B40615            CJNE    A,#06H,?C0185?CS_SCALE_PROC
 1376: 		{
 1377: 		if(CS_SoftTimer(GetSoftTimerTime)>200)
0014F9 7F01              MOV     R7,#01H
0014FB 120EF4            LCALL   _CS_SoftTimer
0014FE EF                MOV     A,R7
0014FF D3                SETB    C
001500 94C8              SUBB    A,#0C8H
001502 400A              JC      ?C0185?CS_SCALE_PROC
 1378: 			{
 1379: 			R_Scale_state = CS_Scale_state_weighting;
001504 904CC5            MOV     DPTR,#R_Scale_state
001507 7401              MOV     A,#01H
001509 F0                MOVX    @DPTR,A
 1380: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadAd);
00150A 7F80              MOV     R7,#080H
00150C B10F              ACALL   _CS_Scale_1186ComSend
 1381: 			}
 1382: 		}
 1383: 
 1384: }
00150E         ?C0185?CS_SCALE_PROC:
00150E 22                RET     
----- FUNCTION CS_Scale_PowerOnProc (END) -------


----- FUNCTION _CS_Scale_1186ComSend (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   18: void CS_Scale_1186ComSend(u8_t com_comand)
   19: {
;---- Variable 'com_comand' assigned to Register 'R7' ----
   20: R_Weight_Com_Coo.sucess=false;
   21: R_Weight_Com_Coo.now = com_comand;
00150F E4                CLR     A
001510 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
001513 F0                MOVX    @DPTR,A
   22: }
001514 904D55            MOV     DPTR,#R_Weight_Com_Coo
001517 EF                MOV     A,R7
001518 F0                MOVX    @DPTR,A
   23: 
001519 22                RET     
----- FUNCTION _CS_Scale_1186ComSend (END) -------


----- FUNCTION CS_If1186ComSucess (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   25: u8_t CS_If1186ComSucess(void)
   26: {
   27: return R_Weight_Com_Coo.sucess;
   28: }
00151A 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
00151D E0                MOVX    A,@DPTR
00151E FF                MOV     R7,A
   29: 
00151F 22                RET     
----- FUNCTION CS_If1186ComSucess (END) -------


----- FUNCTION _CS_Scale_StandbyProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1184: void CS_Scale_StandbyProc(u8_t B_Reset)
 1185: {
;---- Variable 'B_Reset' assigned to Register 'R7' ----
 1186: 	static u8_t xdata comm_doing;
 1187: 	static u8_t xdata StandbyState;
 1188: 
 1189: 	if(B_Reset==1)
001520 EF                MOV     A,R7
001521 B4010A            CJNE    A,#01H,?C0173?CS_SCALE_PROC
 1190: 		{
 1191: 		StandbyState=CS_Standby_S1_ToSleep;
001524 E4                CLR     A
001525 904CB5            MOV     DPTR,#StandbyState
001528 F0                MOVX    @DPTR,A
 1192: 		comm_doing=false;
001529 904CB4            MOV     DPTR,#comm_doing
00152C F0                MOVX    @DPTR,A
00152D 22                RET     
 1193: 		return;
 1194: 		}
00152E         ?C0173?CS_SCALE_PROC:
 1195: 
 1196: 	if(B_Reset==2)
00152E EF                MOV     A,R7
00152F B4020C            CJNE    A,#02H,?C0175?CS_SCALE_PROC
 1197: 		{
 1198: 		StandbyState=CS_Standby_S2_WakeUp;
001532 904CB5            MOV     DPTR,#StandbyState
001535 7401              MOV     A,#01H
001537 F0                MOVX    @DPTR,A
 1199: 		comm_doing=false;
001538 E4                CLR     A
001539 904CB4            MOV     DPTR,#comm_doing
00153C F0                MOVX    @DPTR,A
00153D 22                RET     
 1200: 		return;
 1201: 		}
00153E         ?C0175?CS_SCALE_PROC:
 1202: 	
 1203: 	switch(StandbyState)
00153E 904CB5            MOV     DPTR,#StandbyState
001541 E0                MOVX    A,@DPTR
001542 14                DEC     A
001543 6035              JZ      ?C0180?CS_SCALE_PROC
001545 04                INC     A
001546 7065              JNZ     ?C0183?CS_SCALE_PROC
 1204: 	{
 1205: 	case CS_Standby_S1_ToSleep:
001548         ?C0177?CS_SCALE_PROC:
 1206: 		if(comm_doing==false)
001548 904CB4            MOV     DPTR,#comm_doing
00154B E0                MOVX    A,@DPTR
00154C 7006              JNZ     ?C0178?CS_SCALE_PROC
 1207: 			{
 1208: 			comm_doing=true;
00154E 04                INC     A
00154F F0                MOVX    @DPTR,A
 1209: 
 1210: 			CS_Scale_1186ComSend(CS_CommTo1186_SetSleepMode);
001550 7FA0              MOV     R7,#0A0H
001552 B10F              ACALL   _CS_Scale_1186ComSend
 1211: 			//sys_state = SYS_ST_IDLE;			//系统进入睡眠
 1212: 			}
001554         ?C0178?CS_SCALE_PROC:
 1213: 		if(CS_If1186ComSucess()==true)
001554 B11A              ACALL   CS_If1186ComSucess
001556 EF                MOV     A,R7
001557 6401              XRL     A,#01H
001559 7057              JNZ     ?C0174?CS_SCALE_PROC
 1214: 			{
 1215: 			comm_doing=false;
00155B 904CB4            MOV     DPTR,#comm_doing
00155E F0                MOVX    @DPTR,A
 1216: 			StandbyState =  CS_Standby_S2_WakeUp;
00155F A3                INC     DPTR
001560 04                INC     A
001561 F0                MOVX    @DPTR,A
 1217: 
 1218: 			btCmdBuf.len = 0x01;
001562 904C63            MOV     DPTR,#btCmdBuf
001565 F0                MOVX    @DPTR,A
 1219: 			btCmdBuf.DATA[0] = CS_CMD_SLEEP_REQ;
001566 A3                INC     DPTR
001567 7420              MOV     A,#020H
001569 F0                MOVX    @DPTR,A
 1220: 			BT_CmdFifoIn(&btCmdBuf);
00156A 7B01              MOV     R3,#01H
00156C 7A4C              MOV     R2,#HIGH btCmdBuf
00156E 7963              MOV     R1,#LOW btCmdBuf
001570 122623            LCALL   _BT_CmdFifoIn
 1221: 
 1222: 			//btCmdBuf.len = 2;
 1223: 			//btCmdBuf.DATA[0] = 0x20;
 1224: 			//btCmdBuf.DATA[1] = 0;
 1225: 			//BT_CmdFifoIn(&btCmdBuf);
 1226: 			
 1227: 			 
 1228: 			sys_state = SYS_ST_IDLE;  //SYS_ST_SLEEP;			//系统进入睡眠
001573 904E5B            MOV     DPTR,#sys_state
001576 7401              MOV     A,#01H
001578 F0                MOVX    @DPTR,A
 1229: 					
 1230: 			}	
 1231: 		break;
001579 22                RET     
 1232: 	case CS_Standby_S2_WakeUp:
00157A         ?C0180?CS_SCALE_PROC:
 1233: 		if(comm_doing==false)
00157A 904CB4            MOV     DPTR,#comm_doing
00157D E0                MOVX    A,@DPTR
00157E 7006              JNZ     ?C0181?CS_SCALE_PROC
 1234: 			{
 1235: 			comm_doing=true;
001580 04                INC     A
001581 F0                MOVX    @DPTR,A
 1236: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadAdZero);
001582 7F85              MOV     R7,#085H
001584 B10F              ACALL   _CS_Scale_1186ComSend
 1237: 			}
001586         ?C0181?CS_SCALE_PROC:
 1238: 		if(CS_If1186ComSucess()==true)
001586 B11A              ACALL   CS_If1186ComSucess
001588 BF0127            CJNE    R7,#01H,?C0174?CS_SCALE_PROC
 1239: 			{
 1240: 			comm_doing=false;
00158B E4                CLR     A
00158C 904CB4            MOV     DPTR,#comm_doing
00158F F0                MOVX    @DPTR,A
 1241: 			StandbyState =  CS_Standby_S1_ToSleep;	
001590 A3                INC     DPTR
001591 F0                MOVX    @DPTR,A
 1242: 			sys_state = SYS_ST_RUN;
001592 904E5B            MOV     DPTR,#sys_state
001595 7402              MOV     A,#02H
001597 F0                MOVX    @DPTR,A
 1243: 
 1244: 			/*
 1245: 			while(1)
 1246: 			{
 1247: 			R_Debug_temp = R_AD_Zero;
 1248: 			CS_ScaleDisplay_Debug();
 1249: 			}
 1250: 			*/
 1251: 			//清除异常状态
 1252: 			CS_Scale_JudgeOverLoad(ResetOverLoad);
001598 FF                MOV     R7,A
001599 F1EF              ACALL   _CS_Scale_JudgeOverLoad
 1253: 			CS_Scale_TimeOutProc(CS_Reset_AllTime);
00159B 7F06              MOV     R7,#06H
00159D B1B3              ACALL   _CS_Scale_TimeOutProc
 1254: 			R_Display_Err = 0;
00159F E4                CLR     A
0015A0 904CC2            MOV     DPTR,#R_Display_Err
0015A3 F0                MOVX    @DPTR,A
 1255: 			
 1256: 			R_Scale_state = CS_Scale_state_weighting;
0015A4 904CC5            MOV     DPTR,#R_Scale_state
0015A7 04                INC     A
0015A8 F0                MOVX    @DPTR,A
 1257: 
 1258: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadAd);
0015A9 7F80              MOV     R7,#080H
0015AB A10F              AJMP    _CS_Scale_1186ComSend
 1259: 			
 1260: 			}
 1261: 		break;
 1262: 	default:
0015AD         ?C0183?CS_SCALE_PROC:
 1263: 		StandbyState = CS_Standby_S1_ToSleep;
0015AD E4                CLR     A
0015AE 904CB5            MOV     DPTR,#StandbyState
0015B1 F0                MOVX    @DPTR,A
 1264: 		break;
 1265: 	}
 1266: 	
 1267: 	//R_Debug_temp = 456;
 1268: 
 1269: }
0015B2         ?C0174?CS_SCALE_PROC:
0015B2 22                RET     
----- FUNCTION _CS_Scale_StandbyProc (END) -------


----- FUNCTION _CS_Scale_TimeOutProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1437: void CS_Scale_TimeOutProc(u8_t option)
 1438: {
;---- Variable 'option' assigned to Register 'R7' ----
 1439: 	static	CS_TimeOut_T xdata R_TimeOut;
 1440: 	static	u8_t xdata B_TimeBase_1s;		//1s时基
 1441: 
 1442: 	if(option==CS_SetTimeBase1S)
0015B3 EF                MOV     A,R7
0015B4 B40707            CJNE    A,#07H,?C0211?CS_SCALE_PROC
 1443: 		{
 1444: 		B_TimeBase_1s = true;
0015B7 904CBF            MOV     DPTR,#B_TimeBase_1s
0015BA 7401              MOV     A,#01H
0015BC F0                MOVX    @DPTR,A
0015BD 22                RET     
 1445: 		return;
 1446: 		}
0015BE         ?C0211?CS_SCALE_PROC:
 1447: 	//超时计数器复位
 1448: 	if(option)
0015BE EF                MOV     A,R7
0015BF 6040              JZ      ?C0213?CS_SCALE_PROC
 1449: 	{
 1450: 	if(option==CS_Reset_ZeroTime)
0015C1 B40105            CJNE    A,#01H,?C0214?CS_SCALE_PROC
 1451: 		R_TimeOut.zero=0;
0015C4 E4                CLR     A
0015C5 904CBA            MOV     DPTR,#R_TimeOut
0015C8 F0                MOVX    @DPTR,A
0015C9         ?C0214?CS_SCALE_PROC:
 1452: 	if(option==CS_Reset_LockTime)
0015C9 EF                MOV     A,R7
0015CA B40205            CJNE    A,#02H,?C0215?CS_SCALE_PROC
 1453: 		R_TimeOut.lock=0;
0015CD E4                CLR     A
0015CE 904CBB            MOV     DPTR,#R_TimeOut+01H
0015D1 F0                MOVX    @DPTR,A
0015D2         ?C0215?CS_SCALE_PROC:
 1454: 	if(option==CS_Reset_UnstableTime)
0015D2 EF                MOV     A,R7
0015D3 B40305            CJNE    A,#03H,?C0216?CS_SCALE_PROC
 1455: 		R_TimeOut.unstable=0;
0015D6 E4                CLR     A
0015D7 904CBC            MOV     DPTR,#R_TimeOut+02H
0015DA F0                MOVX    @DPTR,A
0015DB         ?C0216?CS_SCALE_PROC:
 1456: 	if(option==CS_Reset_OverLoadTime)
0015DB EF                MOV     A,R7
0015DC B40405            CJNE    A,#04H,?C0217?CS_SCALE_PROC
 1457: 		R_TimeOut.overload=0;
0015DF E4                CLR     A
0015E0 904CBD            MOV     DPTR,#R_TimeOut+03H
0015E3 F0                MOVX    @DPTR,A
0015E4         ?C0217?CS_SCALE_PROC:
 1458: 	if(option==CS_Reset_LowBatTime)
0015E4 EF                MOV     A,R7
0015E5 B40505            CJNE    A,#05H,?C0218?CS_SCALE_PROC
 1459: 		R_TimeOut.lowbat=0;
0015E8 E4                CLR     A
0015E9 904CBE            MOV     DPTR,#R_TimeOut+04H
0015EC F0                MOVX    @DPTR,A
0015ED         ?C0218?CS_SCALE_PROC:
 1460: 	if(option==CS_Reset_AllTime)
0015ED EF                MOV     A,R7
0015EE 6406              XRL     A,#06H
0015F0 6002              JZ      $ + 4H
0015F2 C1CF              AJMP    ?C0212?CS_SCALE_PROC
 1461: 		{
 1462: 		R_TimeOut.zero=0;
0015F4 904CBA            MOV     DPTR,#R_TimeOut
0015F7 F0                MOVX    @DPTR,A
 1463: 		R_TimeOut.lock=0;
0015F8 A3                INC     DPTR
0015F9 F0                MOVX    @DPTR,A
 1464: 		R_TimeOut.unstable=0;
0015FA A3                INC     DPTR
0015FB F0                MOVX    @DPTR,A
 1465: 		R_TimeOut.overload=0;
0015FC A3                INC     DPTR
0015FD F0                MOVX    @DPTR,A
 1466: 		R_TimeOut.lowbat=0;
0015FE A3                INC     DPTR
0015FF F0                MOVX    @DPTR,A
 1467: 		}
001600 22                RET     
 1468: 	return;
 1469: 	}
001601         ?C0213?CS_SCALE_PROC:
 1470: 		
 1471: 	if(B_TimeBase_1s == true)
001601 904CBF            MOV     DPTR,#B_TimeBase_1s
001604 E0                MOVX    A,@DPTR
001605 6401              XRL     A,#01H
001607 6002              JZ      $ + 4H
001609 C1CF              AJMP    ?C0212?CS_SCALE_PROC
 1472: 	{
 1473: 		B_TimeBase_1s = false;
00160B F0                MOVX    @DPTR,A
 1474: 
 1475: 		//低电超时处理
 1476: 		if(CS_Scale_JudgeLowBat(GetIfLowBat) == true)
00160C 7F01              MOV     R7,#01H
00160E F1DD              ACALL   _CS_Scale_JudgeLowBat
001610 BF011E            CJNE    R7,#01H,?C0221?CS_SCALE_PROC
 1477: 		{
 1478: 			R_TimeOut.lowbat++;
001613 904CBE            MOV     DPTR,#R_TimeOut+04H
001616 E0                MOVX    A,@DPTR
001617 04                INC     A
001618 F0                MOVX    @DPTR,A
 1479: 
 1480: 			if(R_TimeOut.lowbat>=CS_Scale_TimeOut_LowBat)
001619 E0                MOVX    A,@DPTR
00161A C3                CLR     C
00161B 9403              SUBB    A,#03H
00161D 5002              JNC     $ + 4H
00161F C1CF              AJMP    ?C0212?CS_SCALE_PROC
 1481: 			{
 1482: 				R_Scale_state = CS_Scale_state_standby;
001621 904CC5            MOV     DPTR,#R_Scale_state
001624 7402              MOV     A,#02H
001626 F0                MOVX    @DPTR,A
 1483: 				CS_Scale_StandbyProc(1);
001627 7F01              MOV     R7,#01H
001629 B120              ACALL   _CS_Scale_StandbyProc
 1484: 				R_TimeOut.lowbat=0;
00162B E4                CLR     A
00162C 904CBE            MOV     DPTR,#R_TimeOut+04H
00162F F0                MOVX    @DPTR,A
 1485: 			}
001630 22                RET     
 1486: 		return;			
 1487: 		}
001631         ?C0221?CS_SCALE_PROC:
 1488: 
 1489: 		//超载超时处理
 1490: 		if(CS_Scale_JudgeOverLoad(GetIfOverLoad)== true)
001631 7F01              MOV     R7,#01H
001633 F1EF              ACALL   _CS_Scale_JudgeOverLoad
001635 BF011E            CJNE    R7,#01H,?C0223?CS_SCALE_PROC
 1491: 		{
 1492: 			R_TimeOut.overload++;
001638 904CBD            MOV     DPTR,#R_TimeOut+03H
00163B E0                MOVX    A,@DPTR
00163C 04                INC     A
00163D F0                MOVX    @DPTR,A
 1493: 
 1494: 			if(R_TimeOut.overload>=CS_Scale_TimeOut_OverLoad)
00163E E0                MOVX    A,@DPTR
00163F C3                CLR     C
001640 9403              SUBB    A,#03H
001642 5002              JNC     $ + 4H
001644 C1CF              AJMP    ?C0212?CS_SCALE_PROC
 1495: 			{
 1496: 				R_Scale_state = CS_Scale_state_standby;
001646 904CC5            MOV     DPTR,#R_Scale_state
001649 7402              MOV     A,#02H
00164B F0                MOVX    @DPTR,A
 1497: 				CS_Scale_StandbyProc(1);
00164C 7F01              MOV     R7,#01H
00164E B120              ACALL   _CS_Scale_StandbyProc
 1498: 				R_TimeOut.overload=0;
001650 E4                CLR     A
001651 904CBD            MOV     DPTR,#R_TimeOut+03H
001654 F0                MOVX    @DPTR,A
 1499: 			}
001655 22                RET     
 1500: 		return;	
 1501: 
 1502: 		}
001656         ?C0223?CS_SCALE_PROC:
 1503: 		
 1504: 		
 1505: 		//称重模式下的超时处理
 1506: 		if(R_Scale_state == CS_Scale_state_weighting)
001656 904CC5            MOV     DPTR,#R_Scale_state
001659 E0                MOVX    A,@DPTR
00165A 6401              XRL     A,#01H
00165C 704A              JNZ     ?C0225?CS_SCALE_PROC
 1507: 		{
 1508: 		
 1509: 		if(CS_Scale_ZeroProc(GetZeroState,0) == true)
00165E FD                MOV     R5,A
00165F FC                MOV     R4,A
001660 7F03              MOV     R7,#03H
001662 12349A            LCALL   _CS_Scale_ZeroProc
001665 EF                MOV     A,R7
001666 6401              XRL     A,#01H
001668 4E                ORL     A,R6
001669 700C              JNZ     ?C0226?CS_SCALE_PROC
 1510: 			{
 1511: 			R_TimeOut.unstable=0;
00166B 904CBC            MOV     DPTR,#R_TimeOut+02H
00166E F0                MOVX    @DPTR,A
 1512: 			R_TimeOut.zero++;
00166F 904CBA            MOV     DPTR,#R_TimeOut
001672 E0                MOVX    A,@DPTR
001673 04                INC     A
001674 F0                MOVX    @DPTR,A
 1513: 			}
001675 800B              SJMP    ?C0227?CS_SCALE_PROC
001677         ?C0226?CS_SCALE_PROC:
 1514: 		else
 1515: 			{
 1516: 			R_TimeOut.zero=0;
001677 E4                CLR     A
001678 904CBA            MOV     DPTR,#R_TimeOut
00167B F0                MOVX    @DPTR,A
 1517: 			R_TimeOut.unstable++;
00167C 904CBC            MOV     DPTR,#R_TimeOut+02H
00167F E0                MOVX    A,@DPTR
001680 04                INC     A
001681 F0                MOVX    @DPTR,A
 1518: 			}
001682         ?C0227?CS_SCALE_PROC:
 1519: 
 1520: 		if(R_TimeOut.zero >=CS_Scale_TimeOut_Zero||R_TimeOut.unstable>=CS_Scale_TimeOut_Unstable)
001682 904CBA            MOV     DPTR,#R_TimeOut
001685 E0                MOVX    A,@DPTR
001686 C3                CLR     C
001687 940F              SUBB    A,#0FH
001689 5009              JNC     ?C0229?CS_SCALE_PROC
00168B 904CBC            MOV     DPTR,#R_TimeOut+02H
00168E E0                MOVX    A,@DPTR
00168F C3                CLR     C
001690 940F              SUBB    A,#0FH
001692 403B              JC      ?C0212?CS_SCALE_PROC
001694         ?C0229?CS_SCALE_PROC:
 1521: 			{
 1522: 				//R_Debug_temp=R_TimeOut.unstable;
 1523: 				//CS_ScaleDisplay_Debug();
 1524: 				//while(1);
 1525: 				
 1526: 				R_Scale_state = CS_Scale_state_standby;
001694 904CC5            MOV     DPTR,#R_Scale_state
001697 7402              MOV     A,#02H
001699 F0                MOVX    @DPTR,A
 1527: 				CS_Scale_StandbyProc(1);
00169A 7F01              MOV     R7,#01H
00169C B120              ACALL   _CS_Scale_StandbyProc
 1528: 				R_TimeOut.zero=0;
00169E E4                CLR     A
00169F 904CBA            MOV     DPTR,#R_TimeOut
0016A2 F0                MOVX    @DPTR,A
 1529: 				R_TimeOut.unstable=0;
0016A3 904CBC            MOV     DPTR,#R_TimeOut+02H
0016A6 F0                MOVX    @DPTR,A
 1530: 			}
0016A7 22                RET     
 1531: 		return;
 1532: 
 1533: 		}
0016A8         ?C0225?CS_SCALE_PROC:
 1534: 		
 1535: 
 1536: 		//锁定模式下的超时处理
 1537: 		if(R_Scale_state == CS_Scale_state_locking)
0016A8 904CC5            MOV     DPTR,#R_Scale_state
0016AB E0                MOVX    A,@DPTR
0016AC B40420            CJNE    A,#04H,?C0212?CS_SCALE_PROC
 1538: 		{
 1539: 			R_TimeOut.unstable=0;
0016AF E4                CLR     A
0016B0 904CBC            MOV     DPTR,#R_TimeOut+02H
0016B3 F0                MOVX    @DPTR,A
 1540: 			R_TimeOut.lock++;
0016B4 904CBB            MOV     DPTR,#R_TimeOut+01H
0016B7 E0                MOVX    A,@DPTR
0016B8 04                INC     A
0016B9 F0                MOVX    @DPTR,A
 1541: 			
 1542: 			if(R_TimeOut.lock>=CS_Scale_TimeOut_Lock)
0016BA E0                MOVX    A,@DPTR
0016BB C3                CLR     C
0016BC 940F              SUBB    A,#0FH
0016BE 400F              JC      ?C0212?CS_SCALE_PROC
 1543: 			{
 1544: 				
 1545: 				R_Scale_state = CS_Scale_state_standby;
0016C0 904CC5            MOV     DPTR,#R_Scale_state
0016C3 7402              MOV     A,#02H
0016C5 F0                MOVX    @DPTR,A
 1546: 				CS_Scale_StandbyProc(1);
0016C6 7F01              MOV     R7,#01H
0016C8 B120              ACALL   _CS_Scale_StandbyProc
 1547: 				R_TimeOut.lock=0;
0016CA E4                CLR     A
0016CB 904CBB            MOV     DPTR,#R_TimeOut+01H
0016CE F0                MOVX    @DPTR,A
 1548: 			}
 1549: 		return;
 1550: 		}		
 1551: 		
 1552: 
 1553: 	}
 1554: 
 1555: }
0016CF         ?C0212?CS_SCALE_PROC:
0016CF 22                RET     
----- FUNCTION _CS_Scale_TimeOutProc (END) -------


----- FUNCTION CS_Scale_Proc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  121: void CS_Scale_Proc(void)
  122: {
  123: 	if(R_Scale_state == CS_Scale_state_init)
  124: 		{	
0016D0 904CC5            MOV     DPTR,#R_Scale_state
0016D3 E0                MOVX    A,@DPTR
0016D4 7004              JNZ     ?C0001?CS_SCALE_PROC
  125: 		CS_Scale_PowerOnProc(0);
  126: 		}
0016D6 C200              CLR     ?CS_Scale_PowerOnProc?BIT
0016D8 912C              ACALL   CS_Scale_PowerOnProc
  127: 	if(R_Scale_state == CS_Scale_state_standby)
0016DA         ?C0001?CS_SCALE_PROC:
  128: 		{
0016DA 904CC5            MOV     DPTR,#R_Scale_state
0016DD E0                MOVX    A,@DPTR
0016DE B40204            CJNE    A,#02H,?C0002?CS_SCALE_PROC
  129: 		CS_Scale_StandbyProc(0);		
  130: 		}
0016E1 E4                CLR     A
0016E2 FF                MOV     R7,A
0016E3 B120              ACALL   _CS_Scale_StandbyProc
  131: 		
0016E5         ?C0002?CS_SCALE_PROC:
  132: 	if(B_Weight_AdOk == true)
0016E5 904CD7            MOV     DPTR,#B_Weight_AdOk
0016E8 E0                MOVX    A,@DPTR
0016E9 6401              XRL     A,#01H
0016EB 703E              JNZ     ?C0009?CS_SCALE_PROC
  133: 		{		
  134: 		B_Weight_AdOk = false;	
0016ED F0                MOVX    @DPTR,A
  135: 		
  136: 		if(CS_Scale_ZeroProc(GetPowerOnZeroState,0)== false)	//还没上电取零点先取零点
0016EE FD                MOV     R5,A
0016EF FC                MOV     R4,A
0016F0 7F02              MOV     R7,#02H
0016F2 12349A            LCALL   _CS_Scale_ZeroProc
0016F5 EF                MOV     A,R7
0016F6 4E                ORL     A,R6
0016F7 7007              JNZ     ?C0004?CS_SCALE_PROC
  137: 			{
  138: 			CS_Scale_ZeroProc(FindPowerOnZero,0);
0016F9 FD                MOV     R5,A
0016FA FC                MOV     R4,A
0016FB 7F0A              MOV     R7,#0AH
0016FD 02349A            LJMP    _CS_Scale_ZeroProc
  139: 			}
001700         ?C0004?CS_SCALE_PROC:
  140: 		else
  141: 			{
  142: 				
  143: 			if(R_Scale_state == CS_Scale_state_weighting)
001700 904CC5            MOV     DPTR,#R_Scale_state
001703 E0                MOVX    A,@DPTR
001704 B40106            CJNE    A,#01H,?C0006?CS_SCALE_PROC
  144: 				{
  145: 				CS_Scale_WeightProc();
001707 1232A0            LCALL   CS_Scale_WeightProc
  146: 				CS_ScaleDisplay();
00170A 123D11            LCALL   CS_ScaleDisplay
  147: 				}
00170D         ?C0006?CS_SCALE_PROC:
  148: 			if(R_Scale_state == CS_Scale_state_locking)
00170D 904CC5            MOV     DPTR,#R_Scale_state
001710 E0                MOVX    A,@DPTR
001711 B40407            CJNE    A,#04H,?C0007?CS_SCALE_PROC
  149: 				{					
  150: 				CS_ScaleDisplay_SteadyFlash();
001714 120F64            LCALL   CS_ScaleDisplay_SteadyFlash
  151: 				CS_Scale_SteadyProc(SteadyProcRun);
001717 7F01              MOV     R7,#01H
001719 F12C              ACALL   _CS_Scale_SteadyProc
  152: 				}
00171B         ?C0007?CS_SCALE_PROC:
  153: 			if(R_Scale_state == CS_Scale_state_caling)
00171B 904CC5            MOV     DPTR,#R_Scale_state
00171E E0                MOVX    A,@DPTR
00171F B40305            CJNE    A,#03H,?C0008?CS_SCALE_PROC
  154: 				{
  155: 				CS_Scale_CaliProc(CaliProcRun);
001722 E4                CLR     A
001723 FF                MOV     R7,A
001724 120A17            LCALL   _CS_Scale_CaliProc
  156: 				}	
001727         ?C0008?CS_SCALE_PROC:
  157: 			
  158: 			CS_Scale_TimeOutProc(0);
001727 E4                CLR     A
001728 FF                MOV     R7,A
001729 B1B3              ACALL   _CS_Scale_TimeOutProc
  159: 			}
  160: 		}
  161: }	
00172B         ?C0009?CS_SCALE_PROC:
00172B 22                RET     
----- FUNCTION CS_Scale_Proc (END) -------


----- FUNCTION _CS_Scale_SteadyProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  761: void CS_Scale_SteadyProc(u8_t option)
  762: {
;---- Variable 'option' assigned to Register 'R7' ----
  763: 	u16_t	R_AD_BUF;	
  764: 
  765: 	static	u8_t xdata B_Debug_Send;	
  766: 	static 	u8_t xdata ReadUTC;
  767: 	UserMeasureData SendData;
  768: 
  769: 	if(option==SteadyProcReset)
00172C EF                MOV     A,R7
00172D 7005              JNZ     ?C0110?CS_SCALE_PROC
  770: 		{
  771: 		B_Debug_Send=false;
00172F 904CA7            MOV     DPTR,#B_Debug_Send
001732 F0                MOVX    @DPTR,A
001733 22                RET     
  772: 		return;
  773: 		}
001734         ?C0110?CS_SCALE_PROC:
  774: 	
  775: 	if(CS_SoftTimer(GetIfTimeOut) == true)	//锁定闪现时间到
001734 7F03              MOV     R7,#03H
001736 120EF4            LCALL   _CS_SoftTimer
001739 EF                MOV     A,R7
00173A 6401              XRL     A,#01H
00173C 6002              JZ      $ + 4H
00173E E1D2              AJMP    ?C0111?CS_SCALE_PROC
  776: 		{
  777: 		if(CS_Scale_JudgeSteady(GetIfHeavySteady) == true)
001740 7F03              MOV     R7,#03H
001742 1232C6            LCALL   _CS_Scale_JudgeSteady
001745 BF0113            CJNE    R7,#01H,?C0113?CS_SCALE_PROC
  778: 			{
  779: 			
  780: 			CS_Scale_JudgeSteady(ResetSteady);
001748 7F01              MOV     R7,#01H
00174A 1232C6            LCALL   _CS_Scale_JudgeSteady
  781: 		
  782: 			CS_Scale_ZeroProc(ClrLockDownCheckFlag,0);
00174D E4                CLR     A
00174E FD                MOV     R5,A
00174F FC                MOV     R4,A
001750 7F08              MOV     R7,#08H
001752 12349A            LCALL   _CS_Scale_ZeroProc
  783: 			ReadUTC = false;	//初始化读ADC
001755 E4                CLR     A
001756 904CA8            MOV     DPTR,#ReadUTC
001759 F0                MOVX    @DPTR,A
  784: 			}
00175A 22                RET     
00175B         ?C0113?CS_SCALE_PROC:
  785: 		else
  786: 			{
  787: 			
  788: 			/*
  789: 			if(wechatStatus == WECHAT_ST_OK&&B_Debug_Send==false)
  790: 				{
  791: 				sendMeasureData();
  792: 				B_Debug_Send=true;
  793: 				}
  794: 			*/		
  795: 			if(B_Debug_Send==false)
00175B 904CA7            MOV     DPTR,#B_Debug_Send
00175E E0                MOVX    A,@DPTR
00175F 705D              JNZ     ?C0115?CS_SCALE_PROC
  796: 				{
  797: 				
  798: 				if(ReadUTC==false)
001761 A3                INC     DPTR
001762 E0                MOVX    A,@DPTR
001763 7006              JNZ     ?C0116?CS_SCALE_PROC
  799: 					{
  800: 					ReadUTC=true;
001765 04                INC     A
001766 F0                MOVX    @DPTR,A
  801: 					CS_Scale_1186ComSend(CS_CommTo1186_ReadTime);	
001767 7F82              MOV     R7,#082H
001769 B10F              ACALL   _CS_Scale_1186ComSend
  802: 					}
00176B         ?C0116?CS_SCALE_PROC:
  803: 				
  804: 				if(CS_If1186ComSucess()==true)
00176B B11A              ACALL   CS_If1186ComSucess
00176D EF                MOV     A,R7
00176E 6401              XRL     A,#01H
001770 7060              JNZ     ?C0111?CS_SCALE_PROC
  805: 					{
  806: 					
  807: 					
  808: 					ReadUTC=false;
001772 904CA8            MOV     DPTR,#ReadUTC
001775 F0                MOVX    @DPTR,A
  809: 					
  810: 					SendData.UTCTime[0]=R_1186_RTC[0];
001776 904CD3            MOV     DPTR,#R_1186_RTC
001779 E0                MOVX    A,@DPTR
00177A 904E14            MOV     DPTR,#SendData+02H
00177D F0                MOVX    @DPTR,A
  811: 					SendData.UTCTime[1]=R_1186_RTC[1];	
00177E 904CD4            MOV     DPTR,#R_1186_RTC+01H
001781 E0                MOVX    A,@DPTR
001782 904E15            MOV     DPTR,#SendData+03H
001785 F0                MOVX    @DPTR,A
  812: 					SendData.UTCTime[2]=R_1186_RTC[2];	
001786 904CD5            MOV     DPTR,#R_1186_RTC+02H
001789 E0                MOVX    A,@DPTR
00178A 904E16            MOV     DPTR,#SendData+04H
00178D F0                MOVX    @DPTR,A
  813: 					SendData.UTCTime[3]=R_1186_RTC[3];	
00178E 904CD6            MOV     DPTR,#R_1186_RTC+03H
001791 E0                MOVX    A,@DPTR
001792 904E17            MOV     DPTR,#SendData+05H
001795 F0                MOVX    @DPTR,A
  814: 					SendData.weight=ESWAP(R_UnitWeight.origin);
001796 904CC9            MOV     DPTR,#R_UnitWeight
001799 E0                MOVX    A,@DPTR
00179A FC                MOV     R4,A
00179B A3                INC     DPTR
00179C E0                MOVX    A,@DPTR
00179D FA                MOV     R2,A
00179E EC                MOV     A,R4
00179F FF                MOV     R7,A
0017A0 EA                MOV     A,R2
0017A1 FE                MOV     R6,A
0017A2 EF                MOV     A,R7
0017A3 904E12            MOV     DPTR,#SendData
0017A6 EE                MOV     A,R6
0017A7 F0                MOVX    @DPTR,A
0017A8 A3                INC     DPTR
0017A9 EF                MOV     A,R7
0017AA F0                MOVX    @DPTR,A
  815: 					QueuePush(&SendData);
0017AB 7B01              MOV     R3,#01H
0017AD 7A4E              MOV     R2,#HIGH SendData
0017AF 7912              MOV     R1,#LOW SendData
0017B1 122E4D            LCALL   _QueuePush
  816: 					B_Debug_Send=true;
0017B4 904CA7            MOV     DPTR,#B_Debug_Send
0017B7 7401              MOV     A,#01H
0017B9 F0                MOVX    @DPTR,A
  817: 
  818: 					CS_Scale_1186ComSend(CS_CommTo1186_ReadAd);
0017BA 7F80              MOV     R7,#080H
0017BC A10F              AJMP    _CS_Scale_1186ComSend
  819: 			
  820: 					//CS_SoftTimer(ResetSoftTimer);	
  821: 					
  822: 					}
  823: 				
  824: 				}
0017BE         ?C0115?CS_SCALE_PROC:
  825: 			else
  826: 				{
  827: 				R_AD_BUF = CS_Scale_GetDeltaAD(GetDeltaAD);
0017BE E4                CLR     A
0017BF FF                MOV     R7,A
0017C0 1236DC            LCALL   _CS_Scale_GetDeltaAD
;---- Variable 'R_AD_BUF' assigned to Register 'R6/R7' ----
  828: 				R_AD_BUF = CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
0017C3 AD07              MOV     R5,AR7
0017C5 AC06              MOV     R4,AR6
0017C7 E4                CLR     A
0017C8 FF                MOV     R7,A
0017C9 1237A5            LCALL   _CS_Scale_AdcFilter
  829: 				CS_Scale_GetWeight(R_AD_BUF);				
0017CC 120FDD            LCALL   _CS_Scale_GetWeight
  830: 				CS_Scale_ReturnLock();
0017CF 12373C            LCALL   CS_Scale_ReturnLock
  831: 				}
  832: 			}
  833: 		}
  834: 
  835: 			/*
  836: 			if(CS_SoftTimer(GetSoftTimerTime)<200)
  837: 				{
  838: 			R_Debug_temp=SendData.UTCTime;
  839: 			CS_ScaleDisplay_Debug();			
  840: 			return;
  841: 				}
  842: 			*/	
  843: 			/* B_Debug_Test =true;
  844: 			if(B_Debug_Test)
  845: 				{
  846: 				R_Debug_temp=888;
  847: 				CS_ScaleDisplay_Debug();
  848: 				while(1);
  849: 				}
  850: 			*/
  851: }
0017D2         ?C0111?CS_SCALE_PROC:
0017D2 22                RET     
----- FUNCTION _CS_Scale_SteadyProc (END) -------


----- FUNCTION QueueInit (BEGIN) -----
 FILE: 'lxProtocol.c'
  496: void QueueInit(void)
  497: {
  498: 	historyUserData.head = 0;
  499: 	historyUserData.tail = 0;
0017D3 E4                CLR     A
0017D4 904C10            MOV     DPTR,#historyUserData
0017D7 F0                MOVX    @DPTR,A
  500: 	historyUserData.size = 0;
0017D8 A3                INC     DPTR
0017D9 F0                MOVX    @DPTR,A
  501: }
0017DA A3                INC     DPTR
0017DB F0                MOVX    @DPTR,A
  502: 
0017DC 22                RET     
----- FUNCTION QueueInit (END) -------


----- FUNCTION _CS_Scale_JudgeLowBat (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  621: u8_t CS_Scale_JudgeLowBat(u8_t option)
  622: {
;---- Variable 'option' assigned to Register 'R7' ----
  623: 	static	u8_t xdata B_Weight_LowBat;			//低电标志
  624: 	
  625: 	if(R_1186sys_state&CS_Scale_LowBatBit==true)
  626: 		{
  627: 		B_Weight_LowBat = true;
  628: 		R_Display_Err=CS_ScaleDisplay_L_err;
  629: 		}
0017DD         ?C0082?CS_SCALE_PROC:
  630: 	else
  631: 		B_Weight_LowBat = false;
0017DD E4                CLR     A
0017DE 904C9F            MOV     DPTR,#B_Weight_LowBat
0017E1 F0                MOVX    @DPTR,A
0017E2         ?C0083?CS_SCALE_PROC:
  632: 
  633: 	if(option==GetIfLowBat)
0017E2 EF                MOV     A,R7
0017E3 B40106            CJNE    A,#01H,?C0084?CS_SCALE_PROC
  634: 		return B_Weight_LowBat;
0017E6 904C9F            MOV     DPTR,#B_Weight_LowBat
0017E9 E0                MOVX    A,@DPTR
0017EA FF                MOV     R7,A
0017EB 22                RET     
0017EC         ?C0084?CS_SCALE_PROC:
  635: 	
  636: 		return 0;	
0017EC 7F00              MOV     R7,#00H
  637: }
0017EE 22                RET     
----- FUNCTION _CS_Scale_JudgeLowBat (END) -------


----- FUNCTION _CS_Scale_JudgeOverLoad (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  640: u8_t CS_Scale_JudgeOverLoad(u8_t option)
  641: {
;---- Variable 'option' assigned to Register 'R7' ----
  642: 
  643: 	static	u8_t	  xdata R_Weight_OverLoadTimes;
  644: 	static	u8_t  xdata  B_Weight_OverLoad;			//超载标志
  645: 	if(option==ResetOverLoad)
0017EF EF                MOV     A,R7
0017F0 B40209            CJNE    A,#02H,?C0086?CS_SCALE_PROC
  646: 		{
  647: 		R_Weight_OverLoadTimes = 0;
0017F3 E4                CLR     A
0017F4 904CA0            MOV     DPTR,#R_Weight_OverLoadTimes
0017F7 F0                MOVX    @DPTR,A
  648: 		B_Weight_OverLoad = false;
0017F8 A3                INC     DPTR
0017F9 F0                MOVX    @DPTR,A
  649: 		return 0;
0017FA FF                MOV     R7,A
0017FB 22                RET     
  650: 		}
0017FC         ?C0086?CS_SCALE_PROC:
  651: 	
  652: 	if(R_UnitWeight.origin > CS_Scale_MaxWeight)
0017FC D3                SETB    C
0017FD 904CCA            MOV     DPTR,#R_UnitWeight+01H
001800 E0                MOVX    A,@DPTR
001801 94C4              SUBB    A,#0C4H
001803 904CC9            MOV     DPTR,#R_UnitWeight
001806 E0                MOVX    A,@DPTR
001807 943B              SUBB    A,#03BH
001809 4006              JC      ?C0088?CS_SCALE_PROC
  653: 		R_Weight_OverLoadTimes++;
00180B 904CA0            MOV     DPTR,#R_Weight_OverLoadTimes
00180E E0                MOVX    A,@DPTR
00180F 04                INC     A
001810 F0                MOVX    @DPTR,A
001811         ?C0088?CS_SCALE_PROC:
  654: 	if(R_Weight_OverLoadTimes >=2)
001811 904CA0            MOV     DPTR,#R_Weight_OverLoadTimes
001814 E0                MOVX    A,@DPTR
001815 C3                CLR     C
001816 9402              SUBB    A,#02H
001818 400E              JC      ?C0089?CS_SCALE_PROC
  655: 		{
  656: 		R_Weight_OverLoadTimes = 2;
00181A 7402              MOV     A,#02H
00181C F0                MOVX    @DPTR,A
  657: 		B_Weight_OverLoad = true;
00181D A3                INC     DPTR
00181E 14                DEC     A
00181F F0                MOVX    @DPTR,A
  658: 		R_Display_Err=CS_ScaleDisplay_L_err;
001820 904CC2            MOV     DPTR,#R_Display_Err
001823 7404              MOV     A,#04H
001825 F0                MOVX    @DPTR,A
  659: 		}
001826 8005              SJMP    ?C0090?CS_SCALE_PROC
001828         ?C0089?CS_SCALE_PROC:
  660: 	else
  661: 		B_Weight_OverLoad = false;
001828 E4                CLR     A
001829 904CA1            MOV     DPTR,#B_Weight_OverLoad
00182C F0                MOVX    @DPTR,A
00182D         ?C0090?CS_SCALE_PROC:
  662: 
  663: 	if(option==GetIfOverLoad)
00182D EF                MOV     A,R7
00182E B40106            CJNE    A,#01H,?C0091?CS_SCALE_PROC
  664: 		return B_Weight_OverLoad;
001831 904CA1            MOV     DPTR,#B_Weight_OverLoad
001834 E0                MOVX    A,@DPTR
001835 FF                MOV     R7,A
001836 22                RET     
001837         ?C0091?CS_SCALE_PROC:
  665: 	
  666: 		return 0;
001837 7F00              MOV     R7,#00H
  667: }
001839 22                RET     
----- FUNCTION _CS_Scale_JudgeOverLoad (END) -------


----- FUNCTION _generateChecksum (BEGIN) -----
 FILE: 'system.c'
  114: u8_t generateChecksum(u8_t *buf,u8_t len)
  115: {
00183A 904E41            MOV     DPTR,#buf
00183D EB                MOV     A,R3
00183E F0                MOVX    @DPTR,A
00183F A3                INC     DPTR
001840 EA                MOV     A,R2
001841 F0                MOVX    @DPTR,A
001842 A3                INC     DPTR
001843 E9                MOV     A,R1
001844 F0                MOVX    @DPTR,A
;---- Variable 'len' assigned to Register 'R5' ----
  116: 	u8_t result;
  117: 	result = 0;
;---- Variable 'result' assigned to Register 'R7' ----
001845 E4                CLR     A
001846 FF                MOV     R7,A
001847         ?C0012?SYSTEM:
  118: 	while(len--) {
001847 AE05              MOV     R6,AR5
001849 1D                DEC     R5
00184A EE                MOV     A,R6
00184B 6017              JZ      ?C0013?SYSTEM
  119: 		result^=*buf++;
00184D 904E41            MOV     DPTR,#buf
001850 E0                MOVX    A,@DPTR
001851 FB                MOV     R3,A
001852 A3                INC     DPTR
001853 E4                CLR     A
001854 75F001            MOV     B,#01H
001857 1201C8            LCALL   ?C?ILDIX
00185A A9F0              MOV     R1,B
00185C FA                MOV     R2,A
00185D 1200F9            LCALL   ?C?CLDPTR
001860 6F                XRL     A,R7
001861 FF                MOV     R7,A
  120: 	}
001862 80E3              SJMP    ?C0012?SYSTEM
001864         ?C0013?SYSTEM:
  121: 	return result;
  122: }
001864 22                RET     
----- FUNCTION _generateChecksum (END) -------


----- FUNCTION CS_1186Com_ReadMacAdress_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   86: void CS_1186Com_ReadMacAdress_Proc(void)
   87: {
   88: 	u8_t i;
   89: 	u8_t xdata * ptr;
   90: 
   91: 	i=0;
001865 E4                CLR     A
001866 904E4A            MOV     DPTR,#i
001869 F0                MOVX    @DPTR,A
   92: 	ptr =&i;
00186A A3                INC     DPTR
00186B 744E              MOV     A,#HIGH i
00186D F0                MOVX    @DPTR,A
00186E A3                INC     DPTR
00186F 744A              MOV     A,#LOW i
001871 F0                MOVX    @DPTR,A
   93: 	
   94: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadOtp)
001872 904D55            MOV     DPTR,#R_Weight_Com_Coo
001875 E0                MOVX    A,@DPTR
001876 B4842C            CJNE    A,#084H,?C0014?CS_COMMTO1186
   95: 		{
   96: 		uartTxBuf[0]=6;		//read 6 byte MacAdress
001879 904D58            MOV     DPTR,#uartTxBuf
00187C 7406              MOV     A,#06H
00187E F0                MOVX    @DPTR,A
   97: 		uartTxBuf[1]=0xF7;	//OTP  adress low 8bits
00187F A3                INC     DPTR
001880 74F7              MOV     A,#0F7H
001882 F0                MOVX    @DPTR,A
   98: 		uartTxBuf[2]=0x0F;	//OTP  adress high 8bits
001883 A3                INC     DPTR
001884 740F              MOV     A,#0FH
001886 F0                MOVX    @DPTR,A
   99: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadOtp,uartTxBuf);
001887 7B01              MOV     R3,#01H
001889 7A4D              MOV     R2,#HIGH uartTxBuf
00188B 7958              MOV     R1,#LOW uartTxBuf
00188D 7F84              MOV     R7,#084H
00188F 3117              ACALL   _CS_CommTo1186_SendCmd
  100: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadOtp;
001891 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
001894 7484              MOV     A,#084H
001896 F0                MOVX    @DPTR,A
  101: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadOtpStandby;
001897 904D55            MOV     DPTR,#R_Weight_Com_Coo
00189A 7405              MOV     A,#05H
00189C F0                MOVX    @DPTR,A
  102: 		uartTimeoutCnt=0;
00189D E4                CLR     A
00189E 904D68            MOV     DPTR,#uartTimeoutCnt
0018A1 F0                MOVX    @DPTR,A
  103: 		YC_UARTClearBuffer();
0018A2 120592            LCALL   YC_UARTClearBuffer
  104: 		}
0018A5         ?C0014?CS_COMMTO1186:
  105: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadOtpStandby)
0018A5 904D55            MOV     DPTR,#R_Weight_Com_Coo
0018A8 E0                MOVX    A,@DPTR
0018A9 6405              XRL     A,#05H
0018AB 7069              JNZ     ?C0019?CS_COMMTO1186
  106: 		{
  107: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 11) == 11)
0018AD 7B01              MOV     R3,#01H
0018AF 7A4D              MOV     R2,#HIGH uartRcvBuf
0018B1 7945              MOV     R1,#LOW uartRcvBuf
0018B3 7D0B              MOV     R5,#0BH
0018B5 FC                MOV     R4,A
0018B6 1207A8            LCALL   _YC_UARTReciveDataExpected
0018B9 EF                MOV     A,R7
0018BA 640B              XRL     A,#0BH
0018BC 4E                ORL     A,R6
0018BD 7057              JNZ     ?C0019?CS_COMMTO1186
  108: 			{
  109: 			if(generateChecksum(uartRcvBuf,10) == uartRcvBuf[10] &&
0018BF 7B01              MOV     R3,#01H
0018C1 7A4D              MOV     R2,#HIGH uartRcvBuf
0018C3 7945              MOV     R1,#LOW uartRcvBuf
0018C5 7D0A              MOV     R5,#0AH
0018C7 113A              ACALL   _generateChecksum
0018C9 904D4F            MOV     DPTR,#uartRcvBuf+0AH
0018CC E0                MOVX    A,@DPTR
0018CD 6F                XRL     A,R7
0018CE 7040              JNZ     ?C0017?CS_COMMTO1186
0018D0 904D47            MOV     DPTR,#uartRcvBuf+02H
0018D3 E0                MOVX    A,@DPTR
0018D4 6410              XRL     A,#010H
0018D6 7038              JNZ     ?C0017?CS_COMMTO1186
0018D8 A3                INC     DPTR
0018D9 E0                MOVX    A,@DPTR
0018DA B48433            CJNE    A,#084H,?C0017?CS_COMMTO1186
  110: 			uartRcvBuf[2] == UART_EVENT_OK &&
  111: 			uartRcvBuf[3] == CS_CommTo1186_ReadOtp)
  112: 				{	
  113: 				//slave_state = SLAVE_ST_SET_PARAM;
  114: 				//R_Debug_temp= uartRcvBuf[5];	//测试用
  115: 
  116: 				//数据放错地址，部分数据手动赋值
  117: 				uartRcvBuf[9]= uartRcvBuf[6];
0018DD 904D4B            MOV     DPTR,#uartRcvBuf+06H
0018E0 E0                MOVX    A,@DPTR
0018E1 904D4E            MOV     DPTR,#uartRcvBuf+09H
0018E4 F0                MOVX    @DPTR,A
  118: 				uartRcvBuf[8]=0x55;
0018E5 904D4D            MOV     DPTR,#uartRcvBuf+08H
0018E8 7455              MOV     A,#055H
0018EA F0                MOVX    @DPTR,A
  119: 				uartRcvBuf[7]=uartRcvBuf[5];
0018EB 904D4A            MOV     DPTR,#uartRcvBuf+05H
0018EE E0                MOVX    A,@DPTR
0018EF 904D4C            MOV     DPTR,#uartRcvBuf+07H
0018F2 F0                MOVX    @DPTR,A
  120: 				uartRcvBuf[6]=0xbe;
0018F3 904D4B            MOV     DPTR,#uartRcvBuf+06H
0018F6 74BE              MOV     A,#0BEH
0018F8 F0                MOVX    @DPTR,A
  121: 				uartRcvBuf[5]=uartRcvBuf[4];
0018F9 904D49            MOV     DPTR,#uartRcvBuf+04H
0018FC E0                MOVX    A,@DPTR
0018FD A3                INC     DPTR
0018FE F0                MOVX    @DPTR,A
  122: 				uartRcvBuf[4]=0x08;
0018FF 904D49            MOV     DPTR,#uartRcvBuf+04H
001902 7408              MOV     A,#08H
001904 F0                MOVX    @DPTR,A
  123: 
  124: 				/*
  125: 				xmemcpy(mem_le_lap,&uartRcvBuf[4],6);
  126: 				if((*mem_adv_lap_ptr) != 0) 
  127: 					{
  128: 					for(i=0;i<6;i++) 
  129: 						{
  130: 						ptr = (u8_t xdata *)(ESWAP(*mem_adv_lap_ptr)+i);
  131: 						*ptr= uartRcvBuf[9-i];
  132: 						}
  133: 					}
  134: 				*/
  135: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
001905 E4                CLR     A
001906 904D55            MOV     DPTR,#R_Weight_Com_Coo
001909 F0                MOVX    @DPTR,A
  136: 				R_Weight_Com_Coo.sucess=true;
00190A 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
00190D 04                INC     A
00190E F0                MOVX    @DPTR,A
  137: 				}
00190F 22                RET     
001910         ?C0017?CS_COMMTO1186:
  138: 			else
  139: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
001910 904D68            MOV     DPTR,#uartTimeoutCnt
001913 7415              MOV     A,#015H
001915 F0                MOVX    @DPTR,A
  140: 			}
  141: 		}
  142: }
001916         ?C0019?CS_COMMTO1186:
001916 22                RET     
----- FUNCTION CS_1186Com_ReadMacAdress_Proc (END) -------


----- FUNCTION _CS_CommTo1186_SendCmd (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  421: void CS_CommTo1186_SendCmd(u8_t cmd_code ,u8_t * databuf)
  422: {
001917 904D82            MOV     DPTR,#cmd_code
00191A EF                MOV     A,R7
00191B F0                MOVX    @DPTR,A
00191C A3                INC     DPTR
00191D EB                MOV     A,R3
00191E F0                MOVX    @DPTR,A
00191F A3                INC     DPTR
001920 EA                MOV     A,R2
001921 F0                MOVX    @DPTR,A
001922 A3                INC     DPTR
001923 E9                MOV     A,R1
001924 F0                MOVX    @DPTR,A
  423: 	u8_t buf[10] = {0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,0x00,0x00};
  424:        u8_t len;
001925 7886              MOV     R0,#LOW buf
001927 7C4D              MOV     R4,#HIGH buf
001929 7D01              MOV     R5,#01H
00192B 7BFF              MOV     R3,#0FFH
00192D 7A04              MOV     R2,#HIGH _?ix1000
00192F 79B8              MOV     R1,#LOW _?ix1000
001931 7E00              MOV     R6,#00H
001933 7F0A              MOV     R7,#0AH
001935 1200D3            LCALL   ?C?COPY
  425: 
  426: 	 buf[0] = 0xc5;							//包头数据
001938 904D86            MOV     DPTR,#buf
00193B 74C5              MOV     A,#0C5H
00193D F0                MOVX    @DPTR,A
  427: 	switch(cmd_code)
00193E 904D82            MOV     DPTR,#cmd_code
001941 E0                MOVX    A,@DPTR
001942 12036F            LCALL   ?C?CCASE
001945 197E              DW      ?C0069?CS_COMMTO1186
001947 80                DB      080H
001948 1994              DW      ?C0070?CS_COMMTO1186
00194A 81                DB      081H
00194B 19AA              DW      ?C0071?CS_COMMTO1186
00194D 82                DB      082H
00194E 19C0              DW      ?C0072?CS_COMMTO1186
001950 83                DB      083H
001951 19FD              DW      ?C0073?CS_COMMTO1186
001953 84                DB      084H
001954 1A44              DW      ?C0074?CS_COMMTO1186
001956 85                DB      085H
001957 1A5A              DW      ?C0075?CS_COMMTO1186
001959 A0                DB      0A0H
00195A 1AAB              DW      ?C0076?CS_COMMTO1186
00195C A1                DB      0A1H
00195D 1B06              DW      ?C0077?CS_COMMTO1186
00195F A2                DB      0A2H
001960 1B57              DW      ?C0078?CS_COMMTO1186
001962 A3                DB      0A3H
001963 196D              DW      ?C0068?CS_COMMTO1186
001965 C5                DB      0C5H
001966 1B9E              DW      ?C0079?CS_COMMTO1186
001968 E0                DB      0E0H
001969 0000              DW      00H
00196B 1C01              DW      ?C0080?CS_COMMTO1186
  428: 		{
  429: 		case CS_CommTo1186_Reset:			//0
00196D         ?C0068?CS_COMMTO1186:
  430: 			buf[0] = 0x00;
00196D E4                CLR     A
00196E 904D86            MOV     DPTR,#buf
001971 F0                MOVX    @DPTR,A
  431: 			buf[1] = 0x00;
001972 A3                INC     DPTR
001973 F0                MOVX    @DPTR,A
  432: 			buf[2] = 0x00;
001974 A3                INC     DPTR
001975 F0                MOVX    @DPTR,A
  433: 			len  =  3;
001976 904D90            MOV     DPTR,#len
001979 7403              MOV     A,#03H
00197B F0                MOVX    @DPTR,A
  434: 			break;
00197C 810C              AJMP    ?C0067?CS_COMMTO1186
  435: 		case CS_CommTo1186_ReadAd:		 	// 1 
00197E         ?C0069?CS_COMMTO1186:
  436: 			buf[1] = 0x01;
00197E 904D87            MOV     DPTR,#buf+01H
001981 7401              MOV     A,#01H
001983 F0                MOVX    @DPTR,A
  437: 			buf[2] = 0x80;
001984 A3                INC     DPTR
001985 7480              MOV     A,#080H
001987 F0                MOVX    @DPTR,A
  438: 			buf[3] = 0x44;
001988 A3                INC     DPTR
001989 7444              MOV     A,#044H
00198B F0                MOVX    @DPTR,A
  439: 			len  =  4;
00198C 904D90            MOV     DPTR,#len
00198F 7404              MOV     A,#04H
001991 F0                MOVX    @DPTR,A
  440: 			break;			
001992 810C              AJMP    ?C0067?CS_COMMTO1186
  441: 		case CS_CommTo1186_ReadVersion:		 // 2 
001994         ?C0070?CS_COMMTO1186:
  442: 			buf[1] = 0x01;
001994 904D87            MOV     DPTR,#buf+01H
001997 7401              MOV     A,#01H
001999 F0                MOVX    @DPTR,A
  443: 			buf[2] = 0x81;
00199A A3                INC     DPTR
00199B 7481              MOV     A,#081H
00199D F0                MOVX    @DPTR,A
  444: 			buf[3] = 0x45;
00199E A3                INC     DPTR
00199F 7445              MOV     A,#045H
0019A1 F0                MOVX    @DPTR,A
  445: 			len  =  4;
0019A2 904D90            MOV     DPTR,#len
0019A5 7404              MOV     A,#04H
0019A7 F0                MOVX    @DPTR,A
  446: 			break;
0019A8 810C              AJMP    ?C0067?CS_COMMTO1186
  447: 		case CS_CommTo1186_ReadTime:		 // 3 
0019AA         ?C0071?CS_COMMTO1186:
  448: 			buf[1] = 0x01;
0019AA 904D87            MOV     DPTR,#buf+01H
0019AD 7401              MOV     A,#01H
0019AF F0                MOVX    @DPTR,A
  449: 			buf[2] = 0x82;
0019B0 A3                INC     DPTR
0019B1 7482              MOV     A,#082H
0019B3 F0                MOVX    @DPTR,A
  450: 			buf[3] = 0x46;
0019B4 A3                INC     DPTR
0019B5 7446              MOV     A,#046H
0019B7 F0                MOVX    @DPTR,A
  451: 			len  =  4;
0019B8 904D90            MOV     DPTR,#len
0019BB 7404              MOV     A,#04H
0019BD F0                MOVX    @DPTR,A
  452: 			break;
0019BE 810C              AJMP    ?C0067?CS_COMMTO1186
  453: 		case CS_CommTo1186_ReadRam:		 // 4 
0019C0         ?C0072?CS_COMMTO1186:
  454: 			buf[1] = 0x03;
0019C0 904D87            MOV     DPTR,#buf+01H
0019C3 7403              MOV     A,#03H
0019C5 F0                MOVX    @DPTR,A
  455: 			buf[2] = 0x83;
0019C6 A3                INC     DPTR
0019C7 7483              MOV     A,#083H
0019C9 F0                MOVX    @DPTR,A
  456: 			buf[3] = databuf[1];
0019CA 904D83            MOV     DPTR,#databuf
0019CD E0                MOVX    A,@DPTR
0019CE FB                MOV     R3,A
0019CF A3                INC     DPTR
0019D0 E0                MOVX    A,@DPTR
0019D1 FA                MOV     R2,A
0019D2 A3                INC     DPTR
0019D3 E0                MOVX    A,@DPTR
0019D4 F9                MOV     R1,A
0019D5 900001            MOV     DPTR,#01H
0019D8 120112            LCALL   ?C?CLDOPTR
0019DB 904D89            MOV     DPTR,#buf+03H
0019DE F0                MOVX    @DPTR,A
  457: 			buf[4] = databuf[0];	 
0019DF 1200F9            LCALL   ?C?CLDPTR
0019E2 904D8A            MOV     DPTR,#buf+04H
0019E5 F0                MOVX    @DPTR,A
  458: 			buf[5] =  CS_CommTo1186_Xor(buf,5);
0019E6 7B01              MOV     R3,#01H
0019E8 7A4D              MOV     R2,#HIGH buf
0019EA 7986              MOV     R1,#LOW buf
0019EC 7D05              MOV     R5,#05H
0019EE B117              ACALL   _CS_CommTo1186_Xor
0019F0 904D8B            MOV     DPTR,#buf+05H
0019F3 EF                MOV     A,R7
0019F4 F0                MOVX    @DPTR,A
  459: 			len  =  6;
0019F5 904D90            MOV     DPTR,#len
0019F8 7406              MOV     A,#06H
0019FA F0                MOVX    @DPTR,A
  460: 			break;
0019FB 810C              AJMP    ?C0067?CS_COMMTO1186
  461: 		case CS_CommTo1186_ReadOtp:		 // 5 
0019FD         ?C0073?CS_COMMTO1186:
  462: 			buf[1] = 0x04;
0019FD 904D87            MOV     DPTR,#buf+01H
001A00 7404              MOV     A,#04H
001A02 F0                MOVX    @DPTR,A
  463: 			buf[2] = 0x84;
001A03 A3                INC     DPTR
001A04 7484              MOV     A,#084H
001A06 F0                MOVX    @DPTR,A
  464: 			buf[3] = databuf[2];
001A07 904D83            MOV     DPTR,#databuf
001A0A E0                MOVX    A,@DPTR
001A0B FB                MOV     R3,A
001A0C A3                INC     DPTR
001A0D E0                MOVX    A,@DPTR
001A0E FA                MOV     R2,A
001A0F A3                INC     DPTR
001A10 E0                MOVX    A,@DPTR
001A11 F9                MOV     R1,A
001A12 900002            MOV     DPTR,#02H
001A15 120112            LCALL   ?C?CLDOPTR
001A18 904D89            MOV     DPTR,#buf+03H
001A1B F0                MOVX    @DPTR,A
  465: 			buf[4] = databuf[1];	
001A1C 900001            MOV     DPTR,#01H
001A1F 120112            LCALL   ?C?CLDOPTR
001A22 904D8A            MOV     DPTR,#buf+04H
001A25 F0                MOVX    @DPTR,A
  466: 			buf[5] = databuf[0]; 
001A26 1200F9            LCALL   ?C?CLDPTR
001A29 904D8B            MOV     DPTR,#buf+05H
001A2C F0                MOVX    @DPTR,A
  467: 			buf[6] = CS_CommTo1186_Xor(buf,6);
001A2D 7B01              MOV     R3,#01H
001A2F 7A4D              MOV     R2,#HIGH buf
001A31 7986              MOV     R1,#LOW buf
001A33 7D06              MOV     R5,#06H
001A35 B117              ACALL   _CS_CommTo1186_Xor
001A37 904D8C            MOV     DPTR,#buf+06H
001A3A EF                MOV     A,R7
001A3B F0                MOVX    @DPTR,A
  468: 			len  =  7;
001A3C 904D90            MOV     DPTR,#len
001A3F 7407              MOV     A,#07H
001A41 F0                MOVX    @DPTR,A
  469: 			break;
001A42 810C              AJMP    ?C0067?CS_COMMTO1186
  470: 		case CS_CommTo1186_ReadAdZero:		 // 6 
001A44         ?C0074?CS_COMMTO1186:
  471: 			buf[1] = 0x01;
001A44 904D87            MOV     DPTR,#buf+01H
001A47 7401              MOV     A,#01H
001A49 F0                MOVX    @DPTR,A
  472: 			buf[2] = 0x85;
001A4A A3                INC     DPTR
001A4B 7485              MOV     A,#085H
001A4D F0                MOVX    @DPTR,A
  473: 			buf[3] = 0x41;
001A4E A3                INC     DPTR
001A4F 7441              MOV     A,#041H
001A51 F0                MOVX    @DPTR,A
  474: 			len  =  4;
001A52 904D90            MOV     DPTR,#len
001A55 7404              MOV     A,#04H
001A57 F0                MOVX    @DPTR,A
  475: 			break;
001A58 810C              AJMP    ?C0067?CS_COMMTO1186
  476: 		case CS_CommTo1186_SetSleepMode:	 // 7 
001A5A         ?C0075?CS_COMMTO1186:
  477: 			buf[1] = 0x05;
001A5A 904D87            MOV     DPTR,#buf+01H
001A5D 7405              MOV     A,#05H
001A5F F0                MOVX    @DPTR,A
  478: 			buf[2] = 0xA0;
001A60 A3                INC     DPTR
001A61 74A0              MOV     A,#0A0H
001A63 F0                MOVX    @DPTR,A
  479: 			buf[3] = databuf[3];
001A64 904D83            MOV     DPTR,#databuf
001A67 E0                MOVX    A,@DPTR
001A68 FB                MOV     R3,A
001A69 A3                INC     DPTR
001A6A E0                MOVX    A,@DPTR
001A6B FA                MOV     R2,A
001A6C A3                INC     DPTR
001A6D E0                MOVX    A,@DPTR
001A6E F9                MOV     R1,A
001A6F 900003            MOV     DPTR,#03H
001A72 120112            LCALL   ?C?CLDOPTR
001A75 904D89            MOV     DPTR,#buf+03H
001A78 F0                MOVX    @DPTR,A
  480: 			buf[4] = databuf[2];	
001A79 900002            MOV     DPTR,#02H
001A7C 120112            LCALL   ?C?CLDOPTR
001A7F 904D8A            MOV     DPTR,#buf+04H
001A82 F0                MOVX    @DPTR,A
  481: 			buf[5] = databuf[1];
001A83 900001            MOV     DPTR,#01H
001A86 120112            LCALL   ?C?CLDOPTR
001A89 904D8B            MOV     DPTR,#buf+05H
001A8C F0                MOVX    @DPTR,A
  482: 			buf[6] = databuf[0]; 
001A8D 1200F9            LCALL   ?C?CLDPTR
001A90 904D8C            MOV     DPTR,#buf+06H
001A93 F0                MOVX    @DPTR,A
  483: 			buf[7] = CS_CommTo1186_Xor(buf,7);
001A94 7B01              MOV     R3,#01H
001A96 7A4D              MOV     R2,#HIGH buf
001A98 7986              MOV     R1,#LOW buf
001A9A 7D07              MOV     R5,#07H
001A9C B117              ACALL   _CS_CommTo1186_Xor
001A9E 904D8D            MOV     DPTR,#buf+07H
001AA1 EF                MOV     A,R7
001AA2 F0                MOVX    @DPTR,A
  484: 			len  =  8;
001AA3 904D90            MOV     DPTR,#len
001AA6 7408              MOV     A,#08H
001AA8 F0                MOVX    @DPTR,A
  485: 			break;
001AA9 810C              AJMP    ?C0067?CS_COMMTO1186
  486: 		case CS_CommTo1186_SetOpenWeight:	 // 8 
001AAB         ?C0076?CS_COMMTO1186:
  487: 			buf[1] = 0x06;
001AAB 904D87            MOV     DPTR,#buf+01H
001AAE 7406              MOV     A,#06H
001AB0 F0                MOVX    @DPTR,A
  488: 			buf[2] = 0xA1;
001AB1 A3                INC     DPTR
001AB2 74A1              MOV     A,#0A1H
001AB4 F0                MOVX    @DPTR,A
  489: 			buf[3] = databuf[4];
001AB5 904D83            MOV     DPTR,#databuf
001AB8 E0                MOVX    A,@DPTR
001AB9 FB                MOV     R3,A
001ABA A3                INC     DPTR
001ABB E0                MOVX    A,@DPTR
001ABC FA                MOV     R2,A
001ABD A3                INC     DPTR
001ABE E0                MOVX    A,@DPTR
001ABF F9                MOV     R1,A
001AC0 900004            MOV     DPTR,#04H
001AC3 120112            LCALL   ?C?CLDOPTR
001AC6 904D89            MOV     DPTR,#buf+03H
001AC9 F0                MOVX    @DPTR,A
  490: 			buf[4] = databuf[3];	
001ACA 900003            MOV     DPTR,#03H
001ACD 120112            LCALL   ?C?CLDOPTR
001AD0 904D8A            MOV     DPTR,#buf+04H
001AD3 F0                MOVX    @DPTR,A
  491: 			buf[5] = databuf[2];
001AD4 900002            MOV     DPTR,#02H
001AD7 120112            LCALL   ?C?CLDOPTR
001ADA 904D8B            MOV     DPTR,#buf+05H
001ADD F0                MOVX    @DPTR,A
  492: 			buf[6] = databuf[1];
001ADE 900001            MOV     DPTR,#01H
001AE1 120112            LCALL   ?C?CLDOPTR
001AE4 904D8C            MOV     DPTR,#buf+06H
001AE7 F0                MOVX    @DPTR,A
  493: 			buf[7] = databuf[0]; 
001AE8 1200F9            LCALL   ?C?CLDPTR
001AEB 904D8D            MOV     DPTR,#buf+07H
001AEE F0                MOVX    @DPTR,A
  494: 			buf[8] = CS_CommTo1186_Xor(buf,8);
001AEF 7B01              MOV     R3,#01H
001AF1 7A4D              MOV     R2,#HIGH buf
001AF3 7986              MOV     R1,#LOW buf
001AF5 7D08              MOV     R5,#08H
001AF7 B117              ACALL   _CS_CommTo1186_Xor
001AF9 904D8E            MOV     DPTR,#buf+08H
001AFC EF                MOV     A,R7
001AFD F0                MOVX    @DPTR,A
  495: 			len  =  9;
001AFE 904D90            MOV     DPTR,#len
001B01 7409              MOV     A,#09H
001B03 F0                MOVX    @DPTR,A
  496: 			break;
001B04 810C              AJMP    ?C0067?CS_COMMTO1186
  497: 		case CS_CommTo1186_SetTime:		 // 9 
001B06         ?C0077?CS_COMMTO1186:
  498: 			buf[1] = 0x05;
001B06 904D87            MOV     DPTR,#buf+01H
001B09 7405              MOV     A,#05H
001B0B F0                MOVX    @DPTR,A
  499: 			buf[2] = 0xA2;
001B0C A3                INC     DPTR
001B0D 74A2              MOV     A,#0A2H
001B0F F0                MOVX    @DPTR,A
  500: 			buf[3] = databuf[3];
001B10 904D83            MOV     DPTR,#databuf
001B13 E0                MOVX    A,@DPTR
001B14 FB                MOV     R3,A
001B15 A3                INC     DPTR
001B16 E0                MOVX    A,@DPTR
001B17 FA                MOV     R2,A
001B18 A3                INC     DPTR
001B19 E0                MOVX    A,@DPTR
001B1A F9                MOV     R1,A
001B1B 900003            MOV     DPTR,#03H
001B1E 120112            LCALL   ?C?CLDOPTR
001B21 904D89            MOV     DPTR,#buf+03H
001B24 F0                MOVX    @DPTR,A
  501: 			buf[4] = databuf[2];	
001B25 900002            MOV     DPTR,#02H
001B28 120112            LCALL   ?C?CLDOPTR
001B2B 904D8A            MOV     DPTR,#buf+04H
001B2E F0                MOVX    @DPTR,A
  502: 			buf[5] = databuf[1];
001B2F 900001            MOV     DPTR,#01H
001B32 120112            LCALL   ?C?CLDOPTR
001B35 904D8B            MOV     DPTR,#buf+05H
001B38 F0                MOVX    @DPTR,A
  503: 			buf[6] = databuf[0]; 
001B39 1200F9            LCALL   ?C?CLDPTR
001B3C 904D8C            MOV     DPTR,#buf+06H
001B3F F0                MOVX    @DPTR,A
  504: 			buf[7] = CS_CommTo1186_Xor(buf,7);
001B40 7B01              MOV     R3,#01H
001B42 7A4D              MOV     R2,#HIGH buf
001B44 7986              MOV     R1,#LOW buf
001B46 7D07              MOV     R5,#07H
001B48 B117              ACALL   _CS_CommTo1186_Xor
001B4A 904D8D            MOV     DPTR,#buf+07H
001B4D EF                MOV     A,R7
001B4E F0                MOVX    @DPTR,A
  505: 			len  =  8;	
001B4F 904D90            MOV     DPTR,#len
001B52 7408              MOV     A,#08H
001B54 F0                MOVX    @DPTR,A
  506: 			break;
001B55 810C              AJMP    ?C0067?CS_COMMTO1186
  507: 		case CS_CommTo1186_SetRam:		 	// 10 
001B57         ?C0078?CS_COMMTO1186:
  508: 			buf[1] = 0x04;
001B57 904D87            MOV     DPTR,#buf+01H
001B5A 7404              MOV     A,#04H
001B5C F0                MOVX    @DPTR,A
  509: 			buf[2] = 0xA3;
001B5D A3                INC     DPTR
001B5E 74A3              MOV     A,#0A3H
001B60 F0                MOVX    @DPTR,A
  510: 			buf[3] = databuf[2];
001B61 904D83            MOV     DPTR,#databuf
001B64 E0                MOVX    A,@DPTR
001B65 FB                MOV     R3,A
001B66 A3                INC     DPTR
001B67 E0                MOVX    A,@DPTR
001B68 FA                MOV     R2,A
001B69 A3                INC     DPTR
001B6A E0                MOVX    A,@DPTR
001B6B F9                MOV     R1,A
001B6C 900002            MOV     DPTR,#02H
001B6F 120112            LCALL   ?C?CLDOPTR
001B72 904D89            MOV     DPTR,#buf+03H
001B75 F0                MOVX    @DPTR,A
  511: 			buf[4] = databuf[1];	
001B76 900001            MOV     DPTR,#01H
001B79 120112            LCALL   ?C?CLDOPTR
001B7C 904D8A            MOV     DPTR,#buf+04H
001B7F F0                MOVX    @DPTR,A
  512: 			buf[5] = databuf[0]; 
001B80 1200F9            LCALL   ?C?CLDPTR
001B83 904D8B            MOV     DPTR,#buf+05H
001B86 F0                MOVX    @DPTR,A
  513: 			buf[6] = CS_CommTo1186_Xor(buf,6);
001B87 7B01              MOV     R3,#01H
001B89 7A4D              MOV     R2,#HIGH buf
001B8B 7986              MOV     R1,#LOW buf
001B8D 7D06              MOV     R5,#06H
001B8F B117              ACALL   _CS_CommTo1186_Xor
001B91 904D8C            MOV     DPTR,#buf+06H
001B94 EF                MOV     A,R7
001B95 F0                MOVX    @DPTR,A
  514: 			len  =  7;			
001B96 904D90            MOV     DPTR,#len
001B99 7407              MOV     A,#07H
001B9B F0                MOVX    @DPTR,A
  515: 			break;
001B9C 806E              SJMP    ?C0067?CS_COMMTO1186
  516: 		case CS_CommTo1186_LcdDisplay:		// 11 
001B9E         ?C0079?CS_COMMTO1186:
  517: 			buf[1] = 0x07;
001B9E 904D87            MOV     DPTR,#buf+01H
001BA1 7407              MOV     A,#07H
001BA3 F0                MOVX    @DPTR,A
  518: 			buf[2] = 0xe0;
001BA4 A3                INC     DPTR
001BA5 74E0              MOV     A,#0E0H
001BA7 F0                MOVX    @DPTR,A
  519: 			buf[3] = databuf[5];
001BA8 904D83            MOV     DPTR,#databuf
001BAB E0                MOVX    A,@DPTR
001BAC FB                MOV     R3,A
001BAD A3                INC     DPTR
001BAE E0                MOVX    A,@DPTR
001BAF FA                MOV     R2,A
001BB0 A3                INC     DPTR
001BB1 E0                MOVX    A,@DPTR
001BB2 F9                MOV     R1,A
001BB3 900005            MOV     DPTR,#05H
001BB6 120112            LCALL   ?C?CLDOPTR
001BB9 904D89            MOV     DPTR,#buf+03H
001BBC F0                MOVX    @DPTR,A
  520: 			buf[4] = databuf[4];
001BBD 900004            MOV     DPTR,#04H
001BC0 120112            LCALL   ?C?CLDOPTR
001BC3 904D8A            MOV     DPTR,#buf+04H
001BC6 F0                MOVX    @DPTR,A
  521: 			buf[5] = databuf[3];
001BC7 900003            MOV     DPTR,#03H
001BCA 120112            LCALL   ?C?CLDOPTR
001BCD 904D8B            MOV     DPTR,#buf+05H
001BD0 F0                MOVX    @DPTR,A
  522: 			buf[6] = databuf[2];
001BD1 900002            MOV     DPTR,#02H
001BD4 120112            LCALL   ?C?CLDOPTR
001BD7 904D8C            MOV     DPTR,#buf+06H
001BDA F0                MOVX    @DPTR,A
  523: 			buf[7] = databuf[1];
001BDB 900001            MOV     DPTR,#01H
001BDE 120112            LCALL   ?C?CLDOPTR
001BE1 904D8D            MOV     DPTR,#buf+07H
001BE4 F0                MOVX    @DPTR,A
  524: 			buf[8] = databuf[0];		 
001BE5 1200F9            LCALL   ?C?CLDPTR
001BE8 904D8E            MOV     DPTR,#buf+08H
001BEB F0                MOVX    @DPTR,A
  525: 			buf[9] = CS_CommTo1186_Xor(buf,9);
001BEC 7B01              MOV     R3,#01H
001BEE 7A4D              MOV     R2,#HIGH buf
001BF0 7986              MOV     R1,#LOW buf
001BF2 7D09              MOV     R5,#09H
001BF4 B117              ACALL   _CS_CommTo1186_Xor
001BF6 904D8F            MOV     DPTR,#buf+09H
001BF9 EF                MOV     A,R7
001BFA F0                MOVX    @DPTR,A
  526: 			len  =  10;
001BFB A3                INC     DPTR
001BFC 740A              MOV     A,#0AH
001BFE F0                MOVX    @DPTR,A
  527: 			break;
001BFF 800B              SJMP    ?C0067?CS_COMMTO1186
  528: 		default:		
001C01         ?C0080?CS_COMMTO1186:
  529: 			buf[1] = 0x00;
001C01 E4                CLR     A
001C02 904D87            MOV     DPTR,#buf+01H
001C05 F0                MOVX    @DPTR,A
  530: 			len   = 2;
001C06 904D90            MOV     DPTR,#len
001C09 7402              MOV     A,#02H
001C0B F0                MOVX    @DPTR,A
  531: 			break;
  532: 		}
001C0C         ?C0067?CS_COMMTO1186:
  533: 	YC_UARTSendData(buf, len);
001C0C 7B01              MOV     R3,#01H
001C0E 7A4D              MOV     R2,#HIGH buf
001C10 7986              MOV     R1,#LOW buf
001C12 904D90            MOV     DPTR,#len
001C15 E0                MOVX    A,@DPTR
001C16 FD                MOV     R5,A
001C17 7C00              MOV     R4,#00H
;----                  JMP     _YC_UARTSendData
  534: }
----- FUNCTION _CS_CommTo1186_SendCmd (END) -------


----- FUNCTION _YC_UARTSendData (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  351: void YC_UARTSendData(u8_t* pbuff, u16_t len)
  352: {
001C19 904DAE            MOV     DPTR,#pbuff
001C1C EB                MOV     A,R3
001C1D F0                MOVX    @DPTR,A
001C1E A3                INC     DPTR
001C1F EA                MOV     A,R2
001C20 F0                MOVX    @DPTR,A
001C21 A3                INC     DPTR
001C22 E9                MOV     A,R1
001C23 F0                MOVX    @DPTR,A
001C24 A3                INC     DPTR
001C25 EC                MOV     A,R4
001C26 F0                MOVX    @DPTR,A
001C27 A3                INC     DPTR
001C28 ED                MOV     A,R5
001C29 F0                MOVX    @DPTR,A
  353: 	int i;
  354: 	u8_t *twptr = (u8_t *)ESWAP(REG_UART_TX_PTR_W);
001C2A 90805E            MOV     DPTR,#0805EH
001C2D A3                INC     DPTR
001C2E E0                MOVX    A,@DPTR
001C2F FC                MOV     R4,A
001C30 90805E            MOV     DPTR,#0805EH
001C33 E0                MOVX    A,@DPTR
001C34 FF                MOV     R7,A
001C35 EC                MOV     A,R4
001C36 FE                MOV     R6,A
001C37 EF                MOV     A,R7
001C38 AA06              MOV     R2,AR6
001C3A F9                MOV     R1,A
001C3B 904DB5            MOV     DPTR,#twptr
001C3E E4                CLR     A
001C3F F0                MOVX    @DPTR,A
001C40 A3                INC     DPTR
001C41 EA                MOV     A,R2
001C42 F0                MOVX    @DPTR,A
001C43 A3                INC     DPTR
001C44 E9                MOV     A,R1
001C45 F0                MOVX    @DPTR,A
  355: 
  356: 	for(i=0;i<len;i++)
001C46 E4                CLR     A
001C47 904DB3            MOV     DPTR,#i
001C4A F0                MOVX    @DPTR,A
001C4B A3                INC     DPTR
001C4C F0                MOVX    @DPTR,A
001C4D         ?C0002?YC_PERIPHERAL:
001C4D 904DB1            MOV     DPTR,#len
001C50 E0                MOVX    A,@DPTR
001C51 FE                MOV     R6,A
001C52 A3                INC     DPTR
001C53 E0                MOVX    A,@DPTR
001C54 FF                MOV     R7,A
001C55 C3                CLR     C
001C56 904DB4            MOV     DPTR,#i+01H
001C59 E0                MOVX    A,@DPTR
001C5A 9F                SUBB    A,R7
001C5B 904DB3            MOV     DPTR,#i
001C5E E0                MOVX    A,@DPTR
001C5F 9E                SUBB    A,R6
001C60 4002              JC      $ + 4H
001C62 81F8              AJMP    ?C0003?YC_PERIPHERAL
  357: 	{
  358: 		xmemcpy(twptr++, pbuff++, 1);
001C64 904DB5            MOV     DPTR,#twptr
001C67 E0                MOVX    A,@DPTR
001C68 A3                INC     DPTR
001C69 E4                CLR     A
001C6A 75F001            MOV     B,#01H
001C6D 1201C8            LCALL   ?C?ILDIX
001C70 FE                MOV     R6,A
001C71 AFF0              MOV     R7,B
001C73 904DAE            MOV     DPTR,#pbuff
001C76 E0                MOVX    A,@DPTR
001C77 FB                MOV     R3,A
001C78 A3                INC     DPTR
001C79 E4                CLR     A
001C7A 75F001            MOV     B,#01H
001C7D 1201C8            LCALL   ?C?ILDIX
001C80 A9F0              MOV     R1,B
001C82 FA                MOV     R2,A
001C83 751C01            MOV     ?_xmemcpy?BYTE+05H,#01H
001C86 F19F              ACALL   _xmemcpy
  359: 
  360: 		if(((short)twptr-1)==ESWAP(REG_UART_TX_ADDR_E))	//twptr reach the end of buffer
001C88 90805C            MOV     DPTR,#0805CH
001C8B A3                INC     DPTR
001C8C E0                MOVX    A,@DPTR
001C8D FC                MOV     R4,A
001C8E 90805C            MOV     DPTR,#0805CH
001C91 E0                MOVX    A,@DPTR
001C92 FF                MOV     R7,A
001C93 EC                MOV     A,R4
001C94 FE                MOV     R6,A
001C95 EF                MOV     A,R7
001C96 904DB5            MOV     DPTR,#twptr
001C99 E0                MOVX    A,@DPTR
001C9A A3                INC     DPTR
001C9B E0                MOVX    A,@DPTR
001C9C FA                MOV     R2,A
001C9D A3                INC     DPTR
001C9E E0                MOVX    A,@DPTR
001C9F 24FF              ADD     A,#0FFH
001CA1 FD                MOV     R5,A
001CA2 EA                MOV     A,R2
001CA3 34FF              ADDC    A,#0FFH
001CA5 FC                MOV     R4,A
001CA6 EF                MOV     A,R7
001CA7 6D                XRL     A,R5
001CA8 7002              JNZ     ?C0022?YC_PERIPHERAL
001CAA EE                MOV     A,R6
001CAB 6C                XRL     A,R4
001CAC         ?C0022?YC_PERIPHERAL:
001CAC 703A              JNZ     ?C0004?YC_PERIPHERAL
  361: 		{
  362: 			REG_UART_TX_PTR_W = REG_UART_TX_ADDR_E;
001CAE 90805C            MOV     DPTR,#0805CH
001CB1 E0                MOVX    A,@DPTR
001CB2 FF                MOV     R7,A
001CB3 A3                INC     DPTR
001CB4 E0                MOVX    A,@DPTR
001CB5 A3                INC     DPTR
001CB6 CF                XCH     A,R7
001CB7 F0                MOVX    @DPTR,A
001CB8 A3                INC     DPTR
001CB9 EF                MOV     A,R7
001CBA F0                MOVX    @DPTR,A
001CBB         ?C0006?YC_PERIPHERAL:
  363: 			while(ESWAP(REG_UART_TX_ITEMS));
001CBB 90810E            MOV     DPTR,#0810EH
001CBE A3                INC     DPTR
001CBF E0                MOVX    A,@DPTR
001CC0 FC                MOV     R4,A
001CC1 90810E            MOV     DPTR,#0810EH
001CC4 E0                MOVX    A,@DPTR
001CC5 FF                MOV     R7,A
001CC6 EC                MOV     A,R4
001CC7 FE                MOV     R6,A
001CC8 EF                MOV     A,R7
001CC9 4E                ORL     A,R6
001CCA 70EF              JNZ     ?C0006?YC_PERIPHERAL
001CCC         ?C0007?YC_PERIPHERAL:
  364: 			
  365: 			twptr = (u8_t *)ESWAP(REG_UART_TX_ADDR_S);	//reset twptr
001CCC 90805A            MOV     DPTR,#0805AH
001CCF A3                INC     DPTR
001CD0 E0                MOVX    A,@DPTR
001CD1 FC                MOV     R4,A
001CD2 90805A            MOV     DPTR,#0805AH
001CD5 E0                MOVX    A,@DPTR
001CD6 FF                MOV     R7,A
001CD7 EC                MOV     A,R4
001CD8 FE                MOV     R6,A
001CD9 EF                MOV     A,R7
001CDA AA06              MOV     R2,AR6
001CDC F9                MOV     R1,A
001CDD 904DB5            MOV     DPTR,#twptr
001CE0 E4                CLR     A
001CE1 F0                MOVX    @DPTR,A
001CE2 A3                INC     DPTR
001CE3 EA                MOV     A,R2
001CE4 F0                MOVX    @DPTR,A
001CE5 A3                INC     DPTR
001CE6 E9                MOV     A,R1
001CE7 F0                MOVX    @DPTR,A
  366: 		}	
  367: 	}	
001CE8         ?C0004?YC_PERIPHERAL:
001CE8 904DB4            MOV     DPTR,#i+01H
001CEB E0                MOVX    A,@DPTR
001CEC 04                INC     A
001CED F0                MOVX    @DPTR,A
001CEE 7006              JNZ     ?C0023?YC_PERIPHERAL
001CF0 904DB3            MOV     DPTR,#i
001CF3 E0                MOVX    A,@DPTR
001CF4 04                INC     A
001CF5 F0                MOVX    @DPTR,A
001CF6         ?C0023?YC_PERIPHERAL:
001CF6 814D              AJMP    ?C0002?YC_PERIPHERAL
001CF8         ?C0003?YC_PERIPHERAL:
  368: 
  369: 	REG_UART_TX_PTR_W = ESWAP((short)twptr);
001CF8 904DB5            MOV     DPTR,#twptr
001CFB E0                MOVX    A,@DPTR
001CFC A3                INC     DPTR
001CFD E0                MOVX    A,@DPTR
001CFE FA                MOV     R2,A
001CFF A3                INC     DPTR
001D00 E0                MOVX    A,@DPTR
001D01 AC02              MOV     R4,AR2
001D03 FD                MOV     R5,A
001D04 EC                MOV     A,R4
001D05 FF                MOV     R7,A
001D06 33                RLC     A
001D07 95E0              SUBB    A,ACC
001D09 AB07              MOV     R3,AR7
001D0B ED                MOV     A,R5
001D0C FF                MOV     R7,A
001D0D EB                MOV     A,R3
001D0E 90805E            MOV     DPTR,#0805EH
001D11 CF                XCH     A,R7
001D12 F0                MOVX    @DPTR,A
001D13 A3                INC     DPTR
001D14 EF                MOV     A,R7
001D15 F0                MOVX    @DPTR,A
  370: 	//YC_UARTWaitSendData();
  371: }
001D16 22                RET     
----- FUNCTION _YC_UARTSendData (END) -------


----- FUNCTION _CS_CommTo1186_Xor (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  411: u8_t CS_CommTo1186_Xor(u8_t * buf,u8_t len)
  412: {
001D17 904E4D            MOV     DPTR,#buf
001D1A EB                MOV     A,R3
001D1B F0                MOVX    @DPTR,A
001D1C A3                INC     DPTR
001D1D EA                MOV     A,R2
001D1E F0                MOVX    @DPTR,A
001D1F A3                INC     DPTR
001D20 E9                MOV     A,R1
001D21 F0                MOVX    @DPTR,A
;---- Variable 'len' assigned to Register 'R5' ----
  413: 	u8_t	i;
  414: 	for(i=0;i<len;i++)
;---- Variable 'i' assigned to Register 'R7' ----
001D22 E4                CLR     A
001D23 FF                MOV     R7,A
001D24         ?C0063?CS_COMMTO1186:
001D24 EF                MOV     A,R7
001D25 C3                CLR     C
001D26 9D                SUBB    A,R5
001D27 5035              JNC     ?C0064?CS_COMMTO1186
  415: 		{
  416: 		*(buf+9) = *(buf+9) ^	*(buf+i);
001D29 904E4D            MOV     DPTR,#buf
001D2C E0                MOVX    A,@DPTR
001D2D FB                MOV     R3,A
001D2E A3                INC     DPTR
001D2F E0                MOVX    A,@DPTR
001D30 FA                MOV     R2,A
001D31 A3                INC     DPTR
001D32 E0                MOVX    A,@DPTR
001D33 2409              ADD     A,#09H
001D35 F9                MOV     R1,A
001D36 E4                CLR     A
001D37 3A                ADDC    A,R2
001D38 FA                MOV     R2,A
001D39 C002              PUSH    AR2
001D3B C001              PUSH    AR1
001D3D 1200F9            LCALL   ?C?CLDPTR
001D40 FE                MOV     R6,A
001D41 904E4D            MOV     DPTR,#buf
001D44 E0                MOVX    A,@DPTR
001D45 A3                INC     DPTR
001D46 E0                MOVX    A,@DPTR
001D47 FA                MOV     R2,A
001D48 A3                INC     DPTR
001D49 E0                MOVX    A,@DPTR
001D4A F9                MOV     R1,A
001D4B 8F82              MOV     DPL,R7
001D4D 758300            MOV     DPH,#00H
001D50 120112            LCALL   ?C?CLDOPTR
001D53 6E                XRL     A,R6
001D54 D001              POP     AR1
001D56 D002              POP     AR2
001D58 12013F            LCALL   ?C?CSTPTR
  417: 		}
001D5B 0F                INC     R7
001D5C 80C6              SJMP    ?C0063?CS_COMMTO1186
001D5E         ?C0064?CS_COMMTO1186:
  418: 	return *(buf+9);
001D5E 904E4D            MOV     DPTR,#buf
001D61 E0                MOVX    A,@DPTR
001D62 FB                MOV     R3,A
001D63 A3                INC     DPTR
001D64 E0                MOVX    A,@DPTR
001D65 FA                MOV     R2,A
001D66 A3                INC     DPTR
001D67 E0                MOVX    A,@DPTR
001D68 F9                MOV     R1,A
001D69 900009            MOV     DPTR,#09H
001D6C 120112            LCALL   ?C?CLDOPTR
001D6F FF                MOV     R7,A
  419: }
001D70 22                RET     
----- FUNCTION _CS_CommTo1186_Xor (END) -------


----- FUNCTION CS_ScaleDisplay_Debug (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
   55: void CS_ScaleDisplay_Debug()
   56: {
   57: 	u8_t buf[5];
   58: 	CS_ScaleDisplay_HexToBcd(R_Debug_temp,buf);
001D71 904CC7            MOV     DPTR,#R_Debug_temp
001D74 E0                MOVX    A,@DPTR
001D75 FE                MOV     R6,A
001D76 A3                INC     DPTR
001D77 E0                MOVX    A,@DPTR
001D78 FF                MOV     R7,A
001D79 7B01              MOV     R3,#01H
001D7B 7A4E              MOV     R2,#HIGH buf
001D7D 7929              MOV     R1,#LOW buf
001D7F F1D6              ACALL   _CS_ScaleDisplay_HexToBcd
   59: 		
   60: 	CS_lcd_showbuf[0] = CS_ScaleDisplay_LookUpTable(buf[1]);
001D81 904E2A            MOV     DPTR,#buf+01H
001D84 E0                MOVX    A,@DPTR
001D85 FF                MOV     R7,A
001D86 B1BE              ACALL   _CS_ScaleDisplay_LookUpTable
001D88 904D23            MOV     DPTR,#CS_lcd_showbuf
001D8B EF                MOV     A,R7
001D8C F0                MOVX    @DPTR,A
   61: 	CS_lcd_showbuf[1] = CS_ScaleDisplay_LookUpTable(buf[2]);
001D8D 904E2B            MOV     DPTR,#buf+02H
001D90 E0                MOVX    A,@DPTR
001D91 FF                MOV     R7,A
001D92 B1BE              ACALL   _CS_ScaleDisplay_LookUpTable
001D94 904D24            MOV     DPTR,#CS_lcd_showbuf+01H
001D97 EF                MOV     A,R7
001D98 F0                MOVX    @DPTR,A
   62: 	CS_lcd_showbuf[2] = CS_ScaleDisplay_LookUpTable(buf[3]);
001D99 904E2C            MOV     DPTR,#buf+03H
001D9C E0                MOVX    A,@DPTR
001D9D FF                MOV     R7,A
001D9E B1BE              ACALL   _CS_ScaleDisplay_LookUpTable
001DA0 904D25            MOV     DPTR,#CS_lcd_showbuf+02H
001DA3 EF                MOV     A,R7
001DA4 F0                MOVX    @DPTR,A
   63: 	CS_lcd_showbuf[3] = CS_ScaleDisplay_LookUpTable(buf[4]);	
001DA5 904E2D            MOV     DPTR,#buf+04H
001DA8 E0                MOVX    A,@DPTR
001DA9 FF                MOV     R7,A
001DAA B1BE              ACALL   _CS_ScaleDisplay_LookUpTable
001DAC 904D26            MOV     DPTR,#CS_lcd_showbuf+03H
001DAF EF                MOV     A,R7
001DB0 F0                MOVX    @DPTR,A
   64: 		
   65: 	CS_ScaleDisplay_LcdBuf_rShift4();
001DB1 123DD9            LCALL   CS_ScaleDisplay_LcdBuf_rShift4
   66: 
   67: 	CS_CommTo1186_SendCmd(CS_CommTo1186_LcdDisplay,CS_Lcd_Send_Data);
001DB4 7B01              MOV     R3,#01H
001DB6 7A4D              MOV     R2,#HIGH CS_Lcd_Send_Data
001DB8 7928              MOV     R1,#LOW CS_Lcd_Send_Data
001DBA 7FE0              MOV     R7,#0E0H
001DBC 2117              AJMP    _CS_CommTo1186_SendCmd
   68: 
----- FUNCTION CS_ScaleDisplay_Debug (END) -------


----- FUNCTION _CS_ScaleDisplay_LookUpTable (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  287: u8_t CS_ScaleDisplay_LookUpTable(u8_t NumData)
  288: {
;---- Variable 'NumData' assigned to Register 'R7' ----
  289: 	u8_t	 * data_ptr;
  290: 	data_ptr = CS_Lcd_Table;
001DBE 7B01              MOV     R3,#01H
001DC0 7A4D              MOV     R2,#HIGH CS_Lcd_Table
001DC2 792E              MOV     R1,#LOW CS_Lcd_Table
;---- Variable 'data_ptr' assigned to Register 'R1/R2/R3' ----
  291: 	return 	*(data_ptr + NumData);
001DC4 8F82              MOV     DPL,R7
001DC6 758300            MOV     DPH,#00H
001DC9 120112            LCALL   ?C?CLDOPTR
001DCC FF                MOV     R7,A
  292: }
001DCD 22                RET     
----- FUNCTION _CS_ScaleDisplay_LookUpTable (END) -------


----- FUNCTION _CS_ScaleDisplay_FreshBuf (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
   73: void CS_ScaleDisplay_FreshBuf(u8_t option,u16_t showdata)
   74: {
;---- Variable 'showdata' assigned to Register 'R4/R5' ----
001DCE 904E5A            MOV     DPTR,#option
001DD1 EF                MOV     A,R7
001DD2 F0                MOVX    @DPTR,A
   75: 	static	u8_t	data_buf[5];
   76: 
   77: 	//////////////////////////////////////////
   78: 	//数字部分赋值
   79: 	if(option==DisplayOverLoad)
001DD3 BF850F            CJNE    R7,#085H,?C0011?CS_SCALEDISPLAY
   80: 	{
   81: 	data_buf[0]=Lcdnull_Num;
001DD6 904D18            MOV     DPTR,#data_buf
001DD9 7415              MOV     A,#015H
001DDB F0                MOVX    @DPTR,A
   82: 	data_buf[1]=Lcdup_Num;
001DDC A3                INC     DPTR
001DDD 04                INC     A
001DDE F0                MOVX    @DPTR,A
   83: 	data_buf[2]=Lcdup_Num;
001DDF A3                INC     DPTR
001DE0 F0                MOVX    @DPTR,A
   84: 	data_buf[3]=Lcdup_Num;
001DE1 A3                INC     DPTR
001DE2 F0                MOVX    @DPTR,A
   85: 	data_buf[4]=Lcdup_Num;
001DE3 A3                INC     DPTR
001DE4 F0                MOVX    @DPTR,A
   86: 	}
001DE5         ?C0011?CS_SCALEDISPLAY:
   87: 
   88: 	if(option==DisplayLowBat)
001DE5 904E5A            MOV     DPTR,#option
001DE8 E0                MOVX    A,@DPTR
001DE9 FF                MOV     R7,A
001DEA B48614            CJNE    A,#086H,?C0012?CS_SCALEDISPLAY
   89: 	{
   90: 	data_buf[0]=0;
001DED E4                CLR     A
001DEE 904D18            MOV     DPTR,#data_buf
001DF1 F0                MOVX    @DPTR,A
   91: 	data_buf[1]=Lcdnull_Num;
001DF2 A3                INC     DPTR
001DF3 7415              MOV     A,#015H
001DF5 F0                MOVX    @DPTR,A
   92: 	data_buf[2]=LcdchL_Num;
001DF6 A3                INC     DPTR
001DF7 7410              MOV     A,#010H
001DF9 F0                MOVX    @DPTR,A
   93: 	data_buf[3]=Lcdcho_Num;
001DFA A3                INC     DPTR
001DFB 04                INC     A
001DFC F0                MOVX    @DPTR,A
   94: 	data_buf[4]=Lcdnull_Num;
001DFD A3                INC     DPTR
001DFE 7415              MOV     A,#015H
001E00 F0                MOVX    @DPTR,A
   95: 	}
001E01         ?C0012?CS_SCALEDISPLAY:
   96: 
   97: 	if(option==DisplayZeroErr)
001E01 EF                MOV     A,R7
001E02 B48712            CJNE    A,#087H,?C0013?CS_SCALEDISPLAY
   98: 	{
   99: 	data_buf[0]=Lcdnull_Num;
001E05 904D18            MOV     DPTR,#data_buf
001E08 7415              MOV     A,#015H
001E0A F0                MOVX    @DPTR,A
  100: 	data_buf[1]=Lcdnull_Num;
001E0B A3                INC     DPTR
001E0C F0                MOVX    @DPTR,A
  101: 	data_buf[2]=LcdchC_Num;
001E0D A3                INC     DPTR
001E0E 740C              MOV     A,#0CH
001E10 F0                MOVX    @DPTR,A
  102: 	data_buf[3]=Lcdnull_Num;
001E11 A3                INC     DPTR
001E12 7415              MOV     A,#015H
001E14 F0                MOVX    @DPTR,A
  103: 	data_buf[4]=Lcdnull_Num;
001E15 A3                INC     DPTR
001E16 F0                MOVX    @DPTR,A
  104: 	}
001E17         ?C0013?CS_SCALEDISPLAY:
  105: 	
  106: 	if(option==DisplayCal1||option==DisplayCal2||option==DisplayCal3||option==DisplayCal4)
001E17 EF                MOV     A,R7
001E18 6481              XRL     A,#081H
001E1A 600F              JZ      ?C0015?CS_SCALEDISPLAY
001E1C EF                MOV     A,R7
001E1D 6482              XRL     A,#082H
001E1F 600A              JZ      ?C0015?CS_SCALEDISPLAY
001E21 EF                MOV     A,R7
001E22 6483              XRL     A,#083H
001E24 6005              JZ      ?C0015?CS_SCALEDISPLAY
001E26 EF                MOV     A,R7
001E27 6484              XRL     A,#084H
001E29 703E              JNZ     ?C0014?CS_SCALEDISPLAY
001E2B         ?C0015?CS_SCALEDISPLAY:
  107: 	{
  108: 	data_buf[0]=0;
001E2B E4                CLR     A
001E2C 904D18            MOV     DPTR,#data_buf
001E2F F0                MOVX    @DPTR,A
  109: 	data_buf[1]=LcdchC_Num;
001E30 A3                INC     DPTR
001E31 740C              MOV     A,#0CH
001E33 F0                MOVX    @DPTR,A
  110: 	data_buf[2]=LcdchA_Num;
001E34 A3                INC     DPTR
001E35 740A              MOV     A,#0AH
001E37 F0                MOVX    @DPTR,A
  111: 	data_buf[3]=LcdchL_Num;
001E38 A3                INC     DPTR
001E39 7410              MOV     A,#010H
001E3B F0                MOVX    @DPTR,A
  112: 		if(option==DisplayCal1)
001E3C EF                MOV     A,R7
001E3D B48104            CJNE    A,#081H,?C0016?CS_SCALEDISPLAY
  113: 			data_buf[4]=1;
001E40 A3                INC     DPTR
001E41 7401              MOV     A,#01H
001E43 F0                MOVX    @DPTR,A
001E44         ?C0016?CS_SCALEDISPLAY:
  114: 		if(option==DisplayCal2)
001E44 904E5A            MOV     DPTR,#option
001E47 E0                MOVX    A,@DPTR
001E48 B48206            CJNE    A,#082H,?C0017?CS_SCALEDISPLAY
  115: 			data_buf[4]=2;
001E4B 904D1C            MOV     DPTR,#data_buf+04H
001E4E 7402              MOV     A,#02H
001E50 F0                MOVX    @DPTR,A
001E51         ?C0017?CS_SCALEDISPLAY:
  116: 		if(option==DisplayCal3)
001E51 904E5A            MOV     DPTR,#option
001E54 E0                MOVX    A,@DPTR
001E55 FF                MOV     R7,A
001E56 B48306            CJNE    A,#083H,?C0018?CS_SCALEDISPLAY
  117: 			data_buf[4]=3;
001E59 904D1C            MOV     DPTR,#data_buf+04H
001E5C 7403              MOV     A,#03H
001E5E F0                MOVX    @DPTR,A
001E5F         ?C0018?CS_SCALEDISPLAY:
  118: 		if(option==DisplayCal4)
001E5F EF                MOV     A,R7
001E60 B48406            CJNE    A,#084H,?C0014?CS_SCALEDISPLAY
  119: 			data_buf[4]=4;
001E63 904D1C            MOV     DPTR,#data_buf+04H
001E66 7404              MOV     A,#04H
001E68 F0                MOVX    @DPTR,A
  120: 	}
001E69         ?C0014?CS_SCALEDISPLAY:
  121: 
  122: 	if(option==DisplayData||option==Displaykg||option==Displaylb||option==Displayjin||option==Displaygongjin)
001E69 904E5A            MOV     DPTR,#option
001E6C E0                MOVX    A,@DPTR
001E6D FF                MOV     R7,A
001E6E 6421              XRL     A,#021H
001E70 6014              JZ      ?C0021?CS_SCALEDISPLAY
001E72 EF                MOV     A,R7
001E73 6441              XRL     A,#041H
001E75 600F              JZ      ?C0021?CS_SCALEDISPLAY
001E77 EF                MOV     A,R7
001E78 6442              XRL     A,#042H
001E7A 600A              JZ      ?C0021?CS_SCALEDISPLAY
001E7C EF                MOV     A,R7
001E7D 6443              XRL     A,#043H
001E7F 6005              JZ      ?C0021?CS_SCALEDISPLAY
001E81 EF                MOV     A,R7
001E82 6444              XRL     A,#044H
001E84 705E              JNZ     ?C0020?CS_SCALEDISPLAY
001E86         ?C0021?CS_SCALEDISPLAY:
  123: 	{
  124: 	CS_ScaleDisplay_HexToBcd(showdata,data_buf);
001E86 AE04              MOV     R6,AR4
001E88 AF05              MOV     R7,AR5
001E8A 7B01              MOV     R3,#01H
001E8C 7A4D              MOV     R2,#HIGH data_buf
001E8E 7918              MOV     R1,#LOW data_buf
001E90 F1D6              ACALL   _CS_ScaleDisplay_HexToBcd
  125: 	
  126: 	if(option&showhigh4)		//显示高4位
001E92 904E5A            MOV     DPTR,#option
001E95 E0                MOVX    A,@DPTR
001E96 FF                MOV     R7,A
001E97 30E61D            JNB     ACC.6,?C0022?CS_SCALEDISPLAY
  127: 		{
  128: 		data_buf[4]=data_buf[3];
001E9A 904D1B            MOV     DPTR,#data_buf+03H
001E9D E0                MOVX    A,@DPTR
001E9E A3                INC     DPTR
001E9F F0                MOVX    @DPTR,A
  129: 		data_buf[3]=data_buf[2];
001EA0 904D1A            MOV     DPTR,#data_buf+02H
001EA3 E0                MOVX    A,@DPTR
001EA4 A3                INC     DPTR
001EA5 F0                MOVX    @DPTR,A
  130: 		data_buf[2]=data_buf[1];
001EA6 904D19            MOV     DPTR,#data_buf+01H
001EA9 E0                MOVX    A,@DPTR
001EAA A3                INC     DPTR
001EAB F0                MOVX    @DPTR,A
  131: 		data_buf[1]=data_buf[0];
001EAC 904D18            MOV     DPTR,#data_buf
001EAF E0                MOVX    A,@DPTR
001EB0 A3                INC     DPTR
001EB1 F0                MOVX    @DPTR,A
  132: 		data_buf[0]=0;
001EB2 E4                CLR     A
001EB3 904D18            MOV     DPTR,#data_buf
001EB6 F0                MOVX    @DPTR,A
  133: 		}
001EB7         ?C0022?CS_SCALEDISPLAY:
  134: 
  135: 		if(data_buf[0]==0 && data_buf[1]==0 )	
001EB7 904D18            MOV     DPTR,#data_buf
001EBA E0                MOVX    A,@DPTR
001EBB 7007              JNZ     ?C0023?CS_SCALEDISPLAY
001EBD A3                INC     DPTR
001EBE E0                MOVX    A,@DPTR
001EBF 7003              JNZ     ?C0023?CS_SCALEDISPLAY
  136: 			data_buf[1]=Lcdnull_Num;
001EC1 7415              MOV     A,#015H
001EC3 F0                MOVX    @DPTR,A
001EC4         ?C0023?CS_SCALEDISPLAY:
  137: 		if(data_buf[1]==Lcdnull_Num && data_buf[2]==0 )	
001EC4 904D19            MOV     DPTR,#data_buf+01H
001EC7 E0                MOVX    A,@DPTR
001EC8 B41507            CJNE    A,#015H,?C0024?CS_SCALEDISPLAY
001ECB A3                INC     DPTR
001ECC E0                MOVX    A,@DPTR
001ECD 7003              JNZ     ?C0024?CS_SCALEDISPLAY
  138: 			data_buf[2]=Lcdnull_Num;
001ECF 7415              MOV     A,#015H
001ED1 F0                MOVX    @DPTR,A
001ED2         ?C0024?CS_SCALEDISPLAY:
  139: 
  140: 		if(option&ShowNoDot)	//没有小数点还要判断多一位数字为0时是否不显示
001ED2 EF                MOV     A,R7
001ED3 30E50E            JNB     ACC.5,?C0020?CS_SCALEDISPLAY
  141: 			{
  142: 			if(data_buf[2]==Lcdnull_Num && data_buf[3]==0 )	
001ED6 904D1A            MOV     DPTR,#data_buf+02H
001ED9 E0                MOVX    A,@DPTR
001EDA B41507            CJNE    A,#015H,?C0020?CS_SCALEDISPLAY
001EDD A3                INC     DPTR
001EDE E0                MOVX    A,@DPTR
001EDF 7003              JNZ     ?C0020?CS_SCALEDISPLAY
  143: 				data_buf[3]=Lcdnull_Num;
001EE1 7415              MOV     A,#015H
001EE3 F0                MOVX    @DPTR,A
  144: 			}
  145: 	}
001EE4         ?C0020?CS_SCALEDISPLAY:
  146: 	
  147: 	CS_lcd_showbuf[0] = CS_ScaleDisplay_LookUpTable(data_buf[1]);
001EE4 904D19            MOV     DPTR,#data_buf+01H
001EE7 E0                MOVX    A,@DPTR
001EE8 FF                MOV     R7,A
001EE9 B1BE              ACALL   _CS_ScaleDisplay_LookUpTable
001EEB 904D23            MOV     DPTR,#CS_lcd_showbuf
001EEE EF                MOV     A,R7
001EEF F0                MOVX    @DPTR,A
  148: 	CS_lcd_showbuf[1] = CS_ScaleDisplay_LookUpTable(data_buf[2]);
001EF0 904D1A            MOV     DPTR,#data_buf+02H
001EF3 E0                MOVX    A,@DPTR
001EF4 FF                MOV     R7,A
001EF5 B1BE              ACALL   _CS_ScaleDisplay_LookUpTable
001EF7 904D24            MOV     DPTR,#CS_lcd_showbuf+01H
001EFA EF                MOV     A,R7
001EFB F0                MOVX    @DPTR,A
  149: 	CS_lcd_showbuf[2] = CS_ScaleDisplay_LookUpTable(data_buf[3]);
001EFC 904D1B            MOV     DPTR,#data_buf+03H
001EFF E0                MOVX    A,@DPTR
001F00 FF                MOV     R7,A
001F01 B1BE              ACALL   _CS_ScaleDisplay_LookUpTable
001F03 904D25            MOV     DPTR,#CS_lcd_showbuf+02H
001F06 EF                MOV     A,R7
001F07 F0                MOVX    @DPTR,A
  150: 	CS_lcd_showbuf[3] = CS_ScaleDisplay_LookUpTable(data_buf[4]);
001F08 904D1C            MOV     DPTR,#data_buf+04H
001F0B E0                MOVX    A,@DPTR
001F0C FF                MOV     R7,A
001F0D B1BE              ACALL   _CS_ScaleDisplay_LookUpTable
001F0F 904D26            MOV     DPTR,#CS_lcd_showbuf+03H
001F12 EF                MOV     A,R7
001F13 F0                MOVX    @DPTR,A
  151: 			
  152: 	CS_ScaleDisplay_LcdBuf_rShift4();	//显示缓存跟实际液晶的逻辑对应有出入还要微调
001F14 123DD9            LCALL   CS_ScaleDisplay_LcdBuf_rShift4
  153: 
  154: 										//显示缓存数字还有符号部分的位置
  155: 
  156: 	//////////////////////////////////////////
  157: 	//符号部分赋值
  158: 	CS_Lcd_Send_Data[4] &=0x0f;			//清单位符号缓存	
001F17 904D2C            MOV     DPTR,#CS_Lcd_Send_Data+04H
001F1A E0                MOVX    A,@DPTR
001F1B 540F              ANL     A,#0FH
001F1D F0                MOVX    @DPTR,A
  159: 	CS_Lcd_Buf_DOT2	 &= ~S_DOT;			//清显示小数点
001F1E 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
001F21 E0                MOVX    A,@DPTR
001F22 54F7              ANL     A,#0F7H
001F24 F0                MOVX    @DPTR,A
  160: 
  161: 	
  162: 	if(option==DisplayData)				//最高位用蓝牙标志辅助显示
001F25 904E5A            MOV     DPTR,#option
001F28 E0                MOVX    A,@DPTR
001F29 FD                MOV     R5,A
001F2A B42114            CJNE    A,#021H,?C0027?CS_SCALEDISPLAY
  163: 		{	
  164: 		CS_Lcd_Buf_SIGN &=~S_BLE;
001F2D 904D28            MOV     DPTR,#CS_Lcd_Send_Data
001F30 E0                MOVX    A,@DPTR
001F31 54FD              ANL     A,#0FDH
001F33 F0                MOVX    @DPTR,A
  165: 		if(data_buf[0]!=0)
001F34 904D18            MOV     DPTR,#data_buf
001F37 E0                MOVX    A,@DPTR
001F38 6007              JZ      ?C0027?CS_SCALEDISPLAY
  166: 		CS_Lcd_Buf_SIGN |=S_BLE;
001F3A 904D28            MOV     DPTR,#CS_Lcd_Send_Data
001F3D E0                MOVX    A,@DPTR
001F3E 4402              ORL     A,#02H
001F40 F0                MOVX    @DPTR,A
  167: 		}	
001F41         ?C0027?CS_SCALEDISPLAY:
  168: 	
  169: 	if(option==Displaykg)
001F41 ED                MOV     A,R5
001F42 B4410C            CJNE    A,#041H,?C0029?CS_SCALEDISPLAY
  170: 		{
  171: 		CS_Lcd_Buf_DOT2	|= S_DOT;
001F45 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
001F48 E0                MOVX    A,@DPTR
001F49 4408              ORL     A,#08H
001F4B F0                MOVX    @DPTR,A
  172: 		CS_Lcd_Buf_Unit	|= S_KG;							
001F4C A3                INC     DPTR
001F4D E0                MOVX    A,@DPTR
001F4E 4410              ORL     A,#010H
001F50 F0                MOVX    @DPTR,A
  173: 		}	
001F51         ?C0029?CS_SCALEDISPLAY:
  174: 
  175: 	if(option==Displaylb)
001F51 904E5A            MOV     DPTR,#option
001F54 E0                MOVX    A,@DPTR
001F55 B4420C            CJNE    A,#042H,?C0030?CS_SCALEDISPLAY
  176: 		{
  177: 		CS_Lcd_Buf_DOT2	|= S_DOT;
001F58 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
001F5B E0                MOVX    A,@DPTR
001F5C 4408              ORL     A,#08H
001F5E F0                MOVX    @DPTR,A
  178: 		CS_Lcd_Buf_Unit	|= S_LB;							
001F5F A3                INC     DPTR
001F60 E0                MOVX    A,@DPTR
001F61 4420              ORL     A,#020H
001F63 F0                MOVX    @DPTR,A
  179: 		}
001F64         ?C0030?CS_SCALEDISPLAY:
  180: 	if(option==Displayjin)
001F64 904E5A            MOV     DPTR,#option
001F67 E0                MOVX    A,@DPTR
001F68 FD                MOV     R5,A
001F69 B4430C            CJNE    A,#043H,?C0031?CS_SCALEDISPLAY
  181: 		{
  182: 		CS_Lcd_Buf_DOT2	|= S_DOT;
001F6C 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
001F6F E0                MOVX    A,@DPTR
001F70 4408              ORL     A,#08H
001F72 F0                MOVX    @DPTR,A
  183: 		CS_Lcd_Buf_Unit	|= S_JIN;							
001F73 A3                INC     DPTR
001F74 E0                MOVX    A,@DPTR
001F75 4480              ORL     A,#080H
001F77 F0                MOVX    @DPTR,A
  184: 		}
001F78         ?C0031?CS_SCALEDISPLAY:
  185: 	
  186: 	if(option==Displaygongjin)
001F78 ED                MOV     A,R5
001F79 B4440C            CJNE    A,#044H,?C0032?CS_SCALEDISPLAY
  187: 		{
  188: 		CS_Lcd_Buf_DOT2	|= S_DOT;
001F7C 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
001F7F E0                MOVX    A,@DPTR
001F80 4408              ORL     A,#08H
001F82 F0                MOVX    @DPTR,A
  189: 		CS_Lcd_Buf_Unit	|= S_GONG | S_JIN;							
001F83 A3                INC     DPTR
001F84 E0                MOVX    A,@DPTR
001F85 44C0              ORL     A,#0C0H
001F87 F0                MOVX    @DPTR,A
  190: 		}
001F88         ?C0032?CS_SCALEDISPLAY:
  191: 
  192: 	/*
  193: 	if( xxxStatus==xxxx)
  194: 		CS_Lcd_Buf_SIGN |=S_DAT;
  195: 	else
  196: 		CS_Lcd_Buf_SIGN &=~S_DAT;
  197: 	*/
  198: 	
  199: 	if(bleConnStatus==BLE_STATUS_CONN)
001F88 904C5B            MOV     DPTR,#bleConnStatus
001F8B E0                MOVX    A,@DPTR
001F8C B40108            CJNE    A,#01H,?C0033?CS_SCALEDISPLAY
  200: 		CS_Lcd_Buf_SIGN |=S_BLE;
001F8F 904D28            MOV     DPTR,#CS_Lcd_Send_Data
001F92 E0                MOVX    A,@DPTR
001F93 4402              ORL     A,#02H
001F95 F0                MOVX    @DPTR,A
001F96 22                RET     
001F97         ?C0033?CS_SCALEDISPLAY:
  201: 	else
  202: 		CS_Lcd_Buf_SIGN &=~S_BLE;
001F97 904D28            MOV     DPTR,#CS_Lcd_Send_Data
001F9A E0                MOVX    A,@DPTR
001F9B 54FD              ANL     A,#0FDH
001F9D F0                MOVX    @DPTR,A
  203: 	
  204: }
001F9E 22                RET     
----- FUNCTION _CS_ScaleDisplay_FreshBuf (END) -------


----- FUNCTION _xmemcpy (BEGIN) -----
 FILE: 'YC_Utilities.c'
   16: void xmemcpy(pxbyte dest, u8_t* src, u8_t len) small
   17: {
001F9F 8E17              MOV     dest,R6
001FA1 8F18              MOV     dest+01H,R7
001FA3 8B19              MOV     src,R3
001FA5 8A1A              MOV     src+01H,R2
001FA7 891B              MOV     src+02H,R1
001FA9         ?C0005?YC_UTILITIES:
   18: 	while(len--)
001FA9 AF1C              MOV     R7,len
001FAB 151C              DEC     len
001FAD EF                MOV     A,R7
001FAE 6025              JZ      ?C0007?YC_UTILITIES
   19: 		*dest++ = *src++;
001FB0 AB19              MOV     R3,src
001FB2 051B              INC     src+02H
001FB4 E51B              MOV     A,src+02H
001FB6 AA1A              MOV     R2,src+01H
001FB8 7002              JNZ     ?C0045?YC_UTILITIES
001FBA 051A              INC     src+01H
001FBC         ?C0045?YC_UTILITIES:
001FBC 14                DEC     A
001FBD F9                MOV     R1,A
001FBE 1200F9            LCALL   ?C?CLDPTR
001FC1 FF                MOV     R7,A
001FC2 0518              INC     dest+01H
001FC4 E518              MOV     A,dest+01H
001FC6 AC17              MOV     R4,dest
001FC8 7002              JNZ     ?C0046?YC_UTILITIES
001FCA 0517              INC     dest
001FCC         ?C0046?YC_UTILITIES:
001FCC 14                DEC     A
001FCD F582              MOV     DPL,A
001FCF 8C83              MOV     DPH,R4
001FD1 EF                MOV     A,R7
001FD2 F0                MOVX    @DPTR,A
001FD3 80D4              SJMP    ?C0005?YC_UTILITIES
   20: 	return;
   21: }
001FD5         ?C0007?YC_UTILITIES:
001FD5 22                RET     
----- FUNCTION _xmemcpy (END) -------


----- FUNCTION _CS_ScaleDisplay_HexToBcd (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  267: void CS_ScaleDisplay_HexToBcd(u16_t HexData,u8_t* buf)
  268: {
001FD6 904E18            MOV     DPTR,#HexData
001FD9 EE                MOV     A,R6
001FDA F0                MOVX    @DPTR,A
001FDB A3                INC     DPTR
001FDC EF                MOV     A,R7
001FDD F0                MOVX    @DPTR,A
001FDE A3                INC     DPTR
001FDF EB                MOV     A,R3
001FE0 F0                MOVX    @DPTR,A
001FE1 A3                INC     DPTR
001FE2 EA                MOV     A,R2
001FE3 F0                MOVX    @DPTR,A
001FE4 A3                INC     DPTR
001FE5 E9                MOV     A,R1
001FE6 F0                MOVX    @DPTR,A
  269: 	u8_t  i;
  270: 	for(i=0;i<5;i++)
001FE7 E4                CLR     A
001FE8 A3                INC     DPTR
001FE9 F0                MOVX    @DPTR,A
001FEA         ?C0037?CS_SCALEDISPLAY:
001FEA 904E1D            MOV     DPTR,#i
001FED E0                MOVX    A,@DPTR
001FEE FB                MOV     R3,A
001FEF C3                CLR     C
001FF0 9405              SUBB    A,#05H
001FF2 504C              JNC     ?C0040?CS_SCALEDISPLAY
  271: 		{
  272: 		buf[4-i] =  HexData%10;
001FF4 904E18            MOV     DPTR,#HexData
001FF7 E0                MOVX    A,@DPTR
001FF8 FE                MOV     R6,A
001FF9 A3                INC     DPTR
001FFA E0                MOVX    A,@DPTR
001FFB FF                MOV     R7,A
001FFC 7C00              MOV     R4,#00H
001FFE 7D0A              MOV     R5,#0AH
002000 120173            LCALL   ?C?UIDIV
002003 AF05              MOV     R7,AR5
002005 EB                MOV     A,R3
002006 FD                MOV     R5,A
002007 C3                CLR     C
002008 7404              MOV     A,#04H
00200A 9D                SUBB    A,R5
00200B FD                MOV     R5,A
00200C E4                CLR     A
00200D 9400              SUBB    A,#00H
00200F FC                MOV     R4,A
002010 A3                INC     DPTR
002011 E0                MOVX    A,@DPTR
002012 FB                MOV     R3,A
002013 A3                INC     DPTR
002014 E0                MOVX    A,@DPTR
002015 FA                MOV     R2,A
002016 A3                INC     DPTR
002017 E0                MOVX    A,@DPTR
002018 F9                MOV     R1,A
002019 8D82              MOV     DPL,R5
00201B 8C83              MOV     DPH,R4
00201D EF                MOV     A,R7
00201E 120151            LCALL   ?C?CSTOPTR
  273: 		HexData = HexData /10;
002021 904E18            MOV     DPTR,#HexData
002024 E0                MOVX    A,@DPTR
002025 FE                MOV     R6,A
002026 A3                INC     DPTR
002027 E0                MOVX    A,@DPTR
002028 FF                MOV     R7,A
002029 7C00              MOV     R4,#00H
00202B 7D0A              MOV     R5,#0AH
00202D 120173            LCALL   ?C?UIDIV
002030 904E18            MOV     DPTR,#HexData
002033 EE                MOV     A,R6
002034 F0                MOVX    @DPTR,A
002035 A3                INC     DPTR
002036 EF                MOV     A,R7
002037 F0                MOVX    @DPTR,A
  274: 		}	
002038 904E1D            MOV     DPTR,#i
00203B E0                MOVX    A,@DPTR
00203C 04                INC     A
00203D F0                MOVX    @DPTR,A
00203E 80AA              SJMP    ?C0037?CS_SCALEDISPLAY
  275: }
002040         ?C0040?CS_SCALEDISPLAY:
002040 22                RET     
----- FUNCTION _CS_ScaleDisplay_HexToBcd (END) -------


----- FUNCTION BTControlProcess (BEGIN) -----
 FILE: 'system.c'
  124: void BTControlProcess(void)
  125: {
  126: 	BT_EVENTFIFO_t event;
  127: 	//normal process
  128: 	BT_EventFifoOut(&event);
002041 7B01              MOV     R3,#01H
002043 7A4D              MOV     R2,#HIGH event
002045 7969              MOV     R1,#LOW event
002047 123049            LCALL   _BT_EventFifoOut
  129: 	if(event.len != 0)
00204A 904D69            MOV     DPTR,#event
00204D E0                MOVX    A,@DPTR
00204E 6075              JZ      ?C0028?SYSTEM
  130: 	{
  131: 		//YC_UARTSendData(event.DATA, event.len);
  132: 		switch(event.DATA[0]) {
002050 A3                INC     DPTR
002051 E0                MOVX    A,@DPTR
002052 24EE              ADD     A,#0EEH
002054 601C              JZ      ?C0019?SYSTEM
002056 14                DEC     A
002057 6024              JZ      ?C0020?SYSTEM
002059 14                DEC     A
00205A 6029              JZ      ?C0021?SYSTEM
00205C 24FC              ADD     A,#0FCH
00205E 605F              JZ      ?C0027?SYSTEM
002060 2407              ADD     A,#07H
002062 7061              JNZ     ?C0028?SYSTEM
  133: 			case CS_NOTIFY_POWERON:
  134: 				break;
  135: 			case CS_NOTIFY_DISC:		//bluetooth disconnect
002064         ?C0018?SYSTEM:
  136: 				notifyValueUUIDA621 = NOTIFY_INDICATE_DISABLE;
002064 E4                CLR     A
002065 904C59            MOV     DPTR,#notifyValueUUIDA621
002068 F0                MOVX    @DPTR,A
  137: 				notifyValueUUIDA625 = NOTIFY_INDICATE_DISABLE;
002069 904C5A            MOV     DPTR,#notifyValueUUIDA625
00206C F0                MOVX    @DPTR,A
  138: 				bleConnStatus= BLE_STATUS_DISCONN;
00206D 904C5B            MOV     DPTR,#bleConnStatus
002070 F0                MOVX    @DPTR,A
  139: 				break;
002071 22                RET     
  140: 			case CS_NOTIFY_CONN:	//bluetooth connected
002072         ?C0019?SYSTEM:
  141: 				lxOptStatus = OPT_IDLE;
002072 E4                CLR     A
002073 904C5C            MOV     DPTR,#lxOptStatus
002076 F0                MOVX    @DPTR,A
  142: 				bleConnStatus= BLE_STATUS_CONN;
002077 904C5B            MOV     DPTR,#bleConnStatus
00207A 04                INC     A
00207B F0                MOVX    @DPTR,A
  143: 				break;
00207C 22                RET     
  144: 			case CS_NOTIFY_DATA:	//receive data
00207D         ?C0020?SYSTEM:
  145: 				lxRecvDataFromApp(&event);
00207D 7B01              MOV     R3,#01H
00207F 7A4D              MOV     R2,#HIGH event
002081 7969              MOV     R1,#LOW event
002083 8041              SJMP    _lxRecvDataFromApp
  146: 				break; 
  147: 			case CS_NOTIFY_OPENHANDLE:
002085         ?C0021?SYSTEM:
  148: 				if(event.DATA[1] == HANDLE_UUIDA621_NOTIFY)
002085 904D6B            MOV     DPTR,#event+02H
002088 E0                MOVX    A,@DPTR
002089 FF                MOV     R7,A
00208A B41C0A            CJNE    A,#01CH,?C0022?SYSTEM
  149: 				{
  150: 					notifyValueUUIDA621 = event.DATA[3];
00208D 904D6D            MOV     DPTR,#event+04H
002090 E0                MOVX    A,@DPTR
002091 904C59            MOV     DPTR,#notifyValueUUIDA621
002094 F0                MOVX    @DPTR,A
  151: 				}
002095 800C              SJMP    ?C0023?SYSTEM
002097         ?C0022?SYSTEM:
  152: 				else if(event.DATA[1] == HANDLE_UUIDA625_NOTIFY)
002097 EF                MOV     A,R7
002098 B42508            CJNE    A,#025H,?C0023?SYSTEM
  153: 				{
  154: 					notifyValueUUIDA625 = event.DATA[3];
00209B 904D6D            MOV     DPTR,#event+04H
00209E E0                MOVX    A,@DPTR
00209F 904C5A            MOV     DPTR,#notifyValueUUIDA625
0020A2 F0                MOVX    @DPTR,A
  155: 				}
0020A3         ?C0023?SYSTEM:
  156: 
  157: 				if(*mem_register_buf == DEVICE_REGISTERED &&
0020A3 904C0E            MOV     DPTR,#04C0EH
0020A6 E0                MOVX    A,@DPTR
0020A7 B4011B            CJNE    A,#01H,?C0028?SYSTEM
0020AA 904C59            MOV     DPTR,#notifyValueUUIDA621
0020AD E0                MOVX    A,@DPTR
0020AE B40114            CJNE    A,#01H,?C0028?SYSTEM
0020B1 904C5A            MOV     DPTR,#notifyValueUUIDA625
0020B4 E0                MOVX    A,@DPTR
0020B5 B4010D            CJNE    A,#01H,?C0028?SYSTEM
  158: 					notifyValueUUIDA621 == NOTIFY_ENABLE &&
  159: 					notifyValueUUIDA625 == NOTIFY_ENABLE)
  160: 				{
  161: 					lxOptStatus = OPT_LOGIN_REQ;
0020B8 904C5C            MOV     DPTR,#lxOptStatus
0020BB 7416              MOV     A,#016H
0020BD F0                MOVX    @DPTR,A
  162: 				}
  163: 				break;
0020BE 22                RET     
  164: 			case CS_NOTIFY_READ_REQ:
  165: 				break;
  166: 			case CS_NOTIFY_INDICATE_CONFIRM:
0020BF         ?C0027?SYSTEM:
  167: 				handleIndicationConfirm = 1;
0020BF 904C5D            MOV     DPTR,#handleIndicationConfirm
0020C2 7401              MOV     A,#01H
0020C4 F0                MOVX    @DPTR,A
  168: 				break;
  169: 		}
  170: 	}
  171: }
0020C5         ?C0028?SYSTEM:
0020C5 22                RET     
----- FUNCTION BTControlProcess (END) -------


----- FUNCTION _lxRecvDataFromApp (BEGIN) -----
 FILE: 'lxProtocol.c'
   50: void lxRecvDataFromApp(BT_EVENTFIFO_t *event)
   51: {
0020C6 904E1E            MOV     DPTR,#event
0020C9 EB                MOV     A,R3
0020CA F0                MOVX    @DPTR,A
0020CB A3                INC     DPTR
0020CC EA                MOV     A,R2
0020CD F0                MOVX    @DPTR,A
0020CE A3                INC     DPTR
0020CF E9                MOV     A,R1
0020D0 F0                MOVX    @DPTR,A
   52: 	//data[0]:total length, data[1~2]:handle
   53: 	//data[3]:frame control,data[4]:length,data[5~N]:content
   54: 	u8_t frameControl = event->DATA[3];
0020D1 904E1E            MOV     DPTR,#event
0020D4 E0                MOVX    A,@DPTR
0020D5 FB                MOV     R3,A
0020D6 A3                INC     DPTR
0020D7 E0                MOVX    A,@DPTR
0020D8 FA                MOV     R2,A
0020D9 A3                INC     DPTR
0020DA E0                MOVX    A,@DPTR
0020DB F9                MOV     R1,A
0020DC 900004            MOV     DPTR,#04H
0020DF 120112            LCALL   ?C?CLDOPTR
0020E2 904E21            MOV     DPTR,#frameControl
0020E5 F0                MOVX    @DPTR,A
   55: 	u16_t cmd;
   56: 	
   57: 	bigLittleEndianSwap(&(event->DATA[5]), event->DATA[4]);
0020E6 E9                MOV     A,R1
0020E7 2406              ADD     A,#06H
0020E9 F9                MOV     R1,A
0020EA E4                CLR     A
0020EB 3A                ADDC    A,R2
0020EC FA                MOV     R2,A
0020ED C002              PUSH    AR2
0020EF C001              PUSH    AR1
0020F1 904E1E            MOV     DPTR,#event
0020F4 E0                MOVX    A,@DPTR
0020F5 A3                INC     DPTR
0020F6 E0                MOVX    A,@DPTR
0020F7 FA                MOV     R2,A
0020F8 A3                INC     DPTR
0020F9 E0                MOVX    A,@DPTR
0020FA F9                MOV     R1,A
0020FB 900005            MOV     DPTR,#05H
0020FE 120112            LCALL   ?C?CLDOPTR
002101 FD                MOV     R5,A
002102 7C00              MOV     R4,#00H
002104 D001              POP     AR1
002106 D002              POP     AR2
002108 5111              ACALL   _bigLittleEndianSwap
   58: 	cmd = event->DATA[5] | (event->DATA[6] << 8);
00210A 904E1E            MOV     DPTR,#event
00210D E0                MOVX    A,@DPTR
00210E FB                MOV     R3,A
00210F A3                INC     DPTR
002110 E0                MOVX    A,@DPTR
002111 FA                MOV     R2,A
002112 A3                INC     DPTR
002113 E0                MOVX    A,@DPTR
002114 F9                MOV     R1,A
002115 900007            MOV     DPTR,#07H
002118 120112            LCALL   ?C?CLDOPTR
00211B FE                MOV     R6,A
00211C 900006            MOV     DPTR,#06H
00211F 120112            LCALL   ?C?CLDOPTR
002122 FD                MOV     R5,A
002123 EE                MOV     A,R6
002124 ED                MOV     A,R5
002125 FF                MOV     R7,A
002126 904E22            MOV     DPTR,#cmd
002129 EE                MOV     A,R6
00212A F0                MOVX    @DPTR,A
00212B A3                INC     DPTR
00212C EF                MOV     A,R7
00212D F0                MOVX    @DPTR,A
   59: 	
   60: 	//numTotalFrames == 1
   61: 	if(frameControl == FRAME_CONTROL_SINGLE)
00212E 904E21            MOV     DPTR,#frameControl
002131 E0                MOVX    A,@DPTR
002132 6410              XRL     A,#010H
002134 6002              JZ      $ + 4H
002136 21C1              AJMP    ?C0007?LXPROTOCOL
   62: 	{
   63: 		//send ack
   64: 		lxSendRecvDataACK(HANDLE_UUIDA625_NOTIFY, RECV_ACK_SUCCESS);
002138 7D01              MOV     R5,#01H
00213A 7F25              MOV     R7,#025H
00213C FE                MOV     R6,A
00213D F178              ACALL   _lxSendRecvDataACK
   65: 
   66: 		//copy data
   67: 		xmemcpy(LX_RECV_BUF, &(event->DATA[5]), event->DATA[4]);
00213F 904E1E            MOV     DPTR,#event
002142 E0                MOVX    A,@DPTR
002143 FB                MOV     R3,A
002144 A3                INC     DPTR
002145 E0                MOVX    A,@DPTR
002146 FA                MOV     R2,A
002147 A3                INC     DPTR
002148 E0                MOVX    A,@DPTR
002149 2406              ADD     A,#06H
00214B F9                MOV     R1,A
00214C E4                CLR     A
00214D 3A                ADDC    A,R2
00214E FA                MOV     R2,A
00214F C002              PUSH    AR2
002151 C001              PUSH    AR1
002153 904E1E            MOV     DPTR,#event
002156 E0                MOVX    A,@DPTR
002157 A3                INC     DPTR
002158 E0                MOVX    A,@DPTR
002159 FA                MOV     R2,A
00215A A3                INC     DPTR
00215B E0                MOVX    A,@DPTR
00215C F9                MOV     R1,A
00215D 900005            MOV     DPTR,#05H
002160 120112            LCALL   ?C?CLDOPTR
002163 F51C              MOV     ?_xmemcpy?BYTE+05H,A
002165 D001              POP     AR1
002167 D002              POP     AR2
002169 7FA0              MOV     R7,#0A0H
00216B 7E48              MOV     R6,#048H
00216D 121F9F            LCALL   _xmemcpy
   68: 		
   69: 		switch(cmd)
002170 904E22            MOV     DPTR,#cmd
002173 E0                MOVX    A,@DPTR
002174 FE                MOV     R6,A
002175 A3                INC     DPTR
002176 E0                MOVX    A,@DPTR
002177 8EF0              MOV     B,R6
002179 120395            LCALL   ?C?ICASE
00217C 21A0              DW      ?C0009?LXPROTOCOL
00217E 0001              DW      01H
002180 21A4              DW      ?C0010?LXPROTOCOL
002182 0003              DW      03H
002184 21A8              DW      ?C0011?LXPROTOCOL
002186 0008              DW      08H
002188 21AC              DW      ?C0012?LXPROTOCOL
00218A 000A              DW      0AH
00218C 21B0              DW      ?C0013?LXPROTOCOL
00218E 1002              DW      01002H
002190 21B4              DW      ?C0014?LXPROTOCOL
002192 1004              DW      01004H
002194 21B8              DW      ?C0015?LXPROTOCOL
002196 1005              DW      01005H
002198 21BC              DW      ?C0016?LXPROTOCOL
00219A 4801              DW      04801H
00219C 0000              DW      00H
00219E 2207              DW      ?C0023?LXPROTOCOL
   70: 		{
   71: 			case CMD_REGISTRATION_REQ:
0021A0         ?C0009?LXPROTOCOL:
   72: 				changeLxOptStatus(OPT_REGISTER_REQ);
0021A0 7F10              MOV     R7,#010H
0021A2 8064              SJMP    _changeLxOptStatus
   73: 				break;
   74: 			case CMD_BIND_REQ:
0021A4         ?C0010?LXPROTOCOL:
   75: 				changeLxOptStatus(OPT_BIND_REQ);
0021A4 7F13              MOV     R7,#013H
0021A6 8060              SJMP    _changeLxOptStatus
   76: 				break;
   77: 			case CMD_LOGIN_RSP:
0021A8         ?C0011?LXPROTOCOL:
   78: 				changeLxOptStatus(OPT_LOGIN_RSP);
0021A8 7F18              MOV     R7,#018H
0021AA 805C              SJMP    _changeLxOptStatus
   79: 				break;
   80: 			case CMD_INIT_RSP:
0021AC         ?C0012?LXPROTOCOL:
   81: 				changeLxOptStatus(OPT_INIT_RSP);
0021AC 7F22              MOV     R7,#022H
0021AE 8058              SJMP    _changeLxOptStatus
   82: 				break;
   83: 				
   84: 			case CMD_TIME_SETTING_REQ:
0021B0         ?C0013?LXPROTOCOL:
   85: 				changeLxOptStatus(OPT_TIME_SETTING_REQ);
0021B0 7F25              MOV     R7,#025H
0021B2 8054              SJMP    _changeLxOptStatus
   86: 				break;
   87: 			case CMD_UNIT_SETTING_REQ:
0021B4         ?C0014?LXPROTOCOL:
   88: 				changeLxOptStatus(OPT_UNIT_SETTING_REQ);
0021B4 7F28              MOV     R7,#028H
0021B6 8050              SJMP    _changeLxOptStatus
   89: 				break;
   90: 			case CMD_DATA_CLEAR_SETTING_REQ:
0021B8         ?C0015?LXPROTOCOL:
   91: 				changeLxOptStatus(OPT_DATA_DEL_SETTING_REQ);
0021B8 7F31              MOV     R7,#031H
0021BA 804C              SJMP    _changeLxOptStatus
   92: 				break;
   93: 				
   94: 			case CMD_SYNC_DATA_REQ:
0021BC         ?C0016?LXPROTOCOL:
   95: 				changeLxOptStatus(OPT_SYNC_DATA_REQ);
0021BC 7F35              MOV     R7,#035H
0021BE 8048              SJMP    _changeLxOptStatus
   96: 				break;
   97: 		}
   98: 		
   99: 	}
0021C0 22                RET     
0021C1         ?C0007?LXPROTOCOL:
  100: 	//ACK:numTotalFrames == 0
  101: 	else if(frameControl == FRAME_CONTROL_ACK)
0021C1 904E21            MOV     DPTR,#frameControl
0021C4 E0                MOVX    A,@DPTR
0021C5 7040              JNZ     ?C0023?LXPROTOCOL
  102: 	{
  103: 		if(event->DATA[5] == RECV_ACK_SUCCESS)
0021C7 904E1E            MOV     DPTR,#event
0021CA E0                MOVX    A,@DPTR
0021CB FB                MOV     R3,A
0021CC A3                INC     DPTR
0021CD E0                MOVX    A,@DPTR
0021CE FA                MOV     R2,A
0021CF A3                INC     DPTR
0021D0 E0                MOVX    A,@DPTR
0021D1 F9                MOV     R1,A
0021D2 900006            MOV     DPTR,#06H
0021D5 120112            LCALL   ?C?CLDOPTR
0021D8 B40111            CJNE    A,#01H,?C0019?LXPROTOCOL
  104: 		{
  105: 			if(lxOptStatus == OPT_REGISTER_RSP_WAIT_ACK)
0021DB 904C5C            MOV     DPTR,#lxOptStatus
0021DE E0                MOVX    A,@DPTR
0021DF B41104            CJNE    A,#011H,?C0020?LXPROTOCOL
  106: 			{
  107: 				SpiFlashOperator(CS_CMD_WRITE_FLASH);
0021E2 7F41              MOV     R7,#041H
0021E4 F1E6              ACALL   _SpiFlashOperator
  108: 			}
0021E6         ?C0020?LXPROTOCOL:
  109: 			
  110: 			lxOptStatus = OPT_IDLE;
0021E6 E4                CLR     A
0021E7 904C5C            MOV     DPTR,#lxOptStatus
0021EA F0                MOVX    @DPTR,A
  111: 		}
0021EB 22                RET     
0021EC         ?C0019?LXPROTOCOL:
  112: 		else
  113: 		{
  114: 			if(lxOptStatus == OPT_REGISTER_RSP_WAIT_ACK)
0021EC 904C5C            MOV     DPTR,#lxOptStatus
0021EF E0                MOVX    A,@DPTR
0021F0 B4110F            CJNE    A,#011H,?C0022?LXPROTOCOL
  115: 			{
  116: 				xmemset(mem_register_buf , 0, 10);
0021F3 7B0A              MOV     R3,#0AH
0021F5 E4                CLR     A
0021F6 FD                MOV     R5,A
0021F7 7F0E              MOV     R7,#0EH
0021F9 7E4C              MOV     R6,#04CH
0021FB F1AA              ACALL   _xmemset
  117: 				//update adv flag
  118: 				*(mem_le_adv_data + 13) = 0;
0021FD 9043E7            MOV     DPTR,#043E7H
002200 E4                CLR     A
002201 F0                MOVX    @DPTR,A
  119: 			}
002202         ?C0022?LXPROTOCOL:
  120: 			lxOptStatus = OPT_IDLE;
002202 E4                CLR     A
002203 904C5C            MOV     DPTR,#lxOptStatus
002206 F0                MOVX    @DPTR,A
  121: 		}
  122: 	}
  123: }
002207         ?C0023?LXPROTOCOL:
002207 22                RET     
----- FUNCTION _lxRecvDataFromApp (END) -------


----- FUNCTION _changeLxOptStatus (BEGIN) -----
 FILE: 'lxProtocol.c'
  125: void changeLxOptStatus(u8_t opt)
  126: {
;---- Variable 'opt' assigned to Register 'R7' ----
  127: 	if(lxOptStatus == OPT_IDLE)
  128: 	{
002208 904C5C            MOV     DPTR,#lxOptStatus
00220B E0                MOVX    A,@DPTR
00220C 7002              JNZ     ?C0025?LXPROTOCOL
  129: 		lxOptStatus = opt;
  130: 	}
00220E EF                MOV     A,R7
00220F F0                MOVX    @DPTR,A
  131: }
  132: 
002210         ?C0025?LXPROTOCOL:
002210 22                RET     
----- FUNCTION _changeLxOptStatus (END) -------


----- FUNCTION _bigLittleEndianSwap (BEGIN) -----
 FILE: 'lxProtocol.c'
   17: static void bigLittleEndianSwap(u8_t *buf, u16_t len)
   18: {
002211 904DB8            MOV     DPTR,#buf
002214 EB                MOV     A,R3
002215 F0                MOVX    @DPTR,A
002216 A3                INC     DPTR
002217 EA                MOV     A,R2
002218 F0                MOVX    @DPTR,A
002219 A3                INC     DPTR
00221A E9                MOV     A,R1
00221B F0                MOVX    @DPTR,A
00221C A3                INC     DPTR
00221D EC                MOV     A,R4
00221E F0                MOVX    @DPTR,A
00221F A3                INC     DPTR
002220 ED                MOV     A,R5
002221 F0                MOVX    @DPTR,A
   19: 	u16_t i, size;
   20: 	u8_t temp;
   21: 	
   22: 	size = len -1;
002222 24FF              ADD     A,#0FFH
002224 FE                MOV     R6,A
002225 EC                MOV     A,R4
002226 34FF              ADDC    A,#0FFH
002228 904DBF            MOV     DPTR,#size
00222B F0                MOVX    @DPTR,A
00222C A3                INC     DPTR
00222D CE                XCH     A,R6
00222E F0                MOVX    @DPTR,A
   23: 	for(i=0; i<len/2; i++)
00222F E4                CLR     A
002230 904DBD            MOV     DPTR,#i
002233 F0                MOVX    @DPTR,A
002234 A3                INC     DPTR
002235 F0                MOVX    @DPTR,A
002236         ?C0001?LXPROTOCOL:
002236 904DBB            MOV     DPTR,#len
002239 E0                MOVX    A,@DPTR
00223A C3                CLR     C
00223B 13                RRC     A
00223C FE                MOV     R6,A
00223D A3                INC     DPTR
00223E E0                MOVX    A,@DPTR
00223F 13                RRC     A
002240 FF                MOV     R7,A
002241 C3                CLR     C
002242 904DBE            MOV     DPTR,#i+01H
002245 E0                MOVX    A,@DPTR
002246 9F                SUBB    A,R7
002247 904DBD            MOV     DPTR,#i
00224A E0                MOVX    A,@DPTR
00224B 9E                SUBB    A,R6
00224C 507D              JNC     ?C0004?LXPROTOCOL
   24: 	{
   25: 		temp = buf[i];
00224E 904DB8            MOV     DPTR,#buf
002251 E0                MOVX    A,@DPTR
002252 FB                MOV     R3,A
002253 A3                INC     DPTR
002254 E0                MOVX    A,@DPTR
002255 FA                MOV     R2,A
002256 A3                INC     DPTR
002257 E0                MOVX    A,@DPTR
002258 F9                MOV     R1,A
002259 904DBD            MOV     DPTR,#i
00225C E0                MOVX    A,@DPTR
00225D FE                MOV     R6,A
00225E A3                INC     DPTR
00225F E0                MOVX    A,@DPTR
002260 F582              MOV     DPL,A
002262 8E83              MOV     DPH,R6
002264 120112            LCALL   ?C?CLDOPTR
002267 904DC1            MOV     DPTR,#temp
00226A F0                MOVX    @DPTR,A
   26: 		buf[i] = buf[size -i];
00226B 904DBD            MOV     DPTR,#i
00226E E0                MOVX    A,@DPTR
00226F A3                INC     DPTR
002270 E0                MOVX    A,@DPTR
002271 FF                MOV     R7,A
002272 C3                CLR     C
002273 904DC0            MOV     DPTR,#size+01H
002276 E0                MOVX    A,@DPTR
002277 9F                SUBB    A,R7
002278 FF                MOV     R7,A
002279 904DBF            MOV     DPTR,#size
00227C E0                MOVX    A,@DPTR
00227D 9E                SUBB    A,R6
00227E 8F82              MOV     DPL,R7
002280 F583              MOV     DPH,A
002282 120112            LCALL   ?C?CLDOPTR
002285 FF                MOV     R7,A
002286 904DBD            MOV     DPTR,#i
002289 E0                MOVX    A,@DPTR
00228A FC                MOV     R4,A
00228B A3                INC     DPTR
00228C E0                MOVX    A,@DPTR
00228D FD                MOV     R5,A
00228E F582              MOV     DPL,A
002290 8C83              MOV     DPH,R4
002292 EF                MOV     A,R7
002293 120151            LCALL   ?C?CSTOPTR
   27: 		buf[size -i] = temp;
002296 904DC1            MOV     DPTR,#temp
002299 E0                MOVX    A,@DPTR
00229A FF                MOV     R7,A
00229B C3                CLR     C
00229C 904DC0            MOV     DPTR,#size+01H
00229F E0                MOVX    A,@DPTR
0022A0 9D                SUBB    A,R5
0022A1 FD                MOV     R5,A
0022A2 904DBF            MOV     DPTR,#size
0022A5 E0                MOVX    A,@DPTR
0022A6 9C                SUBB    A,R4
0022A7 FC                MOV     R4,A
0022A8 904DB8            MOV     DPTR,#buf
0022AB E0                MOVX    A,@DPTR
0022AC FB                MOV     R3,A
0022AD A3                INC     DPTR
0022AE E0                MOVX    A,@DPTR
0022AF FA                MOV     R2,A
0022B0 A3                INC     DPTR
0022B1 E0                MOVX    A,@DPTR
0022B2 F9                MOV     R1,A
0022B3 8D82              MOV     DPL,R5
0022B5 8C83              MOV     DPH,R4
0022B7 EF                MOV     A,R7
0022B8 120151            LCALL   ?C?CSTOPTR
   28: 	}
0022BB 904DBE            MOV     DPTR,#i+01H
0022BE E0                MOVX    A,@DPTR
0022BF 04                INC     A
0022C0 F0                MOVX    @DPTR,A
0022C1 7006              JNZ     ?C0092?LXPROTOCOL
0022C3 904DBD            MOV     DPTR,#i
0022C6 E0                MOVX    A,@DPTR
0022C7 04                INC     A
0022C8 F0                MOVX    @DPTR,A
0022C9         ?C0092?LXPROTOCOL:
0022C9 4136              AJMP    ?C0001?LXPROTOCOL
   29: }
0022CB         ?C0004?LXPROTOCOL:
0022CB 22                RET     
----- FUNCTION _bigLittleEndianSwap (END) -------


----- FUNCTION lxOptProcess (BEGIN) -----
 FILE: 'lxProtocol.c'
  133: void lxOptProcess(void)
  134: {
  135: 	u8_t i;
  136: 
  137: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
0022CC 904C64            MOV     DPTR,#btCmdBuf+01H
0022CF 7430              MOV     A,#030H
0022D1 F0                MOVX    @DPTR,A
  138: 	btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
0022D2 A3                INC     DPTR
0022D3 741C              MOV     A,#01CH
0022D5 F0                MOVX    @DPTR,A
  139: 	btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
0022D6 E4                CLR     A
0022D7 A3                INC     DPTR
0022D8 F0                MOVX    @DPTR,A
  140: 	switch(lxOptStatus)
0022D9 904C5C            MOV     DPTR,#lxOptStatus
0022DC E0                MOVX    A,@DPTR
0022DD 12036F            LCALL   ?C?CCASE
0022E0 2305              DW      ?C0027?LXPROTOCOL
0022E2 10                DB      010H
0022E3 236F              DW      ?C0031?LXPROTOCOL
0022E5 13                DB      013H
0022E6 23DB              DW      ?C0034?LXPROTOCOL
0022E8 16                DB      016H
0022E9 246A              DW      ?C0040?LXPROTOCOL
0022EB 18                DB      018H
0022EC 24DD              DW      ?C0050?LXPROTOCOL
0022EE 20                DB      020H
0022EF 251C              DW      ?C0051?LXPROTOCOL
0022F1 22                DB      022H
0022F2 2540              DW      ?C0053?LXPROTOCOL
0022F4 25                DB      025H
0022F5 256D              DW      ?C0055?LXPROTOCOL
0022F7 28                DB      028H
0022F8 2594              DW      ?C0058?LXPROTOCOL
0022FA 31                DB      031H
0022FB 25AC              DW      ?C0062?LXPROTOCOL
0022FD 35                DB      035H
0022FE 25BE              DW      ?C0065?LXPROTOCOL
002300 36                DB      036H
002301 0000              DW      00H
002303 25C7              DW      ?C0049?LXPROTOCOL
  141: 	{
  142: #if 1
  143: 		case OPT_REGISTER_REQ:
002305         ?C0027?LXPROTOCOL:
  144: 			if(*(LX_RECV_BUF + 8) == DEVICE_ID_UNREGISTERED ||
  145: 				*(LX_RECV_BUF + 8) == DEVICE_ID_REGISTERED)
002305 9048A8            MOV     DPTR,#048A8H
002308 E0                MOVX    A,@DPTR
002309 6401              XRL     A,#01H
00230B 6004              JZ      ?C0029?LXPROTOCOL
00230D E0                MOVX    A,@DPTR
00230E B40220            CJNE    A,#02H,?C0028?LXPROTOCOL
002311         ?C0029?LXPROTOCOL:
  146: 			{
  147: 				//save deviceID
  148: 				dmemcpy(deviceInfo.deviceID, LX_RECV_BUF + 2, DEVICE_ID_LENGTH);
002311 751301            MOV     ?_dmemcpy?BYTE+03H,#01H
002314 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
002317 7515A2            MOV     ?_dmemcpy?BYTE+05H,#0A2H
00231A 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
00231D 7B01              MOV     R3,#01H
00231F 7A4C              MOV     R2,#HIGH deviceInfo+04H
002321 790A              MOV     R1,#LOW deviceInfo+04H
002323 F144              ACALL   _dmemcpy
  149: 				//register success
  150: 				deviceInfo.registerFlag = DEVICE_REGISTERED;
002325 904C06            MOV     DPTR,#deviceInfo
002328 7401              MOV     A,#01H
00232A F0                MOVX    @DPTR,A
  151: 				//update adv flag
  152: 				*(mem_le_adv_data + 13) = DEVICE_REGISTERED;
00232B 9043E7            MOV     DPTR,#043E7H
00232E F0                MOVX    @DPTR,A
  153: 			}
00232F 8005              SJMP    ?C0030?LXPROTOCOL
002331         ?C0028?LXPROTOCOL:
  154: 			else// if(*(LX_RECV_BUF + 8) == DEVICE_ID_ILLEGALED)
  155: 			{
  156: 				deviceInfo.registerFlag = DEVICE_UNREGISTERED;
002331 E4                CLR     A
002332 904C06            MOV     DPTR,#deviceInfo
002335 F0                MOVX    @DPTR,A
  157: 			}
002336         ?C0030?LXPROTOCOL:
  158: 			
  159: 			btCmdBuf.len = 0x08;
002336 904C63            MOV     DPTR,#btCmdBuf
002339 7408              MOV     A,#08H
00233B F0                MOVX    @DPTR,A
  160: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
00233C 904C67            MOV     DPTR,#btCmdBuf+04H
00233F 7410              MOV     A,#010H
002341 F0                MOVX    @DPTR,A
  161: 			btCmdBuf.DATA[4] = REGISTER_RSP_DATA_LEN;
002342 A3                INC     DPTR
002343 7403              MOV     A,#03H
002345 F0                MOVX    @DPTR,A
  162: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_REGISTER_RSP);
002346 A3                INC     DPTR
002347 14                DEC     A
002348 F0                MOVX    @DPTR,A
  163: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_REGISTER_RSP);
002349 E4                CLR     A
00234A A3                INC     DPTR
00234B F0                MOVX    @DPTR,A
  164: 			btCmdBuf.DATA[7] = deviceInfo.registerFlag;
00234C 904C06            MOV     DPTR,#deviceInfo
00234F E0                MOVX    A,@DPTR
002350 904C6B            MOV     DPTR,#btCmdBuf+08H
002353 F0                MOVX    @DPTR,A
  165: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), REGISTER_RSP_DATA_LEN);
002354 7B01              MOV     R3,#01H
002356 7A4C              MOV     R2,#HIGH btCmdBuf+06H
002358 7969              MOV     R1,#LOW btCmdBuf+06H
00235A 7D03              MOV     R5,#03H
00235C 7C00              MOV     R4,#00H
00235E 5111              ACALL   _bigLittleEndianSwap
  166: 			BT_CmdFifoIn(&btCmdBuf);
002360 7B01              MOV     R3,#01H
002362 7A4C              MOV     R2,#HIGH btCmdBuf
002364 7963              MOV     R1,#LOW btCmdBuf
002366 D123              ACALL   _BT_CmdFifoIn
  167: 			lxOptStatus = OPT_REGISTER_RSP_WAIT_ACK;
002368 904C5C            MOV     DPTR,#lxOptStatus
00236B 7411              MOV     A,#011H
00236D F0                MOVX    @DPTR,A
  168: 			break;
00236E 22                RET     
  169: 			
  170: 		case OPT_BIND_REQ:
00236F         ?C0031?LXPROTOCOL:
  171: 			//bind success
  172: 			if(*(LX_RECV_BUF + 2) >= 1 && *(LX_RECV_BUF + 2) <= 4 && *(LX_RECV_BUF + 3) == 1)
00236F 9048A2            MOV     DPTR,#048A2H
002372 E0                MOVX    A,@DPTR
002373 C3                CLR     C
002374 9401              SUBB    A,#01H
002376 401B              JC      ?C0032?LXPROTOCOL
002378 E0                MOVX    A,@DPTR
002379 D3                SETB    C
00237A 9404              SUBB    A,#04H
00237C 5015              JNC     ?C0032?LXPROTOCOL
00237E A3                INC     DPTR
00237F E0                MOVX    A,@DPTR
002380 B40110            CJNE    A,#01H,?C0032?LXPROTOCOL
  173: 			{
  174: 				//save user number
  175: 				deviceInfo.userNum = *(LX_RECV_BUF + 2);
002383 9048A2            MOV     DPTR,#048A2H
002386 E0                MOVX    A,@DPTR
002387 904C09            MOV     DPTR,#deviceInfo+03H
00238A F0                MOVX    @DPTR,A
  176: 				//lcd display result
  177: 				deviceInfo.bindFlag = BIND_SUCCESS;
00238B 904C07            MOV     DPTR,#deviceInfo+01H
00238E 7401              MOV     A,#01H
002390 F0                MOVX    @DPTR,A
  178: 			}
002391 8006              SJMP    ?C0033?LXPROTOCOL
002393         ?C0032?LXPROTOCOL:
  179: 			else
  180: 			{
  181: 				deviceInfo.bindFlag =  BIND_FAIL;
002393 904C07            MOV     DPTR,#deviceInfo+01H
002396 7402              MOV     A,#02H
002398 F0                MOVX    @DPTR,A
  182: 			}
002399         ?C0033?LXPROTOCOL:
  183: 			
  184: 			btCmdBuf.len = 0x08;
002399 904C63            MOV     DPTR,#btCmdBuf
00239C 7408              MOV     A,#08H
00239E F0                MOVX    @DPTR,A
  185: 			btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
00239F A3                INC     DPTR
0023A0 7430              MOV     A,#030H
0023A2 F0                MOVX    @DPTR,A
  186: 			btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
0023A3 A3                INC     DPTR
0023A4 741C              MOV     A,#01CH
0023A6 F0                MOVX    @DPTR,A
  187: 			btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
0023A7 E4                CLR     A
0023A8 A3                INC     DPTR
0023A9 F0                MOVX    @DPTR,A
  188: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
0023AA A3                INC     DPTR
0023AB 7410              MOV     A,#010H
0023AD F0                MOVX    @DPTR,A
  189: 			btCmdBuf.DATA[4] = BIND_RSP_DATA_LEN;
0023AE A3                INC     DPTR
0023AF 7403              MOV     A,#03H
0023B1 F0                MOVX    @DPTR,A
  190: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_BIND_RSP);
0023B2 A3                INC     DPTR
0023B3 04                INC     A
0023B4 F0                MOVX    @DPTR,A
  191: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_BIND_RSP);
0023B5 E4                CLR     A
0023B6 A3                INC     DPTR
0023B7 F0                MOVX    @DPTR,A
  192: 			btCmdBuf.DATA[7] = deviceInfo.bindFlag;
0023B8 904C07            MOV     DPTR,#deviceInfo+01H
0023BB E0                MOVX    A,@DPTR
0023BC 904C6B            MOV     DPTR,#btCmdBuf+08H
0023BF F0                MOVX    @DPTR,A
  193: 
  194: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), BIND_RSP_DATA_LEN);
0023C0 7B01              MOV     R3,#01H
0023C2 7A4C              MOV     R2,#HIGH btCmdBuf+06H
0023C4 7969              MOV     R1,#LOW btCmdBuf+06H
0023C6 7D03              MOV     R5,#03H
0023C8 7C00              MOV     R4,#00H
0023CA 5111              ACALL   _bigLittleEndianSwap
  195: 			BT_CmdFifoIn(&btCmdBuf);
0023CC 7B01              MOV     R3,#01H
0023CE 7A4C              MOV     R2,#HIGH btCmdBuf
0023D0 7963              MOV     R1,#LOW btCmdBuf
0023D2 D123              ACALL   _BT_CmdFifoIn
  196: 			lxOptStatus = OPT_BIND_RSP_WAIT_ACK;
0023D4 904C5C            MOV     DPTR,#lxOptStatus
0023D7 7414              MOV     A,#014H
0023D9 F0                MOVX    @DPTR,A
  197: 			break;
0023DA 22                RET     
  198: 		
  199: 		case OPT_LOGIN_REQ:
0023DB         ?C0034?LXPROTOCOL:
  200: 			btCmdBuf.len = 0x0f;
0023DB 904C63            MOV     DPTR,#btCmdBuf
0023DE 740F              MOV     A,#0FH
0023E0 F0                MOVX    @DPTR,A
  201: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
0023E1 904C67            MOV     DPTR,#btCmdBuf+04H
0023E4 04                INC     A
0023E5 F0                MOVX    @DPTR,A
  202: 			btCmdBuf.DATA[4] = LOGIN_REQ_DATA_LEN;
0023E6 A3                INC     DPTR
0023E7 740A              MOV     A,#0AH
0023E9 F0                MOVX    @DPTR,A
  203: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_LOGIN_REQ);
0023EA A3                INC     DPTR
0023EB 7407              MOV     A,#07H
0023ED F0                MOVX    @DPTR,A
  204: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_LOGIN_REQ);
0023EE E4                CLR     A
0023EF A3                INC     DPTR
0023F0 F0                MOVX    @DPTR,A
  205: 			//Verification code:6bytes deviceID XOR MAC
  206: 			for(i=0;i<6;i++)
0023F1 904E5C            MOV     DPTR,#i
0023F4 F0                MOVX    @DPTR,A
0023F5         ?C0035?LXPROTOCOL:
0023F5 904E5C            MOV     DPTR,#i
0023F8 E0                MOVX    A,@DPTR
0023F9 FF                MOV     R7,A
0023FA C3                CLR     C
0023FB 9406              SUBB    A,#06H
0023FD 502E              JNC     ?C0036?LXPROTOCOL
  207: 			{
  208: 				btCmdBuf.DATA[7+i] = deviceInfo.deviceID[i] ^ (*(mem_le_mac+i));
0023FF E0                MOVX    A,@DPTR
002400 FE                MOV     R6,A
002401 24E8              ADD     A,#0E8H
002403 F582              MOV     DPL,A
002405 E4                CLR     A
002406 3443              ADDC    A,#043H
002408 F583              MOV     DPH,A
00240A E0                MOVX    A,@DPTR
00240B FD                MOV     R5,A
00240C 740A              MOV     A,#LOW deviceInfo+04H
00240E 2E                ADD     A,R6
00240F F582              MOV     DPL,A
002411 E4                CLR     A
002412 344C              ADDC    A,#HIGH deviceInfo+04H
002414 F583              MOV     DPH,A
002416 E0                MOVX    A,@DPTR
002417 6D                XRL     A,R5
002418 FE                MOV     R6,A
002419 746B              MOV     A,#LOW btCmdBuf+08H
00241B 2F                ADD     A,R7
00241C F582              MOV     DPL,A
00241E E4                CLR     A
00241F 344C              ADDC    A,#HIGH btCmdBuf+08H
002421 F583              MOV     DPH,A
002423 EE                MOV     A,R6
002424 F0                MOVX    @DPTR,A
  209: 			}
002425 904E5C            MOV     DPTR,#i
002428 E0                MOVX    A,@DPTR
002429 04                INC     A
00242A F0                MOVX    @DPTR,A
00242B 80C8              SJMP    ?C0035?LXPROTOCOL
00242D         ?C0036?LXPROTOCOL:
  210: 			
  211: 			//user number:1bytes
  212: 			btCmdBuf.DATA[13] = deviceInfo.userNum;
00242D 904C09            MOV     DPTR,#deviceInfo+03H
002430 E0                MOVX    A,@DPTR
002431 904C71            MOV     DPTR,#btCmdBuf+0EH
002434 F0                MOVX    @DPTR,A
  213: 			//battery:1bytes
  214: 			if(CS_Scale_JudgeLowBat(GetIfLowBat) == true)
002435 7F01              MOV     R7,#01H
002437 1217DD            LCALL   _CS_Scale_JudgeLowBat
00243A BF0108            CJNE    R7,#01H,?C0038?LXPROTOCOL
  215: 				btCmdBuf.DATA[14] = 10;
00243D 904C72            MOV     DPTR,#btCmdBuf+0FH
002440 740A              MOV     A,#0AH
002442 F0                MOVX    @DPTR,A
002443 8006              SJMP    ?C0039?LXPROTOCOL
002445         ?C0038?LXPROTOCOL:
  216: 			else
  217: 				btCmdBuf.DATA[14] = 100;
002445 904C72            MOV     DPTR,#btCmdBuf+0FH
002448 7464              MOV     A,#064H
00244A F0                MOVX    @DPTR,A
00244B         ?C0039?LXPROTOCOL:
  218: 
  219: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), LOGIN_REQ_DATA_LEN);
00244B 7B01              MOV     R3,#01H
00244D 7A4C              MOV     R2,#HIGH btCmdBuf+06H
00244F 7969              MOV     R1,#LOW btCmdBuf+06H
002451 7D0A              MOV     R5,#0AH
002453 7C00              MOV     R4,#00H
002455 5111              ACALL   _bigLittleEndianSwap
  220: 			BT_CmdFifoIn(&btCmdBuf);
002457 7B01              MOV     R3,#01H
002459 7A4C              MOV     R2,#HIGH btCmdBuf
00245B 7963              MOV     R1,#LOW btCmdBuf
00245D D123              ACALL   _BT_CmdFifoIn
  221: 			YC_Delay10ms(10);
00245F 7F0A              MOV     R7,#0AH
002461 D10B              ACALL   _YC_Delay10ms
  222: 			lxOptStatus = OPT_LOGIN_REQ_WAIT_ACK;
002463 904C5C            MOV     DPTR,#lxOptStatus
002466 7417              MOV     A,#017H
002468 F0                MOVX    @DPTR,A
  223: 			break;
002469 22                RET     
  224: 		case OPT_LOGIN_RSP:
00246A         ?C0040?LXPROTOCOL:
  225: 			*(mem_register_buf + 2) = *(LX_RECV_BUF + 2);
00246A 9048A2            MOV     DPTR,#048A2H
00246D E0                MOVX    A,@DPTR
00246E 904C10            MOV     DPTR,#04C10H
002471 F0                MOVX    @DPTR,A
  226: 			if(*(mem_register_buf + 2) == LOGIN_SUCCESS)
002472 E0                MOVX    A,@DPTR
002473 6401              XRL     A,#01H
002475 7050              JNZ     ?C0041?LXPROTOCOL
  227: 			{
  228: 				//Verification code:6bytes deviceID XOR MAC
  229: 				for(i=0;i<6;i++)
002477 904E5C            MOV     DPTR,#i
00247A F0                MOVX    @DPTR,A
00247B         ?C0042?LXPROTOCOL:
  230: 				{
  231: 					if(*(LX_RECV_BUF + 3+i) != *(mem_register_buf + 4 + i) ^ (*(mem_le_mac+i)))
00247B 904E5C            MOV     DPTR,#i
00247E E0                MOVX    A,@DPTR
00247F FF                MOV     R7,A
002480 2412              ADD     A,#012H
002482 F582              MOV     DPL,A
002484 E4                CLR     A
002485 344C              ADDC    A,#04CH
002487 F583              MOV     DPH,A
002489 E0                MOVX    A,@DPTR
00248A FE                MOV     R6,A
00248B 74A3              MOV     A,#0A3H
00248D 2F                ADD     A,R7
00248E F582              MOV     DPL,A
002490 E4                CLR     A
002491 3448              ADDC    A,#048H
002493 F583              MOV     DPH,A
002495 E0                MOVX    A,@DPTR
002496 6E                XRL     A,R6
002497 6004              JZ      ?C0046?LXPROTOCOL
002499 7F01              MOV     R7,#01H
00249B 8002              SJMP    ?C0047?LXPROTOCOL
00249D         ?C0046?LXPROTOCOL:
00249D 7F00              MOV     R7,#00H
00249F         ?C0047?LXPROTOCOL:
00249F 904E5C            MOV     DPTR,#i
0024A2 E0                MOVX    A,@DPTR
0024A3 24E8              ADD     A,#0E8H
0024A5 F582              MOV     DPL,A
0024A7 E4                CLR     A
0024A8 3443              ADDC    A,#043H
0024AA F583              MOV     DPH,A
0024AC E0                MOVX    A,@DPTR
0024AD 6F                XRL     A,R7
0024AE 6006              JZ      ?C0044?LXPROTOCOL
  232: 					{
  233: 						//disconnected
  234: 						btCmdBuf.len = 0x01;
0024B0 904C63            MOV     DPTR,#btCmdBuf
0024B3 7401              MOV     A,#01H
0024B5 F0                MOVX    @DPTR,A
  235: 						//btCmdBuf.DATA[0] = CS_CMD_LE_DISC_REQ;
  236: 						//BT_CmdFifoIn(&btCmdBuf);
  237: 						//return;
  238: 					}
  239: 				}
0024B6         ?C0044?LXPROTOCOL:
0024B6 904E5C            MOV     DPTR,#i
0024B9 E0                MOVX    A,@DPTR
0024BA 04                INC     A
0024BB F0                MOVX    @DPTR,A
0024BC E0                MOVX    A,@DPTR
0024BD B406BB            CJNE    A,#06H,?C0042?LXPROTOCOL
0024C0         ?C0043?LXPROTOCOL:
  240: 				//login success:sync time
  241: 				lxOptStatus = OPT_INIT_REQ;
0024C0 904C5C            MOV     DPTR,#lxOptStatus
0024C3 7420              MOV     A,#020H
0024C5 F0                MOVX    @DPTR,A
  242: 			}
0024C6 22                RET     
0024C7         ?C0041?LXPROTOCOL:
  243: 			else
  244: 			{
  245: 				lxOptStatus = OPT_IDLE;
0024C7 E4                CLR     A
0024C8 904C5C            MOV     DPTR,#lxOptStatus
0024CB F0                MOVX    @DPTR,A
  246: 				//disconnected
  247: 				btCmdBuf.len = 0x01;
0024CC 904C63            MOV     DPTR,#btCmdBuf
0024CF 04                INC     A
0024D0 F0                MOVX    @DPTR,A
  248: 				btCmdBuf.DATA[0] = CS_CMD_LE_DISC_REQ;
0024D1 A3                INC     DPTR
0024D2 7429              MOV     A,#029H
0024D4 F0                MOVX    @DPTR,A
  249: 				BT_CmdFifoIn(&btCmdBuf);
0024D5 7B01              MOV     R3,#01H
0024D7 7A4C              MOV     R2,#HIGH btCmdBuf
0024D9 7963              MOV     R1,#LOW btCmdBuf
0024DB C123              AJMP    _BT_CmdFifoIn
  250: 				return;
  251: 			}
  252: 			break;
  253: 			
  254: 		case OPT_INIT_REQ:
0024DD         ?C0050?LXPROTOCOL:
  255: 			btCmdBuf.len = 0x08;
0024DD 904C63            MOV     DPTR,#btCmdBuf
0024E0 7408              MOV     A,#08H
0024E2 F0                MOVX    @DPTR,A
  256: 			btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
0024E3 A3                INC     DPTR
0024E4 7430              MOV     A,#030H
0024E6 F0                MOVX    @DPTR,A
  257: 			btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
0024E7 A3                INC     DPTR
0024E8 741C              MOV     A,#01CH
0024EA F0                MOVX    @DPTR,A
  258: 			btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
0024EB E4                CLR     A
0024EC A3                INC     DPTR
0024ED F0                MOVX    @DPTR,A
  259: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
0024EE A3                INC     DPTR
0024EF 7410              MOV     A,#010H
0024F1 F0                MOVX    @DPTR,A
  260: 			btCmdBuf.DATA[4] = INIT_REQ_DATA_LEN;
0024F2 A3                INC     DPTR
0024F3 7403              MOV     A,#03H
0024F5 F0                MOVX    @DPTR,A
  261: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_INIT_REQ);
0024F6 A3                INC     DPTR
0024F7 7409              MOV     A,#09H
0024F9 F0                MOVX    @DPTR,A
  262: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_INIT_REQ);
0024FA E4                CLR     A
0024FB A3                INC     DPTR
0024FC F0                MOVX    @DPTR,A
  263: 			btCmdBuf.DATA[7] = 0x08;
0024FD A3                INC     DPTR
0024FE 7408              MOV     A,#08H
002500 F0                MOVX    @DPTR,A
  264: 			
  265: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), INIT_REQ_DATA_LEN);
002501 7B01              MOV     R3,#01H
002503 7A4C              MOV     R2,#HIGH btCmdBuf+06H
002505 7969              MOV     R1,#LOW btCmdBuf+06H
002507 7D03              MOV     R5,#03H
002509 7C00              MOV     R4,#00H
00250B 5111              ACALL   _bigLittleEndianSwap
  266: 			BT_CmdFifoIn(&btCmdBuf);
00250D 7B01              MOV     R3,#01H
00250F 7A4C              MOV     R2,#HIGH btCmdBuf
002511 7963              MOV     R1,#LOW btCmdBuf
002513 D123              ACALL   _BT_CmdFifoIn
  267: 			lxOptStatus = OPT_INIT_REQ_WAIT_ACK;
002515 904C5C            MOV     DPTR,#lxOptStatus
002518 7421              MOV     A,#021H
00251A F0                MOVX    @DPTR,A
  268: 			break;
00251B 22                RET     
  269: 		case OPT_INIT_RSP:
00251C         ?C0051?LXPROTOCOL:
  270: 			if(*(LX_RECV_BUF + 2) == 0x08)
00251C 9048A2            MOV     DPTR,#048A2H
00251F E0                MOVX    A,@DPTR
002520 B40817            CJNE    A,#08H,?C0052?LXPROTOCOL
  271: 			{
  272: 				//save UTC time
  273: 				dmemcpy((pxbyte)&UTCTime, LX_RECV_BUF + 3, 4);
002523 7A4C              MOV     R2,#HIGH UTCTime
002525 795E              MOV     R1,#LOW UTCTime
002527 7B01              MOV     R3,#01H
002529 C003              PUSH    AR3
00252B 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
00252D 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
002530 7515A3            MOV     ?_dmemcpy?BYTE+05H,#0A3H
002533 751604            MOV     ?_dmemcpy?BYTE+06H,#04H
002536 D003              POP     AR3
002538 F144              ACALL   _dmemcpy
  274: 			}
00253A         ?C0052?LXPROTOCOL:
  275: 			lxOptStatus = OPT_IDLE;
00253A E4                CLR     A
00253B 904C5C            MOV     DPTR,#lxOptStatus
00253E F0                MOVX    @DPTR,A
  276: 			break;
00253F 22                RET     
  277: 			
  278: 		case OPT_TIME_SETTING_REQ:
002540         ?C0053?LXPROTOCOL:
  279: 			if(*(LX_RECV_BUF+2) &0x01 == 1)
002540 9048A2            MOV     DPTR,#048A2H
002543 E0                MOVX    A,@DPTR
002544 30E017            JNB     ACC.0,?C0054?LXPROTOCOL
  280: 			{
  281: 				dmemcpy((pxbyte)&UTCTime, LX_RECV_BUF + 3, 4);
002547 7A4C              MOV     R2,#HIGH UTCTime
002549 795E              MOV     R1,#LOW UTCTime
00254B 7B01              MOV     R3,#01H
00254D C003              PUSH    AR3
00254F 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
002551 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
002554 7515A3            MOV     ?_dmemcpy?BYTE+05H,#0A3H
002557 751604            MOV     ?_dmemcpy?BYTE+06H,#04H
00255A D003              POP     AR3
00255C F144              ACALL   _dmemcpy
  282: 			}
00255E         ?C0054?LXPROTOCOL:
  283: 			/*
  284: 			if(*(LX_RECV_BUF+2) &0x02 == 1)
  285: 			{
  286: 
  287: 			}
  288: 			*/
  289: 			lxSettingDeviceRespone(CMD_TIME_SETTING_REQ, DEVICE_RSP_SUCCESS);
00255E 7D01              MOV     R5,#01H
002560 7F02              MOV     R7,#02H
002562 7E10              MOV     R6,#010H
002564 B1C8              ACALL   _lxSettingDeviceRespone
  290: 			lxOptStatus = OPT_TIME_SETTING_RSP_WAIT_ACK;
002566 904C5C            MOV     DPTR,#lxOptStatus
002569 7426              MOV     A,#026H
00256B F0                MOVX    @DPTR,A
  291: 			break;
00256C 22                RET     
  292: 		
  293: 		case OPT_UNIT_SETTING_REQ:
00256D         ?C0055?LXPROTOCOL:
  294: 			//save
  295: 			if(*(LX_RECV_BUF + 2) <= 3)
00256D 9048A2            MOV     DPTR,#048A2H
002570 E0                MOVX    A,@DPTR
002571 D3                SETB    C
002572 9403              SUBB    A,#03H
002574 500F              JNC     ?C0056?LXPROTOCOL
  296: 			{
  297: 				R_Selet_Unit = *(LX_RECV_BUF + 2);
002576 E0                MOVX    A,@DPTR
002577 904CC6            MOV     DPTR,#R_Selet_Unit
00257A F0                MOVX    @DPTR,A
  298: 				lxSettingDeviceRespone(CMD_UNIT_SETTING_REQ, DEVICE_RSP_SUCCESS);
00257B 7D01              MOV     R5,#01H
00257D 7F04              MOV     R7,#04H
00257F 7E10              MOV     R6,#010H
002581 B1C8              ACALL   _lxSettingDeviceRespone
  299: 			}
002583 8008              SJMP    ?C0057?LXPROTOCOL
002585         ?C0056?LXPROTOCOL:
  300: 			else
  301: 			{
  302: 				lxSettingDeviceRespone(CMD_UNIT_SETTING_REQ, DEVICE_RSP_FAIL);
002585 7D02              MOV     R5,#02H
002587 7F04              MOV     R7,#04H
002589 7E10              MOV     R6,#010H
00258B B1C8              ACALL   _lxSettingDeviceRespone
  303: 			}
00258D         ?C0057?LXPROTOCOL:
  304: 			lxOptStatus = OPT_UNIT_SETTING_RSP_WAIT_ACK;
00258D 904C5C            MOV     DPTR,#lxOptStatus
002590 7429              MOV     A,#029H
002592 F0                MOVX    @DPTR,A
  305: 			break;
002593 22                RET     
  306: 
  307: 		case OPT_DATA_DEL_SETTING_REQ:
002594         ?C0058?LXPROTOCOL:
  308: 			if(*(LX_RECV_BUF + 3)&0x01 == 1)
002594 9048A3            MOV     DPTR,#048A3H
002597 E0                MOVX    A,@DPTR
002598 30E002            JNB     ACC.0,?C0061?LXPROTOCOL
  309: 			{
  310: 				delUserData();
00259B F1C8              ACALL   delUserData
  311: 			}
  312: 			if(*(LX_RECV_BUF + 3)&0x04 == 1)
  313: 			{
  314: 				UTCTime = 0;
  315: 				R_Selet_Unit = CS_ScaleDisplay_L_kg;
  316: 			}
  317: 			if(*(LX_RECV_BUF + 3)&0x08 == 1)
  318: 			{
  319: 				QueueInit();
  320: 			}
00259D         ?C0061?LXPROTOCOL:
  321: 			
  322: 			lxSettingDeviceRespone(CMD_DATA_CLEAR_SETTING_REQ, DEVICE_RSP_SUCCESS);
00259D 7D01              MOV     R5,#01H
00259F 7F05              MOV     R7,#05H
0025A1 7E10              MOV     R6,#010H
0025A3 B1C8              ACALL   _lxSettingDeviceRespone
  323: 			lxOptStatus = OPT_DATA_DEL_SETTING_RSP_WAIT_ACK;
0025A5 904C5C            MOV     DPTR,#lxOptStatus
0025A8 7432              MOV     A,#032H
0025AA F0                MOVX    @DPTR,A
  324: 			break;
0025AB 22                RET     
  325: #endif
  326: 		case OPT_SYNC_DATA_REQ:
0025AC         ?C0062?LXPROTOCOL:
  327: 			//forbidden
  328: 			if(*(LX_RECV_BUF + 3) == 0)
0025AC 9048A3            MOV     DPTR,#048A3H
0025AF E0                MOVX    A,@DPTR
0025B0 7005              JNZ     ?C0063?LXPROTOCOL
  329: 			{
  330: 				lxOptStatus = OPT_IDLE;
0025B2 904C5C            MOV     DPTR,#lxOptStatus
0025B5 F0                MOVX    @DPTR,A
  331: 			}
0025B6 22                RET     
0025B7         ?C0063?LXPROTOCOL:
  332: 			else
  333: 			{
  334: 				lxOptStatus = OPT_SYNC_DATA_RSP;
0025B7 904C5C            MOV     DPTR,#lxOptStatus
0025BA 7436              MOV     A,#036H
0025BC F0                MOVX    @DPTR,A
  335: 			}
  336: 			break;
0025BD 22                RET     
  337: 		case OPT_SYNC_DATA_RSP:
0025BE         ?C0065?LXPROTOCOL:
  338: 			//send measuredata
  339: 			sendHistoryData();
0025BE 122B99            LCALL   sendHistoryData
  340: 			lxOptStatus = OPT_SYNC_DATA_RSP_WAIT_ACK;
0025C1 904C5C            MOV     DPTR,#lxOptStatus
0025C4 7437              MOV     A,#037H
0025C6 F0                MOVX    @DPTR,A
  341: 			break;
  342: 		/*
  343: 		case LX_OPT_STATUS_RESEND:
  344: 			BT_CmdFifoIn(&btCmdBuf);
  345: 			lxOptStatus = OPT_IDLE;
  346: 			break;
  347: 			*/
  348: 	}
  349: }
0025C7         ?C0049?LXPROTOCOL:
0025C7 22                RET     
----- FUNCTION lxOptProcess (END) -------


----- FUNCTION _lxSettingDeviceRespone (BEGIN) -----
 FILE: 'lxProtocol.c'
  351: static void lxSettingDeviceRespone(u16_t cmd, u8_t state)
  352: {
;---- Variable 'cmd' assigned to Register 'R2/R3' ----
0025C8 AB07              MOV     R3,AR7
0025CA AA06              MOV     R2,AR6
;---- Variable 'state' assigned to Register 'R5' ----
  353: 	btCmdBuf.len = DEVICE_RSP_DATA_LEN + 5;
  354: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
0025CC 904C63            MOV     DPTR,#btCmdBuf
0025CF 740A              MOV     A,#0AH
0025D1 F0                MOVX    @DPTR,A
  355: 	btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
0025D2 A3                INC     DPTR
0025D3 7430              MOV     A,#030H
0025D5 F0                MOVX    @DPTR,A
  356: 	btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
0025D6 A3                INC     DPTR
0025D7 741C              MOV     A,#01CH
0025D9 F0                MOVX    @DPTR,A
  357: 	btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
0025DA E4                CLR     A
0025DB A3                INC     DPTR
0025DC F0                MOVX    @DPTR,A
  358: 	btCmdBuf.DATA[4] = DEVICE_RSP_DATA_LEN;
0025DD A3                INC     DPTR
0025DE 7410              MOV     A,#010H
0025E0 F0                MOVX    @DPTR,A
  359: 	btCmdBuf.DATA[5] = LO_UINT16(CMD_DEVICE_RSP);
0025E1 A3                INC     DPTR
0025E2 7405              MOV     A,#05H
0025E4 F0                MOVX    @DPTR,A
  360: 	btCmdBuf.DATA[6] = HI_UINT16(CMD_DEVICE_RSP);
0025E5 E4                CLR     A
0025E6 A3                INC     DPTR
0025E7 F0                MOVX    @DPTR,A
  361: 	btCmdBuf.DATA[7] = LO_UINT16(cmd);
0025E8 A3                INC     DPTR
0025E9 7410              MOV     A,#010H
0025EB F0                MOVX    @DPTR,A
  362: 	btCmdBuf.DATA[8] = HI_UINT16(cmd);
0025EC EF                MOV     A,R7
0025ED A3                INC     DPTR
0025EE F0                MOVX    @DPTR,A
  363: 	btCmdBuf.DATA[9] = state;
0025EF EE                MOV     A,R6
0025F0 A3                INC     DPTR
0025F1 F0                MOVX    @DPTR,A
  364: 
0025F2 A3                INC     DPTR
0025F3 ED                MOV     A,R5
0025F4 F0                MOVX    @DPTR,A
  365: 	bigLittleEndianSwap(&(btCmdBuf.DATA[5]), DEVICE_RSP_DATA_LEN);
0025F5 7B01              MOV     R3,#01H
0025F7 7A4C              MOV     R2,#HIGH btCmdBuf+06H
0025F9 7969              MOV     R1,#LOW btCmdBuf+06H
0025FB 7D05              MOV     R5,#05H
0025FD 7C00              MOV     R4,#00H
0025FF 5111              ACALL   _bigLittleEndianSwap
  366: 	BT_CmdFifoIn(&btCmdBuf);
002601 7B01              MOV     R3,#01H
002603 7A4C              MOV     R2,#HIGH btCmdBuf
002605 7963              MOV     R1,#LOW btCmdBuf
002607 D123              ACALL   _BT_CmdFifoIn
  367: 	YC_Delay10ms(10);
002609 7F0A              MOV     R7,#0AH
;----                  JMP     _YC_Delay10ms
  368: }
----- FUNCTION _lxSettingDeviceRespone (END) -------


----- FUNCTION _YC_Delay10ms (BEGIN) -----
 FILE: 'YC_Utilities.c'
   60: void YC_Delay10ms(u8_t Time)
   61: {
;---- Variable 'Time' assigned to Register 'R7' ----
   62: 	u16_t j; 
   63: 	for(;Time>0;Time--)
00260B         ?C0027?YC_UTILITIES:
00260B EF                MOV     A,R7
00260C D3                SETB    C
00260D 9400              SUBB    A,#00H
00260F 4011              JC      ?C0033?YC_UTILITIES
   64: 	{
   65: 		for(j=0;j<11900;j++);
;---- Variable 'j' assigned to Register 'R4/R5' ----
002611 E4                CLR     A
002612 FD                MOV     R5,A
002613 FC                MOV     R4,A
002614         ?C0030?YC_UTILITIES:
002614 0D                INC     R5
002615 BD0001            CJNE    R5,#00H,?C0054?YC_UTILITIES
002618 0C                INC     R4
002619         ?C0054?YC_UTILITIES:
002619 BC2EF8            CJNE    R4,#02EH,?C0030?YC_UTILITIES
00261C BD7CF5            CJNE    R5,#07CH,?C0030?YC_UTILITIES
   66: 	}
00261F         ?C0029?YC_UTILITIES:
00261F 1F                DEC     R7
002620 80E9              SJMP    ?C0027?YC_UTILITIES
   67: }
002622         ?C0033?YC_UTILITIES:
002622 22                RET     
----- FUNCTION _YC_Delay10ms (END) -------


----- FUNCTION _BT_CmdFifoIn (BEGIN) -----
 FILE: 'BT_IPC.c'
    7: bool BT_CmdFifoIn(BT_CMDFIFO_t *pFIFO)
    8: {
002623 904DFD            MOV     DPTR,#pFIFO
002626 EB                MOV     A,R3
002627 F0                MOVX    @DPTR,A
002628 A3                INC     DPTR
002629 EA                MOV     A,R2
00262A F0                MOVX    @DPTR,A
00262B A3                INC     DPTR
00262C E9                MOV     A,R1
00262D F0                MOVX    @DPTR,A
    9: 	u16_t new_wprt,new_cmd_len,i;
   10: 	if( pFIFO->len ==0 )
00262E 1200F9            LCALL   ?C?CLDPTR
002631 7002              JNZ     ?C0001?BT_IPC
   11: 		return false;
002633 C3                CLR     C
002634 22                RET     
002635         ?C0001?BT_IPC:
   12: 	new_cmd_len = BT_GetCmdFifoDepth()+pFIFO->len+2;
002635 12317A            LCALL   BT_GetCmdFifoDepth
002638 904DFD            MOV     DPTR,#pFIFO
00263B E0                MOVX    A,@DPTR
00263C FB                MOV     R3,A
00263D A3                INC     DPTR
00263E E0                MOVX    A,@DPTR
00263F FA                MOV     R2,A
002640 A3                INC     DPTR
002641 E0                MOVX    A,@DPTR
002642 F9                MOV     R1,A
002643 1200F9            LCALL   ?C?CLDPTR
002646 FD                MOV     R5,A
002647 2F                ADD     A,R7
002648 FF                MOV     R7,A
002649 E4                CLR     A
00264A 33                RLC     A
00264B CF                XCH     A,R7
00264C 2402              ADD     A,#02H
00264E CF                XCH     A,R7
00264F 3400              ADDC    A,#00H
002651 FE                MOV     R6,A
;---- Variable 'new_cmd_len' assigned to Register 'R6/R7' ----
   13: 	if(new_cmd_len<=BT_CMD_BUF_LEN)
002652 D3                SETB    C
002653 EF                MOV     A,R7
002654 9480              SUBB    A,#080H
002656 EE                MOV     A,R6
002657 9400              SUBB    A,#00H
002659 4002              JC      $ + 4H
00265B E142              AJMP    ?C0003?BT_IPC
   14: 	{
   15: 		new_wprt = ESWAP(BT_CmdWptr);
00265D 904A03            MOV     DPTR,#BT_CmdWptr+01H
002660 E0                MOVX    A,@DPTR
002661 FA                MOV     R2,A
002662 904A02            MOV     DPTR,#BT_CmdWptr
002665 E0                MOVX    A,@DPTR
002666 FF                MOV     R7,A
002667 EA                MOV     A,R2
002668 FE                MOV     R6,A
002669 EF                MOV     A,R7
00266A 904E00            MOV     DPTR,#new_wprt
00266D EE                MOV     A,R6
00266E F0                MOVX    @DPTR,A
00266F A3                INC     DPTR
002670 EF                MOV     A,R7
002671 F0                MOVX    @DPTR,A
   16: 		HWRITE(new_wprt++,CS_PREFIX_CMD);
002672 904E00            MOV     DPTR,#new_wprt
002675 E4                CLR     A
002676 75F001            MOV     B,#01H
002679 1201C8            LCALL   ?C?ILDIX
00267C 85F082            MOV     DPL,B
00267F F583              MOV     DPH,A
002681 74C5              MOV     A,#0C5H
002683 F0                MOVX    @DPTR,A
   17: 		if(new_wprt == (mem_cmd_buf_end + 1))
002684 904E00            MOV     DPTR,#new_wprt
002687 E0                MOVX    A,@DPTR
002688 B44F0E            CJNE    A,#04FH,?C0004?BT_IPC
00268B A3                INC     DPTR
00268C E0                MOVX    A,@DPTR
00268D B48009            CJNE    A,#080H,?C0004?BT_IPC
   18: 		{
   19: 			new_wprt = mem_cmd_buf;
002690 904E00            MOV     DPTR,#new_wprt
002693 744F              MOV     A,#04FH
002695 F0                MOVX    @DPTR,A
002696 A3                INC     DPTR
002697 E4                CLR     A
002698 F0                MOVX    @DPTR,A
   20: 		}
002699         ?C0004?BT_IPC:
   21: 		HWRITE(new_wprt++,pFIFO->len);
002699 904E00            MOV     DPTR,#new_wprt
00269C E4                CLR     A
00269D 75F001            MOV     B,#01H
0026A0 1201C8            LCALL   ?C?ILDIX
0026A3 85F082            MOV     DPL,B
0026A6 F583              MOV     DPH,A
0026A8 ED                MOV     A,R5
0026A9 F0                MOVX    @DPTR,A
   22: 		if(new_wprt == (mem_cmd_buf_end + 1))
0026AA 904E00            MOV     DPTR,#new_wprt
0026AD E0                MOVX    A,@DPTR
0026AE B44F0E            CJNE    A,#04FH,?C0005?BT_IPC
0026B1 A3                INC     DPTR
0026B2 E0                MOVX    A,@DPTR
0026B3 B48009            CJNE    A,#080H,?C0005?BT_IPC
   23: 		{
   24: 			new_wprt = mem_cmd_buf;
0026B6 904E00            MOV     DPTR,#new_wprt
0026B9 744F              MOV     A,#04FH
0026BB F0                MOVX    @DPTR,A
0026BC A3                INC     DPTR
0026BD E4                CLR     A
0026BE F0                MOVX    @DPTR,A
   25: 		}
0026BF         ?C0005?BT_IPC:
   26: 		for(i=0;i<pFIFO->len;i++)
0026BF E4                CLR     A
0026C0 904E02            MOV     DPTR,#i
0026C3 F0                MOVX    @DPTR,A
0026C4 A3                INC     DPTR
0026C5 F0                MOVX    @DPTR,A
0026C6         ?C0006?BT_IPC:
0026C6 904DFD            MOV     DPTR,#pFIFO
0026C9 E0                MOVX    A,@DPTR
0026CA FB                MOV     R3,A
0026CB A3                INC     DPTR
0026CC E0                MOVX    A,@DPTR
0026CD FA                MOV     R2,A
0026CE A3                INC     DPTR
0026CF E0                MOVX    A,@DPTR
0026D0 F9                MOV     R1,A
0026D1 1200F9            LCALL   ?C?CLDPTR
0026D4 FF                MOV     R7,A
0026D5 904E02            MOV     DPTR,#i
0026D8 E0                MOVX    A,@DPTR
0026D9 FC                MOV     R4,A
0026DA A3                INC     DPTR
0026DB E0                MOVX    A,@DPTR
0026DC FD                MOV     R5,A
0026DD C3                CLR     C
0026DE 9F                SUBB    A,R7
0026DF EC                MOV     A,R4
0026E0 9400              SUBB    A,#00H
0026E2 5047              JNC     ?C0007?BT_IPC
   27: 		{
   28: 			HWRITE(new_wprt++,pFIFO->DATA[i]);
0026E4 E9                MOV     A,R1
0026E5 2401              ADD     A,#01H
0026E7 F9                MOV     R1,A
0026E8 E4                CLR     A
0026E9 3A                ADDC    A,R2
0026EA FA                MOV     R2,A
0026EB E9                MOV     A,R1
0026EC 2D                ADD     A,R5
0026ED F9                MOV     R1,A
0026EE EA                MOV     A,R2
0026EF 3C                ADDC    A,R4
0026F0 FA                MOV     R2,A
0026F1 1200F9            LCALL   ?C?CLDPTR
0026F4 FF                MOV     R7,A
0026F5 904E00            MOV     DPTR,#new_wprt
0026F8 E4                CLR     A
0026F9 75F001            MOV     B,#01H
0026FC 1201C8            LCALL   ?C?ILDIX
0026FF 85F082            MOV     DPL,B
002702 F583              MOV     DPH,A
002704 EF                MOV     A,R7
002705 F0                MOVX    @DPTR,A
   29: 			if(new_wprt == (mem_cmd_buf_end + 1))
002706 904E00            MOV     DPTR,#new_wprt
002709 E0                MOVX    A,@DPTR
00270A B44F0E            CJNE    A,#04FH,?C0008?BT_IPC
00270D A3                INC     DPTR
00270E E0                MOVX    A,@DPTR
00270F B48009            CJNE    A,#080H,?C0008?BT_IPC
   30: 			{
   31: 				new_wprt = mem_cmd_buf;
002712 904E00            MOV     DPTR,#new_wprt
002715 744F              MOV     A,#04FH
002717 F0                MOVX    @DPTR,A
002718 A3                INC     DPTR
002719 E4                CLR     A
00271A F0                MOVX    @DPTR,A
   32: 			}
   33: 		}
00271B         ?C0008?BT_IPC:
00271B 904E03            MOV     DPTR,#i+01H
00271E E0                MOVX    A,@DPTR
00271F 04                INC     A
002720 F0                MOVX    @DPTR,A
002721 7006              JNZ     ?C0030?BT_IPC
002723 904E02            MOV     DPTR,#i
002726 E0                MOVX    A,@DPTR
002727 04                INC     A
002728 F0                MOVX    @DPTR,A
002729         ?C0030?BT_IPC:
002729 809B              SJMP    ?C0006?BT_IPC
00272B         ?C0007?BT_IPC:
   34: 		BT_CmdWptr = ESWAP(new_wprt);
00272B 904E00            MOV     DPTR,#new_wprt
00272E E0                MOVX    A,@DPTR
00272F FC                MOV     R4,A
002730 A3                INC     DPTR
002731 E0                MOVX    A,@DPTR
002732 FA                MOV     R2,A
002733 EC                MOV     A,R4
002734 FF                MOV     R7,A
002735 EA                MOV     A,R2
002736 FE                MOV     R6,A
002737 EF                MOV     A,R7
002738 904A02            MOV     DPTR,#BT_CmdWptr
00273B EE                MOV     A,R6
00273C F0                MOVX    @DPTR,A
00273D A3                INC     DPTR
00273E EF                MOV     A,R7
00273F F0                MOVX    @DPTR,A
   35: 		return true;
002740 D3                SETB    C
002741 22                RET     
   36: 	}
002742         ?C0003?BT_IPC:
   37: 	else
   38: 	{
   39: 		return false;
002742 C3                CLR     C
   40: 	}
   41: }
002743 22                RET     
----- FUNCTION _BT_CmdFifoIn (END) -------


----- FUNCTION _dmemcpy (BEGIN) -----
 FILE: 'YC_Utilities.c'
   22: void dmemcpy(u8_t *dest, u8_t* src, u8_t len) small
   23: {
002744 8B10              MOV     dest,R3
002746 8A11              MOV     dest+01H,R2
002748 8912              MOV     dest+02H,R1
00274A         ?C0008?YC_UTILITIES:
   24: 	while(len--)
00274A AF16              MOV     R7,len
00274C 1516              DEC     len
00274E EF                MOV     A,R7
00274F 6026              JZ      ?C0010?YC_UTILITIES
   25: 		*dest++ = *src++;
002751 AB13              MOV     R3,src
002753 0515              INC     src+02H
002755 E515              MOV     A,src+02H
002757 AA14              MOV     R2,src+01H
002759 7002              JNZ     ?C0047?YC_UTILITIES
00275B 0514              INC     src+01H
00275D         ?C0047?YC_UTILITIES:
00275D 14                DEC     A
00275E F9                MOV     R1,A
00275F 1200F9            LCALL   ?C?CLDPTR
002762 FF                MOV     R7,A
002763 AB10              MOV     R3,dest
002765 0512              INC     dest+02H
002767 E512              MOV     A,dest+02H
002769 AA11              MOV     R2,dest+01H
00276B 7002              JNZ     ?C0048?YC_UTILITIES
00276D 0511              INC     dest+01H
00276F         ?C0048?YC_UTILITIES:
00276F 14                DEC     A
002770 F9                MOV     R1,A
002771 EF                MOV     A,R7
002772 12013F            LCALL   ?C?CSTPTR
002775 80D3              SJMP    ?C0008?YC_UTILITIES
   26: 	return;
   27: }
002777         ?C0010?YC_UTILITIES:
002777 22                RET     
----- FUNCTION _dmemcpy (END) -------


----- FUNCTION _lxSendRecvDataACK (BEGIN) -----
 FILE: 'lxProtocol.c'
   31: static void lxSendRecvDataACK(u16_t handle, u8_t state)
   32: {
;---- Variable 'handle' assigned to Register 'R2/R3' ----
002778 AB07              MOV     R3,AR7
00277A AA06              MOV     R2,AR6
;---- Variable 'state' assigned to Register 'R5' ----
   33: 	if(notifyValueUUIDA625 != NOTIFY_ENABLE)
   34: 	{
00277C 904C5A            MOV     DPTR,#notifyValueUUIDA625
00277F E0                MOVX    A,@DPTR
002780 6401              XRL     A,#01H
002782 7025              JNZ     ?C0006?LXPROTOCOL
   35: 		return;
   36: 	}
002784         ?C0005?LXPROTOCOL:
   37: 
   38: 	btCmdBuf.len = 0x06;
002784 904C63            MOV     DPTR,#btCmdBuf
002787 7406              MOV     A,#06H
002789 F0                MOVX    @DPTR,A
   39: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
00278A A3                INC     DPTR
00278B 7430              MOV     A,#030H
00278D F0                MOVX    @DPTR,A
   40: 	btCmdBuf.DATA[1] = LO_UINT16(handle);
00278E EB                MOV     A,R3
00278F A3                INC     DPTR
002790 F0                MOVX    @DPTR,A
   41: 	btCmdBuf.DATA[2] = HI_UINT16(handle);
002791 EA                MOV     A,R2
002792 A3                INC     DPTR
002793 F0                MOVX    @DPTR,A
   42: 	btCmdBuf.DATA[3] = ACK_FRAME;
002794 E4                CLR     A
002795 A3                INC     DPTR
002796 F0                MOVX    @DPTR,A
   43: 	btCmdBuf.DATA[4] = RECV_ACK_FRAME_LEN;
002797 A3                INC     DPTR
002798 04                INC     A
002799 F0                MOVX    @DPTR,A
   44: 	btCmdBuf.DATA[5] = state;
00279A A3                INC     DPTR
00279B ED                MOV     A,R5
00279C F0                MOVX    @DPTR,A
   45: 	
   46: 	BT_CmdFifoIn(&btCmdBuf);
00279D 7B01              MOV     R3,#01H
00279F 7A4C              MOV     R2,#HIGH btCmdBuf
0027A1 7963              MOV     R1,#LOW btCmdBuf
0027A3 D123              ACALL   _BT_CmdFifoIn
   47: 	YC_Delay10ms(10);
0027A5 7F0A              MOV     R7,#0AH
0027A7 D10B              ACALL   _YC_Delay10ms
   48: }
0027A9         ?C0006?LXPROTOCOL:
0027A9 22                RET     
----- FUNCTION _lxSendRecvDataACK (END) -------


----- FUNCTION _xmemset (BEGIN) -----
 FILE: 'YC_Utilities.c'
   10: void xmemset(pxbyte addr, u8_t value, u8_t len) small
   11: {
0027AA 8E1D              MOV     addr,R6
0027AC 8F1E              MOV     addr+01H,R7
;---- Variable 'len' assigned to Register 'R3' ----
;---- Variable 'value' assigned to Register 'R5' ----
0027AE         ?C0002?YC_UTILITIES:
   12: 	while(len--)
0027AE AF03              MOV     R7,AR3
0027B0 1B                DEC     R3
0027B1 EF                MOV     A,R7
0027B2 6013              JZ      ?C0004?YC_UTILITIES
   13: 		*addr++ = value;
0027B4 051E              INC     addr+01H
0027B6 E51E              MOV     A,addr+01H
0027B8 AE1D              MOV     R6,addr
0027BA 7002              JNZ     ?C0044?YC_UTILITIES
0027BC 051D              INC     addr
0027BE         ?C0044?YC_UTILITIES:
0027BE 14                DEC     A
0027BF F582              MOV     DPL,A
0027C1 8E83              MOV     DPH,R6
0027C3 ED                MOV     A,R5
0027C4 F0                MOVX    @DPTR,A
0027C5 80E7              SJMP    ?C0002?YC_UTILITIES
   14: 	return;
   15: }
0027C7         ?C0004?YC_UTILITIES:
0027C7 22                RET     
----- FUNCTION _xmemset (END) -------


----- FUNCTION delUserData (BEGIN) -----
 FILE: 'lxProtocol.c'
  370: static void delUserData(void)
  371: {
  372: 	//(mem_register_buf) = DEVICE_UNREGISTERED;
  373: 	//*(mem_le_adv_data + 13) = *(mem_register_buf);
  374: 	xmemset((u8_t *)&deviceInfo, 0, sizeof(DeviceInfo_t));
0027C8 7E4C              MOV     R6,#HIGH deviceInfo
0027CA 7F06              MOV     R7,#LOW deviceInfo
0027CC 7B0A              MOV     R3,#0AH
0027CE E4                CLR     A
0027CF FD                MOV     R5,A
0027D0 F1AA              ACALL   _xmemset
  375: 	QueueInit();
0027D2 1217D3            LCALL   QueueInit
  376: 	*(mem_le_adv_data + 13) = DEVICE_UNREGISTERED;
0027D5 9043E7            MOV     DPTR,#043E7H
0027D8 E4                CLR     A
0027D9 F0                MOVX    @DPTR,A
  377: 	UTCTime = 0;
0027DA 904C5E            MOV     DPTR,#UTCTime
0027DD 12033E            LCALL   ?C?LSTKXDATA
0027E0 00                DB      00H
0027E1 00                DB      00H
0027E2 00                DB      00H
0027E3 00                DB      00H
  378: 	SpiFlashOperator(CS_CMD_WRITE_FLASH);
0027E4 7F41              MOV     R7,#041H
;----                  JMP     _SpiFlashOperator
  379: }
----- FUNCTION delUserData (END) -------


----- FUNCTION _SpiFlashOperator (BEGIN) -----
 FILE: 'lxProtocol.c'
  469: void SpiFlashOperator(u8_t opt)
  470: {
0027E6 904E5E            MOV     DPTR,#opt
0027E9 EF                MOV     A,R7
0027EA F0                MOVX    @DPTR,A
  471: #if 1
  472: 	if(CS_CMD_READ_FLASH == opt)
0027EB BF4016            CJNE    R7,#040H,?C0083?LXPROTOCOL
  473: 	{
  474: 		SPIFlashRead(mem_spiflash_buf, SPIFLASH_DATA_ADDR, SPIFLASH_READ_LENGTH);
0027EE 7B01              MOV     R3,#01H
0027F0 7A4C              MOV     R2,#04CH
0027F2 7900              MOV     R1,#00H
0027F4 904DEC            MOV     DPTR,#?_SPIFlashRead?BYTE+07H
0027F7 744C              MOV     A,#04CH
0027F9 F0                MOVX    @DPTR,A
0027FA 7F00              MOV     R7,#00H
0027FC 7EA0              MOV     R6,#0A0H
0027FE 7D00              MOV     R5,#00H
002800 7C00              MOV     R4,#00H
002802 4103              AJMP    _SPIFlashRead
  475: 	}
002804         ?C0083?LXPROTOCOL:
  476: 	else if(CS_CMD_WRITE_FLASH == opt)
002804 904E5E            MOV     DPTR,#opt
002807 E0                MOVX    A,@DPTR
002808 B44120            CJNE    A,#041H,?C0086?LXPROTOCOL
  477: 	{
  478: 		SPIFlashEraseSector(SPIFLASH_DATA_ADDR);
00280B 7F00              MOV     R7,#00H
00280D 7EA0              MOV     R6,#0A0H
00280F 7D00              MOV     R5,#00H
002811 7C00              MOV     R4,#00H
002813 112C              ACALL   _SPIFlashEraseSector
  479: 		SPIFlashWrite(mem_spiflash_buf, SPIFLASH_DATA_ADDR, SPIFLASH_READ_LENGTH);
002815 7B01              MOV     R3,#01H
002817 7A4C              MOV     R2,#04CH
002819 7900              MOV     R1,#00H
00281B 904DE4            MOV     DPTR,#?_SPIFlashWrite?BYTE+07H
00281E 744C              MOV     A,#04CH
002820 F0                MOVX    @DPTR,A
002821 7F00              MOV     R7,#00H
002823 7EA0              MOV     R6,#0A0H
002825 7D00              MOV     R5,#00H
002827 7C00              MOV     R4,#00H
002829 11B4              ACALL   _SPIFlashWrite
  480: 	}
  481: #else
  482: 	btCmdBuf.len = 1;
  483: 	btCmdBuf.DATA[0] = opt;
  484: 	BT_CmdFifoIn(&btCmdBuf);
  485: 	YC_Delay10ms(10);
  486: #endif
  487: }
00282B         ?C0086?LXPROTOCOL:
00282B 22                RET     
----- FUNCTION _SpiFlashOperator (END) -------


----- FUNCTION _SPIFlashEraseSector (BEGIN) -----
 FILE: 'spiflash.c'
   50: void SPIFlashEraseSector(u32_t addr)
   51: {
00282C 904E2E            MOV     DPTR,#addr
00282F 11A2              ACALL   ?L?COM0001
   52: 	SPIFlashWriteEnable();
   53: 	SPIFlashWaitBusy();
   54: 	*(SF_TX_BUF) = SF_SECTOR_ERASE;
002831 9001BC            MOV     DPTR,#01BCH
002834 7420              MOV     A,#020H
002836 F0                MOVX    @DPTR,A
   55: 	*(SF_TX_BUF+1) = (addr>>16);
002837 904E2E            MOV     DPTR,#addr
00283A E0                MOVX    A,@DPTR
00283B FC                MOV     R4,A
00283C A3                INC     DPTR
00283D E0                MOVX    A,@DPTR
00283E FD                MOV     R5,A
00283F A3                INC     DPTR
002840 E0                MOVX    A,@DPTR
002841 FE                MOV     R6,A
002842 A3                INC     DPTR
002843 E0                MOVX    A,@DPTR
002844 FF                MOV     R7,A
002845 7810              MOV     R0,#010H
002847 12030C            LCALL   ?C?ULSHR
00284A 9001BD            MOV     DPTR,#01BDH
00284D EF                MOV     A,R7
00284E F0                MOVX    @DPTR,A
   56: 	*(SF_TX_BUF+2) = (addr>>8);
00284F 904E2E            MOV     DPTR,#addr
002852 E0                MOVX    A,@DPTR
002853 FC                MOV     R4,A
002854 A3                INC     DPTR
002855 E0                MOVX    A,@DPTR
002856 FD                MOV     R5,A
002857 A3                INC     DPTR
002858 E0                MOVX    A,@DPTR
002859 FE                MOV     R6,A
00285A A3                INC     DPTR
00285B E0                MOVX    A,@DPTR
00285C FF                MOV     R7,A
00285D 7808              MOV     R0,#08H
00285F 12030C            LCALL   ?C?ULSHR
002862 9001BE            MOV     DPTR,#01BEH
002865 EF                MOV     A,R7
002866 F0                MOVX    @DPTR,A
   57: 	*(SF_TX_BUF+3) = (addr&0xff);
002867 904E2E            MOV     DPTR,#addr
00286A E0                MOVX    A,@DPTR
00286B FC                MOV     R4,A
00286C A3                INC     DPTR
00286D E0                MOVX    A,@DPTR
00286E FD                MOV     R5,A
00286F A3                INC     DPTR
002870 E0                MOVX    A,@DPTR
002871 FE                MOV     R6,A
002872 A3                INC     DPTR
002873 E0                MOVX    A,@DPTR
002874 FF                MOV     R7,A
002875 E4                CLR     A
002876 9001BF            MOV     DPTR,#01BFH
002879 EF                MOV     A,R7
00287A F0                MOVX    @DPTR,A
   58: 	REG_SPID_TXLEN = ESWAP(4);
00287B 908088            MOV     DPTR,#08088H
00287E 7404              MOV     A,#04H
002880 F0                MOVX    @DPTR,A
002881 A3                INC     DPTR
002882 E4                CLR     A
002883 F0                MOVX    @DPTR,A
   59: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
002884 A3                INC     DPTR
002885 74BC              MOV     A,#0BCH
002887 F0                MOVX    @DPTR,A
002888 A3                INC     DPTR
002889 7401              MOV     A,#01H
00288B F0                MOVX    @DPTR,A
   60: 	REG_SPID_RXLEN = ESWAP(0);
00288C 90808E            MOV     DPTR,#0808EH
00288F E4                CLR     A
002890 F0                MOVX    @DPTR,A
002891 A3                INC     DPTR
002892 F0                MOVX    @DPTR,A
   61: 	REG_MISC_CTRL = SPID_START;
002893 908006            MOV     DPTR,#08006H
002896 7402              MOV     A,#02H
002898 F0                MOVX    @DPTR,A
002899         ?C0010?SPIFLASH:
   62: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
002899 90812C            MOV     DPTR,#0812CH
00289C E0                MOVX    A,@DPTR
00289D 30E3F9            JNB     ACC.3,?C0010?SPIFLASH
0028A0         ?C0011?SPIFLASH:
   63: 	SPIFlashWaitBusy();
0028A0 8005              SJMP    SPIFlashWaitBusy
   64: }
----- FUNCTION _SPIFlashEraseSector (END) -------


----- FUNCTION ?L?COM0001 (BEGIN) -----
0028A2 120332            LCALL   ?C?LSTXDATA
0028A5 3175              ACALL   SPIFlashWriteEnable
----- FUNCTION SPIFlashWaitBusy (BEGIN) -----
 FILE: 'spiflash.c'
   44: void SPIFlashWaitBusy(void)
   45: {
   46: 	while((SPIFlashReadSR()&0x01) == 0x01) {	//wait for BUSY
0028A7         ?C0007?SPIFLASH:
   47: 		YC_Delay1ms(1);
0028A7 31B9              ACALL   SPIFlashReadSR
0028A9 EF                MOV     A,R7
0028AA 30E006            JNB     ACC.0,?C0009?SPIFLASH
   48: 	}
0028AD 7F01              MOV     R7,#01H
0028AF 31A1              ACALL   _YC_Delay1ms
   49: }
0028B1 80F4              SJMP    ?C0007?SPIFLASH
   50: void SPIFlashEraseSector(u32_t addr)
0028B3         ?C0009?SPIFLASH:
0028B3 22                RET     
----- FUNCTION SPIFlashWaitBusy (END) -------


----- FUNCTION _SPIFlashWrite (BEGIN) -----
 FILE: 'spiflash.c'
   65: void SPIFlashWrite(u8_t *buf, u32_t addr, u8_t len)
   66: {
0028B4 904DDD            MOV     DPTR,#buf
0028B7 EB                MOV     A,R3
0028B8 F0                MOVX    @DPTR,A
0028B9 A3                INC     DPTR
0028BA EA                MOV     A,R2
0028BB F0                MOVX    @DPTR,A
0028BC A3                INC     DPTR
0028BD E9                MOV     A,R1
0028BE F0                MOVX    @DPTR,A
0028BF A3                INC     DPTR
0028C0 11A2              ACALL   ?L?COM0001
   67: 	u8_t i;
   68: 	SPIFlashWriteEnable();
   69: 	SPIFlashWaitBusy();
   70: 	for(i=0;i<len;i++) {
;---- Variable 'i' assigned to Register 'R7' ----
0028C2 E4                CLR     A
0028C3 FF                MOV     R7,A
0028C4         ?C0013?SPIFLASH:
0028C4 904DE4            MOV     DPTR,#len
0028C7 E0                MOVX    A,@DPTR
0028C8 FE                MOV     R6,A
0028C9 EF                MOV     A,R7
0028CA C3                CLR     C
0028CB 9E                SUBB    A,R6
0028CC 5023              JNC     ?C0014?SPIFLASH
   71: 		*(SF_TX_BUF+4+i) = buf[i];
0028CE 904DDD            MOV     DPTR,#buf
0028D1 E0                MOVX    A,@DPTR
0028D2 FB                MOV     R3,A
0028D3 A3                INC     DPTR
0028D4 E0                MOVX    A,@DPTR
0028D5 FA                MOV     R2,A
0028D6 A3                INC     DPTR
0028D7 E0                MOVX    A,@DPTR
0028D8 F9                MOV     R1,A
0028D9 8F82              MOV     DPL,R7
0028DB 758300            MOV     DPH,#00H
0028DE 120112            LCALL   ?C?CLDOPTR
0028E1 FE                MOV     R6,A
0028E2 74C0              MOV     A,#0C0H
0028E4 2F                ADD     A,R7
0028E5 F582              MOV     DPL,A
0028E7 E4                CLR     A
0028E8 3401              ADDC    A,#01H
0028EA F583              MOV     DPH,A
0028EC EE                MOV     A,R6
0028ED F0                MOVX    @DPTR,A
   72: 	}
0028EE 0F                INC     R7
0028EF 80D3              SJMP    ?C0013?SPIFLASH
0028F1         ?C0014?SPIFLASH:
   73: 	*(SF_TX_BUF) = SF_PAGE_PROGRAM;
0028F1 9001BC            MOV     DPTR,#01BCH
0028F4 7402              MOV     A,#02H
0028F6 F0                MOVX    @DPTR,A
   74: 	*(SF_TX_BUF+1) = (addr>>16);
0028F7 904DE0            MOV     DPTR,#addr
0028FA E0                MOVX    A,@DPTR
0028FB FC                MOV     R4,A
0028FC A3                INC     DPTR
0028FD E0                MOVX    A,@DPTR
0028FE FD                MOV     R5,A
0028FF A3                INC     DPTR
002900 E0                MOVX    A,@DPTR
002901 FE                MOV     R6,A
002902 A3                INC     DPTR
002903 E0                MOVX    A,@DPTR
002904 FF                MOV     R7,A
002905 7810              MOV     R0,#010H
002907 12030C            LCALL   ?C?ULSHR
00290A 9001BD            MOV     DPTR,#01BDH
00290D EF                MOV     A,R7
00290E F0                MOVX    @DPTR,A
   75: 	*(SF_TX_BUF+2) = (addr>>8);
00290F 904DE0            MOV     DPTR,#addr
002912 E0                MOVX    A,@DPTR
002913 FC                MOV     R4,A
002914 A3                INC     DPTR
002915 E0                MOVX    A,@DPTR
002916 FD                MOV     R5,A
002917 A3                INC     DPTR
002918 E0                MOVX    A,@DPTR
002919 FE                MOV     R6,A
00291A A3                INC     DPTR
00291B E0                MOVX    A,@DPTR
00291C FF                MOV     R7,A
00291D 7808              MOV     R0,#08H
00291F 12030C            LCALL   ?C?ULSHR
002922 9001BE            MOV     DPTR,#01BEH
002925 EF                MOV     A,R7
002926 F0                MOVX    @DPTR,A
   76: 	*(SF_TX_BUF+3) = (addr&0xff);
002927 904DE0            MOV     DPTR,#addr
00292A E0                MOVX    A,@DPTR
00292B FC                MOV     R4,A
00292C A3                INC     DPTR
00292D E0                MOVX    A,@DPTR
00292E FD                MOV     R5,A
00292F A3                INC     DPTR
002930 E0                MOVX    A,@DPTR
002931 FE                MOV     R6,A
002932 A3                INC     DPTR
002933 E0                MOVX    A,@DPTR
002934 FF                MOV     R7,A
002935 E4                CLR     A
002936 9001BF            MOV     DPTR,#01BFH
002939 EF                MOV     A,R7
00293A F0                MOVX    @DPTR,A
   77: 	REG_SPID_TXLEN = ESWAP(len+4);
00293B 904DE4            MOV     DPTR,#len
00293E E0                MOVX    A,@DPTR
00293F 2404              ADD     A,#04H
002941 FD                MOV     R5,A
002942 E4                CLR     A
002943 33                RLC     A
002944 FC                MOV     R4,A
002945 ED                MOV     A,R5
002946 FA                MOV     R2,A
002947 EC                MOV     A,R4
002948 FF                MOV     R7,A
002949 33                RLC     A
00294A 95E0              SUBB    A,ACC
00294C EA                MOV     A,R2
00294D FE                MOV     R6,A
00294E EF                MOV     A,R7
00294F 908088            MOV     DPTR,#08088H
002952 EE                MOV     A,R6
002953 F0                MOVX    @DPTR,A
002954 A3                INC     DPTR
002955 EF                MOV     A,R7
002956 F0                MOVX    @DPTR,A
   78: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
002957 A3                INC     DPTR
002958 74BC              MOV     A,#0BCH
00295A F0                MOVX    @DPTR,A
00295B A3                INC     DPTR
00295C 7401              MOV     A,#01H
00295E F0                MOVX    @DPTR,A
   79: 	REG_SPID_RXLEN = ESWAP(0);
00295F 90808E            MOV     DPTR,#0808EH
002962 E4                CLR     A
002963 F0                MOVX    @DPTR,A
002964 A3                INC     DPTR
002965 F0                MOVX    @DPTR,A
   80: 	REG_MISC_CTRL = SPID_START;
002966 908006            MOV     DPTR,#08006H
002969 7402              MOV     A,#02H
00296B F0                MOVX    @DPTR,A
00296C         ?C0016?SPIFLASH:
   81: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
00296C 90812C            MOV     DPTR,#0812CH
00296F E0                MOVX    A,@DPTR
002970 30E3F9            JNB     ACC.3,?C0016?SPIFLASH
002973         ?C0017?SPIFLASH:
   82: 	SPIFlashWaitBusy();
002973 01A7              AJMP    SPIFlashWaitBusy
   83: }
----- FUNCTION _SPIFlashWrite (END) -------


----- FUNCTION SPIFlashWriteEnable (BEGIN) -----
 FILE: 'spiflash.c'
   35: void SPIFlashWriteEnable(void)
   36: {
   37: 	REG_SPID_RXLEN = ESWAP(0);
   38: 	REG_SPID_TXLEN = ESWAP(1);
002975 90808E            MOV     DPTR,#0808EH
002978 E4                CLR     A
002979 F0                MOVX    @DPTR,A
00297A A3                INC     DPTR
00297B F0                MOVX    @DPTR,A
   39: 	*SF_TX_BUF = SF_WRITE_ENABLE;
00297C 908088            MOV     DPTR,#08088H
00297F 04                INC     A
002980 F0                MOVX    @DPTR,A
002981 A3                INC     DPTR
002982 E4                CLR     A
002983 F0                MOVX    @DPTR,A
   40: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
002984 9001BC            MOV     DPTR,#01BCH
002987 7406              MOV     A,#06H
002989 F0                MOVX    @DPTR,A
   41: 	REG_MISC_CTRL = SPID_START;
00298A 90808A            MOV     DPTR,#0808AH
00298D 74BC              MOV     A,#0BCH
00298F F0                MOVX    @DPTR,A
002990 A3                INC     DPTR
002991 7401              MOV     A,#01H
002993 F0                MOVX    @DPTR,A
   42: 	while((REG_DMA_STATUS&(1<<3)) == 0);
002994 908006            MOV     DPTR,#08006H
002997 04                INC     A
002998 F0                MOVX    @DPTR,A
002999         ?C0004?SPIFLASH:
   43: }
002999 90812C            MOV     DPTR,#0812CH
00299C E0                MOVX    A,@DPTR
00299D 30E3F9            JNB     ACC.3,?C0004?SPIFLASH
   44: void SPIFlashWaitBusy(void)
0029A0 22                RET     
----- FUNCTION SPIFlashWriteEnable (END) -------


----- FUNCTION _YC_Delay1ms (BEGIN) -----
 FILE: 'YC_Utilities.c'
   51: void YC_Delay1ms(u8_t Time)
   52: {
;---- Variable 'Time' assigned to Register 'R7' ----
   53: 	u16_t j; 
   54: 	for(;Time>0;Time--)
0029A1         ?C0020?YC_UTILITIES:
0029A1 EF                MOV     A,R7
0029A2 D3                SETB    C
0029A3 9400              SUBB    A,#00H
0029A5 4011              JC      ?C0026?YC_UTILITIES
   55: 	{
   56: 		for(j=0;j<1160;j++);
;---- Variable 'j' assigned to Register 'R4/R5' ----
0029A7 E4                CLR     A
0029A8 FD                MOV     R5,A
0029A9 FC                MOV     R4,A
0029AA         ?C0023?YC_UTILITIES:
0029AA 0D                INC     R5
0029AB BD0001            CJNE    R5,#00H,?C0053?YC_UTILITIES
0029AE 0C                INC     R4
0029AF         ?C0053?YC_UTILITIES:
0029AF BC04F8            CJNE    R4,#04H,?C0023?YC_UTILITIES
0029B2 BD88F5            CJNE    R5,#088H,?C0023?YC_UTILITIES
   57: 	}
0029B5         ?C0022?YC_UTILITIES:
0029B5 1F                DEC     R7
0029B6 80E9              SJMP    ?C0020?YC_UTILITIES
   58: }
0029B8         ?C0026?YC_UTILITIES:
0029B8 22                RET     
----- FUNCTION _YC_Delay1ms (END) -------


----- FUNCTION SPIFlashReadSR (BEGIN) -----
 FILE: 'spiflash.c'
   21: u8_t SPIFlashReadSR(void)
   22: {
   23: 	u8_t status;
   24: 	status = 0xff;
0029B9 904E59            MOV     DPTR,#status
0029BC 74FF              MOV     A,#0FFH
0029BE F0                MOVX    @DPTR,A
   25: 	REG_SPID_RXLEN = ESWAP(1);
0029BF 90808E            MOV     DPTR,#0808EH
0029C2 7401              MOV     A,#01H
0029C4 F0                MOVX    @DPTR,A
0029C5 A3                INC     DPTR
0029C6 E4                CLR     A
0029C7 F0                MOVX    @DPTR,A
   26: 	REG_SPID_TXLEN = ESWAP(1);
0029C8 908088            MOV     DPTR,#08088H
0029CB 04                INC     A
0029CC F0                MOVX    @DPTR,A
0029CD A3                INC     DPTR
0029CE E4                CLR     A
0029CF F0                MOVX    @DPTR,A
   27: 	*SF_TX_BUF = SF_READ_STATUS_REG;
0029D0 9001BC            MOV     DPTR,#01BCH
0029D3 7405              MOV     A,#05H
0029D5 F0                MOVX    @DPTR,A
   28: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
0029D6 90808A            MOV     DPTR,#0808AH
0029D9 74BC              MOV     A,#0BCH
0029DB F0                MOVX    @DPTR,A
0029DC A3                INC     DPTR
0029DD 7401              MOV     A,#01H
0029DF F0                MOVX    @DPTR,A
   29: 	REG_SPID_RXADDR = ESWAP((u16_t)(&status));
0029E0 7D59              MOV     R5,#LOW status
0029E2 ED                MOV     A,R5
0029E3 FA                MOV     R2,A
0029E4 744E              MOV     A,#HIGH status
0029E6 FF                MOV     R7,A
0029E7 EA                MOV     A,R2
0029E8 FE                MOV     R6,A
0029E9 EF                MOV     A,R7
0029EA A3                INC     DPTR
0029EB EE                MOV     A,R6
0029EC F0                MOVX    @DPTR,A
0029ED A3                INC     DPTR
0029EE EF                MOV     A,R7
0029EF F0                MOVX    @DPTR,A
   30: 	REG_MISC_CTRL = SPID_START;
0029F0 908006            MOV     DPTR,#08006H
0029F3 7402              MOV     A,#02H
0029F5 F0                MOVX    @DPTR,A
0029F6         ?C0001?SPIFLASH:
   31: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
0029F6 90812C            MOV     DPTR,#0812CH
0029F9 E0                MOVX    A,@DPTR
0029FA 30E3F9            JNB     ACC.3,?C0001?SPIFLASH
0029FD         ?C0002?SPIFLASH:
   32: 	//YC_UARTSendData(&status, 1);
   33: 	return status;
0029FD 904E59            MOV     DPTR,#status
002A00 E0                MOVX    A,@DPTR
002A01 FF                MOV     R7,A
   34: }
002A02 22                RET     
----- FUNCTION SPIFlashReadSR (END) -------


----- FUNCTION _SPIFlashRead (BEGIN) -----
 FILE: 'spiflash.c'
   84: void SPIFlashRead(u8_t *buf, u32_t addr, u8_t len)
   85: {
002A03 904DE8            MOV     DPTR,#addr
002A06 120332            LCALL   ?C?LSTXDATA
;---- Variable 'buf' assigned to Register 'R1/R2/R3' ----
   86: 	REG_SPID_RXLEN = ESWAP(len);
   87: 	REG_SPID_TXLEN = ESWAP(4);
002A09 904DEC            MOV     DPTR,#len
002A0C E0                MOVX    A,@DPTR
002A0D FD                MOV     R5,A
002A0E FE                MOV     R6,A
002A0F E4                CLR     A
002A10 90808E            MOV     DPTR,#0808EH
002A13 EE                MOV     A,R6
002A14 F0                MOVX    @DPTR,A
002A15 A3                INC     DPTR
002A16 E4                CLR     A
002A17 F0                MOVX    @DPTR,A
   88: 	*SF_TX_BUF = SF_READ_DATA;
002A18 908088            MOV     DPTR,#08088H
002A1B 7404              MOV     A,#04H
002A1D F0                MOVX    @DPTR,A
002A1E A3                INC     DPTR
002A1F E4                CLR     A
002A20 F0                MOVX    @DPTR,A
   89: 	*(SF_TX_BUF+1) = (addr>>16);
002A21 9001BC            MOV     DPTR,#01BCH
002A24 7403              MOV     A,#03H
002A26 F0                MOVX    @DPTR,A
   90: 	*(SF_TX_BUF+2) = (addr>>8);
002A27 904DE8            MOV     DPTR,#addr
002A2A E0                MOVX    A,@DPTR
002A2B FC                MOV     R4,A
002A2C A3                INC     DPTR
002A2D E0                MOVX    A,@DPTR
002A2E FD                MOV     R5,A
002A2F A3                INC     DPTR
002A30 E0                MOVX    A,@DPTR
002A31 FE                MOV     R6,A
002A32 A3                INC     DPTR
002A33 E0                MOVX    A,@DPTR
002A34 FF                MOV     R7,A
002A35 7810              MOV     R0,#010H
002A37 12030C            LCALL   ?C?ULSHR
002A3A 9001BD            MOV     DPTR,#01BDH
002A3D EF                MOV     A,R7
002A3E F0                MOVX    @DPTR,A
   91: 	*(SF_TX_BUF+3) = (addr&0xff);
002A3F 904DE8            MOV     DPTR,#addr
002A42 E0                MOVX    A,@DPTR
002A43 FC                MOV     R4,A
002A44 A3                INC     DPTR
002A45 E0                MOVX    A,@DPTR
002A46 FD                MOV     R5,A
002A47 A3                INC     DPTR
002A48 E0                MOVX    A,@DPTR
002A49 FE                MOV     R6,A
002A4A A3                INC     DPTR
002A4B E0                MOVX    A,@DPTR
002A4C FF                MOV     R7,A
002A4D 7808              MOV     R0,#08H
002A4F 12030C            LCALL   ?C?ULSHR
002A52 9001BE            MOV     DPTR,#01BEH
002A55 EF                MOV     A,R7
002A56 F0                MOVX    @DPTR,A
   92: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
002A57 904DE8            MOV     DPTR,#addr
002A5A E0                MOVX    A,@DPTR
002A5B FC                MOV     R4,A
002A5C A3                INC     DPTR
002A5D E0                MOVX    A,@DPTR
002A5E FD                MOV     R5,A
002A5F A3                INC     DPTR
002A60 E0                MOVX    A,@DPTR
002A61 FE                MOV     R6,A
002A62 A3                INC     DPTR
002A63 E0                MOVX    A,@DPTR
002A64 FF                MOV     R7,A
002A65 E4                CLR     A
002A66 9001BF            MOV     DPTR,#01BFH
002A69 EF                MOV     A,R7
002A6A F0                MOVX    @DPTR,A
   93: 	REG_SPID_RXADDR = ESWAP((u16_t)buf);
002A6B 90808A            MOV     DPTR,#0808AH
002A6E 74BC              MOV     A,#0BCH
002A70 F0                MOVX    @DPTR,A
002A71 A3                INC     DPTR
002A72 7401              MOV     A,#01H
002A74 F0                MOVX    @DPTR,A
   94: 	REG_SPID_CTRL  |=  (1<<6);
002A75 E9                MOV     A,R1
002A76 FC                MOV     R4,A
002A77 EA                MOV     A,R2
002A78 FF                MOV     R7,A
002A79 EC                MOV     A,R4
002A7A FE                MOV     R6,A
002A7B EF                MOV     A,R7
002A7C A3                INC     DPTR
002A7D EE                MOV     A,R6
002A7E F0                MOVX    @DPTR,A
002A7F A3                INC     DPTR
002A80 EF                MOV     A,R7
002A81 F0                MOVX    @DPTR,A
   95: 	REG_MISC_CTRL = SPID_START;
002A82 908086            MOV     DPTR,#08086H
002A85 E0                MOVX    A,@DPTR
002A86 4440              ORL     A,#040H
002A88 F0                MOVX    @DPTR,A
   96: 	//spi_read_flash_wait
002A89 908006            MOV     DPTR,#08006H
002A8C 7402              MOV     A,#02H
002A8E F0                MOVX    @DPTR,A
002A8F         ?C0019?SPIFLASH:
   97: 	while(REG_DMA_STATUS&(1<<7));	//waiting for spid write
002A8F 90812C            MOV     DPTR,#0812CH
002A92 E0                MOVX    A,@DPTR
002A93 20E7F9            JB      ACC.7,?C0019?SPIFLASH
002A96         ?C0020?SPIFLASH:
002A96         ?C0021?SPIFLASH:
   98: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
002A96 90812C            MOV     DPTR,#0812CH
002A99 E0                MOVX    A,@DPTR
002A9A 30E3F9            JNB     ACC.3,?C0021?SPIFLASH
   99: 	return;
  100: }
002A9D 22                RET     
----- FUNCTION _SPIFlashRead (END) -------


----- FUNCTION _cal_crc32_multiple (BEGIN) -----
 FILE: 'Crc32.c'
   80: u32_t cal_crc32_multiple(u32_t crc, u8_t *buffer, u32_t size)
   81: {
002A9E 904D91            MOV     DPTR,#crc
002AA1 120332            LCALL   ?C?LSTXDATA
002AA4 904D95            MOV     DPTR,#buffer
002AA7 EB                MOV     A,R3
002AA8 F0                MOVX    @DPTR,A
002AA9 A3                INC     DPTR
002AAA EA                MOV     A,R2
002AAB F0                MOVX    @DPTR,A
002AAC A3                INC     DPTR
002AAD E9                MOV     A,R1
002AAE F0                MOVX    @DPTR,A
   82:     u32_t i;
   83:     for (i = 0; i < size; ++i)
002AAF 904D9C            MOV     DPTR,#i
002AB2 12033E            LCALL   ?C?LSTKXDATA
002AB5 00                DB      00H
002AB6 00                DB      00H
002AB7 00                DB      00H
002AB8 00                DB      00H
002AB9         ?C0001?CRC32:
002AB9 904D98            MOV     DPTR,#size
002ABC E0                MOVX    A,@DPTR
002ABD FC                MOV     R4,A
002ABE A3                INC     DPTR
002ABF E0                MOVX    A,@DPTR
002AC0 FD                MOV     R5,A
002AC1 A3                INC     DPTR
002AC2 E0                MOVX    A,@DPTR
002AC3 FE                MOV     R6,A
002AC4 A3                INC     DPTR
002AC5 E0                MOVX    A,@DPTR
002AC6 FF                MOV     R7,A
002AC7 A3                INC     DPTR
002AC8 E0                MOVX    A,@DPTR
002AC9 F8                MOV     R0,A
002ACA A3                INC     DPTR
002ACB E0                MOVX    A,@DPTR
002ACC F9                MOV     R1,A
002ACD A3                INC     DPTR
002ACE E0                MOVX    A,@DPTR
002ACF FA                MOV     R2,A
002AD0 A3                INC     DPTR
002AD1 E0                MOVX    A,@DPTR
002AD2 FB                MOV     R3,A
002AD3 C3                CLR     C
002AD4 1202FB            LCALL   ?C?ULCMP
002AD7 4002              JC      $ + 4H
002AD9 618A              AJMP    ?C0002?CRC32
   84:     {
   85:     	SPIFlashRead((u8_t *)&crc_table, CRC32_ADDR + (((crc ^ buffer[i]) & 0xff)*4), sizeof(crc_table));
002ADB 904D9C            MOV     DPTR,#i
002ADE E0                MOVX    A,@DPTR
002ADF A3                INC     DPTR
002AE0 E0                MOVX    A,@DPTR
002AE1 A3                INC     DPTR
002AE2 E0                MOVX    A,@DPTR
002AE3 FE                MOV     R6,A
002AE4 A3                INC     DPTR
002AE5 E0                MOVX    A,@DPTR
002AE6 FF                MOV     R7,A
002AE7 904D95            MOV     DPTR,#buffer
002AEA E0                MOVX    A,@DPTR
002AEB FB                MOV     R3,A
002AEC A3                INC     DPTR
002AED E0                MOVX    A,@DPTR
002AEE FA                MOV     R2,A
002AEF A3                INC     DPTR
002AF0 E0                MOVX    A,@DPTR
002AF1 F9                MOV     R1,A
002AF2 8F82              MOV     DPL,R7
002AF4 8E83              MOV     DPH,R6
002AF6 120112            LCALL   ?C?CLDOPTR
002AF9 FF                MOV     R7,A
002AFA E4                CLR     A
002AFB 904D91            MOV     DPTR,#crc
002AFE E0                MOVX    A,@DPTR
002AFF F8                MOV     R0,A
002B00 A3                INC     DPTR
002B01 E0                MOVX    A,@DPTR
002B02 F9                MOV     R1,A
002B03 A3                INC     DPTR
002B04 E0                MOVX    A,@DPTR
002B05 FA                MOV     R2,A
002B06 A3                INC     DPTR
002B07 E0                MOVX    A,@DPTR
002B08 6F                XRL     A,R7
002B09 FF                MOV     R7,A
002B0A EA                MOV     A,R2
002B0B FE                MOV     R6,A
002B0C E9                MOV     A,R1
002B0D FD                MOV     R5,A
002B0E E8                MOV     A,R0
002B0F FC                MOV     R4,A
002B10 EF                MOV     A,R7
002B11 E4                CLR     A
002B12 FE                MOV     R6,A
002B13 FD                MOV     R5,A
002B14 FC                MOV     R4,A
002B15 7B04              MOV     R3,#04H
002B17 FA                MOV     R2,A
002B18 F9                MOV     R1,A
002B19 F8                MOV     R0,A
002B1A 1201DE            LCALL   ?C?LMUL
002B1D E4                CLR     A
002B1E 2F                ADD     A,R7
002B1F FF                MOV     R7,A
002B20 EE                MOV     A,R6
002B21 3480              ADDC    A,#080H
002B23 FE                MOV     R6,A
002B24 E4                CLR     A
002B25 3D                ADDC    A,R5
002B26 FD                MOV     R5,A
002B27 E4                CLR     A
002B28 3C                ADDC    A,R4
002B29 FC                MOV     R4,A
002B2A 904DEC            MOV     DPTR,#?_SPIFlashRead?BYTE+07H
002B2D 7404              MOV     A,#04H
002B2F F0                MOVX    @DPTR,A
002B30 7B01              MOV     R3,#01H
002B32 7A4E              MOV     R2,#HIGH crc_table
002B34 793A              MOV     R1,#LOW crc_table
002B36 5103              ACALL   _SPIFlashRead
   86:         crc = crc_table ^ (crc >> 8);
002B38 904D91            MOV     DPTR,#crc
002B3B E0                MOVX    A,@DPTR
002B3C FC                MOV     R4,A
002B3D A3                INC     DPTR
002B3E E0                MOVX    A,@DPTR
002B3F FD                MOV     R5,A
002B40 A3                INC     DPTR
002B41 E0                MOVX    A,@DPTR
002B42 FE                MOV     R6,A
002B43 A3                INC     DPTR
002B44 E0                MOVX    A,@DPTR
002B45 FF                MOV     R7,A
002B46 7808              MOV     R0,#08H
002B48 12030C            LCALL   ?C?ULSHR
002B4B 904E3A            MOV     DPTR,#crc_table
002B4E E0                MOVX    A,@DPTR
002B4F F8                MOV     R0,A
002B50 A3                INC     DPTR
002B51 E0                MOVX    A,@DPTR
002B52 F9                MOV     R1,A
002B53 A3                INC     DPTR
002B54 E0                MOVX    A,@DPTR
002B55 FA                MOV     R2,A
002B56 A3                INC     DPTR
002B57 E0                MOVX    A,@DPTR
002B58 6F                XRL     A,R7
002B59 FF                MOV     R7,A
002B5A EA                MOV     A,R2
002B5B 6E                XRL     A,R6
002B5C FE                MOV     R6,A
002B5D E9                MOV     A,R1
002B5E 6D                XRL     A,R5
002B5F FD                MOV     R5,A
002B60 E8                MOV     A,R0
002B61 6C                XRL     A,R4
002B62 FC                MOV     R4,A
002B63 904D91            MOV     DPTR,#crc
002B66 120332            LCALL   ?C?LSTXDATA
   87:     }
002B69 904D9C            MOV     DPTR,#i
002B6C E0                MOVX    A,@DPTR
002B6D FC                MOV     R4,A
002B6E A3                INC     DPTR
002B6F E0                MOVX    A,@DPTR
002B70 FD                MOV     R5,A
002B71 A3                INC     DPTR
002B72 E0                MOVX    A,@DPTR
002B73 FE                MOV     R6,A
002B74 A3                INC     DPTR
002B75 E0                MOVX    A,@DPTR
002B76 2401              ADD     A,#01H
002B78 FF                MOV     R7,A
002B79 E4                CLR     A
002B7A 3E                ADDC    A,R6
002B7B FE                MOV     R6,A
002B7C E4                CLR     A
002B7D 3D                ADDC    A,R5
002B7E FD                MOV     R5,A
002B7F E4                CLR     A
002B80 3C                ADDC    A,R4
002B81 FC                MOV     R4,A
002B82 904D9C            MOV     DPTR,#i
002B85 120332            LCALL   ?C?LSTXDATA
002B88 41B9              AJMP    ?C0001?CRC32
002B8A         ?C0002?CRC32:
   88: 
   89:     return crc;
002B8A 904D91            MOV     DPTR,#crc
002B8D E0                MOVX    A,@DPTR
002B8E FC                MOV     R4,A
002B8F A3                INC     DPTR
002B90 E0                MOVX    A,@DPTR
002B91 FD                MOV     R5,A
002B92 A3                INC     DPTR
002B93 E0                MOVX    A,@DPTR
002B94 FE                MOV     R6,A
002B95 A3                INC     DPTR
002B96 E0                MOVX    A,@DPTR
002B97 FF                MOV     R7,A
   90: }
002B98 22                RET     
----- FUNCTION _cal_crc32_multiple (END) -------


----- FUNCTION sendHistoryData (BEGIN) -----
 FILE: 'lxProtocol.c'
  383: static void sendHistoryData(void)
  384: {
  385: 	static u8_t total_len = 0;
  386: 	UserMeasureData *temp = NULL;
002B99 904DC2            MOV     DPTR,#temp
002B9C E4                CLR     A
002B9D F0                MOVX    @DPTR,A
002B9E A3                INC     DPTR
002B9F F0                MOVX    @DPTR,A
002BA0 A3                INC     DPTR
002BA1 F0                MOVX    @DPTR,A
  387: 	u32_t crc32;
  388: 	u8_t i=0;
002BA2 904DC9            MOV     DPTR,#i
002BA5 F0                MOVX    @DPTR,A
  389: 	u8_t pkgCnt; 
  390: 	u8_t size;
  391: 	/*
  392: 	UserMeasureData temp1;
  393: 	temp1.UTCTime[0] = 0x12;
  394: 	temp1.UTCTime[0] = 0x34;
  395: 	temp1.UTCTime[0] = 0x56;
  396: 	temp1.UTCTime[0] = 0x78;
  397: 	temp1.weight = 0xabba;
  398: 	QueuePush(&temp1);
  399: 	QueuePush(&temp1);
  400: 	*/
  401: 	
  402: 	size = historyUserData.size;
002BA6 904C12            MOV     DPTR,#historyUserData+02H
002BA9 E0                MOVX    A,@DPTR
002BAA 904DCB            MOV     DPTR,#size
002BAD F0                MOVX    @DPTR,A
  403: 	pkgCnt = (8 + historyUserData.size * 6 + 4)/18 + (((8 + historyUserData.size * 6 + 4)%18)>0?1:0);
002BAE 75F006            MOV     B,#06H
002BB1 A4                MUL     AB
002BB2 240C              ADD     A,#0CH
002BB4 FF                MOV     R7,A
002BB5 E4                CLR     A
002BB6 35F0              ADDC    A,B
002BB8 FE                MOV     R6,A
002BB9 7C00              MOV     R4,#00H
002BBB 7D12              MOV     R5,#012H
002BBD 120173            LCALL   ?C?UIDIV
002BC0 ED                MOV     A,R5
002BC1 D3                SETB    C
002BC2 9400              SUBB    A,#00H
002BC4 4006              JC      ?C0068?LXPROTOCOL
002BC6 7F01              MOV     R7,#01H
002BC8 7B01              MOV     R3,#01H
002BCA 8004              SJMP    ?C0069?LXPROTOCOL
002BCC         ?C0068?LXPROTOCOL:
002BCC 7F00              MOV     R7,#00H
002BCE 7B00              MOV     R3,#00H
002BD0         ?C0069?LXPROTOCOL:
002BD0 904C12            MOV     DPTR,#historyUserData+02H
002BD3 E0                MOVX    A,@DPTR
002BD4 FA                MOV     R2,A
002BD5 75F006            MOV     B,#06H
002BD8 A4                MUL     AB
002BD9 240C              ADD     A,#0CH
002BDB FF                MOV     R7,A
002BDC E4                CLR     A
002BDD 35F0              ADDC    A,B
002BDF FE                MOV     R6,A
002BE0 7C00              MOV     R4,#00H
002BE2 7D12              MOV     R5,#012H
002BE4 120173            LCALL   ?C?UIDIV
002BE7 EB                MOV     A,R3
002BE8 2F                ADD     A,R7
002BE9 904DCA            MOV     DPTR,#pkgCnt
002BEC F0                MOVX    @DPTR,A
  404: 	total_len = 8 + historyUserData.size * 6 + 4;
002BED EA                MOV     A,R2
002BEE 75F006            MOV     B,#06H
002BF1 A4                MUL     AB
002BF2 240C              ADD     A,#0CH
002BF4 904E5D            MOV     DPTR,#total_len
002BF7 F0                MOVX    @DPTR,A
  405: 	
  406: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
002BF8 904C64            MOV     DPTR,#btCmdBuf+01H
002BFB 7430              MOV     A,#030H
002BFD F0                MOVX    @DPTR,A
  407: 	btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
002BFE A3                INC     DPTR
002BFF 741C              MOV     A,#01CH
002C01 F0                MOVX    @DPTR,A
  408: 	btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
002C02 E4                CLR     A
002C03 A3                INC     DPTR
002C04 F0                MOVX    @DPTR,A
  409: 
  410: 	*(LX_SEND_BUF+0) = LO_UINT16(CMD_SYNC_DATA_RSP);
002C05 9048D2            MOV     DPTR,#048D2H
002C08 7402              MOV     A,#02H
002C0A F0                MOVX    @DPTR,A
  411: 	*(LX_SEND_BUF+1) = HI_UINT16(CMD_SYNC_DATA_RSP);
002C0B A3                INC     DPTR
002C0C 7448              MOV     A,#048H
002C0E F0                MOVX    @DPTR,A
  412: 	*(LX_SEND_BUF+2) = pkgCnt - 1;
002C0F 904DCA            MOV     DPTR,#pkgCnt
002C12 E0                MOVX    A,@DPTR
002C13 FF                MOV     R7,A
002C14 14                DEC     A
002C15 9048D4            MOV     DPTR,#048D4H
002C18 F0                MOVX    @DPTR,A
  413: 	*(LX_SEND_BUF+3) = 0;
002C19 A3                INC     DPTR
002C1A E4                CLR     A
002C1B F0                MOVX    @DPTR,A
  414: 	*(LX_SEND_BUF+4) = WEIGHT_UTC_FLAG;
002C1C A3                INC     DPTR
002C1D 7405              MOV     A,#05H
002C1F F0                MOVX    @DPTR,A
  415: 	*(LX_SEND_BUF+5) = 0;
002C20 A3                INC     DPTR
002C21 E4                CLR     A
002C22 F0                MOVX    @DPTR,A
  416: 	*(LX_SEND_BUF+6) = 0;
002C23 A3                INC     DPTR
002C24 F0                MOVX    @DPTR,A
  417: 	*(LX_SEND_BUF+7) = 0;
002C25 A3                INC     DPTR
002C26 F0                MOVX    @DPTR,A
  418: 	if(pkgCnt > 1)
002C27 EF                MOV     A,R7
002C28 D3                SETB    C
002C29 9401              SUBB    A,#01H
002C2B 5002              JNC     $ + 4H
002C2D A178              AJMP    ?C0070?LXPROTOCOL
  419: 	{
  420: 		for(i=0;i<size;i++)
002C2F E4                CLR     A
002C30 904DC9            MOV     DPTR,#i
002C33 F0                MOVX    @DPTR,A
002C34         ?C0071?LXPROTOCOL:
002C34 904DCB            MOV     DPTR,#size
002C37 E0                MOVX    A,@DPTR
002C38 FF                MOV     R7,A
002C39 904DC9            MOV     DPTR,#i
002C3C E0                MOVX    A,@DPTR
002C3D C3                CLR     C
002C3E 9F                SUBB    A,R7
002C3F 5047              JNC     ?C0072?LXPROTOCOL
  421: 		{
  422: 			temp = QueuePop();
002C41 B1F3              ACALL   QueuePop
002C43 904DC2            MOV     DPTR,#temp
002C46 EB                MOV     A,R3
002C47 F0                MOVX    @DPTR,A
002C48 A3                INC     DPTR
002C49 EA                MOV     A,R2
002C4A F0                MOVX    @DPTR,A
002C4B A3                INC     DPTR
002C4C E9                MOV     A,R1
002C4D F0                MOVX    @DPTR,A
  423: 			dmemcpy(LX_SEND_BUF + (sizeof(UserMeasureData) * i) + 8, (u8_t *)temp, sizeof(UserMeasureData));
002C4E 904DC9            MOV     DPTR,#i
002C51 E0                MOVX    A,@DPTR
002C52 75F006            MOV     B,#06H
002C55 A4                MUL     AB
002C56 24DA              ADD     A,#0DAH
002C58 FF                MOV     R7,A
002C59 E5F0              MOV     A,B
002C5B 3448              ADDC    A,#048H
002C5D FA                MOV     R2,A
002C5E A907              MOV     R1,AR7
002C60 7B01              MOV     R3,#01H
002C62 C003              PUSH    AR3
002C64 C002              PUSH    AR2
002C66 904DC2            MOV     DPTR,#temp
002C69 E0                MOVX    A,@DPTR
002C6A FB                MOV     R3,A
002C6B A3                INC     DPTR
002C6C E0                MOVX    A,@DPTR
002C6D FA                MOV     R2,A
002C6E A3                INC     DPTR
002C6F E0                MOVX    A,@DPTR
002C70 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
002C72 8A14              MOV     ?_dmemcpy?BYTE+04H,R2
002C74 F515              MOV     ?_dmemcpy?BYTE+05H,A
002C76 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
002C79 D002              POP     AR2
002C7B D003              POP     AR3
002C7D 122744            LCALL   _dmemcpy
  424: 		}
002C80 904DC9            MOV     DPTR,#i
002C83 E0                MOVX    A,@DPTR
002C84 04                INC     A
002C85 F0                MOVX    @DPTR,A
002C86 80AC              SJMP    ?C0071?LXPROTOCOL
002C88         ?C0072?LXPROTOCOL:
  425: 		crc32 = cal_crc32_multiple(0, LX_SEND_BUF, total_len - 4);
002C88 7B01              MOV     R3,#01H
002C8A 7A48              MOV     R2,#048H
002C8C 79D2              MOV     R1,#0D2H
002C8E 904E5D            MOV     DPTR,#total_len
002C91 E0                MOVX    A,@DPTR
002C92 24FC              ADD     A,#0FCH
002C94 FF                MOV     R7,A
002C95 E4                CLR     A
002C96 34FF              ADDC    A,#0FFH
002C98 FE                MOV     R6,A
002C99 E4                CLR     A
002C9A FC                MOV     R4,A
002C9B FD                MOV     R5,A
002C9C 904D98            MOV     DPTR,#?_cal_crc32_multiple?BYTE+07H
002C9F 120332            LCALL   ?C?LSTXDATA
002CA2 7F00              MOV     R7,#00H
002CA4 7E00              MOV     R6,#00H
002CA6 7D00              MOV     R5,#00H
002CA8 7C00              MOV     R4,#00H
002CAA 519E              ACALL   _cal_crc32_multiple
002CAC 904DC5            MOV     DPTR,#crc32
002CAF 120332            LCALL   ?C?LSTXDATA
  426: 		dmemcpy(LX_SEND_BUF + (sizeof(UserMeasureData) * i) + 8, (u8_t *)&crc32, sizeof(crc32));
002CB2 904DC9            MOV     DPTR,#i
002CB5 E0                MOVX    A,@DPTR
002CB6 75F006            MOV     B,#06H
002CB9 A4                MUL     AB
002CBA 24DA              ADD     A,#0DAH
002CBC FF                MOV     R7,A
002CBD E5F0              MOV     A,B
002CBF 3448              ADDC    A,#048H
002CC1 FA                MOV     R2,A
002CC2 A907              MOV     R1,AR7
002CC4 7B01              MOV     R3,#01H
002CC6 C003              PUSH    AR3
002CC8 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
002CCA 75144D            MOV     ?_dmemcpy?BYTE+04H,#HIGH crc32
002CCD 7515C5            MOV     ?_dmemcpy?BYTE+05H,#LOW crc32
002CD0 751604            MOV     ?_dmemcpy?BYTE+06H,#04H
002CD3 D003              POP     AR3
002CD5 122744            LCALL   _dmemcpy
  427: 		bigLittleEndianSwap(LX_SEND_BUF, total_len);
002CD8 7B01              MOV     R3,#01H
002CDA 7A48              MOV     R2,#048H
002CDC 79D2              MOV     R1,#0D2H
002CDE 904E5D            MOV     DPTR,#total_len
002CE1 E0                MOVX    A,@DPTR
002CE2 FD                MOV     R5,A
002CE3 7C00              MOV     R4,#00H
002CE5 122211            LCALL   _bigLittleEndianSwap
  428: 		
  429: 		for(i=0;i<pkgCnt;i++)
002CE8 E4                CLR     A
002CE9 904DC9            MOV     DPTR,#i
002CEC F0                MOVX    @DPTR,A
002CED         ?C0074?LXPROTOCOL:
002CED 904DCA            MOV     DPTR,#pkgCnt
002CF0 E0                MOVX    A,@DPTR
002CF1 FF                MOV     R7,A
002CF2 904DC9            MOV     DPTR,#i
002CF5 E0                MOVX    A,@DPTR
002CF6 FE                MOV     R6,A
002CF7 C3                CLR     C
002CF8 9F                SUBB    A,R7
002CF9 4002              JC      $ + 4H
002CFB A1F2              AJMP    ?C0082?LXPROTOCOL
  430: 		{
  431: 			btCmdBuf.DATA[3] = (pkgCnt << 4) + i;
002CFD A3                INC     DPTR
002CFE E0                MOVX    A,@DPTR
002CFF FD                MOV     R5,A
002D00 C4                SWAP    A
002D01 54F0              ANL     A,#0F0H
002D03 FF                MOV     R7,A
002D04 EE                MOV     A,R6
002D05 2F                ADD     A,R7
002D06 904C67            MOV     DPTR,#btCmdBuf+04H
002D09 F0                MOVX    @DPTR,A
  432: 			if(i == pkgCnt -1)
002D0A ED                MOV     A,R5
002D0B 14                DEC     A
002D0C B5060A            CJNE    A,AR6,?C0077?LXPROTOCOL
  433: 			{
  434: 				btCmdBuf.DATA[4] = total_len;
002D0F 904E5D            MOV     DPTR,#total_len
002D12 E0                MOVX    A,@DPTR
002D13 904C68            MOV     DPTR,#btCmdBuf+05H
002D16 F0                MOVX    @DPTR,A
  435: 			}
002D17 800D              SJMP    ?C0078?LXPROTOCOL
002D19         ?C0077?LXPROTOCOL:
  436: 			else
  437: 			{
  438: 				btCmdBuf.DATA[4] = 20 - 2;
002D19 904C68            MOV     DPTR,#btCmdBuf+05H
002D1C 7412              MOV     A,#012H
002D1E F0                MOVX    @DPTR,A
  439: 				total_len -= 18;
002D1F 904E5D            MOV     DPTR,#total_len
002D22 E0                MOVX    A,@DPTR
002D23 24EE              ADD     A,#0EEH
002D25 F0                MOVX    @DPTR,A
  440: 				
  441: 			}
002D26         ?C0078?LXPROTOCOL:
  442: 			btCmdBuf.DATA[7] = pkgCnt - i - 1;
002D26 904DC9            MOV     DPTR,#i
002D29 E0                MOVX    A,@DPTR
002D2A FD                MOV     R5,A
002D2B A3                INC     DPTR
002D2C E0                MOVX    A,@DPTR
002D2D C3                CLR     C
002D2E 9D                SUBB    A,R5
002D2F 14                DEC     A
002D30 904C6B            MOV     DPTR,#btCmdBuf+08H
002D33 F0                MOVX    @DPTR,A
  443: 			btCmdBuf.len = 3 + 2 + btCmdBuf.DATA[4] ;
002D34 904C68            MOV     DPTR,#btCmdBuf+05H
002D37 E0                MOVX    A,@DPTR
002D38 2405              ADD     A,#05H
002D3A 904C63            MOV     DPTR,#btCmdBuf
002D3D F0                MOVX    @DPTR,A
  444: 			dmemcpy(&btCmdBuf.DATA[5], (u8_t *)(LX_SEND_BUF+i*18), btCmdBuf.DATA[4] );
002D3E ED                MOV     A,R5
002D3F 75F012            MOV     B,#012H
002D42 A4                MUL     AB
002D43 24D2              ADD     A,#0D2H
002D45 FF                MOV     R7,A
002D46 E5F0              MOV     A,B
002D48 3448              ADDC    A,#048H
002D4A A907              MOV     R1,AR7
002D4C 751301            MOV     ?_dmemcpy?BYTE+03H,#01H
002D4F F514              MOV     ?_dmemcpy?BYTE+04H,A
002D51 8915              MOV     ?_dmemcpy?BYTE+05H,R1
002D53 904C68            MOV     DPTR,#btCmdBuf+05H
002D56 E0                MOVX    A,@DPTR
002D57 F516              MOV     ?_dmemcpy?BYTE+06H,A
002D59 7B01              MOV     R3,#01H
002D5B 7A4C              MOV     R2,#HIGH btCmdBuf+06H
002D5D 7969              MOV     R1,#LOW btCmdBuf+06H
002D5F 122744            LCALL   _dmemcpy
  445: 			BT_CmdFifoIn(&btCmdBuf);
002D62 7B01              MOV     R3,#01H
002D64 7A4C              MOV     R2,#HIGH btCmdBuf
002D66 7963              MOV     R1,#LOW btCmdBuf
002D68 122623            LCALL   _BT_CmdFifoIn
  446: 			YC_Delay10ms(12);
002D6B 7F0C              MOV     R7,#0CH
002D6D 12260B            LCALL   _YC_Delay10ms
  447: 		}
002D70 904DC9            MOV     DPTR,#i
002D73 E0                MOVX    A,@DPTR
002D74 04                INC     A
002D75 F0                MOVX    @DPTR,A
002D76 81ED              AJMP    ?C0074?LXPROTOCOL
  448: 	}
002D78         ?C0070?LXPROTOCOL:
  449: 	else
  450: 	{
  451: 		btCmdBuf.len = 3 + 2 + SYNC_DATA_HDR_LEN + sizeof(UserMeasureData);
002D78 904C63            MOV     DPTR,#btCmdBuf
002D7B 7413              MOV     A,#013H
002D7D F0                MOVX    @DPTR,A
  452: 		btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
002D7E 904C67            MOV     DPTR,#btCmdBuf+04H
002D81 7410              MOV     A,#010H
002D83 F0                MOVX    @DPTR,A
  453: 		btCmdBuf.DATA[4] = SYNC_DATA_HDR_LEN + sizeof(UserMeasureData);
002D84 A3                INC     DPTR
002D85 740E              MOV     A,#0EH
002D87 F0                MOVX    @DPTR,A
  454: 		temp = QueuePop();
002D88 B1F3              ACALL   QueuePop
002D8A 904DC2            MOV     DPTR,#temp
002D8D EB                MOV     A,R3
002D8E F0                MOVX    @DPTR,A
002D8F A3                INC     DPTR
002D90 EA                MOV     A,R2
002D91 F0                MOVX    @DPTR,A
002D92 A3                INC     DPTR
002D93 E9                MOV     A,R1
002D94 F0                MOVX    @DPTR,A
  455: 		if(temp != NULL)
002D95 4A                ORL     A,R2
002D96 601E              JZ      ?C0080?LXPROTOCOL
  456: 		{
  457: 			dmemcpy(LX_SEND_BUF + 8, (u8_t *)temp, sizeof(UserMeasureData));
002D98 904DC2            MOV     DPTR,#temp
002D9B E0                MOVX    A,@DPTR
002D9C FB                MOV     R3,A
002D9D A3                INC     DPTR
002D9E E0                MOVX    A,@DPTR
002D9F FA                MOV     R2,A
002DA0 A3                INC     DPTR
002DA1 E0                MOVX    A,@DPTR
002DA2 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
002DA4 8A14              MOV     ?_dmemcpy?BYTE+04H,R2
002DA6 F515              MOV     ?_dmemcpy?BYTE+05H,A
002DA8 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
002DAB 7B01              MOV     R3,#01H
002DAD 7A48              MOV     R2,#048H
002DAF 79DA              MOV     R1,#0DAH
002DB1 122744            LCALL   _dmemcpy
  458: 		}
002DB4 800B              SJMP    ?C0081?LXPROTOCOL
002DB6         ?C0080?LXPROTOCOL:
  459: 		else
  460: 		{
  461: 			xmemset(LX_SEND_BUF, 0, sizeof(UserMeasureData));
002DB6 7B06              MOV     R3,#06H
002DB8 E4                CLR     A
002DB9 FD                MOV     R5,A
002DBA 7FD2              MOV     R7,#0D2H
002DBC 7E48              MOV     R6,#048H
002DBE 1227AA            LCALL   _xmemset
  462: 		}
002DC1         ?C0081?LXPROTOCOL:
  463: 		dmemcpy(&(btCmdBuf.DATA[5]), LX_SEND_BUF, btCmdBuf.DATA[4]);
002DC1 751301            MOV     ?_dmemcpy?BYTE+03H,#01H
002DC4 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
002DC7 7515D2            MOV     ?_dmemcpy?BYTE+05H,#0D2H
002DCA 904C68            MOV     DPTR,#btCmdBuf+05H
002DCD E0                MOVX    A,@DPTR
002DCE F516              MOV     ?_dmemcpy?BYTE+06H,A
002DD0 7B01              MOV     R3,#01H
002DD2 7A4C              MOV     R2,#HIGH btCmdBuf+06H
002DD4 7969              MOV     R1,#LOW btCmdBuf+06H
002DD6 122744            LCALL   _dmemcpy
  464: 		bigLittleEndianSwap(&(btCmdBuf.DATA[5]), btCmdBuf.DATA[4]);
002DD9 7B01              MOV     R3,#01H
002DDB 7A4C              MOV     R2,#HIGH btCmdBuf+06H
002DDD 7969              MOV     R1,#LOW btCmdBuf+06H
002DDF 904C68            MOV     DPTR,#btCmdBuf+05H
002DE2 E0                MOVX    A,@DPTR
002DE3 FD                MOV     R5,A
002DE4 7C00              MOV     R4,#00H
002DE6 122211            LCALL   _bigLittleEndianSwap
  465: 		BT_CmdFifoIn(&btCmdBuf);
002DE9 7B01              MOV     R3,#01H
002DEB 7A4C              MOV     R2,#HIGH btCmdBuf
002DED 7963              MOV     R1,#LOW btCmdBuf
002DEF 122623            LCALL   _BT_CmdFifoIn
  466: 	}
  467: }
002DF2         ?C0082?LXPROTOCOL:
002DF2 22                RET     
----- FUNCTION sendHistoryData (END) -------


----- FUNCTION QueuePop (BEGIN) -----
 FILE: 'lxProtocol.c'
  503: static UserMeasureData* QueuePop(void)
  504: {
  505: 	UserMeasureData *temp = NULL;
  506: 	
002DF3 904E50            MOV     DPTR,#temp
002DF6 E4                CLR     A
002DF7 F0                MOVX    @DPTR,A
002DF8 A3                INC     DPTR
002DF9 F0                MOVX    @DPTR,A
002DFA A3                INC     DPTR
002DFB F0                MOVX    @DPTR,A
  507: 	if(QUEUE_IS_EMPTY)
002DFC 904C12            MOV     DPTR,#historyUserData+02H
002DFF E0                MOVX    A,@DPTR
002E00 D3                SETB    C
002E01 9400              SUBB    A,#00H
002E03 5007              JNC     ?C0088?LXPROTOCOL
  508: 		return NULL;
002E05 7B00              MOV     R3,#00H
002E07 7A00              MOV     R2,#00H
002E09 7900              MOV     R1,#00H
002E0B 22                RET     
002E0C         ?C0088?LXPROTOCOL:
  509: 
  510: 	temp = &(historyUserData.measureData[historyUserData.head]);
002E0C 904C10            MOV     DPTR,#historyUserData
002E0F E0                MOVX    A,@DPTR
002E10 75F006            MOV     B,#06H
002E13 A4                MUL     AB
002E14 2413              ADD     A,#LOW historyUserData+03H
002E16 F9                MOV     R1,A
002E17 744C              MOV     A,#HIGH historyUserData+03H
002E19 35F0              ADDC    A,B
002E1B FA                MOV     R2,A
002E1C 904E50            MOV     DPTR,#temp
002E1F 7401              MOV     A,#01H
002E21 F0                MOVX    @DPTR,A
002E22 A3                INC     DPTR
002E23 EA                MOV     A,R2
002E24 F0                MOVX    @DPTR,A
002E25 A3                INC     DPTR
002E26 E9                MOV     A,R1
002E27 F0                MOVX    @DPTR,A
  511: 	historyUserData.head = (historyUserData.head + 1)%MAX_SIZE;
002E28 904C10            MOV     DPTR,#historyUserData
002E2B E0                MOVX    A,@DPTR
002E2C 2401              ADD     A,#01H
002E2E FF                MOV     R7,A
002E2F E4                CLR     A
002E30 33                RLC     A
002E31 FE                MOV     R6,A
002E32 7C00              MOV     R4,#00H
002E34 7D0A              MOV     R5,#0AH
002E36 120173            LCALL   ?C?UIDIV
002E39 ED                MOV     A,R5
002E3A F0                MOVX    @DPTR,A
  512: 	historyUserData.size--;
002E3B 904C12            MOV     DPTR,#historyUserData+02H
002E3E E0                MOVX    A,@DPTR
002E3F 14                DEC     A
002E40 F0                MOVX    @DPTR,A
  513: 
  514: 	return temp;
002E41 904E50            MOV     DPTR,#temp
002E44 E0                MOVX    A,@DPTR
002E45 FB                MOV     R3,A
002E46 A3                INC     DPTR
002E47 E0                MOVX    A,@DPTR
002E48 FA                MOV     R2,A
002E49 A3                INC     DPTR
002E4A E0                MOVX    A,@DPTR
002E4B F9                MOV     R1,A
  515: }
002E4C 22                RET     
----- FUNCTION QueuePop (END) -------


----- FUNCTION _QueuePush (BEGIN) -----
 FILE: 'lxProtocol.c'
  517: void QueuePush(UserMeasureData *userData)
  518: {
002E4D 904E53            MOV     DPTR,#userData
002E50 EB                MOV     A,R3
002E51 F0                MOVX    @DPTR,A
002E52 A3                INC     DPTR
002E53 EA                MOV     A,R2
002E54 F0                MOVX    @DPTR,A
002E55 A3                INC     DPTR
002E56 E9                MOV     A,R1
002E57 F0                MOVX    @DPTR,A
  519: 	if(QUEUE_IS_FULL)
  520: 		QueuePop();
002E58 904C12            MOV     DPTR,#historyUserData+02H
002E5B E0                MOVX    A,@DPTR
002E5C C3                CLR     C
002E5D 940A              SUBB    A,#0AH
002E5F 4002              JC      ?C0090?LXPROTOCOL
  521: 	
002E61 B1F3              ACALL   QueuePop
002E63         ?C0090?LXPROTOCOL:
  522: 	dmemcpy((u8_t *)&(historyUserData.measureData[historyUserData.tail]), (u8_t *)userData, sizeof(UserMeasureData))
>> ;
002E63 904C11            MOV     DPTR,#historyUserData+01H
002E66 E0                MOVX    A,@DPTR
002E67 75F006            MOV     B,#06H
002E6A A4                MUL     AB
002E6B 2413              ADD     A,#LOW historyUserData+03H
002E6D F9                MOV     R1,A
002E6E 744C              MOV     A,#HIGH historyUserData+03H
002E70 35F0              ADDC    A,B
002E72 FA                MOV     R2,A
002E73 7B01              MOV     R3,#01H
002E75 C003              PUSH    AR3
002E77 C002              PUSH    AR2
002E79 904E53            MOV     DPTR,#userData
002E7C E0                MOVX    A,@DPTR
002E7D FB                MOV     R3,A
002E7E A3                INC     DPTR
002E7F E0                MOVX    A,@DPTR
002E80 FA                MOV     R2,A
002E81 A3                INC     DPTR
002E82 E0                MOVX    A,@DPTR
002E83 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
002E85 8A14              MOV     ?_dmemcpy?BYTE+04H,R2
002E87 F515              MOV     ?_dmemcpy?BYTE+05H,A
002E89 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
002E8C D002              POP     AR2
002E8E D003              POP     AR3
002E90 122744            LCALL   _dmemcpy
  523: 	historyUserData.tail = (historyUserData.tail + 1)%MAX_SIZE;
002E93 904C11            MOV     DPTR,#historyUserData+01H
002E96 E0                MOVX    A,@DPTR
002E97 2401              ADD     A,#01H
002E99 FF                MOV     R7,A
002E9A E4                CLR     A
002E9B 33                RLC     A
002E9C FE                MOV     R6,A
002E9D 7C00              MOV     R4,#00H
002E9F 7D0A              MOV     R5,#0AH
002EA1 120173            LCALL   ?C?UIDIV
002EA4 ED                MOV     A,R5
002EA5 F0                MOVX    @DPTR,A
  524: 	historyUserData.size++;
002EA6 A3                INC     DPTR
002EA7 E0                MOVX    A,@DPTR
002EA8 04                INC     A
002EA9 F0                MOVX    @DPTR,A
  525: }
002EAA 22                RET     
----- FUNCTION _QueuePush (END) -------


----- FUNCTION _YC_UtilTimerStop (BEGIN) -----
 FILE: 'YC_Sys.c'
   66: bool YC_UtilTimerStop( u8_t timer_id) large
   67: {
;---- Variable 'timer_id' assigned to Register 'R4' ----
002EAB AC07              MOV     R4,AR7
   68: 	if((timer_id > 8) ||!((YC_UtilTimer.timer_flages >> timer_id) & 1))
002EAD EF                MOV     A,R7
002EAE D3                SETB    C
002EAF 9408              SUBB    A,#08H
002EB1 5011              JNC     ?C0012?YC_SYS
002EB3 904CDB            MOV     DPTR,#YC_UtilTimer
002EB6 E0                MOVX    A,@DPTR
002EB7 FE                MOV     R6,A
002EB8 A807              MOV     R0,AR7
002EBA 08                INC     R0
002EBB 8002              SJMP    ?C0026?YC_SYS
002EBD         ?C0025?YC_SYS:
002EBD C3                CLR     C
002EBE 13                RRC     A
002EBF         ?C0026?YC_SYS:
002EBF D8FC              DJNZ    R0,?C0025?YC_SYS
002EC1 20E002            JB      ACC.0,?C0011?YC_SYS
002EC4         ?C0012?YC_SYS:
   69: 		return false;
002EC4 C3                CLR     C
002EC5 22                RET     
002EC6         ?C0011?YC_SYS:
   70: 	YC_UtilTimer.timer_flages &= ~( 1<< timer_id);
002EC6 AF04              MOV     R7,AR4
002EC8 7401              MOV     A,#01H
002ECA A807              MOV     R0,AR7
002ECC 08                INC     R0
002ECD 8002              SJMP    ?C0028?YC_SYS
002ECF         ?C0027?YC_SYS:
002ECF C3                CLR     C
002ED0 33                RLC     A
002ED1         ?C0028?YC_SYS:
002ED1 D8FC              DJNZ    R0,?C0027?YC_SYS
002ED3 F4                CPL     A
002ED4 5E                ANL     A,R6
002ED5 904CDB            MOV     DPTR,#YC_UtilTimer
002ED8 F0                MOVX    @DPTR,A
   71: 	YC_UtilTimer.callback[timer_id] = 0;
002ED9 EC                MOV     A,R4
002EDA 75F003            MOV     B,#03H
002EDD A4                MUL     AB
002EDE 24DC              ADD     A,#LOW YC_UtilTimer+01H
002EE0 F582              MOV     DPL,A
002EE2 E4                CLR     A
002EE3 344C              ADDC    A,#HIGH YC_UtilTimer+01H
002EE5 F583              MOV     DPH,A
002EE7 E4                CLR     A
002EE8 F0                MOVX    @DPTR,A
002EE9 A3                INC     DPTR
002EEA F0                MOVX    @DPTR,A
002EEB A3                INC     DPTR
002EEC F0                MOVX    @DPTR,A
   72: 	YC_UtilTimer.timer_end[timer_id] = 0;
002EED EC                MOV     A,R4
002EEE 25E0              ADD     A,ACC
002EF0 25E0              ADD     A,ACC
002EF2 24F4              ADD     A,#LOW YC_UtilTimer+019H
002EF4 F582              MOV     DPL,A
002EF6 E4                CLR     A
002EF7 344C              ADDC    A,#HIGH YC_UtilTimer+019H
002EF9 F583              MOV     DPH,A
002EFB 12033E            LCALL   ?C?LSTKXDATA
002EFE 00                DB      00H
002EFF 00                DB      00H
002F00 00                DB      00H
002F01 00                DB      00H
   73: 	return true;
002F02 D3                SETB    C
   74: }
002F03 22                RET     
----- FUNCTION _YC_UtilTimerStop (END) -------


----- FUNCTION YC_UtilTimerProcess (BEGIN) -----
 FILE: 'YC_Sys.c'
   76: void YC_UtilTimerProcess(void) small
   77: {
   78: 	u8_t i;
   79: #if 0
   80: 	if(YC_UtilTimer.last_timer > (YC_CLK_N + 0x1000)){
   81: 		for(i = 0; i < YC_UTIL_TIMER_NUM; ++i){
   82: 			if((YC_UtilTimer.timer_flages >> i) & 1){
   83: 				YC_UtilTimer.timer_end[i] -= YC_UtilTimer.last_timer;
   84: 			}
   85: 		}
   86: 	}
   87: 	YC_UtilTimer.last_timer = YC_CLK_N;
   88: 	for(i = 0; i < YC_UTIL_TIMER_NUM; ++i){
   89: 		if((YC_UtilTimer.timer_flages >> i) & 1){
   90: 			if(YC_UtilTimer.timer_end[i] < YC_CLK_N){
   91: 				YC_UtilTimer.timer_flages &=~( 1<< i); // clear the flag
   92: 				YC_UtilTimer.callback[i](i);			
   93: 			}
   94: 		}
   95: 	}
   96: #else
   97: 	YC_UtilTimer.last_timer = YC_CLK_N;
002F04 908101            MOV     DPTR,#08101H
002F07 E0                MOVX    A,@DPTR
002F08 FF                MOV     R7,A
002F09 E4                CLR     A
002F0A FC                MOV     R4,A
002F0B FD                MOV     R5,A
002F0C FE                MOV     R6,A
002F0D 7808              MOV     R0,#08H
002F0F 12031F            LCALL   ?C?LSHL
002F12 A804              MOV     R0,AR4
002F14 A905              MOV     R1,AR5
002F16 AA06              MOV     R2,AR6
002F18 AB07              MOV     R3,AR7
002F1A 908100            MOV     DPTR,#08100H
002F1D E0                MOVX    A,@DPTR
002F1E FF                MOV     R7,A
002F1F E4                CLR     A
002F20 EB                MOV     A,R3
002F21 4F                ORL     A,R7
002F22 FF                MOV     R7,A
002F23 EA                MOV     A,R2
002F24 FE                MOV     R6,A
002F25 E9                MOV     A,R1
002F26 FD                MOV     R5,A
002F27 E8                MOV     A,R0
002F28 FC                MOV     R4,A
002F29 C004              PUSH    AR4
002F2B C005              PUSH    AR5
002F2D C006              PUSH    AR6
002F2F C007              PUSH    AR7
002F31 908102            MOV     DPTR,#08102H
002F34 E0                MOVX    A,@DPTR
002F35 FF                MOV     R7,A
002F36 E4                CLR     A
002F37 FC                MOV     R4,A
002F38 FD                MOV     R5,A
002F39 FE                MOV     R6,A
002F3A 7810              MOV     R0,#010H
002F3C 12031F            LCALL   ?C?LSHL
002F3F D003              POP     AR3
002F41 D002              POP     AR2
002F43 D001              POP     AR1
002F45 D000              POP     AR0
002F47 EF                MOV     A,R7
002F48 4B                ORL     A,R3
002F49 FF                MOV     R7,A
002F4A EE                MOV     A,R6
002F4B 4A                ORL     A,R2
002F4C FE                MOV     R6,A
002F4D ED                MOV     A,R5
002F4E 49                ORL     A,R1
002F4F FD                MOV     R5,A
002F50 EC                MOV     A,R4
002F51 48                ORL     A,R0
002F52 FC                MOV     R4,A
002F53 C004              PUSH    AR4
002F55 C005              PUSH    AR5
002F57 C006              PUSH    AR6
002F59 C007              PUSH    AR7
002F5B A3                INC     DPTR
002F5C E0                MOVX    A,@DPTR
002F5D FF                MOV     R7,A
002F5E E4                CLR     A
002F5F FC                MOV     R4,A
002F60 FD                MOV     R5,A
002F61 FE                MOV     R6,A
002F62 7818              MOV     R0,#018H
002F64 12031F            LCALL   ?C?LSHL
002F67 D003              POP     AR3
002F69 D002              POP     AR2
002F6B D001              POP     AR1
002F6D D000              POP     AR0
002F6F EF                MOV     A,R7
002F70 4B                ORL     A,R3
002F71 FF                MOV     R7,A
002F72 EE                MOV     A,R6
002F73 4A                ORL     A,R2
002F74 FE                MOV     R6,A
002F75 ED                MOV     A,R5
002F76 49                ORL     A,R1
002F77 FD                MOV     R5,A
002F78 EC                MOV     A,R4
002F79 48                ORL     A,R0
002F7A FC                MOV     R4,A
002F7B 904D14            MOV     DPTR,#YC_UtilTimer+039H
002F7E 120332            LCALL   ?C?LSTXDATA
   98: 	for(i = 0; i < YC_UTIL_TIMER_NUM; ++i){
002F81 E4                CLR     A
002F82 F51F              MOV     i,A
002F84         ?C0014?YC_SYS:
   99: 		if((YC_UtilTimer.timer_flages >> i) & 1){
002F84 AF1F              MOV     R7,i
002F86 904CDB            MOV     DPTR,#YC_UtilTimer
002F89 E0                MOVX    A,@DPTR
002F8A FE                MOV     R6,A
002F8B A807              MOV     R0,AR7
002F8D 08                INC     R0
002F8E 8002              SJMP    ?C0030?YC_SYS
002F90         ?C0029?YC_SYS:
002F90 C3                CLR     C
002F91 13                RRC     A
002F92         ?C0030?YC_SYS:
002F92 D8FC              DJNZ    R0,?C0029?YC_SYS
002F94 20E003            JB      ACC.0,$ + 6H
002F97 02303C            LJMP    ?C0016?YC_SYS
  100: 			if((YC_UtilTimer.timer_end[i] < YC_UtilTimer.last_timer) || 
002F9A E51F              MOV     A,i
002F9C 25E0              ADD     A,ACC
002F9E 25E0              ADD     A,ACC
002FA0 24F4              ADD     A,#LOW YC_UtilTimer+019H
002FA2 F582              MOV     DPL,A
002FA4 E4                CLR     A
002FA5 344C              ADDC    A,#HIGH YC_UtilTimer+019H
002FA7 F583              MOV     DPH,A
002FA9 E0                MOVX    A,@DPTR
002FAA FC                MOV     R4,A
002FAB A3                INC     DPTR
002FAC E0                MOVX    A,@DPTR
002FAD FD                MOV     R5,A
002FAE A3                INC     DPTR
002FAF E0                MOVX    A,@DPTR
002FB0 FE                MOV     R6,A
002FB1 A3                INC     DPTR
002FB2 E0                MOVX    A,@DPTR
002FB3 FF                MOV     R7,A
002FB4 904D14            MOV     DPTR,#YC_UtilTimer+039H
002FB7 E0                MOVX    A,@DPTR
002FB8 F8                MOV     R0,A
002FB9 A3                INC     DPTR
002FBA E0                MOVX    A,@DPTR
002FBB F9                MOV     R1,A
002FBC A3                INC     DPTR
002FBD E0                MOVX    A,@DPTR
002FBE FA                MOV     R2,A
002FBF A3                INC     DPTR
002FC0 E0                MOVX    A,@DPTR
002FC1 FB                MOV     R3,A
002FC2 D3                SETB    C
002FC3 1202FB            LCALL   ?C?ULCMP
002FC6 503E              JNC     ?C0019?YC_SYS
002FC8 E51F              MOV     A,i
002FCA 25E0              ADD     A,ACC
002FCC 25E0              ADD     A,ACC
002FCE 24F4              ADD     A,#LOW YC_UtilTimer+019H
002FD0 F582              MOV     DPL,A
002FD2 E4                CLR     A
002FD3 344C              ADDC    A,#HIGH YC_UtilTimer+019H
002FD5 F583              MOV     DPH,A
002FD7 E0                MOVX    A,@DPTR
002FD8 FC                MOV     R4,A
002FD9 A3                INC     DPTR
002FDA E0                MOVX    A,@DPTR
002FDB FD                MOV     R5,A
002FDC A3                INC     DPTR
002FDD E0                MOVX    A,@DPTR
002FDE FE                MOV     R6,A
002FDF A3                INC     DPTR
002FE0 E0                MOVX    A,@DPTR
002FE1 FF                MOV     R7,A
002FE2 904D14            MOV     DPTR,#YC_UtilTimer+039H
002FE5 E0                MOVX    A,@DPTR
002FE6 F8                MOV     R0,A
002FE7 A3                INC     DPTR
002FE8 E0                MOVX    A,@DPTR
002FE9 A3                INC     DPTR
002FEA E0                MOVX    A,@DPTR
002FEB A3                INC     DPTR
002FEC E0                MOVX    A,@DPTR
002FED C3                CLR     C
002FEE EF                MOV     A,R7
002FEF 9B                SUBB    A,R3
002FF0 FF                MOV     R7,A
002FF1 EE                MOV     A,R6
002FF2 9A                SUBB    A,R2
002FF3 FE                MOV     R6,A
002FF4 ED                MOV     A,R5
002FF5 99                SUBB    A,R1
002FF6 FD                MOV     R5,A
002FF7 EC                MOV     A,R4
002FF8 98                SUBB    A,R0
002FF9 FC                MOV     R4,A
002FFA E4                CLR     A
002FFB FB                MOV     R3,A
002FFC 7A10              MOV     R2,#010H
002FFE F9                MOV     R1,A
002FFF F8                MOV     R0,A
003000 C3                CLR     C
003001 1202FB            LCALL   ?C?ULCMP
003004 5036              JNC     ?C0016?YC_SYS
003006         ?C0019?YC_SYS:
  101: 			   (YC_UtilTimer.timer_end[i]  - YC_UtilTimer.last_timer > 0x1000)){
  102: 				YC_UtilTimer.timer_flages &=~( 1<< i); // clear the flag
003006 904CDB            MOV     DPTR,#YC_UtilTimer
003009 E0                MOVX    A,@DPTR
00300A FF                MOV     R7,A
00300B AE1F              MOV     R6,i
00300D 7401              MOV     A,#01H
00300F A806              MOV     R0,AR6
003011 08                INC     R0
003012 8002              SJMP    ?C0032?YC_SYS
003014         ?C0031?YC_SYS:
003014 C3                CLR     C
003015 33                RLC     A
003016         ?C0032?YC_SYS:
003016 D8FC              DJNZ    R0,?C0031?YC_SYS
003018 F4                CPL     A
003019 5F                ANL     A,R7
00301A 904CDB            MOV     DPTR,#YC_UtilTimer
00301D F0                MOVX    @DPTR,A
  103: 				YC_UtilTimer.callback[i](i);			
00301E E51F              MOV     A,i
003020 75F003            MOV     B,#03H
003023 A4                MUL     AB
003024 24DC              ADD     A,#LOW YC_UtilTimer+01H
003026 F582              MOV     DPL,A
003028 E4                CLR     A
003029 344C              ADDC    A,#HIGH YC_UtilTimer+01H
00302B F583              MOV     DPH,A
00302D E0                MOVX    A,@DPTR
00302E A3                INC     DPTR
00302F E0                MOVX    A,@DPTR
003030 FA                MOV     R2,A
003031 A3                INC     DPTR
003032 E0                MOVX    A,@DPTR
003033 F582              MOV     DPL,A
003035 8A83              MOV     DPH,R2
003037 AF1F              MOV     R7,i
003039 1203C6            LCALL   ?C?ICALL2
  104: 			}
  105: 		}
  106: 	}
00303C         ?C0016?YC_SYS:
00303C 051F              INC     i
00303E E51F              MOV     A,i
003040 C3                CLR     C
003041 9408              SUBB    A,#08H
003043 5003              JNC     $ + 5H
003045 022F84            LJMP    ?C0014?YC_SYS
  107: #endif
  108: 	return;
  109: }
003048 22                RET     
----- FUNCTION YC_UtilTimerProcess (END) -------


----- FUNCTION _BT_EventFifoOut (BEGIN) -----
 FILE: 'BT_IPC.c'
   43: void BT_EventFifoOut(BT_EVENTFIFO_t * event)
   44: {
003049 904E24            MOV     DPTR,#event
00304C EB                MOV     A,R3
00304D F0                MOVX    @DPTR,A
00304E A3                INC     DPTR
00304F EA                MOV     A,R2
003050 F0                MOVX    @DPTR,A
003051 A3                INC     DPTR
003052 E9                MOV     A,R1
003053 F0                MOVX    @DPTR,A
   45: 	u16_t new_rprt,i;
   46: 	u8_t event_prefix;
   47: 	if(BT_GetEvtFifoDepth()>2)
003054 314C              ACALL   BT_GetEvtFifoDepth
003056 EF                MOV     A,R7
003057 D3                SETB    C
003058 9402              SUBB    A,#02H
00305A 5002              JNC     $ + 4H
00305C 213D              AJMP    ?C0011?BT_IPC
   48: 	{//event is not empty
   49: 		new_rprt = ESWAP(BT_EventRptr);
00305E 904A05            MOV     DPTR,#BT_EventRptr+01H
003061 E0                MOVX    A,@DPTR
003062 FC                MOV     R4,A
003063 904A04            MOV     DPTR,#BT_EventRptr
003066 E0                MOVX    A,@DPTR
003067 FF                MOV     R7,A
003068 EC                MOV     A,R4
003069 FE                MOV     R6,A
00306A EF                MOV     A,R7
00306B 904E27            MOV     DPTR,#new_rprt
00306E EE                MOV     A,R6
00306F F0                MOVX    @DPTR,A
003070 A3                INC     DPTR
003071 EF                MOV     A,R7
003072 F0                MOVX    @DPTR,A
   50: 		event_prefix = HREAD(new_rprt++);
003073 904E27            MOV     DPTR,#new_rprt
003076 E4                CLR     A
003077 75F001            MOV     B,#01H
00307A 1201C8            LCALL   ?C?ILDIX
00307D 85F082            MOV     DPL,B
003080 F583              MOV     DPH,A
003082 E0                MOVX    A,@DPTR
003083 FF                MOV     R7,A
;---- Variable 'event_prefix' assigned to Register 'R7' ----
   51: 		if(event_prefix == CS_PREFIX_EVENT) {
003084 64C6              XRL     A,#0C6H
003086 6002              JZ      $ + 4H
003088 2118              AJMP    ?C0012?BT_IPC
   52: 			event->len = HREAD(new_rprt++);
00308A 904E27            MOV     DPTR,#new_rprt
00308D 75F001            MOV     B,#01H
003090 1201C8            LCALL   ?C?ILDIX
003093 85F082            MOV     DPL,B
003096 F583              MOV     DPH,A
003098 E0                MOVX    A,@DPTR
003099 FF                MOV     R7,A
00309A 904E24            MOV     DPTR,#event
00309D E0                MOVX    A,@DPTR
00309E FB                MOV     R3,A
00309F A3                INC     DPTR
0030A0 E0                MOVX    A,@DPTR
0030A1 FA                MOV     R2,A
0030A2 A3                INC     DPTR
0030A3 E0                MOVX    A,@DPTR
0030A4 F9                MOV     R1,A
0030A5 EF                MOV     A,R7
0030A6 12013F            LCALL   ?C?CSTPTR
   53: 			if( new_rprt == (mem_event_buf_end+1) )
0030A9 904E27            MOV     DPTR,#new_rprt
0030AC E0                MOVX    A,@DPTR
0030AD B4500F            CJNE    A,#050H,?C0013?BT_IPC
0030B0 A3                INC     DPTR
0030B1 E0                MOVX    A,@DPTR
0030B2 B4000A            CJNE    A,#00H,?C0013?BT_IPC
   54: 			{
   55: 				new_rprt = mem_event_buf;
0030B5 904E27            MOV     DPTR,#new_rprt
0030B8 744F              MOV     A,#04FH
0030BA F0                MOVX    @DPTR,A
0030BB A3                INC     DPTR
0030BC 7480              MOV     A,#080H
0030BE F0                MOVX    @DPTR,A
   56: 			}
0030BF         ?C0013?BT_IPC:
   57: 			for(i=0;i<event->len;i++)
;---- Variable 'i' assigned to Register 'R6/R7' ----
0030BF E4                CLR     A
0030C0 FF                MOV     R7,A
0030C1 FE                MOV     R6,A
0030C2         ?C0014?BT_IPC:
0030C2 904E24            MOV     DPTR,#event
0030C5 E0                MOVX    A,@DPTR
0030C6 FB                MOV     R3,A
0030C7 A3                INC     DPTR
0030C8 E0                MOVX    A,@DPTR
0030C9 FA                MOV     R2,A
0030CA A3                INC     DPTR
0030CB E0                MOVX    A,@DPTR
0030CC F9                MOV     R1,A
0030CD 1200F9            LCALL   ?C?CLDPTR
0030D0 FD                MOV     R5,A
0030D1 C3                CLR     C
0030D2 EF                MOV     A,R7
0030D3 9D                SUBB    A,R5
0030D4 EE                MOV     A,R6
0030D5 9400              SUBB    A,#00H
0030D7 504E              JNC     ?C0018?BT_IPC
   58: 			{
   59: 				event->DATA[i] = HREAD(new_rprt++);
0030D9 904E27            MOV     DPTR,#new_rprt
0030DC E4                CLR     A
0030DD 75F001            MOV     B,#01H
0030E0 1201C8            LCALL   ?C?ILDIX
0030E3 85F082            MOV     DPL,B
0030E6 F583              MOV     DPH,A
0030E8 E0                MOVX    A,@DPTR
0030E9 FD                MOV     R5,A
0030EA E9                MOV     A,R1
0030EB 2401              ADD     A,#01H
0030ED F9                MOV     R1,A
0030EE E4                CLR     A
0030EF 3A                ADDC    A,R2
0030F0 FA                MOV     R2,A
0030F1 E9                MOV     A,R1
0030F2 2F                ADD     A,R7
0030F3 F9                MOV     R1,A
0030F4 EA                MOV     A,R2
0030F5 3E                ADDC    A,R6
0030F6 FA                MOV     R2,A
0030F7 ED                MOV     A,R5
0030F8 12013F            LCALL   ?C?CSTPTR
   60: 				if( new_rprt == (mem_event_buf_end+1) )
0030FB 904E27            MOV     DPTR,#new_rprt
0030FE E0                MOVX    A,@DPTR
0030FF B4500F            CJNE    A,#050H,?C0016?BT_IPC
003102 A3                INC     DPTR
003103 E0                MOVX    A,@DPTR
003104 B4000A            CJNE    A,#00H,?C0016?BT_IPC
   61: 				{
   62: 					new_rprt = mem_event_buf;
003107 904E27            MOV     DPTR,#new_rprt
00310A 744F              MOV     A,#04FH
00310C F0                MOVX    @DPTR,A
00310D A3                INC     DPTR
00310E 7480              MOV     A,#080H
003110 F0                MOVX    @DPTR,A
   63: 				}
   64: 			}
003111         ?C0016?BT_IPC:
003111 0F                INC     R7
003112 BF0001            CJNE    R7,#00H,?C0033?BT_IPC
003115 0E                INC     R6
003116         ?C0033?BT_IPC:
003116 80AA              SJMP    ?C0014?BT_IPC
   65: 		}
003118         ?C0012?BT_IPC:
   66: 		else {
   67: 			event->len = 0;
003118 904E24            MOV     DPTR,#event
00311B E0                MOVX    A,@DPTR
00311C FB                MOV     R3,A
00311D A3                INC     DPTR
00311E E0                MOVX    A,@DPTR
00311F FA                MOV     R2,A
003120 A3                INC     DPTR
003121 E0                MOVX    A,@DPTR
003122 F9                MOV     R1,A
003123 E4                CLR     A
003124 12013F            LCALL   ?C?CSTPTR
   68: 		}
003127         ?C0018?BT_IPC:
   69: 		BT_EventRptr = ESWAP(new_rprt);
003127 904E27            MOV     DPTR,#new_rprt
00312A E0                MOVX    A,@DPTR
00312B FC                MOV     R4,A
00312C A3                INC     DPTR
00312D E0                MOVX    A,@DPTR
00312E FA                MOV     R2,A
00312F EC                MOV     A,R4
003130 FF                MOV     R7,A
003131 EA                MOV     A,R2
003132 FE                MOV     R6,A
003133 EF                MOV     A,R7
003134 904A04            MOV     DPTR,#BT_EventRptr
003137 EE                MOV     A,R6
003138 F0                MOVX    @DPTR,A
003139 A3                INC     DPTR
00313A EF                MOV     A,R7
00313B F0                MOVX    @DPTR,A
   70: 	}
00313C 22                RET     
00313D         ?C0011?BT_IPC:
   71: 	else
   72: 	{
   73: 		event->len = 0;
00313D 904E24            MOV     DPTR,#event
003140 E0                MOVX    A,@DPTR
003141 FB                MOV     R3,A
003142 A3                INC     DPTR
003143 E0                MOVX    A,@DPTR
003144 FA                MOV     R2,A
003145 A3                INC     DPTR
003146 E0                MOVX    A,@DPTR
003147 F9                MOV     R1,A
003148 E4                CLR     A
003149 02013F            LJMP    ?C?CSTPTR
   74: 	}
----- FUNCTION _BT_EventFifoOut (END) -------


----- FUNCTION BT_GetEvtFifoDepth (BEGIN) -----
 FILE: 'BT_IPC.c'
   87: u8_t BT_GetEvtFifoDepth(void)
   88: {
   89: 	u16_t wptr,rptr,len;
   90: 	wptr = ESWAP(BT_EventWptr);
00314C 904A07            MOV     DPTR,#BT_EventWptr+01H
00314F E0                MOVX    A,@DPTR
003150 FC                MOV     R4,A
003151 904A06            MOV     DPTR,#BT_EventWptr
003154 E0                MOVX    A,@DPTR
003155 FF                MOV     R7,A
003156 EC                MOV     A,R4
003157 EF                MOV     A,R7
;---- Variable 'wptr' assigned to Register 'R4/R5' ----
003158 FD                MOV     R5,A
   91: 	rptr = ESWAP(BT_EventRptr);
003159 904A05            MOV     DPTR,#BT_EventRptr+01H
00315C E0                MOVX    A,@DPTR
00315D FA                MOV     R2,A
00315E 904A04            MOV     DPTR,#BT_EventRptr
003161 E0                MOVX    A,@DPTR
003162 FF                MOV     R7,A
003163 EA                MOV     A,R2
003164 FE                MOV     R6,A
003165 EF                MOV     A,R7
;---- Variable 'rptr' assigned to Register 'R6/R7' ----
   92: 	len = (wptr + BT_EVT_BUF_LEN - rptr)&(BT_EVT_BUF_LEN-1);
003166 ED                MOV     A,R5
003167 2480              ADD     A,#080H
003169 FD                MOV     R5,A
00316A E4                CLR     A
00316B 3C                ADDC    A,R4
00316C FC                MOV     R4,A
00316D C3                CLR     C
00316E ED                MOV     A,R5
00316F 9F                SUBB    A,R7
003170 FF                MOV     R7,A
003171 EC                MOV     A,R4
003172 9E                SUBB    A,R6
003173 7E00              MOV     R6,#00H
003175 EF                MOV     A,R7
003176 547F              ANL     A,#07FH
003178 FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R6/R7' ----
   93: 	return len&0xff;
   94: }
003179 22                RET     
----- FUNCTION BT_GetEvtFifoDepth (END) -------


----- FUNCTION BT_GetCmdFifoDepth (BEGIN) -----
 FILE: 'BT_IPC.c'
   78: u8_t BT_GetCmdFifoDepth(void)
   79: {
   80: 	u16_t wptr,rptr,len;
   81: 	wptr = ESWAP(BT_CmdWptr);
00317A 904A03            MOV     DPTR,#BT_CmdWptr+01H
00317D E0                MOVX    A,@DPTR
00317E FC                MOV     R4,A
00317F 904A02            MOV     DPTR,#BT_CmdWptr
003182 E0                MOVX    A,@DPTR
003183 FF                MOV     R7,A
003184 EC                MOV     A,R4
003185 EF                MOV     A,R7
;---- Variable 'wptr' assigned to Register 'R4/R5' ----
003186 FD                MOV     R5,A
   82: 	rptr = ESWAP(BT_CmdRptr);
003187 904A01            MOV     DPTR,#BT_CmdRptr+01H
00318A E0                MOVX    A,@DPTR
00318B FA                MOV     R2,A
00318C 904A00            MOV     DPTR,#BT_CmdRptr
00318F E0                MOVX    A,@DPTR
003190 FF                MOV     R7,A
003191 EA                MOV     A,R2
003192 FE                MOV     R6,A
003193 EF                MOV     A,R7
;---- Variable 'rptr' assigned to Register 'R6/R7' ----
   83: 	len = (wptr + BT_CMD_BUF_LEN - rptr)&(BT_CMD_BUF_LEN-1);
003194 ED                MOV     A,R5
003195 2480              ADD     A,#080H
003197 FD                MOV     R5,A
003198 E4                CLR     A
003199 3C                ADDC    A,R4
00319A FC                MOV     R4,A
00319B C3                CLR     C
00319C ED                MOV     A,R5
00319D 9F                SUBB    A,R7
00319E FF                MOV     R7,A
00319F EC                MOV     A,R4
0031A0 9E                SUBB    A,R6
0031A1 7E00              MOV     R6,#00H
0031A3 EF                MOV     A,R7
0031A4 547F              ANL     A,#07FH
0031A6 FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R6/R7' ----
   84: 	return len&0xff;
   85: }
0031A7 22                RET     
----- FUNCTION BT_GetCmdFifoDepth (END) -------


----- FUNCTION BT_CmdFifoEmpty (BEGIN) -----
 FILE: 'BT_IPC.c'
   96: bool BT_CmdFifoEmpty(void)
   97: {
   98: 	if(BT_GetCmdFifoDepth()==0)
   99: 	{
0031A8 317A              ACALL   BT_GetCmdFifoDepth
0031AA EF                MOV     A,R7
0031AB 7002              JNZ     ?C0023?BT_IPC
  100: 		return true;
  101: 	}
0031AD D3                SETB    C
0031AE 22                RET     
  102: 	return false;
0031AF         ?C0023?BT_IPC:
  103: }
0031AF C3                CLR     C
  104: 
0031B0 22                RET     
----- FUNCTION BT_CmdFifoEmpty (END) -------


----- FUNCTION _BT_CmdFifoFull (BEGIN) -----
 FILE: 'BT_IPC.c'
  105: bool BT_CmdFifoFull(BT_CMDFIFO_t *pFIFO)
  106: {
0031B1 904E44            MOV     DPTR,#pFIFO
0031B4 EB                MOV     A,R3
0031B5 F0                MOVX    @DPTR,A
0031B6 A3                INC     DPTR
0031B7 EA                MOV     A,R2
0031B8 F0                MOVX    @DPTR,A
0031B9 A3                INC     DPTR
0031BA E9                MOV     A,R1
0031BB F0                MOVX    @DPTR,A
  107: 	if((BT_GetCmdFifoDepth()+pFIFO->len+1) > BT_CMD_BUF_LEN)
  108: 		return true;
0031BC 317A              ACALL   BT_GetCmdFifoDepth
0031BE 904E44            MOV     DPTR,#pFIFO
0031C1 E0                MOVX    A,@DPTR
0031C2 FB                MOV     R3,A
0031C3 A3                INC     DPTR
0031C4 E0                MOVX    A,@DPTR
0031C5 FA                MOV     R2,A
0031C6 A3                INC     DPTR
0031C7 E0                MOVX    A,@DPTR
0031C8 F9                MOV     R1,A
0031C9 1200F9            LCALL   ?C?CLDPTR
0031CC 2F                ADD     A,R7
0031CD FF                MOV     R7,A
0031CE E4                CLR     A
0031CF 33                RLC     A
0031D0 CF                XCH     A,R7
0031D1 2401              ADD     A,#01H
0031D3 CF                XCH     A,R7
0031D4 3400              ADDC    A,#00H
0031D6 FE                MOV     R6,A
0031D7 D3                SETB    C
0031D8 EF                MOV     A,R7
0031D9 9480              SUBB    A,#080H
0031DB EE                MOV     A,R6
0031DC 6480              XRL     A,#080H
0031DE 9480              SUBB    A,#080H
0031E0 4002              JC      ?C0025?BT_IPC
  109: 	return false;
0031E2 D3                SETB    C
0031E3 22                RET     
0031E4         ?C0025?BT_IPC:
  110: }
0031E4 C3                CLR     C
  110: 
0031E5 22                RET     
----- FUNCTION _BT_CmdFifoFull (END) -------


----- FUNCTION YC_Ice_break (BEGIN) -----
 FILE: 'YC_Utilities.c'
    4: void YC_Ice_break()
    5: {
    6: 	CPUB_ICE_CTRL = 1;
    7: 	return;
0031E6 908280            MOV     DPTR,#08280H
0031E9 7401              MOV     A,#01H
0031EB F0                MOVX    @DPTR,A
    8: }
0031EC 22                RET     
----- FUNCTION YC_Ice_break (END) -------


----- FUNCTION _cmemcpy (BEGIN) -----
 FILE: 'YC_Utilities.c'
   28: void cmemcpy(pxbyte dest, const u8_t* src, u8_t len) small
   29: {
0031ED 8E21              MOV     dest,R6
0031EF 8F22              MOV     dest+01H,R7
0031F1 8B23              MOV     src,R3
0031F3 8A24              MOV     src+01H,R2
0031F5 8925              MOV     src+02H,R1
0031F7         ?C0011?YC_UTILITIES:
   30: 	while(len--)
0031F7 AF26              MOV     R7,len
0031F9 1526              DEC     len
0031FB EF                MOV     A,R7
0031FC 6025              JZ      ?C0013?YC_UTILITIES
   31: 		*dest++ = (u8_t)(*src++);
0031FE AB23              MOV     R3,src
003200 0525              INC     src+02H
003202 E525              MOV     A,src+02H
003204 AA24              MOV     R2,src+01H
003206 7002              JNZ     ?C0049?YC_UTILITIES
003208 0524              INC     src+01H
00320A         ?C0049?YC_UTILITIES:
00320A 14                DEC     A
00320B F9                MOV     R1,A
00320C 1200F9            LCALL   ?C?CLDPTR
00320F FF                MOV     R7,A
003210 0522              INC     dest+01H
003212 E522              MOV     A,dest+01H
003214 AC21              MOV     R4,dest
003216 7002              JNZ     ?C0050?YC_UTILITIES
003218 0521              INC     dest
00321A         ?C0050?YC_UTILITIES:
00321A 14                DEC     A
00321B F582              MOV     DPL,A
00321D 8C83              MOV     DPH,R4
00321F EF                MOV     A,R7
003220 F0                MOVX    @DPTR,A
003221 80D4              SJMP    ?C0011?YC_UTILITIES
   32: 	return;
   33: }
003223         ?C0013?YC_UTILITIES:
003223 22                RET     
----- FUNCTION _cmemcpy (END) -------


----- FUNCTION _YC_MemCheckEmpty (BEGIN) -----
 FILE: 'YC_Utilities.c'
   34: bool YC_MemCheckEmpty(u8_t *mem, u8_t len)
   35: {
003224 904E32            MOV     DPTR,#mem
003227 EB                MOV     A,R3
003228 F0                MOVX    @DPTR,A
003229 A3                INC     DPTR
00322A EA                MOV     A,R2
00322B F0                MOVX    @DPTR,A
00322C A3                INC     DPTR
00322D E9                MOV     A,R1
00322E F0                MOVX    @DPTR,A
00322F A3                INC     DPTR
003230 ED                MOV     A,R5
003231 F0                MOVX    @DPTR,A
   36: 	int i;
   37: 	for(i=0;i<len;i++)
;---- Variable 'i' assigned to Register 'R6/R7' ----
003232 E4                CLR     A
003233 FF                MOV     R7,A
003234 FE                MOV     R6,A
003235         ?C0014?YC_UTILITIES:
003235 904E35            MOV     DPTR,#len
003238 E0                MOVX    A,@DPTR
003239 FD                MOV     R5,A
00323A C3                CLR     C
00323B EF                MOV     A,R7
00323C 9D                SUBB    A,R5
00323D 7480              MOV     A,#080H
00323F F8                MOV     R0,A
003240 6E                XRL     A,R6
003241 98                SUBB    A,R0
003242 5034              JNC     ?C0015?YC_UTILITIES
   38: 	{
   39: 		if(mem[i])
003244 904E32            MOV     DPTR,#mem
003247 E0                MOVX    A,@DPTR
003248 FB                MOV     R3,A
003249 A3                INC     DPTR
00324A E0                MOVX    A,@DPTR
00324B FA                MOV     R2,A
00324C A3                INC     DPTR
00324D E0                MOVX    A,@DPTR
00324E F9                MOV     R1,A
00324F 8F82              MOV     DPL,R7
003251 8E83              MOV     DPH,R6
003253 120112            LCALL   ?C?CLDOPTR
003256 FD                MOV     R5,A
003257 701F              JNZ     ?C0015?YC_UTILITIES
   40: 		{
   41: 			break;
   42: 		}
003259         ?C0017?YC_UTILITIES:
   43: 		if(i==(len-1)&&mem[i]==0)
003259 904E35            MOV     DPTR,#len
00325C E0                MOVX    A,@DPTR
00325D 24FF              ADD     A,#0FFH
00325F FB                MOV     R3,A
003260 E4                CLR     A
003261 34FF              ADDC    A,#0FFH
003263 FA                MOV     R2,A
003264 EB                MOV     A,R3
003265 B50709            CJNE    A,AR7,?C0016?YC_UTILITIES
003268 EA                MOV     A,R2
003269 B50605            CJNE    A,AR6,?C0016?YC_UTILITIES
00326C ED                MOV     A,R5
00326D 7002              JNZ     ?C0016?YC_UTILITIES
   44: 		{
   45: 			return 0;
00326F C3                CLR     C
003270 22                RET     
   46: 		}
   47: 	}
003271         ?C0016?YC_UTILITIES:
003271 0F                INC     R7
003272 BF0001            CJNE    R7,#00H,?C0052?YC_UTILITIES
003275 0E                INC     R6
003276         ?C0052?YC_UTILITIES:
003276 80BD              SJMP    ?C0014?YC_UTILITIES
003278         ?C0015?YC_UTILITIES:
   48: 	return 1;
003278 D3                SETB    C
   49: }
003279 22                RET     
----- FUNCTION _YC_MemCheckEmpty (END) -------


----- FUNCTION _YC_Delay1S (BEGIN) -----
 FILE: 'YC_Utilities.c'
   69: void YC_Delay1S(u8_t Time)
   70: {
;---- Variable 'Time' assigned to Register 'R7' ----
   71: 	u16_t j,k;
   72: 	for(;Time>0;Time--)
00327A         ?C0034?YC_UTILITIES:
00327A EF                MOV     A,R7
00327B D3                SETB    C
00327C 9400              SUBB    A,#00H
00327E 401F              JC      ?C0043?YC_UTILITIES
   73: 	{
   74: 		for(j=0;j<1000;j++)
;---- Variable 'j' assigned to Register 'R4/R5' ----
003280 E4                CLR     A
003281 FD                MOV     R5,A
003282 FC                MOV     R4,A
003283         ?C0037?YC_UTILITIES:
   75: 		{
   76: 			for(k=0;k<1150;k++);
;---- Variable 'k' assigned to Register 'R2/R3' ----
003283 E4                CLR     A
003284 FB                MOV     R3,A
003285 FA                MOV     R2,A
003286         ?C0040?YC_UTILITIES:
003286 0B                INC     R3
003287 BB0001            CJNE    R3,#00H,?C0055?YC_UTILITIES
00328A 0A                INC     R2
00328B         ?C0055?YC_UTILITIES:
00328B BA04F8            CJNE    R2,#04H,?C0040?YC_UTILITIES
00328E BB7EF5            CJNE    R3,#07EH,?C0040?YC_UTILITIES
   77: 		}
003291         ?C0039?YC_UTILITIES:
003291 0D                INC     R5
003292 BD0001            CJNE    R5,#00H,?C0056?YC_UTILITIES
003295 0C                INC     R4
003296         ?C0056?YC_UTILITIES:
003296 BC03EA            CJNE    R4,#03H,?C0037?YC_UTILITIES
003299 BDE8E7            CJNE    R5,#0E8H,?C0037?YC_UTILITIES
   78: 	}
00329C         ?C0036?YC_UTILITIES:
00329C 1F                DEC     R7
00329D 80DB              SJMP    ?C0034?YC_UTILITIES
   79: }
00329F         ?C0043?YC_UTILITIES:
00329F 22                RET     
----- FUNCTION _YC_Delay1S (END) -------


----- FUNCTION CS_Scale_WeightProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  198: void CS_Scale_WeightProc(void)
  199: {
  200: 	u16_t	R_AD_BUF;
  201: 	
  202: 	R_AD_BUF = CS_Scale_GetDeltaAD(GetDeltaAD);
0032A0 E4                CLR     A
0032A1 FF                MOV     R7,A
0032A2 D1DC              ACALL   _CS_Scale_GetDeltaAD
;---- Variable 'R_AD_BUF' assigned to Register 'R6/R7' ----
  203: 	R_AD_BUF = CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
0032A4 AD07              MOV     R5,AR7
0032A6 AC06              MOV     R4,AR6
0032A8 E4                CLR     A
0032A9 FF                MOV     R7,A
0032AA F1A5              ACALL   _CS_Scale_AdcFilter
  204: 	CS_Scale_GetWeight(R_AD_BUF);
0032AC 120FDD            LCALL   _CS_Scale_GetWeight
  205: 	CS_Scale_ZeroProc(RunningZero,0);
0032AF E4                CLR     A
0032B0 FD                MOV     R5,A
0032B1 FC                MOV     R4,A
0032B2 7F07              MOV     R7,#07H
0032B4 919A              ACALL   _CS_Scale_ZeroProc
  206: 	CS_Scale_LockProc(LockProcRun);
0032B6 E4                CLR     A
0032B7 FF                MOV     R7,A
0032B8 912D              ACALL   _CS_Scale_LockProc
  207: 	CS_Scale_JudgeOverLoad(0);
0032BA E4                CLR     A
0032BB FF                MOV     R7,A
0032BC 1217EF            LCALL   _CS_Scale_JudgeOverLoad
  208: 	CS_Scale_JudgeLowBat(0);
0032BF E4                CLR     A
0032C0 FF                MOV     R7,A
0032C1 1217DD            LCALL   _CS_Scale_JudgeLowBat
  209: 	CS_Scale_JudgeSteady(JudgeSteadyRun);
0032C4 E4                CLR     A
0032C5 FF                MOV     R7,A
;----                  JMP     _CS_Scale_JudgeSteady
  210: 	
----- FUNCTION CS_Scale_WeightProc (END) -------


----- FUNCTION _CS_Scale_JudgeSteady (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  672: u8_t CS_Scale_JudgeSteady(u8_t option)
  673: {
;---- Variable 'option' assigned to Register 'R7' ----
  674: 
  675: 	u16_t	weight_temp;
  676: 	u16_t	R_Weight_Temp;
  677: 	static	u16_t xdata R_Weight_kg_old;
  678: 	static	u8_t	  xdata R_Weight_SameTimes;
  679: 	static	u8_t xdata B_Weight_SmallSteady;		//小重量稳定标志
  680: 	static	u8_t xdata B_Weight_HeavySteady;	//大重量稳定标志
  681: 	
  682: 	if(option==ResetSteady)
0032C6 EF                MOV     A,R7
0032C7 B4010B            CJNE    A,#01H,?C0092?CS_SCALE_PROC
  683: 		{
  684: 		R_Weight_SameTimes = 0;
0032CA E4                CLR     A
0032CB 904CA4            MOV     DPTR,#R_Weight_SameTimes
0032CE F0                MOVX    @DPTR,A
  685: 		B_Weight_SmallSteady = false;
0032CF A3                INC     DPTR
0032D0 F0                MOVX    @DPTR,A
  686: 		B_Weight_HeavySteady = false;
0032D1 A3                INC     DPTR
0032D2 F0                MOVX    @DPTR,A
  687: 		return 0;
0032D3 FF                MOV     R7,A
0032D4 22                RET     
  688: 		}	
0032D5         ?C0092?CS_SCALE_PROC:
  689: 
  690: 	if(option==GetIfSmallSteady)
0032D5 EF                MOV     A,R7
0032D6 B40206            CJNE    A,#02H,?C0094?CS_SCALE_PROC
  691: 		return B_Weight_SmallSteady;
0032D9 904CA5            MOV     DPTR,#B_Weight_SmallSteady
0032DC E0                MOVX    A,@DPTR
0032DD FF                MOV     R7,A
0032DE 22                RET     
0032DF         ?C0094?CS_SCALE_PROC:
  692: 
  693: 	if(option==GetIfHeavySteady)
0032DF EF                MOV     A,R7
0032E0 B40306            CJNE    A,#03H,?C0095?CS_SCALE_PROC
  694: 		return B_Weight_HeavySteady;
0032E3 904CA6            MOV     DPTR,#B_Weight_HeavySteady
0032E6 E0                MOVX    A,@DPTR
0032E7 FF                MOV     R7,A
0032E8 22                RET     
0032E9         ?C0095?CS_SCALE_PROC:
  695: 	
  696: 	if(CS_Scale_LockProc(GetIfLock)==false)
0032E9 7F02              MOV     R7,#02H
0032EB 912D              ACALL   _CS_Scale_LockProc
0032ED EF                MOV     A,R7
0032EE 6002              JZ      $ + 4H
0032F0 812A              AJMP    ?C0096?CS_SCALE_PROC
  697: 		{
  698: 	
  699: 		if(R_UnitWeight.origin > R_Weight_kg_old)
0032F2 904CA2            MOV     DPTR,#R_Weight_kg_old
0032F5 E0                MOVX    A,@DPTR
0032F6 FE                MOV     R6,A
0032F7 A3                INC     DPTR
0032F8 E0                MOVX    A,@DPTR
0032F9 FF                MOV     R7,A
0032FA 904CC9            MOV     DPTR,#R_UnitWeight
0032FD E0                MOVX    A,@DPTR
0032FE FC                MOV     R4,A
0032FF A3                INC     DPTR
003300 E0                MOVX    A,@DPTR
003301 FD                MOV     R5,A
003302 D3                SETB    C
003303 9F                SUBB    A,R7
003304 EC                MOV     A,R4
003305 9E                SUBB    A,R6
003306 400E              JC      ?C0097?CS_SCALE_PROC
  700: 			weight_temp = R_UnitWeight.origin -R_Weight_kg_old;
003308 ED                MOV     A,R5
003309 9F                SUBB    A,R7
00330A FF                MOV     R7,A
00330B EC                MOV     A,R4
00330C 9E                SUBB    A,R6
00330D 904E36            MOV     DPTR,#weight_temp
003310 F0                MOVX    @DPTR,A
003311 A3                INC     DPTR
003312 EF                MOV     A,R7
003313 F0                MOVX    @DPTR,A
003314 801B              SJMP    ?C0098?CS_SCALE_PROC
003316         ?C0097?CS_SCALE_PROC:
  701: 		else
  702: 			weight_temp = R_Weight_kg_old -R_UnitWeight.origin;
003316 904CC9            MOV     DPTR,#R_UnitWeight
003319 E0                MOVX    A,@DPTR
00331A FE                MOV     R6,A
00331B A3                INC     DPTR
00331C E0                MOVX    A,@DPTR
00331D FF                MOV     R7,A
00331E C3                CLR     C
00331F 904CA3            MOV     DPTR,#R_Weight_kg_old+01H
003322 E0                MOVX    A,@DPTR
003323 9F                SUBB    A,R7
003324 FF                MOV     R7,A
003325 904CA2            MOV     DPTR,#R_Weight_kg_old
003328 E0                MOVX    A,@DPTR
003329 9E                SUBB    A,R6
00332A 904E36            MOV     DPTR,#weight_temp
00332D F0                MOVX    @DPTR,A
00332E A3                INC     DPTR
00332F EF                MOV     A,R7
003330 F0                MOVX    @DPTR,A
003331         ?C0098?CS_SCALE_PROC:
  703: 		
  704: 		if(weight_temp <  CS_Scale_SameWeightRange)
003331 C3                CLR     C
003332 904E37            MOV     DPTR,#weight_temp+01H
003335 E0                MOVX    A,@DPTR
003336 9414              SUBB    A,#014H
003338 904E36            MOV     DPTR,#weight_temp
00333B E0                MOVX    A,@DPTR
00333C 9400              SUBB    A,#00H
00333E 500E              JNC     ?C0099?CS_SCALE_PROC
  705: 			{
  706: 			if(R_Weight_SameTimes<255)
003340 904CA4            MOV     DPTR,#R_Weight_SameTimes
003343 E0                MOVX    A,@DPTR
003344 C3                CLR     C
003345 94FF              SUBB    A,#0FFH
003347 500A              JNC     ?C0101?CS_SCALE_PROC
  707: 				R_Weight_SameTimes++;
003349 E0                MOVX    A,@DPTR
00334A 04                INC     A
00334B F0                MOVX    @DPTR,A
  708: 			}
00334C 8005              SJMP    ?C0101?CS_SCALE_PROC
00334E         ?C0099?CS_SCALE_PROC:
  709: 		else
  710: 			R_Weight_SameTimes = 0;
00334E E4                CLR     A
00334F 904CA4            MOV     DPTR,#R_Weight_SameTimes
003352 F0                MOVX    @DPTR,A
003353         ?C0101?CS_SCALE_PROC:
  711: 	
  712: 		
  713: 		R_Weight_kg_old = R_UnitWeight.origin;
003353 904CC9            MOV     DPTR,#R_UnitWeight
003356 E0                MOVX    A,@DPTR
003357 FE                MOV     R6,A
003358 A3                INC     DPTR
003359 E0                MOVX    A,@DPTR
00335A FF                MOV     R7,A
00335B 904CA2            MOV     DPTR,#R_Weight_kg_old
00335E EE                MOV     A,R6
00335F F0                MOVX    @DPTR,A
003360 A3                INC     DPTR
003361 EF                MOV     A,R7
003362 F0                MOVX    @DPTR,A
  714: 
  715: 		B_Weight_SmallSteady = false;
003363 E4                CLR     A
003364 904CA5            MOV     DPTR,#B_Weight_SmallSteady
003367 F0                MOVX    @DPTR,A
  716: 		B_Weight_HeavySteady = false;
003368 A3                INC     DPTR
003369 F0                MOVX    @DPTR,A
  717: 		
  718: 		if(R_UnitWeight.origin < CS_Scale_MinLockWeight)
00336A C3                CLR     C
00336B EF                MOV     A,R7
00336C 94FA              SUBB    A,#0FAH
00336E EE                MOV     A,R6
00336F 9400              SUBB    A,#00H
003371 5010              JNC     ?C0102?CS_SCALE_PROC
  719: 			{
  720: 			if(R_Weight_SameTimes>CS_SmallWeight_Steadytimes)
003373 904CA4            MOV     DPTR,#R_Weight_SameTimes
003376 E0                MOVX    A,@DPTR
003377 9406              SUBB    A,#06H
003379 5002              JNC     $ + 4H
00337B 812A              AJMP    ?C0096?CS_SCALE_PROC
  721: 				B_Weight_SmallSteady = true;		
00337D A3                INC     DPTR
00337E 7401              MOV     A,#01H
003380 F0                MOVX    @DPTR,A
  722: 			}
003381 812A              AJMP    ?C0096?CS_SCALE_PROC
003383         ?C0102?CS_SCALE_PROC:
  723: 		else
  724: 			{			
  725: 			if(R_Weight_SameTimes>CS_BigWeight_Steadytimes)
003383 904CA4            MOV     DPTR,#R_Weight_SameTimes
003386 E0                MOVX    A,@DPTR
003387 D3                SETB    C
003388 9406              SUBB    A,#06H
00338A 5002              JNC     $ + 4H
00338C 812A              AJMP    ?C0096?CS_SCALE_PROC
  726: 				{
  727: 				B_Weight_HeavySteady = true;	
00338E 904CA6            MOV     DPTR,#B_Weight_HeavySteady
003391 7401              MOV     A,#01H
003393 F0                MOVX    @DPTR,A
  728: 
  729: 				if(R_UnitWeight.origin>R_Weight_Mem)
003394 904CC3            MOV     DPTR,#R_Weight_Mem
003397 E0                MOVX    A,@DPTR
003398 FE                MOV     R6,A
003399 A3                INC     DPTR
00339A E0                MOVX    A,@DPTR
00339B FF                MOV     R7,A
00339C 904CC9            MOV     DPTR,#R_UnitWeight
00339F E0                MOVX    A,@DPTR
0033A0 FC                MOV     R4,A
0033A1 A3                INC     DPTR
0033A2 E0                MOVX    A,@DPTR
0033A3 FD                MOV     R5,A
0033A4 D3                SETB    C
0033A5 9F                SUBB    A,R7
0033A6 EC                MOV     A,R4
0033A7 9E                SUBB    A,R6
0033A8 400E              JC      ?C0106?CS_SCALE_PROC
  730: 				R_Weight_Temp = R_UnitWeight.origin -R_Weight_Mem;
0033AA ED                MOV     A,R5
0033AB 9F                SUBB    A,R7
0033AC FF                MOV     R7,A
0033AD EC                MOV     A,R4
0033AE 9E                SUBB    A,R6
0033AF 904E38            MOV     DPTR,#R_Weight_Temp
0033B2 F0                MOVX    @DPTR,A
0033B3 A3                INC     DPTR
0033B4 EF                MOV     A,R7
0033B5 F0                MOVX    @DPTR,A
0033B6 801B              SJMP    ?C0107?CS_SCALE_PROC
0033B8         ?C0106?CS_SCALE_PROC:
  731: 				else
  732: 				R_Weight_Temp = R_Weight_Mem - R_UnitWeight.origin;
0033B8 904CC9            MOV     DPTR,#R_UnitWeight
0033BB E0                MOVX    A,@DPTR
0033BC FE                MOV     R6,A
0033BD A3                INC     DPTR
0033BE E0                MOVX    A,@DPTR
0033BF FF                MOV     R7,A
0033C0 C3                CLR     C
0033C1 904CC4            MOV     DPTR,#R_Weight_Mem+01H
0033C4 E0                MOVX    A,@DPTR
0033C5 9F                SUBB    A,R7
0033C6 FF                MOV     R7,A
0033C7 904CC3            MOV     DPTR,#R_Weight_Mem
0033CA E0                MOVX    A,@DPTR
0033CB 9E                SUBB    A,R6
0033CC 904E38            MOV     DPTR,#R_Weight_Temp
0033CF F0                MOVX    @DPTR,A
0033D0 A3                INC     DPTR
0033D1 EF                MOV     A,R7
0033D2 F0                MOVX    @DPTR,A
0033D3         ?C0107?CS_SCALE_PROC:
  733: 
  734: 				//在记忆范围内记忆
  735: 				if(R_UnitWeight.origin > ScaleStartMemoryWeight)
0033D3 D3                SETB    C
0033D4 904CCA            MOV     DPTR,#R_UnitWeight+01H
0033D7 E0                MOVX    A,@DPTR
0033D8 9458              SUBB    A,#058H
0033DA 904CC9            MOV     DPTR,#R_UnitWeight
0033DD E0                MOVX    A,@DPTR
0033DE 9402              SUBB    A,#02H
0033E0 401D              JC      ?C0108?CS_SCALE_PROC
  736: 					{
  737: 					if(R_Weight_Temp<CS_MemoryRange)
0033E2 904E39            MOV     DPTR,#R_Weight_Temp+01H
0033E5 E0                MOVX    A,@DPTR
0033E6 9419              SUBB    A,#019H
0033E8 904E38            MOV     DPTR,#R_Weight_Temp
0033EB E0                MOVX    A,@DPTR
0033EC 9400              SUBB    A,#00H
0033EE 500F              JNC     ?C0108?CS_SCALE_PROC
  738: 					R_UnitWeight.origin = R_Weight_Mem;
0033F0 904CC3            MOV     DPTR,#R_Weight_Mem
0033F3 E0                MOVX    A,@DPTR
0033F4 FF                MOV     R7,A
0033F5 A3                INC     DPTR
0033F6 E0                MOVX    A,@DPTR
0033F7 904CC9            MOV     DPTR,#R_UnitWeight
0033FA CF                XCH     A,R7
0033FB F0                MOVX    @DPTR,A
0033FC A3                INC     DPTR
0033FD EF                MOV     A,R7
0033FE F0                MOVX    @DPTR,A
  739: 					}
0033FF         ?C0108?CS_SCALE_PROC:
  740: 			
  741: 				R_Weight_Lock = R_UnitWeight.origin;
0033FF 904CC9            MOV     DPTR,#R_UnitWeight
003402 E0                MOVX    A,@DPTR
003403 FE                MOV     R6,A
003404 A3                INC     DPTR
003405 E0                MOVX    A,@DPTR
003406 FF                MOV     R7,A
003407 904CC0            MOV     DPTR,#R_Weight_Lock
00340A EE                MOV     A,R6
00340B F0                MOVX    @DPTR,A
00340C A3                INC     DPTR
00340D EF                MOV     A,R7
00340E F0                MOVX    @DPTR,A
  742: 				R_Weight_Mem = R_UnitWeight.origin;
00340F 904CC3            MOV     DPTR,#R_Weight_Mem
003412 EE                MOV     A,R6
003413 F0                MOVX    @DPTR,A
003414 A3                INC     DPTR
003415 EF                MOV     A,R7
003416 F0                MOVX    @DPTR,A
  743: 				
  744: 				R_Scale_state = CS_Scale_state_locking;
003417 A3                INC     DPTR
003418 7404              MOV     A,#04H
00341A F0                MOVX    @DPTR,A
  745: 				CS_SoftTimer(ResetSoftTimer);		//软件定时器开始用于锁定闪显示计时
00341B 7F02              MOV     R7,#02H
00341D 120EF4            LCALL   _CS_SoftTimer
  746: 				CS_Scale_SteadyProc(SteadyProcReset);
003420 E4                CLR     A
003421 FF                MOV     R7,A
003422 12172C            LCALL   _CS_Scale_SteadyProc
  747: 				CS_Scale_TimeOutProc(CS_Reset_AllTime);
003425 7F06              MOV     R7,#06H
003427 1215B3            LCALL   _CS_Scale_TimeOutProc
  748: 				}
  749: 			}
  750: 		}
00342A         ?C0096?CS_SCALE_PROC:
  751: 	return 0;
00342A 7F00              MOV     R7,#00H
  752: }
00342C 22                RET     
----- FUNCTION _CS_Scale_JudgeSteady (END) -------


----- FUNCTION _CS_Scale_LockProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  542: u8_t CS_Scale_LockProc(u8_t option)
  543: {
;---- Variable 'option' assigned to Register 'R7' ----
  544: 	static u8_t xdata B_Weight_Downing_Lock;		//下秤过程有重物在上面锁住
  545: 	
  546: 	if(option==SetDowningLock)
00342D EF                MOV     A,R7
00342E B40109            CJNE    A,#01H,?C0073?CS_SCALE_PROC
  547: 		{
  548: 		B_Weight_Downing_Lock =LockProcLock;
003431 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
003434 7403              MOV     A,#03H
003436 F0                MOVX    @DPTR,A
  549: 		return 0;
003437 7F00              MOV     R7,#00H
003439 22                RET     
  550: 		}
00343A         ?C0073?CS_SCALE_PROC:
  551: 
  552: 	if(option==GetIfLock)
00343A EF                MOV     A,R7
00343B B40206            CJNE    A,#02H,?C0075?CS_SCALE_PROC
  553: 		{
  554: 		return B_Weight_Downing_Lock;
00343E 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
003441 E0                MOVX    A,@DPTR
003442 FF                MOV     R7,A
003443 22                RET     
  555: 		}
003444         ?C0075?CS_SCALE_PROC:
  556: 	if(option==LockProcUnLock)
003444 EF                MOV     A,R7
003445 B40307            CJNE    A,#03H,?C0076?CS_SCALE_PROC
  557: 		{
  558: 		B_Weight_Downing_Lock =false;
003448 E4                CLR     A
003449 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
00344C F0                MOVX    @DPTR,A
  559: 		return 0;
00344D FF                MOV     R7,A
00344E 22                RET     
  560: 		}
00344F         ?C0076?CS_SCALE_PROC:
  561: 	
  562: 	if(CS_Scale_ZeroProc(GetZeroState,0)==true)		//处于零位
00344F E4                CLR     A
003450 FD                MOV     R5,A
003451 FC                MOV     R4,A
003452 7F03              MOV     R7,#03H
003454 919A              ACALL   _CS_Scale_ZeroProc
003456 EF                MOV     A,R7
003457 6401              XRL     A,#01H
003459 4E                ORL     A,R6
00345A 701B              JNZ     ?C0077?CS_SCALE_PROC
  563: 		{
  564: 		B_Weight_Downing_Lock &=LockProcDownUnLock ;
00345C 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
00345F E0                MOVX    A,@DPTR
003460 54FD              ANL     A,#0FDH
003462 F0                MOVX    @DPTR,A
  565: 		
  566: 		if(B_Weight_Downing_Lock&LockProcZeroLock)
003463 30E031            JNB     ACC.0,?C0079?CS_SCALE_PROC
  567: 		R_UnitWeight.origin = R_Weight_Lock;
003466 904CC0            MOV     DPTR,#R_Weight_Lock
003469 E0                MOVX    A,@DPTR
00346A FF                MOV     R7,A
00346B A3                INC     DPTR
00346C E0                MOVX    A,@DPTR
00346D 904CC9            MOV     DPTR,#R_UnitWeight
003470 CF                XCH     A,R7
003471 F0                MOVX    @DPTR,A
003472 A3                INC     DPTR
003473 EF                MOV     A,R7
003474 F0                MOVX    @DPTR,A
  568: 		}
003475 8020              SJMP    ?C0079?CS_SCALE_PROC
003477         ?C0077?CS_SCALE_PROC:
  569: 	else
  570: 		{
  571: 		if(B_Weight_Downing_Lock&LockProcDownLock)
003477 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
00347A E0                MOVX    A,@DPTR
00347B FF                MOV     R7,A
00347C 30E111            JNB     ACC.1,?C0080?CS_SCALE_PROC
  572: 			R_UnitWeight.origin = R_Weight_Lock;
00347F 904CC0            MOV     DPTR,#R_Weight_Lock
003482 E0                MOVX    A,@DPTR
003483 FD                MOV     R5,A
003484 A3                INC     DPTR
003485 E0                MOVX    A,@DPTR
003486 904CC9            MOV     DPTR,#R_UnitWeight
003489 CD                XCH     A,R5
00348A F0                MOVX    @DPTR,A
00348B A3                INC     DPTR
00348C ED                MOV     A,R5
00348D F0                MOVX    @DPTR,A
00348E 8007              SJMP    ?C0079?CS_SCALE_PROC
003490         ?C0080?CS_SCALE_PROC:
  573: 		else
  574: 			B_Weight_Downing_Lock &= LockProcZeroUnLock;
003490 EF                MOV     A,R7
003491 54FE              ANL     A,#0FEH
003493 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
003496 F0                MOVX    @DPTR,A
  575: 		}
003497         ?C0079?CS_SCALE_PROC:
  576: 
  577: 	return 0;
003497 7F00              MOV     R7,#00H
  578: }
003499 22                RET     
----- FUNCTION _CS_Scale_LockProc (END) -------


----- FUNCTION _CS_Scale_ZeroProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  391: u16_t  CS_Scale_ZeroProc(u8_t option,u16_t setdata)
  392: {
;---- Variable 'setdata' assigned to Register 'R4/R5' ----
00349A 904DED            MOV     DPTR,#option
00349D EF                MOV     A,R7
00349E F0                MOVX    @DPTR,A
  393: 	static	u8_t	   xdata R_Weight_GetZeroTimeOut = 0;	
  394: 	static	u16_t  xdata R_AD_PowerOnZero;	//上电零点AD值
  395: 	static	u16_t  xdata R_AD_Zero;			//零点AD值
  396: 	static	u8_t    xdata B_Weight_Zero;		//处于零点标志
  397: 	static	u8_t    xdata B_Weight_ZeroOk;	//上电获取完零点标志
  398: 	static	u8_t	   xdata B_LockDownCheck;	//下秤后第一次稳定追零
  399: 	static	u8_t	   xdata B_WeightZeroErr;		//零点错误标志
  400: 	
  401: 	u16_t	R_AdFilTimes;
  402: 	u16_t	R_AD_BUF;
  403: 	u16_t	weight_temp;
  404: 	u16_t	R_Open_Weight;
  405: 	u8_t		B_Weight_Pos;
  406: 
  407: 	
  408: 	
  409: 	if(option==ZeroProcReset)
00349F BF0408            CJNE    R7,#04H,?C0044?CS_SCALE_PROC
  410: 		{
  411: 		B_Weight_ZeroOk = 0;
0034A2 E4                CLR     A
0034A3 904C9B            MOV     DPTR,#B_Weight_ZeroOk
0034A6 F0                MOVX    @DPTR,A
  412: 		return 0;		
0034A7 FE                MOV     R6,A
0034A8 FF                MOV     R7,A
0034A9 22                RET     
  413: 		}
0034AA         ?C0044?CS_SCALE_PROC:
  414: 	if(option==SetPowerOnZero)
0034AA 904DED            MOV     DPTR,#option
0034AD E0                MOVX    A,@DPTR
0034AE FB                MOV     R3,A
0034AF B4050C            CJNE    A,#05H,?C0046?CS_SCALE_PROC
  415: 		{
  416: 		R_AD_PowerOnZero = setdata;
0034B2 904C96            MOV     DPTR,#R_AD_PowerOnZero
0034B5 EC                MOV     A,R4
0034B6 F0                MOVX    @DPTR,A
0034B7 A3                INC     DPTR
0034B8 ED                MOV     A,R5
0034B9 F0                MOVX    @DPTR,A
  417: 		return 0;		
0034BA E4                CLR     A
0034BB FE                MOV     R6,A
0034BC FF                MOV     R7,A
0034BD 22                RET     
  418: 		}
0034BE         ?C0046?CS_SCALE_PROC:
  419: 	if(option==SetRunningZero)
0034BE EB                MOV     A,R3
0034BF B4060E            CJNE    A,#06H,?C0047?CS_SCALE_PROC
  420: 		{
  421: 		R_AD_Zero = setdata;
0034C2 AF05              MOV     R7,AR5
0034C4 904C98            MOV     DPTR,#R_AD_Zero
0034C7 EC                MOV     A,R4
0034C8 F0                MOVX    @DPTR,A
0034C9 A3                INC     DPTR
0034CA EF                MOV     A,R7
0034CB F0                MOVX    @DPTR,A
  422: 		return 0;		
0034CC E4                CLR     A
0034CD FE                MOV     R6,A
0034CE FF                MOV     R7,A
0034CF 22                RET     
  423: 		}
0034D0         ?C0047?CS_SCALE_PROC:
  424: 	if(option==ClrLockDownCheckFlag)
0034D0 904DED            MOV     DPTR,#option
0034D3 E0                MOVX    A,@DPTR
0034D4 FD                MOV     R5,A
0034D5 B40808            CJNE    A,#08H,?C0048?CS_SCALE_PROC
  425: 		{
  426: 		B_LockDownCheck=false;
0034D8 E4                CLR     A
0034D9 904C9C            MOV     DPTR,#B_LockDownCheck
0034DC F0                MOVX    @DPTR,A
  427: 		return 0;
0034DD FE                MOV     R6,A
0034DE FF                MOV     R7,A
0034DF 22                RET     
  428: 		}
0034E0         ?C0048?CS_SCALE_PROC:
  429: 	
  430: 	if(option==FindPowerOnZero)
0034E0 ED                MOV     A,R5
0034E1 640A              XRL     A,#0AH
0034E3 7073              JNZ     ?C0049?CS_SCALE_PROC
  431: 	{
  432: 		
  433: 	
  434: 		if(R_Weight_GetZeroTimeOut <60)
0034E5 904C95            MOV     DPTR,#R_Weight_GetZeroTimeOut
0034E8 E0                MOVX    A,@DPTR
0034E9 C3                CLR     C
0034EA 943C              SUBB    A,#03CH
0034EC 5050              JNC     ?C0050?CS_SCALE_PROC
  435: 		{
  436: 		R_Weight_GetZeroTimeOut ++;
0034EE E0                MOVX    A,@DPTR
0034EF 04                INC     A
0034F0 F0                MOVX    @DPTR,A
  437: 		
  438: 		R_AD_BUF = R_AD_Original;
0034F1 904CD8            MOV     DPTR,#R_AD_Original
0034F4 E0                MOVX    A,@DPTR
0034F5 FE                MOV     R6,A
0034F6 A3                INC     DPTR
0034F7 E0                MOVX    A,@DPTR
0034F8 FF                MOV     R7,A
0034F9 904DEE            MOV     DPTR,#R_AD_BUF
0034FC EE                MOV     A,R6
0034FD F0                MOVX    @DPTR,A
0034FE FC                MOV     R4,A
0034FF A3                INC     DPTR
003500 EF                MOV     A,R7
003501 F0                MOVX    @DPTR,A
003502 FD                MOV     R5,A
  439: 		R_AD_BUF=CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
003503 E4                CLR     A
003504 FF                MOV     R7,A
003505 F1A5              ACALL   _CS_Scale_AdcFilter
003507 904DEE            MOV     DPTR,#R_AD_BUF
00350A EE                MOV     A,R6
00350B F0                MOVX    @DPTR,A
00350C FC                MOV     R4,A
00350D A3                INC     DPTR
00350E EF                MOV     A,R7
00350F F0                MOVX    @DPTR,A
003510 FD                MOV     R5,A
  440: 		R_AdFilTimes = CS_Scale_AdcFilter(ScaleAdcFilterGetFilTimes,R_AD_BUF);
003511 7F02              MOV     R7,#02H
003513 F1A5              ACALL   _CS_Scale_AdcFilter
;---- Variable 'R_AdFilTimes' assigned to Register 'R6/R7' ----
  441: 		
  442: 			if(R_AdFilTimes >=CS_PowerOnAD_Steadytimes)
003515 C3                CLR     C
003516 EF                MOV     A,R7
003517 940A              SUBB    A,#0AH
003519 EE                MOV     A,R6
00351A 9400              SUBB    A,#00H
00351C 403A              JC      ?C0049?CS_SCALE_PROC
  443: 				{
  444: 				R_AD_Zero	= R_AD_BUF;
00351E 904DEE            MOV     DPTR,#R_AD_BUF
003521 E0                MOVX    A,@DPTR
003522 FE                MOV     R6,A
003523 A3                INC     DPTR
003524 E0                MOVX    A,@DPTR
003525 FF                MOV     R7,A
003526 904C98            MOV     DPTR,#R_AD_Zero
003529 EE                MOV     A,R6
00352A F0                MOVX    @DPTR,A
00352B A3                INC     DPTR
00352C EF                MOV     A,R7
00352D F0                MOVX    @DPTR,A
  445: 				R_AD_PowerOnZero = R_AD_BUF;
00352E 904C96            MOV     DPTR,#R_AD_PowerOnZero
003531 EE                MOV     A,R6
003532 F0                MOVX    @DPTR,A
003533 A3                INC     DPTR
003534 EF                MOV     A,R7
003535 F0                MOVX    @DPTR,A
  446: 				B_Weight_ZeroOk = true;
003536 904C9B            MOV     DPTR,#B_Weight_ZeroOk
003539 7401              MOV     A,#01H
00353B F0                MOVX    @DPTR,A
  447: 				}
  448: 		}
00353C 801A              SJMP    ?C0049?CS_SCALE_PROC
00353E         ?C0050?CS_SCALE_PROC:
  449: 		else
  450: 		{
  451: 		R_AD_Zero	= 4000;
00353E 904C98            MOV     DPTR,#R_AD_Zero
003541 740F              MOV     A,#0FH
003543 F0                MOVX    @DPTR,A
003544 A3                INC     DPTR
003545 74A0              MOV     A,#0A0H
003547 F0                MOVX    @DPTR,A
  452: 		R_AD_PowerOnZero = 4000;
003548 904C96            MOV     DPTR,#R_AD_PowerOnZero
00354B 740F              MOV     A,#0FH
00354D F0                MOVX    @DPTR,A
00354E A3                INC     DPTR
00354F 74A0              MOV     A,#0A0H
003551 F0                MOVX    @DPTR,A
  453: 		B_Weight_ZeroOk = true;
003552 904C9B            MOV     DPTR,#B_Weight_ZeroOk
003555 7401              MOV     A,#01H
003557 F0                MOVX    @DPTR,A
  454: 		}
  455: 
  456: 	}
003558         ?C0049?CS_SCALE_PROC:
  457: 
  458: 	if(option==RunningZero)
003558 904DED            MOV     DPTR,#option
00355B E0                MOVX    A,@DPTR
00355C 6407              XRL     A,#07H
00355E 6002              JZ      $ + 4H
003560 C190              AJMP    ?C0053?CS_SCALE_PROC
  459: 	{
  460: 	B_Weight_Zero = false;		
003562 904C9A            MOV     DPTR,#B_Weight_Zero
003565 F0                MOVX    @DPTR,A
  461: 	//3kg以下才追零包括负重量
  462: 	B_Weight_Pos = CS_Scale_GetDeltaAD(GetADDirection);		//获取AD方向
003566 7F01              MOV     R7,#01H
003568 D1DC              ACALL   _CS_Scale_GetDeltaAD
00356A 904DF4            MOV     DPTR,#B_Weight_Pos
00356D EF                MOV     A,R7
00356E F0                MOVX    @DPTR,A
  463: 	R_Open_Weight = CS_Scale_CaliProc(CaliProcGetOpenWeight);	//获取开机重量值
00356F 7F07              MOV     R7,#07H
003571 120A17            LCALL   _CS_Scale_CaliProc
003574 904DF2            MOV     DPTR,#R_Open_Weight
003577 EE                MOV     A,R6
003578 F0                MOVX    @DPTR,A
003579 A3                INC     DPTR
00357A EF                MOV     A,R7
00357B F0                MOVX    @DPTR,A
  464: 	
  465: 	if(R_UnitWeight.origin <= 300 ||B_Weight_Pos ==false)	
00357C 904CC9            MOV     DPTR,#R_UnitWeight
00357F E0                MOVX    A,@DPTR
003580 FE                MOV     R6,A
003581 A3                INC     DPTR
003582 E0                MOVX    A,@DPTR
003583 FF                MOV     R7,A
003584 D3                SETB    C
003585 942C              SUBB    A,#02CH
003587 EE                MOV     A,R6
003588 9401              SUBB    A,#01H
00358A 4006              JC      ?C0055?CS_SCALE_PROC
00358C 904DF4            MOV     DPTR,#B_Weight_Pos
00358F E0                MOVX    A,@DPTR
003590 7006              JNZ     ?C0054?CS_SCALE_PROC
003592         ?C0055?CS_SCALE_PROC:
  466: 		B_Weight_Zero = true;
003592 904C9A            MOV     DPTR,#B_Weight_Zero
003595 7401              MOV     A,#01H
003597 F0                MOVX    @DPTR,A
003598         ?C0054?CS_SCALE_PROC:
  467: 
  468: 		if(R_UnitWeight.origin <= 200 || B_Weight_Pos==false)
003598 D3                SETB    C
003599 EF                MOV     A,R7
00359A 94C8              SUBB    A,#0C8H
00359C EE                MOV     A,R6
00359D 9400              SUBB    A,#00H
00359F 4008              JC      ?C0057?CS_SCALE_PROC
0035A1 904DF4            MOV     DPTR,#B_Weight_Pos
0035A4 E0                MOVX    A,@DPTR
0035A5 6002              JZ      $ + 4H
0035A7 C18C              AJMP    ?C0056?CS_SCALE_PROC
0035A9         ?C0057?CS_SCALE_PROC:
  469: 			{		
  470: 				if(CS_Scale_JudgeSteady(GetIfSmallSteady)==true)
0035A9 7F02              MOV     R7,#02H
0035AB 51C6              ACALL   _CS_Scale_JudgeSteady
0035AD EF                MOV     A,R7
0035AE 6401              XRL     A,#01H
0035B0 6002              JZ      $ + 4H
0035B2 C18C              AJMP    ?C0056?CS_SCALE_PROC
  471: 					{
  472: 
  473: 					CS_Scale_JudgeSteady(ResetSteady);
0035B4 7F01              MOV     R7,#01H
0035B6 51C6              ACALL   _CS_Scale_JudgeSteady
  474: 					
  475: 					//非锁定状态正常追零
  476: 					if(CS_Scale_LockProc(GetIfLock)==false)	
0035B8 7F02              MOV     R7,#02H
0035BA 912D              ACALL   _CS_Scale_LockProc
0035BC EF                MOV     A,R7
0035BD 7054              JNZ     ?C0059?CS_SCALE_PROC
  477: 						{
  478: 						if(R_AD_Original >= R_AD_PowerOnZero)
0035BF 904C96            MOV     DPTR,#R_AD_PowerOnZero
0035C2 E0                MOVX    A,@DPTR
0035C3 FE                MOV     R6,A
0035C4 A3                INC     DPTR
0035C5 E0                MOVX    A,@DPTR
0035C6 FF                MOV     R7,A
0035C7 904CD8            MOV     DPTR,#R_AD_Original
0035CA E0                MOVX    A,@DPTR
0035CB FC                MOV     R4,A
0035CC A3                INC     DPTR
0035CD E0                MOVX    A,@DPTR
0035CE FD                MOV     R5,A
0035CF C3                CLR     C
0035D0 9F                SUBB    A,R7
0035D1 EC                MOV     A,R4
0035D2 9E                SUBB    A,R6
0035D3 402D              JC      ?C0060?CS_SCALE_PROC
  479: 							{
  480: 							weight_temp = R_AD_Original - R_AD_PowerOnZero;
0035D5 ED                MOV     A,R5
0035D6 9F                SUBB    A,R7
0035D7 FF                MOV     R7,A
0035D8 EC                MOV     A,R4
0035D9 9E                SUBB    A,R6
0035DA FE                MOV     R6,A
0035DB 904DF0            MOV     DPTR,#weight_temp
0035DE F0                MOVX    @DPTR,A
0035DF A3                INC     DPTR
0035E0 EF                MOV     A,R7
0035E1 F0                MOVX    @DPTR,A
  481: 							if(weight_temp < R_Open_Weight)
0035E2 D3                SETB    C
0035E3 904DF3            MOV     DPTR,#R_Open_Weight+01H
0035E6 E0                MOVX    A,@DPTR
0035E7 9F                SUBB    A,R7
0035E8 904DF2            MOV     DPTR,#R_Open_Weight
0035EB E0                MOVX    A,@DPTR
0035EC 9E                SUBB    A,R6
0035ED 5002              JNC     $ + 4H
0035EF C18C              AJMP    ?C0056?CS_SCALE_PROC
  482: 								R_AD_Zero = R_AD_Original;
0035F1 904CD8            MOV     DPTR,#R_AD_Original
0035F4 E0                MOVX    A,@DPTR
0035F5 FF                MOV     R7,A
0035F6 A3                INC     DPTR
0035F7 E0                MOVX    A,@DPTR
0035F8 904C98            MOV     DPTR,#R_AD_Zero
0035FB CF                XCH     A,R7
0035FC F0                MOVX    @DPTR,A
0035FD A3                INC     DPTR
0035FE EF                MOV     A,R7
0035FF F0                MOVX    @DPTR,A
  483: 							}
003600 C18C              AJMP    ?C0056?CS_SCALE_PROC
003602         ?C0060?CS_SCALE_PROC:
  484: 						else
  485: 							R_AD_Zero = R_AD_Original;
003602 904CD8            MOV     DPTR,#R_AD_Original
003605 E0                MOVX    A,@DPTR
003606 FF                MOV     R7,A
003607 A3                INC     DPTR
003608 E0                MOVX    A,@DPTR
003609 904C98            MOV     DPTR,#R_AD_Zero
00360C CF                XCH     A,R7
00360D F0                MOVX    @DPTR,A
00360E A3                INC     DPTR
00360F EF                MOV     A,R7
003610 F0                MOVX    @DPTR,A
  486: 						}
003611 8079              SJMP    ?C0056?CS_SCALE_PROC
003613         ?C0059?CS_SCALE_PROC:
  487: 					//锁定状态下秤第一次追零做防提起处理
  488: 					else			
  489: 						{
  490: 						if(B_LockDownCheck==false)
003613 904C9C            MOV     DPTR,#B_LockDownCheck
003616 E0                MOVX    A,@DPTR
003617 7073              JNZ     ?C0056?CS_SCALE_PROC
  491: 							{
  492: 							if(R_AD_Original>R_AD_Zero)
003619 904C98            MOV     DPTR,#R_AD_Zero
00361C E0                MOVX    A,@DPTR
00361D FE                MOV     R6,A
00361E A3                INC     DPTR
00361F E0                MOVX    A,@DPTR
003620 FF                MOV     R7,A
003621 904CD8            MOV     DPTR,#R_AD_Original
003624 E0                MOVX    A,@DPTR
003625 FC                MOV     R4,A
003626 A3                INC     DPTR
003627 E0                MOVX    A,@DPTR
003628 FD                MOV     R5,A
003629 D3                SETB    C
00362A 9F                SUBB    A,R7
00362B EC                MOV     A,R4
00362C 9E                SUBB    A,R6
00362D 400E              JC      ?C0065?CS_SCALE_PROC
  493: 								weight_temp = R_AD_Original - R_AD_Zero;
00362F ED                MOV     A,R5
003630 9F                SUBB    A,R7
003631 FF                MOV     R7,A
003632 EC                MOV     A,R4
003633 9E                SUBB    A,R6
003634 904DF0            MOV     DPTR,#weight_temp
003637 F0                MOVX    @DPTR,A
003638 A3                INC     DPTR
003639 EF                MOV     A,R7
00363A F0                MOVX    @DPTR,A
00363B 801B              SJMP    ?C0066?CS_SCALE_PROC
00363D         ?C0065?CS_SCALE_PROC:
  494: 							else
  495: 								weight_temp = R_AD_Zero - R_AD_Original;
00363D 904CD8            MOV     DPTR,#R_AD_Original
003640 E0                MOVX    A,@DPTR
003641 FE                MOV     R6,A
003642 A3                INC     DPTR
003643 E0                MOVX    A,@DPTR
003644 FF                MOV     R7,A
003645 C3                CLR     C
003646 904C99            MOV     DPTR,#R_AD_Zero+01H
003649 E0                MOVX    A,@DPTR
00364A 9F                SUBB    A,R7
00364B FF                MOV     R7,A
00364C 904C98            MOV     DPTR,#R_AD_Zero
00364F E0                MOVX    A,@DPTR
003650 9E                SUBB    A,R6
003651 904DF0            MOV     DPTR,#weight_temp
003654 F0                MOVX    @DPTR,A
003655 A3                INC     DPTR
003656 EF                MOV     A,R7
003657 F0                MOVX    @DPTR,A
003658         ?C0066?CS_SCALE_PROC:
  496: 
  497: 							//跟锁定前的零点做比较不等于一个秤体重量的处理
  498: 							//if(weight_temp<ScaleWeightMin&&weight_temp>ScaleWeightMax)
  499: 								//{
  500: 								R_AD_Zero = R_AD_Original;	//更新零点
003658 904CD8            MOV     DPTR,#R_AD_Original
00365B E0                MOVX    A,@DPTR
00365C FF                MOV     R7,A
00365D A3                INC     DPTR
00365E E0                MOVX    A,@DPTR
00365F 904C98            MOV     DPTR,#R_AD_Zero
003662 CF                XCH     A,R7
003663 F0                MOVX    @DPTR,A
003664 A3                INC     DPTR
003665 EF                MOV     A,R7
003666 F0                MOVX    @DPTR,A
  501: 								if(weight_temp>SameZeroRange)
003667 D3                SETB    C
003668 904DF1            MOV     DPTR,#weight_temp+01H
00366B E0                MOVX    A,@DPTR
00366C 940A              SUBB    A,#0AH
00366E 904DF0            MOV     DPTR,#weight_temp
003671 E0                MOVX    A,@DPTR
003672 9400              SUBB    A,#00H
003674 4010              JC      ?C0067?CS_SCALE_PROC
  502: 									{
  503: 									//跟称重前不是一个零点报零点错并解锁
  504: 									B_WeightZeroErr=true;
003676 904C9D            MOV     DPTR,#B_WeightZeroErr
003679 7401              MOV     A,#01H
00367B F0                MOVX    @DPTR,A
  505: 									R_Display_Err=CS_ScaleDisplay_L_err;
00367C 904CC2            MOV     DPTR,#R_Display_Err
00367F 7404              MOV     A,#04H
003681 F0                MOVX    @DPTR,A
  506: 									CS_Scale_LockProc(LockProcUnLock);
003682 7F03              MOV     R7,#03H
003684 912D              ACALL   _CS_Scale_LockProc
  507: 									}
003686         ?C0067?CS_SCALE_PROC:
  508: 								B_LockDownCheck=true;
003686 904C9C            MOV     DPTR,#B_LockDownCheck
003689 7401              MOV     A,#01H
00368B F0                MOVX    @DPTR,A
  509: 								//}
  510: 
  511: 							}						
  512: 						}
  513: 					
  514: 					}
  515: 			}
00368C         ?C0056?CS_SCALE_PROC:
  516: 	return	0;		
00368C E4                CLR     A
00368D FE                MOV     R6,A
00368E FF                MOV     R7,A
00368F 22                RET     
  517: 	}
003690         ?C0053?CS_SCALE_PROC:
  518: 
  519: 	if(option==GetPowerOnZero)
003690 904DED            MOV     DPTR,#option
003693 E0                MOVX    A,@DPTR
003694 FD                MOV     R5,A
003695 7009              JNZ     ?C0068?CS_SCALE_PROC
  520: 		return	R_AD_PowerOnZero;
003697 904C96            MOV     DPTR,#R_AD_PowerOnZero
00369A E0                MOVX    A,@DPTR
00369B FE                MOV     R6,A
00369C A3                INC     DPTR
00369D E0                MOVX    A,@DPTR
00369E FF                MOV     R7,A
00369F 22                RET     
0036A0         ?C0068?CS_SCALE_PROC:
  521: 	if(option==GetPowerOnZeroState)
0036A0 ED                MOV     A,R5
0036A1 B40208            CJNE    A,#02H,?C0069?CS_SCALE_PROC
  522: 		return	B_Weight_ZeroOk;
0036A4 904C9B            MOV     DPTR,#B_Weight_ZeroOk
0036A7 E0                MOVX    A,@DPTR
0036A8 FF                MOV     R7,A
0036A9 7E00              MOV     R6,#00H
0036AB 22                RET     
0036AC         ?C0069?CS_SCALE_PROC:
  523: 	if(option==GetRunningZero)
0036AC 904DED            MOV     DPTR,#option
0036AF E0                MOVX    A,@DPTR
0036B0 FD                MOV     R5,A
0036B1 B40109            CJNE    A,#01H,?C0070?CS_SCALE_PROC
  524: 		return	R_AD_Zero;
0036B4 904C98            MOV     DPTR,#R_AD_Zero
0036B7 E0                MOVX    A,@DPTR
0036B8 FE                MOV     R6,A
0036B9 A3                INC     DPTR
0036BA E0                MOVX    A,@DPTR
0036BB FF                MOV     R7,A
0036BC 22                RET     
0036BD         ?C0070?CS_SCALE_PROC:
  525: 	if(option==GetZeroState)
0036BD ED                MOV     A,R5
0036BE B40308            CJNE    A,#03H,?C0071?CS_SCALE_PROC
  526: 		return	B_Weight_Zero;
0036C1 904C9A            MOV     DPTR,#B_Weight_Zero
0036C4 E0                MOVX    A,@DPTR
0036C5 FF                MOV     R7,A
0036C6 7E00              MOV     R6,#00H
0036C8 22                RET     
0036C9         ?C0071?CS_SCALE_PROC:
  527: 	if(option==GetIfZeroErr)
0036C9 904DED            MOV     DPTR,#option
0036CC E0                MOVX    A,@DPTR
0036CD B40908            CJNE    A,#09H,?C0072?CS_SCALE_PROC
  528: 		return   B_WeightZeroErr;
0036D0 904C9D            MOV     DPTR,#B_WeightZeroErr
0036D3 E0                MOVX    A,@DPTR
0036D4 FF                MOV     R7,A
0036D5 7E00              MOV     R6,#00H
0036D7 22                RET     
0036D8         ?C0072?CS_SCALE_PROC:
  529: 	
  530: 	return 0;	
0036D8 E4                CLR     A
0036D9 FE                MOV     R6,A
0036DA FF                MOV     R7,A
  531: }
0036DB 22                RET     
----- FUNCTION _CS_Scale_ZeroProc (END) -------


----- FUNCTION _CS_Scale_GetDeltaAD (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  215: u16_t CS_Scale_GetDeltaAD(u8_t option)
  216: {
0036DC 904E47            MOV     DPTR,#option
0036DF EF                MOV     A,R7
0036E0 F0                MOVX    @DPTR,A
  217: 	static       u8_t xdata B_Weight_Pos;				//正负AD变化标志
  218: 	u16_t	ad_temp;
  219: 	u16_t      R_AD_Zero;
  220: 	R_AD_Zero = CS_Scale_ZeroProc(GetRunningZero,0);
0036E1 E4                CLR     A
0036E2 FD                MOV     R5,A
0036E3 FC                MOV     R4,A
0036E4 7F01              MOV     R7,#01H
0036E6 919A              ACALL   _CS_Scale_ZeroProc
;---- Variable 'R_AD_Zero' assigned to Register 'R6/R7' ----
  221: 	if(R_AD_Original>R_AD_Zero)
0036E8 904CD8            MOV     DPTR,#R_AD_Original
0036EB E0                MOVX    A,@DPTR
0036EC FC                MOV     R4,A
0036ED A3                INC     DPTR
0036EE E0                MOVX    A,@DPTR
0036EF FD                MOV     R5,A
0036F0 D3                SETB    C
0036F1 9F                SUBB    A,R7
0036F2 EC                MOV     A,R4
0036F3 9E                SUBB    A,R6
0036F4 4014              JC      ?C0013?CS_SCALE_PROC
  222: 		{
  223: 		ad_temp = R_AD_Original - R_AD_Zero;
0036F6 ED                MOV     A,R5
0036F7 9F                SUBB    A,R7
0036F8 FF                MOV     R7,A
0036F9 EC                MOV     A,R4
0036FA 9E                SUBB    A,R6
0036FB 904E48            MOV     DPTR,#ad_temp
0036FE F0                MOVX    @DPTR,A
0036FF A3                INC     DPTR
003700 EF                MOV     A,R7
003701 F0                MOVX    @DPTR,A
  224: 		B_Weight_Pos = true;
003702 904C80            MOV     DPTR,#B_Weight_Pos
003705 7401              MOV     A,#01H
003707 F0                MOVX    @DPTR,A
  225: 
  226: 		}
003708 801A              SJMP    ?C0014?CS_SCALE_PROC
00370A         ?C0013?CS_SCALE_PROC:
  227: 	else
  228: 		{
  229: 		ad_temp = R_AD_Zero - R_AD_Original;
00370A 904CD8            MOV     DPTR,#R_AD_Original
00370D E0                MOVX    A,@DPTR
00370E FC                MOV     R4,A
00370F A3                INC     DPTR
003710 E0                MOVX    A,@DPTR
003711 FD                MOV     R5,A
003712 C3                CLR     C
003713 EF                MOV     A,R7
003714 9D                SUBB    A,R5
003715 FF                MOV     R7,A
003716 EE                MOV     A,R6
003717 9C                SUBB    A,R4
003718 904E48            MOV     DPTR,#ad_temp
00371B F0                MOVX    @DPTR,A
00371C A3                INC     DPTR
00371D EF                MOV     A,R7
00371E F0                MOVX    @DPTR,A
  230: 		B_Weight_Pos = false;		
00371F E4                CLR     A
003720 904C80            MOV     DPTR,#B_Weight_Pos
003723 F0                MOVX    @DPTR,A
  231: 		}
003724         ?C0014?CS_SCALE_PROC:
  232: 
  233: 	
  234: 	if(option == GetADDirection)
003724 904E47            MOV     DPTR,#option
003727 E0                MOVX    A,@DPTR
003728 B40108            CJNE    A,#01H,?C0015?CS_SCALE_PROC
  235: 		{
  236: 		return	B_Weight_Pos;
00372B 904C80            MOV     DPTR,#B_Weight_Pos
00372E E0                MOVX    A,@DPTR
00372F FF                MOV     R7,A
003730 7E00              MOV     R6,#00H
003732 22                RET     
  237: 		}	
003733         ?C0015?CS_SCALE_PROC:
  238: 	return ad_temp;
003733 904E48            MOV     DPTR,#ad_temp
003736 E0                MOVX    A,@DPTR
003737 FE                MOV     R6,A
003738 A3                INC     DPTR
003739 E0                MOVX    A,@DPTR
00373A FF                MOV     R7,A
  239: }
00373B 22                RET     
----- FUNCTION _CS_Scale_GetDeltaAD (END) -------


----- FUNCTION CS_Scale_ReturnLock (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  855: void CS_Scale_ReturnLock(void)
  856: {
  857: 	u16_t	weight_temp;
  858: 	
  859: 	if( R_UnitWeight.origin > R_Weight_Lock)
00373C 904CC0            MOV     DPTR,#R_Weight_Lock
00373F E0                MOVX    A,@DPTR
003740 FE                MOV     R6,A
003741 A3                INC     DPTR
003742 E0                MOVX    A,@DPTR
003743 FF                MOV     R7,A
003744 904CC9            MOV     DPTR,#R_UnitWeight
003747 E0                MOVX    A,@DPTR
003748 FC                MOV     R4,A
003749 A3                INC     DPTR
00374A E0                MOVX    A,@DPTR
00374B FD                MOV     R5,A
00374C D3                SETB    C
00374D 9F                SUBB    A,R7
00374E EC                MOV     A,R4
00374F 9E                SUBB    A,R6
003750 4020              JC      ?C0119?CS_SCALE_PROC
  860: 		{
  861: 		weight_temp = R_UnitWeight.origin -R_Weight_Lock;
003752 ED                MOV     A,R5
003753 9F                SUBB    A,R7
003754 FF                MOV     R7,A
003755 EC                MOV     A,R4
003756 9E                SUBB    A,R6
003757 FE                MOV     R6,A
003758 904E56            MOV     DPTR,#weight_temp
00375B F0                MOVX    @DPTR,A
00375C A3                INC     DPTR
00375D EF                MOV     A,R7
00375E F0                MOVX    @DPTR,A
  862: 		if(weight_temp >= CS_Scale_RetLockWeightInc)
00375F C3                CLR     C
003760 94E8              SUBB    A,#0E8H
003762 EE                MOV     A,R6
003763 9403              SUBB    A,#03H
003765 403D              JC      ?C0123?CS_SCALE_PROC
  863: 			{
  864: 			R_Scale_state = CS_Scale_state_weighting;
003767 904CC5            MOV     DPTR,#R_Scale_state
00376A 7401              MOV     A,#01H
00376C F0                MOVX    @DPTR,A
  865: 			CS_Scale_TimeOutProc(CS_Reset_AllTime);
00376D 7F06              MOV     R7,#06H
00376F 0215B3            LJMP    _CS_Scale_TimeOutProc
  866: 			}
  867: 		}
003772         ?C0119?CS_SCALE_PROC:
  868: 	else
  869: 		{
  870: 		weight_temp = R_Weight_Lock -R_UnitWeight.origin;
003772 904CC9            MOV     DPTR,#R_UnitWeight
003775 E0                MOVX    A,@DPTR
003776 FE                MOV     R6,A
003777 A3                INC     DPTR
003778 E0                MOVX    A,@DPTR
003779 FF                MOV     R7,A
00377A C3                CLR     C
00377B 904CC1            MOV     DPTR,#R_Weight_Lock+01H
00377E E0                MOVX    A,@DPTR
00377F 9F                SUBB    A,R7
003780 FF                MOV     R7,A
003781 904CC0            MOV     DPTR,#R_Weight_Lock
003784 E0                MOVX    A,@DPTR
003785 9E                SUBB    A,R6
003786 FE                MOV     R6,A
003787 904E56            MOV     DPTR,#weight_temp
00378A F0                MOVX    @DPTR,A
00378B A3                INC     DPTR
00378C EF                MOV     A,R7
00378D F0                MOVX    @DPTR,A
  871: 		if(weight_temp >= CS_Scale_RetLockWeightDec)
00378E C3                CLR     C
00378F 942C              SUBB    A,#02CH
003791 EE                MOV     A,R6
003792 9401              SUBB    A,#01H
003794 400E              JC      ?C0123?CS_SCALE_PROC
  872: 			{
  873: 			
  874: 			R_Scale_state = CS_Scale_state_weighting;
003796 904CC5            MOV     DPTR,#R_Scale_state
003799 7401              MOV     A,#01H
00379B F0                MOVX    @DPTR,A
  875: 			CS_Scale_LockProc(SetDowningLock);
00379C FF                MOV     R7,A
00379D 912D              ACALL   _CS_Scale_LockProc
  876: 			CS_Scale_TimeOutProc(CS_Reset_AllTime);
00379F 7F06              MOV     R7,#06H
0037A1 1215B3            LCALL   _CS_Scale_TimeOutProc
  877: 			
  878: 			}
  879: 		}
  880: 
  881: }
0037A4         ?C0123?CS_SCALE_PROC:
0037A4 22                RET     
----- FUNCTION CS_Scale_ReturnLock (END) -------


----- FUNCTION _CS_Scale_AdcFilter (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  244: u16_t CS_Scale_AdcFilter(u8_t option,u16_t R_AD_BUF)
  245: {
0037A5 904E05            MOV     DPTR,#R_AD_BUF
0037A8 EC                MOV     A,R4
0037A9 F0                MOVX    @DPTR,A
0037AA A3                INC     DPTR
0037AB ED                MOV     A,R5
0037AC F0                MOVX    @DPTR,A
0037AD 904E04            MOV     DPTR,#option
0037B0 EF                MOV     A,R7
0037B1 F0                MOVX    @DPTR,A
  246: 	u32_t	ad_temp;
  247: 	static	u16_t xdata R_AD_FilTimes;
  248: 	static	u16_t xdata R_AD_BUF_OLD;
  249: 	static	u16_t xdata R_AD_F1;
  250: 	static	u16_t xdata R_AD_F2;
  251: 	static	u16_t xdata R_AD_F3;
  252: 	static	u16_t xdata R_AD_F4;
  253: 	static	u16_t xdata R_AD_F5;
  254: 	static	u16_t xdata R_AD_F6;
  255: 	static	u16_t xdata R_AD_F7;
  256: 	static	u16_t xdata R_AD_F8;	
  257: 		
  258: 	if(option==ScaleAdcFilterGetFilTimes)
0037B2 BF0209            CJNE    R7,#02H,?C0017?CS_SCALE_PROC
  259: 		{
  260: 		return  R_AD_FilTimes;
0037B5 904C81            MOV     DPTR,#R_AD_FilTimes
0037B8 E0                MOVX    A,@DPTR
0037B9 FE                MOV     R6,A
0037BA A3                INC     DPTR
0037BB E0                MOVX    A,@DPTR
0037BC FF                MOV     R7,A
0037BD 22                RET     
  261: 		}
0037BE         ?C0017?CS_SCALE_PROC:
  262: 	
  263: 	
  264: 	if(R_AD_BUF >R_AD_BUF_OLD)
0037BE 904C83            MOV     DPTR,#R_AD_BUF_OLD
0037C1 E0                MOVX    A,@DPTR
0037C2 FE                MOV     R6,A
0037C3 A3                INC     DPTR
0037C4 E0                MOVX    A,@DPTR
0037C5 FF                MOV     R7,A
0037C6 904E05            MOV     DPTR,#R_AD_BUF
0037C9 E0                MOVX    A,@DPTR
0037CA FC                MOV     R4,A
0037CB A3                INC     DPTR
0037CC E0                MOVX    A,@DPTR
0037CD FD                MOV     R5,A
0037CE D3                SETB    C
0037CF 9F                SUBB    A,R7
0037D0 EC                MOV     A,R4
0037D1 9E                SUBB    A,R6
0037D2 4017              JC      ?C0019?CS_SCALE_PROC
  265: 		ad_temp = R_AD_BUF - R_AD_BUF_OLD;
0037D4 904C83            MOV     DPTR,#R_AD_BUF_OLD
0037D7 E0                MOVX    A,@DPTR
0037D8 A3                INC     DPTR
0037D9 E0                MOVX    A,@DPTR
0037DA ED                MOV     A,R5
0037DB 9F                SUBB    A,R7
0037DC FF                MOV     R7,A
0037DD EC                MOV     A,R4
0037DE 9E                SUBB    A,R6
0037DF FE                MOV     R6,A
0037E0 E4                CLR     A
0037E1 FC                MOV     R4,A
0037E2 FD                MOV     R5,A
0037E3 904E07            MOV     DPTR,#ad_temp
0037E6 120332            LCALL   ?C?LSTXDATA
0037E9 801E              SJMP    ?C0020?CS_SCALE_PROC
0037EB         ?C0019?CS_SCALE_PROC:
  266: 	else
  267: 		ad_temp = R_AD_BUF_OLD - R_AD_BUF;
0037EB 904E05            MOV     DPTR,#R_AD_BUF
0037EE E0                MOVX    A,@DPTR
0037EF FE                MOV     R6,A
0037F0 A3                INC     DPTR
0037F1 E0                MOVX    A,@DPTR
0037F2 FF                MOV     R7,A
0037F3 C3                CLR     C
0037F4 904C84            MOV     DPTR,#R_AD_BUF_OLD+01H
0037F7 E0                MOVX    A,@DPTR
0037F8 9F                SUBB    A,R7
0037F9 FF                MOV     R7,A
0037FA 904C83            MOV     DPTR,#R_AD_BUF_OLD
0037FD E0                MOVX    A,@DPTR
0037FE 9E                SUBB    A,R6
0037FF FE                MOV     R6,A
003800 E4                CLR     A
003801 FC                MOV     R4,A
003802 FD                MOV     R5,A
003803 904E07            MOV     DPTR,#ad_temp
003806 120332            LCALL   ?C?LSTXDATA
003809         ?C0020?CS_SCALE_PROC:
  268: 
  269: 	R_AD_BUF_OLD	=	R_AD_BUF;
003809 904E05            MOV     DPTR,#R_AD_BUF
00380C E0                MOVX    A,@DPTR
00380D FF                MOV     R7,A
00380E A3                INC     DPTR
00380F E0                MOVX    A,@DPTR
003810 904C83            MOV     DPTR,#R_AD_BUF_OLD
003813 CF                XCH     A,R7
003814 F0                MOVX    @DPTR,A
003815 A3                INC     DPTR
003816 EF                MOV     A,R7
003817 F0                MOVX    @DPTR,A
  270: 	
  271: 	if((ad_temp > CS_Scale_FiterX) ||(option==ScaleAdcFilterReset))	
003818 E4                CLR     A
003819 7F05              MOV     R7,#05H
00381B FE                MOV     R6,A
00381C FD                MOV     R5,A
00381D FC                MOV     R4,A
00381E 904E07            MOV     DPTR,#ad_temp
003821 E0                MOVX    A,@DPTR
003822 F8                MOV     R0,A
003823 A3                INC     DPTR
003824 E0                MOVX    A,@DPTR
003825 F9                MOV     R1,A
003826 A3                INC     DPTR
003827 E0                MOVX    A,@DPTR
003828 FA                MOV     R2,A
003829 A3                INC     DPTR
00382A E0                MOVX    A,@DPTR
00382B FB                MOV     R3,A
00382C D3                SETB    C
00382D 1202FB            LCALL   ?C?ULCMP
003830 5007              JNC     ?C0022?CS_SCALE_PROC
003832 904E04            MOV     DPTR,#option
003835 E0                MOVX    A,@DPTR
003836 B4012B            CJNE    A,#01H,?C0021?CS_SCALE_PROC
003839         ?C0022?CS_SCALE_PROC:
  272: 		{						
  273: 		R_AD_FilTimes = 0;
003839 E4                CLR     A
00383A 904C81            MOV     DPTR,#R_AD_FilTimes
00383D F0                MOVX    @DPTR,A
00383E A3                INC     DPTR
00383F F0                MOVX    @DPTR,A
  274: 		R_AD_F1 	    = 0;
003840 904C85            MOV     DPTR,#R_AD_F1
003843 F0                MOVX    @DPTR,A
003844 A3                INC     DPTR
003845 F0                MOVX    @DPTR,A
  275: 		R_AD_F2 	    = 0;
003846 A3                INC     DPTR
003847 F0                MOVX    @DPTR,A
003848 A3                INC     DPTR
003849 F0                MOVX    @DPTR,A
  276: 		R_AD_F3 	    = 0;
00384A A3                INC     DPTR
00384B F0                MOVX    @DPTR,A
00384C A3                INC     DPTR
00384D F0                MOVX    @DPTR,A
  277: 		R_AD_F4 	    = 0;
00384E A3                INC     DPTR
00384F F0                MOVX    @DPTR,A
003850 A3                INC     DPTR
003851 F0                MOVX    @DPTR,A
  278: 		R_AD_F5 	    = 0;
003852 A3                INC     DPTR
003853 F0                MOVX    @DPTR,A
003854 A3                INC     DPTR
003855 F0                MOVX    @DPTR,A
  279: 		R_AD_F6 	    = 0;
003856 A3                INC     DPTR
003857 F0                MOVX    @DPTR,A
003858 A3                INC     DPTR
003859 F0                MOVX    @DPTR,A
  280: 		R_AD_F7 	    = 0;
00385A A3                INC     DPTR
00385B F0                MOVX    @DPTR,A
00385C A3                INC     DPTR
00385D F0                MOVX    @DPTR,A
  281: 		R_AD_F8 	    = 0;
00385E A3                INC     DPTR
00385F F0                MOVX    @DPTR,A
003860 A3                INC     DPTR
003861 F0                MOVX    @DPTR,A
  282: 		}
003862 614C              AJMP    ?C0023?CS_SCALE_PROC
003864         ?C0021?CS_SCALE_PROC:
  283: 	else
  284: 		{
  285: 		if(R_AD_FilTimes < 200 )
003864 C3                CLR     C
003865 904C82            MOV     DPTR,#R_AD_FilTimes+01H
003868 E0                MOVX    A,@DPTR
003869 94C8              SUBB    A,#0C8H
00386B 904C81            MOV     DPTR,#R_AD_FilTimes
00386E E0                MOVX    A,@DPTR
00386F 9400              SUBB    A,#00H
003871 500C              JNC     ?C0024?CS_SCALE_PROC
  286: 		R_AD_FilTimes ++;	
003873 A3                INC     DPTR
003874 E0                MOVX    A,@DPTR
003875 04                INC     A
003876 F0                MOVX    @DPTR,A
003877 7006              JNZ     ?C0232?CS_SCALE_PROC
003879 904C81            MOV     DPTR,#R_AD_FilTimes
00387C E0                MOVX    A,@DPTR
00387D 04                INC     A
00387E F0                MOVX    @DPTR,A
00387F         ?C0232?CS_SCALE_PROC:
00387F         ?C0024?CS_SCALE_PROC:
  287: 
  288: 			if(R_AD_FilTimes<=1)
00387F 904C81            MOV     DPTR,#R_AD_FilTimes
003882 E0                MOVX    A,@DPTR
003883 FE                MOV     R6,A
003884 A3                INC     DPTR
003885 E0                MOVX    A,@DPTR
003886 FF                MOV     R7,A
003887 D3                SETB    C
003888 9401              SUBB    A,#01H
00388A EE                MOV     A,R6
00388B 9400              SUBB    A,#00H
00388D 500F              JNC     ?C0025?CS_SCALE_PROC
  289: 				R_AD_F1 = R_AD_BUF;	
00388F 904E05            MOV     DPTR,#R_AD_BUF
003892 E0                MOVX    A,@DPTR
003893 FD                MOV     R5,A
003894 A3                INC     DPTR
003895 E0                MOVX    A,@DPTR
003896 904C85            MOV     DPTR,#R_AD_F1
003899 CD                XCH     A,R5
00389A F0                MOVX    @DPTR,A
00389B A3                INC     DPTR
00389C ED                MOV     A,R5
00389D F0                MOVX    @DPTR,A
00389E         ?C0025?CS_SCALE_PROC:
  290: 			if(R_AD_FilTimes<=2)
00389E D3                SETB    C
00389F EF                MOV     A,R7
0038A0 9402              SUBB    A,#02H
0038A2 EE                MOV     A,R6
0038A3 9400              SUBB    A,#00H
0038A5 500F              JNC     ?C0026?CS_SCALE_PROC
  291: 				R_AD_F2 = R_AD_BUF;
0038A7 904E05            MOV     DPTR,#R_AD_BUF
0038AA E0                MOVX    A,@DPTR
0038AB FF                MOV     R7,A
0038AC A3                INC     DPTR
0038AD E0                MOVX    A,@DPTR
0038AE 904C87            MOV     DPTR,#R_AD_F2
0038B1 CF                XCH     A,R7
0038B2 F0                MOVX    @DPTR,A
0038B3 A3                INC     DPTR
0038B4 EF                MOV     A,R7
0038B5 F0                MOVX    @DPTR,A
0038B6         ?C0026?CS_SCALE_PROC:
  292: 			if(R_AD_FilTimes<=3)
0038B6 D3                SETB    C
0038B7 904C82            MOV     DPTR,#R_AD_FilTimes+01H
0038BA E0                MOVX    A,@DPTR
0038BB 9403              SUBB    A,#03H
0038BD 904C81            MOV     DPTR,#R_AD_FilTimes
0038C0 E0                MOVX    A,@DPTR
0038C1 9400              SUBB    A,#00H
0038C3 500F              JNC     ?C0027?CS_SCALE_PROC
  293: 				R_AD_F3 = R_AD_BUF;
0038C5 904E05            MOV     DPTR,#R_AD_BUF
0038C8 E0                MOVX    A,@DPTR
0038C9 FF                MOV     R7,A
0038CA A3                INC     DPTR
0038CB E0                MOVX    A,@DPTR
0038CC 904C89            MOV     DPTR,#R_AD_F3
0038CF CF                XCH     A,R7
0038D0 F0                MOVX    @DPTR,A
0038D1 A3                INC     DPTR
0038D2 EF                MOV     A,R7
0038D3 F0                MOVX    @DPTR,A
0038D4         ?C0027?CS_SCALE_PROC:
  294: 			if(R_AD_FilTimes<=4)
0038D4 904C81            MOV     DPTR,#R_AD_FilTimes
0038D7 E0                MOVX    A,@DPTR
0038D8 FE                MOV     R6,A
0038D9 A3                INC     DPTR
0038DA E0                MOVX    A,@DPTR
0038DB FF                MOV     R7,A
0038DC D3                SETB    C
0038DD 9404              SUBB    A,#04H
0038DF EE                MOV     A,R6
0038E0 9400              SUBB    A,#00H
0038E2 500F              JNC     ?C0028?CS_SCALE_PROC
  295: 				R_AD_F4 = R_AD_BUF;
0038E4 904E05            MOV     DPTR,#R_AD_BUF
0038E7 E0                MOVX    A,@DPTR
0038E8 FD                MOV     R5,A
0038E9 A3                INC     DPTR
0038EA E0                MOVX    A,@DPTR
0038EB 904C8B            MOV     DPTR,#R_AD_F4
0038EE CD                XCH     A,R5
0038EF F0                MOVX    @DPTR,A
0038F0 A3                INC     DPTR
0038F1 ED                MOV     A,R5
0038F2 F0                MOVX    @DPTR,A
0038F3         ?C0028?CS_SCALE_PROC:
  296: 			if(R_AD_FilTimes<=5)
0038F3 D3                SETB    C
0038F4 EF                MOV     A,R7
0038F5 9405              SUBB    A,#05H
0038F7 EE                MOV     A,R6
0038F8 9400              SUBB    A,#00H
0038FA 500F              JNC     ?C0029?CS_SCALE_PROC
  297: 				R_AD_F5 = R_AD_BUF;
0038FC 904E05            MOV     DPTR,#R_AD_BUF
0038FF E0                MOVX    A,@DPTR
003900 FF                MOV     R7,A
003901 A3                INC     DPTR
003902 E0                MOVX    A,@DPTR
003903 904C8D            MOV     DPTR,#R_AD_F5
003906 CF                XCH     A,R7
003907 F0                MOVX    @DPTR,A
003908 A3                INC     DPTR
003909 EF                MOV     A,R7
00390A F0                MOVX    @DPTR,A
00390B         ?C0029?CS_SCALE_PROC:
  298: 			if(R_AD_FilTimes<=6)
00390B D3                SETB    C
00390C 904C82            MOV     DPTR,#R_AD_FilTimes+01H
00390F E0                MOVX    A,@DPTR
003910 9406              SUBB    A,#06H
003912 904C81            MOV     DPTR,#R_AD_FilTimes
003915 E0                MOVX    A,@DPTR
003916 9400              SUBB    A,#00H
003918 500F              JNC     ?C0030?CS_SCALE_PROC
  299: 				R_AD_F6 = R_AD_BUF;
00391A 904E05            MOV     DPTR,#R_AD_BUF
00391D E0                MOVX    A,@DPTR
00391E FF                MOV     R7,A
00391F A3                INC     DPTR
003920 E0                MOVX    A,@DPTR
003921 904C8F            MOV     DPTR,#R_AD_F6
003924 CF                XCH     A,R7
003925 F0                MOVX    @DPTR,A
003926 A3                INC     DPTR
003927 EF                MOV     A,R7
003928 F0                MOVX    @DPTR,A
003929         ?C0030?CS_SCALE_PROC:
  300: 			if(R_AD_FilTimes<=7)
003929 904C81            MOV     DPTR,#R_AD_FilTimes
00392C E0                MOVX    A,@DPTR
00392D FE                MOV     R6,A
00392E A3                INC     DPTR
00392F E0                MOVX    A,@DPTR
003930 FF                MOV     R7,A
003931 D3                SETB    C
003932 9407              SUBB    A,#07H
003934 EE                MOV     A,R6
003935 9400              SUBB    A,#00H
003937 500F              JNC     ?C0031?CS_SCALE_PROC
  301: 				R_AD_F7 = R_AD_BUF;
003939 904E05            MOV     DPTR,#R_AD_BUF
00393C E0                MOVX    A,@DPTR
00393D FD                MOV     R5,A
00393E A3                INC     DPTR
00393F E0                MOVX    A,@DPTR
003940 904C91            MOV     DPTR,#R_AD_F7
003943 CD                XCH     A,R5
003944 F0                MOVX    @DPTR,A
003945 A3                INC     DPTR
003946 ED                MOV     A,R5
003947 F0                MOVX    @DPTR,A
003948         ?C0031?CS_SCALE_PROC:
  302: 			if(R_AD_FilTimes<=8)
003948 D3                SETB    C
003949 EF                MOV     A,R7
00394A 9408              SUBB    A,#08H
00394C EE                MOV     A,R6
00394D 9400              SUBB    A,#00H
00394F 500F              JNC     ?C0032?CS_SCALE_PROC
  303: 				R_AD_F8 = R_AD_BUF;
003951 904E05            MOV     DPTR,#R_AD_BUF
003954 E0                MOVX    A,@DPTR
003955 FF                MOV     R7,A
003956 A3                INC     DPTR
003957 E0                MOVX    A,@DPTR
003958 904C93            MOV     DPTR,#R_AD_F8
00395B CF                XCH     A,R7
00395C F0                MOVX    @DPTR,A
00395D A3                INC     DPTR
00395E EF                MOV     A,R7
00395F F0                MOVX    @DPTR,A
003960         ?C0032?CS_SCALE_PROC:
  304: 			if(R_AD_FilTimes>8)
003960 D3                SETB    C
003961 904C82            MOV     DPTR,#R_AD_FilTimes+01H
003964 E0                MOVX    A,@DPTR
003965 9408              SUBB    A,#08H
003967 904C81            MOV     DPTR,#R_AD_FilTimes
00396A E0                MOVX    A,@DPTR
00396B 9400              SUBB    A,#00H
00396D 4078              JC      ?C0033?CS_SCALE_PROC
  305: 				{
  306: 				R_AD_F1 = R_AD_F2;
00396F 904C87            MOV     DPTR,#R_AD_F2
003972 E0                MOVX    A,@DPTR
003973 FF                MOV     R7,A
003974 A3                INC     DPTR
003975 E0                MOVX    A,@DPTR
003976 904C85            MOV     DPTR,#R_AD_F1
003979 CF                XCH     A,R7
00397A F0                MOVX    @DPTR,A
00397B A3                INC     DPTR
00397C EF                MOV     A,R7
00397D F0                MOVX    @DPTR,A
  307: 				R_AD_F2 = R_AD_F3;
00397E 904C89            MOV     DPTR,#R_AD_F3
003981 E0                MOVX    A,@DPTR
003982 FF                MOV     R7,A
003983 A3                INC     DPTR
003984 E0                MOVX    A,@DPTR
003985 904C87            MOV     DPTR,#R_AD_F2
003988 CF                XCH     A,R7
003989 F0                MOVX    @DPTR,A
00398A A3                INC     DPTR
00398B EF                MOV     A,R7
00398C F0                MOVX    @DPTR,A
  308: 				R_AD_F3 = R_AD_F4;
00398D 904C8B            MOV     DPTR,#R_AD_F4
003990 E0                MOVX    A,@DPTR
003991 FF                MOV     R7,A
003992 A3                INC     DPTR
003993 E0                MOVX    A,@DPTR
003994 904C89            MOV     DPTR,#R_AD_F3
003997 CF                XCH     A,R7
003998 F0                MOVX    @DPTR,A
003999 A3                INC     DPTR
00399A EF                MOV     A,R7
00399B F0                MOVX    @DPTR,A
  309: 				R_AD_F4 = R_AD_F5;
00399C 904C8D            MOV     DPTR,#R_AD_F5
00399F E0                MOVX    A,@DPTR
0039A0 FF                MOV     R7,A
0039A1 A3                INC     DPTR
0039A2 E0                MOVX    A,@DPTR
0039A3 904C8B            MOV     DPTR,#R_AD_F4
0039A6 CF                XCH     A,R7
0039A7 F0                MOVX    @DPTR,A
0039A8 A3                INC     DPTR
0039A9 EF                MOV     A,R7
0039AA F0                MOVX    @DPTR,A
  310: 				R_AD_F5 = R_AD_F6;
0039AB 904C8F            MOV     DPTR,#R_AD_F6
0039AE E0                MOVX    A,@DPTR
0039AF FF                MOV     R7,A
0039B0 A3                INC     DPTR
0039B1 E0                MOVX    A,@DPTR
0039B2 904C8D            MOV     DPTR,#R_AD_F5
0039B5 CF                XCH     A,R7
0039B6 F0                MOVX    @DPTR,A
0039B7 A3                INC     DPTR
0039B8 EF                MOV     A,R7
0039B9 F0                MOVX    @DPTR,A
  311: 				R_AD_F6 = R_AD_F7;
0039BA 904C91            MOV     DPTR,#R_AD_F7
0039BD E0                MOVX    A,@DPTR
0039BE FF                MOV     R7,A
0039BF A3                INC     DPTR
0039C0 E0                MOVX    A,@DPTR
0039C1 904C8F            MOV     DPTR,#R_AD_F6
0039C4 CF                XCH     A,R7
0039C5 F0                MOVX    @DPTR,A
0039C6 A3                INC     DPTR
0039C7 EF                MOV     A,R7
0039C8 F0                MOVX    @DPTR,A
  312: 				R_AD_F7 = R_AD_F8;
0039C9 904C93            MOV     DPTR,#R_AD_F8
0039CC E0                MOVX    A,@DPTR
0039CD FF                MOV     R7,A
0039CE A3                INC     DPTR
0039CF E0                MOVX    A,@DPTR
0039D0 904C91            MOV     DPTR,#R_AD_F7
0039D3 CF                XCH     A,R7
0039D4 F0                MOVX    @DPTR,A
0039D5 A3                INC     DPTR
0039D6 EF                MOV     A,R7
0039D7 F0                MOVX    @DPTR,A
  313: 				R_AD_F8 = R_AD_BUF;
0039D8 904E05            MOV     DPTR,#R_AD_BUF
0039DB E0                MOVX    A,@DPTR
0039DC FF                MOV     R7,A
0039DD A3                INC     DPTR
0039DE E0                MOVX    A,@DPTR
0039DF 904C93            MOV     DPTR,#R_AD_F8
0039E2 CF                XCH     A,R7
0039E3 F0                MOVX    @DPTR,A
0039E4 A3                INC     DPTR
0039E5 EF                MOV     A,R7
0039E6 F0                MOVX    @DPTR,A
  314: 				}
0039E7         ?C0033?CS_SCALE_PROC:
  315: 
  316: 		ad_temp	= R_AD_F1;
0039E7 904C85            MOV     DPTR,#R_AD_F1
0039EA E0                MOVX    A,@DPTR
0039EB FE                MOV     R6,A
0039EC A3                INC     DPTR
0039ED E0                MOVX    A,@DPTR
0039EE FF                MOV     R7,A
0039EF E4                CLR     A
0039F0 FC                MOV     R4,A
0039F1 FD                MOV     R5,A
0039F2 904E07            MOV     DPTR,#ad_temp
0039F5 120332            LCALL   ?C?LSTXDATA
  317: 		ad_temp	+= R_AD_F2;
0039F8 904E07            MOV     DPTR,#ad_temp
0039FB E0                MOVX    A,@DPTR
0039FC F8                MOV     R0,A
0039FD A3                INC     DPTR
0039FE E0                MOVX    A,@DPTR
0039FF F9                MOV     R1,A
003A00 A3                INC     DPTR
003A01 E0                MOVX    A,@DPTR
003A02 FA                MOV     R2,A
003A03 A3                INC     DPTR
003A04 E0                MOVX    A,@DPTR
003A05 FB                MOV     R3,A
003A06 904C87            MOV     DPTR,#R_AD_F2
003A09 E0                MOVX    A,@DPTR
003A0A FE                MOV     R6,A
003A0B A3                INC     DPTR
003A0C E0                MOVX    A,@DPTR
003A0D FF                MOV     R7,A
003A0E E4                CLR     A
003A0F FC                MOV     R4,A
003A10 FD                MOV     R5,A
003A11 EB                MOV     A,R3
003A12 2F                ADD     A,R7
003A13 FF                MOV     R7,A
003A14 EA                MOV     A,R2
003A15 3E                ADDC    A,R6
003A16 FE                MOV     R6,A
003A17 ED                MOV     A,R5
003A18 39                ADDC    A,R1
003A19 FD                MOV     R5,A
003A1A EC                MOV     A,R4
003A1B 38                ADDC    A,R0
003A1C FC                MOV     R4,A
003A1D 904E07            MOV     DPTR,#ad_temp
003A20 120332            LCALL   ?C?LSTXDATA
  318: 		ad_temp	+= R_AD_F3;
003A23 904E07            MOV     DPTR,#ad_temp
003A26 E0                MOVX    A,@DPTR
003A27 F8                MOV     R0,A
003A28 A3                INC     DPTR
003A29 E0                MOVX    A,@DPTR
003A2A F9                MOV     R1,A
003A2B A3                INC     DPTR
003A2C E0                MOVX    A,@DPTR
003A2D FA                MOV     R2,A
003A2E A3                INC     DPTR
003A2F E0                MOVX    A,@DPTR
003A30 FB                MOV     R3,A
003A31 904C89            MOV     DPTR,#R_AD_F3
003A34 E0                MOVX    A,@DPTR
003A35 FE                MOV     R6,A
003A36 A3                INC     DPTR
003A37 E0                MOVX    A,@DPTR
003A38 FF                MOV     R7,A
003A39 E4                CLR     A
003A3A FC                MOV     R4,A
003A3B FD                MOV     R5,A
003A3C EB                MOV     A,R3
003A3D 2F                ADD     A,R7
003A3E FF                MOV     R7,A
003A3F EA                MOV     A,R2
003A40 3E                ADDC    A,R6
003A41 FE                MOV     R6,A
003A42 ED                MOV     A,R5
003A43 39                ADDC    A,R1
003A44 FD                MOV     R5,A
003A45 EC                MOV     A,R4
003A46 38                ADDC    A,R0
003A47 FC                MOV     R4,A
003A48 904E07            MOV     DPTR,#ad_temp
003A4B 120332            LCALL   ?C?LSTXDATA
  319: 		ad_temp	+= R_AD_F4;
003A4E 904E07            MOV     DPTR,#ad_temp
003A51 E0                MOVX    A,@DPTR
003A52 F8                MOV     R0,A
003A53 A3                INC     DPTR
003A54 E0                MOVX    A,@DPTR
003A55 F9                MOV     R1,A
003A56 A3                INC     DPTR
003A57 E0                MOVX    A,@DPTR
003A58 FA                MOV     R2,A
003A59 A3                INC     DPTR
003A5A E0                MOVX    A,@DPTR
003A5B FB                MOV     R3,A
003A5C 904C8B            MOV     DPTR,#R_AD_F4
003A5F E0                MOVX    A,@DPTR
003A60 FE                MOV     R6,A
003A61 A3                INC     DPTR
003A62 E0                MOVX    A,@DPTR
003A63 FF                MOV     R7,A
003A64 E4                CLR     A
003A65 FC                MOV     R4,A
003A66 FD                MOV     R5,A
003A67 EB                MOV     A,R3
003A68 2F                ADD     A,R7
003A69 FF                MOV     R7,A
003A6A EA                MOV     A,R2
003A6B 3E                ADDC    A,R6
003A6C FE                MOV     R6,A
003A6D ED                MOV     A,R5
003A6E 39                ADDC    A,R1
003A6F FD                MOV     R5,A
003A70 EC                MOV     A,R4
003A71 38                ADDC    A,R0
003A72 FC                MOV     R4,A
003A73 904E07            MOV     DPTR,#ad_temp
003A76 120332            LCALL   ?C?LSTXDATA
  320: 		ad_temp	+= R_AD_F5;
003A79 904E07            MOV     DPTR,#ad_temp
003A7C E0                MOVX    A,@DPTR
003A7D F8                MOV     R0,A
003A7E A3                INC     DPTR
003A7F E0                MOVX    A,@DPTR
003A80 F9                MOV     R1,A
003A81 A3                INC     DPTR
003A82 E0                MOVX    A,@DPTR
003A83 FA                MOV     R2,A
003A84 A3                INC     DPTR
003A85 E0                MOVX    A,@DPTR
003A86 FB                MOV     R3,A
003A87 904C8D            MOV     DPTR,#R_AD_F5
003A8A E0                MOVX    A,@DPTR
003A8B FE                MOV     R6,A
003A8C A3                INC     DPTR
003A8D E0                MOVX    A,@DPTR
003A8E FF                MOV     R7,A
003A8F E4                CLR     A
003A90 FC                MOV     R4,A
003A91 FD                MOV     R5,A
003A92 EB                MOV     A,R3
003A93 2F                ADD     A,R7
003A94 FF                MOV     R7,A
003A95 EA                MOV     A,R2
003A96 3E                ADDC    A,R6
003A97 FE                MOV     R6,A
003A98 ED                MOV     A,R5
003A99 39                ADDC    A,R1
003A9A FD                MOV     R5,A
003A9B EC                MOV     A,R4
003A9C 38                ADDC    A,R0
003A9D FC                MOV     R4,A
003A9E 904E07            MOV     DPTR,#ad_temp
003AA1 120332            LCALL   ?C?LSTXDATA
  321: 		ad_temp	+= R_AD_F6;
003AA4 904E07            MOV     DPTR,#ad_temp
003AA7 E0                MOVX    A,@DPTR
003AA8 F8                MOV     R0,A
003AA9 A3                INC     DPTR
003AAA E0                MOVX    A,@DPTR
003AAB F9                MOV     R1,A
003AAC A3                INC     DPTR
003AAD E0                MOVX    A,@DPTR
003AAE FA                MOV     R2,A
003AAF A3                INC     DPTR
003AB0 E0                MOVX    A,@DPTR
003AB1 FB                MOV     R3,A
003AB2 904C8F            MOV     DPTR,#R_AD_F6
003AB5 E0                MOVX    A,@DPTR
003AB6 FE                MOV     R6,A
003AB7 A3                INC     DPTR
003AB8 E0                MOVX    A,@DPTR
003AB9 FF                MOV     R7,A
003ABA E4                CLR     A
003ABB FC                MOV     R4,A
003ABC FD                MOV     R5,A
003ABD EB                MOV     A,R3
003ABE 2F                ADD     A,R7
003ABF FF                MOV     R7,A
003AC0 EA                MOV     A,R2
003AC1 3E                ADDC    A,R6
003AC2 FE                MOV     R6,A
003AC3 ED                MOV     A,R5
003AC4 39                ADDC    A,R1
003AC5 FD                MOV     R5,A
003AC6 EC                MOV     A,R4
003AC7 38                ADDC    A,R0
003AC8 FC                MOV     R4,A
003AC9 904E07            MOV     DPTR,#ad_temp
003ACC 120332            LCALL   ?C?LSTXDATA
  322: 		ad_temp	+= R_AD_F7;
003ACF 904E07            MOV     DPTR,#ad_temp
003AD2 E0                MOVX    A,@DPTR
003AD3 F8                MOV     R0,A
003AD4 A3                INC     DPTR
003AD5 E0                MOVX    A,@DPTR
003AD6 F9                MOV     R1,A
003AD7 A3                INC     DPTR
003AD8 E0                MOVX    A,@DPTR
003AD9 FA                MOV     R2,A
003ADA A3                INC     DPTR
003ADB E0                MOVX    A,@DPTR
003ADC FB                MOV     R3,A
003ADD 904C91            MOV     DPTR,#R_AD_F7
003AE0 E0                MOVX    A,@DPTR
003AE1 FE                MOV     R6,A
003AE2 A3                INC     DPTR
003AE3 E0                MOVX    A,@DPTR
003AE4 FF                MOV     R7,A
003AE5 E4                CLR     A
003AE6 FC                MOV     R4,A
003AE7 FD                MOV     R5,A
003AE8 EB                MOV     A,R3
003AE9 2F                ADD     A,R7
003AEA FF                MOV     R7,A
003AEB EA                MOV     A,R2
003AEC 3E                ADDC    A,R6
003AED FE                MOV     R6,A
003AEE ED                MOV     A,R5
003AEF 39                ADDC    A,R1
003AF0 FD                MOV     R5,A
003AF1 EC                MOV     A,R4
003AF2 38                ADDC    A,R0
003AF3 FC                MOV     R4,A
003AF4 904E07            MOV     DPTR,#ad_temp
003AF7 120332            LCALL   ?C?LSTXDATA
  323: 		ad_temp	+= R_AD_F8;
003AFA 904E07            MOV     DPTR,#ad_temp
003AFD E0                MOVX    A,@DPTR
003AFE F8                MOV     R0,A
003AFF A3                INC     DPTR
003B00 E0                MOVX    A,@DPTR
003B01 F9                MOV     R1,A
003B02 A3                INC     DPTR
003B03 E0                MOVX    A,@DPTR
003B04 FA                MOV     R2,A
003B05 A3                INC     DPTR
003B06 E0                MOVX    A,@DPTR
003B07 FB                MOV     R3,A
003B08 904C93            MOV     DPTR,#R_AD_F8
003B0B E0                MOVX    A,@DPTR
003B0C FE                MOV     R6,A
003B0D A3                INC     DPTR
003B0E E0                MOVX    A,@DPTR
003B0F FF                MOV     R7,A
003B10 E4                CLR     A
003B11 FC                MOV     R4,A
003B12 FD                MOV     R5,A
003B13 EB                MOV     A,R3
003B14 2F                ADD     A,R7
003B15 FF                MOV     R7,A
003B16 EA                MOV     A,R2
003B17 3E                ADDC    A,R6
003B18 FE                MOV     R6,A
003B19 ED                MOV     A,R5
003B1A 39                ADDC    A,R1
003B1B FD                MOV     R5,A
003B1C EC                MOV     A,R4
003B1D 38                ADDC    A,R0
003B1E FC                MOV     R4,A
003B1F 904E07            MOV     DPTR,#ad_temp
003B22 120332            LCALL   ?C?LSTXDATA
  324: 
  325: 		R_AD_BUF = ad_temp / 8 ;
003B25 E4                CLR     A
003B26 7B08              MOV     R3,#08H
003B28 FA                MOV     R2,A
003B29 F9                MOV     R1,A
003B2A F8                MOV     R0,A
003B2B 904E07            MOV     DPTR,#ad_temp
003B2E E0                MOVX    A,@DPTR
003B2F FC                MOV     R4,A
003B30 A3                INC     DPTR
003B31 E0                MOVX    A,@DPTR
003B32 FD                MOV     R5,A
003B33 A3                INC     DPTR
003B34 E0                MOVX    A,@DPTR
003B35 FE                MOV     R6,A
003B36 A3                INC     DPTR
003B37 E0                MOVX    A,@DPTR
003B38 FF                MOV     R7,A
003B39 120269            LCALL   ?C?ULDIV
003B3C 904E05            MOV     DPTR,#R_AD_BUF
003B3F EE                MOV     A,R6
003B40 F0                MOVX    @DPTR,A
003B41 A3                INC     DPTR
003B42 EF                MOV     A,R7
003B43 F0                MOVX    @DPTR,A
  326: 		R_AD_BUF_OLD	=	R_AD_BUF;
003B44 904C83            MOV     DPTR,#R_AD_BUF_OLD
003B47 EE                MOV     A,R6
003B48 F0                MOVX    @DPTR,A
003B49 A3                INC     DPTR
003B4A EF                MOV     A,R7
003B4B F0                MOVX    @DPTR,A
  327: 		}
003B4C         ?C0023?CS_SCALE_PROC:
  328: 	return	R_AD_BUF;
003B4C 904E05            MOV     DPTR,#R_AD_BUF
003B4F E0                MOVX    A,@DPTR
003B50 FE                MOV     R6,A
003B51 A3                INC     DPTR
003B52 E0                MOVX    A,@DPTR
003B53 FF                MOV     R7,A
  329: }
003B54 22                RET     
----- FUNCTION _CS_Scale_AdcFilter (END) -------


----- FUNCTION _CS_MemoryWeightClear_Timer (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  887: void CS_MemoryWeightClear_Timer(u8_t option)
  888: {
;---- Variable 'option' assigned to Register 'R7' ----
  889: 	static u8_t xdata timecount; 				//计时变量
  890: 	static u8_t xdata B_Timeout;
  891: 
  892: 	if(option==StartClearMemWeightTimer)
003B55 EF                MOV     A,R7
003B56 B40107            CJNE    A,#01H,?C0124?CS_SCALE_PROC
  893: 		{
  894: 		timecount=0;
003B59 E4                CLR     A
003B5A 904CA9            MOV     DPTR,#timecount
003B5D F0                MOVX    @DPTR,A
  895: 		B_Timeout = false;
003B5E A3                INC     DPTR
003B5F F0                MOVX    @DPTR,A
  896: 		}
003B60         ?C0124?CS_SCALE_PROC:
  897: 
  898: 	if(option==MemWeightTimerInc)
003B60 EF                MOV     A,R7
003B61 B4020C            CJNE    A,#02H,?C0125?CS_SCALE_PROC
  899: 		{
  900: 		if(timecount<255 ) 
003B64 904CA9            MOV     DPTR,#timecount
003B67 E0                MOVX    A,@DPTR
003B68 C3                CLR     C
003B69 94FF              SUBB    A,#0FFH
003B6B 5003              JNC     ?C0125?CS_SCALE_PROC
  901: 		timecount++;
003B6D E0                MOVX    A,@DPTR
003B6E 04                INC     A
003B6F F0                MOVX    @DPTR,A
  902: 		}
003B70         ?C0125?CS_SCALE_PROC:
  903: 	
  904: 	if(B_Timeout == false)
003B70 904CAA            MOV     DPTR,#B_Timeout
003B73 E0                MOVX    A,@DPTR
003B74 7014              JNZ     ?C0129?CS_SCALE_PROC
  905: 		{
  906: 		if(timecount>SoftTimerTimeOut)
003B76 904CA9            MOV     DPTR,#timecount
003B79 E0                MOVX    A,@DPTR
003B7A D3                SETB    C
003B7B 9496              SUBB    A,#096H
003B7D 400B              JC      ?C0129?CS_SCALE_PROC
  907: 			{
  908: 			B_Timeout = true;
003B7F A3                INC     DPTR
003B80 7401              MOV     A,#01H
003B82 F0                MOVX    @DPTR,A
  909: 			R_Weight_Mem = 0;	//时间到清记忆重量
003B83 E4                CLR     A
003B84 904CC3            MOV     DPTR,#R_Weight_Mem
003B87 F0                MOVX    @DPTR,A
003B88 A3                INC     DPTR
003B89 F0                MOVX    @DPTR,A
  910: 			}
  911: 		}
  912: }
003B8A         ?C0129?CS_SCALE_PROC:
003B8A 22                RET     
----- FUNCTION _CS_MemoryWeightClear_Timer (END) -------


----- FUNCTION CS_1186Com_ReadAdc_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  145: void CS_1186Com_ReadAdc_Proc(void)
  146: {
  147: 	u32_t	data_rec;
  148: 	
  149: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAd)
003B8B 904D55            MOV     DPTR,#R_Weight_Com_Coo
003B8E E0                MOVX    A,@DPTR
003B8F B4801F            CJNE    A,#080H,?C0020?CS_COMMTO1186
  150: 		{
  151: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadAd,0);
003B92 7B00              MOV     R3,#00H
003B94 7A00              MOV     R2,#00H
003B96 7900              MOV     R1,#00H
003B98 7F80              MOV     R7,#080H
003B9A 121917            LCALL   _CS_CommTo1186_SendCmd
  152: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadAd;
003B9D 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
003BA0 7480              MOV     A,#080H
003BA2 F0                MOVX    @DPTR,A
  153: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadAdStandby;
003BA3 904D55            MOV     DPTR,#R_Weight_Com_Coo
003BA6 7401              MOV     A,#01H
003BA8 F0                MOVX    @DPTR,A
  154: 		uartTimeoutCnt=0;
003BA9 E4                CLR     A
003BAA 904D68            MOV     DPTR,#uartTimeoutCnt
003BAD F0                MOVX    @DPTR,A
  155: 		YC_UARTClearBuffer();
003BAE 120592            LCALL   YC_UARTClearBuffer
  156: 		}
003BB1         ?C0020?CS_COMMTO1186:
  157: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAdStandby)
003BB1 904D55            MOV     DPTR,#R_Weight_Com_Coo
003BB4 E0                MOVX    A,@DPTR
003BB5 6401              XRL     A,#01H
003BB7 6002              JZ      $ + 4H
003BB9 815F              AJMP    ?C0028?CS_COMMTO1186
  158: 		{						
  159: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 9)==9)
003BBB 7B01              MOV     R3,#01H
003BBD 7A4D              MOV     R2,#HIGH uartRcvBuf
003BBF 7945              MOV     R1,#LOW uartRcvBuf
003BC1 7D09              MOV     R5,#09H
003BC3 FC                MOV     R4,A
003BC4 1207A8            LCALL   _YC_UARTReciveDataExpected
003BC7 EF                MOV     A,R7
003BC8 6409              XRL     A,#09H
003BCA 4E                ORL     A,R6
003BCB 6002              JZ      $ + 4H
003BCD 815F              AJMP    ?C0028?CS_COMMTO1186
  160: 			{						
  161: 			if(uartRcvBuf[3] == CS_CommTo1186_ReadAd)   
003BCF 904D48            MOV     DPTR,#uartRcvBuf+03H
003BD2 E0                MOVX    A,@DPTR
003BD3 6480              XRL     A,#080H
003BD5 6002              JZ      $ + 4H
003BD7 8159              AJMP    ?C0023?CS_COMMTO1186
  162: 				{
  163: 				
  164: 				
  165: 				R_1186sys_state = uartRcvBuf[7];
003BD9 904D4C            MOV     DPTR,#uartRcvBuf+07H
003BDC E0                MOVX    A,@DPTR
003BDD 904CDA            MOV     DPTR,#R_1186sys_state
003BE0 F0                MOVX    @DPTR,A
  166: 
  167: 				if(R_1186sys_state&0x08)			//AD数据更新标志
003BE1 30E35C            JNB     ACC.3,?C0024?CS_COMMTO1186
  168: 					{
  169: 					B_Weight_AdOk = true;
003BE4 904CD7            MOV     DPTR,#B_Weight_AdOk
003BE7 7401              MOV     A,#01H
003BE9 F0                MOVX    @DPTR,A
  170: 					data_rec = uartRcvBuf[4];
003BEA 904D49            MOV     DPTR,#uartRcvBuf+04H
003BED E0                MOVX    A,@DPTR
003BEE FF                MOV     R7,A
003BEF E4                CLR     A
003BF0 FC                MOV     R4,A
003BF1 FD                MOV     R5,A
003BF2 FE                MOV     R6,A
;---- Variable 'data_rec' assigned to Register 'R4/R5/R6/R7' ----
  171: 					data_rec = (data_rec<<8) + uartRcvBuf[5];
003BF3 7808              MOV     R0,#08H
003BF5 12031F            LCALL   ?C?LSHL
003BF8 A804              MOV     R0,AR4
003BFA A905              MOV     R1,AR5
003BFC AA06              MOV     R2,AR6
003BFE AB07              MOV     R3,AR7
003C00 A3                INC     DPTR
003C01 E0                MOVX    A,@DPTR
003C02 FF                MOV     R7,A
003C03 E4                CLR     A
003C04 FC                MOV     R4,A
003C05 FD                MOV     R5,A
003C06 FE                MOV     R6,A
003C07 EB                MOV     A,R3
003C08 2F                ADD     A,R7
003C09 FF                MOV     R7,A
003C0A EE                MOV     A,R6
003C0B 3A                ADDC    A,R2
003C0C FE                MOV     R6,A
003C0D ED                MOV     A,R5
003C0E 39                ADDC    A,R1
003C0F FD                MOV     R5,A
003C10 EC                MOV     A,R4
003C11 38                ADDC    A,R0
003C12 FC                MOV     R4,A
  172: 					data_rec = (data_rec<<8) + uartRcvBuf[6];
003C13 7808              MOV     R0,#08H
003C15 12031F            LCALL   ?C?LSHL
003C18 A804              MOV     R0,AR4
003C1A A905              MOV     R1,AR5
003C1C AA06              MOV     R2,AR6
003C1E AB07              MOV     R3,AR7
003C20 A3                INC     DPTR
003C21 E0                MOVX    A,@DPTR
003C22 FF                MOV     R7,A
003C23 E4                CLR     A
003C24 FC                MOV     R4,A
003C25 FD                MOV     R5,A
003C26 FE                MOV     R6,A
003C27 EB                MOV     A,R3
003C28 2F                ADD     A,R7
003C29 FF                MOV     R7,A
003C2A EE                MOV     A,R6
003C2B 3A                ADDC    A,R2
003C2C FE                MOV     R6,A
003C2D ED                MOV     A,R5
003C2E 39                ADDC    A,R1
003C2F FD                MOV     R5,A
003C30 EC                MOV     A,R4
003C31 38                ADDC    A,R0
003C32 FC                MOV     R4,A
  173: 					R_AD_Original =data_rec >> 6;	
003C33 7806              MOV     R0,#06H
003C35 12030C            LCALL   ?C?ULSHR
003C38 904CD8            MOV     DPTR,#R_AD_Original
003C3B EE                MOV     A,R6
003C3C F0                MOVX    @DPTR,A
003C3D A3                INC     DPTR
003C3E EF                MOV     A,R7
003C3F F0                MOVX    @DPTR,A
  174: 					}
003C40         ?C0024?CS_COMMTO1186:
  175: 				
  176: 				if(R_Scale_state==CS_Scale_state_init)
003C40 904CC5            MOV     DPTR,#R_Scale_state
003C43 E0                MOVX    A,@DPTR
003C44 7006              JNZ     ?C0025?CS_COMMTO1186
  177: 					R_Weight_Com_Coo.now = CS_CommTo1186_Null;
003C46 904D55            MOV     DPTR,#R_Weight_Com_Coo
003C49 F0                MOVX    @DPTR,A
003C4A 8006              SJMP    ?C0026?CS_COMMTO1186
003C4C         ?C0025?CS_COMMTO1186:
  178: 				else
  179: 					R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplay;
003C4C 904D55            MOV     DPTR,#R_Weight_Com_Coo
003C4F 74E0              MOV     A,#0E0H
003C51 F0                MOVX    @DPTR,A
003C52         ?C0026?CS_COMMTO1186:
  180: 				R_Weight_Com_Coo.sucess=true;
003C52 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
003C55 7401              MOV     A,#01H
003C57 F0                MOVX    @DPTR,A
  181: 				
  182: 				}
003C58 22                RET     
003C59         ?C0023?CS_COMMTO1186:
  183: 			else
  184: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
003C59 904D68            MOV     DPTR,#uartTimeoutCnt
003C5C 7415              MOV     A,#015H
003C5E F0                MOVX    @DPTR,A
  185: 			}
  186: 		}
  187: }
003C5F         ?C0028?CS_COMMTO1186:
003C5F 22                RET     
----- FUNCTION CS_1186Com_ReadAdc_Proc (END) -------


----- FUNCTION CS_1186Com_ReadAdZero_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  359: void CS_1186Com_ReadAdZero_Proc(void)
  360: {
  361: 	u32_t	data_rec;
  362: 	u16_t	R_AD_Zero;
  363: 	
  364: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAdZero)
003C60 904D55            MOV     DPTR,#R_Weight_Com_Coo
003C63 E0                MOVX    A,@DPTR
003C64 B4851F            CJNE    A,#085H,?C0055?CS_COMMTO1186
  365: 		{
  366: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadAdZero,0);
003C67 7B00              MOV     R3,#00H
003C69 7A00              MOV     R2,#00H
003C6B 7900              MOV     R1,#00H
003C6D 7F85              MOV     R7,#085H
003C6F 121917            LCALL   _CS_CommTo1186_SendCmd
  367: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadAdZero;
003C72 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
003C75 7485              MOV     A,#085H
003C77 F0                MOVX    @DPTR,A
  368: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadAdZeroStandby;
003C78 904D55            MOV     DPTR,#R_Weight_Com_Coo
003C7B 7406              MOV     A,#06H
003C7D F0                MOVX    @DPTR,A
  369: 		uartTimeoutCnt=0;
003C7E E4                CLR     A
003C7F 904D68            MOV     DPTR,#uartTimeoutCnt
003C82 F0                MOVX    @DPTR,A
  370: 		YC_UARTClearBuffer();
003C83 120592            LCALL   YC_UARTClearBuffer
  371: 		}
003C86         ?C0055?CS_COMMTO1186:
  372: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAdZeroStandby)
003C86 904D55            MOV     DPTR,#R_Weight_Com_Coo
003C89 E0                MOVX    A,@DPTR
003C8A 6406              XRL     A,#06H
003C8C 6002              JZ      $ + 4H
003C8E A110              AJMP    ?C0060?CS_COMMTO1186
  373: 		{						
  374: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 8)==8)
003C90 7B01              MOV     R3,#01H
003C92 7A4D              MOV     R2,#HIGH uartRcvBuf
003C94 7945              MOV     R1,#LOW uartRcvBuf
003C96 7D08              MOV     R5,#08H
003C98 FC                MOV     R4,A
003C99 1207A8            LCALL   _YC_UARTReciveDataExpected
003C9C EF                MOV     A,R7
003C9D 6408              XRL     A,#08H
003C9F 4E                ORL     A,R6
003CA0 706E              JNZ     ?C0060?CS_COMMTO1186
  375: 			{						
  376: 			if(uartRcvBuf[3] == CS_CommTo1186_ReadAdZero)   
003CA2 904D48            MOV     DPTR,#uartRcvBuf+03H
003CA5 E0                MOVX    A,@DPTR
003CA6 6485              XRL     A,#085H
003CA8 7060              JNZ     ?C0058?CS_COMMTO1186
  377: 				{
  378: 				data_rec = uartRcvBuf[4];
003CAA A3                INC     DPTR
003CAB E0                MOVX    A,@DPTR
003CAC FF                MOV     R7,A
003CAD E4                CLR     A
003CAE FC                MOV     R4,A
003CAF FD                MOV     R5,A
003CB0 FE                MOV     R6,A
;---- Variable 'data_rec' assigned to Register 'R4/R5/R6/R7' ----
  379: 				data_rec = (data_rec<<8) + uartRcvBuf[5];
003CB1 7808              MOV     R0,#08H
003CB3 12031F            LCALL   ?C?LSHL
003CB6 A804              MOV     R0,AR4
003CB8 A905              MOV     R1,AR5
003CBA AA06              MOV     R2,AR6
003CBC AB07              MOV     R3,AR7
003CBE A3                INC     DPTR
003CBF E0                MOVX    A,@DPTR
003CC0 FF                MOV     R7,A
003CC1 E4                CLR     A
003CC2 FC                MOV     R4,A
003CC3 FD                MOV     R5,A
003CC4 FE                MOV     R6,A
003CC5 EB                MOV     A,R3
003CC6 2F                ADD     A,R7
003CC7 FF                MOV     R7,A
003CC8 EE                MOV     A,R6
003CC9 3A                ADDC    A,R2
003CCA FE                MOV     R6,A
003CCB ED                MOV     A,R5
003CCC 39                ADDC    A,R1
003CCD FD                MOV     R5,A
003CCE EC                MOV     A,R4
003CCF 38                ADDC    A,R0
003CD0 FC                MOV     R4,A
  380: 				data_rec = (data_rec<<8) + uartRcvBuf[6];
003CD1 7808              MOV     R0,#08H
003CD3 12031F            LCALL   ?C?LSHL
003CD6 A804              MOV     R0,AR4
003CD8 A905              MOV     R1,AR5
003CDA AA06              MOV     R2,AR6
003CDC AB07              MOV     R3,AR7
003CDE A3                INC     DPTR
003CDF E0                MOVX    A,@DPTR
003CE0 FF                MOV     R7,A
003CE1 E4                CLR     A
003CE2 FC                MOV     R4,A
003CE3 FD                MOV     R5,A
003CE4 FE                MOV     R6,A
003CE5 EB                MOV     A,R3
003CE6 2F                ADD     A,R7
003CE7 FF                MOV     R7,A
003CE8 EE                MOV     A,R6
003CE9 3A                ADDC    A,R2
003CEA FE                MOV     R6,A
003CEB ED                MOV     A,R5
003CEC 39                ADDC    A,R1
003CED FD                MOV     R5,A
003CEE EC                MOV     A,R4
003CEF 38                ADDC    A,R0
003CF0 FC                MOV     R4,A
  381: 				R_AD_Zero =data_rec >> 6;	
003CF1 7806              MOV     R0,#06H
003CF3 12030C            LCALL   ?C?ULSHR
;---- Variable 'R_AD_Zero' assigned to Register 'R6/R7' ----
  382: 				CS_Scale_ZeroProc(SetRunningZero,R_AD_Zero);
003CF6 AD07              MOV     R5,AR7
003CF8 AC06              MOV     R4,AR6
003CFA 7F06              MOV     R7,#06H
003CFC 12349A            LCALL   _CS_Scale_ZeroProc
  383: 				
  384: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
003CFF E4                CLR     A
003D00 904D55            MOV     DPTR,#R_Weight_Com_Coo
003D03 F0                MOVX    @DPTR,A
  385: 				R_Weight_Com_Coo.sucess=true;
003D04 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
003D07 04                INC     A
003D08 F0                MOVX    @DPTR,A
  386: 				
  387: 				}
003D09 22                RET     
003D0A         ?C0058?CS_COMMTO1186:
  388: 			else
  389: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
003D0A 904D68            MOV     DPTR,#uartTimeoutCnt
003D0D 7415              MOV     A,#015H
003D0F F0                MOVX    @DPTR,A
  390: 			}
  391: 		}
  392: }
003D10         ?C0060?CS_COMMTO1186:
003D10 22                RET     
----- FUNCTION CS_1186Com_ReadAdZero_Proc (END) -------


----- FUNCTION CS_ScaleDisplay (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
   14: void CS_ScaleDisplay()
   15: {
   16: 	u32_t weight_temp;
   17: 	
   18: 	if(R_Display_Err==CS_ScaleDisplay_L_err)	//提示信息显示
003D11 904CC2            MOV     DPTR,#R_Display_Err
003D14 E0                MOVX    A,@DPTR
003D15 6404              XRL     A,#04H
003D17 7037              JNZ     ?C0001?CS_SCALEDISPLAY
   19: 		{
   20: 		if(CS_Scale_JudgeOverLoad(GetIfOverLoad)== true)	
003D19 7F01              MOV     R7,#01H
003D1B 1217EF            LCALL   _CS_Scale_JudgeOverLoad
003D1E BF0108            CJNE    R7,#01H,?C0002?CS_SCALEDISPLAY
   21: 			CS_ScaleDisplay_FreshBuf(DisplayOverLoad,0);			
003D21 E4                CLR     A
003D22 FD                MOV     R5,A
003D23 FC                MOV     R4,A
003D24 7F85              MOV     R7,#085H
003D26 121DCE            LCALL   _CS_ScaleDisplay_FreshBuf
003D29         ?C0002?CS_SCALEDISPLAY:
   22: 		if(CS_Scale_JudgeLowBat(GetIfLowBat)== true)
003D29 7F01              MOV     R7,#01H
003D2B 1217DD            LCALL   _CS_Scale_JudgeLowBat
003D2E BF0108            CJNE    R7,#01H,?C0003?CS_SCALEDISPLAY
   23: 			CS_ScaleDisplay_FreshBuf(DisplayLowBat,0);	
003D31 E4                CLR     A
003D32 FD                MOV     R5,A
003D33 FC                MOV     R4,A
003D34 7F86              MOV     R7,#086H
003D36 121DCE            LCALL   _CS_ScaleDisplay_FreshBuf
003D39         ?C0003?CS_SCALEDISPLAY:
   24: 		if(CS_Scale_ZeroProc(GetIfZeroErr,0)==true)
003D39 E4                CLR     A
003D3A FD                MOV     R5,A
003D3B FC                MOV     R4,A
003D3C 7F09              MOV     R7,#09H
003D3E 12349A            LCALL   _CS_Scale_ZeroProc
003D41 EF                MOV     A,R7
003D42 6401              XRL     A,#01H
003D44 4E                ORL     A,R6
003D45 6002              JZ      $ + 4H
003D47 A1D8              AJMP    ?C0005?CS_SCALEDISPLAY
   25: 			CS_ScaleDisplay_FreshBuf(DisplayZeroErr,0);
003D49 FD                MOV     R5,A
003D4A FC                MOV     R4,A
003D4B 7F87              MOV     R7,#087H
003D4D 021DCE            LJMP    _CS_ScaleDisplay_FreshBuf
   26: 		return;
   27: 		}
003D50         ?C0001?CS_SCALEDISPLAY:
   28: 	if(R_Selet_Unit == CS_ScaleDisplay_L_kg)
003D50 904CC6            MOV     DPTR,#R_Selet_Unit
003D53 E0                MOVX    A,@DPTR
003D54 7015              JNZ     ?C0006?CS_SCALEDISPLAY
   29: 		{
   30: 		R_UnitWeight.kg = R_UnitWeight.origin;
003D56 904CC9            MOV     DPTR,#R_UnitWeight
003D59 E0                MOVX    A,@DPTR
003D5A FE                MOV     R6,A
003D5B A3                INC     DPTR
003D5C E0                MOVX    A,@DPTR
003D5D FF                MOV     R7,A
003D5E A3                INC     DPTR
003D5F EE                MOV     A,R6
003D60 F0                MOVX    @DPTR,A
003D61 FC                MOV     R4,A
003D62 A3                INC     DPTR
003D63 EF                MOV     A,R7
003D64 F0                MOVX    @DPTR,A
003D65 FD                MOV     R5,A
   31: 		CS_ScaleDisplay_FreshBuf(Displaykg,R_UnitWeight.kg);
003D66 7F41              MOV     R7,#041H
003D68 121DCE            LCALL   _CS_ScaleDisplay_FreshBuf
   32: 		}
003D6B         ?C0006?CS_SCALEDISPLAY:
   33: 	if(R_Selet_Unit == CS_ScaleDisplay_L_gongjin)
003D6B 904CC6            MOV     DPTR,#R_Selet_Unit
003D6E E0                MOVX    A,@DPTR
003D6F B40215            CJNE    A,#02H,?C0007?CS_SCALEDISPLAY
   34: 		{
   35: 		R_UnitWeight.kg = R_UnitWeight.origin;
003D72 904CC9            MOV     DPTR,#R_UnitWeight
003D75 E0                MOVX    A,@DPTR
003D76 FE                MOV     R6,A
003D77 A3                INC     DPTR
003D78 E0                MOVX    A,@DPTR
003D79 FF                MOV     R7,A
003D7A A3                INC     DPTR
003D7B EE                MOV     A,R6
003D7C F0                MOVX    @DPTR,A
003D7D FC                MOV     R4,A
003D7E A3                INC     DPTR
003D7F EF                MOV     A,R7
003D80 F0                MOVX    @DPTR,A
003D81 FD                MOV     R5,A
   36: 		CS_ScaleDisplay_FreshBuf(Displaygongjin,R_UnitWeight.kg);
003D82 7F44              MOV     R7,#044H
003D84 121DCE            LCALL   _CS_ScaleDisplay_FreshBuf
   37: 		}
003D87         ?C0007?CS_SCALEDISPLAY:
   38: 	if(R_Selet_Unit == CS_ScaleDisplay_L_jin)
003D87 904CC6            MOV     DPTR,#R_Selet_Unit
003D8A E0                MOVX    A,@DPTR
003D8B B4031B            CJNE    A,#03H,?C0008?CS_SCALEDISPLAY
   39: 		{
   40: 		R_UnitWeight.jin = R_UnitWeight.origin *2;
003D8E 904CCA            MOV     DPTR,#R_UnitWeight+01H
003D91 E0                MOVX    A,@DPTR
003D92 25E0              ADD     A,ACC
003D94 FF                MOV     R7,A
003D95 904CC9            MOV     DPTR,#R_UnitWeight
003D98 E0                MOVX    A,@DPTR
003D99 33                RLC     A
003D9A FE                MOV     R6,A
003D9B 904CD1            MOV     DPTR,#R_UnitWeight+08H
003D9E F0                MOVX    @DPTR,A
003D9F FC                MOV     R4,A
003DA0 A3                INC     DPTR
003DA1 EF                MOV     A,R7
003DA2 F0                MOVX    @DPTR,A
003DA3 FD                MOV     R5,A
   41: 		CS_ScaleDisplay_FreshBuf(Displayjin,R_UnitWeight.jin);
003DA4 7F43              MOV     R7,#043H
003DA6 121DCE            LCALL   _CS_ScaleDisplay_FreshBuf
   42: 		}				
003DA9         ?C0008?CS_SCALEDISPLAY:
   43:        if(R_Selet_Unit == CS_ScaleDisplay_L_lb )
003DA9 904CC6            MOV     DPTR,#R_Selet_Unit
003DAC E0                MOVX    A,@DPTR
003DAD B40128            CJNE    A,#01H,?C0005?CS_SCALEDISPLAY
   44:        	{
   45: 		weight_temp   = (u32_t) R_UnitWeight.origin *22046;
003DB0 904CC9            MOV     DPTR,#R_UnitWeight
003DB3 E0                MOVX    A,@DPTR
003DB4 FE                MOV     R6,A
003DB5 A3                INC     DPTR
003DB6 E0                MOVX    A,@DPTR
003DB7 FF                MOV     R7,A
003DB8 7C56              MOV     R4,#056H
003DBA 7D1E              MOV     R5,#01EH
003DBC 1203C8            LCALL   ?C?LIMUL
;---- Variable 'weight_temp' assigned to Register 'R4/R5/R6/R7' ----
   46: 		R_UnitWeight.lb = weight_temp / 10000;
003DBF E4                CLR     A
003DC0 7B10              MOV     R3,#010H
003DC2 7A27              MOV     R2,#027H
003DC4 F9                MOV     R1,A
003DC5 F8                MOV     R0,A
003DC6 120269            LCALL   ?C?ULDIV
003DC9 904CCD            MOV     DPTR,#R_UnitWeight+04H
003DCC EE                MOV     A,R6
003DCD F0                MOVX    @DPTR,A
003DCE FC                MOV     R4,A
003DCF A3                INC     DPTR
003DD0 EF                MOV     A,R7
003DD1 F0                MOVX    @DPTR,A
003DD2 FD                MOV     R5,A
   47: 		CS_ScaleDisplay_FreshBuf(Displaylb,R_UnitWeight.lb);
003DD3 7F42              MOV     R7,#042H
003DD5 121DCE            LCALL   _CS_ScaleDisplay_FreshBuf
   48:        	}		
   49: }
003DD8         ?C0005?CS_SCALEDISPLAY:
003DD8 22                RET     
----- FUNCTION CS_ScaleDisplay (END) -------


----- FUNCTION CS_ScaleDisplay_LcdBuf_rShift4 (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  242: void CS_ScaleDisplay_LcdBuf_rShift4()
  243: {
  244: 	CS_lcd_showbuf[4] = (CS_lcd_showbuf[4] & 0xf0) | (CS_lcd_showbuf[3] & 0x0f);
  245: 	CS_lcd_showbuf[3] = (CS_lcd_showbuf[3] & 0xf0) | (CS_lcd_showbuf[2] & 0x0f);
003DD9 904D26            MOV     DPTR,#CS_lcd_showbuf+03H
003DDC E0                MOVX    A,@DPTR
003DDD 540F              ANL     A,#0FH
003DDF FF                MOV     R7,A
003DE0 A3                INC     DPTR
003DE1 E0                MOVX    A,@DPTR
003DE2 54F0              ANL     A,#0F0H
003DE4 4F                ORL     A,R7
003DE5 F0                MOVX    @DPTR,A
  246: 	CS_lcd_showbuf[2] = (CS_lcd_showbuf[2] & 0xf0) | (CS_lcd_showbuf[1] & 0x0f);
003DE6 904D25            MOV     DPTR,#CS_lcd_showbuf+02H
003DE9 E0                MOVX    A,@DPTR
003DEA 540F              ANL     A,#0FH
003DEC FF                MOV     R7,A
003DED A3                INC     DPTR
003DEE E0                MOVX    A,@DPTR
003DEF 54F0              ANL     A,#0F0H
003DF1 4F                ORL     A,R7
003DF2 F0                MOVX    @DPTR,A
  247: 	CS_lcd_showbuf[1] = (CS_lcd_showbuf[1] & 0xf0) | (CS_lcd_showbuf[0] & 0x0f);
003DF3 904D24            MOV     DPTR,#CS_lcd_showbuf+01H
003DF6 E0                MOVX    A,@DPTR
003DF7 540F              ANL     A,#0FH
003DF9 FF                MOV     R7,A
003DFA A3                INC     DPTR
003DFB E0                MOVX    A,@DPTR
003DFC 54F0              ANL     A,#0F0H
003DFE 4F                ORL     A,R7
003DFF F0                MOVX    @DPTR,A
  248: 	CS_lcd_showbuf[0] = CS_lcd_showbuf[0] & 0xf0;
003E00 904D23            MOV     DPTR,#CS_lcd_showbuf
003E03 E0                MOVX    A,@DPTR
003E04 540F              ANL     A,#0FH
003E06 FF                MOV     R7,A
003E07 A3                INC     DPTR
003E08 E0                MOVX    A,@DPTR
003E09 54F0              ANL     A,#0F0H
003E0B 4F                ORL     A,R7
003E0C F0                MOVX    @DPTR,A
  249: 
003E0D 904D23            MOV     DPTR,#CS_lcd_showbuf
003E10 E0                MOVX    A,@DPTR
003E11 54F0              ANL     A,#0F0H
003E13 FF                MOV     R7,A
003E14 F0                MOVX    @DPTR,A
003E15 FD                MOV     R5,A
  250: 	//清显示缓存数字部分
  251: 	CS_Lcd_Send_Data[0]  &= 0x0f;
003E16 904D28            MOV     DPTR,#CS_Lcd_Send_Data
003E19 E0                MOVX    A,@DPTR
003E1A 540F              ANL     A,#0FH
003E1C F0                MOVX    @DPTR,A
  252: 	CS_Lcd_Send_Data[1]  &= 0x08;
003E1D A3                INC     DPTR
003E1E E0                MOVX    A,@DPTR
003E1F 5408              ANL     A,#08H
003E21 F0                MOVX    @DPTR,A
  253: 	CS_Lcd_Send_Data[2]  &= 0x08;
003E22 A3                INC     DPTR
003E23 E0                MOVX    A,@DPTR
003E24 5408              ANL     A,#08H
003E26 F0                MOVX    @DPTR,A
  254: 	CS_Lcd_Send_Data[3]  &= 0x08;
003E27 A3                INC     DPTR
003E28 E0                MOVX    A,@DPTR
003E29 5408              ANL     A,#08H
003E2B F0                MOVX    @DPTR,A
  255: 	CS_Lcd_Send_Data[4]  &= 0xf8;
003E2C A3                INC     DPTR
003E2D E0                MOVX    A,@DPTR
003E2E 54F8              ANL     A,#0F8H
003E30 F0                MOVX    @DPTR,A
  256: 
  257: 	//显示缓存数字部分重新赋值
  258: 	CS_Lcd_Send_Data[0]  |= CS_lcd_showbuf[0];
003E31 904D28            MOV     DPTR,#CS_Lcd_Send_Data
003E34 E0                MOVX    A,@DPTR
003E35 4D                ORL     A,R5
003E36 F0                MOVX    @DPTR,A
  259: 	CS_Lcd_Send_Data[1]  |= CS_lcd_showbuf[1];
003E37 A3                INC     DPTR
003E38 E0                MOVX    A,@DPTR
003E39 FF                MOV     R7,A
003E3A 904D24            MOV     DPTR,#CS_lcd_showbuf+01H
003E3D E0                MOVX    A,@DPTR
003E3E FE                MOV     R6,A
003E3F EF                MOV     A,R7
003E40 4E                ORL     A,R6
003E41 904D29            MOV     DPTR,#CS_Lcd_Send_Data+01H
003E44 F0                MOVX    @DPTR,A
  260: 	CS_Lcd_Send_Data[2]  |= CS_lcd_showbuf[2];
003E45 A3                INC     DPTR
003E46 E0                MOVX    A,@DPTR
003E47 FF                MOV     R7,A
003E48 904D25            MOV     DPTR,#CS_lcd_showbuf+02H
003E4B E0                MOVX    A,@DPTR
003E4C FE                MOV     R6,A
003E4D EF                MOV     A,R7
003E4E 4E                ORL     A,R6
003E4F 904D2A            MOV     DPTR,#CS_Lcd_Send_Data+02H
003E52 F0                MOVX    @DPTR,A
  261: 	CS_Lcd_Send_Data[3]  |= CS_lcd_showbuf[3];
003E53 A3                INC     DPTR
003E54 E0                MOVX    A,@DPTR
003E55 FF                MOV     R7,A
003E56 904D26            MOV     DPTR,#CS_lcd_showbuf+03H
003E59 E0                MOVX    A,@DPTR
003E5A FE                MOV     R6,A
003E5B EF                MOV     A,R7
003E5C 4E                ORL     A,R6
003E5D 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
003E60 F0                MOVX    @DPTR,A
  262: 	CS_Lcd_Send_Data[4]  |= CS_lcd_showbuf[4];
003E61 A3                INC     DPTR
003E62 E0                MOVX    A,@DPTR
003E63 FF                MOV     R7,A
003E64 904D27            MOV     DPTR,#CS_lcd_showbuf+04H
003E67 E0                MOVX    A,@DPTR
003E68 FE                MOV     R6,A
003E69 EF                MOV     A,R7
003E6A 4E                ORL     A,R6
003E6B 904D2C            MOV     DPTR,#CS_Lcd_Send_Data+04H
003E6E F0                MOVX    @DPTR,A
  263: 		
  264: }
003E6F 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdBuf_rShift4 (END) -------


----- FUNCTION CS_ScaleDisplay_LcdShowNull (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  297: void CS_ScaleDisplay_LcdShowNull(void)
  298: {
  299: 	CS_Lcd_Send_Data[0] = 0x00;
  300: 	CS_Lcd_Send_Data[1] = 0x00;
003E70 E4                CLR     A
003E71 904D28            MOV     DPTR,#CS_Lcd_Send_Data
003E74 F0                MOVX    @DPTR,A
  301: 	CS_Lcd_Send_Data[2] = 0x00;
003E75 A3                INC     DPTR
003E76 F0                MOVX    @DPTR,A
  302: 	CS_Lcd_Send_Data[3] = 0x00;
003E77 A3                INC     DPTR
003E78 F0                MOVX    @DPTR,A
  303: 	CS_Lcd_Send_Data[4] = 0x00;
003E79 A3                INC     DPTR
003E7A F0                MOVX    @DPTR,A
  304: }
003E7B A3                INC     DPTR
003E7C F0                MOVX    @DPTR,A
  305: 
003E7D 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdShowNull (END) -------


----- FUNCTION CS_ScaleDisplay_LcdShowAll (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  315: void CS_ScaleDisplay_LcdShowAll(void)
  316: {
  317: 	CS_Lcd_Send_Data[0] = 0xFF;
  318: 	CS_Lcd_Send_Data[1] = 0xFF;
003E7E 904D28            MOV     DPTR,#CS_Lcd_Send_Data
003E81 74FF              MOV     A,#0FFH
003E83 F0                MOVX    @DPTR,A
  319: 	CS_Lcd_Send_Data[2] = 0xFF;
003E84 A3                INC     DPTR
003E85 F0                MOVX    @DPTR,A
  320: 	CS_Lcd_Send_Data[3] = 0xFF;
003E86 A3                INC     DPTR
003E87 F0                MOVX    @DPTR,A
  321: 	CS_Lcd_Send_Data[4] = 0xFF;
003E88 A3                INC     DPTR
003E89 F0                MOVX    @DPTR,A
  322: }
003E8A A3                INC     DPTR
003E8B F0                MOVX    @DPTR,A
  323: 
003E8C 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdShowAll (END) -------


----- FUNCTION CS_ScaleDisplay_LcdBackup (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  325: void CS_ScaleDisplay_LcdBackup(void)
  326: {
  327: 	CS_Lcd_Send_Data_BAK[0] = CS_Lcd_Send_Data[0];
  328: 	CS_Lcd_Send_Data_BAK[1] = CS_Lcd_Send_Data[1];
003E8D 904D28            MOV     DPTR,#CS_Lcd_Send_Data
003E90 E0                MOVX    A,@DPTR
003E91 904D1D            MOV     DPTR,#CS_Lcd_Send_Data_BAK
003E94 F0                MOVX    @DPTR,A
  329: 	CS_Lcd_Send_Data_BAK[2] = CS_Lcd_Send_Data[2];
003E95 904D29            MOV     DPTR,#CS_Lcd_Send_Data+01H
003E98 E0                MOVX    A,@DPTR
003E99 904D1E            MOV     DPTR,#CS_Lcd_Send_Data_BAK+01H
003E9C F0                MOVX    @DPTR,A
  330: 	CS_Lcd_Send_Data_BAK[3] = CS_Lcd_Send_Data[3];
003E9D 904D2A            MOV     DPTR,#CS_Lcd_Send_Data+02H
003EA0 E0                MOVX    A,@DPTR
003EA1 904D1F            MOV     DPTR,#CS_Lcd_Send_Data_BAK+02H
003EA4 F0                MOVX    @DPTR,A
  331: 	CS_Lcd_Send_Data_BAK[4] = CS_Lcd_Send_Data[4];	
003EA5 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
003EA8 E0                MOVX    A,@DPTR
003EA9 904D20            MOV     DPTR,#CS_Lcd_Send_Data_BAK+03H
003EAC F0                MOVX    @DPTR,A
  332: }
003EAD 904D2C            MOV     DPTR,#CS_Lcd_Send_Data+04H
003EB0 E0                MOVX    A,@DPTR
003EB1 904D21            MOV     DPTR,#CS_Lcd_Send_Data_BAK+04H
003EB4 F0                MOVX    @DPTR,A
  333: 
003EB5 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdBackup (END) -------


