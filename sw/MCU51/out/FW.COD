LX51 LINKER/LOCATER V4.41                                                               04/19/2017  12:00:50  PAGE 1





ASSEMBLER CODE PACKING OF MODULE:  OUT\FW (MAIN)


----- FUNCTION main (BEGIN) -----
 FILE: 'main.c'
   20: void main()
   21: {
   22: 	R_Test++;
   23: 	systemInit();
0004C2 904C62            MOV     DPTR,#R_Test
0004C5 E0                MOVX    A,@DPTR
0004C6 04                INC     A
0004C7 F0                MOVX    @DPTR,A
   24: 	while(1) {
0004C8 120FEC            LCALL   systemInit
0004CB         ?C0001?MAIN:
   25: 		BTControlProcess();
   26: 		lxOptProcess();
0004CB 121822            LCALL   BTControlProcess
   27: 		//WechatProcess();
0004CE 121AAD            LCALL   lxOptProcess
   28: 		SysStatusProcess();
0004D1 B1A2              ACALL   SysStatusProcess
   29: 		if(sys_state == SYS_ST_RUN) {
0004D3 904E5C            MOV     DPTR,#sys_state
0004D6 E0                MOVX    A,@DPTR
0004D7 B402F1            CJNE    A,#02H,?C0001?MAIN
   30: 			YC_UtilTimerProcess();		
0004DA 12223F            LCALL   YC_UtilTimerProcess
   31: 			CS_Scale_1186Com();		//1186通信处理
0004DD 91E5              ACALL   CS_Scale_1186Com
   32: 			CS_Scale_Proc();
0004DF 122B08            LCALL   CS_Scale_Proc
   33: 		}
   34: 	}
0004E2 80E7              SJMP    ?C0001?MAIN
0004E4 22                RET     
----- FUNCTION main (END) -------


----- FUNCTION CS_Scale_1186Com (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   31: void CS_Scale_1186Com(void)
   32: {	
   33: 	
   34: 	if(uartTimeoutCnt < CS_CommTo1186_TimeOut)	 
0004E5 904D68            MOV     DPTR,#uartTimeoutCnt
0004E8 E0                MOVX    A,@DPTR
0004E9 C3                CLR     C
0004EA 9415              SUBB    A,#015H
0004EC 502B              JNC     ?C0003?CS_COMMTO1186
   35: 		{
   36: 		
   37: 			switch(R_Scale_state)
0004EE 904CC5            MOV     DPTR,#R_Scale_state
0004F1 E0                MOVX    A,@DPTR
0004F2 24FE              ADD     A,#0FEH
0004F4 6014              JZ      ?C0006?CS_COMMTO1186
0004F6 04                INC     A
0004F7 24FC              ADD     A,#0FCH
0004F9 5016              JNC     ?C0009?CS_COMMTO1186
0004FB 2405              ADD     A,#05H
0004FD 702D              JNZ     ?C0013?CS_COMMTO1186
   38: 			{
   39: 			case CS_Scale_state_init:
0004FF         ?C0005?CS_COMMTO1186:
   40: 				CS_1186Com_Reset_Proc();			
0004FF F101              ACALL   CS_1186Com_Reset_Proc
   41: 				CS_1186Com_ReadMacAdress_Proc();
000501 123708            LCALL   CS_1186Com_ReadMacAdress_Proc
   42: 				CS_1186Com_ReadTime_Proc();
000504 B1E2              ACALL   CS_1186Com_ReadTime_Proc
   43: 				CS_1186Com_SetOpenWeight_Proc();
000506 F11B              ACALL   CS_1186Com_SetOpenWeight_Proc
   44: 				CS_1186Com_SetLcd_Proc();
000508 8023              SJMP    CS_1186Com_SetLcd_Proc
   45: 				break;			
   46: 			case CS_Scale_state_standby:
00050A         ?C0006?CS_COMMTO1186:
   47: 				CS_1186Com_SetSleepMode_Proc();
00050A D16D              ACALL   CS_1186Com_SetSleepMode_Proc
   48: 				CS_1186Com_ReadAdZero_Proc();
00050C 123892            LCALL   CS_1186Com_ReadAdZero_Proc
   49: 				CS_1186Com_SetLcd_Proc();
00050F 801C              SJMP    CS_1186Com_SetLcd_Proc
   50: 				break;
   51: 			case CS_Scale_state_weighting:
   52: 			case CS_Scale_state_caling:
   53: 			case CS_Scale_state_locking:
000511         ?C0009?CS_COMMTO1186:
   54: 				CS_1186Com_ReadTime_Proc();
000511 B1E2              ACALL   CS_1186Com_ReadTime_Proc
   55: 				CS_1186Com_ReadAdc_Proc();
000513 1237BC            LCALL   CS_1186Com_ReadAdc_Proc
   56: 				CS_1186Com_SetLcd_Proc();
000516 8015              SJMP    CS_1186Com_SetLcd_Proc
   57: 
   58: 				/*
   59: 				if(B_Weight_AdOk == true)
   60: 					{
   61: 					R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplay;
   62: 					B_Weight_LcdOk =false;
   63: 					}
   64: 				if(B_Weight_LcdOk == true)
   65: 					{
   66: 					R_Weight_Com_Coo.now = CS_CommTo1186_ReadAd;	
   67: 					}
   68: 				*/
   69: 				break;
   70: 			default:
   71: 				break;			
   72: 			}		
   73: 		}
000518 22                RET     
000519         ?C0003?CS_COMMTO1186:
   74: 	else
   75: 		{
   76: 		YC_UARTClearBuffer();	// fresh rec buffer
000519 B192              ACALL   YC_UARTClearBuffer
   77: 		uartTimeoutCnt=0;
00051B E4                CLR     A
00051C 904D68            MOV     DPTR,#uartTimeoutCnt
00051F F0                MOVX    @DPTR,A
   78: 		if(R_Weight_Com_Coo.now !=CS_CommTo1186_Null)
000520 904D55            MOV     DPTR,#R_Weight_Com_Coo
000523 E0                MOVX    A,@DPTR
000524 6006              JZ      ?C0013?CS_COMMTO1186
   79: 		R_Weight_Com_Coo.now = R_Weight_Com_Coo.pre;	//re send
000526 A3                INC     DPTR
000527 E0                MOVX    A,@DPTR
000528 904D55            MOV     DPTR,#R_Weight_Com_Coo
00052B F0                MOVX    @DPTR,A
   80: 		}
   81: 
   82: }
00052C         ?C0013?CS_COMMTO1186:
00052C 22                RET     
----- FUNCTION CS_Scale_1186Com (END) -------


----- FUNCTION CS_1186Com_SetLcd_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  191: void CS_1186Com_SetLcd_Proc(void)
  192: {
  193: 
  194: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_LcdDisplay)
00052D 904D55            MOV     DPTR,#R_Weight_Com_Coo
000530 E0                MOVX    A,@DPTR
000531 B4E01E            CJNE    A,#0E0H,?C0029?CS_COMMTO1186
  195: 		{
  196: 		CS_CommTo1186_SendCmd(CS_CommTo1186_LcdDisplay,CS_Lcd_Send_Data);
000534 7B01              MOV     R3,#01H
000536 7A4D              MOV     R2,#HIGH CS_Lcd_Send_Data
000538 7928              MOV     R1,#LOW CS_Lcd_Send_Data
00053A 7FE0              MOV     R7,#0E0H
00053C 122481            LCALL   _CS_CommTo1186_SendCmd
  197: 		R_Weight_Com_Coo.pre = CS_CommTo1186_LcdDisplay;
00053F 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
000542 74E0              MOV     A,#0E0H
000544 F0                MOVX    @DPTR,A
  198: 		R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplayStandby;
000545 904D55            MOV     DPTR,#R_Weight_Com_Coo
000548 740B              MOV     A,#0BH
00054A F0                MOVX    @DPTR,A
  199: 		uartTimeoutCnt=0;
00054B E4                CLR     A
00054C 904D68            MOV     DPTR,#uartTimeoutCnt
00054F F0                MOVX    @DPTR,A
  200: 		YC_UARTClearBuffer();
000550 B192              ACALL   YC_UARTClearBuffer
  201: 		}
000552         ?C0029?CS_COMMTO1186:
  202: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_LcdDisplayStandby)
000552 904D55            MOV     DPTR,#R_Weight_Com_Coo
000555 E0                MOVX    A,@DPTR
000556 640B              XRL     A,#0BH
000558 7037              JNZ     ?C0036?CS_COMMTO1186
  203: 		{
  204: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 5)==5)
00055A 7B01              MOV     R3,#01H
00055C 7A4D              MOV     R2,#HIGH uartRcvBuf
00055E 7945              MOV     R1,#LOW uartRcvBuf
000560 7D05              MOV     R5,#05H
000562 FC                MOV     R4,A
000563 F1A8              ACALL   _YC_UARTReciveDataExpected
000565 EF                MOV     A,R7
000566 6405              XRL     A,#05H
000568 4E                ORL     A,R6
000569 7026              JNZ     ?C0036?CS_COMMTO1186
  205: 			{
  206: 			if(uartRcvBuf[3] == CS_CommTo1186_LcdDisplay)    
00056B 904D48            MOV     DPTR,#uartRcvBuf+03H
00056E E0                MOVX    A,@DPTR
00056F B4E019            CJNE    A,#0E0H,?C0032?CS_COMMTO1186
  207: 				{
  208: 				if(R_Scale_state==CS_Scale_state_init)
000572 904CC5            MOV     DPTR,#R_Scale_state
000575 E0                MOVX    A,@DPTR
000576 7006              JNZ     ?C0033?CS_COMMTO1186
  209: 					R_Weight_Com_Coo.now = CS_CommTo1186_Null;
000578 904D55            MOV     DPTR,#R_Weight_Com_Coo
00057B F0                MOVX    @DPTR,A
00057C 8006              SJMP    ?C0034?CS_COMMTO1186
00057E         ?C0033?CS_COMMTO1186:
  210: 				else
  211: 					R_Weight_Com_Coo.now = CS_CommTo1186_ReadAd;
00057E 904D55            MOV     DPTR,#R_Weight_Com_Coo
000581 7480              MOV     A,#080H
000583 F0                MOVX    @DPTR,A
000584         ?C0034?CS_COMMTO1186:
  212: 				R_Weight_Com_Coo.sucess=true;		
000584 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
000587 7401              MOV     A,#01H
000589 F0                MOVX    @DPTR,A
  213: 				}
00058A 22                RET     
00058B         ?C0032?CS_COMMTO1186:
  214: 			else
  215: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
00058B 904D68            MOV     DPTR,#uartTimeoutCnt
00058E 7415              MOV     A,#015H
000590 F0                MOVX    @DPTR,A
  216: 			}	
  217: 		}
  218: }
000591         ?C0036?CS_COMMTO1186:
000591 22                RET     
----- FUNCTION CS_1186Com_SetLcd_Proc (END) -------


----- FUNCTION YC_UARTClearBuffer (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  409: void YC_UARTClearBuffer(void)
  410: {
  411: 	REG_UART_RX_PTR_R = REG_UART_RX_PTR_W;
  412: 	//REG_UART_TX_PTR_W = REG_UART_TX_PTR_R;
000592 908116            MOV     DPTR,#08116H
000595 E0                MOVX    A,@DPTR
000596 FF                MOV     R7,A
000597 A3                INC     DPTR
000598 E0                MOVX    A,@DPTR
000599 908058            MOV     DPTR,#08058H
00059C CF                XCH     A,R7
00059D F0                MOVX    @DPTR,A
00059E A3                INC     DPTR
00059F EF                MOV     A,R7
0005A0 F0                MOVX    @DPTR,A
  413: }
0005A1 22                RET     
----- FUNCTION YC_UARTClearBuffer (END) -------


----- FUNCTION SysStatusProcess (BEGIN) -----
 FILE: 'system.c'
  174: void SysStatusProcess(void) 
  175: {
  176: 	if( sys_state == SYS_ST_IDLE) {	//can enter LPM
  177: 		if(bleConnStatus ==BLE_STATUS_DISCONN)
0005A2 904E5C            MOV     DPTR,#sys_state
0005A5 E0                MOVX    A,@DPTR
0005A6 B40121            CJNE    A,#01H,?C0029?SYSTEM
  178: 		{
0005A9 904C5B            MOV     DPTR,#bleConnStatus
0005AC E0                MOVX    A,@DPTR
0005AD 7032              JNZ     ?C0034?SYSTEM
  179: 			YC_UARTWaitSendData();
  180: 			YC_UARTClearBuffer();
0005AF D15B              ACALL   YC_UARTWaitSendData
  181: 		    	LPM_ENABLE();
0005B1 B192              ACALL   YC_UARTClearBuffer
  182: 
0005B3 9049FE            MOV     DPTR,#049FEH
0005B6 7401              MOV     A,#01H
0005B8 F0                MOVX    @DPTR,A
  183: 			btCmdBuf.len = 0x01;
0005B9 904C63            MOV     DPTR,#btCmdBuf
0005BC F0                MOVX    @DPTR,A
  184: 			btCmdBuf.DATA[0] = CS_CMD_SLEEP_REQ;
0005BD A3                INC     DPTR
0005BE 7420              MOV     A,#020H
0005C0 F0                MOVX    @DPTR,A
  185: 			BT_CmdFifoIn(&btCmdBuf);
0005C1 7B01              MOV     R3,#01H
0005C3 7A4C              MOV     R2,#HIGH btCmdBuf
0005C5 7963              MOV     R1,#LOW btCmdBuf
0005C7 021E04            LJMP    _BT_CmdFifoIn
  186: 
  187: 				
  188: 		}
  189: 	}
0005CA         ?C0029?SYSTEM:
  190: 	else if( sys_state == SYS_ST_SLEEP) {//can enter LPM
0005CA 904E5C            MOV     DPTR,#sys_state
0005CD E0                MOVX    A,@DPTR
0005CE B4030B            CJNE    A,#03H,?C0032?SYSTEM
  191: 		YC_UARTWaitSendData();
0005D1 D15B              ACALL   YC_UARTWaitSendData
  192: 		YC_UARTClearBuffer();
0005D3 B192              ACALL   YC_UARTClearBuffer
  193: 	    	LPM_ENABLE();
0005D5 9049FE            MOV     DPTR,#049FEH
0005D8 7401              MOV     A,#01H
0005DA F0                MOVX    @DPTR,A
  194: 	} 
0005DB 22                RET     
0005DC         ?C0032?SYSTEM:
  195: 	else {
  196: 		LPM_DISABLE();
0005DC 9049FE            MOV     DPTR,#049FEH
0005DF E4                CLR     A
0005E0 F0                MOVX    @DPTR,A
  197: 	}
  198: }
0005E1         ?C0034?SYSTEM:
0005E1 22                RET     
----- FUNCTION SysStatusProcess (END) -------


----- FUNCTION CS_1186Com_ReadTime_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  222: void CS_1186Com_ReadTime_Proc(void)
  223: {
  224: 	//static u8_t xdata temp=0;
  225: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadTime)
0005E2 904D55            MOV     DPTR,#R_Weight_Com_Coo
0005E5 E0                MOVX    A,@DPTR
0005E6 B4821E            CJNE    A,#082H,?C0037?CS_COMMTO1186
  226: 		{
  227: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadTime,0);
0005E9 7B00              MOV     R3,#00H
0005EB 7A00              MOV     R2,#00H
0005ED 7900              MOV     R1,#00H
0005EF 7F82              MOV     R7,#082H
0005F1 122481            LCALL   _CS_CommTo1186_SendCmd
  228: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadTime;
0005F4 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
0005F7 7482              MOV     A,#082H
0005F9 F0                MOVX    @DPTR,A
  229: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadTimeStandby;
0005FA 904D55            MOV     DPTR,#R_Weight_Com_Coo
0005FD 7403              MOV     A,#03H
0005FF F0                MOVX    @DPTR,A
  230: 		uartTimeoutCnt=0;
000600 E4                CLR     A
000601 904D68            MOV     DPTR,#uartTimeoutCnt
000604 F0                MOVX    @DPTR,A
  231: 		YC_UARTClearBuffer();
000605 B192              ACALL   YC_UARTClearBuffer
  232: 		}
000607         ?C0037?CS_COMMTO1186:
  233: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadTimeStandby)
000607 904D55            MOV     DPTR,#R_Weight_Com_Coo
00060A E0                MOVX    A,@DPTR
00060B 6403              XRL     A,#03H
00060D 704B              JNZ     ?C0042?CS_COMMTO1186
  234: 		{
  235: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 9)==9)
00060F 7B01              MOV     R3,#01H
000611 7A4D              MOV     R2,#HIGH uartRcvBuf
000613 7945              MOV     R1,#LOW uartRcvBuf
000615 7D09              MOV     R5,#09H
000617 FC                MOV     R4,A
000618 F1A8              ACALL   _YC_UARTReciveDataExpected
00061A EF                MOV     A,R7
00061B 6409              XRL     A,#09H
00061D 4E                ORL     A,R6
00061E 703A              JNZ     ?C0042?CS_COMMTO1186
  236: 			{
  237: 			if(uartRcvBuf[3] == CS_CommTo1186_ReadTime)    
000620 904D48            MOV     DPTR,#uartRcvBuf+03H
000623 E0                MOVX    A,@DPTR
000624 B4822D            CJNE    A,#082H,?C0040?CS_COMMTO1186
  238: 				{			
  239: 				//读到时间的操作
  240: 				R_1186_RTC[3] = uartRcvBuf[4];
000627 A3                INC     DPTR
000628 E0                MOVX    A,@DPTR
000629 904CD6            MOV     DPTR,#R_1186_RTC+03H
00062C F0                MOVX    @DPTR,A
  241: 				R_1186_RTC[2] = uartRcvBuf[5];
00062D 904D4A            MOV     DPTR,#uartRcvBuf+05H
000630 E0                MOVX    A,@DPTR
000631 904CD5            MOV     DPTR,#R_1186_RTC+02H
000634 F0                MOVX    @DPTR,A
  242: 				R_1186_RTC[1] = uartRcvBuf[6];
000635 904D4B            MOV     DPTR,#uartRcvBuf+06H
000638 E0                MOVX    A,@DPTR
000639 904CD4            MOV     DPTR,#R_1186_RTC+01H
00063C F0                MOVX    @DPTR,A
  243: 				R_1186_RTC[0] = uartRcvBuf[7];
00063D 904D4C            MOV     DPTR,#uartRcvBuf+07H
000640 E0                MOVX    A,@DPTR
000641 904CD3            MOV     DPTR,#R_1186_RTC
000644 F0                MOVX    @DPTR,A
  244: 
  245: 			
  246: 				/*
  247: 				R_Debug_temp=R_1186RTC.R_32;
  248: 				CS_ScaleDisplay_Debug();
  249: 				while(temp==2);
  250: 				temp=2;
  251: 				*/
  252: 				/*
  253: 				R_1186RTC.R_BYTE[3]=  uartRcvBuf[4];
  254: 				R_1186RTC.R_BYTE[2] = uartRcvBuf[5];
  255: 				R_1186RTC.R_BYTE[1] = uartRcvBuf[6];
  256: 				R_1186RTC.R_BYTE[0] = uartRcvBuf[7];
  257: 				/*
  258: 				R_1186_RTC = uartRcvBuf[4];
  259: 				R_1186_RTC = R_1186_RTC<<8;
  260: 				R_1186_RTC |= uartRcvBuf[5];
  261: 				R_1186_RTC = R_1186_RTC<<8;
  262: 				R_1186_RTC |= uartRcvBuf[6];
  263: 				R_1186_RTC = R_1186_RTC<<8;
  264: 				R_1186_RTC |= uartRcvBuf[7];
  265: 				*/
  266: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
000645 E4                CLR     A
000646 904D55            MOV     DPTR,#R_Weight_Com_Coo
000649 F0                MOVX    @DPTR,A
  267: 				R_Weight_Com_Coo.sucess=true;
00064A 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
00064D 04                INC     A
00064E F0                MOVX    @DPTR,A
  268: 				B_Weight_AdOk = true;
00064F 904CD7            MOV     DPTR,#B_Weight_AdOk
000652 F0                MOVX    @DPTR,A
  269: 						
  270: 				}
000653 22                RET     
000654         ?C0040?CS_COMMTO1186:
  271: 			else
  272: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
000654 904D68            MOV     DPTR,#uartTimeoutCnt
000657 7415              MOV     A,#015H
000659 F0                MOVX    @DPTR,A
  273: 			}	
  274: 		}
  275: }
00065A         ?C0042?CS_COMMTO1186:
00065A 22                RET     
----- FUNCTION CS_1186Com_ReadTime_Proc (END) -------


----- FUNCTION YC_UARTWaitSendData (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  373: void YC_UARTWaitSendData(void)
  374: {
  375: 	while(ESWAP(REG_UART_TX_ITEMS));
00065B         ?C0009?YC_PERIPHERAL:
  376: }
00065B 90810E            MOV     DPTR,#0810EH
00065E A3                INC     DPTR
00065F E0                MOVX    A,@DPTR
000660 FC                MOV     R4,A
000661 90810E            MOV     DPTR,#0810EH
000664 E0                MOVX    A,@DPTR
000665 FF                MOV     R7,A
000666 EC                MOV     A,R4
000667 FE                MOV     R6,A
000668 EF                MOV     A,R7
000669 4E                ORL     A,R6
00066A 70EF              JNZ     ?C0009?YC_PERIPHERAL
  377: 
00066C 22                RET     
----- FUNCTION YC_UARTWaitSendData (END) -------


----- FUNCTION CS_1186Com_SetSleepMode_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  279: void CS_1186Com_SetSleepMode_Proc(void)
  280: {
  281: 	u16_t	R_AD_Zero;
  282: 	
  283: 	R_AD_Zero = CS_Scale_ZeroProc(GetRunningZero,0);
00066D E4                CLR     A
00066E FD                MOV     R5,A
00066F FC                MOV     R4,A
000670 7F01              MOV     R7,#01H
000672 1212F0            LCALL   _CS_Scale_ZeroProc
;---- Variable 'R_AD_Zero' assigned to Register 'R4/R5' ----
000675 AD07              MOV     R5,AR7
000677 AC06              MOV     R4,AR6
  284: 		
  285: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetSleepMode)
000679 904D55            MOV     DPTR,#R_Weight_Com_Coo
00067C E0                MOVX    A,@DPTR
00067D 64A0              XRL     A,#0A0H
00067F 704E              JNZ     ?C0043?CS_COMMTO1186
  286: 		{
  287: 		
  288: 		uartTxBuf[0]= 0x91;
000681 904D58            MOV     DPTR,#uartTxBuf
000684 7491              MOV     A,#091H
000686 F0                MOVX    @DPTR,A
  289: 		uartTxBuf[1]= R_AD_Zero<<6;
000687 ED                MOV     A,R5
000688 7806              MOV     R0,#06H
00068A         ?C0082?CS_COMMTO1186:
00068A C3                CLR     C
00068B 33                RLC     A
00068C CE                XCH     A,R6
00068D 33                RLC     A
00068E CE                XCH     A,R6
00068F D8F9              DJNZ    R0,?C0082?CS_COMMTO1186
000691 904D59            MOV     DPTR,#uartTxBuf+01H
000694 F0                MOVX    @DPTR,A
  290: 		uartTxBuf[2]= R_AD_Zero>>2;
000695 ED                MOV     A,R5
000696 AE04              MOV     R6,AR4
000698 7802              MOV     R0,#02H
00069A         ?C0083?CS_COMMTO1186:
00069A CE                XCH     A,R6
00069B C3                CLR     C
00069C 13                RRC     A
00069D CE                XCH     A,R6
00069E 13                RRC     A
00069F D8F9              DJNZ    R0,?C0083?CS_COMMTO1186
0006A1 904D5A            MOV     DPTR,#uartTxBuf+02H
0006A4 F0                MOVX    @DPTR,A
  291: 		uartTxBuf[3]= R_AD_Zero>>10;
0006A5 EC                MOV     A,R4
0006A6 13                RRC     A
0006A7 13                RRC     A
0006A8 543F              ANL     A,#03FH
0006AA A3                INC     DPTR
0006AB F0                MOVX    @DPTR,A
  292: 		uartTxBuf[3]|= 0x80;
0006AC 4480              ORL     A,#080H
0006AE F0                MOVX    @DPTR,A
  293: 		CS_CommTo1186_SendCmd(CS_CommTo1186_SetSleepMode,uartTxBuf);
0006AF 7B01              MOV     R3,#01H
0006B1 7A4D              MOV     R2,#HIGH uartTxBuf
0006B3 7958              MOV     R1,#LOW uartTxBuf
0006B5 7FA0              MOV     R7,#0A0H
0006B7 122481            LCALL   _CS_CommTo1186_SendCmd
  294: 		
  295: 		YC_UARTWaitSendData();
0006BA D15B              ACALL   YC_UARTWaitSendData
  296: 		
  297: 		R_Weight_Com_Coo.pre = CS_CommTo1186_SetSleepMode;
0006BC 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
0006BF 74A0              MOV     A,#0A0H
0006C1 F0                MOVX    @DPTR,A
  298: 		R_Weight_Com_Coo.now = CS_CommTo1186_SetSleepModeStandby;
0006C2 904D55            MOV     DPTR,#R_Weight_Com_Coo
0006C5 7407              MOV     A,#07H
0006C7 F0                MOVX    @DPTR,A
  299: 		uartTimeoutCnt=0;
0006C8 E4                CLR     A
0006C9 904D68            MOV     DPTR,#uartTimeoutCnt
0006CC F0                MOVX    @DPTR,A
  300: 		YC_UARTClearBuffer();
0006CD B192              ACALL   YC_UARTClearBuffer
  301: 		}
0006CF         ?C0043?CS_COMMTO1186:
  302: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetSleepModeStandby)
0006CF 904D55            MOV     DPTR,#R_Weight_Com_Coo
0006D2 E0                MOVX    A,@DPTR
0006D3 B4072A            CJNE    A,#07H,?C0048?CS_COMMTO1186
  303: 		{
  304: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 5)==5)
0006D6 7B01              MOV     R3,#01H
0006D8 7A4D              MOV     R2,#HIGH uartRcvBuf
0006DA 7945              MOV     R1,#LOW uartRcvBuf
0006DC 7D05              MOV     R5,#05H
0006DE 7C00              MOV     R4,#00H
0006E0 F1A8              ACALL   _YC_UARTReciveDataExpected
0006E2 EF                MOV     A,R7
0006E3 6405              XRL     A,#05H
0006E5 4E                ORL     A,R6
0006E6 7018              JNZ     ?C0048?CS_COMMTO1186
  305: 			{
  306: 			if(uartRcvBuf[3] == CS_CommTo1186_SetSleepMode)    
0006E8 904D48            MOV     DPTR,#uartRcvBuf+03H
0006EB E0                MOVX    A,@DPTR
0006EC B4A00B            CJNE    A,#0A0H,?C0046?CS_COMMTO1186
  307: 				{			
  308: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
0006EF E4                CLR     A
0006F0 904D55            MOV     DPTR,#R_Weight_Com_Coo
0006F3 F0                MOVX    @DPTR,A
  309: 				R_Weight_Com_Coo.sucess=true;	
0006F4 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
0006F7 04                INC     A
0006F8 F0                MOVX    @DPTR,A
  310: 				}
0006F9 22                RET     
0006FA         ?C0046?CS_COMMTO1186:
  311: 			else
  312: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
0006FA 904D68            MOV     DPTR,#uartTimeoutCnt
0006FD 7415              MOV     A,#015H
0006FF F0                MOVX    @DPTR,A
  313: 			}	
  314: 		}
  315: }
000700         ?C0048?CS_COMMTO1186:
000700 22                RET     
----- FUNCTION CS_1186Com_SetSleepMode_Proc (END) -------


----- FUNCTION CS_1186Com_Reset_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  396: void CS_1186Com_Reset_Proc(void)
  397: {
  398: 
  399: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_Reset)
000701 904D55            MOV     DPTR,#R_Weight_Com_Coo
000704 E0                MOVX    A,@DPTR
000705 B4C512            CJNE    A,#0C5H,?C0062?CS_COMMTO1186
  400: 		{
  401: 		CS_CommTo1186_SendCmd(CS_CommTo1186_Reset,0);
000708 7B00              MOV     R3,#00H
00070A 7A00              MOV     R2,#00H
00070C 7900              MOV     R1,#00H
00070E 7FC5              MOV     R7,#0C5H
000710 122481            LCALL   _CS_CommTo1186_SendCmd
  402: 		YC_UARTClearBuffer();
000713 B192              ACALL   YC_UARTClearBuffer
  403: 		R_Weight_Com_Coo.now=CS_CommTo1186_Null;
000715 E4                CLR     A
000716 904D55            MOV     DPTR,#R_Weight_Com_Coo
000719 F0                MOVX    @DPTR,A
  404: 		
  405: 		}
  406: 													
  407: }
00071A         ?C0062?CS_COMMTO1186:
00071A 22                RET     
----- FUNCTION CS_1186Com_Reset_Proc (END) -------


----- FUNCTION CS_1186Com_SetOpenWeight_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  320: void CS_1186Com_SetOpenWeight_Proc(void)
  321: {
  322: 	u16_t	R_Open_Weight;
  323: 	R_Open_Weight = CS_Scale_CaliProc(CaliProcGetOpenWeight);	//获取开机重量值
00071B 7F07              MOV     R7,#07H
00071D 120A38            LCALL   _CS_Scale_CaliProc
;---- Variable 'R_Open_Weight' assigned to Register 'R4/R5' ----
000720 AD07              MOV     R5,AR7
000722 AC06              MOV     R4,AR6
  324: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetOpenWeight)
000724 904D55            MOV     DPTR,#R_Weight_Com_Coo
000727 E0                MOVX    A,@DPTR
000728 64A1              XRL     A,#0A1H
00072A 704A              JNZ     ?C0049?CS_COMMTO1186
  325: 		{
  326: 		uartTxBuf[0]= 0x20;
00072C 904D58            MOV     DPTR,#uartTxBuf
00072F 7420              MOV     A,#020H
000731 F0                MOVX    @DPTR,A
  327: 		uartTxBuf[1]= R_Open_Weight<<6;
000732 ED                MOV     A,R5
000733 7806              MOV     R0,#06H
000735         ?C0084?CS_COMMTO1186:
000735 C3                CLR     C
000736 33                RLC     A
000737 CE                XCH     A,R6
000738 33                RLC     A
000739 CE                XCH     A,R6
00073A D8F9              DJNZ    R0,?C0084?CS_COMMTO1186
00073C FB                MOV     R3,A
00073D 904D59            MOV     DPTR,#uartTxBuf+01H
000740 F0                MOVX    @DPTR,A
  328: 		uartTxBuf[2]= R_Open_Weight>>2;
000741 ED                MOV     A,R5
000742 AE04              MOV     R6,AR4
000744 7802              MOV     R0,#02H
000746         ?C0085?CS_COMMTO1186:
000746 CE                XCH     A,R6
000747 C3                CLR     C
000748 13                RRC     A
000749 CE                XCH     A,R6
00074A 13                RRC     A
00074B D8F9              DJNZ    R0,?C0085?CS_COMMTO1186
00074D FF                MOV     R7,A
00074E 904D5A            MOV     DPTR,#uartTxBuf+02H
000751 F0                MOVX    @DPTR,A
  329: 		uartTxBuf[3]= R_Open_Weight<<6;
000752 A3                INC     DPTR
000753 EB                MOV     A,R3
000754 F0                MOVX    @DPTR,A
  330: 		uartTxBuf[4]= R_Open_Weight>>2;	
000755 A3                INC     DPTR
000756 EF                MOV     A,R7
000757 F0                MOVX    @DPTR,A
  331: 		CS_CommTo1186_SendCmd(CS_CommTo1186_SetOpenWeight,uartTxBuf);
000758 7B01              MOV     R3,#01H
00075A 7A4D              MOV     R2,#HIGH uartTxBuf
00075C 7958              MOV     R1,#LOW uartTxBuf
00075E 7FA1              MOV     R7,#0A1H
000760 122481            LCALL   _CS_CommTo1186_SendCmd
  332: 		R_Weight_Com_Coo.pre = CS_CommTo1186_SetOpenWeight;
000763 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
000766 74A1              MOV     A,#0A1H
000768 F0                MOVX    @DPTR,A
  333: 		R_Weight_Com_Coo.now = CS_CommTo1186_SetOpenWeightStandby;
000769 904D55            MOV     DPTR,#R_Weight_Com_Coo
00076C 7408              MOV     A,#08H
00076E F0                MOVX    @DPTR,A
  334: 		uartTimeoutCnt=0;
00076F E4                CLR     A
000770 904D68            MOV     DPTR,#uartTimeoutCnt
000773 F0                MOVX    @DPTR,A
  335: 		YC_UARTClearBuffer();
000774 B192              ACALL   YC_UARTClearBuffer
  336: 		}
000776         ?C0049?CS_COMMTO1186:
  337: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetOpenWeightStandby)
000776 904D55            MOV     DPTR,#R_Weight_Com_Coo
000779 E0                MOVX    A,@DPTR
00077A B4082A            CJNE    A,#08H,?C0054?CS_COMMTO1186
  338: 		{
  339: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 5)==5)
00077D 7B01              MOV     R3,#01H
00077F 7A4D              MOV     R2,#HIGH uartRcvBuf
000781 7945              MOV     R1,#LOW uartRcvBuf
000783 7D05              MOV     R5,#05H
000785 7C00              MOV     R4,#00H
000787 F1A8              ACALL   _YC_UARTReciveDataExpected
000789 EF                MOV     A,R7
00078A 6405              XRL     A,#05H
00078C 4E                ORL     A,R6
00078D 7018              JNZ     ?C0054?CS_COMMTO1186
  340: 			{
  341: 			if(uartRcvBuf[3] == CS_CommTo1186_SetOpenWeight)    
00078F 904D48            MOV     DPTR,#uartRcvBuf+03H
000792 E0                MOVX    A,@DPTR
000793 B4A10B            CJNE    A,#0A1H,?C0052?CS_COMMTO1186
  342: 				{			
  343: 				//读到时间的操作
  344: 				//R_Debug_temp=uartRcvBuf[5];
  345: 				
  346: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
000796 E4                CLR     A
000797 904D55            MOV     DPTR,#R_Weight_Com_Coo
00079A F0                MOVX    @DPTR,A
  347: 				R_Weight_Com_Coo.sucess=true;
00079B 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
00079E 04                INC     A
00079F F0                MOVX    @DPTR,A
  348: 				
  349: 						
  350: 				}
0007A0 22                RET     
0007A1         ?C0052?CS_COMMTO1186:
  351: 			else
  352: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
0007A1 904D68            MOV     DPTR,#uartTimeoutCnt
0007A4 7415              MOV     A,#015H
0007A6 F0                MOVX    @DPTR,A
  353: 			}	
  354: 		}
  355: }
0007A7         ?C0054?CS_COMMTO1186:
0007A7 22                RET     
----- FUNCTION CS_1186Com_SetOpenWeight_Proc (END) -------


----- FUNCTION _YC_UARTReciveDataExpected (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  378: u16_t YC_UARTReciveDataExpected(u8_t* pbuff, u16_t len)
  379: {
0007A8 904DCC            MOV     DPTR,#pbuff
0007AB EB                MOV     A,R3
0007AC F0                MOVX    @DPTR,A
0007AD A3                INC     DPTR
0007AE EA                MOV     A,R2
0007AF F0                MOVX    @DPTR,A
0007B0 A3                INC     DPTR
0007B1 E9                MOV     A,R1
0007B2 F0                MOVX    @DPTR,A
0007B3 A3                INC     DPTR
0007B4 EC                MOV     A,R4
0007B5 F0                MOVX    @DPTR,A
0007B6 A3                INC     DPTR
0007B7 ED                MOV     A,R5
0007B8 F0                MOVX    @DPTR,A
  380: 	int i = 0;
  381: 	u8_t xdata* rrptr = (u8_t *)ESWAP(REG_UART_RX_PTR_R);
0007B9 E4                CLR     A
0007BA A3                INC     DPTR
0007BB F0                MOVX    @DPTR,A
0007BC A3                INC     DPTR
0007BD F0                MOVX    @DPTR,A
  382: 
0007BE 908058            MOV     DPTR,#08058H
0007C1 A3                INC     DPTR
0007C2 E0                MOVX    A,@DPTR
0007C3 FC                MOV     R4,A
0007C4 908058            MOV     DPTR,#08058H
0007C7 E0                MOVX    A,@DPTR
0007C8 FF                MOV     R7,A
0007C9 EC                MOV     A,R4
0007CA FE                MOV     R6,A
0007CB EF                MOV     A,R7
0007CC 904DD3            MOV     DPTR,#rrptr
0007CF EE                MOV     A,R6
0007D0 F0                MOVX    @DPTR,A
0007D1 A3                INC     DPTR
0007D2 EF                MOV     A,R7
0007D3 F0                MOVX    @DPTR,A
  383: 	if(ESWAP(REG_UART_RX_ITEMS)<len)
0007D4 908112            MOV     DPTR,#08112H
0007D7 A3                INC     DPTR
0007D8 E0                MOVX    A,@DPTR
0007D9 FC                MOV     R4,A
0007DA 908112            MOV     DPTR,#08112H
0007DD E0                MOVX    A,@DPTR
0007DE FF                MOV     R7,A
0007DF EC                MOV     A,R4
0007E0 FE                MOV     R6,A
0007E1 EF                MOV     A,R7
0007E2 D3                SETB    C
0007E3 904DD0            MOV     DPTR,#len+01H
0007E6 E0                MOVX    A,@DPTR
0007E7 9F                SUBB    A,R7
0007E8 904DCF            MOV     DPTR,#len
0007EB E0                MOVX    A,@DPTR
0007EC 9E                SUBB    A,R6
0007ED 4004              JC      ?C0012?YC_PERIPHERAL
  384: 	{
  385: 		return false;
0007EF E4                CLR     A
0007F0 FE                MOV     R6,A
0007F1 FF                MOV     R7,A
0007F2 22                RET     
  386: 	}
0007F3         ?C0012?YC_PERIPHERAL:
  387: 
  388: 	for(i=0;i<len;i++)
0007F3 E4                CLR     A
0007F4 904DD1            MOV     DPTR,#i
0007F7 F0                MOVX    @DPTR,A
0007F8 A3                INC     DPTR
0007F9 F0                MOVX    @DPTR,A
0007FA         ?C0014?YC_PERIPHERAL:
0007FA 904DCF            MOV     DPTR,#len
0007FD E0                MOVX    A,@DPTR
0007FE FE                MOV     R6,A
0007FF A3                INC     DPTR
000800 E0                MOVX    A,@DPTR
000801 FF                MOV     R7,A
000802 C3                CLR     C
000803 904DD2            MOV     DPTR,#i+01H
000806 E0                MOVX    A,@DPTR
000807 9F                SUBB    A,R7
000808 904DD1            MOV     DPTR,#i
00080B E0                MOVX    A,@DPTR
00080C 9E                SUBB    A,R6
00080D 4002              JC      $ + 4H
00080F 01CD              AJMP    ?C0015?YC_PERIPHERAL
  389: 	{
  390: 		memcpy(pbuff++, rrptr++, 1);
000811 904DD3            MOV     DPTR,#rrptr
000814 E4                CLR     A
000815 75F001            MOV     B,#01H
000818 1201C8            LCALL   ?C?ILDIX
00081B FA                MOV     R2,A
00081C A9F0              MOV     R1,B
00081E 7B01              MOV     R3,#01H
000820 C003              PUSH    AR3
000822 904DCC            MOV     DPTR,#pbuff
000825 E0                MOVX    A,@DPTR
000826 FB                MOV     R3,A
000827 A3                INC     DPTR
000828 E4                CLR     A
000829 75F001            MOV     B,#01H
00082C 1201C8            LCALL   ?C?ILDIX
00082F A8F0              MOV     R0,B
000831 FC                MOV     R4,A
000832 AD03              MOV     R5,AR3
000834 D003              POP     AR3
000836 7E00              MOV     R6,#00H
000838 7F01              MOV     R7,#01H
00083A 1200D3            LCALL   ?C?COPY
  391: 
  392: 		if((short)rrptr == ESWAP(REG_UART_RX_ADDR_E) + 1)		//rrptr reach the end of buffer
00083D 908056            MOV     DPTR,#08056H
000840 A3                INC     DPTR
000841 E0                MOVX    A,@DPTR
000842 FC                MOV     R4,A
000843 908056            MOV     DPTR,#08056H
000846 E0                MOVX    A,@DPTR
000847 FF                MOV     R7,A
000848 EC                MOV     A,R4
000849 FE                MOV     R6,A
00084A EF                MOV     A,R7
00084B 2401              ADD     A,#01H
00084D FF                MOV     R7,A
00084E E4                CLR     A
00084F 3E                ADDC    A,R6
000850 FE                MOV     R6,A
000851 904DD3            MOV     DPTR,#rrptr
000854 E0                MOVX    A,@DPTR
000855 FC                MOV     R4,A
000856 A3                INC     DPTR
000857 E0                MOVX    A,@DPTR
000858 B5071A            CJNE    A,AR7,?C0017?YC_PERIPHERAL
00085B EE                MOV     A,R6
00085C B50416            CJNE    A,AR4,?C0017?YC_PERIPHERAL
  393: 		{
  394: 			rrptr = (u8_t *)ESWAP(REG_UART_RX_ADDR_S);
00085F 908054            MOV     DPTR,#08054H
000862 A3                INC     DPTR
000863 E0                MOVX    A,@DPTR
000864 FC                MOV     R4,A
000865 908054            MOV     DPTR,#08054H
000868 E0                MOVX    A,@DPTR
000869 FF                MOV     R7,A
00086A EC                MOV     A,R4
00086B FE                MOV     R6,A
00086C EF                MOV     A,R7
00086D 904DD3            MOV     DPTR,#rrptr
000870 EE                MOV     A,R6
000871 F0                MOVX    @DPTR,A
000872 A3                INC     DPTR
000873 EF                MOV     A,R7
000874 F0                MOVX    @DPTR,A
  395: 		}
000875         ?C0017?YC_PERIPHERAL:
  396: 
  397: 		if((short)rrptr == ESWAP(REG_UART_RX_PTR_W) )	//read all data already
000875 908116            MOV     DPTR,#08116H
000878 A3                INC     DPTR
000879 E0                MOVX    A,@DPTR
00087A FC                MOV     R4,A
00087B 908116            MOV     DPTR,#08116H
00087E E0                MOVX    A,@DPTR
00087F FF                MOV     R7,A
000880 EC                MOV     A,R4
000881 FE                MOV     R6,A
000882 EF                MOV     A,R7
000883 904DD3            MOV     DPTR,#rrptr
000886 E0                MOVX    A,@DPTR
000887 FC                MOV     R4,A
000888 A3                INC     DPTR
000889 E0                MOVX    A,@DPTR
00088A FD                MOV     R5,A
00088B EF                MOV     A,R7
00088C 6D                XRL     A,R5
00088D 7002              JNZ     ?C0025?YC_PERIPHERAL
00088F EE                MOV     A,R6
000890 6C                XRL     A,R4
000891         ?C0025?YC_PERIPHERAL:
000891 7029              JNZ     ?C0016?YC_PERIPHERAL
  398: 		{
  399: 			REG_UART_RX_PTR_R = ESWAP((short)rrptr);
000893 904DD3            MOV     DPTR,#rrptr
000896 E0                MOVX    A,@DPTR
000897 FE                MOV     R6,A
000898 A3                INC     DPTR
000899 E0                MOVX    A,@DPTR
00089A FF                MOV     R7,A
00089B EC                MOV     A,R4
00089C FF                MOV     R7,A
00089D 33                RLC     A
00089E 95E0              SUBB    A,ACC
0008A0 AB07              MOV     R3,AR7
0008A2 ED                MOV     A,R5
0008A3 FF                MOV     R7,A
0008A4 EB                MOV     A,R3
0008A5 908058            MOV     DPTR,#08058H
0008A8 CF                XCH     A,R7
0008A9 F0                MOVX    @DPTR,A
0008AA A3                INC     DPTR
0008AB EF                MOV     A,R7
0008AC F0                MOVX    @DPTR,A
  400: 			return (i+1);
0008AD 904DD2            MOV     DPTR,#i+01H
0008B0 E0                MOVX    A,@DPTR
0008B1 2401              ADD     A,#01H
0008B3 FF                MOV     R7,A
0008B4 904DD1            MOV     DPTR,#i
0008B7 E0                MOVX    A,@DPTR
0008B8 3400              ADDC    A,#00H
0008BA FE                MOV     R6,A
0008BB 22                RET     
  401: 		}
  402: 	}
0008BC         ?C0016?YC_PERIPHERAL:
0008BC 904DD2            MOV     DPTR,#i+01H
0008BF E0                MOVX    A,@DPTR
0008C0 04                INC     A
0008C1 F0                MOVX    @DPTR,A
0008C2 7006              JNZ     ?C0026?YC_PERIPHERAL
0008C4 904DD1            MOV     DPTR,#i
0008C7 E0                MOVX    A,@DPTR
0008C8 04                INC     A
0008C9 F0                MOVX    @DPTR,A
0008CA         ?C0026?YC_PERIPHERAL:
0008CA 0207FA            LJMP    ?C0014?YC_PERIPHERAL
0008CD         ?C0015?YC_PERIPHERAL:
  403: 
  404: 	REG_UART_RX_PTR_R = ESWAP((short)rrptr);
0008CD 904DD3            MOV     DPTR,#rrptr
0008D0 E0                MOVX    A,@DPTR
0008D1 FE                MOV     R6,A
0008D2 A3                INC     DPTR
0008D3 E0                MOVX    A,@DPTR
0008D4 FF                MOV     R7,A
0008D5 FD                MOV     R5,A
0008D6 AC06              MOV     R4,AR6
0008D8 EC                MOV     A,R4
0008D9 FF                MOV     R7,A
0008DA 33                RLC     A
0008DB 95E0              SUBB    A,ACC
0008DD AB07              MOV     R3,AR7
0008DF ED                MOV     A,R5
0008E0 FF                MOV     R7,A
0008E1 EB                MOV     A,R3
0008E2 908058            MOV     DPTR,#08058H
0008E5 CF                XCH     A,R7
0008E6 F0                MOVX    @DPTR,A
0008E7 A3                INC     DPTR
0008E8 EF                MOV     A,R7
0008E9 F0                MOVX    @DPTR,A
  405: 	
  406: 	return len;
0008EA 904DCF            MOV     DPTR,#len
0008ED E0                MOVX    A,@DPTR
0008EE FE                MOV     R6,A
0008EF A3                INC     DPTR
0008F0 E0                MOVX    A,@DPTR
0008F1 FF                MOV     R7,A
  407: }
0008F2 22                RET     
----- FUNCTION _YC_UARTReciveDataExpected (END) -------


----- FUNCTION SoftTimer_10mSCallback (BEGIN) -----
 FILE: 'system.c'
   44: void SoftTimer_10mSCallback(void)
   45: {
   46: 	static u8_t count;
   47: 	YC_UtilTimerStartMs(10, SoftTimer_10mSCallback, &SoftTimer_10msTimerID);
0008F3 7BFF              MOV     R3,#0FFH
0008F5 7A08              MOV     R2,#HIGH SoftTimer_10mSCallback
0008F7 79F3              MOV     R1,#LOW SoftTimer_10mSCallback
0008F9 904DDA            MOV     DPTR,#?_YC_UtilTimerStartMs?BYTE+05H
0008FC 744E              MOV     A,#HIGH SoftTimer_10msTimerID
0008FE F0                MOVX    @DPTR,A
0008FF A3                INC     DPTR
000900 7441              MOV     A,#LOW SoftTimer_10msTimerID
000902 F0                MOVX    @DPTR,A
000903 7F0A              MOV     R7,#0AH
000905 7E00              MOV     R6,#00H
000907 12117B            LCALL   _YC_UtilTimerStartMs
   48: 	//add user function
   49: 	if(uartTimeoutCnt<255) {
00090A 904D68            MOV     DPTR,#uartTimeoutCnt
00090D E0                MOVX    A,@DPTR
00090E C3                CLR     C
00090F 94FF              SUBB    A,#0FFH
000911 5003              JNC     ?C0001?SYSTEM
   50: 		uartTimeoutCnt++;
000913 E0                MOVX    A,@DPTR
000914 04                INC     A
000915 F0                MOVX    @DPTR,A
   51: 	}
000916         ?C0001?SYSTEM:
   52: 
   53: 
   54: 	if(count<100)
000916 904E3F            MOV     DPTR,#count
000919 E0                MOVX    A,@DPTR
00091A C3                CLR     C
00091B 9464              SUBB    A,#064H
00091D 5005              JNC     ?C0002?SYSTEM
   55: 		count++;
00091F E0                MOVX    A,@DPTR
000920 04                INC     A
000921 F0                MOVX    @DPTR,A
000922 800F              SJMP    ?C0003?SYSTEM
000924         ?C0002?SYSTEM:
   56: 	else
   57: 		{
   58: 		count=0;
000924 E4                CLR     A
000925 904E3F            MOV     DPTR,#count
000928 F0                MOVX    @DPTR,A
   59: 		CS_Scale_TimeOutProc(CS_SetTimeBase1S);
000929 7F07              MOV     R7,#07H
00092B 122C02            LCALL   _CS_Scale_TimeOutProc
   60: 		CS_MemoryWeightClear_Timer(MemWeightTimerInc);
00092E 7F02              MOV     R7,#02H
000930 1236D2            LCALL   _CS_MemoryWeightClear_Timer
   61: 		}
000933         ?C0003?SYSTEM:
   62: 		
   63: 	CS_SoftTimer(SoftTimerInc);
000933 E4                CLR     A
000934 FF                MOV     R7,A
000935 F115              ACALL   _CS_SoftTimer
;----                  JMP     CS_KeyScan
   64: 
   65: 	CS_KeyScan();
   66: 
----- FUNCTION SoftTimer_10mSCallback (END) -------


----- FUNCTION CS_KeyScan (BEGIN) -----
 FILE: 'CS_ScaleKey.c'
   17: void CS_KeyScan(void)
   18: {
   19: 	u8_t  keyState;
   20: 	static u8_t xdata keyState_prev=1;
   21: 	static u8_t xdata keyStateCnt;
   22: 	static u8_t xdata KeyPressDeal=0;
   23: 	static u8_t xdata KeyLongPressDeal=0;
   24: 	static u8_t xdata ShortPressCount=0;
   25: 	static u8_t xdata PressTimesCount=0;
   26: 	static u8_t xdata Press;
   27: 	static u8_t xdata stanby;
   28: 	
   29: 	
   30: 	keyState = YC_GPIOGetInputStatus(5);	//GPIO5	
000937 7F05              MOV     R7,#05H
000939 121083            LCALL   _YC_GPIOGetInputStatus
00093C E4                CLR     A
00093D 33                RLC     A
00093E FF                MOV     R7,A
;---- Variable 'keyState' assigned to Register 'R7' ----
   31: 
   32: 	if(R_Scale_state == CS_Scale_state_standby)
00093F 904CC5            MOV     DPTR,#R_Scale_state
000942 E0                MOVX    A,@DPTR
000943 B40206            CJNE    A,#02H,?C0001?CS_SCALEKEY
   33: 		stanby=true;
000946 904E04            MOV     DPTR,#stanby
000949 7401              MOV     A,#01H
00094B F0                MOVX    @DPTR,A
00094C         ?C0001?CS_SCALEKEY:
   34: 
   35: 	if(ShortPressCount<255)		//短按计时
00094C 904E01            MOV     DPTR,#ShortPressCount
00094F E0                MOVX    A,@DPTR
000950 C3                CLR     C
000951 94FF              SUBB    A,#0FFH
000953 5003              JNC     ?C0002?CS_SCALEKEY
   36: 		ShortPressCount++;
000955 E0                MOVX    A,@DPTR
000956 04                INC     A
000957 F0                MOVX    @DPTR,A
000958         ?C0002?CS_SCALEKEY:
   37: 	
   38: 	if(keyState ==KEY_UP)
000958 EF                MOV     A,R7
000959 6401              XRL     A,#01H
00095B 7066              JNZ     ?C0003?CS_SCALEKEY
   39: 		{
   40: 		keyState_prev = KEY_UP;	
00095D 904DFD            MOV     DPTR,#keyState_prev
000960 04                INC     A
000961 F0                MOVX    @DPTR,A
   41: 		keyStateCnt = 0; 
000962 E4                CLR     A
000963 A3                INC     DPTR
000964 F0                MOVX    @DPTR,A
   42: 
   43: 		if(KeyLongPressDeal==1)
000965 904E00            MOV     DPTR,#KeyLongPressDeal
000968 E0                MOVX    A,@DPTR
000969 B40105            CJNE    A,#01H,?C0004?CS_SCALEKEY
   44: 			Press = false;
00096C E4                CLR     A
00096D 904E03            MOV     DPTR,#Press
000970 F0                MOVX    @DPTR,A
000971         ?C0004?CS_SCALEKEY:
   45: 		
   46: 		KeyPressDeal=0;
000971 E4                CLR     A
000972 904DFF            MOV     DPTR,#KeyPressDeal
000975 F0                MOVX    @DPTR,A
   47: 		KeyLongPressDeal=0;
000976 A3                INC     DPTR
000977 F0                MOVX    @DPTR,A
   48: 
   49: 		if(ShortPressCount>=KEY_SHORT_PRESS_TIME&&PressTimesCount==1)
000978 A3                INC     DPTR
000979 E0                MOVX    A,@DPTR
00097A C3                CLR     C
00097B 9412              SUBB    A,#012H
00097D 400F              JC      ?C0005?CS_SCALEKEY
00097F A3                INC     DPTR
000980 E0                MOVX    A,@DPTR
000981 B4010A            CJNE    A,#01H,?C0005?CS_SCALEKEY
   50: 			{
   51: 			PressTimesCount = 0;
000984 E4                CLR     A
000985 F0                MOVX    @DPTR,A
   52: 			if(stanby==false)
000986 904E04            MOV     DPTR,#stanby
000989 E0                MOVX    A,@DPTR
00098A 7002              JNZ     ?C0005?CS_SCALEKEY
   53: 			CS_Scale_ChangeUnit();	
00098C F153              ACALL   CS_Scale_ChangeUnit
   54: 			}
00098E         ?C0005?CS_SCALEKEY:
   55: 		
   56: 		if(Press == true)
00098E 904E03            MOV     DPTR,#Press
000991 E0                MOVX    A,@DPTR
000992 B40124            CJNE    A,#01H,?C0007?CS_SCALEKEY
   57: 			{
   58: 			Press = false;
000995 E4                CLR     A
000996 F0                MOVX    @DPTR,A
   59: 						
   60: 			//短按弹起处理
   61: 			if(ShortPressCount <KEY_SHORT_PRESS_TIME)
000997 904E01            MOV     DPTR,#ShortPressCount
00099A E0                MOVX    A,@DPTR
00099B C3                CLR     C
00099C 9412              SUBB    A,#012H
00099E 5006              JNC     ?C0008?CS_SCALEKEY
   62: 				PressTimesCount++;
0009A0 A3                INC     DPTR
0009A1 E0                MOVX    A,@DPTR
0009A2 04                INC     A
0009A3 F0                MOVX    @DPTR,A
0009A4 800E              SJMP    ?C0009?CS_SCALEKEY
0009A6         ?C0008?CS_SCALEKEY:
   63: 			else
   64: 				{
   65: 				PressTimesCount = 0;
0009A6 E4                CLR     A
0009A7 904E02            MOV     DPTR,#PressTimesCount
0009AA F0                MOVX    @DPTR,A
   66: 				PressTimesCount = 0;
0009AB F0                MOVX    @DPTR,A
   67: 				if(stanby==false)
0009AC 904E04            MOV     DPTR,#stanby
0009AF E0                MOVX    A,@DPTR
0009B0 7002              JNZ     ?C0009?CS_SCALEKEY
   68: 				CS_Scale_ChangeUnit();	
0009B2 F153              ACALL   CS_Scale_ChangeUnit
   69: 				}
0009B4         ?C0009?CS_SCALEKEY:
   70: 			ShortPressCount =0;	
0009B4 E4                CLR     A
0009B5 904E01            MOV     DPTR,#ShortPressCount
0009B8 F0                MOVX    @DPTR,A
   71: 			}
0009B9         ?C0007?CS_SCALEKEY:
   72: 		
   73: 			if(stanby==true)				//待机起来第一次按键不处理
0009B9 904E04            MOV     DPTR,#stanby
0009BC E0                MOVX    A,@DPTR
0009BD 6401              XRL     A,#01H
0009BF 7076              JNZ     ?C0022?CS_SCALEKEY
   74: 			stanby=false;
0009C1 F0                MOVX    @DPTR,A
   75: 		}
0009C2 22                RET     
0009C3         ?C0003?CS_SCALEKEY:
   76: 	else
   77: 		{
   78: 		if(keyState_prev == KEY_DOWN)
0009C3 904DFD            MOV     DPTR,#keyState_prev
0009C6 E0                MOVX    A,@DPTR
0009C7 7065              JNZ     ?C0013?CS_SCALEKEY
   79: 			{	
   80: 			if(keyStateCnt<255)
0009C9 A3                INC     DPTR
0009CA E0                MOVX    A,@DPTR
0009CB C3                CLR     C
0009CC 94FF              SUBB    A,#0FFH
0009CE 5003              JNC     ?C0014?CS_SCALEKEY
   81: 				keyStateCnt++;
0009D0 E0                MOVX    A,@DPTR
0009D1 04                INC     A
0009D2 F0                MOVX    @DPTR,A
0009D3         ?C0014?CS_SCALEKEY:
   82: 			 if(keyStateCnt > KEY_SHORT_PUSH_CNT)
0009D3 904DFE            MOV     DPTR,#keyStateCnt
0009D6 E0                MOVX    A,@DPTR
0009D7 FF                MOV     R7,A
0009D8 D3                SETB    C
0009D9 9403              SUBB    A,#03H
0009DB 401F              JC      ?C0015?CS_SCALEKEY
   83: 			 	{
   84: 			 	Press =true;
0009DD 904E03            MOV     DPTR,#Press
0009E0 7401              MOV     A,#01H
0009E2 F0                MOVX    @DPTR,A
   85: 				if(KeyPressDeal==0)
0009E3 904DFF            MOV     DPTR,#KeyPressDeal
0009E6 E0                MOVX    A,@DPTR
0009E7 7013              JNZ     ?C0015?CS_SCALEKEY
   86: 					{
   87: 					KeyPressDeal=1;
0009E9 04                INC     A
0009EA F0                MOVX    @DPTR,A
   88: 					//按键刚按下的处理
   89: 					if(ShortPressCount > KEY_SHORT_PRESS_TIME)
0009EB 904E01            MOV     DPTR,#ShortPressCount
0009EE E0                MOVX    A,@DPTR
0009EF D3                SETB    C
0009F0 9412              SUBB    A,#012H
0009F2 4003              JC      ?C0017?CS_SCALEKEY
   90: 						PressTimesCount = 0;
0009F4 E4                CLR     A
0009F5 A3                INC     DPTR
0009F6 F0                MOVX    @DPTR,A
0009F7         ?C0017?CS_SCALEKEY:
   91: 					ShortPressCount=0;
0009F7 E4                CLR     A
0009F8 904E01            MOV     DPTR,#ShortPressCount
0009FB F0                MOVX    @DPTR,A
   92: 					}
   93: 			 	}
0009FC         ?C0015?CS_SCALEKEY:
   94: 			 if(keyStateCnt > KEY_LONG_PUSH_CNT)
0009FC EF                MOV     A,R7
0009FD D3                SETB    C
0009FE 9450              SUBB    A,#050H
000A00 4035              JC      ?C0022?CS_SCALEKEY
   95: 			 	{
   96: 				if(KeyLongPressDeal==0)
000A02 904E00            MOV     DPTR,#KeyLongPressDeal
000A05 E0                MOVX    A,@DPTR
000A06 702F              JNZ     ?C0022?CS_SCALEKEY
   97: 					{
   98: 					//按键刚长按下的处理	
   99: 					KeyLongPressDeal=1;					
000A08 04                INC     A
000A09 F0                MOVX    @DPTR,A
  100: 					if(PressTimesCount==3)
000A0A 904E02            MOV     DPTR,#PressTimesCount
000A0D E0                MOVX    A,@DPTR
000A0E B40313            CJNE    A,#03H,?C0020?CS_SCALEKEY
  101: 						{
  102: 						R_Scale_state = CS_Scale_state_caling;	
000A11 904CC5            MOV     DPTR,#R_Scale_state
000A14 7403              MOV     A,#03H
000A16 F0                MOVX    @DPTR,A
  103: 						CS_Scale_CaliProc(CaliProcReset);
000A17 7F05              MOV     R7,#05H
000A19 5138              ACALL   _CS_Scale_CaliProc
  104: 						Press = false;
000A1B E4                CLR     A
000A1C 904E03            MOV     DPTR,#Press
000A1F F0                MOVX    @DPTR,A
  105: 						keyStateCnt=0;
000A20 904DFE            MOV     DPTR,#keyStateCnt
000A23 F0                MOVX    @DPTR,A
  106: 						}
000A24         ?C0020?CS_SCALEKEY:
  107: 					PressTimesCount = 0;
000A24 E4                CLR     A
000A25 904E02            MOV     DPTR,#PressTimesCount
000A28 F0                MOVX    @DPTR,A
  108: 					ShortPressCount =0;
000A29 904E01            MOV     DPTR,#ShortPressCount
000A2C F0                MOVX    @DPTR,A
  109: 					}
  110: 			 	}
  111: 			}
000A2D 22                RET     
000A2E         ?C0013?CS_SCALEKEY:
  112: 		else
  113: 			{
  114: 			keyState_prev = KEY_DOWN;
000A2E E4                CLR     A
000A2F 904DFD            MOV     DPTR,#keyState_prev
000A32 F0                MOVX    @DPTR,A
  115: 			Press = false;
000A33 904E03            MOV     DPTR,#Press
000A36 F0                MOVX    @DPTR,A
  116: 			}
  117: 		}
  118: }
000A37         ?C0022?CS_SCALEKEY:
000A37 22                RET     
----- FUNCTION CS_KeyScan (END) -------


----- FUNCTION _CS_Scale_CaliProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  935: u16_t CS_Scale_CaliProc(u8_t option)
  936: {
;---- Variable 'option' assigned to Register 'R5' ----
000A38 AD07              MOV     R5,AR7
  937: 	static	u16_t xdata R_AD_CaliDot1;		//第一个标定点AD值
  938: 	static	u16_t xdata R_AD_CaliDot2;		//第二个标定点AD值
  939: 	static	u16_t xdata R_AD_CaliDot3;		//第三个标定点AD值
  940: 	static	u8_t	  xdata R_CaliState;			//标定状态
  941: 	static	u16_t xdata R_OpenWeight_Ad;	//开机重量AD值
  942: 	
  943: 	u16_t	R_AdFilTimes;	
  944: 	u16_t	weight_temp;
  945: 	u16_t	R_AD_BUF;
  946: 	u16_t	R_AD_PowerOnZero;
  947: 
  948: 	if(option==CaliProcReset)
000A3A ED                MOV     A,R5
000A3B B40508            CJNE    A,#05H,?C0128?CS_SCALE_PROC
  949: 		{
  950: 		R_CaliState=CS_CaliState_GetZero;
000A3E E4                CLR     A
000A3F 904CB1            MOV     DPTR,#R_CaliState
000A42 F0                MOVX    @DPTR,A
  951: 		return	0;
000A43 FE                MOV     R6,A
000A44 FF                MOV     R7,A
000A45 22                RET     
  952: 		}
000A46         ?C0128?CS_SCALE_PROC:
  953: 	if(option==CaliProcSetCali)
000A46 ED                MOV     A,R5
000A47 6401              XRL     A,#01H
000A49 6002              JZ      $ + 4H
000A4B 612A              AJMP    ?C0130?CS_SCALE_PROC
  954: 		{
  955: /*
  956: 		*(mem_sensor_buf )= 12;
  957: 		*(mem_sensor_buf+1) = 12;
  958: 		*(mem_sensor_buf+2 )= 12;
  959: 		*(mem_sensor_buf+3) = 12;
  960: 		*(mem_sensor_buf+4 )= 12;
  961: 		*(mem_sensor_buf+5) = 12;
  962: 		SpiFlashOperator(CS_CMD_WRITE_FLASH);
  963: 		//YC_Delay10ms(10);
  964: 		
  965: 		*(mem_sensor_buf )= 0;
  966: 		*(mem_sensor_buf+1) = 0;
  967: 		*(mem_sensor_buf+2 )= 0;
  968: 		*(mem_sensor_buf+3) = 0;
  969: 		*(mem_sensor_buf+4 )= 0;
  970: 		*(mem_sensor_buf+5) = 0;
  971: 		
  972: 		
  973: 		SpiFlashOperator( CS_CMD_READ_FLASH);
  974: 		
  975: 		
  976: 		
  977: 		R_Debug_temp=(u16_t) *(mem_sensor_buf+2 ) ;
  978: 		CS_ScaleDisplay_Debug();
  979: 		while(1);
  980: 		*/
  981: 		//YC_Delay1S(1);
  982: 		
  983: 		R_AD_BUF = *(mem_sensor_buf );
000A4D 904C08            MOV     DPTR,#04C08H
000A50 E0                MOVX    A,@DPTR
000A51 FF                MOV     R7,A
000A52 904DF9            MOV     DPTR,#R_AD_BUF
000A55 E4                CLR     A
000A56 F0                MOVX    @DPTR,A
000A57 A3                INC     DPTR
000A58 EF                MOV     A,R7
000A59 F0                MOVX    @DPTR,A
  984: 		R_AD_CaliDot1 =R_AD_BUF<<8 |  (*(mem_sensor_buf+1));
000A5A E0                MOVX    A,@DPTR
000A5B FE                MOV     R6,A
000A5C 904C09            MOV     DPTR,#04C09H
000A5F E0                MOVX    A,@DPTR
000A60 FB                MOV     R3,A
000A61 EE                MOV     A,R6
000A62 EB                MOV     A,R3
000A63 FF                MOV     R7,A
000A64 904CAB            MOV     DPTR,#R_AD_CaliDot1
000A67 EE                MOV     A,R6
000A68 F0                MOVX    @DPTR,A
000A69 A3                INC     DPTR
000A6A EF                MOV     A,R7
000A6B F0                MOVX    @DPTR,A
  985: 		R_AD_BUF = *(mem_sensor_buf+2 );
000A6C 904C0A            MOV     DPTR,#04C0AH
000A6F E0                MOVX    A,@DPTR
000A70 FF                MOV     R7,A
000A71 904DF9            MOV     DPTR,#R_AD_BUF
000A74 E4                CLR     A
000A75 F0                MOVX    @DPTR,A
000A76 A3                INC     DPTR
000A77 EF                MOV     A,R7
000A78 F0                MOVX    @DPTR,A
  986: 		R_AD_CaliDot2 =R_AD_BUF<<8 |  (*(mem_sensor_buf+3));
000A79 E0                MOVX    A,@DPTR
000A7A FE                MOV     R6,A
000A7B 904C0B            MOV     DPTR,#04C0BH
000A7E E0                MOVX    A,@DPTR
000A7F FB                MOV     R3,A
000A80 EE                MOV     A,R6
000A81 EB                MOV     A,R3
000A82 FF                MOV     R7,A
000A83 904CAD            MOV     DPTR,#R_AD_CaliDot2
000A86 EE                MOV     A,R6
000A87 F0                MOVX    @DPTR,A
000A88 A3                INC     DPTR
000A89 EF                MOV     A,R7
000A8A F0                MOVX    @DPTR,A
  987: 		R_AD_BUF = *(mem_sensor_buf+4 );
000A8B 904C0C            MOV     DPTR,#04C0CH
000A8E E0                MOVX    A,@DPTR
000A8F FF                MOV     R7,A
000A90 904DF9            MOV     DPTR,#R_AD_BUF
000A93 E4                CLR     A
000A94 F0                MOVX    @DPTR,A
000A95 A3                INC     DPTR
000A96 EF                MOV     A,R7
000A97 F0                MOVX    @DPTR,A
  988: 		R_AD_CaliDot3 =R_AD_BUF<<8 |  (*(mem_sensor_buf+5));	
000A98 E0                MOVX    A,@DPTR
000A99 FE                MOV     R6,A
000A9A 904C0D            MOV     DPTR,#04C0DH
000A9D E0                MOVX    A,@DPTR
000A9E FB                MOV     R3,A
000A9F EE                MOV     A,R6
000AA0 EB                MOV     A,R3
000AA1 FF                MOV     R7,A
000AA2 904CAF            MOV     DPTR,#R_AD_CaliDot3
000AA5 EE                MOV     A,R6
000AA6 F0                MOVX    @DPTR,A
000AA7 A3                INC     DPTR
000AA8 EF                MOV     A,R7
000AA9 F0                MOVX    @DPTR,A
  989: 
  990: 		
  991: 
  992: 		if(R_AD_CaliDot1<CS_CaliStateData_Down || R_AD_CaliDot1>CS_CaliStateData_Up)
000AAA 904CAB            MOV     DPTR,#R_AD_CaliDot1
000AAD E0                MOVX    A,@DPTR
000AAE FE                MOV     R6,A
000AAF A3                INC     DPTR
000AB0 E0                MOVX    A,@DPTR
000AB1 FF                MOV     R7,A
000AB2 C3                CLR     C
000AB3 94E8              SUBB    A,#0E8H
000AB5 EE                MOV     A,R6
000AB6 9403              SUBB    A,#03H
000AB8 4009              JC      ?C0132?CS_SCALE_PROC
000ABA D3                SETB    C
000ABB EF                MOV     A,R7
000ABC 9470              SUBB    A,#070H
000ABE EE                MOV     A,R6
000ABF 9417              SUBB    A,#017H
000AC1 404C              JC      ?C0131?CS_SCALE_PROC
000AC3         ?C0132?CS_SCALE_PROC:
  993: 			if(R_AD_CaliDot2<CS_CaliStateData_Down||R_AD_CaliDot2>CS_CaliStateData_Up)
000AC3 904CAD            MOV     DPTR,#R_AD_CaliDot2
000AC6 E0                MOVX    A,@DPTR
000AC7 FE                MOV     R6,A
000AC8 A3                INC     DPTR
000AC9 E0                MOVX    A,@DPTR
000ACA FF                MOV     R7,A
000ACB C3                CLR     C
000ACC 94E8              SUBB    A,#0E8H
000ACE EE                MOV     A,R6
000ACF 9403              SUBB    A,#03H
000AD1 4009              JC      ?C0134?CS_SCALE_PROC
000AD3 D3                SETB    C
000AD4 EF                MOV     A,R7
000AD5 9470              SUBB    A,#070H
000AD7 EE                MOV     A,R6
000AD8 9417              SUBB    A,#017H
000ADA 4033              JC      ?C0131?CS_SCALE_PROC
000ADC         ?C0134?CS_SCALE_PROC:
  994: 				if(R_AD_CaliDot3<CS_CaliStateData_Down||R_AD_CaliDot3>CS_CaliStateData_Up)
000ADC 904CAF            MOV     DPTR,#R_AD_CaliDot3
000ADF E0                MOVX    A,@DPTR
000AE0 FE                MOV     R6,A
000AE1 A3                INC     DPTR
000AE2 E0                MOVX    A,@DPTR
000AE3 FF                MOV     R7,A
000AE4 C3                CLR     C
000AE5 94E8              SUBB    A,#0E8H
000AE7 EE                MOV     A,R6
000AE8 9403              SUBB    A,#03H
000AEA 4009              JC      ?C0136?CS_SCALE_PROC
000AEC D3                SETB    C
000AED EF                MOV     A,R7
000AEE 9470              SUBB    A,#070H
000AF0 EE                MOV     A,R6
000AF1 9417              SUBB    A,#017H
000AF3 401A              JC      ?C0131?CS_SCALE_PROC
000AF5         ?C0136?CS_SCALE_PROC:
  995: 					{
  996: 					R_AD_CaliDot1	= 6000;
000AF5 904CAB            MOV     DPTR,#R_AD_CaliDot1
000AF8 7417              MOV     A,#017H
000AFA F0                MOVX    @DPTR,A
000AFB A3                INC     DPTR
000AFC 7470              MOV     A,#070H
000AFE F0                MOVX    @DPTR,A
  997: 					R_AD_CaliDot2	= 5000;
000AFF A3                INC     DPTR
000B00 7413              MOV     A,#013H
000B02 F0                MOVX    @DPTR,A
000B03 A3                INC     DPTR
000B04 7488              MOV     A,#088H
000B06 F0                MOVX    @DPTR,A
  998: 					R_AD_CaliDot3	= 4000;	
000B07 A3                INC     DPTR
000B08 740F              MOV     A,#0FH
000B0A F0                MOVX    @DPTR,A
000B0B A3                INC     DPTR
000B0C 74A0              MOV     A,#0A0H
000B0E F0                MOVX    @DPTR,A
  999: 					}	
000B0F         ?C0131?CS_SCALE_PROC:
 1000: 		
 1001: 		
 1002: 		R_OpenWeight_Ad	= R_AD_CaliDot1/10;
000B0F 904CAB            MOV     DPTR,#R_AD_CaliDot1
000B12 E0                MOVX    A,@DPTR
000B13 FE                MOV     R6,A
000B14 A3                INC     DPTR
000B15 E0                MOVX    A,@DPTR
000B16 FF                MOV     R7,A
000B17 7C00              MOV     R4,#00H
000B19 7D0A              MOV     R5,#0AH
000B1B 120173            LCALL   ?C?UIDIV
000B1E 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000B21 EE                MOV     A,R6
000B22 F0                MOVX    @DPTR,A
000B23 A3                INC     DPTR
000B24 EF                MOV     A,R7
000B25 F0                MOVX    @DPTR,A
 1003: 		return	0;		
000B26 E4                CLR     A
000B27 FE                MOV     R6,A
000B28 FF                MOV     R7,A
000B29 22                RET     
 1004: 		}
000B2A         ?C0130?CS_SCALE_PROC:
 1005: 	if(option==CaliProcSetOpenWeight)
000B2A ED                MOV     A,R5
000B2B B4061B            CJNE    A,#06H,?C0137?CS_SCALE_PROC
 1006: 		{
 1007: 		R_OpenWeight_Ad	= R_AD_CaliDot1/10;
000B2E 904CAB            MOV     DPTR,#R_AD_CaliDot1
000B31 E0                MOVX    A,@DPTR
000B32 FE                MOV     R6,A
000B33 A3                INC     DPTR
000B34 E0                MOVX    A,@DPTR
000B35 FF                MOV     R7,A
000B36 7C00              MOV     R4,#00H
000B38 7D0A              MOV     R5,#0AH
000B3A 120173            LCALL   ?C?UIDIV
000B3D 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000B40 EE                MOV     A,R6
000B41 F0                MOVX    @DPTR,A
000B42 A3                INC     DPTR
000B43 EF                MOV     A,R7
000B44 F0                MOVX    @DPTR,A
 1008: 		return	0;
000B45 E4                CLR     A
000B46 FE                MOV     R6,A
000B47 FF                MOV     R7,A
000B48 22                RET     
 1009: 		}
000B49         ?C0137?CS_SCALE_PROC:
 1010: 	
 1011: 	if(option==CaliProcGetOpenWeight)
000B49 ED                MOV     A,R5
000B4A B40709            CJNE    A,#07H,?C0138?CS_SCALE_PROC
 1012: 		return R_OpenWeight_Ad;
000B4D 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000B50 E0                MOVX    A,@DPTR
000B51 FE                MOV     R6,A
000B52 A3                INC     DPTR
000B53 E0                MOVX    A,@DPTR
000B54 FF                MOV     R7,A
000B55 22                RET     
000B56         ?C0138?CS_SCALE_PROC:
 1013: 	if(option==CaliProcGetCaliDot1)
000B56 ED                MOV     A,R5
000B57 B40209            CJNE    A,#02H,?C0139?CS_SCALE_PROC
 1014: 		return R_AD_CaliDot1;
000B5A 904CAB            MOV     DPTR,#R_AD_CaliDot1
000B5D E0                MOVX    A,@DPTR
000B5E FE                MOV     R6,A
000B5F A3                INC     DPTR
000B60 E0                MOVX    A,@DPTR
000B61 FF                MOV     R7,A
000B62 22                RET     
000B63         ?C0139?CS_SCALE_PROC:
 1015: 	if(option==CaliProcGetCaliDot2)
000B63 ED                MOV     A,R5
000B64 B40309            CJNE    A,#03H,?C0140?CS_SCALE_PROC
 1016: 		return R_AD_CaliDot2;
000B67 904CAD            MOV     DPTR,#R_AD_CaliDot2
000B6A E0                MOVX    A,@DPTR
000B6B FE                MOV     R6,A
000B6C A3                INC     DPTR
000B6D E0                MOVX    A,@DPTR
000B6E FF                MOV     R7,A
000B6F 22                RET     
000B70         ?C0140?CS_SCALE_PROC:
 1017: 	if(option==CaliProcGetCaliDot3)
000B70 ED                MOV     A,R5
000B71 B40409            CJNE    A,#04H,?C0141?CS_SCALE_PROC
 1018: 		return R_AD_CaliDot3;
000B74 904CAF            MOV     DPTR,#R_AD_CaliDot3
000B77 E0                MOVX    A,@DPTR
000B78 FE                MOV     R6,A
000B79 A3                INC     DPTR
000B7A E0                MOVX    A,@DPTR
000B7B FF                MOV     R7,A
000B7C 22                RET     
000B7D         ?C0141?CS_SCALE_PROC:
 1019: 	
 1020: 	R_AD_BUF = R_AD_Original;
000B7D 904CD8            MOV     DPTR,#R_AD_Original
000B80 E0                MOVX    A,@DPTR
000B81 FE                MOV     R6,A
000B82 A3                INC     DPTR
000B83 E0                MOVX    A,@DPTR
000B84 FF                MOV     R7,A
000B85 904DF9            MOV     DPTR,#R_AD_BUF
000B88 EE                MOV     A,R6
000B89 F0                MOVX    @DPTR,A
000B8A FC                MOV     R4,A
000B8B A3                INC     DPTR
000B8C EF                MOV     A,R7
000B8D F0                MOVX    @DPTR,A
000B8E FD                MOV     R5,A
 1021: 	R_AD_BUF=CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
000B8F E4                CLR     A
000B90 FF                MOV     R7,A
000B91 123118            LCALL   _CS_Scale_AdcFilter
000B94 904DF9            MOV     DPTR,#R_AD_BUF
000B97 EE                MOV     A,R6
000B98 F0                MOVX    @DPTR,A
000B99 FC                MOV     R4,A
000B9A A3                INC     DPTR
000B9B EF                MOV     A,R7
000B9C F0                MOVX    @DPTR,A
000B9D FD                MOV     R5,A
 1022: 	R_AdFilTimes = CS_Scale_AdcFilter(ScaleAdcFilterGetFilTimes,R_AD_BUF);
000B9E 7F02              MOV     R7,#02H
000BA0 123118            LCALL   _CS_Scale_AdcFilter
000BA3 904DF5            MOV     DPTR,#R_AdFilTimes
000BA6 EE                MOV     A,R6
000BA7 F0                MOVX    @DPTR,A
000BA8 A3                INC     DPTR
000BA9 EF                MOV     A,R7
000BAA F0                MOVX    @DPTR,A
 1023: 	
 1024: 	
 1025: 
 1026: 	//数据稳定才处理
 1027: 		
 1028: 	if(R_CaliState==CS_CaliState_GetZero) 
000BAB 904CB1            MOV     DPTR,#R_CaliState
000BAE E0                MOVX    A,@DPTR
000BAF 7048              JNZ     ?C0142?CS_SCALE_PROC
 1029: 		{	
 1030: 
 1031: 			R_AD_CaliDot1 = R_AD_BUF;	//暂存零点用于显示
000BB1 904DF9            MOV     DPTR,#R_AD_BUF
000BB4 E0                MOVX    A,@DPTR
000BB5 FC                MOV     R4,A
000BB6 A3                INC     DPTR
000BB7 E0                MOVX    A,@DPTR
000BB8 FD                MOV     R5,A
000BB9 904CAB            MOV     DPTR,#R_AD_CaliDot1
000BBC EC                MOV     A,R4
000BBD F0                MOVX    @DPTR,A
000BBE A3                INC     DPTR
000BBF ED                MOV     A,R5
000BC0 F0                MOVX    @DPTR,A
 1032: 			if(R_AdFilTimes>=CS_Cali_Steadytimes)
000BC1 C3                CLR     C
000BC2 904DF6            MOV     DPTR,#R_AdFilTimes+01H
000BC5 E0                MOVX    A,@DPTR
000BC6 940C              SUBB    A,#0CH
000BC8 904DF5            MOV     DPTR,#R_AdFilTimes
000BCB E0                MOVX    A,@DPTR
000BCC 9400              SUBB    A,#00H
000BCE 401C              JC      ?C0143?CS_SCALE_PROC
 1033: 				{
 1034: 			CS_Scale_ZeroProc(SetPowerOnZero,R_AD_BUF);	
000BD0 7F05              MOV     R7,#05H
000BD2 1212F0            LCALL   _CS_Scale_ZeroProc
 1035: 			CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000BD5 904DF9            MOV     DPTR,#R_AD_BUF
000BD8 E0                MOVX    A,@DPTR
000BD9 FC                MOV     R4,A
000BDA A3                INC     DPTR
000BDB E0                MOVX    A,@DPTR
000BDC FD                MOV     R5,A
000BDD 7F01              MOV     R7,#01H
000BDF 123118            LCALL   _CS_Scale_AdcFilter
 1036: 			CS_SoftTimer(ResetSoftTimer);
000BE2 7F02              MOV     R7,#02H
000BE4 F115              ACALL   _CS_SoftTimer
 1037: 			R_CaliState = CS_CaliState_ShowCal1;
000BE6 904CB1            MOV     DPTR,#R_CaliState
000BE9 7401              MOV     A,#01H
000BEB F0                MOVX    @DPTR,A
 1038: 				}
000BEC         ?C0143?CS_SCALE_PROC:
 1039: 		CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_BUF);
000BEC 904DF9            MOV     DPTR,#R_AD_BUF
000BEF E0                MOVX    A,@DPTR
000BF0 FC                MOV     R4,A
000BF1 A3                INC     DPTR
000BF2 E0                MOVX    A,@DPTR
000BF3 FD                MOV     R5,A
000BF4 7F21              MOV     R7,#021H
000BF6 1215F8            LCALL   _CS_ScaleDisplay_FreshBuf
 1040: 		}
000BF9         ?C0142?CS_SCALE_PROC:
 1041: 	
 1042: 	if(R_CaliState == CS_CaliState_ShowCal1)
000BF9 904CB1            MOV     DPTR,#R_CaliState
000BFC E0                MOVX    A,@DPTR
000BFD B40118            CJNE    A,#01H,?C0144?CS_SCALE_PROC
 1043: 		{
 1044: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 	
000C00 7F01              MOV     R7,#01H
000C02 F115              ACALL   _CS_SoftTimer
000C04 EF                MOV     A,R7
000C05 D3                SETB    C
000C06 94C8              SUBB    A,#0C8H
000C08 4006              JC      ?C0145?CS_SCALE_PROC
 1045: 			R_CaliState = CS_CaliState_GetCal1;
000C0A 904CB1            MOV     DPTR,#R_CaliState
000C0D 7402              MOV     A,#02H
000C0F F0                MOVX    @DPTR,A
000C10         ?C0145?CS_SCALE_PROC:
 1046: 		CS_ScaleDisplay_FreshBuf(DisplayCal1,0);
000C10 E4                CLR     A
000C11 FD                MOV     R5,A
000C12 FC                MOV     R4,A
000C13 7F81              MOV     R7,#081H
000C15 1215F8            LCALL   _CS_ScaleDisplay_FreshBuf
 1047: 		}
000C18         ?C0144?CS_SCALE_PROC:
 1048: 
 1049: 	if(R_CaliState==CS_CaliState_GetCal1)
000C18 904CB1            MOV     DPTR,#R_CaliState
000C1B E0                MOVX    A,@DPTR
000C1C 6402              XRL     A,#02H
000C1E 6002              JZ      $ + 4H
000C20 81D9              AJMP    ?C0146?CS_SCALE_PROC
 1050: 		{	
 1051: 			R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);	
000C22 FD                MOV     R5,A
000C23 FC                MOV     R4,A
000C24 FF                MOV     R7,A
000C25 1212F0            LCALL   _CS_Scale_ZeroProc
000C28 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000C2B EE                MOV     A,R6
000C2C F0                MOVX    @DPTR,A
000C2D A3                INC     DPTR
000C2E EF                MOV     A,R7
000C2F F0                MOVX    @DPTR,A
 1052: 			R_AD_CaliDot1 = R_AD_BUF - R_AD_PowerOnZero;
000C30 C3                CLR     C
000C31 904DFA            MOV     DPTR,#R_AD_BUF+01H
000C34 E0                MOVX    A,@DPTR
000C35 9F                SUBB    A,R7
000C36 FF                MOV     R7,A
000C37 904DF9            MOV     DPTR,#R_AD_BUF
000C3A E0                MOVX    A,@DPTR
000C3B 9E                SUBB    A,R6
000C3C FE                MOV     R6,A
000C3D 904CAB            MOV     DPTR,#R_AD_CaliDot1
000C40 F0                MOVX    @DPTR,A
000C41 A3                INC     DPTR
000C42 EF                MOV     A,R7
000C43 F0                MOVX    @DPTR,A
 1053: 				
 1054: 			if((R_AD_CaliDot1 < R_OpenWeight_Ad)||(R_AD_BUF < R_AD_PowerOnZero))
000C44 D3                SETB    C
000C45 904CB3            MOV     DPTR,#R_OpenWeight_Ad+01H
000C48 E0                MOVX    A,@DPTR
000C49 9F                SUBB    A,R7
000C4A 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000C4D E0                MOVX    A,@DPTR
000C4E 9E                SUBB    A,R6
000C4F 5015              JNC     ?C0148?CS_SCALE_PROC
000C51 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000C54 E0                MOVX    A,@DPTR
000C55 FE                MOV     R6,A
000C56 A3                INC     DPTR
000C57 E0                MOVX    A,@DPTR
000C58 FF                MOV     R7,A
000C59 C3                CLR     C
000C5A 904DFA            MOV     DPTR,#R_AD_BUF+01H
000C5D E0                MOVX    A,@DPTR
000C5E 9F                SUBB    A,R7
000C5F 904DF9            MOV     DPTR,#R_AD_BUF
000C62 E0                MOVX    A,@DPTR
000C63 9E                SUBB    A,R6
000C64 5032              JNC     ?C0147?CS_SCALE_PROC
000C66         ?C0148?CS_SCALE_PROC:
 1055: 				{
 1056: 				if(R_AdFilTimes>=CS_Cali_Steadytimes)
000C66 C3                CLR     C
000C67 904DF6            MOV     DPTR,#R_AdFilTimes+01H
000C6A E0                MOVX    A,@DPTR
000C6B 940C              SUBB    A,#0CH
000C6D 904DF5            MOV     DPTR,#R_AdFilTimes
000C70 E0                MOVX    A,@DPTR
000C71 9400              SUBB    A,#00H
000C73 401A              JC      ?C0149?CS_SCALE_PROC
 1057: 					{
 1058: 					CS_Scale_ZeroProc(SetPowerOnZero,R_AD_BUF);	
000C75 904DF9            MOV     DPTR,#R_AD_BUF
000C78 E0                MOVX    A,@DPTR
000C79 FC                MOV     R4,A
000C7A A3                INC     DPTR
000C7B E0                MOVX    A,@DPTR
000C7C FD                MOV     R5,A
000C7D 7F05              MOV     R7,#05H
000C7F 1212F0            LCALL   _CS_Scale_ZeroProc
 1059: 					CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000C82 904DF9            MOV     DPTR,#R_AD_BUF
000C85 E0                MOVX    A,@DPTR
000C86 FC                MOV     R4,A
000C87 A3                INC     DPTR
000C88 E0                MOVX    A,@DPTR
000C89 FD                MOV     R5,A
000C8A 7F01              MOV     R7,#01H
000C8C 123118            LCALL   _CS_Scale_AdcFilter
 1060: 					}
000C8F         ?C0149?CS_SCALE_PROC:
 1061: 				R_AD_CaliDot1 = 0;
000C8F E4                CLR     A
000C90 904CAB            MOV     DPTR,#R_AD_CaliDot1
000C93 F0                MOVX    @DPTR,A
000C94 A3                INC     DPTR
000C95 F0                MOVX    @DPTR,A
 1062: 				}
000C96 8034              SJMP    ?C0150?CS_SCALE_PROC
000C98         ?C0147?CS_SCALE_PROC:
 1063: 			else
 1064: 				{
 1065: 				if((R_AD_CaliDot1> 750)&&(R_AdFilTimes>=CS_Cali_Steadytimes))
000C98 D3                SETB    C
000C99 904CAC            MOV     DPTR,#R_AD_CaliDot1+01H
000C9C E0                MOVX    A,@DPTR
000C9D 94EE              SUBB    A,#0EEH
000C9F 904CAB            MOV     DPTR,#R_AD_CaliDot1
000CA2 E0                MOVX    A,@DPTR
000CA3 9402              SUBB    A,#02H
000CA5 4025              JC      ?C0150?CS_SCALE_PROC
000CA7 904DF6            MOV     DPTR,#R_AdFilTimes+01H
000CAA E0                MOVX    A,@DPTR
000CAB 940C              SUBB    A,#0CH
000CAD 904DF5            MOV     DPTR,#R_AdFilTimes
000CB0 E0                MOVX    A,@DPTR
000CB1 9400              SUBB    A,#00H
000CB3 4017              JC      ?C0150?CS_SCALE_PROC
 1066: 					{				
 1067: 					CS_SoftTimer(ResetSoftTimer);
000CB5 7F02              MOV     R7,#02H
000CB7 F115              ACALL   _CS_SoftTimer
 1068: 					CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000CB9 904DF9            MOV     DPTR,#R_AD_BUF
000CBC E0                MOVX    A,@DPTR
000CBD FC                MOV     R4,A
000CBE A3                INC     DPTR
000CBF E0                MOVX    A,@DPTR
000CC0 FD                MOV     R5,A
000CC1 7F01              MOV     R7,#01H
000CC3 123118            LCALL   _CS_Scale_AdcFilter
 1069: 					R_CaliState = CS_CaliState_ShowCal2;
000CC6 904CB1            MOV     DPTR,#R_CaliState
000CC9 7403              MOV     A,#03H
000CCB F0                MOVX    @DPTR,A
 1070: 					}
 1071: 				}
000CCC         ?C0150?CS_SCALE_PROC:
 1072: 			CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_CaliDot1);
000CCC 904CAB            MOV     DPTR,#R_AD_CaliDot1
000CCF E0                MOVX    A,@DPTR
000CD0 FC                MOV     R4,A
000CD1 A3                INC     DPTR
000CD2 E0                MOVX    A,@DPTR
000CD3 FD                MOV     R5,A
000CD4 7F21              MOV     R7,#021H
000CD6 1215F8            LCALL   _CS_ScaleDisplay_FreshBuf
 1073: 			
 1074: 		}
000CD9         ?C0146?CS_SCALE_PROC:
 1075: 
 1076: 	if(R_CaliState == CS_CaliState_ShowCal2)
000CD9 904CB1            MOV     DPTR,#R_CaliState
000CDC E0                MOVX    A,@DPTR
000CDD B40318            CJNE    A,#03H,?C0152?CS_SCALE_PROC
 1077: 		{
 1078: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 	
000CE0 7F01              MOV     R7,#01H
000CE2 F115              ACALL   _CS_SoftTimer
000CE4 EF                MOV     A,R7
000CE5 D3                SETB    C
000CE6 94C8              SUBB    A,#0C8H
000CE8 4006              JC      ?C0153?CS_SCALE_PROC
 1079: 			R_CaliState = CS_CaliState_GetCal2;
000CEA 904CB1            MOV     DPTR,#R_CaliState
000CED 7404              MOV     A,#04H
000CEF F0                MOVX    @DPTR,A
000CF0         ?C0153?CS_SCALE_PROC:
 1080: 		CS_ScaleDisplay_FreshBuf(DisplayCal2,0);
000CF0 E4                CLR     A
000CF1 FD                MOV     R5,A
000CF2 FC                MOV     R4,A
000CF3 7F82              MOV     R7,#082H
000CF5 1215F8            LCALL   _CS_ScaleDisplay_FreshBuf
 1081: 		}
000CF8         ?C0152?CS_SCALE_PROC:
 1082: 	
 1083: 	if(R_CaliState==CS_CaliState_GetCal2)
000CF8 904CB1            MOV     DPTR,#R_CaliState
000CFB E0                MOVX    A,@DPTR
000CFC 6404              XRL     A,#04H
000CFE 6002              JZ      $ + 4H
000D00 A19E              AJMP    ?C0154?CS_SCALE_PROC
 1084: 		{		
 1085: 			R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);		
000D02 FD                MOV     R5,A
000D03 FC                MOV     R4,A
000D04 FF                MOV     R7,A
000D05 1212F0            LCALL   _CS_Scale_ZeroProc
000D08 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000D0B EE                MOV     A,R6
000D0C F0                MOVX    @DPTR,A
000D0D A3                INC     DPTR
000D0E EF                MOV     A,R7
000D0F F0                MOVX    @DPTR,A
 1086: 			weight_temp = R_AD_BUF - R_AD_PowerOnZero;
000D10 C3                CLR     C
000D11 904DFA            MOV     DPTR,#R_AD_BUF+01H
000D14 E0                MOVX    A,@DPTR
000D15 9F                SUBB    A,R7
000D16 FF                MOV     R7,A
000D17 904DF9            MOV     DPTR,#R_AD_BUF
000D1A E0                MOVX    A,@DPTR
000D1B 9E                SUBB    A,R6
000D1C FE                MOV     R6,A
000D1D 904DF7            MOV     DPTR,#weight_temp
000D20 F0                MOVX    @DPTR,A
000D21 A3                INC     DPTR
000D22 EF                MOV     A,R7
000D23 F0                MOVX    @DPTR,A
 1087: 					
 1088: 			if((weight_temp < R_AD_CaliDot1)||(R_AD_BUF < R_AD_PowerOnZero))
000D24 904CAB            MOV     DPTR,#R_AD_CaliDot1
000D27 E0                MOVX    A,@DPTR
000D28 FC                MOV     R4,A
000D29 A3                INC     DPTR
000D2A E0                MOVX    A,@DPTR
000D2B FD                MOV     R5,A
000D2C D3                SETB    C
000D2D 9F                SUBB    A,R7
000D2E EC                MOV     A,R4
000D2F 9E                SUBB    A,R6
000D30 5015              JNC     ?C0156?CS_SCALE_PROC
000D32 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000D35 E0                MOVX    A,@DPTR
000D36 FE                MOV     R6,A
000D37 A3                INC     DPTR
000D38 E0                MOVX    A,@DPTR
000D39 FF                MOV     R7,A
000D3A C3                CLR     C
000D3B 904DFA            MOV     DPTR,#R_AD_BUF+01H
000D3E E0                MOVX    A,@DPTR
000D3F 9F                SUBB    A,R7
000D40 904DF9            MOV     DPTR,#R_AD_BUF
000D43 E0                MOVX    A,@DPTR
000D44 9E                SUBB    A,R6
000D45 5009              JNC     ?C0155?CS_SCALE_PROC
000D47         ?C0156?CS_SCALE_PROC:
 1089: 				{
 1090: 				R_AD_CaliDot2 = 0;
000D47 E4                CLR     A
000D48 904CAD            MOV     DPTR,#R_AD_CaliDot2
000D4B F0                MOVX    @DPTR,A
000D4C A3                INC     DPTR
000D4D F0                MOVX    @DPTR,A
 1091: 				}
000D4E 8041              SJMP    ?C0157?CS_SCALE_PROC
000D50         ?C0155?CS_SCALE_PROC:
 1092: 			else
 1093: 				{
 1094: 				R_AD_CaliDot2 = weight_temp -R_AD_CaliDot1;
000D50 C3                CLR     C
000D51 904DF8            MOV     DPTR,#weight_temp+01H
000D54 E0                MOVX    A,@DPTR
000D55 9D                SUBB    A,R5
000D56 FF                MOV     R7,A
000D57 904DF7            MOV     DPTR,#weight_temp
000D5A E0                MOVX    A,@DPTR
000D5B 9C                SUBB    A,R4
000D5C FE                MOV     R6,A
000D5D 904CAD            MOV     DPTR,#R_AD_CaliDot2
000D60 F0                MOVX    @DPTR,A
000D61 A3                INC     DPTR
000D62 EF                MOV     A,R7
000D63 F0                MOVX    @DPTR,A
 1095: 			
 1096: 				if((R_AD_CaliDot2> 750)&& (R_AdFilTimes>=CS_Cali_Steadytimes))
000D64 D3                SETB    C
000D65 94EE              SUBB    A,#0EEH
000D67 EE                MOV     A,R6
000D68 9402              SUBB    A,#02H
000D6A 4025              JC      ?C0157?CS_SCALE_PROC
000D6C 904DF6            MOV     DPTR,#R_AdFilTimes+01H
000D6F E0                MOVX    A,@DPTR
000D70 940C              SUBB    A,#0CH
000D72 904DF5            MOV     DPTR,#R_AdFilTimes
000D75 E0                MOVX    A,@DPTR
000D76 9400              SUBB    A,#00H
000D78 4017              JC      ?C0157?CS_SCALE_PROC
 1097: 					{
 1098: 					CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000D7A 904DF9            MOV     DPTR,#R_AD_BUF
000D7D E0                MOVX    A,@DPTR
000D7E FC                MOV     R4,A
000D7F A3                INC     DPTR
000D80 E0                MOVX    A,@DPTR
000D81 FD                MOV     R5,A
000D82 7F01              MOV     R7,#01H
000D84 123118            LCALL   _CS_Scale_AdcFilter
 1099: 					CS_SoftTimer(ResetSoftTimer);
000D87 7F02              MOV     R7,#02H
000D89 F115              ACALL   _CS_SoftTimer
 1100: 					R_CaliState = CS_CaliState_ShowCal3;
000D8B 904CB1            MOV     DPTR,#R_CaliState
000D8E 7405              MOV     A,#05H
000D90 F0                MOVX    @DPTR,A
 1101: 					}
 1102: 				}
000D91         ?C0157?CS_SCALE_PROC:
 1103: 			CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_CaliDot2);
000D91 904CAD            MOV     DPTR,#R_AD_CaliDot2
000D94 E0                MOVX    A,@DPTR
000D95 FC                MOV     R4,A
000D96 A3                INC     DPTR
000D97 E0                MOVX    A,@DPTR
000D98 FD                MOV     R5,A
000D99 7F21              MOV     R7,#021H
000D9B 1215F8            LCALL   _CS_ScaleDisplay_FreshBuf
 1104: 		}
000D9E         ?C0154?CS_SCALE_PROC:
 1105: 
 1106: 	if(R_CaliState == CS_CaliState_ShowCal3)
000D9E 904CB1            MOV     DPTR,#R_CaliState
000DA1 E0                MOVX    A,@DPTR
000DA2 B40518            CJNE    A,#05H,?C0159?CS_SCALE_PROC
 1107: 		{
 1108: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 	
000DA5 7F01              MOV     R7,#01H
000DA7 F115              ACALL   _CS_SoftTimer
000DA9 EF                MOV     A,R7
000DAA D3                SETB    C
000DAB 94C8              SUBB    A,#0C8H
000DAD 4006              JC      ?C0160?CS_SCALE_PROC
 1109: 			R_CaliState = CS_CaliState_GetCal3;
000DAF 904CB1            MOV     DPTR,#R_CaliState
000DB2 7406              MOV     A,#06H
000DB4 F0                MOVX    @DPTR,A
000DB5         ?C0160?CS_SCALE_PROC:
 1110: 		CS_ScaleDisplay_FreshBuf(DisplayCal3,0);
000DB5 E4                CLR     A
000DB6 FD                MOV     R5,A
000DB7 FC                MOV     R4,A
000DB8 7F83              MOV     R7,#083H
000DBA 1215F8            LCALL   _CS_ScaleDisplay_FreshBuf
 1111: 		}
000DBD         ?C0159?CS_SCALE_PROC:
 1112: 	
 1113: 	if(R_CaliState==CS_CaliState_GetCal3)
000DBD 904CB1            MOV     DPTR,#R_CaliState
000DC0 E0                MOVX    A,@DPTR
000DC1 6406              XRL     A,#06H
000DC3 6002              JZ      $ + 4H
000DC5 C17C              AJMP    ?C0161?CS_SCALE_PROC
 1114: 		{		
 1115: 			R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);		
000DC7 FD                MOV     R5,A
000DC8 FC                MOV     R4,A
000DC9 FF                MOV     R7,A
000DCA 1212F0            LCALL   _CS_Scale_ZeroProc
000DCD 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000DD0 EE                MOV     A,R6
000DD1 F0                MOVX    @DPTR,A
000DD2 A3                INC     DPTR
000DD3 EF                MOV     A,R7
000DD4 F0                MOVX    @DPTR,A
 1116: 			weight_temp = R_AD_BUF - R_AD_PowerOnZero;
000DD5 C3                CLR     C
000DD6 904DFA            MOV     DPTR,#R_AD_BUF+01H
000DD9 E0                MOVX    A,@DPTR
000DDA 9F                SUBB    A,R7
000DDB FF                MOV     R7,A
000DDC 904DF9            MOV     DPTR,#R_AD_BUF
000DDF E0                MOVX    A,@DPTR
000DE0 9E                SUBB    A,R6
000DE1 FE                MOV     R6,A
000DE2 904DF7            MOV     DPTR,#weight_temp
000DE5 F0                MOVX    @DPTR,A
000DE6 A3                INC     DPTR
000DE7 EF                MOV     A,R7
000DE8 F0                MOVX    @DPTR,A
 1117: 					
 1118: 			if((weight_temp < R_AD_CaliDot1)||(R_AD_BUF < R_AD_PowerOnZero))
000DE9 904CAB            MOV     DPTR,#R_AD_CaliDot1
000DEC E0                MOVX    A,@DPTR
000DED FC                MOV     R4,A
000DEE A3                INC     DPTR
000DEF E0                MOVX    A,@DPTR
000DF0 FD                MOV     R5,A
000DF1 D3                SETB    C
000DF2 9F                SUBB    A,R7
000DF3 EC                MOV     A,R4
000DF4 9E                SUBB    A,R6
000DF5 5015              JNC     ?C0163?CS_SCALE_PROC
000DF7 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000DFA E0                MOVX    A,@DPTR
000DFB FE                MOV     R6,A
000DFC A3                INC     DPTR
000DFD E0                MOVX    A,@DPTR
000DFE FF                MOV     R7,A
000DFF C3                CLR     C
000E00 904DFA            MOV     DPTR,#R_AD_BUF+01H
000E03 E0                MOVX    A,@DPTR
000E04 9F                SUBB    A,R7
000E05 904DF9            MOV     DPTR,#R_AD_BUF
000E08 E0                MOVX    A,@DPTR
000E09 9E                SUBB    A,R6
000E0A 5009              JNC     ?C0162?CS_SCALE_PROC
000E0C         ?C0163?CS_SCALE_PROC:
 1119: 				{
 1120: 				R_AD_CaliDot3 = 0;
000E0C E4                CLR     A
000E0D 904CAF            MOV     DPTR,#R_AD_CaliDot3
000E10 F0                MOVX    @DPTR,A
000E11 A3                INC     DPTR
000E12 F0                MOVX    @DPTR,A
 1121: 				}
000E13 805A              SJMP    ?C0164?CS_SCALE_PROC
000E15         ?C0162?CS_SCALE_PROC:
 1122: 			else
 1123: 				{
 1124: 				weight_temp = weight_temp -R_AD_CaliDot1;
000E15 C3                CLR     C
000E16 904DF8            MOV     DPTR,#weight_temp+01H
000E19 E0                MOVX    A,@DPTR
000E1A 9D                SUBB    A,R5
000E1B FF                MOV     R7,A
000E1C 904DF7            MOV     DPTR,#weight_temp
000E1F E0                MOVX    A,@DPTR
000E20 9C                SUBB    A,R4
000E21 FE                MOV     R6,A
000E22 F0                MOVX    @DPTR,A
000E23 A3                INC     DPTR
000E24 EF                MOV     A,R7
000E25 F0                MOVX    @DPTR,A
 1125: 
 1126: 				if(weight_temp < R_AD_CaliDot2)
000E26 904CAD            MOV     DPTR,#R_AD_CaliDot2
000E29 E0                MOVX    A,@DPTR
000E2A FC                MOV     R4,A
000E2B A3                INC     DPTR
000E2C E0                MOVX    A,@DPTR
000E2D FD                MOV     R5,A
000E2E D3                SETB    C
000E2F 9F                SUBB    A,R7
000E30 EC                MOV     A,R4
000E31 9E                SUBB    A,R6
000E32 4007              JC      ?C0165?CS_SCALE_PROC
 1127: 					{
 1128: 					R_AD_CaliDot3 = 0;
000E34 E4                CLR     A
000E35 A3                INC     DPTR
000E36 F0                MOVX    @DPTR,A
000E37 A3                INC     DPTR
000E38 F0                MOVX    @DPTR,A
 1129: 					
 1130: 					}
000E39 8034              SJMP    ?C0164?CS_SCALE_PROC
000E3B         ?C0165?CS_SCALE_PROC:
 1131: 				else
 1132: 					{
 1133: 				R_AD_CaliDot3 = weight_temp -R_AD_CaliDot2;
000E3B C3                CLR     C
000E3C 904DF8            MOV     DPTR,#weight_temp+01H
000E3F E0                MOVX    A,@DPTR
000E40 9D                SUBB    A,R5
000E41 FF                MOV     R7,A
000E42 904DF7            MOV     DPTR,#weight_temp
000E45 E0                MOVX    A,@DPTR
000E46 9C                SUBB    A,R4
000E47 FE                MOV     R6,A
000E48 904CAF            MOV     DPTR,#R_AD_CaliDot3
000E4B F0                MOVX    @DPTR,A
000E4C A3                INC     DPTR
000E4D EF                MOV     A,R7
000E4E F0                MOVX    @DPTR,A
 1134: 			
 1135: 				if((R_AD_CaliDot3> 750)&& (R_AdFilTimes>=CS_Cali_Steadytimes))
000E4F D3                SETB    C
000E50 94EE              SUBB    A,#0EEH
000E52 EE                MOV     A,R6
000E53 9402              SUBB    A,#02H
000E55 4018              JC      ?C0164?CS_SCALE_PROC
000E57 904DF6            MOV     DPTR,#R_AdFilTimes+01H
000E5A E0                MOVX    A,@DPTR
000E5B 940C              SUBB    A,#0CH
000E5D 904DF5            MOV     DPTR,#R_AdFilTimes
000E60 E0                MOVX    A,@DPTR
000E61 9400              SUBB    A,#00H
000E63 400A              JC      ?C0164?CS_SCALE_PROC
 1136: 					{
 1137: 					CS_SoftTimer(ResetSoftTimer);
000E65 7F02              MOV     R7,#02H
000E67 F115              ACALL   _CS_SoftTimer
 1138: 					R_CaliState = CS_CaliState_ShowCal4;
000E69 904CB1            MOV     DPTR,#R_CaliState
000E6C 7407              MOV     A,#07H
000E6E F0                MOVX    @DPTR,A
 1139: 					}
 1140: 					}
 1141: 				}
000E6F         ?C0164?CS_SCALE_PROC:
 1142: 			CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_CaliDot3);
000E6F 904CAF            MOV     DPTR,#R_AD_CaliDot3
000E72 E0                MOVX    A,@DPTR
000E73 FC                MOV     R4,A
000E74 A3                INC     DPTR
000E75 E0                MOVX    A,@DPTR
000E76 FD                MOV     R5,A
000E77 7F21              MOV     R7,#021H
000E79 1215F8            LCALL   _CS_ScaleDisplay_FreshBuf
 1143: 		}
000E7C         ?C0161?CS_SCALE_PROC:
 1144: 	
 1145: 	if(R_CaliState == CS_CaliState_ShowCal4)
000E7C 904CB1            MOV     DPTR,#R_CaliState
000E7F E0                MOVX    A,@DPTR
000E80 B40718            CJNE    A,#07H,?C0168?CS_SCALE_PROC
 1146: 		{
 1147: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 
000E83 7F01              MOV     R7,#01H
000E85 F115              ACALL   _CS_SoftTimer
000E87 EF                MOV     A,R7
000E88 D3                SETB    C
000E89 94C8              SUBB    A,#0C8H
000E8B 4006              JC      ?C0169?CS_SCALE_PROC
 1148: 			R_CaliState = CS_CaliState_SaveData;
000E8D 904CB1            MOV     DPTR,#R_CaliState
000E90 7408              MOV     A,#08H
000E92 F0                MOVX    @DPTR,A
000E93         ?C0169?CS_SCALE_PROC:
 1149: 		CS_ScaleDisplay_FreshBuf(DisplayCal4,0);
000E93 E4                CLR     A
000E94 FD                MOV     R5,A
000E95 FC                MOV     R4,A
000E96 7F84              MOV     R7,#084H
000E98 1215F8            LCALL   _CS_ScaleDisplay_FreshBuf
 1150: 		}
000E9B         ?C0168?CS_SCALE_PROC:
 1151: 	
 1152: 	if(R_CaliState==CS_CaliState_SaveData)
000E9B 904CB1            MOV     DPTR,#R_CaliState
000E9E E0                MOVX    A,@DPTR
000E9F 6408              XRL     A,#08H
000EA1 706E              JNZ     ?C0170?CS_SCALE_PROC
 1153: 		{
 1154: 		
 1155: 		R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);
000EA3 FD                MOV     R5,A
000EA4 FC                MOV     R4,A
000EA5 FF                MOV     R7,A
000EA6 1212F0            LCALL   _CS_Scale_ZeroProc
000EA9 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000EAC EE                MOV     A,R6
000EAD F0                MOVX    @DPTR,A
000EAE A3                INC     DPTR
000EAF EF                MOV     A,R7
000EB0 F0                MOVX    @DPTR,A
 1156: 		CS_Scale_ZeroProc(SetRunningZero,R_AD_PowerOnZero);
000EB1 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000EB4 E0                MOVX    A,@DPTR
000EB5 FC                MOV     R4,A
000EB6 A3                INC     DPTR
000EB7 E0                MOVX    A,@DPTR
000EB8 FD                MOV     R5,A
000EB9 7F06              MOV     R7,#06H
000EBB 1212F0            LCALL   _CS_Scale_ZeroProc
 1157: 		R_Scale_state = CS_Scale_state_weighting;
000EBE 904CC5            MOV     DPTR,#R_Scale_state
000EC1 7401              MOV     A,#01H
000EC3 F0                MOVX    @DPTR,A
 1158: 		R_OpenWeight_Ad	=  R_AD_CaliDot1/10;
000EC4 904CAB            MOV     DPTR,#R_AD_CaliDot1
000EC7 E0                MOVX    A,@DPTR
000EC8 FA                MOV     R2,A
000EC9 A3                INC     DPTR
000ECA E0                MOVX    A,@DPTR
000ECB 7C00              MOV     R4,#00H
000ECD 7D0A              MOV     R5,#0AH
000ECF FF                MOV     R7,A
000ED0 AE02              MOV     R6,AR2
000ED2 120173            LCALL   ?C?UIDIV
000ED5 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000ED8 EE                MOV     A,R6
000ED9 F0                MOVX    @DPTR,A
000EDA A3                INC     DPTR
000EDB EF                MOV     A,R7
000EDC F0                MOVX    @DPTR,A
 1159: 
 1160: 		/*
 1161: 		R_Debug_temp=R_AD_CaliDot2;
 1162: 		CS_ScaleDisplay_Debug();
 1163: 		while(1);
 1164: 		*/
 1165: 		
 1166: 		*(mem_sensor_buf )= HI_UINT16(R_AD_CaliDot1);
000EDD EA                MOV     A,R2
000EDE 904C08            MOV     DPTR,#04C08H
000EE1 F0                MOVX    @DPTR,A
 1167: 		*(mem_sensor_buf+1) = LO_UINT16(R_AD_CaliDot1);
000EE2 904CAB            MOV     DPTR,#R_AD_CaliDot1
000EE5 E0                MOVX    A,@DPTR
000EE6 A3                INC     DPTR
000EE7 E0                MOVX    A,@DPTR
000EE8 904C09            MOV     DPTR,#04C09H
000EEB F0                MOVX    @DPTR,A
 1168: 		*(mem_sensor_buf+2 )= HI_UINT16(R_AD_CaliDot2);
000EEC 904CAD            MOV     DPTR,#R_AD_CaliDot2
000EEF E0                MOVX    A,@DPTR
000EF0 FC                MOV     R4,A
000EF1 A3                INC     DPTR
000EF2 E0                MOVX    A,@DPTR
000EF3 FD                MOV     R5,A
000EF4 EC                MOV     A,R4
000EF5 904C0A            MOV     DPTR,#04C0AH
000EF8 F0                MOVX    @DPTR,A
 1169: 		*(mem_sensor_buf+3) = LO_UINT16(R_AD_CaliDot2);
000EF9 ED                MOV     A,R5
000EFA A3                INC     DPTR
000EFB F0                MOVX    @DPTR,A
 1170: 		*(mem_sensor_buf+4 )= HI_UINT16(R_AD_CaliDot3);
000EFC 904CAF            MOV     DPTR,#R_AD_CaliDot3
000EFF E0                MOVX    A,@DPTR
000F00 FC                MOV     R4,A
000F01 A3                INC     DPTR
000F02 E0                MOVX    A,@DPTR
000F03 FD                MOV     R5,A
000F04 EC                MOV     A,R4
000F05 904C0C            MOV     DPTR,#04C0CH
000F08 F0                MOVX    @DPTR,A
 1171: 		*(mem_sensor_buf+5) = LO_UINT16(R_AD_CaliDot3);
000F09 ED                MOV     A,R5
000F0A A3                INC     DPTR
000F0B F0                MOVX    @DPTR,A
 1172: 		SpiFlashOperator(CS_CMD_WRITE_FLASH);
000F0C 7F41              MOV     R7,#041H
000F0E 121FC7            LCALL   _SpiFlashOperator
 1173: 
 1174: 		
 1175: 
 1176: 		}
000F11         ?C0170?CS_SCALE_PROC:
 1177: 	return 0;
000F11 E4                CLR     A
000F12 FE                MOV     R6,A
000F13 FF                MOV     R7,A
 1178: 	
 1179: }
000F14 22                RET     
----- FUNCTION _CS_Scale_CaliProc (END) -------


----- FUNCTION _CS_SoftTimer (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1396: u8_t CS_SoftTimer(u8_t option)
 1397: {
;---- Variable 'option' assigned to Register 'R7' ----
 1398: 	static u8_t xdata timecount; 				//计时变量
 1399: 	static u8_t xdata B_Timeout;
 1400: 
 1401: 	if(option==ResetSoftTimer)
000F15 EF                MOV     A,R7
000F16 B40207            CJNE    A,#02H,?C0202?CS_SCALE_PROC
 1402: 		{
 1403: 		timecount=0;
000F19 E4                CLR     A
000F1A 904CB8            MOV     DPTR,#timecount
000F1D F0                MOVX    @DPTR,A
 1404: 		B_Timeout = false;
000F1E A3                INC     DPTR
000F1F F0                MOVX    @DPTR,A
 1405: 		}
000F20         ?C0202?CS_SCALE_PROC:
 1406: 
 1407: 	if(option==GetSoftTimerTime)
000F20 EF                MOV     A,R7
000F21 B40106            CJNE    A,#01H,?C0203?CS_SCALE_PROC
 1408: 		return	timecount;
000F24 904CB8            MOV     DPTR,#timecount
000F27 E0                MOVX    A,@DPTR
000F28 FF                MOV     R7,A
000F29 22                RET     
000F2A         ?C0203?CS_SCALE_PROC:
 1409: 
 1410: 	if(option==SoftTimerInc)
000F2A EF                MOV     A,R7
000F2B 700C              JNZ     ?C0205?CS_SCALE_PROC
 1411: 		{
 1412: 		if(timecount<255 ) 
000F2D 904CB8            MOV     DPTR,#timecount
000F30 E0                MOVX    A,@DPTR
000F31 C3                CLR     C
000F32 94FF              SUBB    A,#0FFH
000F34 5003              JNC     ?C0205?CS_SCALE_PROC
 1413: 		timecount++;
000F36 E0                MOVX    A,@DPTR
000F37 04                INC     A
000F38 F0                MOVX    @DPTR,A
 1414: 		}
000F39         ?C0205?CS_SCALE_PROC:
 1415: 	
 1416: 	
 1417: 	if(timecount>SoftTimerTimeOut)
000F39 904CB8            MOV     DPTR,#timecount
000F3C E0                MOVX    A,@DPTR
000F3D D3                SETB    C
000F3E 9496              SUBB    A,#096H
000F40 4004              JC      ?C0207?CS_SCALE_PROC
 1418: 		B_Timeout = true;
000F42 A3                INC     DPTR
000F43 7401              MOV     A,#01H
000F45 F0                MOVX    @DPTR,A
000F46         ?C0207?CS_SCALE_PROC:
 1419: 
 1420: 	if(option==GetIfTimeOut)
000F46 EF                MOV     A,R7
000F47 B40306            CJNE    A,#03H,?C0208?CS_SCALE_PROC
 1421: 		return	B_Timeout;
000F4A 904CB9            MOV     DPTR,#B_Timeout
000F4D E0                MOVX    A,@DPTR
000F4E FF                MOV     R7,A
000F4F 22                RET     
000F50         ?C0208?CS_SCALE_PROC:
 1422: 	
 1423: 	return 0;
000F50 7F00              MOV     R7,#00H
 1424: 
 1425: }
000F52 22                RET     
----- FUNCTION _CS_SoftTimer (END) -------


----- FUNCTION CS_Scale_ChangeUnit (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  371: void CS_Scale_ChangeUnit()
  372: {
  373: 	switch(R_Selet_Unit)
  374: 		{
000F53 904CC6            MOV     DPTR,#R_Selet_Unit
000F56 E0                MOVX    A,@DPTR
000F57 24FE              ADD     A,#0FEH
000F59 600A              JZ      ?C0040?CS_SCALE_PROC
000F5B 14                DEC     A
000F5C 700E              JNZ     ?C0041?CS_SCALE_PROC
  375: 		/*
  376: 		case CS_ScaleDisplay_L_kg:
  377: 			R_Selet_Unit=CS_ScaleDisplay_L_lb;
  378: 			break;
  379: 		case CS_ScaleDisplay_L_lb:
  380: 			R_Selet_Unit=CS_ScaleDisplay_L_jin;
  381: 			break;
  382: 		*/
  383: 		case CS_ScaleDisplay_L_jin:
000F5E         ?C0039?CS_SCALE_PROC:
  384: 			R_Selet_Unit=CS_ScaleDisplay_L_gongjin;
000F5E 904CC6            MOV     DPTR,#R_Selet_Unit
000F61 7402              MOV     A,#02H
000F63 F0                MOVX    @DPTR,A
  385: 			break;
000F64 22                RET     
  386: 		case CS_ScaleDisplay_L_gongjin:
000F65         ?C0040?CS_SCALE_PROC:
  387: 			R_Selet_Unit=CS_ScaleDisplay_L_jin;
000F65 904CC6            MOV     DPTR,#R_Selet_Unit
000F68 7403              MOV     A,#03H
000F6A F0                MOVX    @DPTR,A
  388: 			break;
000F6B 22                RET     
  389: 		default :
000F6C         ?C0041?CS_SCALE_PROC:
  390: 			R_Selet_Unit=CS_ScaleDisplay_L_gongjin;
000F6C 904CC6            MOV     DPTR,#R_Selet_Unit
000F6F 7402              MOV     A,#02H
000F71 F0                MOVX    @DPTR,A
  391: 			break;
  392: 		}
  393: }
000F72 22                RET     
----- FUNCTION CS_Scale_ChangeUnit (END) -------


----- FUNCTION CS_ScaleDisplay_SteadyFlash (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  346: void CS_ScaleDisplay_SteadyFlash(void)
  347: {	 
  348: 
  349: 	u8_t xdata R_Weight_FlashTime;
  350: 
  351: 	
  352: 	if(CS_SoftTimer(GetIfTimeOut) == false)
000F73 7F03              MOV     R7,#03H
000F75 F115              ACALL   _CS_SoftTimer
000F77 EF                MOV     A,R7
000F78 702D              JNZ     ?C0057?CS_SCALEDISPLAY
  353: 		{
  354: 		R_Weight_FlashTime = CS_SoftTimer(GetSoftTimerTime);
000F7A 7F01              MOV     R7,#01H
000F7C F115              ACALL   _CS_SoftTimer
;---- Variable 'R_Weight_FlashTime' assigned to Register 'R7' ----
  355: 		   if(R_Weight_FlashTime<30) 
000F7E EF                MOV     A,R7
000F7F C3                CLR     C
000F80 941E              SUBB    A,#01EH
000F82 5003              JNC     ?C0048?CS_SCALEDISPLAY
  356: 		   	CS_ScaleDisplay_LcdBackup();
000F84 023AB3            LJMP    CS_ScaleDisplay_LcdBackup
000F87         ?C0048?CS_SCALEDISPLAY:
  357: 		    else if(R_Weight_FlashTime<60) 
000F87 EF                MOV     A,R7
000F88 C3                CLR     C
000F89 943C              SUBB    A,#03CH
000F8B 5002              JNC     ?C0050?CS_SCALEDISPLAY
  358: 				CS_ScaleDisplay_LcdShowNoDigit();
000F8D 8019              SJMP    CS_ScaleDisplay_LcdShowNoDigit
000F8F         ?C0050?CS_SCALEDISPLAY:
  359: 		    		else if(R_Weight_FlashTime<90)
000F8F EF                MOV     A,R7
000F90 C3                CLR     C
000F91 945A              SUBB    A,#05AH
000F93 5002              JNC     ?C0052?CS_SCALEDISPLAY
  360: 					CS_ScaleDisplay_LcdRestore();
000F95 802C              SJMP    CS_ScaleDisplay_LcdRestore
000F97         ?C0052?CS_SCALEDISPLAY:
  361: 		     			else if(R_Weight_FlashTime<120) 
000F97 EF                MOV     A,R7
000F98 C3                CLR     C
000F99 9478              SUBB    A,#078H
000F9B 5002              JNC     ?C0054?CS_SCALEDISPLAY
  362: 						CS_ScaleDisplay_LcdShowNoDigit();
000F9D 8009              SJMP    CS_ScaleDisplay_LcdShowNoDigit
000F9F         ?C0054?CS_SCALEDISPLAY:
  363: 		   			 	else if(R_Weight_FlashTime<150)
000F9F EF                MOV     A,R7
000FA0 C3                CLR     C
000FA1 9496              SUBB    A,#096H
000FA3 5002              JNC     ?C0057?CS_SCALEDISPLAY
  364: 							CS_ScaleDisplay_LcdRestore();		
000FA5 F1C3              ACALL   CS_ScaleDisplay_LcdRestore
  365: 		}
  366: }
000FA7         ?C0057?CS_SCALEDISPLAY:
000FA7 22                RET     
----- FUNCTION CS_ScaleDisplay_SteadyFlash (END) -------


----- FUNCTION CS_ScaleDisplay_LcdShowNoDigit (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  307: void CS_ScaleDisplay_LcdShowNoDigit(void)
  308: {
  309: 	CS_Lcd_Send_Data[0] &= 0x0f;
  310: 	CS_Lcd_Send_Data[1] &= 0x00;
000FA8 904D28            MOV     DPTR,#CS_Lcd_Send_Data
000FAB E0                MOVX    A,@DPTR
000FAC 540F              ANL     A,#0FH
000FAE F0                MOVX    @DPTR,A
  311: 	CS_Lcd_Send_Data[2] &= 0x08;
000FAF A3                INC     DPTR
000FB0 E0                MOVX    A,@DPTR
000FB1 E4                CLR     A
000FB2 F0                MOVX    @DPTR,A
  312: 	CS_Lcd_Send_Data[3] &= 0x08;
000FB3 A3                INC     DPTR
000FB4 E0                MOVX    A,@DPTR
000FB5 5408              ANL     A,#08H
000FB7 F0                MOVX    @DPTR,A
  313: 	CS_Lcd_Send_Data[4] &= 0xf0;
000FB8 A3                INC     DPTR
000FB9 E0                MOVX    A,@DPTR
000FBA 5408              ANL     A,#08H
000FBC F0                MOVX    @DPTR,A
  314: }
000FBD A3                INC     DPTR
000FBE E0                MOVX    A,@DPTR
000FBF 54F0              ANL     A,#0F0H
000FC1 F0                MOVX    @DPTR,A
  315: 
000FC2 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdShowNoDigit (END) -------


----- FUNCTION CS_ScaleDisplay_LcdRestore (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  336: void CS_ScaleDisplay_LcdRestore(void)
  337: {
  338: 	CS_Lcd_Send_Data[0] = CS_Lcd_Send_Data_BAK[0];
  339: 	CS_Lcd_Send_Data[1] = CS_Lcd_Send_Data_BAK[1];
000FC3 904D1D            MOV     DPTR,#CS_Lcd_Send_Data_BAK
000FC6 E0                MOVX    A,@DPTR
000FC7 904D28            MOV     DPTR,#CS_Lcd_Send_Data
000FCA F0                MOVX    @DPTR,A
  340: 	CS_Lcd_Send_Data[2] = CS_Lcd_Send_Data_BAK[2];
000FCB 904D1E            MOV     DPTR,#CS_Lcd_Send_Data_BAK+01H
000FCE E0                MOVX    A,@DPTR
000FCF 904D29            MOV     DPTR,#CS_Lcd_Send_Data+01H
000FD2 F0                MOVX    @DPTR,A
  341: 	CS_Lcd_Send_Data[3] = CS_Lcd_Send_Data_BAK[3];
000FD3 904D1F            MOV     DPTR,#CS_Lcd_Send_Data_BAK+02H
000FD6 E0                MOVX    A,@DPTR
000FD7 904D2A            MOV     DPTR,#CS_Lcd_Send_Data+02H
000FDA F0                MOVX    @DPTR,A
  342: 	CS_Lcd_Send_Data[4] = CS_Lcd_Send_Data_BAK[4];
000FDB 904D20            MOV     DPTR,#CS_Lcd_Send_Data_BAK+03H
000FDE E0                MOVX    A,@DPTR
000FDF 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
000FE2 F0                MOVX    @DPTR,A
  343: }
000FE3 904D21            MOV     DPTR,#CS_Lcd_Send_Data_BAK+04H
000FE6 E0                MOVX    A,@DPTR
000FE7 904D2C            MOV     DPTR,#CS_Lcd_Send_Data+04H
000FEA F0                MOVX    @DPTR,A
  344: 
000FEB 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdRestore (END) -------


----- FUNCTION systemInit (BEGIN) -----
 FILE: 'system.c'
   69: void systemInit(void)
   70: {
   71: 	LPM_DISABLE();
   72: 	if(*mem_poweron_flag == CS_POWERON_FLAG		//poweron or reset
000FEC 9049FE            MOV     DPTR,#049FEH
000FEF E4                CLR     A
000FF0 F0                MOVX    @DPTR,A
   73: 	/*|| *mem_poweron_flag == CS_IOWAKE_FLAG*/) {		//iowake from sleep
000FF1 9049FC            MOV     DPTR,#049FCH
000FF4 E0                MOVX    A,@DPTR
000FF5 6410              XRL     A,#010H
000FF7 704E              JNZ     ?C0005?SYSTEM
   74: 		sys_state = SYS_ST_RUN;
   75: 		R_Scale_state = CS_Scale_state_init;
000FF9 904E5C            MOV     DPTR,#sys_state
000FFC 7402              MOV     A,#02H
000FFE F0                MOVX    @DPTR,A
   76: 
000FFF E4                CLR     A
001000 904CC5            MOV     DPTR,#R_Scale_state
001003 F0                MOVX    @DPTR,A
   77: 		QueueInit();
001004 F1DB              ACALL   QueueInit
   78: 		//read spiflash data,save to buffer
   79: 		SpiFlashOperator(CS_CMD_READ_FLASH);
001006 7F40              MOV     R7,#040H
001008 121FC7            LCALL   _SpiFlashOperator
   80: 		bleConnStatus = BLE_STATUS_DISCONN;
00100B E4                CLR     A
00100C 904C5B            MOV     DPTR,#bleConnStatus
00100F F0                MOVX    @DPTR,A
   81: 		if(deviceInfo.registerFlag != DEVICE_REGISTERED)
001010 904C06            MOV     DPTR,#deviceInfo
001013 E0                MOVX    A,@DPTR
001014 6401              XRL     A,#01H
001016 600B              JZ      ?C0006?SYSTEM
   82: 		{
   83: 			xmemset(mem_register_buf, 0, sizeof(deviceInfo));
001018 7B0A              MOV     R3,#0AH
00101A E4                CLR     A
00101B FD                MOV     R5,A
00101C 7F0E              MOV     R7,#0EH
00101E 7E4C              MOV     R6,#04CH
001020 121F8B            LCALL   _xmemset
   84: 		}
001023         ?C0006?SYSTEM:
   85: 		*(mem_le_adv_data + 13) = deviceInfo.registerFlag;
001023 904C06            MOV     DPTR,#deviceInfo
001026 E0                MOVX    A,@DPTR
001027 9043E7            MOV     DPTR,#043E7H
00102A F0                MOVX    @DPTR,A
   86: 			
   87: 		YC_UtilTimerInit();
00102B 11B8              ACALL   YC_UtilTimerInit
   88: 		//YC_UtilTimerStart(1, SoftTimer_1SCallback, &SoftTimer_1STimerID);
   89: 		YC_UtilTimerStartMs(10, SoftTimer_10mSCallback, &SoftTimer_10msTimerID);
00102D 7BFF              MOV     R3,#0FFH
00102F 7A08              MOV     R2,#HIGH SoftTimer_10mSCallback
001031 79F3              MOV     R1,#LOW SoftTimer_10mSCallback
001033 904DDA            MOV     DPTR,#?_YC_UtilTimerStartMs?BYTE+05H
001036 744E              MOV     A,#HIGH SoftTimer_10msTimerID
001038 F0                MOVX    @DPTR,A
001039 A3                INC     DPTR
00103A 7441              MOV     A,#LOW SoftTimer_10msTimerID
00103C F0                MOVX    @DPTR,A
00103D 7F0A              MOV     R7,#0AH
00103F 7E00              MOV     R6,#00H
001041 317B              ACALL   _YC_UtilTimerStartMs
   90: 		CS_Scale_PowerOn();	
001043 51BA              ACALL   CS_Scale_PowerOn
   91: 		
   92: 	}
001045 8036              SJMP    ?C0007?SYSTEM
001047         ?C0005?SYSTEM:
   93: 	else {	//wake from LPM mode
   94: 		if(YC_GPIOGetInputStatus(5) == 0 ||	//GPIO5, key is  down	
001047 7F05              MOV     R7,#05H
001049 1183              ACALL   _YC_GPIOGetInputStatus
00104B 5006              JNC     ?C0009?SYSTEM
00104D 7F1B              MOV     R7,#01BH
00104F 1183              ACALL   _YC_GPIOGetInputStatus
001051 4024              JC      ?C0008?SYSTEM
001053         ?C0009?SYSTEM:
   95: 		YC_GPIOGetInputStatus(27) == 0) {	//GPIO27, scale wakeup
   96: 			sys_state = SYS_ST_RUN;
001053 904E5C            MOV     DPTR,#sys_state
001056 7402              MOV     A,#02H
001058 F0                MOVX    @DPTR,A
   97: 			R_Scale_state = CS_Scale_state_standby;
001059 904CC5            MOV     DPTR,#R_Scale_state
00105C F0                MOVX    @DPTR,A
   98: 			YC_UtilTimerInit();
00105D 11B8              ACALL   YC_UtilTimerInit
   99: 			//YC_UtilTimerStart(1, SoftTimer_1SCallback, &SoftTimer_1STimerID);
  100: 			YC_UtilTimerStartMs(10, SoftTimer_10mSCallback, &SoftTimer_10msTimerID);
00105F 7BFF              MOV     R3,#0FFH
001061 7A08              MOV     R2,#HIGH SoftTimer_10mSCallback
001063 79F3              MOV     R1,#LOW SoftTimer_10mSCallback
001065 904DDA            MOV     DPTR,#?_YC_UtilTimerStartMs?BYTE+05H
001068 744E              MOV     A,#HIGH SoftTimer_10msTimerID
00106A F0                MOVX    @DPTR,A
00106B A3                INC     DPTR
00106C 7441              MOV     A,#LOW SoftTimer_10msTimerID
00106E F0                MOVX    @DPTR,A
00106F 7F0A              MOV     R7,#0AH
001071 7E00              MOV     R6,#00H
001073 317B              ACALL   _YC_UtilTimerStartMs
  101: 			//CS_Scale_PowerOn();	
  102: 
  103: 			//R_Debug_temp=R_Scale_state;
  104: 			//CS_ScaleDisplay_Debug();
  105: 			//while(1);
  106: 		}
001075 8006              SJMP    ?C0007?SYSTEM
001077         ?C0008?SYSTEM:
  107: 		else {	//remote bluetooth wakeup
  108: 			sys_state = SYS_ST_IDLE;
001077 904E5C            MOV     DPTR,#sys_state
00107A 7401              MOV     A,#01H
00107C F0                MOVX    @DPTR,A
  109: 		}
  110: 	}
00107D         ?C0007?SYSTEM:
  111: 	*mem_poweron_flag = CS_NULL_FLAG;
00107D 9049FC            MOV     DPTR,#049FCH
001080 E4                CLR     A
001081 F0                MOVX    @DPTR,A
  112: }
001082 22                RET     
----- FUNCTION systemInit (END) -------


----- FUNCTION _YC_GPIOGetInputStatus (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  140: bool YC_GPIOGetInputStatus(u8_t gpio_num)
  141: {
;---- Variable 'gpio_num' assigned to Register 'R7' ----
  142: 	u8_t queue, group;
  143: 
  144: 	queue = (gpio_num & 7);
001083 EF                MOV     A,R7
001084 5407              ANL     A,#07H
001086 FE                MOV     R6,A
;---- Variable 'queue' assigned to Register 'R6' ----
  145: 	group = (gpio_num>>3 & 3);
001087 EF                MOV     A,R7
001088 13                RRC     A
001089 13                RRC     A
00108A 13                RRC     A
00108B 5403              ANL     A,#03H
00108D FF                MOV     R7,A
;---- Variable 'group' assigned to Register 'R7' ----
  146: 
  147: 	return (REG_GPIO_IN(group) & (1<<queue));
00108E 241C              ADD     A,#01CH
001090 FD                MOV     R5,A
001091 E4                CLR     A
001092 3481              ADDC    A,#081H
001094 8D82              MOV     DPL,R5
001096 F583              MOV     DPH,A
001098 E0                MOVX    A,@DPTR
001099 FD                MOV     R5,A
00109A 7C00              MOV     R4,#00H
00109C AF06              MOV     R7,AR6
00109E 7401              MOV     A,#01H
0010A0 7E00              MOV     R6,#00H
0010A2 A807              MOV     R0,AR7
0010A4 08                INC     R0
0010A5 8005              SJMP    ?C0021?YC_PERIPHERAL
0010A7         ?C0020?YC_PERIPHERAL:
0010A7 C3                CLR     C
0010A8 33                RLC     A
0010A9 CE                XCH     A,R6
0010AA 33                RLC     A
0010AB CE                XCH     A,R6
0010AC         ?C0021?YC_PERIPHERAL:
0010AC D8F9              DJNZ    R0,?C0020?YC_PERIPHERAL
0010AE FF                MOV     R7,A
0010AF EE                MOV     A,R6
0010B0 5C                ANL     A,R4
0010B1 FE                MOV     R6,A
0010B2 EF                MOV     A,R7
0010B3 5D                ANL     A,R5
0010B4 4E                ORL     A,R6
0010B5 24FF              ADD     A,#0FFH
  148: }
0010B7 22                RET     
----- FUNCTION _YC_GPIOGetInputStatus (END) -------


----- FUNCTION YC_UtilTimerInit (BEGIN) -----
 FILE: 'YC_Sys.c'
    8: void YC_UtilTimerInit(void)
    9: {
   10: 	u8_t i;
   11: 	
   12: 	YC_UtilTimer.timer_flages = 0;
0010B8 E4                CLR     A
0010B9 904CDB            MOV     DPTR,#YC_UtilTimer
0010BC F0                MOVX    @DPTR,A
   13: 	YC_UtilTimer.last_timer = YC_CLK_N;
0010BD 908101            MOV     DPTR,#08101H
0010C0 E0                MOVX    A,@DPTR
0010C1 FF                MOV     R7,A
0010C2 E4                CLR     A
0010C3 FC                MOV     R4,A
0010C4 FD                MOV     R5,A
0010C5 FE                MOV     R6,A
0010C6 7808              MOV     R0,#08H
0010C8 12031F            LCALL   ?C?LSHL
0010CB A804              MOV     R0,AR4
0010CD A905              MOV     R1,AR5
0010CF AA06              MOV     R2,AR6
0010D1 AB07              MOV     R3,AR7
0010D3 908100            MOV     DPTR,#08100H
0010D6 E0                MOVX    A,@DPTR
0010D7 FF                MOV     R7,A
0010D8 E4                CLR     A
0010D9 EB                MOV     A,R3
0010DA 4F                ORL     A,R7
0010DB FF                MOV     R7,A
0010DC EA                MOV     A,R2
0010DD FE                MOV     R6,A
0010DE E9                MOV     A,R1
0010DF FD                MOV     R5,A
0010E0 E8                MOV     A,R0
0010E1 FC                MOV     R4,A
0010E2 C004              PUSH    AR4
0010E4 C005              PUSH    AR5
0010E6 C006              PUSH    AR6
0010E8 C007              PUSH    AR7
0010EA 908102            MOV     DPTR,#08102H
0010ED E0                MOVX    A,@DPTR
0010EE FF                MOV     R7,A
0010EF E4                CLR     A
0010F0 FC                MOV     R4,A
0010F1 FD                MOV     R5,A
0010F2 FE                MOV     R6,A
0010F3 7810              MOV     R0,#010H
0010F5 12031F            LCALL   ?C?LSHL
0010F8 D003              POP     AR3
0010FA D002              POP     AR2
0010FC D001              POP     AR1
0010FE D000              POP     AR0
001100 EF                MOV     A,R7
001101 4B                ORL     A,R3
001102 FF                MOV     R7,A
001103 EE                MOV     A,R6
001104 4A                ORL     A,R2
001105 FE                MOV     R6,A
001106 ED                MOV     A,R5
001107 49                ORL     A,R1
001108 FD                MOV     R5,A
001109 EC                MOV     A,R4
00110A 48                ORL     A,R0
00110B FC                MOV     R4,A
00110C C004              PUSH    AR4
00110E C005              PUSH    AR5
001110 C006              PUSH    AR6
001112 C007              PUSH    AR7
001114 A3                INC     DPTR
001115 E0                MOVX    A,@DPTR
001116 FF                MOV     R7,A
001117 E4                CLR     A
001118 FC                MOV     R4,A
001119 FD                MOV     R5,A
00111A FE                MOV     R6,A
00111B 7818              MOV     R0,#018H
00111D 12031F            LCALL   ?C?LSHL
001120 D003              POP     AR3
001122 D002              POP     AR2
001124 D001              POP     AR1
001126 D000              POP     AR0
001128 EF                MOV     A,R7
001129 4B                ORL     A,R3
00112A FF                MOV     R7,A
00112B EE                MOV     A,R6
00112C 4A                ORL     A,R2
00112D FE                MOV     R6,A
00112E ED                MOV     A,R5
00112F 49                ORL     A,R1
001130 FD                MOV     R5,A
001131 EC                MOV     A,R4
001132 48                ORL     A,R0
001133 FC                MOV     R4,A
001134 904D14            MOV     DPTR,#YC_UtilTimer+039H
001137 120332            LCALL   ?C?LSTXDATA
   14: 	for(i = 0; i < YC_UTIL_TIMER_NUM; i++){
00113A E4                CLR     A
00113B 904E59            MOV     DPTR,#i
00113E F0                MOVX    @DPTR,A
00113F         ?C0001?YC_SYS:
00113F 904E59            MOV     DPTR,#i
001142 E0                MOVX    A,@DPTR
001143 FF                MOV     R7,A
001144 C3                CLR     C
001145 9408              SUBB    A,#08H
001147 5031              JNC     ?C0004?YC_SYS
   15: 		YC_UtilTimer.callback[i] = 0;
001149 EF                MOV     A,R7
00114A 75F003            MOV     B,#03H
00114D A4                MUL     AB
00114E 24DC              ADD     A,#LOW YC_UtilTimer+01H
001150 F582              MOV     DPL,A
001152 E4                CLR     A
001153 344C              ADDC    A,#HIGH YC_UtilTimer+01H
001155 F583              MOV     DPH,A
001157 E4                CLR     A
001158 F0                MOVX    @DPTR,A
001159 A3                INC     DPTR
00115A F0                MOVX    @DPTR,A
00115B A3                INC     DPTR
00115C F0                MOVX    @DPTR,A
   16: 		YC_UtilTimer.timer_end[i] = 0;
00115D EF                MOV     A,R7
00115E 25E0              ADD     A,ACC
001160 25E0              ADD     A,ACC
001162 24F4              ADD     A,#LOW YC_UtilTimer+019H
001164 F582              MOV     DPL,A
001166 E4                CLR     A
001167 344C              ADDC    A,#HIGH YC_UtilTimer+019H
001169 F583              MOV     DPH,A
00116B 12033E            LCALL   ?C?LSTKXDATA
00116E 00                DB      00H
00116F 00                DB      00H
001170 00                DB      00H
001171 00                DB      00H
   17: 	}
001172 904E59            MOV     DPTR,#i
001175 E0                MOVX    A,@DPTR
001176 04                INC     A
001177 F0                MOVX    @DPTR,A
001178 80C5              SJMP    ?C0001?YC_SYS
   18: 	return;
   19: }
00117A         ?C0004?YC_SYS:
00117A 22                RET     
----- FUNCTION YC_UtilTimerInit (END) -------


----- FUNCTION _YC_UtilTimerStartMs (BEGIN) -----
 FILE: 'YC_Sys.c'
   44: bool YC_UtilTimerStartMs(u16_t time_in_ms, p_TimerCallback callback, pxbyte timer_id)
   45: {
00117B 904DD5            MOV     DPTR,#time_in_ms
00117E EE                MOV     A,R6
00117F F0                MOVX    @DPTR,A
001180 A3                INC     DPTR
001181 EF                MOV     A,R7
001182 F0                MOVX    @DPTR,A
;---- Variable 'callback' assigned to Register 'R1/R2/R3' ----
   46: 	u8_t i = 0;
   47: 	
001183 E4                CLR     A
001184 904DDC            MOV     DPTR,#i
001187 F0                MOVX    @DPTR,A
   48: 	//do we have enough timers?
   49: 	if(YC_UtilTimer.timer_flages == 0xff){
001188 904CDB            MOV     DPTR,#YC_UtilTimer
00118B E0                MOVX    A,@DPTR
00118C B4FF02            CJNE    A,#0FFH,?C0007?YC_SYS
   50: 		return false;
00118F C3                CLR     C
001190 22                RET     
   51: 	}
001191         ?C0007?YC_SYS:
   52: 	while(i < YC_UTIL_TIMER_NUM){
001191 904DDC            MOV     DPTR,#i
001194 E0                MOVX    A,@DPTR
001195 FF                MOV     R7,A
001196 C3                CLR     C
001197 9408              SUBB    A,#08H
001199 502D              JNC     ?C0008?YC_SYS
   53: 		if(!((YC_UtilTimer.timer_flages >> i) & 1)){
00119B 904CDB            MOV     DPTR,#YC_UtilTimer
00119E E0                MOVX    A,@DPTR
00119F FE                MOV     R6,A
0011A0 A807              MOV     R0,AR7
0011A2 08                INC     R0
0011A3 8002              SJMP    ?C0022?YC_SYS
0011A5         ?C0021?YC_SYS:
0011A5 C3                CLR     C
0011A6 13                RRC     A
0011A7         ?C0022?YC_SYS:
0011A7 D8FC              DJNZ    R0,?C0021?YC_SYS
0011A9 20E014            JB      ACC.0,?C0009?YC_SYS
   54: 			if(timer_id)
0011AC 904DDA            MOV     DPTR,#timer_id
0011AF E0                MOVX    A,@DPTR
0011B0 FE                MOV     R6,A
0011B1 A3                INC     DPTR
0011B2 E0                MOVX    A,@DPTR
0011B3 FF                MOV     R7,A
0011B4 4E                ORL     A,R6
0011B5 6011              JZ      ?C0008?YC_SYS
   55: 				*timer_id = i;
0011B7 A3                INC     DPTR
0011B8 E0                MOVX    A,@DPTR
0011B9 8F82              MOV     DPL,R7
0011BB 8E83              MOV     DPH,R6
0011BD F0                MOVX    @DPTR,A
   56: 			break;
0011BE 8008              SJMP    ?C0008?YC_SYS
   57: 		}
0011C0         ?C0009?YC_SYS:
   58: 		++i;
0011C0 904DDC            MOV     DPTR,#i
0011C3 E0                MOVX    A,@DPTR
0011C4 04                INC     A
0011C5 F0                MOVX    @DPTR,A
   59: 	}
0011C6 80C9              SJMP    ?C0007?YC_SYS
0011C8         ?C0008?YC_SYS:
   60: 	YC_UtilTimer.timer_flages |= 1 << i;
0011C8 904CDB            MOV     DPTR,#YC_UtilTimer
0011CB E0                MOVX    A,@DPTR
0011CC FF                MOV     R7,A
0011CD 904DDC            MOV     DPTR,#i
0011D0 E0                MOVX    A,@DPTR
0011D1 FE                MOV     R6,A
0011D2 7401              MOV     A,#01H
0011D4 A806              MOV     R0,AR6
0011D6 08                INC     R0
0011D7 8002              SJMP    ?C0024?YC_SYS
0011D9         ?C0023?YC_SYS:
0011D9 C3                CLR     C
0011DA 33                RLC     A
0011DB         ?C0024?YC_SYS:
0011DB D8FC              DJNZ    R0,?C0023?YC_SYS
0011DD 4F                ORL     A,R7
0011DE 904CDB            MOV     DPTR,#YC_UtilTimer
0011E1 F0                MOVX    @DPTR,A
   61: 	YC_UtilTimer.callback[i] = callback;
0011E2 EE                MOV     A,R6
0011E3 75F003            MOV     B,#03H
0011E6 A4                MUL     AB
0011E7 24DC              ADD     A,#LOW YC_UtilTimer+01H
0011E9 F582              MOV     DPL,A
0011EB E4                CLR     A
0011EC 344C              ADDC    A,#HIGH YC_UtilTimer+01H
0011EE F583              MOV     DPH,A
0011F0 EB                MOV     A,R3
0011F1 F0                MOVX    @DPTR,A
0011F2 A3                INC     DPTR
0011F3 EA                MOV     A,R2
0011F4 F0                MOVX    @DPTR,A
0011F5 A3                INC     DPTR
0011F6 E9                MOV     A,R1
0011F7 F0                MOVX    @DPTR,A
   62: 	YC_UtilTimer.timer_end[i] = YC_CLK_N + ((u32_t)time_in_ms << 4)/5;
0011F8 908101            MOV     DPTR,#08101H
0011FB E0                MOVX    A,@DPTR
0011FC FF                MOV     R7,A
0011FD E4                CLR     A
0011FE FC                MOV     R4,A
0011FF FD                MOV     R5,A
001200 FE                MOV     R6,A
001201 7808              MOV     R0,#08H
001203 12031F            LCALL   ?C?LSHL
001206 A804              MOV     R0,AR4
001208 A905              MOV     R1,AR5
00120A AA06              MOV     R2,AR6
00120C AB07              MOV     R3,AR7
00120E 908100            MOV     DPTR,#08100H
001211 E0                MOVX    A,@DPTR
001212 FF                MOV     R7,A
001213 E4                CLR     A
001214 EB                MOV     A,R3
001215 4F                ORL     A,R7
001216 FF                MOV     R7,A
001217 EA                MOV     A,R2
001218 FE                MOV     R6,A
001219 E9                MOV     A,R1
00121A FD                MOV     R5,A
00121B E8                MOV     A,R0
00121C FC                MOV     R4,A
00121D C004              PUSH    AR4
00121F C005              PUSH    AR5
001221 C006              PUSH    AR6
001223 C007              PUSH    AR7
001225 908102            MOV     DPTR,#08102H
001228 E0                MOVX    A,@DPTR
001229 FF                MOV     R7,A
00122A E4                CLR     A
00122B FC                MOV     R4,A
00122C FD                MOV     R5,A
00122D FE                MOV     R6,A
00122E 7810              MOV     R0,#010H
001230 12031F            LCALL   ?C?LSHL
001233 D003              POP     AR3
001235 D002              POP     AR2
001237 D001              POP     AR1
001239 D000              POP     AR0
00123B EF                MOV     A,R7
00123C 4B                ORL     A,R3
00123D FF                MOV     R7,A
00123E EE                MOV     A,R6
00123F 4A                ORL     A,R2
001240 FE                MOV     R6,A
001241 ED                MOV     A,R5
001242 49                ORL     A,R1
001243 FD                MOV     R5,A
001244 EC                MOV     A,R4
001245 48                ORL     A,R0
001246 FC                MOV     R4,A
001247 C004              PUSH    AR4
001249 C005              PUSH    AR5
00124B C006              PUSH    AR6
00124D C007              PUSH    AR7
00124F A3                INC     DPTR
001250 E0                MOVX    A,@DPTR
001251 FF                MOV     R7,A
001252 E4                CLR     A
001253 FC                MOV     R4,A
001254 FD                MOV     R5,A
001255 FE                MOV     R6,A
001256 7818              MOV     R0,#018H
001258 12031F            LCALL   ?C?LSHL
00125B D003              POP     AR3
00125D D002              POP     AR2
00125F D001              POP     AR1
001261 D000              POP     AR0
001263 EF                MOV     A,R7
001264 4B                ORL     A,R3
001265 FF                MOV     R7,A
001266 EE                MOV     A,R6
001267 4A                ORL     A,R2
001268 FE                MOV     R6,A
001269 ED                MOV     A,R5
00126A 49                ORL     A,R1
00126B FD                MOV     R5,A
00126C EC                MOV     A,R4
00126D 48                ORL     A,R0
00126E FC                MOV     R4,A
00126F C004              PUSH    AR4
001271 C005              PUSH    AR5
001273 C006              PUSH    AR6
001275 C007              PUSH    AR7
001277 904DD5            MOV     DPTR,#time_in_ms
00127A E0                MOVX    A,@DPTR
00127B FE                MOV     R6,A
00127C A3                INC     DPTR
00127D E0                MOVX    A,@DPTR
00127E FF                MOV     R7,A
00127F E4                CLR     A
001280 FC                MOV     R4,A
001281 FD                MOV     R5,A
001282 7804              MOV     R0,#04H
001284 12031F            LCALL   ?C?LSHL
001287 E4                CLR     A
001288 7B05              MOV     R3,#05H
00128A FA                MOV     R2,A
00128B F9                MOV     R1,A
00128C F8                MOV     R0,A
00128D 120269            LCALL   ?C?ULDIV
001290 D003              POP     AR3
001292 D002              POP     AR2
001294 D001              POP     AR1
001296 D000              POP     AR0
001298 EF                MOV     A,R7
001299 2B                ADD     A,R3
00129A FF                MOV     R7,A
00129B EE                MOV     A,R6
00129C 3A                ADDC    A,R2
00129D FE                MOV     R6,A
00129E ED                MOV     A,R5
00129F 39                ADDC    A,R1
0012A0 FD                MOV     R5,A
0012A1 EC                MOV     A,R4
0012A2 38                ADDC    A,R0
0012A3 FC                MOV     R4,A
0012A4 904DDC            MOV     DPTR,#i
0012A7 E0                MOVX    A,@DPTR
0012A8 25E0              ADD     A,ACC
0012AA 25E0              ADD     A,ACC
0012AC 24F4              ADD     A,#LOW YC_UtilTimer+019H
0012AE F582              MOV     DPL,A
0012B0 E4                CLR     A
0012B1 344C              ADDC    A,#HIGH YC_UtilTimer+019H
0012B3 F583              MOV     DPH,A
0012B5 120332            LCALL   ?C?LSTXDATA
   63: 	return true;
0012B8 D3                SETB    C
   64: }
0012B9 22                RET     
----- FUNCTION _YC_UtilTimerStartMs (END) -------


----- FUNCTION CS_Scale_PowerOn (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  173: void CS_Scale_PowerOn(void)
  174: {
  175: 	
  176: 	if(R_Scale_state == CS_Scale_state_init)
0012BA 904CC5            MOV     DPTR,#R_Scale_state
0012BD E0                MOVX    A,@DPTR
0012BE 702F              JNZ     ?C0012?CS_SCALE_PROC
  177: 		{
  178: 		B_Weight_AdOk = false;
0012C0 904CD7            MOV     DPTR,#B_Weight_AdOk
0012C3 F0                MOVX    @DPTR,A
  179: 		R_Weight_Com_Coo.pre =CS_CommTo1186_Null;	
0012C4 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
0012C7 F0                MOVX    @DPTR,A
  180: 		R_Weight_Com_Coo.now = CS_CommTo1186_Null;	
0012C8 904D55            MOV     DPTR,#R_Weight_Com_Coo
0012CB F0                MOVX    @DPTR,A
  181: 		//R_Scale_state =	CS_Scale_state_weighting;
  182: 		R_Selet_Unit = CS_ScaleDisplay_L_gongjin;
0012CC 904CC6            MOV     DPTR,#R_Selet_Unit
0012CF 7402              MOV     A,#02H
0012D1 F0                MOVX    @DPTR,A
  183: 
  184: 		R_Debug_temp = 0;
0012D2 E4                CLR     A
0012D3 A3                INC     DPTR
0012D4 F0                MOVX    @DPTR,A
0012D5 A3                INC     DPTR
0012D6 F0                MOVX    @DPTR,A
  185: 		B_Debug_Test =false;
0012D7 C201              CLR     B_Debug_Test
  186: 		
  187: 		CS_Scale_CaliProc(CaliProcSetCali);		
0012D9 7F01              MOV     R7,#01H
0012DB 120A38            LCALL   _CS_Scale_CaliProc
  188: 		CS_Scale_ZeroProc(ZeroProcReset,0);	
0012DE E4                CLR     A
0012DF FD                MOV     R5,A
0012E0 FC                MOV     R4,A
0012E1 7F04              MOV     R7,#04H
0012E3 51F0              ACALL   _CS_Scale_ZeroProc
  189: 		
  190: 		CS_Scale_TimeOutProc(CS_Reset_AllTime);
0012E5 7F06              MOV     R7,#06H
0012E7 122C02            LCALL   _CS_Scale_TimeOutProc
  191: 		CS_Scale_PowerOnProc(1);
0012EA D200              SETB    ?CS_Scale_PowerOnProc?BIT
0012EC 122D2C            LCALL   CS_Scale_PowerOnProc
  192: 		}
  193: }
0012EF         ?C0012?CS_SCALE_PROC:
0012EF 22                RET     
----- FUNCTION CS_Scale_PowerOn (END) -------


----- FUNCTION _CS_Scale_ZeroProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  397: u16_t  CS_Scale_ZeroProc(u8_t option,u16_t setdata)
  398: {
;---- Variable 'setdata' assigned to Register 'R4/R5' ----
0012F0 904DED            MOV     DPTR,#option
0012F3 EF                MOV     A,R7
0012F4 F0                MOVX    @DPTR,A
  399: 	static	u8_t	   xdata R_Weight_GetZeroTimeOut = 0;	
  400: 	static	u16_t  xdata R_AD_PowerOnZero;	//上电零点AD值
  401: 	static	u16_t  xdata R_AD_Zero;			//零点AD值
  402: 	static	u8_t    xdata B_Weight_Zero;		//处于零点标志
  403: 	static	u8_t    xdata B_Weight_ZeroOk;	//上电获取完零点标志
  404: 	static	u8_t	   xdata B_LockDownCheck;	//下秤后第一次稳定追零
  405: 	static	u8_t	   xdata B_WeightZeroErr;		//零点错误标志
  406: 	
  407: 	u16_t	R_AdFilTimes;
  408: 	u16_t	R_AD_BUF;
  409: 	u16_t	weight_temp;
  410: 	u16_t	R_Open_Weight;
  411: 	u8_t		B_Weight_Pos;
  412: 
  413: 	
  414: 	
  415: 	if(option==ZeroProcReset)
0012F5 BF0408            CJNE    R7,#04H,?C0043?CS_SCALE_PROC
  416: 		{
  417: 		B_Weight_ZeroOk = 0;
0012F8 E4                CLR     A
0012F9 904C9B            MOV     DPTR,#B_Weight_ZeroOk
0012FC F0                MOVX    @DPTR,A
  418: 		return 0;		
0012FD FE                MOV     R6,A
0012FE FF                MOV     R7,A
0012FF 22                RET     
  419: 		}
001300         ?C0043?CS_SCALE_PROC:
  420: 	if(option==SetPowerOnZero)
001300 904DED            MOV     DPTR,#option
001303 E0                MOVX    A,@DPTR
001304 FB                MOV     R3,A
001305 B4050C            CJNE    A,#05H,?C0045?CS_SCALE_PROC
  421: 		{
  422: 		R_AD_PowerOnZero = setdata;
001308 904C96            MOV     DPTR,#R_AD_PowerOnZero
00130B EC                MOV     A,R4
00130C F0                MOVX    @DPTR,A
00130D A3                INC     DPTR
00130E ED                MOV     A,R5
00130F F0                MOVX    @DPTR,A
  423: 		return 0;		
001310 E4                CLR     A
001311 FE                MOV     R6,A
001312 FF                MOV     R7,A
001313 22                RET     
  424: 		}
001314         ?C0045?CS_SCALE_PROC:
  425: 	if(option==SetRunningZero)
001314 EB                MOV     A,R3
001315 B4060E            CJNE    A,#06H,?C0046?CS_SCALE_PROC
  426: 		{
  427: 		R_AD_Zero = setdata;
001318 AF05              MOV     R7,AR5
00131A 904C98            MOV     DPTR,#R_AD_Zero
00131D EC                MOV     A,R4
00131E F0                MOVX    @DPTR,A
00131F A3                INC     DPTR
001320 EF                MOV     A,R7
001321 F0                MOVX    @DPTR,A
  428: 		return 0;		
001322 E4                CLR     A
001323 FE                MOV     R6,A
001324 FF                MOV     R7,A
001325 22                RET     
  429: 		}
001326         ?C0046?CS_SCALE_PROC:
  430: 	if(option==ClrLockDownCheckFlag)
001326 904DED            MOV     DPTR,#option
001329 E0                MOVX    A,@DPTR
00132A FD                MOV     R5,A
00132B B40808            CJNE    A,#08H,?C0047?CS_SCALE_PROC
  431: 		{
  432: 		B_LockDownCheck=false;
00132E E4                CLR     A
00132F 904C9C            MOV     DPTR,#B_LockDownCheck
001332 F0                MOVX    @DPTR,A
  433: 		return 0;
001333 FE                MOV     R6,A
001334 FF                MOV     R7,A
001335 22                RET     
  434: 		}
001336         ?C0047?CS_SCALE_PROC:
  435: 	
  436: 	if(option==FindPowerOnZero)
001336 ED                MOV     A,R5
001337 640A              XRL     A,#0AH
001339 7075              JNZ     ?C0048?CS_SCALE_PROC
  437: 	{
  438: 		
  439: 	
  440: 		if(R_Weight_GetZeroTimeOut <60)
00133B 904C95            MOV     DPTR,#R_Weight_GetZeroTimeOut
00133E E0                MOVX    A,@DPTR
00133F C3                CLR     C
001340 943C              SUBB    A,#03CH
001342 5052              JNC     ?C0049?CS_SCALE_PROC
  441: 		{
  442: 		R_Weight_GetZeroTimeOut ++;
001344 E0                MOVX    A,@DPTR
001345 04                INC     A
001346 F0                MOVX    @DPTR,A
  443: 		
  444: 		R_AD_BUF = R_AD_Original;
001347 904CD8            MOV     DPTR,#R_AD_Original
00134A E0                MOVX    A,@DPTR
00134B FE                MOV     R6,A
00134C A3                INC     DPTR
00134D E0                MOVX    A,@DPTR
00134E FF                MOV     R7,A
00134F 904DEE            MOV     DPTR,#R_AD_BUF
001352 EE                MOV     A,R6
001353 F0                MOVX    @DPTR,A
001354 FC                MOV     R4,A
001355 A3                INC     DPTR
001356 EF                MOV     A,R7
001357 F0                MOVX    @DPTR,A
001358 FD                MOV     R5,A
  445: 		R_AD_BUF=CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
001359 E4                CLR     A
00135A FF                MOV     R7,A
00135B 123118            LCALL   _CS_Scale_AdcFilter
00135E 904DEE            MOV     DPTR,#R_AD_BUF
001361 EE                MOV     A,R6
001362 F0                MOVX    @DPTR,A
001363 FC                MOV     R4,A
001364 A3                INC     DPTR
001365 EF                MOV     A,R7
001366 F0                MOVX    @DPTR,A
001367 FD                MOV     R5,A
  446: 		R_AdFilTimes = CS_Scale_AdcFilter(ScaleAdcFilterGetFilTimes,R_AD_BUF);
001368 7F02              MOV     R7,#02H
00136A 123118            LCALL   _CS_Scale_AdcFilter
;---- Variable 'R_AdFilTimes' assigned to Register 'R6/R7' ----
  447: 		
  448: 			if(R_AdFilTimes >=CS_PowerOnAD_Steadytimes)
00136D C3                CLR     C
00136E EF                MOV     A,R7
00136F 940A              SUBB    A,#0AH
001371 EE                MOV     A,R6
001372 9400              SUBB    A,#00H
001374 403A              JC      ?C0048?CS_SCALE_PROC
  449: 				{
  450: 				R_AD_Zero	= R_AD_BUF;
001376 904DEE            MOV     DPTR,#R_AD_BUF
001379 E0                MOVX    A,@DPTR
00137A FE                MOV     R6,A
00137B A3                INC     DPTR
00137C E0                MOVX    A,@DPTR
00137D FF                MOV     R7,A
00137E 904C98            MOV     DPTR,#R_AD_Zero
001381 EE                MOV     A,R6
001382 F0                MOVX    @DPTR,A
001383 A3                INC     DPTR
001384 EF                MOV     A,R7
001385 F0                MOVX    @DPTR,A
  451: 				R_AD_PowerOnZero = R_AD_BUF;
001386 904C96            MOV     DPTR,#R_AD_PowerOnZero
001389 EE                MOV     A,R6
00138A F0                MOVX    @DPTR,A
00138B A3                INC     DPTR
00138C EF                MOV     A,R7
00138D F0                MOVX    @DPTR,A
  452: 				B_Weight_ZeroOk = true;
00138E 904C9B            MOV     DPTR,#B_Weight_ZeroOk
001391 7401              MOV     A,#01H
001393 F0                MOVX    @DPTR,A
  453: 				}
  454: 		}
001394 801A              SJMP    ?C0048?CS_SCALE_PROC
001396         ?C0049?CS_SCALE_PROC:
  455: 		else
  456: 		{
  457: 		R_AD_Zero	= 4000;
001396 904C98            MOV     DPTR,#R_AD_Zero
001399 740F              MOV     A,#0FH
00139B F0                MOVX    @DPTR,A
00139C A3                INC     DPTR
00139D 74A0              MOV     A,#0A0H
00139F F0                MOVX    @DPTR,A
  458: 		R_AD_PowerOnZero = 4000;
0013A0 904C96            MOV     DPTR,#R_AD_PowerOnZero
0013A3 740F              MOV     A,#0FH
0013A5 F0                MOVX    @DPTR,A
0013A6 A3                INC     DPTR
0013A7 74A0              MOV     A,#0A0H
0013A9 F0                MOVX    @DPTR,A
  459: 		B_Weight_ZeroOk = true;
0013AA 904C9B            MOV     DPTR,#B_Weight_ZeroOk
0013AD 7401              MOV     A,#01H
0013AF F0                MOVX    @DPTR,A
  460: 		}
  461: 
  462: 	}
0013B0         ?C0048?CS_SCALE_PROC:
  463: 
  464: 	if(option==RunningZero)
0013B0 904DED            MOV     DPTR,#option
0013B3 E0                MOVX    A,@DPTR
0013B4 6407              XRL     A,#07H
0013B6 6002              JZ      $ + 4H
0013B8 81ED              AJMP    ?C0052?CS_SCALE_PROC
  465: 	{
  466: 	B_Weight_Zero = false;		
0013BA 904C9A            MOV     DPTR,#B_Weight_Zero
0013BD F0                MOVX    @DPTR,A
  467: 	//3kg以下才追零包括负重量
  468: 	B_Weight_Pos = CS_Scale_GetDeltaAD(GetADDirection);		//获取AD方向
0013BE 7F01              MOV     R7,#01H
0013C0 1230B7            LCALL   _CS_Scale_GetDeltaAD
0013C3 904DF4            MOV     DPTR,#B_Weight_Pos
0013C6 EF                MOV     A,R7
0013C7 F0                MOVX    @DPTR,A
  469: 	R_Open_Weight = CS_Scale_CaliProc(CaliProcGetOpenWeight);	//获取开机重量值
0013C8 7F07              MOV     R7,#07H
0013CA 120A38            LCALL   _CS_Scale_CaliProc
0013CD 904DF2            MOV     DPTR,#R_Open_Weight
0013D0 EE                MOV     A,R6
0013D1 F0                MOVX    @DPTR,A
0013D2 A3                INC     DPTR
0013D3 EF                MOV     A,R7
0013D4 F0                MOVX    @DPTR,A
  470: 	
  471: 	if(R_UnitWeight.origin <= 300 ||B_Weight_Pos ==false)	
0013D5 904CC9            MOV     DPTR,#R_UnitWeight
0013D8 E0                MOVX    A,@DPTR
0013D9 FE                MOV     R6,A
0013DA A3                INC     DPTR
0013DB E0                MOVX    A,@DPTR
0013DC FF                MOV     R7,A
0013DD D3                SETB    C
0013DE 942C              SUBB    A,#02CH
0013E0 EE                MOV     A,R6
0013E1 9401              SUBB    A,#01H
0013E3 4006              JC      ?C0054?CS_SCALE_PROC
0013E5 904DF4            MOV     DPTR,#B_Weight_Pos
0013E8 E0                MOVX    A,@DPTR
0013E9 7006              JNZ     ?C0053?CS_SCALE_PROC
0013EB         ?C0054?CS_SCALE_PROC:
  472: 		B_Weight_Zero = true;
0013EB 904C9A            MOV     DPTR,#B_Weight_Zero
0013EE 7401              MOV     A,#01H
0013F0 F0                MOVX    @DPTR,A
0013F1         ?C0053?CS_SCALE_PROC:
  473: 
  474: 		if(R_UnitWeight.origin <= 200 || B_Weight_Pos==false)
0013F1 D3                SETB    C
0013F2 EF                MOV     A,R7
0013F3 94C8              SUBB    A,#0C8H
0013F5 EE                MOV     A,R6
0013F6 9400              SUBB    A,#00H
0013F8 4008              JC      ?C0056?CS_SCALE_PROC
0013FA 904DF4            MOV     DPTR,#B_Weight_Pos
0013FD E0                MOVX    A,@DPTR
0013FE 6002              JZ      $ + 4H
001400 81E9              AJMP    ?C0055?CS_SCALE_PROC
001402         ?C0056?CS_SCALE_PROC:
  475: 			{		
  476: 				if(CS_Scale_JudgeSteady(GetIfSmallSteady)==true)
001402 7F02              MOV     R7,#02H
001404 122F4E            LCALL   _CS_Scale_JudgeSteady
001407 EF                MOV     A,R7
001408 6401              XRL     A,#01H
00140A 6002              JZ      $ + 4H
00140C 81E9              AJMP    ?C0055?CS_SCALE_PROC
  477: 					{
  478: 
  479: 					CS_Scale_JudgeSteady(ResetSteady);
00140E 7F01              MOV     R7,#01H
001410 122F4E            LCALL   _CS_Scale_JudgeSteady
  480: 					
  481: 					//非锁定状态正常追零
  482: 					if(CS_Scale_LockProc(GetIfLock)==false)	
001413 7F02              MOV     R7,#02H
001415 123619            LCALL   _CS_Scale_LockProc
001418 EF                MOV     A,R7
001419 7054              JNZ     ?C0058?CS_SCALE_PROC
  483: 						{
  484: 						if(R_AD_Original >= R_AD_PowerOnZero)
00141B 904C96            MOV     DPTR,#R_AD_PowerOnZero
00141E E0                MOVX    A,@DPTR
00141F FE                MOV     R6,A
001420 A3                INC     DPTR
001421 E0                MOVX    A,@DPTR
001422 FF                MOV     R7,A
001423 904CD8            MOV     DPTR,#R_AD_Original
001426 E0                MOVX    A,@DPTR
001427 FC                MOV     R4,A
001428 A3                INC     DPTR
001429 E0                MOVX    A,@DPTR
00142A FD                MOV     R5,A
00142B C3                CLR     C
00142C 9F                SUBB    A,R7
00142D EC                MOV     A,R4
00142E 9E                SUBB    A,R6
00142F 402D              JC      ?C0059?CS_SCALE_PROC
  485: 							{
  486: 							weight_temp = R_AD_Original - R_AD_PowerOnZero;
001431 ED                MOV     A,R5
001432 9F                SUBB    A,R7
001433 FF                MOV     R7,A
001434 EC                MOV     A,R4
001435 9E                SUBB    A,R6
001436 FE                MOV     R6,A
001437 904DF0            MOV     DPTR,#weight_temp
00143A F0                MOVX    @DPTR,A
00143B A3                INC     DPTR
00143C EF                MOV     A,R7
00143D F0                MOVX    @DPTR,A
  487: 							if(weight_temp < R_Open_Weight)
00143E D3                SETB    C
00143F 904DF3            MOV     DPTR,#R_Open_Weight+01H
001442 E0                MOVX    A,@DPTR
001443 9F                SUBB    A,R7
001444 904DF2            MOV     DPTR,#R_Open_Weight
001447 E0                MOVX    A,@DPTR
001448 9E                SUBB    A,R6
001449 5002              JNC     $ + 4H
00144B 81E9              AJMP    ?C0055?CS_SCALE_PROC
  488: 								R_AD_Zero = R_AD_Original;
00144D 904CD8            MOV     DPTR,#R_AD_Original
001450 E0                MOVX    A,@DPTR
001451 FF                MOV     R7,A
001452 A3                INC     DPTR
001453 E0                MOVX    A,@DPTR
001454 904C98            MOV     DPTR,#R_AD_Zero
001457 CF                XCH     A,R7
001458 F0                MOVX    @DPTR,A
001459 A3                INC     DPTR
00145A EF                MOV     A,R7
00145B F0                MOVX    @DPTR,A
  489: 							}
00145C 81E9              AJMP    ?C0055?CS_SCALE_PROC
00145E         ?C0059?CS_SCALE_PROC:
  490: 						else
  491: 							R_AD_Zero = R_AD_Original;
00145E 904CD8            MOV     DPTR,#R_AD_Original
001461 E0                MOVX    A,@DPTR
001462 FF                MOV     R7,A
001463 A3                INC     DPTR
001464 E0                MOVX    A,@DPTR
001465 904C98            MOV     DPTR,#R_AD_Zero
001468 CF                XCH     A,R7
001469 F0                MOVX    @DPTR,A
00146A A3                INC     DPTR
00146B EF                MOV     A,R7
00146C F0                MOVX    @DPTR,A
  492: 						}
00146D 807A              SJMP    ?C0055?CS_SCALE_PROC
00146F         ?C0058?CS_SCALE_PROC:
  493: 					//锁定状态下秤第一次追零做防提起处理
  494: 					else			
  495: 						{
  496: 						if(B_LockDownCheck==false)
00146F 904C9C            MOV     DPTR,#B_LockDownCheck
001472 E0                MOVX    A,@DPTR
001473 7074              JNZ     ?C0055?CS_SCALE_PROC
  497: 							{
  498: 							if(R_AD_Original>R_AD_Zero)
001475 904C98            MOV     DPTR,#R_AD_Zero
001478 E0                MOVX    A,@DPTR
001479 FE                MOV     R6,A
00147A A3                INC     DPTR
00147B E0                MOVX    A,@DPTR
00147C FF                MOV     R7,A
00147D 904CD8            MOV     DPTR,#R_AD_Original
001480 E0                MOVX    A,@DPTR
001481 FC                MOV     R4,A
001482 A3                INC     DPTR
001483 E0                MOVX    A,@DPTR
001484 FD                MOV     R5,A
001485 D3                SETB    C
001486 9F                SUBB    A,R7
001487 EC                MOV     A,R4
001488 9E                SUBB    A,R6
001489 400E              JC      ?C0064?CS_SCALE_PROC
  499: 								weight_temp = R_AD_Original - R_AD_Zero;
00148B ED                MOV     A,R5
00148C 9F                SUBB    A,R7
00148D FF                MOV     R7,A
00148E EC                MOV     A,R4
00148F 9E                SUBB    A,R6
001490 904DF0            MOV     DPTR,#weight_temp
001493 F0                MOVX    @DPTR,A
001494 A3                INC     DPTR
001495 EF                MOV     A,R7
001496 F0                MOVX    @DPTR,A
001497 801B              SJMP    ?C0065?CS_SCALE_PROC
001499         ?C0064?CS_SCALE_PROC:
  500: 							else
  501: 								weight_temp = R_AD_Zero - R_AD_Original;
001499 904CD8            MOV     DPTR,#R_AD_Original
00149C E0                MOVX    A,@DPTR
00149D FE                MOV     R6,A
00149E A3                INC     DPTR
00149F E0                MOVX    A,@DPTR
0014A0 FF                MOV     R7,A
0014A1 C3                CLR     C
0014A2 904C99            MOV     DPTR,#R_AD_Zero+01H
0014A5 E0                MOVX    A,@DPTR
0014A6 9F                SUBB    A,R7
0014A7 FF                MOV     R7,A
0014A8 904C98            MOV     DPTR,#R_AD_Zero
0014AB E0                MOVX    A,@DPTR
0014AC 9E                SUBB    A,R6
0014AD 904DF0            MOV     DPTR,#weight_temp
0014B0 F0                MOVX    @DPTR,A
0014B1 A3                INC     DPTR
0014B2 EF                MOV     A,R7
0014B3 F0                MOVX    @DPTR,A
0014B4         ?C0065?CS_SCALE_PROC:
  502: 
  503: 							//跟锁定前的零点做比较不等于一个秤体重量的处理
  504: 							//if(weight_temp<ScaleWeightMin&&weight_temp>ScaleWeightMax)
  505: 								//{
  506: 								R_AD_Zero = R_AD_Original;	//更新零点
0014B4 904CD8            MOV     DPTR,#R_AD_Original
0014B7 E0                MOVX    A,@DPTR
0014B8 FF                MOV     R7,A
0014B9 A3                INC     DPTR
0014BA E0                MOVX    A,@DPTR
0014BB 904C98            MOV     DPTR,#R_AD_Zero
0014BE CF                XCH     A,R7
0014BF F0                MOVX    @DPTR,A
0014C0 A3                INC     DPTR
0014C1 EF                MOV     A,R7
0014C2 F0                MOVX    @DPTR,A
  507: 								if(weight_temp>SameZeroRange)
0014C3 D3                SETB    C
0014C4 904DF1            MOV     DPTR,#weight_temp+01H
0014C7 E0                MOVX    A,@DPTR
0014C8 940A              SUBB    A,#0AH
0014CA 904DF0            MOV     DPTR,#weight_temp
0014CD E0                MOVX    A,@DPTR
0014CE 9400              SUBB    A,#00H
0014D0 4011              JC      ?C0066?CS_SCALE_PROC
  508: 									{
  509: 									//跟称重前不是一个零点报零点错并解锁
  510: 									B_WeightZeroErr=true;
0014D2 904C9D            MOV     DPTR,#B_WeightZeroErr
0014D5 7401              MOV     A,#01H
0014D7 F0                MOVX    @DPTR,A
  511: 									R_Display_Err=CS_ScaleDisplay_L_err;
0014D8 904CC2            MOV     DPTR,#R_Display_Err
0014DB 7404              MOV     A,#04H
0014DD F0                MOVX    @DPTR,A
  512: 									CS_Scale_LockProc(LockProcUnLock);
0014DE 7F03              MOV     R7,#03H
0014E0 123619            LCALL   _CS_Scale_LockProc
  513: 									}
0014E3         ?C0066?CS_SCALE_PROC:
  514: 								B_LockDownCheck=true;
0014E3 904C9C            MOV     DPTR,#B_LockDownCheck
0014E6 7401              MOV     A,#01H
0014E8 F0                MOVX    @DPTR,A
  515: 								//}
  516: 
  517: 							}						
  518: 						}
  519: 					
  520: 					}
  521: 			}
0014E9         ?C0055?CS_SCALE_PROC:
  522: 	return	0;		
0014E9 E4                CLR     A
0014EA FE                MOV     R6,A
0014EB FF                MOV     R7,A
0014EC 22                RET     
  523: 	}
0014ED         ?C0052?CS_SCALE_PROC:
  524: 
  525: 	if(option==GetPowerOnZero)
0014ED 904DED            MOV     DPTR,#option
0014F0 E0                MOVX    A,@DPTR
0014F1 FD                MOV     R5,A
0014F2 7009              JNZ     ?C0067?CS_SCALE_PROC
  526: 		return	R_AD_PowerOnZero;
0014F4 904C96            MOV     DPTR,#R_AD_PowerOnZero
0014F7 E0                MOVX    A,@DPTR
0014F8 FE                MOV     R6,A
0014F9 A3                INC     DPTR
0014FA E0                MOVX    A,@DPTR
0014FB FF                MOV     R7,A
0014FC 22                RET     
0014FD         ?C0067?CS_SCALE_PROC:
  527: 	if(option==GetPowerOnZeroState)
0014FD ED                MOV     A,R5
0014FE B40208            CJNE    A,#02H,?C0068?CS_SCALE_PROC
  528: 		return	B_Weight_ZeroOk;
001501 904C9B            MOV     DPTR,#B_Weight_ZeroOk
001504 E0                MOVX    A,@DPTR
001505 FF                MOV     R7,A
001506 7E00              MOV     R6,#00H
001508 22                RET     
001509         ?C0068?CS_SCALE_PROC:
  529: 	if(option==GetRunningZero)
001509 904DED            MOV     DPTR,#option
00150C E0                MOVX    A,@DPTR
00150D FD                MOV     R5,A
00150E B40109            CJNE    A,#01H,?C0069?CS_SCALE_PROC
  530: 		return	R_AD_Zero;
001511 904C98            MOV     DPTR,#R_AD_Zero
001514 E0                MOVX    A,@DPTR
001515 FE                MOV     R6,A
001516 A3                INC     DPTR
001517 E0                MOVX    A,@DPTR
001518 FF                MOV     R7,A
001519 22                RET     
00151A         ?C0069?CS_SCALE_PROC:
  531: 	if(option==GetZeroState)
00151A ED                MOV     A,R5
00151B B40308            CJNE    A,#03H,?C0070?CS_SCALE_PROC
  532: 		return	B_Weight_Zero;
00151E 904C9A            MOV     DPTR,#B_Weight_Zero
001521 E0                MOVX    A,@DPTR
001522 FF                MOV     R7,A
001523 7E00              MOV     R6,#00H
001525 22                RET     
001526         ?C0070?CS_SCALE_PROC:
  533: 	if(option==GetIfZeroErr)
001526 904DED            MOV     DPTR,#option
001529 E0                MOVX    A,@DPTR
00152A B40908            CJNE    A,#09H,?C0071?CS_SCALE_PROC
  534: 		return   B_WeightZeroErr;
00152D 904C9D            MOV     DPTR,#B_WeightZeroErr
001530 E0                MOVX    A,@DPTR
001531 FF                MOV     R7,A
001532 7E00              MOV     R6,#00H
001534 22                RET     
001535         ?C0071?CS_SCALE_PROC:
  535: 	
  536: 	return 0;	
001535 E4                CLR     A
001536 FE                MOV     R6,A
001537 FF                MOV     R7,A
  537: }
001538 22                RET     
----- FUNCTION _CS_Scale_ZeroProc (END) -------


----- FUNCTION CS_ScaleDisplay (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
   14: void CS_ScaleDisplay()
   15: {
   16: 	u32_t weight_temp;
   17: 	
   18: 	if(R_Display_Err==CS_ScaleDisplay_L_err)	//提示信息显示
001539 904CC2            MOV     DPTR,#R_Display_Err
00153C E0                MOVX    A,@DPTR
00153D 6404              XRL     A,#04H
00153F 7032              JNZ     ?C0001?CS_SCALEDISPLAY
   19: 		{
   20: 		if(CS_Scale_JudgeOverLoad(GetIfOverLoad)== true)	
001541 7F01              MOV     R7,#01H
001543 123687            LCALL   _CS_Scale_JudgeOverLoad
001546 BF0107            CJNE    R7,#01H,?C0002?CS_SCALEDISPLAY
   21: 			CS_ScaleDisplay_FreshBuf(DisplayOverLoad,0);			
001549 E4                CLR     A
00154A FD                MOV     R5,A
00154B FC                MOV     R4,A
00154C 7F85              MOV     R7,#085H
00154E B1F8              ACALL   _CS_ScaleDisplay_FreshBuf
001550         ?C0002?CS_SCALEDISPLAY:
   22: 		if(CS_Scale_JudgeLowBat(GetIfLowBat)== true)
001550 7F01              MOV     R7,#01H
001552 F1E5              ACALL   _CS_Scale_JudgeLowBat
001554 BF0107            CJNE    R7,#01H,?C0003?CS_SCALEDISPLAY
   23: 			CS_ScaleDisplay_FreshBuf(DisplayLowBat,0);	
001557 E4                CLR     A
001558 FD                MOV     R5,A
001559 FC                MOV     R4,A
00155A 7F86              MOV     R7,#086H
00155C B1F8              ACALL   _CS_ScaleDisplay_FreshBuf
00155E         ?C0003?CS_SCALEDISPLAY:
   24: 		if(CS_Scale_ZeroProc(GetIfZeroErr,0)==true)
00155E E4                CLR     A
00155F FD                MOV     R5,A
001560 FC                MOV     R4,A
001561 7F09              MOV     R7,#09H
001563 51F0              ACALL   _CS_Scale_ZeroProc
001565 EF                MOV     A,R7
001566 6401              XRL     A,#01H
001568 4E                ORL     A,R6
001569 6002              JZ      $ + 4H
00156B A1F7              AJMP    ?C0005?CS_SCALEDISPLAY
   25: 			CS_ScaleDisplay_FreshBuf(DisplayZeroErr,0);
00156D FD                MOV     R5,A
00156E FC                MOV     R4,A
00156F 7F87              MOV     R7,#087H
001571 A1F8              AJMP    _CS_ScaleDisplay_FreshBuf
   26: 		return;
   27: 		}
001573         ?C0001?CS_SCALEDISPLAY:
   28: 	if(R_Selet_Unit == CS_ScaleDisplay_L_kg)
001573 904CC6            MOV     DPTR,#R_Selet_Unit
001576 E0                MOVX    A,@DPTR
001577 7014              JNZ     ?C0006?CS_SCALEDISPLAY
   29: 		{
   30: 		R_UnitWeight.kg = R_UnitWeight.origin;
001579 904CC9            MOV     DPTR,#R_UnitWeight
00157C E0                MOVX    A,@DPTR
00157D FE                MOV     R6,A
00157E A3                INC     DPTR
00157F E0                MOVX    A,@DPTR
001580 FF                MOV     R7,A
001581 A3                INC     DPTR
001582 EE                MOV     A,R6
001583 F0                MOVX    @DPTR,A
001584 FC                MOV     R4,A
001585 A3                INC     DPTR
001586 EF                MOV     A,R7
001587 F0                MOVX    @DPTR,A
001588 FD                MOV     R5,A
   31: 		CS_ScaleDisplay_FreshBuf(Displaykg,R_UnitWeight.kg);
001589 7F41              MOV     R7,#041H
00158B B1F8              ACALL   _CS_ScaleDisplay_FreshBuf
   32: 		}
00158D         ?C0006?CS_SCALEDISPLAY:
   33: 	if(R_Selet_Unit == CS_ScaleDisplay_L_gongjin)
00158D 904CC6            MOV     DPTR,#R_Selet_Unit
001590 E0                MOVX    A,@DPTR
001591 B40214            CJNE    A,#02H,?C0007?CS_SCALEDISPLAY
   34: 		{
   35: 		R_UnitWeight.kg = R_UnitWeight.origin;
001594 904CC9            MOV     DPTR,#R_UnitWeight
001597 E0                MOVX    A,@DPTR
001598 FE                MOV     R6,A
001599 A3                INC     DPTR
00159A E0                MOVX    A,@DPTR
00159B FF                MOV     R7,A
00159C A3                INC     DPTR
00159D EE                MOV     A,R6
00159E F0                MOVX    @DPTR,A
00159F FC                MOV     R4,A
0015A0 A3                INC     DPTR
0015A1 EF                MOV     A,R7
0015A2 F0                MOVX    @DPTR,A
0015A3 FD                MOV     R5,A
   36: 		CS_ScaleDisplay_FreshBuf(Displaygongjin,R_UnitWeight.kg);
0015A4 7F44              MOV     R7,#044H
0015A6 B1F8              ACALL   _CS_ScaleDisplay_FreshBuf
   37: 		}
0015A8         ?C0007?CS_SCALEDISPLAY:
   38: 	if(R_Selet_Unit == CS_ScaleDisplay_L_jin)
0015A8 904CC6            MOV     DPTR,#R_Selet_Unit
0015AB E0                MOVX    A,@DPTR
0015AC B4031A            CJNE    A,#03H,?C0008?CS_SCALEDISPLAY
   39: 		{
   40: 		R_UnitWeight.jin = R_UnitWeight.origin *2;
0015AF 904CCA            MOV     DPTR,#R_UnitWeight+01H
0015B2 E0                MOVX    A,@DPTR
0015B3 25E0              ADD     A,ACC
0015B5 FF                MOV     R7,A
0015B6 904CC9            MOV     DPTR,#R_UnitWeight
0015B9 E0                MOVX    A,@DPTR
0015BA 33                RLC     A
0015BB FE                MOV     R6,A
0015BC 904CD1            MOV     DPTR,#R_UnitWeight+08H
0015BF F0                MOVX    @DPTR,A
0015C0 FC                MOV     R4,A
0015C1 A3                INC     DPTR
0015C2 EF                MOV     A,R7
0015C3 F0                MOVX    @DPTR,A
0015C4 FD                MOV     R5,A
   41: 		CS_ScaleDisplay_FreshBuf(Displayjin,R_UnitWeight.jin);
0015C5 7F43              MOV     R7,#043H
0015C7 B1F8              ACALL   _CS_ScaleDisplay_FreshBuf
   42: 		}				
0015C9         ?C0008?CS_SCALEDISPLAY:
   43:        if(R_Selet_Unit == CS_ScaleDisplay_L_lb )
0015C9 904CC6            MOV     DPTR,#R_Selet_Unit
0015CC E0                MOVX    A,@DPTR
0015CD B40127            CJNE    A,#01H,?C0005?CS_SCALEDISPLAY
   44:        	{
   45: 		weight_temp   = (u32_t) R_UnitWeight.origin *22046;
0015D0 904CC9            MOV     DPTR,#R_UnitWeight
0015D3 E0                MOVX    A,@DPTR
0015D4 FE                MOV     R6,A
0015D5 A3                INC     DPTR
0015D6 E0                MOVX    A,@DPTR
0015D7 FF                MOV     R7,A
0015D8 7C56              MOV     R4,#056H
0015DA 7D1E              MOV     R5,#01EH
0015DC 1203C8            LCALL   ?C?LIMUL
;---- Variable 'weight_temp' assigned to Register 'R4/R5/R6/R7' ----
   46: 		R_UnitWeight.lb = weight_temp / 10000;
0015DF E4                CLR     A
0015E0 7B10              MOV     R3,#010H
0015E2 7A27              MOV     R2,#027H
0015E4 F9                MOV     R1,A
0015E5 F8                MOV     R0,A
0015E6 120269            LCALL   ?C?ULDIV
0015E9 904CCD            MOV     DPTR,#R_UnitWeight+04H
0015EC EE                MOV     A,R6
0015ED F0                MOVX    @DPTR,A
0015EE FC                MOV     R4,A
0015EF A3                INC     DPTR
0015F0 EF                MOV     A,R7
0015F1 F0                MOVX    @DPTR,A
0015F2 FD                MOV     R5,A
   47: 		CS_ScaleDisplay_FreshBuf(Displaylb,R_UnitWeight.lb);
0015F3 7F42              MOV     R7,#042H
0015F5 B1F8              ACALL   _CS_ScaleDisplay_FreshBuf
   48:        	}		
   49: }
0015F7         ?C0005?CS_SCALEDISPLAY:
0015F7 22                RET     
----- FUNCTION CS_ScaleDisplay (END) -------


----- FUNCTION _CS_ScaleDisplay_FreshBuf (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
   73: void CS_ScaleDisplay_FreshBuf(u8_t option,u16_t showdata)
   74: {
;---- Variable 'showdata' assigned to Register 'R4/R5' ----
0015F8 904E5B            MOV     DPTR,#option
0015FB EF                MOV     A,R7
0015FC F0                MOVX    @DPTR,A
   75: 	static	u8_t	data_buf[5];
   76: 
   77: 	//////////////////////////////////////////
   78: 	//数字部分赋值
   79: 	if(option==DisplayOverLoad)
0015FD BF850F            CJNE    R7,#085H,?C0011?CS_SCALEDISPLAY
   80: 	{
   81: 	data_buf[0]=Lcdnull_Num;
001600 904D18            MOV     DPTR,#data_buf
001603 7415              MOV     A,#015H
001605 F0                MOVX    @DPTR,A
   82: 	data_buf[1]=Lcdup_Num;
001606 A3                INC     DPTR
001607 04                INC     A
001608 F0                MOVX    @DPTR,A
   83: 	data_buf[2]=Lcdup_Num;
001609 A3                INC     DPTR
00160A F0                MOVX    @DPTR,A
   84: 	data_buf[3]=Lcdup_Num;
00160B A3                INC     DPTR
00160C F0                MOVX    @DPTR,A
   85: 	data_buf[4]=Lcdup_Num;
00160D A3                INC     DPTR
00160E F0                MOVX    @DPTR,A
   86: 	}
00160F         ?C0011?CS_SCALEDISPLAY:
   87: 
   88: 	if(option==DisplayLowBat)
00160F 904E5B            MOV     DPTR,#option
001612 E0                MOVX    A,@DPTR
001613 FF                MOV     R7,A
001614 B48614            CJNE    A,#086H,?C0012?CS_SCALEDISPLAY
   89: 	{
   90: 	data_buf[0]=0;
001617 E4                CLR     A
001618 904D18            MOV     DPTR,#data_buf
00161B F0                MOVX    @DPTR,A
   91: 	data_buf[1]=Lcdnull_Num;
00161C A3                INC     DPTR
00161D 7415              MOV     A,#015H
00161F F0                MOVX    @DPTR,A
   92: 	data_buf[2]=LcdchL_Num;
001620 A3                INC     DPTR
001621 7410              MOV     A,#010H
001623 F0                MOVX    @DPTR,A
   93: 	data_buf[3]=Lcdcho_Num;
001624 A3                INC     DPTR
001625 04                INC     A
001626 F0                MOVX    @DPTR,A
   94: 	data_buf[4]=Lcdnull_Num;
001627 A3                INC     DPTR
001628 7415              MOV     A,#015H
00162A F0                MOVX    @DPTR,A
   95: 	}
00162B         ?C0012?CS_SCALEDISPLAY:
   96: 
   97: 	if(option==DisplayZeroErr)
00162B EF                MOV     A,R7
00162C B48712            CJNE    A,#087H,?C0013?CS_SCALEDISPLAY
   98: 	{
   99: 	data_buf[0]=Lcdnull_Num;
00162F 904D18            MOV     DPTR,#data_buf
001632 7415              MOV     A,#015H
001634 F0                MOVX    @DPTR,A
  100: 	data_buf[1]=Lcdnull_Num;
001635 A3                INC     DPTR
001636 F0                MOVX    @DPTR,A
  101: 	data_buf[2]=LcdchC_Num;
001637 A3                INC     DPTR
001638 740C              MOV     A,#0CH
00163A F0                MOVX    @DPTR,A
  102: 	data_buf[3]=Lcdnull_Num;
00163B A3                INC     DPTR
00163C 7415              MOV     A,#015H
00163E F0                MOVX    @DPTR,A
  103: 	data_buf[4]=Lcdnull_Num;
00163F A3                INC     DPTR
001640 F0                MOVX    @DPTR,A
  104: 	}
001641         ?C0013?CS_SCALEDISPLAY:
  105: 	
  106: 	if(option==DisplayCal1||option==DisplayCal2||option==DisplayCal3||option==DisplayCal4)
001641 EF                MOV     A,R7
001642 6481              XRL     A,#081H
001644 600F              JZ      ?C0015?CS_SCALEDISPLAY
001646 EF                MOV     A,R7
001647 6482              XRL     A,#082H
001649 600A              JZ      ?C0015?CS_SCALEDISPLAY
00164B EF                MOV     A,R7
00164C 6483              XRL     A,#083H
00164E 6005              JZ      ?C0015?CS_SCALEDISPLAY
001650 EF                MOV     A,R7
001651 6484              XRL     A,#084H
001653 703E              JNZ     ?C0014?CS_SCALEDISPLAY
001655         ?C0015?CS_SCALEDISPLAY:
  107: 	{
  108: 	data_buf[0]=0;
001655 E4                CLR     A
001656 904D18            MOV     DPTR,#data_buf
001659 F0                MOVX    @DPTR,A
  109: 	data_buf[1]=LcdchC_Num;
00165A A3                INC     DPTR
00165B 740C              MOV     A,#0CH
00165D F0                MOVX    @DPTR,A
  110: 	data_buf[2]=LcdchA_Num;
00165E A3                INC     DPTR
00165F 740A              MOV     A,#0AH
001661 F0                MOVX    @DPTR,A
  111: 	data_buf[3]=LcdchL_Num;
001662 A3                INC     DPTR
001663 7410              MOV     A,#010H
001665 F0                MOVX    @DPTR,A
  112: 		if(option==DisplayCal1)
001666 EF                MOV     A,R7
001667 B48104            CJNE    A,#081H,?C0016?CS_SCALEDISPLAY
  113: 			data_buf[4]=1;
00166A A3                INC     DPTR
00166B 7401              MOV     A,#01H
00166D F0                MOVX    @DPTR,A
00166E         ?C0016?CS_SCALEDISPLAY:
  114: 		if(option==DisplayCal2)
00166E 904E5B            MOV     DPTR,#option
001671 E0                MOVX    A,@DPTR
001672 B48206            CJNE    A,#082H,?C0017?CS_SCALEDISPLAY
  115: 			data_buf[4]=2;
001675 904D1C            MOV     DPTR,#data_buf+04H
001678 7402              MOV     A,#02H
00167A F0                MOVX    @DPTR,A
00167B         ?C0017?CS_SCALEDISPLAY:
  116: 		if(option==DisplayCal3)
00167B 904E5B            MOV     DPTR,#option
00167E E0                MOVX    A,@DPTR
00167F FF                MOV     R7,A
001680 B48306            CJNE    A,#083H,?C0018?CS_SCALEDISPLAY
  117: 			data_buf[4]=3;
001683 904D1C            MOV     DPTR,#data_buf+04H
001686 7403              MOV     A,#03H
001688 F0                MOVX    @DPTR,A
001689         ?C0018?CS_SCALEDISPLAY:
  118: 		if(option==DisplayCal4)
001689 EF                MOV     A,R7
00168A B48406            CJNE    A,#084H,?C0014?CS_SCALEDISPLAY
  119: 			data_buf[4]=4;
00168D 904D1C            MOV     DPTR,#data_buf+04H
001690 7404              MOV     A,#04H
001692 F0                MOVX    @DPTR,A
  120: 	}
001693         ?C0014?CS_SCALEDISPLAY:
  121: 
  122: 	if(option==DisplayData||option==Displaykg||option==Displaylb||option==Displayjin||option==Displaygongjin)
001693 904E5B            MOV     DPTR,#option
001696 E0                MOVX    A,@DPTR
001697 FF                MOV     R7,A
001698 6421              XRL     A,#021H
00169A 6014              JZ      ?C0021?CS_SCALEDISPLAY
00169C EF                MOV     A,R7
00169D 6441              XRL     A,#041H
00169F 600F              JZ      ?C0021?CS_SCALEDISPLAY
0016A1 EF                MOV     A,R7
0016A2 6442              XRL     A,#042H
0016A4 600A              JZ      ?C0021?CS_SCALEDISPLAY
0016A6 EF                MOV     A,R7
0016A7 6443              XRL     A,#043H
0016A9 6005              JZ      ?C0021?CS_SCALEDISPLAY
0016AB EF                MOV     A,R7
0016AC 6444              XRL     A,#044H
0016AE 705F              JNZ     ?C0020?CS_SCALEDISPLAY
0016B0         ?C0021?CS_SCALEDISPLAY:
  123: 	{
  124: 	CS_ScaleDisplay_HexToBcd(showdata,data_buf);
0016B0 AE04              MOV     R6,AR4
0016B2 AF05              MOV     R7,AR5
0016B4 7B01              MOV     R3,#01H
0016B6 7A4D              MOV     R2,#HIGH data_buf
0016B8 7918              MOV     R1,#LOW data_buf
0016BA 123994            LCALL   _CS_ScaleDisplay_HexToBcd
  125: 	
  126: 	if(option&showhigh4)		//显示高4位
0016BD 904E5B            MOV     DPTR,#option
0016C0 E0                MOVX    A,@DPTR
0016C1 FF                MOV     R7,A
0016C2 30E61D            JNB     ACC.6,?C0022?CS_SCALEDISPLAY
  127: 		{
  128: 		data_buf[4]=data_buf[3];
0016C5 904D1B            MOV     DPTR,#data_buf+03H
0016C8 E0                MOVX    A,@DPTR
0016C9 A3                INC     DPTR
0016CA F0                MOVX    @DPTR,A
  129: 		data_buf[3]=data_buf[2];
0016CB 904D1A            MOV     DPTR,#data_buf+02H
0016CE E0                MOVX    A,@DPTR
0016CF A3                INC     DPTR
0016D0 F0                MOVX    @DPTR,A
  130: 		data_buf[2]=data_buf[1];
0016D1 904D19            MOV     DPTR,#data_buf+01H
0016D4 E0                MOVX    A,@DPTR
0016D5 A3                INC     DPTR
0016D6 F0                MOVX    @DPTR,A
  131: 		data_buf[1]=data_buf[0];
0016D7 904D18            MOV     DPTR,#data_buf
0016DA E0                MOVX    A,@DPTR
0016DB A3                INC     DPTR
0016DC F0                MOVX    @DPTR,A
  132: 		data_buf[0]=0;
0016DD E4                CLR     A
0016DE 904D18            MOV     DPTR,#data_buf
0016E1 F0                MOVX    @DPTR,A
  133: 		}
0016E2         ?C0022?CS_SCALEDISPLAY:
  134: 
  135: 		if(data_buf[0]==0 && data_buf[1]==0 )	
0016E2 904D18            MOV     DPTR,#data_buf
0016E5 E0                MOVX    A,@DPTR
0016E6 7007              JNZ     ?C0023?CS_SCALEDISPLAY
0016E8 A3                INC     DPTR
0016E9 E0                MOVX    A,@DPTR
0016EA 7003              JNZ     ?C0023?CS_SCALEDISPLAY
  136: 			data_buf[1]=Lcdnull_Num;
0016EC 7415              MOV     A,#015H
0016EE F0                MOVX    @DPTR,A
0016EF         ?C0023?CS_SCALEDISPLAY:
  137: 		if(data_buf[1]==Lcdnull_Num && data_buf[2]==0 )	
0016EF 904D19            MOV     DPTR,#data_buf+01H
0016F2 E0                MOVX    A,@DPTR
0016F3 B41507            CJNE    A,#015H,?C0024?CS_SCALEDISPLAY
0016F6 A3                INC     DPTR
0016F7 E0                MOVX    A,@DPTR
0016F8 7003              JNZ     ?C0024?CS_SCALEDISPLAY
  138: 			data_buf[2]=Lcdnull_Num;
0016FA 7415              MOV     A,#015H
0016FC F0                MOVX    @DPTR,A
0016FD         ?C0024?CS_SCALEDISPLAY:
  139: 
  140: 		if(option&ShowNoDot)	//没有小数点还要判断多一位数字为0时是否不显示
0016FD EF                MOV     A,R7
0016FE 30E50E            JNB     ACC.5,?C0020?CS_SCALEDISPLAY
  141: 			{
  142: 			if(data_buf[2]==Lcdnull_Num && data_buf[3]==0 )	
001701 904D1A            MOV     DPTR,#data_buf+02H
001704 E0                MOVX    A,@DPTR
001705 B41507            CJNE    A,#015H,?C0020?CS_SCALEDISPLAY
001708 A3                INC     DPTR
001709 E0                MOVX    A,@DPTR
00170A 7003              JNZ     ?C0020?CS_SCALEDISPLAY
  143: 				data_buf[3]=Lcdnull_Num;
00170C 7415              MOV     A,#015H
00170E F0                MOVX    @DPTR,A
  144: 			}
  145: 	}
00170F         ?C0020?CS_SCALEDISPLAY:
  146: 	
  147: 	CS_lcd_showbuf[0] = CS_ScaleDisplay_LookUpTable(data_buf[1]);
00170F 904D19            MOV     DPTR,#data_buf+01H
001712 E0                MOVX    A,@DPTR
001713 FF                MOV     R7,A
001714 F1CB              ACALL   _CS_ScaleDisplay_LookUpTable
001716 904D23            MOV     DPTR,#CS_lcd_showbuf
001719 EF                MOV     A,R7
00171A F0                MOVX    @DPTR,A
  148: 	CS_lcd_showbuf[1] = CS_ScaleDisplay_LookUpTable(data_buf[2]);
00171B 904D1A            MOV     DPTR,#data_buf+02H
00171E E0                MOVX    A,@DPTR
00171F FF                MOV     R7,A
001720 F1CB              ACALL   _CS_ScaleDisplay_LookUpTable
001722 904D24            MOV     DPTR,#CS_lcd_showbuf+01H
001725 EF                MOV     A,R7
001726 F0                MOVX    @DPTR,A
  149: 	CS_lcd_showbuf[2] = CS_ScaleDisplay_LookUpTable(data_buf[3]);
001727 904D1B            MOV     DPTR,#data_buf+03H
00172A E0                MOVX    A,@DPTR
00172B FF                MOV     R7,A
00172C F1CB              ACALL   _CS_ScaleDisplay_LookUpTable
00172E 904D25            MOV     DPTR,#CS_lcd_showbuf+02H
001731 EF                MOV     A,R7
001732 F0                MOVX    @DPTR,A
  150: 	CS_lcd_showbuf[3] = CS_ScaleDisplay_LookUpTable(data_buf[4]);
001733 904D1C            MOV     DPTR,#data_buf+04H
001736 E0                MOVX    A,@DPTR
001737 FF                MOV     R7,A
001738 F1CB              ACALL   _CS_ScaleDisplay_LookUpTable
00173A 904D26            MOV     DPTR,#CS_lcd_showbuf+03H
00173D EF                MOV     A,R7
00173E F0                MOVX    @DPTR,A
  151: 
  152: 	CS_ScaleDisplay_LcdBuf_rShift4();	//显示缓存跟实际液晶的逻辑对应有出入还要微调
00173F 1239FF            LCALL   CS_ScaleDisplay_LcdBuf_rShift4
  153: 
  154: 										//显示缓存数字还有符号部分的位置
  155: 
  156: 	//////////////////////////////////////////
  157: 	//符号部分赋值
  158: 	CS_Lcd_Send_Data[4] &=0x0f;			//清单位符号缓存	
001742 904D2C            MOV     DPTR,#CS_Lcd_Send_Data+04H
001745 E0                MOVX    A,@DPTR
001746 540F              ANL     A,#0FH
001748 F0                MOVX    @DPTR,A
  159: 	CS_Lcd_Buf_DOT2	 &= ~S_DOT;			//清显示小数点
001749 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
00174C E0                MOVX    A,@DPTR
00174D 54F7              ANL     A,#0F7H
00174F F0                MOVX    @DPTR,A
  160: 
  161: 		
  162: 	if(option==Displaykg)
001750 904E5B            MOV     DPTR,#option
001753 E0                MOVX    A,@DPTR
001754 FD                MOV     R5,A
001755 B4410C            CJNE    A,#041H,?C0027?CS_SCALEDISPLAY
  163: 		{
  164: 		CS_Lcd_Buf_DOT2	|= S_DOT;
001758 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
00175B E0                MOVX    A,@DPTR
00175C 4408              ORL     A,#08H
00175E F0                MOVX    @DPTR,A
  165: 		CS_Lcd_Buf_Unit	|= S_KG;							
00175F A3                INC     DPTR
001760 E0                MOVX    A,@DPTR
001761 4410              ORL     A,#010H
001763 F0                MOVX    @DPTR,A
  166: 		}	
001764         ?C0027?CS_SCALEDISPLAY:
  167: 
  168: 	if(option==Displaylb)
001764 ED                MOV     A,R5
001765 B4420C            CJNE    A,#042H,?C0028?CS_SCALEDISPLAY
  169: 		{
  170: 		CS_Lcd_Buf_DOT2	|= S_DOT;
001768 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
00176B E0                MOVX    A,@DPTR
00176C 4408              ORL     A,#08H
00176E F0                MOVX    @DPTR,A
  171: 		CS_Lcd_Buf_Unit	|= S_LB;							
00176F A3                INC     DPTR
001770 E0                MOVX    A,@DPTR
001771 4420              ORL     A,#020H
001773 F0                MOVX    @DPTR,A
  172: 		}
001774         ?C0028?CS_SCALEDISPLAY:
  173: 	if(option==Displayjin)
001774 904E5B            MOV     DPTR,#option
001777 E0                MOVX    A,@DPTR
001778 B4430C            CJNE    A,#043H,?C0029?CS_SCALEDISPLAY
  174: 		{
  175: 		CS_Lcd_Buf_DOT2	|= S_DOT;
00177B 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
00177E E0                MOVX    A,@DPTR
00177F 4408              ORL     A,#08H
001781 F0                MOVX    @DPTR,A
  176: 		CS_Lcd_Buf_Unit	|= S_JIN;							
001782 A3                INC     DPTR
001783 E0                MOVX    A,@DPTR
001784 4480              ORL     A,#080H
001786 F0                MOVX    @DPTR,A
  177: 		}
001787         ?C0029?CS_SCALEDISPLAY:
  178: 	
  179: 	if(option==Displaygongjin)
001787 904E5B            MOV     DPTR,#option
00178A E0                MOVX    A,@DPTR
00178B FD                MOV     R5,A
00178C B4440C            CJNE    A,#044H,?C0030?CS_SCALEDISPLAY
  180: 		{
  181: 		CS_Lcd_Buf_DOT2	|= S_DOT;
00178F 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
001792 E0                MOVX    A,@DPTR
001793 4408              ORL     A,#08H
001795 F0                MOVX    @DPTR,A
  182: 		CS_Lcd_Buf_Unit	|= S_GONG | S_JIN;							
001796 A3                INC     DPTR
001797 E0                MOVX    A,@DPTR
001798 44C0              ORL     A,#0C0H
00179A F0                MOVX    @DPTR,A
  183: 		}
00179B         ?C0030?CS_SCALEDISPLAY:
  184: 
  185: 	/*
  186: 	if( xxxStatus==xxxx)
  187: 		CS_Lcd_Buf_SIGN |=S_DAT;
  188: 	else
  189: 		CS_Lcd_Buf_SIGN &=~S_DAT;
  190: 	*/
  191: 	
  192: 	if(bleConnStatus==BLE_STATUS_CONN)
00179B 904C5B            MOV     DPTR,#bleConnStatus
00179E E0                MOVX    A,@DPTR
00179F B40109            CJNE    A,#01H,?C0031?CS_SCALEDISPLAY
  193: 		CS_Lcd_Buf_SIGN |=S_BLE;
0017A2 904D28            MOV     DPTR,#CS_Lcd_Send_Data
0017A5 E0                MOVX    A,@DPTR
0017A6 4402              ORL     A,#02H
0017A8 F0                MOVX    @DPTR,A
0017A9 8007              SJMP    ?C0032?CS_SCALEDISPLAY
0017AB         ?C0031?CS_SCALEDISPLAY:
  194: 	else
  195: 		CS_Lcd_Buf_SIGN &=~S_BLE;
0017AB 904D28            MOV     DPTR,#CS_Lcd_Send_Data
0017AE E0                MOVX    A,@DPTR
0017AF 54FD              ANL     A,#0FDH
0017B1 F0                MOVX    @DPTR,A
0017B2         ?C0032?CS_SCALEDISPLAY:
  196: 										
  197: 	if(option==DisplayData)				//最高位用蓝牙标志辅助显示
0017B2 ED                MOV     A,R5
0017B3 B42114            CJNE    A,#021H,?C0035?CS_SCALEDISPLAY
  198: 		{	
  199: 		CS_Lcd_Buf_SIGN &=~S_BLE;
0017B6 904D28            MOV     DPTR,#CS_Lcd_Send_Data
0017B9 E0                MOVX    A,@DPTR
0017BA 54FD              ANL     A,#0FDH
0017BC F0                MOVX    @DPTR,A
  200: 		if(data_buf[0]!=0)
0017BD 904D18            MOV     DPTR,#data_buf
0017C0 E0                MOVX    A,@DPTR
0017C1 6007              JZ      ?C0035?CS_SCALEDISPLAY
  201: 		CS_Lcd_Buf_SIGN |=S_BLE;
0017C3 904D28            MOV     DPTR,#CS_Lcd_Send_Data
0017C6 E0                MOVX    A,@DPTR
0017C7 4402              ORL     A,#02H
0017C9 F0                MOVX    @DPTR,A
  202: 		}
  203: 	
  204: }
0017CA         ?C0035?CS_SCALEDISPLAY:
0017CA 22                RET     
----- FUNCTION _CS_ScaleDisplay_FreshBuf (END) -------


----- FUNCTION _CS_ScaleDisplay_LookUpTable (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  288: u8_t CS_ScaleDisplay_LookUpTable(u8_t NumData)
  289: {
;---- Variable 'NumData' assigned to Register 'R7' ----
  290: 	u8_t	 * data_ptr;
  291: 	data_ptr = CS_Lcd_Table;
0017CB 7B01              MOV     R3,#01H
0017CD 7A4D              MOV     R2,#HIGH CS_Lcd_Table
0017CF 792E              MOV     R1,#LOW CS_Lcd_Table
;---- Variable 'data_ptr' assigned to Register 'R1/R2/R3' ----
  292: 	return 	*(data_ptr + NumData);
0017D1 8F82              MOV     DPL,R7
0017D3 758300            MOV     DPH,#00H
0017D6 120112            LCALL   ?C?CLDOPTR
0017D9 FF                MOV     R7,A
  293: }
0017DA 22                RET     
----- FUNCTION _CS_ScaleDisplay_LookUpTable (END) -------


----- FUNCTION QueueInit (BEGIN) -----
 FILE: 'lxProtocol.c'
  496: void QueueInit(void)
  497: {
  498: 	historyUserData.head = 0;
  499: 	historyUserData.tail = 0;
0017DB E4                CLR     A
0017DC 904C10            MOV     DPTR,#historyUserData
0017DF F0                MOVX    @DPTR,A
  500: 	historyUserData.size = 0;
0017E0 A3                INC     DPTR
0017E1 F0                MOVX    @DPTR,A
  501: }
0017E2 A3                INC     DPTR
0017E3 F0                MOVX    @DPTR,A
  502: 
0017E4 22                RET     
----- FUNCTION QueueInit (END) -------


----- FUNCTION _CS_Scale_JudgeLowBat (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  627: u8_t CS_Scale_JudgeLowBat(u8_t option)
  628: {
;---- Variable 'option' assigned to Register 'R7' ----
  629: 	static	u8_t xdata B_Weight_LowBat;			//低电标志
  630: 	
  631: 	if(R_1186sys_state&CS_Scale_LowBatBit==true)
  632: 		{
  633: 		B_Weight_LowBat = true;
  634: 		R_Display_Err=CS_ScaleDisplay_L_err;
  635: 		}
0017E5         ?C0081?CS_SCALE_PROC:
  636: 	else
  637: 		B_Weight_LowBat = false;
0017E5 E4                CLR     A
0017E6 904C9F            MOV     DPTR,#B_Weight_LowBat
0017E9 F0                MOVX    @DPTR,A
0017EA         ?C0082?CS_SCALE_PROC:
  638: 
  639: 	if(option==GetIfLowBat)
0017EA EF                MOV     A,R7
0017EB B40106            CJNE    A,#01H,?C0083?CS_SCALE_PROC
  640: 		return B_Weight_LowBat;
0017EE 904C9F            MOV     DPTR,#B_Weight_LowBat
0017F1 E0                MOVX    A,@DPTR
0017F2 FF                MOV     R7,A
0017F3 22                RET     
0017F4         ?C0083?CS_SCALE_PROC:
  641: 	
  642: 		return 0;	
0017F4 7F00              MOV     R7,#00H
  643: }
0017F6 22                RET     
----- FUNCTION _CS_Scale_JudgeLowBat (END) -------


----- FUNCTION _generateChecksum (BEGIN) -----
 FILE: 'system.c'
  114: u8_t generateChecksum(u8_t *buf,u8_t len)
  115: {
0017F7 904E42            MOV     DPTR,#buf
0017FA EB                MOV     A,R3
0017FB F0                MOVX    @DPTR,A
0017FC A3                INC     DPTR
0017FD EA                MOV     A,R2
0017FE F0                MOVX    @DPTR,A
0017FF A3                INC     DPTR
001800 E9                MOV     A,R1
001801 F0                MOVX    @DPTR,A
;---- Variable 'len' assigned to Register 'R5' ----
  116: 	u8_t result;
  117: 	result = 0;
;---- Variable 'result' assigned to Register 'R7' ----
001802 E4                CLR     A
001803 FF                MOV     R7,A
001804         ?C0012?SYSTEM:
  118: 	while(len--) {
001804 AE05              MOV     R6,AR5
001806 1D                DEC     R5
001807 EE                MOV     A,R6
001808 6017              JZ      ?C0013?SYSTEM
  119: 		result^=*buf++;
00180A 904E42            MOV     DPTR,#buf
00180D E0                MOVX    A,@DPTR
00180E FB                MOV     R3,A
00180F A3                INC     DPTR
001810 E4                CLR     A
001811 75F001            MOV     B,#01H
001814 1201C8            LCALL   ?C?ILDIX
001817 A9F0              MOV     R1,B
001819 FA                MOV     R2,A
00181A 1200F9            LCALL   ?C?CLDPTR
00181D 6F                XRL     A,R7
00181E FF                MOV     R7,A
  120: 	}
00181F 80E3              SJMP    ?C0012?SYSTEM
001821         ?C0013?SYSTEM:
  121: 	return result;
  122: }
001821 22                RET     
----- FUNCTION _generateChecksum (END) -------


----- FUNCTION BTControlProcess (BEGIN) -----
 FILE: 'system.c'
  124: void BTControlProcess(void)
  125: {
  126: 	BT_EVENTFIFO_t event;
  127: 	//normal process
  128: 	BT_EventFifoOut(&event);
001822 7B01              MOV     R3,#01H
001824 7A4D              MOV     R2,#HIGH event
001826 7969              MOV     R1,#LOW event
001828 12287A            LCALL   _BT_EventFifoOut
  129: 	if(event.len != 0)
00182B 904D69            MOV     DPTR,#event
00182E E0                MOVX    A,@DPTR
00182F 6075              JZ      ?C0028?SYSTEM
  130: 	{
  131: 		//YC_UARTSendData(event.DATA, event.len);
  132: 		switch(event.DATA[0]) {
001831 A3                INC     DPTR
001832 E0                MOVX    A,@DPTR
001833 24EE              ADD     A,#0EEH
001835 601C              JZ      ?C0019?SYSTEM
001837 14                DEC     A
001838 6024              JZ      ?C0020?SYSTEM
00183A 14                DEC     A
00183B 6029              JZ      ?C0021?SYSTEM
00183D 24FC              ADD     A,#0FCH
00183F 605F              JZ      ?C0027?SYSTEM
001841 2407              ADD     A,#07H
001843 7061              JNZ     ?C0028?SYSTEM
  133: 			case CS_NOTIFY_POWERON:
  134: 				break;
  135: 			case CS_NOTIFY_DISC:		//bluetooth disconnect
001845         ?C0018?SYSTEM:
  136: 				notifyValueUUIDA621 = NOTIFY_INDICATE_DISABLE;
001845 E4                CLR     A
001846 904C59            MOV     DPTR,#notifyValueUUIDA621
001849 F0                MOVX    @DPTR,A
  137: 				notifyValueUUIDA625 = NOTIFY_INDICATE_DISABLE;
00184A 904C5A            MOV     DPTR,#notifyValueUUIDA625
00184D F0                MOVX    @DPTR,A
  138: 				bleConnStatus= BLE_STATUS_DISCONN;
00184E 904C5B            MOV     DPTR,#bleConnStatus
001851 F0                MOVX    @DPTR,A
  139: 				break;
001852 22                RET     
  140: 			case CS_NOTIFY_CONN:	//bluetooth connected
001853         ?C0019?SYSTEM:
  141: 				lxOptStatus = OPT_IDLE;
001853 E4                CLR     A
001854 904C5C            MOV     DPTR,#lxOptStatus
001857 F0                MOVX    @DPTR,A
  142: 				bleConnStatus= BLE_STATUS_CONN;
001858 904C5B            MOV     DPTR,#bleConnStatus
00185B 04                INC     A
00185C F0                MOVX    @DPTR,A
  143: 				break;
00185D 22                RET     
  144: 			case CS_NOTIFY_DATA:	//receive data
00185E         ?C0020?SYSTEM:
  145: 				lxRecvDataFromApp(&event);
00185E 7B01              MOV     R3,#01H
001860 7A4D              MOV     R2,#HIGH event
001862 7969              MOV     R1,#LOW event
001864 8041              SJMP    _lxRecvDataFromApp
  146: 				break; 
  147: 			case CS_NOTIFY_OPENHANDLE:
001866         ?C0021?SYSTEM:
  148: 				if(event.DATA[1] == HANDLE_UUIDA621_NOTIFY)
001866 904D6B            MOV     DPTR,#event+02H
001869 E0                MOVX    A,@DPTR
00186A FF                MOV     R7,A
00186B B41C0A            CJNE    A,#01CH,?C0022?SYSTEM
  149: 				{
  150: 					notifyValueUUIDA621 = event.DATA[3];
00186E 904D6D            MOV     DPTR,#event+04H
001871 E0                MOVX    A,@DPTR
001872 904C59            MOV     DPTR,#notifyValueUUIDA621
001875 F0                MOVX    @DPTR,A
  151: 				}
001876 800C              SJMP    ?C0023?SYSTEM
001878         ?C0022?SYSTEM:
  152: 				else if(event.DATA[1] == HANDLE_UUIDA625_NOTIFY)
001878 EF                MOV     A,R7
001879 B42508            CJNE    A,#025H,?C0023?SYSTEM
  153: 				{
  154: 					notifyValueUUIDA625 = event.DATA[3];
00187C 904D6D            MOV     DPTR,#event+04H
00187F E0                MOVX    A,@DPTR
001880 904C5A            MOV     DPTR,#notifyValueUUIDA625
001883 F0                MOVX    @DPTR,A
  155: 				}
001884         ?C0023?SYSTEM:
  156: 
  157: 				if(*mem_register_buf == DEVICE_REGISTERED &&
001884 904C0E            MOV     DPTR,#04C0EH
001887 E0                MOVX    A,@DPTR
001888 B4011B            CJNE    A,#01H,?C0028?SYSTEM
00188B 904C59            MOV     DPTR,#notifyValueUUIDA621
00188E E0                MOVX    A,@DPTR
00188F B40114            CJNE    A,#01H,?C0028?SYSTEM
001892 904C5A            MOV     DPTR,#notifyValueUUIDA625
001895 E0                MOVX    A,@DPTR
001896 B4010D            CJNE    A,#01H,?C0028?SYSTEM
  158: 					notifyValueUUIDA621 == NOTIFY_ENABLE &&
  159: 					notifyValueUUIDA625 == NOTIFY_ENABLE)
  160: 				{
  161: 					lxOptStatus = OPT_LOGIN_REQ;
001899 904C5C            MOV     DPTR,#lxOptStatus
00189C 7416              MOV     A,#016H
00189E F0                MOVX    @DPTR,A
  162: 				}
  163: 				break;
00189F 22                RET     
  164: 			case CS_NOTIFY_READ_REQ:
  165: 				break;
  166: 			case CS_NOTIFY_INDICATE_CONFIRM:
0018A0         ?C0027?SYSTEM:
  167: 				handleIndicationConfirm = 1;
0018A0 904C5D            MOV     DPTR,#handleIndicationConfirm
0018A3 7401              MOV     A,#01H
0018A5 F0                MOVX    @DPTR,A
  168: 				break;
  169: 		}
  170: 	}
  171: }
0018A6         ?C0028?SYSTEM:
0018A6 22                RET     
----- FUNCTION BTControlProcess (END) -------


----- FUNCTION _lxRecvDataFromApp (BEGIN) -----
 FILE: 'lxProtocol.c'
   50: void lxRecvDataFromApp(BT_EVENTFIFO_t *event)
   51: {
0018A7 904E1F            MOV     DPTR,#event
0018AA EB                MOV     A,R3
0018AB F0                MOVX    @DPTR,A
0018AC A3                INC     DPTR
0018AD EA                MOV     A,R2
0018AE F0                MOVX    @DPTR,A
0018AF A3                INC     DPTR
0018B0 E9                MOV     A,R1
0018B1 F0                MOVX    @DPTR,A
   52: 	//data[0]:total length, data[1~2]:handle
   53: 	//data[3]:frame control,data[4]:length,data[5~N]:content
   54: 	u8_t frameControl = event->DATA[3];
0018B2 904E1F            MOV     DPTR,#event
0018B5 E0                MOVX    A,@DPTR
0018B6 FB                MOV     R3,A
0018B7 A3                INC     DPTR
0018B8 E0                MOVX    A,@DPTR
0018B9 FA                MOV     R2,A
0018BA A3                INC     DPTR
0018BB E0                MOVX    A,@DPTR
0018BC F9                MOV     R1,A
0018BD 900004            MOV     DPTR,#04H
0018C0 120112            LCALL   ?C?CLDOPTR
0018C3 904E22            MOV     DPTR,#frameControl
0018C6 F0                MOVX    @DPTR,A
   55: 	u16_t cmd;
   56: 	
   57: 	bigLittleEndianSwap(&(event->DATA[5]), event->DATA[4]);
0018C7 E9                MOV     A,R1
0018C8 2406              ADD     A,#06H
0018CA F9                MOV     R1,A
0018CB E4                CLR     A
0018CC 3A                ADDC    A,R2
0018CD FA                MOV     R2,A
0018CE C002              PUSH    AR2
0018D0 C001              PUSH    AR1
0018D2 904E1F            MOV     DPTR,#event
0018D5 E0                MOVX    A,@DPTR
0018D6 A3                INC     DPTR
0018D7 E0                MOVX    A,@DPTR
0018D8 FA                MOV     R2,A
0018D9 A3                INC     DPTR
0018DA E0                MOVX    A,@DPTR
0018DB F9                MOV     R1,A
0018DC 900005            MOV     DPTR,#05H
0018DF 120112            LCALL   ?C?CLDOPTR
0018E2 FD                MOV     R5,A
0018E3 7C00              MOV     R4,#00H
0018E5 D001              POP     AR1
0018E7 D002              POP     AR2
0018E9 31F2              ACALL   _bigLittleEndianSwap
   58: 	cmd = event->DATA[5] | (event->DATA[6] << 8);
0018EB 904E1F            MOV     DPTR,#event
0018EE E0                MOVX    A,@DPTR
0018EF FB                MOV     R3,A
0018F0 A3                INC     DPTR
0018F1 E0                MOVX    A,@DPTR
0018F2 FA                MOV     R2,A
0018F3 A3                INC     DPTR
0018F4 E0                MOVX    A,@DPTR
0018F5 F9                MOV     R1,A
0018F6 900007            MOV     DPTR,#07H
0018F9 120112            LCALL   ?C?CLDOPTR
0018FC FE                MOV     R6,A
0018FD 900006            MOV     DPTR,#06H
001900 120112            LCALL   ?C?CLDOPTR
001903 FD                MOV     R5,A
001904 EE                MOV     A,R6
001905 ED                MOV     A,R5
001906 FF                MOV     R7,A
001907 904E23            MOV     DPTR,#cmd
00190A EE                MOV     A,R6
00190B F0                MOVX    @DPTR,A
00190C A3                INC     DPTR
00190D EF                MOV     A,R7
00190E F0                MOVX    @DPTR,A
   59: 	
   60: 	//numTotalFrames == 1
   61: 	if(frameControl == FRAME_CONTROL_SINGLE)
00190F 904E22            MOV     DPTR,#frameControl
001912 E0                MOVX    A,@DPTR
001913 6410              XRL     A,#010H
001915 6002              JZ      $ + 4H
001917 21A2              AJMP    ?C0007?LXPROTOCOL
   62: 	{
   63: 		//send ack
   64: 		lxSendRecvDataACK(HANDLE_UUIDA625_NOTIFY, RECV_ACK_SUCCESS);
001919 7D01              MOV     R5,#01H
00191B 7F25              MOV     R7,#025H
00191D FE                MOV     R6,A
00191E F159              ACALL   _lxSendRecvDataACK
   65: 
   66: 		//copy data
   67: 		xmemcpy(LX_RECV_BUF, &(event->DATA[5]), event->DATA[4]);
001920 904E1F            MOV     DPTR,#event
001923 E0                MOVX    A,@DPTR
001924 FB                MOV     R3,A
001925 A3                INC     DPTR
001926 E0                MOVX    A,@DPTR
001927 FA                MOV     R2,A
001928 A3                INC     DPTR
001929 E0                MOVX    A,@DPTR
00192A 2406              ADD     A,#06H
00192C F9                MOV     R1,A
00192D E4                CLR     A
00192E 3A                ADDC    A,R2
00192F FA                MOV     R2,A
001930 C002              PUSH    AR2
001932 C001              PUSH    AR1
001934 904E1F            MOV     DPTR,#event
001937 E0                MOVX    A,@DPTR
001938 A3                INC     DPTR
001939 E0                MOVX    A,@DPTR
00193A FA                MOV     R2,A
00193B A3                INC     DPTR
00193C E0                MOVX    A,@DPTR
00193D F9                MOV     R1,A
00193E 900005            MOV     DPTR,#05H
001941 120112            LCALL   ?C?CLDOPTR
001944 F51C              MOV     ?_xmemcpy?BYTE+05H,A
001946 D001              POP     AR1
001948 D002              POP     AR2
00194A 7FA0              MOV     R7,#0A0H
00194C 7E48              MOV     R6,#048H
00194E 122A1E            LCALL   _xmemcpy
   68: 		
   69: 		switch(cmd)
001951 904E23            MOV     DPTR,#cmd
001954 E0                MOVX    A,@DPTR
001955 FE                MOV     R6,A
001956 A3                INC     DPTR
001957 E0                MOVX    A,@DPTR
001958 8EF0              MOV     B,R6
00195A 120395            LCALL   ?C?ICASE
00195D 1981              DW      ?C0009?LXPROTOCOL
00195F 0001              DW      01H
001961 1985              DW      ?C0010?LXPROTOCOL
001963 0003              DW      03H
001965 1989              DW      ?C0011?LXPROTOCOL
001967 0008              DW      08H
001969 198D              DW      ?C0012?LXPROTOCOL
00196B 000A              DW      0AH
00196D 1991              DW      ?C0013?LXPROTOCOL
00196F 1002              DW      01002H
001971 1995              DW      ?C0014?LXPROTOCOL
001973 1004              DW      01004H
001975 1999              DW      ?C0015?LXPROTOCOL
001977 1005              DW      01005H
001979 199D              DW      ?C0016?LXPROTOCOL
00197B 4801              DW      04801H
00197D 0000              DW      00H
00197F 19E8              DW      ?C0023?LXPROTOCOL
   70: 		{
   71: 			case CMD_REGISTRATION_REQ:
001981         ?C0009?LXPROTOCOL:
   72: 				changeLxOptStatus(OPT_REGISTER_REQ);
001981 7F10              MOV     R7,#010H
001983 8064              SJMP    _changeLxOptStatus
   73: 				break;
   74: 			case CMD_BIND_REQ:
001985         ?C0010?LXPROTOCOL:
   75: 				changeLxOptStatus(OPT_BIND_REQ);
001985 7F13              MOV     R7,#013H
001987 8060              SJMP    _changeLxOptStatus
   76: 				break;
   77: 			case CMD_LOGIN_RSP:
001989         ?C0011?LXPROTOCOL:
   78: 				changeLxOptStatus(OPT_LOGIN_RSP);
001989 7F18              MOV     R7,#018H
00198B 805C              SJMP    _changeLxOptStatus
   79: 				break;
   80: 			case CMD_INIT_RSP:
00198D         ?C0012?LXPROTOCOL:
   81: 				changeLxOptStatus(OPT_INIT_RSP);
00198D 7F22              MOV     R7,#022H
00198F 8058              SJMP    _changeLxOptStatus
   82: 				break;
   83: 				
   84: 			case CMD_TIME_SETTING_REQ:
001991         ?C0013?LXPROTOCOL:
   85: 				changeLxOptStatus(OPT_TIME_SETTING_REQ);
001991 7F25              MOV     R7,#025H
001993 8054              SJMP    _changeLxOptStatus
   86: 				break;
   87: 			case CMD_UNIT_SETTING_REQ:
001995         ?C0014?LXPROTOCOL:
   88: 				changeLxOptStatus(OPT_UNIT_SETTING_REQ);
001995 7F28              MOV     R7,#028H
001997 8050              SJMP    _changeLxOptStatus
   89: 				break;
   90: 			case CMD_DATA_CLEAR_SETTING_REQ:
001999         ?C0015?LXPROTOCOL:
   91: 				changeLxOptStatus(OPT_DATA_DEL_SETTING_REQ);
001999 7F31              MOV     R7,#031H
00199B 804C              SJMP    _changeLxOptStatus
   92: 				break;
   93: 				
   94: 			case CMD_SYNC_DATA_REQ:
00199D         ?C0016?LXPROTOCOL:
   95: 				changeLxOptStatus(OPT_SYNC_DATA_REQ);
00199D 7F35              MOV     R7,#035H
00199F 8048              SJMP    _changeLxOptStatus
   96: 				break;
   97: 		}
   98: 		
   99: 	}
0019A1 22                RET     
0019A2         ?C0007?LXPROTOCOL:
  100: 	//ACK:numTotalFrames == 0
  101: 	else if(frameControl == FRAME_CONTROL_ACK)
0019A2 904E22            MOV     DPTR,#frameControl
0019A5 E0                MOVX    A,@DPTR
0019A6 7040              JNZ     ?C0023?LXPROTOCOL
  102: 	{
  103: 		if(event->DATA[5] == RECV_ACK_SUCCESS)
0019A8 904E1F            MOV     DPTR,#event
0019AB E0                MOVX    A,@DPTR
0019AC FB                MOV     R3,A
0019AD A3                INC     DPTR
0019AE E0                MOVX    A,@DPTR
0019AF FA                MOV     R2,A
0019B0 A3                INC     DPTR
0019B1 E0                MOVX    A,@DPTR
0019B2 F9                MOV     R1,A
0019B3 900006            MOV     DPTR,#06H
0019B6 120112            LCALL   ?C?CLDOPTR
0019B9 B40111            CJNE    A,#01H,?C0019?LXPROTOCOL
  104: 		{
  105: 			if(lxOptStatus == OPT_REGISTER_RSP_WAIT_ACK)
0019BC 904C5C            MOV     DPTR,#lxOptStatus
0019BF E0                MOVX    A,@DPTR
0019C0 B41104            CJNE    A,#011H,?C0020?LXPROTOCOL
  106: 			{
  107: 				SpiFlashOperator(CS_CMD_WRITE_FLASH);
0019C3 7F41              MOV     R7,#041H
0019C5 F1C7              ACALL   _SpiFlashOperator
  108: 			}
0019C7         ?C0020?LXPROTOCOL:
  109: 			
  110: 			lxOptStatus = OPT_IDLE;
0019C7 E4                CLR     A
0019C8 904C5C            MOV     DPTR,#lxOptStatus
0019CB F0                MOVX    @DPTR,A
  111: 		}
0019CC 22                RET     
0019CD         ?C0019?LXPROTOCOL:
  112: 		else
  113: 		{
  114: 			if(lxOptStatus == OPT_REGISTER_RSP_WAIT_ACK)
0019CD 904C5C            MOV     DPTR,#lxOptStatus
0019D0 E0                MOVX    A,@DPTR
0019D1 B4110F            CJNE    A,#011H,?C0022?LXPROTOCOL
  115: 			{
  116: 				xmemset(mem_register_buf , 0, 10);
0019D4 7B0A              MOV     R3,#0AH
0019D6 E4                CLR     A
0019D7 FD                MOV     R5,A
0019D8 7F0E              MOV     R7,#0EH
0019DA 7E4C              MOV     R6,#04CH
0019DC F18B              ACALL   _xmemset
  117: 				//update adv flag
  118: 				*(mem_le_adv_data + 13) = 0;
0019DE 9043E7            MOV     DPTR,#043E7H
0019E1 E4                CLR     A
0019E2 F0                MOVX    @DPTR,A
  119: 			}
0019E3         ?C0022?LXPROTOCOL:
  120: 			lxOptStatus = OPT_IDLE;
0019E3 E4                CLR     A
0019E4 904C5C            MOV     DPTR,#lxOptStatus
0019E7 F0                MOVX    @DPTR,A
  121: 		}
  122: 	}
  123: }
0019E8         ?C0023?LXPROTOCOL:
0019E8 22                RET     
----- FUNCTION _lxRecvDataFromApp (END) -------


----- FUNCTION _changeLxOptStatus (BEGIN) -----
 FILE: 'lxProtocol.c'
  125: void changeLxOptStatus(u8_t opt)
  126: {
;---- Variable 'opt' assigned to Register 'R7' ----
  127: 	if(lxOptStatus == OPT_IDLE)
  128: 	{
0019E9 904C5C            MOV     DPTR,#lxOptStatus
0019EC E0                MOVX    A,@DPTR
0019ED 7002              JNZ     ?C0025?LXPROTOCOL
  129: 		lxOptStatus = opt;
  130: 	}
0019EF EF                MOV     A,R7
0019F0 F0                MOVX    @DPTR,A
  131: }
  132: 
0019F1         ?C0025?LXPROTOCOL:
0019F1 22                RET     
----- FUNCTION _changeLxOptStatus (END) -------


----- FUNCTION _bigLittleEndianSwap (BEGIN) -----
 FILE: 'lxProtocol.c'
   17: static void bigLittleEndianSwap(u8_t *buf, u16_t len)
   18: {
0019F2 904DB8            MOV     DPTR,#buf
0019F5 EB                MOV     A,R3
0019F6 F0                MOVX    @DPTR,A
0019F7 A3                INC     DPTR
0019F8 EA                MOV     A,R2
0019F9 F0                MOVX    @DPTR,A
0019FA A3                INC     DPTR
0019FB E9                MOV     A,R1
0019FC F0                MOVX    @DPTR,A
0019FD A3                INC     DPTR
0019FE EC                MOV     A,R4
0019FF F0                MOVX    @DPTR,A
001A00 A3                INC     DPTR
001A01 ED                MOV     A,R5
001A02 F0                MOVX    @DPTR,A
   19: 	u16_t i, size;
   20: 	u8_t temp;
   21: 	
   22: 	size = len -1;
001A03 24FF              ADD     A,#0FFH
001A05 FE                MOV     R6,A
001A06 EC                MOV     A,R4
001A07 34FF              ADDC    A,#0FFH
001A09 904DBF            MOV     DPTR,#size
001A0C F0                MOVX    @DPTR,A
001A0D A3                INC     DPTR
001A0E CE                XCH     A,R6
001A0F F0                MOVX    @DPTR,A
   23: 	for(i=0; i<len/2; i++)
001A10 E4                CLR     A
001A11 904DBD            MOV     DPTR,#i
001A14 F0                MOVX    @DPTR,A
001A15 A3                INC     DPTR
001A16 F0                MOVX    @DPTR,A
001A17         ?C0001?LXPROTOCOL:
001A17 904DBB            MOV     DPTR,#len
001A1A E0                MOVX    A,@DPTR
001A1B C3                CLR     C
001A1C 13                RRC     A
001A1D FE                MOV     R6,A
001A1E A3                INC     DPTR
001A1F E0                MOVX    A,@DPTR
001A20 13                RRC     A
001A21 FF                MOV     R7,A
001A22 C3                CLR     C
001A23 904DBE            MOV     DPTR,#i+01H
001A26 E0                MOVX    A,@DPTR
001A27 9F                SUBB    A,R7
001A28 904DBD            MOV     DPTR,#i
001A2B E0                MOVX    A,@DPTR
001A2C 9E                SUBB    A,R6
001A2D 507D              JNC     ?C0004?LXPROTOCOL
   24: 	{
   25: 		temp = buf[i];
001A2F 904DB8            MOV     DPTR,#buf
001A32 E0                MOVX    A,@DPTR
001A33 FB                MOV     R3,A
001A34 A3                INC     DPTR
001A35 E0                MOVX    A,@DPTR
001A36 FA                MOV     R2,A
001A37 A3                INC     DPTR
001A38 E0                MOVX    A,@DPTR
001A39 F9                MOV     R1,A
001A3A 904DBD            MOV     DPTR,#i
001A3D E0                MOVX    A,@DPTR
001A3E FE                MOV     R6,A
001A3F A3                INC     DPTR
001A40 E0                MOVX    A,@DPTR
001A41 F582              MOV     DPL,A
001A43 8E83              MOV     DPH,R6
001A45 120112            LCALL   ?C?CLDOPTR
001A48 904DC1            MOV     DPTR,#temp
001A4B F0                MOVX    @DPTR,A
   26: 		buf[i] = buf[size -i];
001A4C 904DBD            MOV     DPTR,#i
001A4F E0                MOVX    A,@DPTR
001A50 A3                INC     DPTR
001A51 E0                MOVX    A,@DPTR
001A52 FF                MOV     R7,A
001A53 C3                CLR     C
001A54 904DC0            MOV     DPTR,#size+01H
001A57 E0                MOVX    A,@DPTR
001A58 9F                SUBB    A,R7
001A59 FF                MOV     R7,A
001A5A 904DBF            MOV     DPTR,#size
001A5D E0                MOVX    A,@DPTR
001A5E 9E                SUBB    A,R6
001A5F 8F82              MOV     DPL,R7
001A61 F583              MOV     DPH,A
001A63 120112            LCALL   ?C?CLDOPTR
001A66 FF                MOV     R7,A
001A67 904DBD            MOV     DPTR,#i
001A6A E0                MOVX    A,@DPTR
001A6B FC                MOV     R4,A
001A6C A3                INC     DPTR
001A6D E0                MOVX    A,@DPTR
001A6E FD                MOV     R5,A
001A6F F582              MOV     DPL,A
001A71 8C83              MOV     DPH,R4
001A73 EF                MOV     A,R7
001A74 120151            LCALL   ?C?CSTOPTR
   27: 		buf[size -i] = temp;
001A77 904DC1            MOV     DPTR,#temp
001A7A E0                MOVX    A,@DPTR
001A7B FF                MOV     R7,A
001A7C C3                CLR     C
001A7D 904DC0            MOV     DPTR,#size+01H
001A80 E0                MOVX    A,@DPTR
001A81 9D                SUBB    A,R5
001A82 FD                MOV     R5,A
001A83 904DBF            MOV     DPTR,#size
001A86 E0                MOVX    A,@DPTR
001A87 9C                SUBB    A,R4
001A88 FC                MOV     R4,A
001A89 904DB8            MOV     DPTR,#buf
001A8C E0                MOVX    A,@DPTR
001A8D FB                MOV     R3,A
001A8E A3                INC     DPTR
001A8F E0                MOVX    A,@DPTR
001A90 FA                MOV     R2,A
001A91 A3                INC     DPTR
001A92 E0                MOVX    A,@DPTR
001A93 F9                MOV     R1,A
001A94 8D82              MOV     DPL,R5
001A96 8C83              MOV     DPH,R4
001A98 EF                MOV     A,R7
001A99 120151            LCALL   ?C?CSTOPTR
   28: 	}
001A9C 904DBE            MOV     DPTR,#i+01H
001A9F E0                MOVX    A,@DPTR
001AA0 04                INC     A
001AA1 F0                MOVX    @DPTR,A
001AA2 7006              JNZ     ?C0092?LXPROTOCOL
001AA4 904DBD            MOV     DPTR,#i
001AA7 E0                MOVX    A,@DPTR
001AA8 04                INC     A
001AA9 F0                MOVX    @DPTR,A
001AAA         ?C0092?LXPROTOCOL:
001AAA 4117              AJMP    ?C0001?LXPROTOCOL
   29: }
001AAC         ?C0004?LXPROTOCOL:
001AAC 22                RET     
----- FUNCTION _bigLittleEndianSwap (END) -------


----- FUNCTION lxOptProcess (BEGIN) -----
 FILE: 'lxProtocol.c'
  133: void lxOptProcess(void)
  134: {
  135: 	u8_t i;
  136: 
  137: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
001AAD 904C64            MOV     DPTR,#btCmdBuf+01H
001AB0 7430              MOV     A,#030H
001AB2 F0                MOVX    @DPTR,A
  138: 	btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
001AB3 A3                INC     DPTR
001AB4 741C              MOV     A,#01CH
001AB6 F0                MOVX    @DPTR,A
  139: 	btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
001AB7 E4                CLR     A
001AB8 A3                INC     DPTR
001AB9 F0                MOVX    @DPTR,A
  140: 	switch(lxOptStatus)
001ABA 904C5C            MOV     DPTR,#lxOptStatus
001ABD E0                MOVX    A,@DPTR
001ABE 12036F            LCALL   ?C?CCASE
001AC1 1AE6              DW      ?C0027?LXPROTOCOL
001AC3 10                DB      010H
001AC4 1B50              DW      ?C0031?LXPROTOCOL
001AC6 13                DB      013H
001AC7 1BBC              DW      ?C0034?LXPROTOCOL
001AC9 16                DB      016H
001ACA 1C4B              DW      ?C0040?LXPROTOCOL
001ACC 18                DB      018H
001ACD 1CBE              DW      ?C0050?LXPROTOCOL
001ACF 20                DB      020H
001AD0 1CFD              DW      ?C0051?LXPROTOCOL
001AD2 22                DB      022H
001AD3 1D21              DW      ?C0053?LXPROTOCOL
001AD5 25                DB      025H
001AD6 1D4E              DW      ?C0055?LXPROTOCOL
001AD8 28                DB      028H
001AD9 1D75              DW      ?C0058?LXPROTOCOL
001ADB 31                DB      031H
001ADC 1D8D              DW      ?C0062?LXPROTOCOL
001ADE 35                DB      035H
001ADF 1D9F              DW      ?C0065?LXPROTOCOL
001AE1 36                DB      036H
001AE2 0000              DW      00H
001AE4 1DA8              DW      ?C0049?LXPROTOCOL
  141: 	{
  142: #if 1
  143: 		case OPT_REGISTER_REQ:
001AE6         ?C0027?LXPROTOCOL:
  144: 			if(*(LX_RECV_BUF + 8) == DEVICE_ID_UNREGISTERED ||
  145: 				*(LX_RECV_BUF + 8) == DEVICE_ID_REGISTERED)
001AE6 9048A8            MOV     DPTR,#048A8H
001AE9 E0                MOVX    A,@DPTR
001AEA 6401              XRL     A,#01H
001AEC 6004              JZ      ?C0029?LXPROTOCOL
001AEE E0                MOVX    A,@DPTR
001AEF B40220            CJNE    A,#02H,?C0028?LXPROTOCOL
001AF2         ?C0029?LXPROTOCOL:
  146: 			{
  147: 				//save deviceID
  148: 				dmemcpy(deviceInfo.deviceID, LX_RECV_BUF + 2, DEVICE_ID_LENGTH);
001AF2 751301            MOV     ?_dmemcpy?BYTE+03H,#01H
001AF5 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
001AF8 7515A2            MOV     ?_dmemcpy?BYTE+05H,#0A2H
001AFB 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
001AFE 7B01              MOV     R3,#01H
001B00 7A4C              MOV     R2,#HIGH deviceInfo+04H
001B02 790A              MOV     R1,#LOW deviceInfo+04H
001B04 F125              ACALL   _dmemcpy
  149: 				//register success
  150: 				deviceInfo.registerFlag = DEVICE_REGISTERED;
001B06 904C06            MOV     DPTR,#deviceInfo
001B09 7401              MOV     A,#01H
001B0B F0                MOVX    @DPTR,A
  151: 				//update adv flag
  152: 				*(mem_le_adv_data + 13) = DEVICE_REGISTERED;
001B0C 9043E7            MOV     DPTR,#043E7H
001B0F F0                MOVX    @DPTR,A
  153: 			}
001B10 8005              SJMP    ?C0030?LXPROTOCOL
001B12         ?C0028?LXPROTOCOL:
  154: 			else// if(*(LX_RECV_BUF + 8) == DEVICE_ID_ILLEGALED)
  155: 			{
  156: 				deviceInfo.registerFlag = DEVICE_UNREGISTERED;
001B12 E4                CLR     A
001B13 904C06            MOV     DPTR,#deviceInfo
001B16 F0                MOVX    @DPTR,A
  157: 			}
001B17         ?C0030?LXPROTOCOL:
  158: 			
  159: 			btCmdBuf.len = 0x08;
001B17 904C63            MOV     DPTR,#btCmdBuf
001B1A 7408              MOV     A,#08H
001B1C F0                MOVX    @DPTR,A
  160: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
001B1D 904C67            MOV     DPTR,#btCmdBuf+04H
001B20 7410              MOV     A,#010H
001B22 F0                MOVX    @DPTR,A
  161: 			btCmdBuf.DATA[4] = REGISTER_RSP_DATA_LEN;
001B23 A3                INC     DPTR
001B24 7403              MOV     A,#03H
001B26 F0                MOVX    @DPTR,A
  162: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_REGISTER_RSP);
001B27 A3                INC     DPTR
001B28 14                DEC     A
001B29 F0                MOVX    @DPTR,A
  163: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_REGISTER_RSP);
001B2A E4                CLR     A
001B2B A3                INC     DPTR
001B2C F0                MOVX    @DPTR,A
  164: 			btCmdBuf.DATA[7] = deviceInfo.registerFlag;
001B2D 904C06            MOV     DPTR,#deviceInfo
001B30 E0                MOVX    A,@DPTR
001B31 904C6B            MOV     DPTR,#btCmdBuf+08H
001B34 F0                MOVX    @DPTR,A
  165: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), REGISTER_RSP_DATA_LEN);
001B35 7B01              MOV     R3,#01H
001B37 7A4C              MOV     R2,#HIGH btCmdBuf+06H
001B39 7969              MOV     R1,#LOW btCmdBuf+06H
001B3B 7D03              MOV     R5,#03H
001B3D 7C00              MOV     R4,#00H
001B3F 31F2              ACALL   _bigLittleEndianSwap
  166: 			BT_CmdFifoIn(&btCmdBuf);
001B41 7B01              MOV     R3,#01H
001B43 7A4C              MOV     R2,#HIGH btCmdBuf
001B45 7963              MOV     R1,#LOW btCmdBuf
001B47 D104              ACALL   _BT_CmdFifoIn
  167: 			lxOptStatus = OPT_REGISTER_RSP_WAIT_ACK;
001B49 904C5C            MOV     DPTR,#lxOptStatus
001B4C 7411              MOV     A,#011H
001B4E F0                MOVX    @DPTR,A
  168: 			break;
001B4F 22                RET     
  169: 			
  170: 		case OPT_BIND_REQ:
001B50         ?C0031?LXPROTOCOL:
  171: 			//bind success
  172: 			if(*(LX_RECV_BUF + 2) >= 1 && *(LX_RECV_BUF + 2) <= 4 && *(LX_RECV_BUF + 3) == 1)
001B50 9048A2            MOV     DPTR,#048A2H
001B53 E0                MOVX    A,@DPTR
001B54 C3                CLR     C
001B55 9401              SUBB    A,#01H
001B57 401B              JC      ?C0032?LXPROTOCOL
001B59 E0                MOVX    A,@DPTR
001B5A D3                SETB    C
001B5B 9404              SUBB    A,#04H
001B5D 5015              JNC     ?C0032?LXPROTOCOL
001B5F A3                INC     DPTR
001B60 E0                MOVX    A,@DPTR
001B61 B40110            CJNE    A,#01H,?C0032?LXPROTOCOL
  173: 			{
  174: 				//save user number
  175: 				deviceInfo.userNum = *(LX_RECV_BUF + 2);
001B64 9048A2            MOV     DPTR,#048A2H
001B67 E0                MOVX    A,@DPTR
001B68 904C09            MOV     DPTR,#deviceInfo+03H
001B6B F0                MOVX    @DPTR,A
  176: 				//lcd display result
  177: 				deviceInfo.bindFlag = BIND_SUCCESS;
001B6C 904C07            MOV     DPTR,#deviceInfo+01H
001B6F 7401              MOV     A,#01H
001B71 F0                MOVX    @DPTR,A
  178: 			}
001B72 8006              SJMP    ?C0033?LXPROTOCOL
001B74         ?C0032?LXPROTOCOL:
  179: 			else
  180: 			{
  181: 				deviceInfo.bindFlag =  BIND_FAIL;
001B74 904C07            MOV     DPTR,#deviceInfo+01H
001B77 7402              MOV     A,#02H
001B79 F0                MOVX    @DPTR,A
  182: 			}
001B7A         ?C0033?LXPROTOCOL:
  183: 			
  184: 			btCmdBuf.len = 0x08;
001B7A 904C63            MOV     DPTR,#btCmdBuf
001B7D 7408              MOV     A,#08H
001B7F F0                MOVX    @DPTR,A
  185: 			btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
001B80 A3                INC     DPTR
001B81 7430              MOV     A,#030H
001B83 F0                MOVX    @DPTR,A
  186: 			btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
001B84 A3                INC     DPTR
001B85 741C              MOV     A,#01CH
001B87 F0                MOVX    @DPTR,A
  187: 			btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
001B88 E4                CLR     A
001B89 A3                INC     DPTR
001B8A F0                MOVX    @DPTR,A
  188: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
001B8B A3                INC     DPTR
001B8C 7410              MOV     A,#010H
001B8E F0                MOVX    @DPTR,A
  189: 			btCmdBuf.DATA[4] = BIND_RSP_DATA_LEN;
001B8F A3                INC     DPTR
001B90 7403              MOV     A,#03H
001B92 F0                MOVX    @DPTR,A
  190: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_BIND_RSP);
001B93 A3                INC     DPTR
001B94 04                INC     A
001B95 F0                MOVX    @DPTR,A
  191: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_BIND_RSP);
001B96 E4                CLR     A
001B97 A3                INC     DPTR
001B98 F0                MOVX    @DPTR,A
  192: 			btCmdBuf.DATA[7] = deviceInfo.bindFlag;
001B99 904C07            MOV     DPTR,#deviceInfo+01H
001B9C E0                MOVX    A,@DPTR
001B9D 904C6B            MOV     DPTR,#btCmdBuf+08H
001BA0 F0                MOVX    @DPTR,A
  193: 
  194: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), BIND_RSP_DATA_LEN);
001BA1 7B01              MOV     R3,#01H
001BA3 7A4C              MOV     R2,#HIGH btCmdBuf+06H
001BA5 7969              MOV     R1,#LOW btCmdBuf+06H
001BA7 7D03              MOV     R5,#03H
001BA9 7C00              MOV     R4,#00H
001BAB 31F2              ACALL   _bigLittleEndianSwap
  195: 			BT_CmdFifoIn(&btCmdBuf);
001BAD 7B01              MOV     R3,#01H
001BAF 7A4C              MOV     R2,#HIGH btCmdBuf
001BB1 7963              MOV     R1,#LOW btCmdBuf
001BB3 D104              ACALL   _BT_CmdFifoIn
  196: 			lxOptStatus = OPT_BIND_RSP_WAIT_ACK;
001BB5 904C5C            MOV     DPTR,#lxOptStatus
001BB8 7414              MOV     A,#014H
001BBA F0                MOVX    @DPTR,A
  197: 			break;
001BBB 22                RET     
  198: 		
  199: 		case OPT_LOGIN_REQ:
001BBC         ?C0034?LXPROTOCOL:
  200: 			btCmdBuf.len = 0x0f;
001BBC 904C63            MOV     DPTR,#btCmdBuf
001BBF 740F              MOV     A,#0FH
001BC1 F0                MOVX    @DPTR,A
  201: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
001BC2 904C67            MOV     DPTR,#btCmdBuf+04H
001BC5 04                INC     A
001BC6 F0                MOVX    @DPTR,A
  202: 			btCmdBuf.DATA[4] = LOGIN_REQ_DATA_LEN;
001BC7 A3                INC     DPTR
001BC8 740A              MOV     A,#0AH
001BCA F0                MOVX    @DPTR,A
  203: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_LOGIN_REQ);
001BCB A3                INC     DPTR
001BCC 7407              MOV     A,#07H
001BCE F0                MOVX    @DPTR,A
  204: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_LOGIN_REQ);
001BCF E4                CLR     A
001BD0 A3                INC     DPTR
001BD1 F0                MOVX    @DPTR,A
  205: 			//Verification code:6bytes deviceID XOR MAC
  206: 			for(i=0;i<6;i++)
001BD2 904E5D            MOV     DPTR,#i
001BD5 F0                MOVX    @DPTR,A
001BD6         ?C0035?LXPROTOCOL:
001BD6 904E5D            MOV     DPTR,#i
001BD9 E0                MOVX    A,@DPTR
001BDA FF                MOV     R7,A
001BDB C3                CLR     C
001BDC 9406              SUBB    A,#06H
001BDE 502E              JNC     ?C0036?LXPROTOCOL
  207: 			{
  208: 				btCmdBuf.DATA[7+i] = deviceInfo.deviceID[i] ^ (*(mem_le_mac+i));
001BE0 E0                MOVX    A,@DPTR
001BE1 FE                MOV     R6,A
001BE2 24E8              ADD     A,#0E8H
001BE4 F582              MOV     DPL,A
001BE6 E4                CLR     A
001BE7 3443              ADDC    A,#043H
001BE9 F583              MOV     DPH,A
001BEB E0                MOVX    A,@DPTR
001BEC FD                MOV     R5,A
001BED 740A              MOV     A,#LOW deviceInfo+04H
001BEF 2E                ADD     A,R6
001BF0 F582              MOV     DPL,A
001BF2 E4                CLR     A
001BF3 344C              ADDC    A,#HIGH deviceInfo+04H
001BF5 F583              MOV     DPH,A
001BF7 E0                MOVX    A,@DPTR
001BF8 6D                XRL     A,R5
001BF9 FE                MOV     R6,A
001BFA 746B              MOV     A,#LOW btCmdBuf+08H
001BFC 2F                ADD     A,R7
001BFD F582              MOV     DPL,A
001BFF E4                CLR     A
001C00 344C              ADDC    A,#HIGH btCmdBuf+08H
001C02 F583              MOV     DPH,A
001C04 EE                MOV     A,R6
001C05 F0                MOVX    @DPTR,A
  209: 			}
001C06 904E5D            MOV     DPTR,#i
001C09 E0                MOVX    A,@DPTR
001C0A 04                INC     A
001C0B F0                MOVX    @DPTR,A
001C0C 80C8              SJMP    ?C0035?LXPROTOCOL
001C0E         ?C0036?LXPROTOCOL:
  210: 			
  211: 			//user number:1bytes
  212: 			btCmdBuf.DATA[13] = deviceInfo.userNum;
001C0E 904C09            MOV     DPTR,#deviceInfo+03H
001C11 E0                MOVX    A,@DPTR
001C12 904C71            MOV     DPTR,#btCmdBuf+0EH
001C15 F0                MOVX    @DPTR,A
  213: 			//battery:1bytes
  214: 			if(CS_Scale_JudgeLowBat(GetIfLowBat) == true)
001C16 7F01              MOV     R7,#01H
001C18 1217E5            LCALL   _CS_Scale_JudgeLowBat
001C1B BF0108            CJNE    R7,#01H,?C0038?LXPROTOCOL
  215: 				btCmdBuf.DATA[14] = 10;
001C1E 904C72            MOV     DPTR,#btCmdBuf+0FH
001C21 740A              MOV     A,#0AH
001C23 F0                MOVX    @DPTR,A
001C24 8006              SJMP    ?C0039?LXPROTOCOL
001C26         ?C0038?LXPROTOCOL:
  216: 			else
  217: 				btCmdBuf.DATA[14] = 100;
001C26 904C72            MOV     DPTR,#btCmdBuf+0FH
001C29 7464              MOV     A,#064H
001C2B F0                MOVX    @DPTR,A
001C2C         ?C0039?LXPROTOCOL:
  218: 
  219: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), LOGIN_REQ_DATA_LEN);
001C2C 7B01              MOV     R3,#01H
001C2E 7A4C              MOV     R2,#HIGH btCmdBuf+06H
001C30 7969              MOV     R1,#LOW btCmdBuf+06H
001C32 7D0A              MOV     R5,#0AH
001C34 7C00              MOV     R4,#00H
001C36 31F2              ACALL   _bigLittleEndianSwap
  220: 			BT_CmdFifoIn(&btCmdBuf);
001C38 7B01              MOV     R3,#01H
001C3A 7A4C              MOV     R2,#HIGH btCmdBuf
001C3C 7963              MOV     R1,#LOW btCmdBuf
001C3E D104              ACALL   _BT_CmdFifoIn
  221: 			YC_Delay10ms(10);
001C40 7F0A              MOV     R7,#0AH
001C42 B1EC              ACALL   _YC_Delay10ms
  222: 			lxOptStatus = OPT_LOGIN_REQ_WAIT_ACK;
001C44 904C5C            MOV     DPTR,#lxOptStatus
001C47 7417              MOV     A,#017H
001C49 F0                MOVX    @DPTR,A
  223: 			break;
001C4A 22                RET     
  224: 		case OPT_LOGIN_RSP:
001C4B         ?C0040?LXPROTOCOL:
  225: 			*(mem_register_buf + 2) = *(LX_RECV_BUF + 2);
001C4B 9048A2            MOV     DPTR,#048A2H
001C4E E0                MOVX    A,@DPTR
001C4F 904C10            MOV     DPTR,#04C10H
001C52 F0                MOVX    @DPTR,A
  226: 			if(*(mem_register_buf + 2) == LOGIN_SUCCESS)
001C53 E0                MOVX    A,@DPTR
001C54 6401              XRL     A,#01H
001C56 7050              JNZ     ?C0041?LXPROTOCOL
  227: 			{
  228: 				//Verification code:6bytes deviceID XOR MAC
  229: 				for(i=0;i<6;i++)
001C58 904E5D            MOV     DPTR,#i
001C5B F0                MOVX    @DPTR,A
001C5C         ?C0042?LXPROTOCOL:
  230: 				{
  231: 					if(*(LX_RECV_BUF + 3+i) != *(mem_register_buf + 4 + i) ^ (*(mem_le_mac+i)))
001C5C 904E5D            MOV     DPTR,#i
001C5F E0                MOVX    A,@DPTR
001C60 FF                MOV     R7,A
001C61 2412              ADD     A,#012H
001C63 F582              MOV     DPL,A
001C65 E4                CLR     A
001C66 344C              ADDC    A,#04CH
001C68 F583              MOV     DPH,A
001C6A E0                MOVX    A,@DPTR
001C6B FE                MOV     R6,A
001C6C 74A3              MOV     A,#0A3H
001C6E 2F                ADD     A,R7
001C6F F582              MOV     DPL,A
001C71 E4                CLR     A
001C72 3448              ADDC    A,#048H
001C74 F583              MOV     DPH,A
001C76 E0                MOVX    A,@DPTR
001C77 6E                XRL     A,R6
001C78 6004              JZ      ?C0046?LXPROTOCOL
001C7A 7F01              MOV     R7,#01H
001C7C 8002              SJMP    ?C0047?LXPROTOCOL
001C7E         ?C0046?LXPROTOCOL:
001C7E 7F00              MOV     R7,#00H
001C80         ?C0047?LXPROTOCOL:
001C80 904E5D            MOV     DPTR,#i
001C83 E0                MOVX    A,@DPTR
001C84 24E8              ADD     A,#0E8H
001C86 F582              MOV     DPL,A
001C88 E4                CLR     A
001C89 3443              ADDC    A,#043H
001C8B F583              MOV     DPH,A
001C8D E0                MOVX    A,@DPTR
001C8E 6F                XRL     A,R7
001C8F 6006              JZ      ?C0044?LXPROTOCOL
  232: 					{
  233: 						//disconnected
  234: 						btCmdBuf.len = 0x01;
001C91 904C63            MOV     DPTR,#btCmdBuf
001C94 7401              MOV     A,#01H
001C96 F0                MOVX    @DPTR,A
  235: 						//btCmdBuf.DATA[0] = CS_CMD_LE_DISC_REQ;
  236: 						//BT_CmdFifoIn(&btCmdBuf);
  237: 						//return;
  238: 					}
  239: 				}
001C97         ?C0044?LXPROTOCOL:
001C97 904E5D            MOV     DPTR,#i
001C9A E0                MOVX    A,@DPTR
001C9B 04                INC     A
001C9C F0                MOVX    @DPTR,A
001C9D E0                MOVX    A,@DPTR
001C9E B406BB            CJNE    A,#06H,?C0042?LXPROTOCOL
001CA1         ?C0043?LXPROTOCOL:
  240: 				//login success:sync time
  241: 				lxOptStatus = OPT_INIT_REQ;
001CA1 904C5C            MOV     DPTR,#lxOptStatus
001CA4 7420              MOV     A,#020H
001CA6 F0                MOVX    @DPTR,A
  242: 			}
001CA7 22                RET     
001CA8         ?C0041?LXPROTOCOL:
  243: 			else
  244: 			{
  245: 				lxOptStatus = OPT_IDLE;
001CA8 E4                CLR     A
001CA9 904C5C            MOV     DPTR,#lxOptStatus
001CAC F0                MOVX    @DPTR,A
  246: 				//disconnected
  247: 				btCmdBuf.len = 0x01;
001CAD 904C63            MOV     DPTR,#btCmdBuf
001CB0 04                INC     A
001CB1 F0                MOVX    @DPTR,A
  248: 				btCmdBuf.DATA[0] = CS_CMD_LE_DISC_REQ;
001CB2 A3                INC     DPTR
001CB3 7429              MOV     A,#029H
001CB5 F0                MOVX    @DPTR,A
  249: 				BT_CmdFifoIn(&btCmdBuf);
001CB6 7B01              MOV     R3,#01H
001CB8 7A4C              MOV     R2,#HIGH btCmdBuf
001CBA 7963              MOV     R1,#LOW btCmdBuf
001CBC C104              AJMP    _BT_CmdFifoIn
  250: 				return;
  251: 			}
  252: 			break;
  253: 			
  254: 		case OPT_INIT_REQ:
001CBE         ?C0050?LXPROTOCOL:
  255: 			btCmdBuf.len = 0x08;
001CBE 904C63            MOV     DPTR,#btCmdBuf
001CC1 7408              MOV     A,#08H
001CC3 F0                MOVX    @DPTR,A
  256: 			btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
001CC4 A3                INC     DPTR
001CC5 7430              MOV     A,#030H
001CC7 F0                MOVX    @DPTR,A
  257: 			btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
001CC8 A3                INC     DPTR
001CC9 741C              MOV     A,#01CH
001CCB F0                MOVX    @DPTR,A
  258: 			btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
001CCC E4                CLR     A
001CCD A3                INC     DPTR
001CCE F0                MOVX    @DPTR,A
  259: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
001CCF A3                INC     DPTR
001CD0 7410              MOV     A,#010H
001CD2 F0                MOVX    @DPTR,A
  260: 			btCmdBuf.DATA[4] = INIT_REQ_DATA_LEN;
001CD3 A3                INC     DPTR
001CD4 7403              MOV     A,#03H
001CD6 F0                MOVX    @DPTR,A
  261: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_INIT_REQ);
001CD7 A3                INC     DPTR
001CD8 7409              MOV     A,#09H
001CDA F0                MOVX    @DPTR,A
  262: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_INIT_REQ);
001CDB E4                CLR     A
001CDC A3                INC     DPTR
001CDD F0                MOVX    @DPTR,A
  263: 			btCmdBuf.DATA[7] = 0x08;
001CDE A3                INC     DPTR
001CDF 7408              MOV     A,#08H
001CE1 F0                MOVX    @DPTR,A
  264: 			
  265: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), INIT_REQ_DATA_LEN);
001CE2 7B01              MOV     R3,#01H
001CE4 7A4C              MOV     R2,#HIGH btCmdBuf+06H
001CE6 7969              MOV     R1,#LOW btCmdBuf+06H
001CE8 7D03              MOV     R5,#03H
001CEA 7C00              MOV     R4,#00H
001CEC 31F2              ACALL   _bigLittleEndianSwap
  266: 			BT_CmdFifoIn(&btCmdBuf);
001CEE 7B01              MOV     R3,#01H
001CF0 7A4C              MOV     R2,#HIGH btCmdBuf
001CF2 7963              MOV     R1,#LOW btCmdBuf
001CF4 D104              ACALL   _BT_CmdFifoIn
  267: 			lxOptStatus = OPT_INIT_REQ_WAIT_ACK;
001CF6 904C5C            MOV     DPTR,#lxOptStatus
001CF9 7421              MOV     A,#021H
001CFB F0                MOVX    @DPTR,A
  268: 			break;
001CFC 22                RET     
  269: 		case OPT_INIT_RSP:
001CFD         ?C0051?LXPROTOCOL:
  270: 			if(*(LX_RECV_BUF + 2) == 0x08)
001CFD 9048A2            MOV     DPTR,#048A2H
001D00 E0                MOVX    A,@DPTR
001D01 B40817            CJNE    A,#08H,?C0052?LXPROTOCOL
  271: 			{
  272: 				//save UTC time
  273: 				dmemcpy((pxbyte)&UTCTime, LX_RECV_BUF + 3, 4);
001D04 7A4C              MOV     R2,#HIGH UTCTime
001D06 795E              MOV     R1,#LOW UTCTime
001D08 7B01              MOV     R3,#01H
001D0A C003              PUSH    AR3
001D0C 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
001D0E 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
001D11 7515A3            MOV     ?_dmemcpy?BYTE+05H,#0A3H
001D14 751604            MOV     ?_dmemcpy?BYTE+06H,#04H
001D17 D003              POP     AR3
001D19 F125              ACALL   _dmemcpy
  274: 			}
001D1B         ?C0052?LXPROTOCOL:
  275: 			lxOptStatus = OPT_IDLE;
001D1B E4                CLR     A
001D1C 904C5C            MOV     DPTR,#lxOptStatus
001D1F F0                MOVX    @DPTR,A
  276: 			break;
001D20 22                RET     
  277: 			
  278: 		case OPT_TIME_SETTING_REQ:
001D21         ?C0053?LXPROTOCOL:
  279: 			if(*(LX_RECV_BUF+2) &0x01 == 1)
001D21 9048A2            MOV     DPTR,#048A2H
001D24 E0                MOVX    A,@DPTR
001D25 30E017            JNB     ACC.0,?C0054?LXPROTOCOL
  280: 			{
  281: 				dmemcpy((pxbyte)&UTCTime, LX_RECV_BUF + 3, 4);
001D28 7A4C              MOV     R2,#HIGH UTCTime
001D2A 795E              MOV     R1,#LOW UTCTime
001D2C 7B01              MOV     R3,#01H
001D2E C003              PUSH    AR3
001D30 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
001D32 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
001D35 7515A3            MOV     ?_dmemcpy?BYTE+05H,#0A3H
001D38 751604            MOV     ?_dmemcpy?BYTE+06H,#04H
001D3B D003              POP     AR3
001D3D F125              ACALL   _dmemcpy
  282: 			}
001D3F         ?C0054?LXPROTOCOL:
  283: 			/*
  284: 			if(*(LX_RECV_BUF+2) &0x02 == 1)
  285: 			{
  286: 
  287: 			}
  288: 			*/
  289: 			lxSettingDeviceRespone(CMD_TIME_SETTING_REQ, DEVICE_RSP_SUCCESS);
001D3F 7D01              MOV     R5,#01H
001D41 7F02              MOV     R7,#02H
001D43 7E10              MOV     R6,#010H
001D45 B1A9              ACALL   _lxSettingDeviceRespone
  290: 			lxOptStatus = OPT_TIME_SETTING_RSP_WAIT_ACK;
001D47 904C5C            MOV     DPTR,#lxOptStatus
001D4A 7426              MOV     A,#026H
001D4C F0                MOVX    @DPTR,A
  291: 			break;
001D4D 22                RET     
  292: 		
  293: 		case OPT_UNIT_SETTING_REQ:
001D4E         ?C0055?LXPROTOCOL:
  294: 			//save
  295: 			if(*(LX_RECV_BUF + 2) <= 3)
001D4E 9048A2            MOV     DPTR,#048A2H
001D51 E0                MOVX    A,@DPTR
001D52 D3                SETB    C
001D53 9403              SUBB    A,#03H
001D55 500F              JNC     ?C0056?LXPROTOCOL
  296: 			{
  297: 				R_Selet_Unit = *(LX_RECV_BUF + 2);
001D57 E0                MOVX    A,@DPTR
001D58 904CC6            MOV     DPTR,#R_Selet_Unit
001D5B F0                MOVX    @DPTR,A
  298: 				lxSettingDeviceRespone(CMD_UNIT_SETTING_REQ, DEVICE_RSP_SUCCESS);
001D5C 7D01              MOV     R5,#01H
001D5E 7F04              MOV     R7,#04H
001D60 7E10              MOV     R6,#010H
001D62 B1A9              ACALL   _lxSettingDeviceRespone
  299: 			}
001D64 8008              SJMP    ?C0057?LXPROTOCOL
001D66         ?C0056?LXPROTOCOL:
  300: 			else
  301: 			{
  302: 				lxSettingDeviceRespone(CMD_UNIT_SETTING_REQ, DEVICE_RSP_FAIL);
001D66 7D02              MOV     R5,#02H
001D68 7F04              MOV     R7,#04H
001D6A 7E10              MOV     R6,#010H
001D6C B1A9              ACALL   _lxSettingDeviceRespone
  303: 			}
001D6E         ?C0057?LXPROTOCOL:
  304: 			lxOptStatus = OPT_UNIT_SETTING_RSP_WAIT_ACK;
001D6E 904C5C            MOV     DPTR,#lxOptStatus
001D71 7429              MOV     A,#029H
001D73 F0                MOVX    @DPTR,A
  305: 			break;
001D74 22                RET     
  306: 
  307: 		case OPT_DATA_DEL_SETTING_REQ:
001D75         ?C0058?LXPROTOCOL:
  308: 			if(*(LX_RECV_BUF + 3)&0x01 == 1)
001D75 9048A3            MOV     DPTR,#048A3H
001D78 E0                MOVX    A,@DPTR
001D79 30E002            JNB     ACC.0,?C0061?LXPROTOCOL
  309: 			{
  310: 				delUserData();
001D7C F1A9              ACALL   delUserData
  311: 			}
  312: 			if(*(LX_RECV_BUF + 3)&0x04 == 1)
  313: 			{
  314: 				UTCTime = 0;
  315: 				R_Selet_Unit = CS_ScaleDisplay_L_kg;
  316: 			}
  317: 			if(*(LX_RECV_BUF + 3)&0x08 == 1)
  318: 			{
  319: 				QueueInit();
  320: 			}
001D7E         ?C0061?LXPROTOCOL:
  321: 			
  322: 			lxSettingDeviceRespone(CMD_DATA_CLEAR_SETTING_REQ, DEVICE_RSP_SUCCESS);
001D7E 7D01              MOV     R5,#01H
001D80 7F05              MOV     R7,#05H
001D82 7E10              MOV     R6,#010H
001D84 B1A9              ACALL   _lxSettingDeviceRespone
  323: 			lxOptStatus = OPT_DATA_DEL_SETTING_RSP_WAIT_ACK;
001D86 904C5C            MOV     DPTR,#lxOptStatus
001D89 7432              MOV     A,#032H
001D8B F0                MOVX    @DPTR,A
  324: 			break;
001D8C 22                RET     
  325: #endif
  326: 		case OPT_SYNC_DATA_REQ:
001D8D         ?C0062?LXPROTOCOL:
  327: 			//forbidden
  328: 			if(*(LX_RECV_BUF + 3) == 0)
001D8D 9048A3            MOV     DPTR,#048A3H
001D90 E0                MOVX    A,@DPTR
001D91 7005              JNZ     ?C0063?LXPROTOCOL
  329: 			{
  330: 				lxOptStatus = OPT_IDLE;
001D93 904C5C            MOV     DPTR,#lxOptStatus
001D96 F0                MOVX    @DPTR,A
  331: 			}
001D97 22                RET     
001D98         ?C0063?LXPROTOCOL:
  332: 			else
  333: 			{
  334: 				lxOptStatus = OPT_SYNC_DATA_RSP;
001D98 904C5C            MOV     DPTR,#lxOptStatus
001D9B 7436              MOV     A,#036H
001D9D F0                MOVX    @DPTR,A
  335: 			}
  336: 			break;
001D9E 22                RET     
  337: 		case OPT_SYNC_DATA_RSP:
001D9F         ?C0065?LXPROTOCOL:
  338: 			//send measuredata
  339: 			sendHistoryData();
001D9F 123ADC            LCALL   sendHistoryData
  340: 			lxOptStatus = OPT_SYNC_DATA_RSP_WAIT_ACK;
001DA2 904C5C            MOV     DPTR,#lxOptStatus
001DA5 7437              MOV     A,#037H
001DA7 F0                MOVX    @DPTR,A
  341: 			break;
  342: 		/*
  343: 		case LX_OPT_STATUS_RESEND:
  344: 			BT_CmdFifoIn(&btCmdBuf);
  345: 			lxOptStatus = OPT_IDLE;
  346: 			break;
  347: 			*/
  348: 	}
  349: }
001DA8         ?C0049?LXPROTOCOL:
001DA8 22                RET     
----- FUNCTION lxOptProcess (END) -------


----- FUNCTION _lxSettingDeviceRespone (BEGIN) -----
 FILE: 'lxProtocol.c'
  351: static void lxSettingDeviceRespone(u16_t cmd, u8_t state)
  352: {
;---- Variable 'cmd' assigned to Register 'R2/R3' ----
001DA9 AB07              MOV     R3,AR7
001DAB AA06              MOV     R2,AR6
;---- Variable 'state' assigned to Register 'R5' ----
  353: 	btCmdBuf.len = DEVICE_RSP_DATA_LEN + 5;
  354: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
001DAD 904C63            MOV     DPTR,#btCmdBuf
001DB0 740A              MOV     A,#0AH
001DB2 F0                MOVX    @DPTR,A
  355: 	btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
001DB3 A3                INC     DPTR
001DB4 7430              MOV     A,#030H
001DB6 F0                MOVX    @DPTR,A
  356: 	btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
001DB7 A3                INC     DPTR
001DB8 741C              MOV     A,#01CH
001DBA F0                MOVX    @DPTR,A
  357: 	btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
001DBB E4                CLR     A
001DBC A3                INC     DPTR
001DBD F0                MOVX    @DPTR,A
  358: 	btCmdBuf.DATA[4] = DEVICE_RSP_DATA_LEN;
001DBE A3                INC     DPTR
001DBF 7410              MOV     A,#010H
001DC1 F0                MOVX    @DPTR,A
  359: 	btCmdBuf.DATA[5] = LO_UINT16(CMD_DEVICE_RSP);
001DC2 A3                INC     DPTR
001DC3 7405              MOV     A,#05H
001DC5 F0                MOVX    @DPTR,A
  360: 	btCmdBuf.DATA[6] = HI_UINT16(CMD_DEVICE_RSP);
001DC6 E4                CLR     A
001DC7 A3                INC     DPTR
001DC8 F0                MOVX    @DPTR,A
  361: 	btCmdBuf.DATA[7] = LO_UINT16(cmd);
001DC9 A3                INC     DPTR
001DCA 7410              MOV     A,#010H
001DCC F0                MOVX    @DPTR,A
  362: 	btCmdBuf.DATA[8] = HI_UINT16(cmd);
001DCD EF                MOV     A,R7
001DCE A3                INC     DPTR
001DCF F0                MOVX    @DPTR,A
  363: 	btCmdBuf.DATA[9] = state;
001DD0 EE                MOV     A,R6
001DD1 A3                INC     DPTR
001DD2 F0                MOVX    @DPTR,A
  364: 
001DD3 A3                INC     DPTR
001DD4 ED                MOV     A,R5
001DD5 F0                MOVX    @DPTR,A
  365: 	bigLittleEndianSwap(&(btCmdBuf.DATA[5]), DEVICE_RSP_DATA_LEN);
001DD6 7B01              MOV     R3,#01H
001DD8 7A4C              MOV     R2,#HIGH btCmdBuf+06H
001DDA 7969              MOV     R1,#LOW btCmdBuf+06H
001DDC 7D05              MOV     R5,#05H
001DDE 7C00              MOV     R4,#00H
001DE0 31F2              ACALL   _bigLittleEndianSwap
  366: 	BT_CmdFifoIn(&btCmdBuf);
001DE2 7B01              MOV     R3,#01H
001DE4 7A4C              MOV     R2,#HIGH btCmdBuf
001DE6 7963              MOV     R1,#LOW btCmdBuf
001DE8 D104              ACALL   _BT_CmdFifoIn
  367: 	YC_Delay10ms(10);
001DEA 7F0A              MOV     R7,#0AH
;----                  JMP     _YC_Delay10ms
  368: }
----- FUNCTION _lxSettingDeviceRespone (END) -------


----- FUNCTION _YC_Delay10ms (BEGIN) -----
 FILE: 'YC_Utilities.c'
   60: void YC_Delay10ms(u8_t Time)
   61: {
;---- Variable 'Time' assigned to Register 'R7' ----
   62: 	u16_t j; 
   63: 	for(;Time>0;Time--)
001DEC         ?C0027?YC_UTILITIES:
001DEC EF                MOV     A,R7
001DED D3                SETB    C
001DEE 9400              SUBB    A,#00H
001DF0 4011              JC      ?C0033?YC_UTILITIES
   64: 	{
   65: 		for(j=0;j<11900;j++);
;---- Variable 'j' assigned to Register 'R4/R5' ----
001DF2 E4                CLR     A
001DF3 FD                MOV     R5,A
001DF4 FC                MOV     R4,A
001DF5         ?C0030?YC_UTILITIES:
001DF5 0D                INC     R5
001DF6 BD0001            CJNE    R5,#00H,?C0054?YC_UTILITIES
001DF9 0C                INC     R4
001DFA         ?C0054?YC_UTILITIES:
001DFA BC2EF8            CJNE    R4,#02EH,?C0030?YC_UTILITIES
001DFD BD7CF5            CJNE    R5,#07CH,?C0030?YC_UTILITIES
   66: 	}
001E00         ?C0029?YC_UTILITIES:
001E00 1F                DEC     R7
001E01 80E9              SJMP    ?C0027?YC_UTILITIES
   67: }
001E03         ?C0033?YC_UTILITIES:
001E03 22                RET     
----- FUNCTION _YC_Delay10ms (END) -------


----- FUNCTION _BT_CmdFifoIn (BEGIN) -----
 FILE: 'BT_IPC.c'
    7: bool BT_CmdFifoIn(BT_CMDFIFO_t *pFIFO)
    8: {
001E04 904E05            MOV     DPTR,#pFIFO
001E07 EB                MOV     A,R3
001E08 F0                MOVX    @DPTR,A
001E09 A3                INC     DPTR
001E0A EA                MOV     A,R2
001E0B F0                MOVX    @DPTR,A
001E0C A3                INC     DPTR
001E0D E9                MOV     A,R1
001E0E F0                MOVX    @DPTR,A
    9: 	u16_t new_wprt,new_cmd_len,i;
   10: 	if( pFIFO->len ==0 )
001E0F 1200F9            LCALL   ?C?CLDPTR
001E12 7002              JNZ     ?C0001?BT_IPC
   11: 		return false;
001E14 C3                CLR     C
001E15 22                RET     
001E16         ?C0001?BT_IPC:
   12: 	new_cmd_len = BT_GetCmdFifoDepth()+pFIFO->len+2;
001E16 1229AB            LCALL   BT_GetCmdFifoDepth
001E19 904E05            MOV     DPTR,#pFIFO
001E1C E0                MOVX    A,@DPTR
001E1D FB                MOV     R3,A
001E1E A3                INC     DPTR
001E1F E0                MOVX    A,@DPTR
001E20 FA                MOV     R2,A
001E21 A3                INC     DPTR
001E22 E0                MOVX    A,@DPTR
001E23 F9                MOV     R1,A
001E24 1200F9            LCALL   ?C?CLDPTR
001E27 FD                MOV     R5,A
001E28 2F                ADD     A,R7
001E29 FF                MOV     R7,A
001E2A E4                CLR     A
001E2B 33                RLC     A
001E2C CF                XCH     A,R7
001E2D 2402              ADD     A,#02H
001E2F CF                XCH     A,R7
001E30 3400              ADDC    A,#00H
001E32 FE                MOV     R6,A
;---- Variable 'new_cmd_len' assigned to Register 'R6/R7' ----
   13: 	if(new_cmd_len<=BT_CMD_BUF_LEN)
001E33 D3                SETB    C
001E34 EF                MOV     A,R7
001E35 9480              SUBB    A,#080H
001E37 EE                MOV     A,R6
001E38 9400              SUBB    A,#00H
001E3A 4002              JC      $ + 4H
001E3C E123              AJMP    ?C0003?BT_IPC
   14: 	{
   15: 		new_wprt = ESWAP(BT_CmdWptr);
001E3E 904A03            MOV     DPTR,#BT_CmdWptr+01H
001E41 E0                MOVX    A,@DPTR
001E42 FA                MOV     R2,A
001E43 904A02            MOV     DPTR,#BT_CmdWptr
001E46 E0                MOVX    A,@DPTR
001E47 FF                MOV     R7,A
001E48 EA                MOV     A,R2
001E49 FE                MOV     R6,A
001E4A EF                MOV     A,R7
001E4B 904E08            MOV     DPTR,#new_wprt
001E4E EE                MOV     A,R6
001E4F F0                MOVX    @DPTR,A
001E50 A3                INC     DPTR
001E51 EF                MOV     A,R7
001E52 F0                MOVX    @DPTR,A
   16: 		HWRITE(new_wprt++,CS_PREFIX_CMD);
001E53 904E08            MOV     DPTR,#new_wprt
001E56 E4                CLR     A
001E57 75F001            MOV     B,#01H
001E5A 1201C8            LCALL   ?C?ILDIX
001E5D 85F082            MOV     DPL,B
001E60 F583              MOV     DPH,A
001E62 74C5              MOV     A,#0C5H
001E64 F0                MOVX    @DPTR,A
   17: 		if(new_wprt == (mem_cmd_buf_end + 1))
001E65 904E08            MOV     DPTR,#new_wprt
001E68 E0                MOVX    A,@DPTR
001E69 B44F0E            CJNE    A,#04FH,?C0004?BT_IPC
001E6C A3                INC     DPTR
001E6D E0                MOVX    A,@DPTR
001E6E B48009            CJNE    A,#080H,?C0004?BT_IPC
   18: 		{
   19: 			new_wprt = mem_cmd_buf;
001E71 904E08            MOV     DPTR,#new_wprt
001E74 744F              MOV     A,#04FH
001E76 F0                MOVX    @DPTR,A
001E77 A3                INC     DPTR
001E78 E4                CLR     A
001E79 F0                MOVX    @DPTR,A
   20: 		}
001E7A         ?C0004?BT_IPC:
   21: 		HWRITE(new_wprt++,pFIFO->len);
001E7A 904E08            MOV     DPTR,#new_wprt
001E7D E4                CLR     A
001E7E 75F001            MOV     B,#01H
001E81 1201C8            LCALL   ?C?ILDIX
001E84 85F082            MOV     DPL,B
001E87 F583              MOV     DPH,A
001E89 ED                MOV     A,R5
001E8A F0                MOVX    @DPTR,A
   22: 		if(new_wprt == (mem_cmd_buf_end + 1))
001E8B 904E08            MOV     DPTR,#new_wprt
001E8E E0                MOVX    A,@DPTR
001E8F B44F0E            CJNE    A,#04FH,?C0005?BT_IPC
001E92 A3                INC     DPTR
001E93 E0                MOVX    A,@DPTR
001E94 B48009            CJNE    A,#080H,?C0005?BT_IPC
   23: 		{
   24: 			new_wprt = mem_cmd_buf;
001E97 904E08            MOV     DPTR,#new_wprt
001E9A 744F              MOV     A,#04FH
001E9C F0                MOVX    @DPTR,A
001E9D A3                INC     DPTR
001E9E E4                CLR     A
001E9F F0                MOVX    @DPTR,A
   25: 		}
001EA0         ?C0005?BT_IPC:
   26: 		for(i=0;i<pFIFO->len;i++)
001EA0 E4                CLR     A
001EA1 904E0A            MOV     DPTR,#i
001EA4 F0                MOVX    @DPTR,A
001EA5 A3                INC     DPTR
001EA6 F0                MOVX    @DPTR,A
001EA7         ?C0006?BT_IPC:
001EA7 904E05            MOV     DPTR,#pFIFO
001EAA E0                MOVX    A,@DPTR
001EAB FB                MOV     R3,A
001EAC A3                INC     DPTR
001EAD E0                MOVX    A,@DPTR
001EAE FA                MOV     R2,A
001EAF A3                INC     DPTR
001EB0 E0                MOVX    A,@DPTR
001EB1 F9                MOV     R1,A
001EB2 1200F9            LCALL   ?C?CLDPTR
001EB5 FF                MOV     R7,A
001EB6 904E0A            MOV     DPTR,#i
001EB9 E0                MOVX    A,@DPTR
001EBA FC                MOV     R4,A
001EBB A3                INC     DPTR
001EBC E0                MOVX    A,@DPTR
001EBD FD                MOV     R5,A
001EBE C3                CLR     C
001EBF 9F                SUBB    A,R7
001EC0 EC                MOV     A,R4
001EC1 9400              SUBB    A,#00H
001EC3 5047              JNC     ?C0007?BT_IPC
   27: 		{
   28: 			HWRITE(new_wprt++,pFIFO->DATA[i]);
001EC5 E9                MOV     A,R1
001EC6 2401              ADD     A,#01H
001EC8 F9                MOV     R1,A
001EC9 E4                CLR     A
001ECA 3A                ADDC    A,R2
001ECB FA                MOV     R2,A
001ECC E9                MOV     A,R1
001ECD 2D                ADD     A,R5
001ECE F9                MOV     R1,A
001ECF EA                MOV     A,R2
001ED0 3C                ADDC    A,R4
001ED1 FA                MOV     R2,A
001ED2 1200F9            LCALL   ?C?CLDPTR
001ED5 FF                MOV     R7,A
001ED6 904E08            MOV     DPTR,#new_wprt
001ED9 E4                CLR     A
001EDA 75F001            MOV     B,#01H
001EDD 1201C8            LCALL   ?C?ILDIX
001EE0 85F082            MOV     DPL,B
001EE3 F583              MOV     DPH,A
001EE5 EF                MOV     A,R7
001EE6 F0                MOVX    @DPTR,A
   29: 			if(new_wprt == (mem_cmd_buf_end + 1))
001EE7 904E08            MOV     DPTR,#new_wprt
001EEA E0                MOVX    A,@DPTR
001EEB B44F0E            CJNE    A,#04FH,?C0008?BT_IPC
001EEE A3                INC     DPTR
001EEF E0                MOVX    A,@DPTR
001EF0 B48009            CJNE    A,#080H,?C0008?BT_IPC
   30: 			{
   31: 				new_wprt = mem_cmd_buf;
001EF3 904E08            MOV     DPTR,#new_wprt
001EF6 744F              MOV     A,#04FH
001EF8 F0                MOVX    @DPTR,A
001EF9 A3                INC     DPTR
001EFA E4                CLR     A
001EFB F0                MOVX    @DPTR,A
   32: 			}
   33: 		}
001EFC         ?C0008?BT_IPC:
001EFC 904E0B            MOV     DPTR,#i+01H
001EFF E0                MOVX    A,@DPTR
001F00 04                INC     A
001F01 F0                MOVX    @DPTR,A
001F02 7006              JNZ     ?C0030?BT_IPC
001F04 904E0A            MOV     DPTR,#i
001F07 E0                MOVX    A,@DPTR
001F08 04                INC     A
001F09 F0                MOVX    @DPTR,A
001F0A         ?C0030?BT_IPC:
001F0A 809B              SJMP    ?C0006?BT_IPC
001F0C         ?C0007?BT_IPC:
   34: 		BT_CmdWptr = ESWAP(new_wprt);
001F0C 904E08            MOV     DPTR,#new_wprt
001F0F E0                MOVX    A,@DPTR
001F10 FC                MOV     R4,A
001F11 A3                INC     DPTR
001F12 E0                MOVX    A,@DPTR
001F13 FA                MOV     R2,A
001F14 EC                MOV     A,R4
001F15 FF                MOV     R7,A
001F16 EA                MOV     A,R2
001F17 FE                MOV     R6,A
001F18 EF                MOV     A,R7
001F19 904A02            MOV     DPTR,#BT_CmdWptr
001F1C EE                MOV     A,R6
001F1D F0                MOVX    @DPTR,A
001F1E A3                INC     DPTR
001F1F EF                MOV     A,R7
001F20 F0                MOVX    @DPTR,A
   35: 		return true;
001F21 D3                SETB    C
001F22 22                RET     
   36: 	}
001F23         ?C0003?BT_IPC:
   37: 	else
   38: 	{
   39: 		return false;
001F23 C3                CLR     C
   40: 	}
   41: }
001F24 22                RET     
----- FUNCTION _BT_CmdFifoIn (END) -------


----- FUNCTION _dmemcpy (BEGIN) -----
 FILE: 'YC_Utilities.c'
   22: void dmemcpy(u8_t *dest, u8_t* src, u8_t len) small
   23: {
001F25 8B10              MOV     dest,R3
001F27 8A11              MOV     dest+01H,R2
001F29 8912              MOV     dest+02H,R1
001F2B         ?C0008?YC_UTILITIES:
   24: 	while(len--)
001F2B AF16              MOV     R7,len
001F2D 1516              DEC     len
001F2F EF                MOV     A,R7
001F30 6026              JZ      ?C0010?YC_UTILITIES
   25: 		*dest++ = *src++;
001F32 AB13              MOV     R3,src
001F34 0515              INC     src+02H
001F36 E515              MOV     A,src+02H
001F38 AA14              MOV     R2,src+01H
001F3A 7002              JNZ     ?C0047?YC_UTILITIES
001F3C 0514              INC     src+01H
001F3E         ?C0047?YC_UTILITIES:
001F3E 14                DEC     A
001F3F F9                MOV     R1,A
001F40 1200F9            LCALL   ?C?CLDPTR
001F43 FF                MOV     R7,A
001F44 AB10              MOV     R3,dest
001F46 0512              INC     dest+02H
001F48 E512              MOV     A,dest+02H
001F4A AA11              MOV     R2,dest+01H
001F4C 7002              JNZ     ?C0048?YC_UTILITIES
001F4E 0511              INC     dest+01H
001F50         ?C0048?YC_UTILITIES:
001F50 14                DEC     A
001F51 F9                MOV     R1,A
001F52 EF                MOV     A,R7
001F53 12013F            LCALL   ?C?CSTPTR
001F56 80D3              SJMP    ?C0008?YC_UTILITIES
   26: 	return;
   27: }
001F58         ?C0010?YC_UTILITIES:
001F58 22                RET     
----- FUNCTION _dmemcpy (END) -------


----- FUNCTION _lxSendRecvDataACK (BEGIN) -----
 FILE: 'lxProtocol.c'
   31: static void lxSendRecvDataACK(u16_t handle, u8_t state)
   32: {
;---- Variable 'handle' assigned to Register 'R2/R3' ----
001F59 AB07              MOV     R3,AR7
001F5B AA06              MOV     R2,AR6
;---- Variable 'state' assigned to Register 'R5' ----
   33: 	if(notifyValueUUIDA625 != NOTIFY_ENABLE)
   34: 	{
001F5D 904C5A            MOV     DPTR,#notifyValueUUIDA625
001F60 E0                MOVX    A,@DPTR
001F61 6401              XRL     A,#01H
001F63 7025              JNZ     ?C0006?LXPROTOCOL
   35: 		return;
   36: 	}
001F65         ?C0005?LXPROTOCOL:
   37: 
   38: 	btCmdBuf.len = 0x06;
001F65 904C63            MOV     DPTR,#btCmdBuf
001F68 7406              MOV     A,#06H
001F6A F0                MOVX    @DPTR,A
   39: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
001F6B A3                INC     DPTR
001F6C 7430              MOV     A,#030H
001F6E F0                MOVX    @DPTR,A
   40: 	btCmdBuf.DATA[1] = LO_UINT16(handle);
001F6F EB                MOV     A,R3
001F70 A3                INC     DPTR
001F71 F0                MOVX    @DPTR,A
   41: 	btCmdBuf.DATA[2] = HI_UINT16(handle);
001F72 EA                MOV     A,R2
001F73 A3                INC     DPTR
001F74 F0                MOVX    @DPTR,A
   42: 	btCmdBuf.DATA[3] = ACK_FRAME;
001F75 E4                CLR     A
001F76 A3                INC     DPTR
001F77 F0                MOVX    @DPTR,A
   43: 	btCmdBuf.DATA[4] = RECV_ACK_FRAME_LEN;
001F78 A3                INC     DPTR
001F79 04                INC     A
001F7A F0                MOVX    @DPTR,A
   44: 	btCmdBuf.DATA[5] = state;
001F7B A3                INC     DPTR
001F7C ED                MOV     A,R5
001F7D F0                MOVX    @DPTR,A
   45: 	
   46: 	BT_CmdFifoIn(&btCmdBuf);
001F7E 7B01              MOV     R3,#01H
001F80 7A4C              MOV     R2,#HIGH btCmdBuf
001F82 7963              MOV     R1,#LOW btCmdBuf
001F84 D104              ACALL   _BT_CmdFifoIn
   47: 	YC_Delay10ms(10);
001F86 7F0A              MOV     R7,#0AH
001F88 B1EC              ACALL   _YC_Delay10ms
   48: }
001F8A         ?C0006?LXPROTOCOL:
001F8A 22                RET     
----- FUNCTION _lxSendRecvDataACK (END) -------


----- FUNCTION _xmemset (BEGIN) -----
 FILE: 'YC_Utilities.c'
   10: void xmemset(pxbyte addr, u8_t value, u8_t len) small
   11: {
001F8B 8E1D              MOV     addr,R6
001F8D 8F1E              MOV     addr+01H,R7
;---- Variable 'len' assigned to Register 'R3' ----
;---- Variable 'value' assigned to Register 'R5' ----
001F8F         ?C0002?YC_UTILITIES:
   12: 	while(len--)
001F8F AF03              MOV     R7,AR3
001F91 1B                DEC     R3
001F92 EF                MOV     A,R7
001F93 6013              JZ      ?C0004?YC_UTILITIES
   13: 		*addr++ = value;
001F95 051E              INC     addr+01H
001F97 E51E              MOV     A,addr+01H
001F99 AE1D              MOV     R6,addr
001F9B 7002              JNZ     ?C0044?YC_UTILITIES
001F9D 051D              INC     addr
001F9F         ?C0044?YC_UTILITIES:
001F9F 14                DEC     A
001FA0 F582              MOV     DPL,A
001FA2 8E83              MOV     DPH,R6
001FA4 ED                MOV     A,R5
001FA5 F0                MOVX    @DPTR,A
001FA6 80E7              SJMP    ?C0002?YC_UTILITIES
   14: 	return;
   15: }
001FA8         ?C0004?YC_UTILITIES:
001FA8 22                RET     
----- FUNCTION _xmemset (END) -------


----- FUNCTION delUserData (BEGIN) -----
 FILE: 'lxProtocol.c'
  370: static void delUserData(void)
  371: {
  372: 	//(mem_register_buf) = DEVICE_UNREGISTERED;
  373: 	//*(mem_le_adv_data + 13) = *(mem_register_buf);
  374: 	xmemset((u8_t *)&deviceInfo, 0, sizeof(DeviceInfo_t));
001FA9 7E4C              MOV     R6,#HIGH deviceInfo
001FAB 7F06              MOV     R7,#LOW deviceInfo
001FAD 7B0A              MOV     R3,#0AH
001FAF E4                CLR     A
001FB0 FD                MOV     R5,A
001FB1 F18B              ACALL   _xmemset
  375: 	QueueInit();
001FB3 1217DB            LCALL   QueueInit
  376: 	*(mem_le_adv_data + 13) = DEVICE_UNREGISTERED;
001FB6 9043E7            MOV     DPTR,#043E7H
001FB9 E4                CLR     A
001FBA F0                MOVX    @DPTR,A
  377: 	UTCTime = 0;
001FBB 904C5E            MOV     DPTR,#UTCTime
001FBE 12033E            LCALL   ?C?LSTKXDATA
001FC1 00                DB      00H
001FC2 00                DB      00H
001FC3 00                DB      00H
001FC4 00                DB      00H
  378: 	SpiFlashOperator(CS_CMD_WRITE_FLASH);
001FC5 7F41              MOV     R7,#041H
;----                  JMP     _SpiFlashOperator
  379: }
----- FUNCTION delUserData (END) -------


----- FUNCTION _SpiFlashOperator (BEGIN) -----
 FILE: 'lxProtocol.c'
  469: void SpiFlashOperator(u8_t opt)
  470: {
001FC7 904E5F            MOV     DPTR,#opt
001FCA EF                MOV     A,R7
001FCB F0                MOVX    @DPTR,A
  471: #if 1
  472: 	if(CS_CMD_READ_FLASH == opt)
001FCC BF4017            CJNE    R7,#040H,?C0083?LXPROTOCOL
  473: 	{
  474: 		SPIFlashRead(mem_spiflash_buf, SPIFLASH_DATA_ADDR, SPIFLASH_READ_LENGTH);
001FCF 7B01              MOV     R3,#01H
001FD1 7A4C              MOV     R2,#04CH
001FD3 7900              MOV     R1,#00H
001FD5 904DEC            MOV     DPTR,#?_SPIFlashRead?BYTE+07H
001FD8 744C              MOV     A,#04CH
001FDA F0                MOVX    @DPTR,A
001FDB 7F00              MOV     R7,#00H
001FDD 7EA0              MOV     R6,#0A0H
001FDF 7D00              MOV     R5,#00H
001FE1 7C00              MOV     R4,#00H
001FE3 0227DF            LJMP    _SPIFlashRead
  475: 	}
001FE6         ?C0083?LXPROTOCOL:
  476: 	else if(CS_CMD_WRITE_FLASH == opt)
001FE6 904E5F            MOV     DPTR,#opt
001FE9 E0                MOVX    A,@DPTR
001FEA B44121            CJNE    A,#041H,?C0086?LXPROTOCOL
  477: 	{
  478: 		SPIFlashEraseSector(SPIFLASH_DATA_ADDR);
001FED 7F00              MOV     R7,#00H
001FEF 7EA0              MOV     R6,#0A0H
001FF1 7D00              MOV     R5,#00H
001FF3 7C00              MOV     R4,#00H
001FF5 1220E2            LCALL   _SPIFlashEraseSector
  479: 		SPIFlashWrite(mem_spiflash_buf, SPIFLASH_DATA_ADDR, SPIFLASH_READ_LENGTH);
001FF8 7B01              MOV     R3,#01H
001FFA 7A4C              MOV     R2,#04CH
001FFC 7900              MOV     R1,#00H
001FFE 904DE4            MOV     DPTR,#?_SPIFlashWrite?BYTE+07H
002001 744C              MOV     A,#04CH
002003 F0                MOVX    @DPTR,A
002004 7F00              MOV     R7,#00H
002006 7EA0              MOV     R6,#0A0H
002008 7D00              MOV     R5,#00H
00200A 7C00              MOV     R4,#00H
00200C 110F              ACALL   _SPIFlashWrite
  480: 	}
  481: #else
  482: 	btCmdBuf.len = 1;
  483: 	btCmdBuf.DATA[0] = opt;
  484: 	BT_CmdFifoIn(&btCmdBuf);
  485: 	YC_Delay10ms(10);
  486: #endif
  487: }
00200E         ?C0086?LXPROTOCOL:
00200E 22                RET     
----- FUNCTION _SpiFlashOperator (END) -------


----- FUNCTION _SPIFlashWrite (BEGIN) -----
 FILE: 'spiflash.c'
   65: void SPIFlashWrite(u8_t *buf, u32_t addr, u8_t len)
   66: {
00200F 904DDD            MOV     DPTR,#buf
002012 EB                MOV     A,R3
002013 F0                MOVX    @DPTR,A
002014 A3                INC     DPTR
002015 EA                MOV     A,R2
002016 F0                MOVX    @DPTR,A
002017 A3                INC     DPTR
002018 E9                MOV     A,R1
002019 F0                MOVX    @DPTR,A
00201A A3                INC     DPTR
00201B 11D0              ACALL   ?L?COM0001
   67: 	u8_t i;
   68: 	SPIFlashWriteEnable();
   69: 	SPIFlashWaitBusy();
   70: 	for(i=0;i<len;i++) {
;---- Variable 'i' assigned to Register 'R7' ----
00201D E4                CLR     A
00201E FF                MOV     R7,A
00201F         ?C0013?SPIFLASH:
00201F 904DE4            MOV     DPTR,#len
002022 E0                MOVX    A,@DPTR
002023 FE                MOV     R6,A
002024 EF                MOV     A,R7
002025 C3                CLR     C
002026 9E                SUBB    A,R6
002027 5023              JNC     ?C0014?SPIFLASH
   71: 		*(SF_TX_BUF+4+i) = buf[i];
002029 904DDD            MOV     DPTR,#buf
00202C E0                MOVX    A,@DPTR
00202D FB                MOV     R3,A
00202E A3                INC     DPTR
00202F E0                MOVX    A,@DPTR
002030 FA                MOV     R2,A
002031 A3                INC     DPTR
002032 E0                MOVX    A,@DPTR
002033 F9                MOV     R1,A
002034 8F82              MOV     DPL,R7
002036 758300            MOV     DPH,#00H
002039 120112            LCALL   ?C?CLDOPTR
00203C FE                MOV     R6,A
00203D 74C0              MOV     A,#0C0H
00203F 2F                ADD     A,R7
002040 F582              MOV     DPL,A
002042 E4                CLR     A
002043 3401              ADDC    A,#01H
002045 F583              MOV     DPH,A
002047 EE                MOV     A,R6
002048 F0                MOVX    @DPTR,A
   72: 	}
002049 0F                INC     R7
00204A 80D3              SJMP    ?C0013?SPIFLASH
00204C         ?C0014?SPIFLASH:
   73: 	*(SF_TX_BUF) = SF_PAGE_PROGRAM;
00204C 9001BC            MOV     DPTR,#01BCH
00204F 7402              MOV     A,#02H
002051 F0                MOVX    @DPTR,A
   74: 	*(SF_TX_BUF+1) = (addr>>16);
002052 904DE0            MOV     DPTR,#addr
002055 E0                MOVX    A,@DPTR
002056 FC                MOV     R4,A
002057 A3                INC     DPTR
002058 E0                MOVX    A,@DPTR
002059 FD                MOV     R5,A
00205A A3                INC     DPTR
00205B E0                MOVX    A,@DPTR
00205C FE                MOV     R6,A
00205D A3                INC     DPTR
00205E E0                MOVX    A,@DPTR
00205F FF                MOV     R7,A
002060 7810              MOV     R0,#010H
002062 12030C            LCALL   ?C?ULSHR
002065 9001BD            MOV     DPTR,#01BDH
002068 EF                MOV     A,R7
002069 F0                MOVX    @DPTR,A
   75: 	*(SF_TX_BUF+2) = (addr>>8);
00206A 904DE0            MOV     DPTR,#addr
00206D E0                MOVX    A,@DPTR
00206E FC                MOV     R4,A
00206F A3                INC     DPTR
002070 E0                MOVX    A,@DPTR
002071 FD                MOV     R5,A
002072 A3                INC     DPTR
002073 E0                MOVX    A,@DPTR
002074 FE                MOV     R6,A
002075 A3                INC     DPTR
002076 E0                MOVX    A,@DPTR
002077 FF                MOV     R7,A
002078 7808              MOV     R0,#08H
00207A 12030C            LCALL   ?C?ULSHR
00207D 9001BE            MOV     DPTR,#01BEH
002080 EF                MOV     A,R7
002081 F0                MOVX    @DPTR,A
   76: 	*(SF_TX_BUF+3) = (addr&0xff);
002082 904DE0            MOV     DPTR,#addr
002085 E0                MOVX    A,@DPTR
002086 FC                MOV     R4,A
002087 A3                INC     DPTR
002088 E0                MOVX    A,@DPTR
002089 FD                MOV     R5,A
00208A A3                INC     DPTR
00208B E0                MOVX    A,@DPTR
00208C FE                MOV     R6,A
00208D A3                INC     DPTR
00208E E0                MOVX    A,@DPTR
00208F FF                MOV     R7,A
002090 E4                CLR     A
002091 9001BF            MOV     DPTR,#01BFH
002094 EF                MOV     A,R7
002095 F0                MOVX    @DPTR,A
   77: 	REG_SPID_TXLEN = ESWAP(len+4);
002096 904DE4            MOV     DPTR,#len
002099 E0                MOVX    A,@DPTR
00209A 2404              ADD     A,#04H
00209C FD                MOV     R5,A
00209D E4                CLR     A
00209E 33                RLC     A
00209F FC                MOV     R4,A
0020A0 ED                MOV     A,R5
0020A1 FA                MOV     R2,A
0020A2 EC                MOV     A,R4
0020A3 FF                MOV     R7,A
0020A4 33                RLC     A
0020A5 95E0              SUBB    A,ACC
0020A7 EA                MOV     A,R2
0020A8 FE                MOV     R6,A
0020A9 EF                MOV     A,R7
0020AA 908088            MOV     DPTR,#08088H
0020AD EE                MOV     A,R6
0020AE F0                MOVX    @DPTR,A
0020AF A3                INC     DPTR
0020B0 EF                MOV     A,R7
0020B1 F0                MOVX    @DPTR,A
   78: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
0020B2 A3                INC     DPTR
0020B3 74BC              MOV     A,#0BCH
0020B5 F0                MOVX    @DPTR,A
0020B6 A3                INC     DPTR
0020B7 7401              MOV     A,#01H
0020B9 F0                MOVX    @DPTR,A
   79: 	REG_SPID_RXLEN = ESWAP(0);
0020BA 90808E            MOV     DPTR,#0808EH
0020BD E4                CLR     A
0020BE F0                MOVX    @DPTR,A
0020BF A3                INC     DPTR
0020C0 F0                MOVX    @DPTR,A
   80: 	REG_MISC_CTRL = SPID_START;
0020C1 908006            MOV     DPTR,#08006H
0020C4 7402              MOV     A,#02H
0020C6 F0                MOVX    @DPTR,A
0020C7         ?C0016?SPIFLASH:
   81: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
0020C7 90812C            MOV     DPTR,#0812CH
0020CA E0                MOVX    A,@DPTR
0020CB 30E3F9            JNB     ACC.3,?C0016?SPIFLASH
0020CE         ?C0017?SPIFLASH:
   82: 	SPIFlashWaitBusy();
0020CE 8005              SJMP    SPIFlashWaitBusy
   83: }
----- FUNCTION _SPIFlashWrite (END) -------


----- FUNCTION ?L?COM0001 (BEGIN) -----
0020D0 120332            LCALL   ?C?LSTXDATA
0020D3 3158              ACALL   SPIFlashWriteEnable
----- FUNCTION SPIFlashWaitBusy (BEGIN) -----
 FILE: 'spiflash.c'
   44: void SPIFlashWaitBusy(void)
   45: {
   46: 	while((SPIFlashReadSR()&0x01) == 0x01) {	//wait for BUSY
0020D5         ?C0007?SPIFLASH:
   47: 		YC_Delay1ms(1);
0020D5 319C              ACALL   SPIFlashReadSR
0020D7 EF                MOV     A,R7
0020D8 30E006            JNB     ACC.0,?C0009?SPIFLASH
   48: 	}
0020DB 7F01              MOV     R7,#01H
0020DD 3184              ACALL   _YC_Delay1ms
   49: }
0020DF 80F4              SJMP    ?C0007?SPIFLASH
   50: void SPIFlashEraseSector(u32_t addr)
0020E1         ?C0009?SPIFLASH:
0020E1 22                RET     
----- FUNCTION SPIFlashWaitBusy (END) -------


----- FUNCTION _SPIFlashEraseSector (BEGIN) -----
 FILE: 'spiflash.c'
   50: void SPIFlashEraseSector(u32_t addr)
   51: {
0020E2 904E2F            MOV     DPTR,#addr
0020E5 11D0              ACALL   ?L?COM0001
   52: 	SPIFlashWriteEnable();
   53: 	SPIFlashWaitBusy();
   54: 	*(SF_TX_BUF) = SF_SECTOR_ERASE;
0020E7 9001BC            MOV     DPTR,#01BCH
0020EA 7420              MOV     A,#020H
0020EC F0                MOVX    @DPTR,A
   55: 	*(SF_TX_BUF+1) = (addr>>16);
0020ED 904E2F            MOV     DPTR,#addr
0020F0 E0                MOVX    A,@DPTR
0020F1 FC                MOV     R4,A
0020F2 A3                INC     DPTR
0020F3 E0                MOVX    A,@DPTR
0020F4 FD                MOV     R5,A
0020F5 A3                INC     DPTR
0020F6 E0                MOVX    A,@DPTR
0020F7 FE                MOV     R6,A
0020F8 A3                INC     DPTR
0020F9 E0                MOVX    A,@DPTR
0020FA FF                MOV     R7,A
0020FB 7810              MOV     R0,#010H
0020FD 12030C            LCALL   ?C?ULSHR
002100 9001BD            MOV     DPTR,#01BDH
002103 EF                MOV     A,R7
002104 F0                MOVX    @DPTR,A
   56: 	*(SF_TX_BUF+2) = (addr>>8);
002105 904E2F            MOV     DPTR,#addr
002108 E0                MOVX    A,@DPTR
002109 FC                MOV     R4,A
00210A A3                INC     DPTR
00210B E0                MOVX    A,@DPTR
00210C FD                MOV     R5,A
00210D A3                INC     DPTR
00210E E0                MOVX    A,@DPTR
00210F FE                MOV     R6,A
002110 A3                INC     DPTR
002111 E0                MOVX    A,@DPTR
002112 FF                MOV     R7,A
002113 7808              MOV     R0,#08H
002115 12030C            LCALL   ?C?ULSHR
002118 9001BE            MOV     DPTR,#01BEH
00211B EF                MOV     A,R7
00211C F0                MOVX    @DPTR,A
   57: 	*(SF_TX_BUF+3) = (addr&0xff);
00211D 904E2F            MOV     DPTR,#addr
002120 E0                MOVX    A,@DPTR
002121 FC                MOV     R4,A
002122 A3                INC     DPTR
002123 E0                MOVX    A,@DPTR
002124 FD                MOV     R5,A
002125 A3                INC     DPTR
002126 E0                MOVX    A,@DPTR
002127 FE                MOV     R6,A
002128 A3                INC     DPTR
002129 E0                MOVX    A,@DPTR
00212A FF                MOV     R7,A
00212B E4                CLR     A
00212C 9001BF            MOV     DPTR,#01BFH
00212F EF                MOV     A,R7
002130 F0                MOVX    @DPTR,A
   58: 	REG_SPID_TXLEN = ESWAP(4);
002131 908088            MOV     DPTR,#08088H
002134 7404              MOV     A,#04H
002136 F0                MOVX    @DPTR,A
002137 A3                INC     DPTR
002138 E4                CLR     A
002139 F0                MOVX    @DPTR,A
   59: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
00213A A3                INC     DPTR
00213B 74BC              MOV     A,#0BCH
00213D F0                MOVX    @DPTR,A
00213E A3                INC     DPTR
00213F 7401              MOV     A,#01H
002141 F0                MOVX    @DPTR,A
   60: 	REG_SPID_RXLEN = ESWAP(0);
002142 90808E            MOV     DPTR,#0808EH
002145 E4                CLR     A
002146 F0                MOVX    @DPTR,A
002147 A3                INC     DPTR
002148 F0                MOVX    @DPTR,A
   61: 	REG_MISC_CTRL = SPID_START;
002149 908006            MOV     DPTR,#08006H
00214C 7402              MOV     A,#02H
00214E F0                MOVX    @DPTR,A
00214F         ?C0010?SPIFLASH:
   62: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
00214F 90812C            MOV     DPTR,#0812CH
002152 E0                MOVX    A,@DPTR
002153 30E3F9            JNB     ACC.3,?C0010?SPIFLASH
002156         ?C0011?SPIFLASH:
   63: 	SPIFlashWaitBusy();
002156 01D5              AJMP    SPIFlashWaitBusy
   64: }
----- FUNCTION _SPIFlashEraseSector (END) -------


----- FUNCTION SPIFlashWriteEnable (BEGIN) -----
 FILE: 'spiflash.c'
   35: void SPIFlashWriteEnable(void)
   36: {
   37: 	REG_SPID_RXLEN = ESWAP(0);
   38: 	REG_SPID_TXLEN = ESWAP(1);
002158 90808E            MOV     DPTR,#0808EH
00215B E4                CLR     A
00215C F0                MOVX    @DPTR,A
00215D A3                INC     DPTR
00215E F0                MOVX    @DPTR,A
   39: 	*SF_TX_BUF = SF_WRITE_ENABLE;
00215F 908088            MOV     DPTR,#08088H
002162 04                INC     A
002163 F0                MOVX    @DPTR,A
002164 A3                INC     DPTR
002165 E4                CLR     A
002166 F0                MOVX    @DPTR,A
   40: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
002167 9001BC            MOV     DPTR,#01BCH
00216A 7406              MOV     A,#06H
00216C F0                MOVX    @DPTR,A
   41: 	REG_MISC_CTRL = SPID_START;
00216D 90808A            MOV     DPTR,#0808AH
002170 74BC              MOV     A,#0BCH
002172 F0                MOVX    @DPTR,A
002173 A3                INC     DPTR
002174 7401              MOV     A,#01H
002176 F0                MOVX    @DPTR,A
   42: 	while((REG_DMA_STATUS&(1<<3)) == 0);
002177 908006            MOV     DPTR,#08006H
00217A 04                INC     A
00217B F0                MOVX    @DPTR,A
00217C         ?C0004?SPIFLASH:
   43: }
00217C 90812C            MOV     DPTR,#0812CH
00217F E0                MOVX    A,@DPTR
002180 30E3F9            JNB     ACC.3,?C0004?SPIFLASH
   44: void SPIFlashWaitBusy(void)
002183 22                RET     
----- FUNCTION SPIFlashWriteEnable (END) -------


----- FUNCTION _YC_Delay1ms (BEGIN) -----
 FILE: 'YC_Utilities.c'
   51: void YC_Delay1ms(u8_t Time)
   52: {
;---- Variable 'Time' assigned to Register 'R7' ----
   53: 	u16_t j; 
   54: 	for(;Time>0;Time--)
002184         ?C0020?YC_UTILITIES:
002184 EF                MOV     A,R7
002185 D3                SETB    C
002186 9400              SUBB    A,#00H
002188 4011              JC      ?C0026?YC_UTILITIES
   55: 	{
   56: 		for(j=0;j<1160;j++);
;---- Variable 'j' assigned to Register 'R4/R5' ----
00218A E4                CLR     A
00218B FD                MOV     R5,A
00218C FC                MOV     R4,A
00218D         ?C0023?YC_UTILITIES:
00218D 0D                INC     R5
00218E BD0001            CJNE    R5,#00H,?C0053?YC_UTILITIES
002191 0C                INC     R4
002192         ?C0053?YC_UTILITIES:
002192 BC04F8            CJNE    R4,#04H,?C0023?YC_UTILITIES
002195 BD88F5            CJNE    R5,#088H,?C0023?YC_UTILITIES
   57: 	}
002198         ?C0022?YC_UTILITIES:
002198 1F                DEC     R7
002199 80E9              SJMP    ?C0020?YC_UTILITIES
   58: }
00219B         ?C0026?YC_UTILITIES:
00219B 22                RET     
----- FUNCTION _YC_Delay1ms (END) -------


----- FUNCTION SPIFlashReadSR (BEGIN) -----
 FILE: 'spiflash.c'
   21: u8_t SPIFlashReadSR(void)
   22: {
   23: 	u8_t status;
   24: 	status = 0xff;
00219C 904E5A            MOV     DPTR,#status
00219F 74FF              MOV     A,#0FFH
0021A1 F0                MOVX    @DPTR,A
   25: 	REG_SPID_RXLEN = ESWAP(1);
0021A2 90808E            MOV     DPTR,#0808EH
0021A5 7401              MOV     A,#01H
0021A7 F0                MOVX    @DPTR,A
0021A8 A3                INC     DPTR
0021A9 E4                CLR     A
0021AA F0                MOVX    @DPTR,A
   26: 	REG_SPID_TXLEN = ESWAP(1);
0021AB 908088            MOV     DPTR,#08088H
0021AE 04                INC     A
0021AF F0                MOVX    @DPTR,A
0021B0 A3                INC     DPTR
0021B1 E4                CLR     A
0021B2 F0                MOVX    @DPTR,A
   27: 	*SF_TX_BUF = SF_READ_STATUS_REG;
0021B3 9001BC            MOV     DPTR,#01BCH
0021B6 7405              MOV     A,#05H
0021B8 F0                MOVX    @DPTR,A
   28: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
0021B9 90808A            MOV     DPTR,#0808AH
0021BC 74BC              MOV     A,#0BCH
0021BE F0                MOVX    @DPTR,A
0021BF A3                INC     DPTR
0021C0 7401              MOV     A,#01H
0021C2 F0                MOVX    @DPTR,A
   29: 	REG_SPID_RXADDR = ESWAP((u16_t)(&status));
0021C3 7D5A              MOV     R5,#LOW status
0021C5 ED                MOV     A,R5
0021C6 FA                MOV     R2,A
0021C7 744E              MOV     A,#HIGH status
0021C9 FF                MOV     R7,A
0021CA EA                MOV     A,R2
0021CB FE                MOV     R6,A
0021CC EF                MOV     A,R7
0021CD A3                INC     DPTR
0021CE EE                MOV     A,R6
0021CF F0                MOVX    @DPTR,A
0021D0 A3                INC     DPTR
0021D1 EF                MOV     A,R7
0021D2 F0                MOVX    @DPTR,A
   30: 	REG_MISC_CTRL = SPID_START;
0021D3 908006            MOV     DPTR,#08006H
0021D6 7402              MOV     A,#02H
0021D8 F0                MOVX    @DPTR,A
0021D9         ?C0001?SPIFLASH:
   31: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
0021D9 90812C            MOV     DPTR,#0812CH
0021DC E0                MOVX    A,@DPTR
0021DD 30E3F9            JNB     ACC.3,?C0001?SPIFLASH
0021E0         ?C0002?SPIFLASH:
   32: 	//YC_UARTSendData(&status, 1);
   33: 	return status;
0021E0 904E5A            MOV     DPTR,#status
0021E3 E0                MOVX    A,@DPTR
0021E4 FF                MOV     R7,A
   34: }
0021E5 22                RET     
----- FUNCTION SPIFlashReadSR (END) -------


----- FUNCTION _YC_UtilTimerStop (BEGIN) -----
 FILE: 'YC_Sys.c'
   66: bool YC_UtilTimerStop( u8_t timer_id) large
   67: {
;---- Variable 'timer_id' assigned to Register 'R4' ----
0021E6 AC07              MOV     R4,AR7
   68: 	if((timer_id > 8) ||!((YC_UtilTimer.timer_flages >> timer_id) & 1))
0021E8 EF                MOV     A,R7
0021E9 D3                SETB    C
0021EA 9408              SUBB    A,#08H
0021EC 5011              JNC     ?C0012?YC_SYS
0021EE 904CDB            MOV     DPTR,#YC_UtilTimer
0021F1 E0                MOVX    A,@DPTR
0021F2 FE                MOV     R6,A
0021F3 A807              MOV     R0,AR7
0021F5 08                INC     R0
0021F6 8002              SJMP    ?C0026?YC_SYS
0021F8         ?C0025?YC_SYS:
0021F8 C3                CLR     C
0021F9 13                RRC     A
0021FA         ?C0026?YC_SYS:
0021FA D8FC              DJNZ    R0,?C0025?YC_SYS
0021FC 20E002            JB      ACC.0,?C0011?YC_SYS
0021FF         ?C0012?YC_SYS:
   69: 		return false;
0021FF C3                CLR     C
002200 22                RET     
002201         ?C0011?YC_SYS:
   70: 	YC_UtilTimer.timer_flages &= ~( 1<< timer_id);
002201 AF04              MOV     R7,AR4
002203 7401              MOV     A,#01H
002205 A807              MOV     R0,AR7
002207 08                INC     R0
002208 8002              SJMP    ?C0028?YC_SYS
00220A         ?C0027?YC_SYS:
00220A C3                CLR     C
00220B 33                RLC     A
00220C         ?C0028?YC_SYS:
00220C D8FC              DJNZ    R0,?C0027?YC_SYS
00220E F4                CPL     A
00220F 5E                ANL     A,R6
002210 904CDB            MOV     DPTR,#YC_UtilTimer
002213 F0                MOVX    @DPTR,A
   71: 	YC_UtilTimer.callback[timer_id] = 0;
002214 EC                MOV     A,R4
002215 75F003            MOV     B,#03H
002218 A4                MUL     AB
002219 24DC              ADD     A,#LOW YC_UtilTimer+01H
00221B F582              MOV     DPL,A
00221D E4                CLR     A
00221E 344C              ADDC    A,#HIGH YC_UtilTimer+01H
002220 F583              MOV     DPH,A
002222 E4                CLR     A
002223 F0                MOVX    @DPTR,A
002224 A3                INC     DPTR
002225 F0                MOVX    @DPTR,A
002226 A3                INC     DPTR
002227 F0                MOVX    @DPTR,A
   72: 	YC_UtilTimer.timer_end[timer_id] = 0;
002228 EC                MOV     A,R4
002229 25E0              ADD     A,ACC
00222B 25E0              ADD     A,ACC
00222D 24F4              ADD     A,#LOW YC_UtilTimer+019H
00222F F582              MOV     DPL,A
002231 E4                CLR     A
002232 344C              ADDC    A,#HIGH YC_UtilTimer+019H
002234 F583              MOV     DPH,A
002236 12033E            LCALL   ?C?LSTKXDATA
002239 00                DB      00H
00223A 00                DB      00H
00223B 00                DB      00H
00223C 00                DB      00H
   73: 	return true;
00223D D3                SETB    C
   74: }
00223E 22                RET     
----- FUNCTION _YC_UtilTimerStop (END) -------


----- FUNCTION YC_UtilTimerProcess (BEGIN) -----
 FILE: 'YC_Sys.c'
   76: void YC_UtilTimerProcess(void) small
   77: {
   78: 	u8_t i;
   79: #if 0
   80: 	if(YC_UtilTimer.last_timer > (YC_CLK_N + 0x1000)){
   81: 		for(i = 0; i < YC_UTIL_TIMER_NUM; ++i){
   82: 			if((YC_UtilTimer.timer_flages >> i) & 1){
   83: 				YC_UtilTimer.timer_end[i] -= YC_UtilTimer.last_timer;
   84: 			}
   85: 		}
   86: 	}
   87: 	YC_UtilTimer.last_timer = YC_CLK_N;
   88: 	for(i = 0; i < YC_UTIL_TIMER_NUM; ++i){
   89: 		if((YC_UtilTimer.timer_flages >> i) & 1){
   90: 			if(YC_UtilTimer.timer_end[i] < YC_CLK_N){
   91: 				YC_UtilTimer.timer_flages &=~( 1<< i); // clear the flag
   92: 				YC_UtilTimer.callback[i](i);			
   93: 			}
   94: 		}
   95: 	}
   96: #else
   97: 	YC_UtilTimer.last_timer = YC_CLK_N;
00223F 908101            MOV     DPTR,#08101H
002242 E0                MOVX    A,@DPTR
002243 FF                MOV     R7,A
002244 E4                CLR     A
002245 FC                MOV     R4,A
002246 FD                MOV     R5,A
002247 FE                MOV     R6,A
002248 7808              MOV     R0,#08H
00224A 12031F            LCALL   ?C?LSHL
00224D A804              MOV     R0,AR4
00224F A905              MOV     R1,AR5
002251 AA06              MOV     R2,AR6
002253 AB07              MOV     R3,AR7
002255 908100            MOV     DPTR,#08100H
002258 E0                MOVX    A,@DPTR
002259 FF                MOV     R7,A
00225A E4                CLR     A
00225B EB                MOV     A,R3
00225C 4F                ORL     A,R7
00225D FF                MOV     R7,A
00225E EA                MOV     A,R2
00225F FE                MOV     R6,A
002260 E9                MOV     A,R1
002261 FD                MOV     R5,A
002262 E8                MOV     A,R0
002263 FC                MOV     R4,A
002264 C004              PUSH    AR4
002266 C005              PUSH    AR5
002268 C006              PUSH    AR6
00226A C007              PUSH    AR7
00226C 908102            MOV     DPTR,#08102H
00226F E0                MOVX    A,@DPTR
002270 FF                MOV     R7,A
002271 E4                CLR     A
002272 FC                MOV     R4,A
002273 FD                MOV     R5,A
002274 FE                MOV     R6,A
002275 7810              MOV     R0,#010H
002277 12031F            LCALL   ?C?LSHL
00227A D003              POP     AR3
00227C D002              POP     AR2
00227E D001              POP     AR1
002280 D000              POP     AR0
002282 EF                MOV     A,R7
002283 4B                ORL     A,R3
002284 FF                MOV     R7,A
002285 EE                MOV     A,R6
002286 4A                ORL     A,R2
002287 FE                MOV     R6,A
002288 ED                MOV     A,R5
002289 49                ORL     A,R1
00228A FD                MOV     R5,A
00228B EC                MOV     A,R4
00228C 48                ORL     A,R0
00228D FC                MOV     R4,A
00228E C004              PUSH    AR4
002290 C005              PUSH    AR5
002292 C006              PUSH    AR6
002294 C007              PUSH    AR7
002296 A3                INC     DPTR
002297 E0                MOVX    A,@DPTR
002298 FF                MOV     R7,A
002299 E4                CLR     A
00229A FC                MOV     R4,A
00229B FD                MOV     R5,A
00229C FE                MOV     R6,A
00229D 7818              MOV     R0,#018H
00229F 12031F            LCALL   ?C?LSHL
0022A2 D003              POP     AR3
0022A4 D002              POP     AR2
0022A6 D001              POP     AR1
0022A8 D000              POP     AR0
0022AA EF                MOV     A,R7
0022AB 4B                ORL     A,R3
0022AC FF                MOV     R7,A
0022AD EE                MOV     A,R6
0022AE 4A                ORL     A,R2
0022AF FE                MOV     R6,A
0022B0 ED                MOV     A,R5
0022B1 49                ORL     A,R1
0022B2 FD                MOV     R5,A
0022B3 EC                MOV     A,R4
0022B4 48                ORL     A,R0
0022B5 FC                MOV     R4,A
0022B6 904D14            MOV     DPTR,#YC_UtilTimer+039H
0022B9 120332            LCALL   ?C?LSTXDATA
   98: 	for(i = 0; i < YC_UTIL_TIMER_NUM; ++i){
0022BC E4                CLR     A
0022BD F51F              MOV     i,A
0022BF         ?C0014?YC_SYS:
   99: 		if((YC_UtilTimer.timer_flages >> i) & 1){
0022BF AF1F              MOV     R7,i
0022C1 904CDB            MOV     DPTR,#YC_UtilTimer
0022C4 E0                MOVX    A,@DPTR
0022C5 FE                MOV     R6,A
0022C6 A807              MOV     R0,AR7
0022C8 08                INC     R0
0022C9 8002              SJMP    ?C0030?YC_SYS
0022CB         ?C0029?YC_SYS:
0022CB C3                CLR     C
0022CC 13                RRC     A
0022CD         ?C0030?YC_SYS:
0022CD D8FC              DJNZ    R0,?C0029?YC_SYS
0022CF 20E002            JB      ACC.0,$ + 5H
0022D2 6176              AJMP    ?C0016?YC_SYS
  100: 			if((YC_UtilTimer.timer_end[i] < YC_UtilTimer.last_timer) || 
0022D4 E51F              MOV     A,i
0022D6 25E0              ADD     A,ACC
0022D8 25E0              ADD     A,ACC
0022DA 24F4              ADD     A,#LOW YC_UtilTimer+019H
0022DC F582              MOV     DPL,A
0022DE E4                CLR     A
0022DF 344C              ADDC    A,#HIGH YC_UtilTimer+019H
0022E1 F583              MOV     DPH,A
0022E3 E0                MOVX    A,@DPTR
0022E4 FC                MOV     R4,A
0022E5 A3                INC     DPTR
0022E6 E0                MOVX    A,@DPTR
0022E7 FD                MOV     R5,A
0022E8 A3                INC     DPTR
0022E9 E0                MOVX    A,@DPTR
0022EA FE                MOV     R6,A
0022EB A3                INC     DPTR
0022EC E0                MOVX    A,@DPTR
0022ED FF                MOV     R7,A
0022EE 904D14            MOV     DPTR,#YC_UtilTimer+039H
0022F1 E0                MOVX    A,@DPTR
0022F2 F8                MOV     R0,A
0022F3 A3                INC     DPTR
0022F4 E0                MOVX    A,@DPTR
0022F5 F9                MOV     R1,A
0022F6 A3                INC     DPTR
0022F7 E0                MOVX    A,@DPTR
0022F8 FA                MOV     R2,A
0022F9 A3                INC     DPTR
0022FA E0                MOVX    A,@DPTR
0022FB FB                MOV     R3,A
0022FC D3                SETB    C
0022FD 1202FB            LCALL   ?C?ULCMP
002300 503E              JNC     ?C0019?YC_SYS
002302 E51F              MOV     A,i
002304 25E0              ADD     A,ACC
002306 25E0              ADD     A,ACC
002308 24F4              ADD     A,#LOW YC_UtilTimer+019H
00230A F582              MOV     DPL,A
00230C E4                CLR     A
00230D 344C              ADDC    A,#HIGH YC_UtilTimer+019H
00230F F583              MOV     DPH,A
002311 E0                MOVX    A,@DPTR
002312 FC                MOV     R4,A
002313 A3                INC     DPTR
002314 E0                MOVX    A,@DPTR
002315 FD                MOV     R5,A
002316 A3                INC     DPTR
002317 E0                MOVX    A,@DPTR
002318 FE                MOV     R6,A
002319 A3                INC     DPTR
00231A E0                MOVX    A,@DPTR
00231B FF                MOV     R7,A
00231C 904D14            MOV     DPTR,#YC_UtilTimer+039H
00231F E0                MOVX    A,@DPTR
002320 F8                MOV     R0,A
002321 A3                INC     DPTR
002322 E0                MOVX    A,@DPTR
002323 A3                INC     DPTR
002324 E0                MOVX    A,@DPTR
002325 A3                INC     DPTR
002326 E0                MOVX    A,@DPTR
002327 C3                CLR     C
002328 EF                MOV     A,R7
002329 9B                SUBB    A,R3
00232A FF                MOV     R7,A
00232B EE                MOV     A,R6
00232C 9A                SUBB    A,R2
00232D FE                MOV     R6,A
00232E ED                MOV     A,R5
00232F 99                SUBB    A,R1
002330 FD                MOV     R5,A
002331 EC                MOV     A,R4
002332 98                SUBB    A,R0
002333 FC                MOV     R4,A
002334 E4                CLR     A
002335 FB                MOV     R3,A
002336 7A10              MOV     R2,#010H
002338 F9                MOV     R1,A
002339 F8                MOV     R0,A
00233A C3                CLR     C
00233B 1202FB            LCALL   ?C?ULCMP
00233E 5036              JNC     ?C0016?YC_SYS
002340         ?C0019?YC_SYS:
  101: 			   (YC_UtilTimer.timer_end[i]  - YC_UtilTimer.last_timer > 0x1000)){
  102: 				YC_UtilTimer.timer_flages &=~( 1<< i); // clear the flag
002340 904CDB            MOV     DPTR,#YC_UtilTimer
002343 E0                MOVX    A,@DPTR
002344 FF                MOV     R7,A
002345 AE1F              MOV     R6,i
002347 7401              MOV     A,#01H
002349 A806              MOV     R0,AR6
00234B 08                INC     R0
00234C 8002              SJMP    ?C0032?YC_SYS
00234E         ?C0031?YC_SYS:
00234E C3                CLR     C
00234F 33                RLC     A
002350         ?C0032?YC_SYS:
002350 D8FC              DJNZ    R0,?C0031?YC_SYS
002352 F4                CPL     A
002353 5F                ANL     A,R7
002354 904CDB            MOV     DPTR,#YC_UtilTimer
002357 F0                MOVX    @DPTR,A
  103: 				YC_UtilTimer.callback[i](i);			
002358 E51F              MOV     A,i
00235A 75F003            MOV     B,#03H
00235D A4                MUL     AB
00235E 24DC              ADD     A,#LOW YC_UtilTimer+01H
002360 F582              MOV     DPL,A
002362 E4                CLR     A
002363 344C              ADDC    A,#HIGH YC_UtilTimer+01H
002365 F583              MOV     DPH,A
002367 E0                MOVX    A,@DPTR
002368 A3                INC     DPTR
002369 E0                MOVX    A,@DPTR
00236A FA                MOV     R2,A
00236B A3                INC     DPTR
00236C E0                MOVX    A,@DPTR
00236D F582              MOV     DPL,A
00236F 8A83              MOV     DPH,R2
002371 AF1F              MOV     R7,i
002373 1203C6            LCALL   ?C?ICALL2
  104: 			}
  105: 		}
  106: 	}
002376         ?C0016?YC_SYS:
002376 051F              INC     i
002378 E51F              MOV     A,i
00237A C3                CLR     C
00237B 9408              SUBB    A,#08H
00237D 5002              JNC     $ + 4H
00237F 41BF              AJMP    ?C0014?YC_SYS
  107: #endif
  108: 	return;
  109: }
002381 22                RET     
----- FUNCTION YC_UtilTimerProcess (END) -------


----- FUNCTION _YC_UARTSendData (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  351: void YC_UARTSendData(u8_t* pbuff, u16_t len)
  352: {
002382 904DAE            MOV     DPTR,#pbuff
002385 EB                MOV     A,R3
002386 F0                MOVX    @DPTR,A
002387 A3                INC     DPTR
002388 EA                MOV     A,R2
002389 F0                MOVX    @DPTR,A
00238A A3                INC     DPTR
00238B E9                MOV     A,R1
00238C F0                MOVX    @DPTR,A
00238D A3                INC     DPTR
00238E EC                MOV     A,R4
00238F F0                MOVX    @DPTR,A
002390 A3                INC     DPTR
002391 ED                MOV     A,R5
002392 F0                MOVX    @DPTR,A
  353: 	int i;
  354: 	u8_t *twptr = (u8_t *)ESWAP(REG_UART_TX_PTR_W);
002393 90805E            MOV     DPTR,#0805EH
002396 A3                INC     DPTR
002397 E0                MOVX    A,@DPTR
002398 FC                MOV     R4,A
002399 90805E            MOV     DPTR,#0805EH
00239C E0                MOVX    A,@DPTR
00239D FF                MOV     R7,A
00239E EC                MOV     A,R4
00239F FE                MOV     R6,A
0023A0 EF                MOV     A,R7
0023A1 AA06              MOV     R2,AR6
0023A3 F9                MOV     R1,A
0023A4 904DB5            MOV     DPTR,#twptr
0023A7 E4                CLR     A
0023A8 F0                MOVX    @DPTR,A
0023A9 A3                INC     DPTR
0023AA EA                MOV     A,R2
0023AB F0                MOVX    @DPTR,A
0023AC A3                INC     DPTR
0023AD E9                MOV     A,R1
0023AE F0                MOVX    @DPTR,A
  355: 
  356: 	for(i=0;i<len;i++)
0023AF E4                CLR     A
0023B0 904DB3            MOV     DPTR,#i
0023B3 F0                MOVX    @DPTR,A
0023B4 A3                INC     DPTR
0023B5 F0                MOVX    @DPTR,A
0023B6         ?C0002?YC_PERIPHERAL:
0023B6 904DB1            MOV     DPTR,#len
0023B9 E0                MOVX    A,@DPTR
0023BA FE                MOV     R6,A
0023BB A3                INC     DPTR
0023BC E0                MOVX    A,@DPTR
0023BD FF                MOV     R7,A
0023BE C3                CLR     C
0023BF 904DB4            MOV     DPTR,#i+01H
0023C2 E0                MOVX    A,@DPTR
0023C3 9F                SUBB    A,R7
0023C4 904DB3            MOV     DPTR,#i
0023C7 E0                MOVX    A,@DPTR
0023C8 9E                SUBB    A,R6
0023C9 4002              JC      $ + 4H
0023CB 8162              AJMP    ?C0003?YC_PERIPHERAL
  357: 	{
  358: 		xmemcpy(twptr++, pbuff++, 1);
0023CD 904DB5            MOV     DPTR,#twptr
0023D0 E0                MOVX    A,@DPTR
0023D1 A3                INC     DPTR
0023D2 E4                CLR     A
0023D3 75F001            MOV     B,#01H
0023D6 1201C8            LCALL   ?C?ILDIX
0023D9 FE                MOV     R6,A
0023DA AFF0              MOV     R7,B
0023DC 904DAE            MOV     DPTR,#pbuff
0023DF E0                MOVX    A,@DPTR
0023E0 FB                MOV     R3,A
0023E1 A3                INC     DPTR
0023E2 E4                CLR     A
0023E3 75F001            MOV     B,#01H
0023E6 1201C8            LCALL   ?C?ILDIX
0023E9 A9F0              MOV     R1,B
0023EB FA                MOV     R2,A
0023EC 751C01            MOV     ?_xmemcpy?BYTE+05H,#01H
0023EF 122A1E            LCALL   _xmemcpy
  359: 
  360: 		if(((short)twptr-1)==ESWAP(REG_UART_TX_ADDR_E))	//twptr reach the end of buffer
0023F2 90805C            MOV     DPTR,#0805CH
0023F5 A3                INC     DPTR
0023F6 E0                MOVX    A,@DPTR
0023F7 FC                MOV     R4,A
0023F8 90805C            MOV     DPTR,#0805CH
0023FB E0                MOVX    A,@DPTR
0023FC FF                MOV     R7,A
0023FD EC                MOV     A,R4
0023FE FE                MOV     R6,A
0023FF EF                MOV     A,R7
002400 904DB5            MOV     DPTR,#twptr
002403 E0                MOVX    A,@DPTR
002404 A3                INC     DPTR
002405 E0                MOVX    A,@DPTR
002406 FA                MOV     R2,A
002407 A3                INC     DPTR
002408 E0                MOVX    A,@DPTR
002409 24FF              ADD     A,#0FFH
00240B FD                MOV     R5,A
00240C EA                MOV     A,R2
00240D 34FF              ADDC    A,#0FFH
00240F FC                MOV     R4,A
002410 EF                MOV     A,R7
002411 6D                XRL     A,R5
002412 7002              JNZ     ?C0022?YC_PERIPHERAL
002414 EE                MOV     A,R6
002415 6C                XRL     A,R4
002416         ?C0022?YC_PERIPHERAL:
002416 703A              JNZ     ?C0004?YC_PERIPHERAL
  361: 		{
  362: 			REG_UART_TX_PTR_W = REG_UART_TX_ADDR_E;
002418 90805C            MOV     DPTR,#0805CH
00241B E0                MOVX    A,@DPTR
00241C FF                MOV     R7,A
00241D A3                INC     DPTR
00241E E0                MOVX    A,@DPTR
00241F A3                INC     DPTR
002420 CF                XCH     A,R7
002421 F0                MOVX    @DPTR,A
002422 A3                INC     DPTR
002423 EF                MOV     A,R7
002424 F0                MOVX    @DPTR,A
002425         ?C0006?YC_PERIPHERAL:
  363: 			while(ESWAP(REG_UART_TX_ITEMS));
002425 90810E            MOV     DPTR,#0810EH
002428 A3                INC     DPTR
002429 E0                MOVX    A,@DPTR
00242A FC                MOV     R4,A
00242B 90810E            MOV     DPTR,#0810EH
00242E E0                MOVX    A,@DPTR
00242F FF                MOV     R7,A
002430 EC                MOV     A,R4
002431 FE                MOV     R6,A
002432 EF                MOV     A,R7
002433 4E                ORL     A,R6
002434 70EF              JNZ     ?C0006?YC_PERIPHERAL
002436         ?C0007?YC_PERIPHERAL:
  364: 			
  365: 			twptr = (u8_t *)ESWAP(REG_UART_TX_ADDR_S);	//reset twptr
002436 90805A            MOV     DPTR,#0805AH
002439 A3                INC     DPTR
00243A E0                MOVX    A,@DPTR
00243B FC                MOV     R4,A
00243C 90805A            MOV     DPTR,#0805AH
00243F E0                MOVX    A,@DPTR
002440 FF                MOV     R7,A
002441 EC                MOV     A,R4
002442 FE                MOV     R6,A
002443 EF                MOV     A,R7
002444 AA06              MOV     R2,AR6
002446 F9                MOV     R1,A
002447 904DB5            MOV     DPTR,#twptr
00244A E4                CLR     A
00244B F0                MOVX    @DPTR,A
00244C A3                INC     DPTR
00244D EA                MOV     A,R2
00244E F0                MOVX    @DPTR,A
00244F A3                INC     DPTR
002450 E9                MOV     A,R1
002451 F0                MOVX    @DPTR,A
  366: 		}	
  367: 	}	
002452         ?C0004?YC_PERIPHERAL:
002452 904DB4            MOV     DPTR,#i+01H
002455 E0                MOVX    A,@DPTR
002456 04                INC     A
002457 F0                MOVX    @DPTR,A
002458 7006              JNZ     ?C0023?YC_PERIPHERAL
00245A 904DB3            MOV     DPTR,#i
00245D E0                MOVX    A,@DPTR
00245E 04                INC     A
00245F F0                MOVX    @DPTR,A
002460         ?C0023?YC_PERIPHERAL:
002460 61B6              AJMP    ?C0002?YC_PERIPHERAL
002462         ?C0003?YC_PERIPHERAL:
  368: 
  369: 	REG_UART_TX_PTR_W = ESWAP((short)twptr);
002462 904DB5            MOV     DPTR,#twptr
002465 E0                MOVX    A,@DPTR
002466 A3                INC     DPTR
002467 E0                MOVX    A,@DPTR
002468 FA                MOV     R2,A
002469 A3                INC     DPTR
00246A E0                MOVX    A,@DPTR
00246B AC02              MOV     R4,AR2
00246D FD                MOV     R5,A
00246E EC                MOV     A,R4
00246F FF                MOV     R7,A
002470 33                RLC     A
002471 95E0              SUBB    A,ACC
002473 AB07              MOV     R3,AR7
002475 ED                MOV     A,R5
002476 FF                MOV     R7,A
002477 EB                MOV     A,R3
002478 90805E            MOV     DPTR,#0805EH
00247B CF                XCH     A,R7
00247C F0                MOVX    @DPTR,A
00247D A3                INC     DPTR
00247E EF                MOV     A,R7
00247F F0                MOVX    @DPTR,A
  370: 	//YC_UARTWaitSendData();
  371: }
002480 22                RET     
----- FUNCTION _YC_UARTSendData (END) -------


----- FUNCTION _CS_CommTo1186_SendCmd (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  421: void CS_CommTo1186_SendCmd(u8_t cmd_code ,u8_t * databuf)
  422: {
002481 904D82            MOV     DPTR,#cmd_code
002484 EF                MOV     A,R7
002485 F0                MOVX    @DPTR,A
002486 A3                INC     DPTR
002487 EB                MOV     A,R3
002488 F0                MOVX    @DPTR,A
002489 A3                INC     DPTR
00248A EA                MOV     A,R2
00248B F0                MOVX    @DPTR,A
00248C A3                INC     DPTR
00248D E9                MOV     A,R1
00248E F0                MOVX    @DPTR,A
  423: 	u8_t buf[10] = {0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,0x00,0x00};
  424:        u8_t len;
00248F 7886              MOV     R0,#LOW buf
002491 7C4D              MOV     R4,#HIGH buf
002493 7D01              MOV     R5,#01H
002495 7BFF              MOV     R3,#0FFH
002497 7A04              MOV     R2,#HIGH _?ix1000
002499 79B8              MOV     R1,#LOW _?ix1000
00249B 7E00              MOV     R6,#00H
00249D 7F0A              MOV     R7,#0AH
00249F 1200D3            LCALL   ?C?COPY
  425: 
  426: 	 buf[0] = 0xc5;							//包头数据
0024A2 904D86            MOV     DPTR,#buf
0024A5 74C5              MOV     A,#0C5H
0024A7 F0                MOVX    @DPTR,A
  427: 	switch(cmd_code)
0024A8 904D82            MOV     DPTR,#cmd_code
0024AB E0                MOVX    A,@DPTR
0024AC 12036F            LCALL   ?C?CCASE
0024AF 24E8              DW      ?C0069?CS_COMMTO1186
0024B1 80                DB      080H
0024B2 24FE              DW      ?C0070?CS_COMMTO1186
0024B4 81                DB      081H
0024B5 2514              DW      ?C0071?CS_COMMTO1186
0024B7 82                DB      082H
0024B8 252A              DW      ?C0072?CS_COMMTO1186
0024BA 83                DB      083H
0024BB 2567              DW      ?C0073?CS_COMMTO1186
0024BD 84                DB      084H
0024BE 25AE              DW      ?C0074?CS_COMMTO1186
0024C0 85                DB      085H
0024C1 25C4              DW      ?C0075?CS_COMMTO1186
0024C3 A0                DB      0A0H
0024C4 2615              DW      ?C0076?CS_COMMTO1186
0024C6 A1                DB      0A1H
0024C7 2670              DW      ?C0077?CS_COMMTO1186
0024C9 A2                DB      0A2H
0024CA 26C1              DW      ?C0078?CS_COMMTO1186
0024CC A3                DB      0A3H
0024CD 24D7              DW      ?C0068?CS_COMMTO1186
0024CF C5                DB      0C5H
0024D0 2708              DW      ?C0079?CS_COMMTO1186
0024D2 E0                DB      0E0H
0024D3 0000              DW      00H
0024D5 276B              DW      ?C0080?CS_COMMTO1186
  428: 		{
  429: 		case CS_CommTo1186_Reset:			//0
0024D7         ?C0068?CS_COMMTO1186:
  430: 			buf[0] = 0x00;
0024D7 E4                CLR     A
0024D8 904D86            MOV     DPTR,#buf
0024DB F0                MOVX    @DPTR,A
  431: 			buf[1] = 0x00;
0024DC A3                INC     DPTR
0024DD F0                MOVX    @DPTR,A
  432: 			buf[2] = 0x00;
0024DE A3                INC     DPTR
0024DF F0                MOVX    @DPTR,A
  433: 			len  =  3;
0024E0 904D90            MOV     DPTR,#len
0024E3 7403              MOV     A,#03H
0024E5 F0                MOVX    @DPTR,A
  434: 			break;
0024E6 E176              AJMP    ?C0067?CS_COMMTO1186
  435: 		case CS_CommTo1186_ReadAd:		 	// 1 
0024E8         ?C0069?CS_COMMTO1186:
  436: 			buf[1] = 0x01;
0024E8 904D87            MOV     DPTR,#buf+01H
0024EB 7401              MOV     A,#01H
0024ED F0                MOVX    @DPTR,A
  437: 			buf[2] = 0x80;
0024EE A3                INC     DPTR
0024EF 7480              MOV     A,#080H
0024F1 F0                MOVX    @DPTR,A
  438: 			buf[3] = 0x44;
0024F2 A3                INC     DPTR
0024F3 7444              MOV     A,#044H
0024F5 F0                MOVX    @DPTR,A
  439: 			len  =  4;
0024F6 904D90            MOV     DPTR,#len
0024F9 7404              MOV     A,#04H
0024FB F0                MOVX    @DPTR,A
  440: 			break;			
0024FC E176              AJMP    ?C0067?CS_COMMTO1186
  441: 		case CS_CommTo1186_ReadVersion:		 // 2 
0024FE         ?C0070?CS_COMMTO1186:
  442: 			buf[1] = 0x01;
0024FE 904D87            MOV     DPTR,#buf+01H
002501 7401              MOV     A,#01H
002503 F0                MOVX    @DPTR,A
  443: 			buf[2] = 0x81;
002504 A3                INC     DPTR
002505 7481              MOV     A,#081H
002507 F0                MOVX    @DPTR,A
  444: 			buf[3] = 0x45;
002508 A3                INC     DPTR
002509 7445              MOV     A,#045H
00250B F0                MOVX    @DPTR,A
  445: 			len  =  4;
00250C 904D90            MOV     DPTR,#len
00250F 7404              MOV     A,#04H
002511 F0                MOVX    @DPTR,A
  446: 			break;
002512 E176              AJMP    ?C0067?CS_COMMTO1186
  447: 		case CS_CommTo1186_ReadTime:		 // 3 
002514         ?C0071?CS_COMMTO1186:
  448: 			buf[1] = 0x01;
002514 904D87            MOV     DPTR,#buf+01H
002517 7401              MOV     A,#01H
002519 F0                MOVX    @DPTR,A
  449: 			buf[2] = 0x82;
00251A A3                INC     DPTR
00251B 7482              MOV     A,#082H
00251D F0                MOVX    @DPTR,A
  450: 			buf[3] = 0x46;
00251E A3                INC     DPTR
00251F 7446              MOV     A,#046H
002521 F0                MOVX    @DPTR,A
  451: 			len  =  4;
002522 904D90            MOV     DPTR,#len
002525 7404              MOV     A,#04H
002527 F0                MOVX    @DPTR,A
  452: 			break;
002528 E176              AJMP    ?C0067?CS_COMMTO1186
  453: 		case CS_CommTo1186_ReadRam:		 // 4 
00252A         ?C0072?CS_COMMTO1186:
  454: 			buf[1] = 0x03;
00252A 904D87            MOV     DPTR,#buf+01H
00252D 7403              MOV     A,#03H
00252F F0                MOVX    @DPTR,A
  455: 			buf[2] = 0x83;
002530 A3                INC     DPTR
002531 7483              MOV     A,#083H
002533 F0                MOVX    @DPTR,A
  456: 			buf[3] = databuf[1];
002534 904D83            MOV     DPTR,#databuf
002537 E0                MOVX    A,@DPTR
002538 FB                MOV     R3,A
002539 A3                INC     DPTR
00253A E0                MOVX    A,@DPTR
00253B FA                MOV     R2,A
00253C A3                INC     DPTR
00253D E0                MOVX    A,@DPTR
00253E F9                MOV     R1,A
00253F 900001            MOV     DPTR,#01H
002542 120112            LCALL   ?C?CLDOPTR
002545 904D89            MOV     DPTR,#buf+03H
002548 F0                MOVX    @DPTR,A
  457: 			buf[4] = databuf[0];	 
002549 1200F9            LCALL   ?C?CLDPTR
00254C 904D8A            MOV     DPTR,#buf+04H
00254F F0                MOVX    @DPTR,A
  458: 			buf[5] =  CS_CommTo1186_Xor(buf,5);
002550 7B01              MOV     R3,#01H
002552 7A4D              MOV     R2,#HIGH buf
002554 7986              MOV     R1,#LOW buf
002556 7D05              MOV     R5,#05H
002558 F185              ACALL   _CS_CommTo1186_Xor
00255A 904D8B            MOV     DPTR,#buf+05H
00255D EF                MOV     A,R7
00255E F0                MOVX    @DPTR,A
  459: 			len  =  6;
00255F 904D90            MOV     DPTR,#len
002562 7406              MOV     A,#06H
002564 F0                MOVX    @DPTR,A
  460: 			break;
002565 E176              AJMP    ?C0067?CS_COMMTO1186
  461: 		case CS_CommTo1186_ReadOtp:		 // 5 
002567         ?C0073?CS_COMMTO1186:
  462: 			buf[1] = 0x04;
002567 904D87            MOV     DPTR,#buf+01H
00256A 7404              MOV     A,#04H
00256C F0                MOVX    @DPTR,A
  463: 			buf[2] = 0x84;
00256D A3                INC     DPTR
00256E 7484              MOV     A,#084H
002570 F0                MOVX    @DPTR,A
  464: 			buf[3] = databuf[2];
002571 904D83            MOV     DPTR,#databuf
002574 E0                MOVX    A,@DPTR
002575 FB                MOV     R3,A
002576 A3                INC     DPTR
002577 E0                MOVX    A,@DPTR
002578 FA                MOV     R2,A
002579 A3                INC     DPTR
00257A E0                MOVX    A,@DPTR
00257B F9                MOV     R1,A
00257C 900002            MOV     DPTR,#02H
00257F 120112            LCALL   ?C?CLDOPTR
002582 904D89            MOV     DPTR,#buf+03H
002585 F0                MOVX    @DPTR,A
  465: 			buf[4] = databuf[1];	
002586 900001            MOV     DPTR,#01H
002589 120112            LCALL   ?C?CLDOPTR
00258C 904D8A            MOV     DPTR,#buf+04H
00258F F0                MOVX    @DPTR,A
  466: 			buf[5] = databuf[0]; 
002590 1200F9            LCALL   ?C?CLDPTR
002593 904D8B            MOV     DPTR,#buf+05H
002596 F0                MOVX    @DPTR,A
  467: 			buf[6] = CS_CommTo1186_Xor(buf,6);
002597 7B01              MOV     R3,#01H
002599 7A4D              MOV     R2,#HIGH buf
00259B 7986              MOV     R1,#LOW buf
00259D 7D06              MOV     R5,#06H
00259F F185              ACALL   _CS_CommTo1186_Xor
0025A1 904D8C            MOV     DPTR,#buf+06H
0025A4 EF                MOV     A,R7
0025A5 F0                MOVX    @DPTR,A
  468: 			len  =  7;
0025A6 904D90            MOV     DPTR,#len
0025A9 7407              MOV     A,#07H
0025AB F0                MOVX    @DPTR,A
  469: 			break;
0025AC E176              AJMP    ?C0067?CS_COMMTO1186
  470: 		case CS_CommTo1186_ReadAdZero:		 // 6 
0025AE         ?C0074?CS_COMMTO1186:
  471: 			buf[1] = 0x01;
0025AE 904D87            MOV     DPTR,#buf+01H
0025B1 7401              MOV     A,#01H
0025B3 F0                MOVX    @DPTR,A
  472: 			buf[2] = 0x85;
0025B4 A3                INC     DPTR
0025B5 7485              MOV     A,#085H
0025B7 F0                MOVX    @DPTR,A
  473: 			buf[3] = 0x41;
0025B8 A3                INC     DPTR
0025B9 7441              MOV     A,#041H
0025BB F0                MOVX    @DPTR,A
  474: 			len  =  4;
0025BC 904D90            MOV     DPTR,#len
0025BF 7404              MOV     A,#04H
0025C1 F0                MOVX    @DPTR,A
  475: 			break;
0025C2 E176              AJMP    ?C0067?CS_COMMTO1186
  476: 		case CS_CommTo1186_SetSleepMode:	 // 7 
0025C4         ?C0075?CS_COMMTO1186:
  477: 			buf[1] = 0x05;
0025C4 904D87            MOV     DPTR,#buf+01H
0025C7 7405              MOV     A,#05H
0025C9 F0                MOVX    @DPTR,A
  478: 			buf[2] = 0xA0;
0025CA A3                INC     DPTR
0025CB 74A0              MOV     A,#0A0H
0025CD F0                MOVX    @DPTR,A
  479: 			buf[3] = databuf[3];
0025CE 904D83            MOV     DPTR,#databuf
0025D1 E0                MOVX    A,@DPTR
0025D2 FB                MOV     R3,A
0025D3 A3                INC     DPTR
0025D4 E0                MOVX    A,@DPTR
0025D5 FA                MOV     R2,A
0025D6 A3                INC     DPTR
0025D7 E0                MOVX    A,@DPTR
0025D8 F9                MOV     R1,A
0025D9 900003            MOV     DPTR,#03H
0025DC 120112            LCALL   ?C?CLDOPTR
0025DF 904D89            MOV     DPTR,#buf+03H
0025E2 F0                MOVX    @DPTR,A
  480: 			buf[4] = databuf[2];	
0025E3 900002            MOV     DPTR,#02H
0025E6 120112            LCALL   ?C?CLDOPTR
0025E9 904D8A            MOV     DPTR,#buf+04H
0025EC F0                MOVX    @DPTR,A
  481: 			buf[5] = databuf[1];
0025ED 900001            MOV     DPTR,#01H
0025F0 120112            LCALL   ?C?CLDOPTR
0025F3 904D8B            MOV     DPTR,#buf+05H
0025F6 F0                MOVX    @DPTR,A
  482: 			buf[6] = databuf[0]; 
0025F7 1200F9            LCALL   ?C?CLDPTR
0025FA 904D8C            MOV     DPTR,#buf+06H
0025FD F0                MOVX    @DPTR,A
  483: 			buf[7] = CS_CommTo1186_Xor(buf,7);
0025FE 7B01              MOV     R3,#01H
002600 7A4D              MOV     R2,#HIGH buf
002602 7986              MOV     R1,#LOW buf
002604 7D07              MOV     R5,#07H
002606 F185              ACALL   _CS_CommTo1186_Xor
002608 904D8D            MOV     DPTR,#buf+07H
00260B EF                MOV     A,R7
00260C F0                MOVX    @DPTR,A
  484: 			len  =  8;
00260D 904D90            MOV     DPTR,#len
002610 7408              MOV     A,#08H
002612 F0                MOVX    @DPTR,A
  485: 			break;
002613 E176              AJMP    ?C0067?CS_COMMTO1186
  486: 		case CS_CommTo1186_SetOpenWeight:	 // 8 
002615         ?C0076?CS_COMMTO1186:
  487: 			buf[1] = 0x06;
002615 904D87            MOV     DPTR,#buf+01H
002618 7406              MOV     A,#06H
00261A F0                MOVX    @DPTR,A
  488: 			buf[2] = 0xA1;
00261B A3                INC     DPTR
00261C 74A1              MOV     A,#0A1H
00261E F0                MOVX    @DPTR,A
  489: 			buf[3] = databuf[4];
00261F 904D83            MOV     DPTR,#databuf
002622 E0                MOVX    A,@DPTR
002623 FB                MOV     R3,A
002624 A3                INC     DPTR
002625 E0                MOVX    A,@DPTR
002626 FA                MOV     R2,A
002627 A3                INC     DPTR
002628 E0                MOVX    A,@DPTR
002629 F9                MOV     R1,A
00262A 900004            MOV     DPTR,#04H
00262D 120112            LCALL   ?C?CLDOPTR
002630 904D89            MOV     DPTR,#buf+03H
002633 F0                MOVX    @DPTR,A
  490: 			buf[4] = databuf[3];	
002634 900003            MOV     DPTR,#03H
002637 120112            LCALL   ?C?CLDOPTR
00263A 904D8A            MOV     DPTR,#buf+04H
00263D F0                MOVX    @DPTR,A
  491: 			buf[5] = databuf[2];
00263E 900002            MOV     DPTR,#02H
002641 120112            LCALL   ?C?CLDOPTR
002644 904D8B            MOV     DPTR,#buf+05H
002647 F0                MOVX    @DPTR,A
  492: 			buf[6] = databuf[1];
002648 900001            MOV     DPTR,#01H
00264B 120112            LCALL   ?C?CLDOPTR
00264E 904D8C            MOV     DPTR,#buf+06H
002651 F0                MOVX    @DPTR,A
  493: 			buf[7] = databuf[0]; 
002652 1200F9            LCALL   ?C?CLDPTR
002655 904D8D            MOV     DPTR,#buf+07H
002658 F0                MOVX    @DPTR,A
  494: 			buf[8] = CS_CommTo1186_Xor(buf,8);
002659 7B01              MOV     R3,#01H
00265B 7A4D              MOV     R2,#HIGH buf
00265D 7986              MOV     R1,#LOW buf
00265F 7D08              MOV     R5,#08H
002661 F185              ACALL   _CS_CommTo1186_Xor
002663 904D8E            MOV     DPTR,#buf+08H
002666 EF                MOV     A,R7
002667 F0                MOVX    @DPTR,A
  495: 			len  =  9;
002668 904D90            MOV     DPTR,#len
00266B 7409              MOV     A,#09H
00266D F0                MOVX    @DPTR,A
  496: 			break;
00266E E176              AJMP    ?C0067?CS_COMMTO1186
  497: 		case CS_CommTo1186_SetTime:		 // 9 
002670         ?C0077?CS_COMMTO1186:
  498: 			buf[1] = 0x05;
002670 904D87            MOV     DPTR,#buf+01H
002673 7405              MOV     A,#05H
002675 F0                MOVX    @DPTR,A
  499: 			buf[2] = 0xA2;
002676 A3                INC     DPTR
002677 74A2              MOV     A,#0A2H
002679 F0                MOVX    @DPTR,A
  500: 			buf[3] = databuf[3];
00267A 904D83            MOV     DPTR,#databuf
00267D E0                MOVX    A,@DPTR
00267E FB                MOV     R3,A
00267F A3                INC     DPTR
002680 E0                MOVX    A,@DPTR
002681 FA                MOV     R2,A
002682 A3                INC     DPTR
002683 E0                MOVX    A,@DPTR
002684 F9                MOV     R1,A
002685 900003            MOV     DPTR,#03H
002688 120112            LCALL   ?C?CLDOPTR
00268B 904D89            MOV     DPTR,#buf+03H
00268E F0                MOVX    @DPTR,A
  501: 			buf[4] = databuf[2];	
00268F 900002            MOV     DPTR,#02H
002692 120112            LCALL   ?C?CLDOPTR
002695 904D8A            MOV     DPTR,#buf+04H
002698 F0                MOVX    @DPTR,A
  502: 			buf[5] = databuf[1];
002699 900001            MOV     DPTR,#01H
00269C 120112            LCALL   ?C?CLDOPTR
00269F 904D8B            MOV     DPTR,#buf+05H
0026A2 F0                MOVX    @DPTR,A
  503: 			buf[6] = databuf[0]; 
0026A3 1200F9            LCALL   ?C?CLDPTR
0026A6 904D8C            MOV     DPTR,#buf+06H
0026A9 F0                MOVX    @DPTR,A
  504: 			buf[7] = CS_CommTo1186_Xor(buf,7);
0026AA 7B01              MOV     R3,#01H
0026AC 7A4D              MOV     R2,#HIGH buf
0026AE 7986              MOV     R1,#LOW buf
0026B0 7D07              MOV     R5,#07H
0026B2 F185              ACALL   _CS_CommTo1186_Xor
0026B4 904D8D            MOV     DPTR,#buf+07H
0026B7 EF                MOV     A,R7
0026B8 F0                MOVX    @DPTR,A
  505: 			len  =  8;	
0026B9 904D90            MOV     DPTR,#len
0026BC 7408              MOV     A,#08H
0026BE F0                MOVX    @DPTR,A
  506: 			break;
0026BF E176              AJMP    ?C0067?CS_COMMTO1186
  507: 		case CS_CommTo1186_SetRam:		 	// 10 
0026C1         ?C0078?CS_COMMTO1186:
  508: 			buf[1] = 0x04;
0026C1 904D87            MOV     DPTR,#buf+01H
0026C4 7404              MOV     A,#04H
0026C6 F0                MOVX    @DPTR,A
  509: 			buf[2] = 0xA3;
0026C7 A3                INC     DPTR
0026C8 74A3              MOV     A,#0A3H
0026CA F0                MOVX    @DPTR,A
  510: 			buf[3] = databuf[2];
0026CB 904D83            MOV     DPTR,#databuf
0026CE E0                MOVX    A,@DPTR
0026CF FB                MOV     R3,A
0026D0 A3                INC     DPTR
0026D1 E0                MOVX    A,@DPTR
0026D2 FA                MOV     R2,A
0026D3 A3                INC     DPTR
0026D4 E0                MOVX    A,@DPTR
0026D5 F9                MOV     R1,A
0026D6 900002            MOV     DPTR,#02H
0026D9 120112            LCALL   ?C?CLDOPTR
0026DC 904D89            MOV     DPTR,#buf+03H
0026DF F0                MOVX    @DPTR,A
  511: 			buf[4] = databuf[1];	
0026E0 900001            MOV     DPTR,#01H
0026E3 120112            LCALL   ?C?CLDOPTR
0026E6 904D8A            MOV     DPTR,#buf+04H
0026E9 F0                MOVX    @DPTR,A
  512: 			buf[5] = databuf[0]; 
0026EA 1200F9            LCALL   ?C?CLDPTR
0026ED 904D8B            MOV     DPTR,#buf+05H
0026F0 F0                MOVX    @DPTR,A
  513: 			buf[6] = CS_CommTo1186_Xor(buf,6);
0026F1 7B01              MOV     R3,#01H
0026F3 7A4D              MOV     R2,#HIGH buf
0026F5 7986              MOV     R1,#LOW buf
0026F7 7D06              MOV     R5,#06H
0026F9 F185              ACALL   _CS_CommTo1186_Xor
0026FB 904D8C            MOV     DPTR,#buf+06H
0026FE EF                MOV     A,R7
0026FF F0                MOVX    @DPTR,A
  514: 			len  =  7;			
002700 904D90            MOV     DPTR,#len
002703 7407              MOV     A,#07H
002705 F0                MOVX    @DPTR,A
  515: 			break;
002706 806E              SJMP    ?C0067?CS_COMMTO1186
  516: 		case CS_CommTo1186_LcdDisplay:		// 11 
002708         ?C0079?CS_COMMTO1186:
  517: 			buf[1] = 0x07;
002708 904D87            MOV     DPTR,#buf+01H
00270B 7407              MOV     A,#07H
00270D F0                MOVX    @DPTR,A
  518: 			buf[2] = 0xe0;
00270E A3                INC     DPTR
00270F 74E0              MOV     A,#0E0H
002711 F0                MOVX    @DPTR,A
  519: 			buf[3] = databuf[5];
002712 904D83            MOV     DPTR,#databuf
002715 E0                MOVX    A,@DPTR
002716 FB                MOV     R3,A
002717 A3                INC     DPTR
002718 E0                MOVX    A,@DPTR
002719 FA                MOV     R2,A
00271A A3                INC     DPTR
00271B E0                MOVX    A,@DPTR
00271C F9                MOV     R1,A
00271D 900005            MOV     DPTR,#05H
002720 120112            LCALL   ?C?CLDOPTR
002723 904D89            MOV     DPTR,#buf+03H
002726 F0                MOVX    @DPTR,A
  520: 			buf[4] = databuf[4];
002727 900004            MOV     DPTR,#04H
00272A 120112            LCALL   ?C?CLDOPTR
00272D 904D8A            MOV     DPTR,#buf+04H
002730 F0                MOVX    @DPTR,A
  521: 			buf[5] = databuf[3];
002731 900003            MOV     DPTR,#03H
002734 120112            LCALL   ?C?CLDOPTR
002737 904D8B            MOV     DPTR,#buf+05H
00273A F0                MOVX    @DPTR,A
  522: 			buf[6] = databuf[2];
00273B 900002            MOV     DPTR,#02H
00273E 120112            LCALL   ?C?CLDOPTR
002741 904D8C            MOV     DPTR,#buf+06H
002744 F0                MOVX    @DPTR,A
  523: 			buf[7] = databuf[1];
002745 900001            MOV     DPTR,#01H
002748 120112            LCALL   ?C?CLDOPTR
00274B 904D8D            MOV     DPTR,#buf+07H
00274E F0                MOVX    @DPTR,A
  524: 			buf[8] = databuf[0];		 
00274F 1200F9            LCALL   ?C?CLDPTR
002752 904D8E            MOV     DPTR,#buf+08H
002755 F0                MOVX    @DPTR,A
  525: 			buf[9] = CS_CommTo1186_Xor(buf,9);
002756 7B01              MOV     R3,#01H
002758 7A4D              MOV     R2,#HIGH buf
00275A 7986              MOV     R1,#LOW buf
00275C 7D09              MOV     R5,#09H
00275E F185              ACALL   _CS_CommTo1186_Xor
002760 904D8F            MOV     DPTR,#buf+09H
002763 EF                MOV     A,R7
002764 F0                MOVX    @DPTR,A
  526: 			len  =  10;
002765 A3                INC     DPTR
002766 740A              MOV     A,#0AH
002768 F0                MOVX    @DPTR,A
  527: 			break;
002769 800B              SJMP    ?C0067?CS_COMMTO1186
  528: 		default:		
00276B         ?C0080?CS_COMMTO1186:
  529: 			buf[1] = 0x00;
00276B E4                CLR     A
00276C 904D87            MOV     DPTR,#buf+01H
00276F F0                MOVX    @DPTR,A
  530: 			len   = 2;
002770 904D90            MOV     DPTR,#len
002773 7402              MOV     A,#02H
002775 F0                MOVX    @DPTR,A
  531: 			break;
  532: 		}
002776         ?C0067?CS_COMMTO1186:
  533: 	YC_UARTSendData(buf, len);
002776 7B01              MOV     R3,#01H
002778 7A4D              MOV     R2,#HIGH buf
00277A 7986              MOV     R1,#LOW buf
00277C 904D90            MOV     DPTR,#len
00277F E0                MOVX    A,@DPTR
002780 FD                MOV     R5,A
002781 7C00              MOV     R4,#00H
002783 6182              AJMP    _YC_UARTSendData
  534: }
----- FUNCTION _CS_CommTo1186_SendCmd (END) -------


----- FUNCTION _CS_CommTo1186_Xor (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  411: u8_t CS_CommTo1186_Xor(u8_t * buf,u8_t len)
  412: {
002785 904E4E            MOV     DPTR,#buf
002788 EB                MOV     A,R3
002789 F0                MOVX    @DPTR,A
00278A A3                INC     DPTR
00278B EA                MOV     A,R2
00278C F0                MOVX    @DPTR,A
00278D A3                INC     DPTR
00278E E9                MOV     A,R1
00278F F0                MOVX    @DPTR,A
;---- Variable 'len' assigned to Register 'R5' ----
  413: 	u8_t	i;
  414: 	for(i=0;i<len;i++)
;---- Variable 'i' assigned to Register 'R7' ----
002790 E4                CLR     A
002791 FF                MOV     R7,A
002792         ?C0063?CS_COMMTO1186:
002792 EF                MOV     A,R7
002793 C3                CLR     C
002794 9D                SUBB    A,R5
002795 5035              JNC     ?C0064?CS_COMMTO1186
  415: 		{
  416: 		*(buf+9) = *(buf+9) ^	*(buf+i);
002797 904E4E            MOV     DPTR,#buf
00279A E0                MOVX    A,@DPTR
00279B FB                MOV     R3,A
00279C A3                INC     DPTR
00279D E0                MOVX    A,@DPTR
00279E FA                MOV     R2,A
00279F A3                INC     DPTR
0027A0 E0                MOVX    A,@DPTR
0027A1 2409              ADD     A,#09H
0027A3 F9                MOV     R1,A
0027A4 E4                CLR     A
0027A5 3A                ADDC    A,R2
0027A6 FA                MOV     R2,A
0027A7 C002              PUSH    AR2
0027A9 C001              PUSH    AR1
0027AB 1200F9            LCALL   ?C?CLDPTR
0027AE FE                MOV     R6,A
0027AF 904E4E            MOV     DPTR,#buf
0027B2 E0                MOVX    A,@DPTR
0027B3 A3                INC     DPTR
0027B4 E0                MOVX    A,@DPTR
0027B5 FA                MOV     R2,A
0027B6 A3                INC     DPTR
0027B7 E0                MOVX    A,@DPTR
0027B8 F9                MOV     R1,A
0027B9 8F82              MOV     DPL,R7
0027BB 758300            MOV     DPH,#00H
0027BE 120112            LCALL   ?C?CLDOPTR
0027C1 6E                XRL     A,R6
0027C2 D001              POP     AR1
0027C4 D002              POP     AR2
0027C6 12013F            LCALL   ?C?CSTPTR
  417: 		}
0027C9 0F                INC     R7
0027CA 80C6              SJMP    ?C0063?CS_COMMTO1186
0027CC         ?C0064?CS_COMMTO1186:
  418: 	return *(buf+9);
0027CC 904E4E            MOV     DPTR,#buf
0027CF E0                MOVX    A,@DPTR
0027D0 FB                MOV     R3,A
0027D1 A3                INC     DPTR
0027D2 E0                MOVX    A,@DPTR
0027D3 FA                MOV     R2,A
0027D4 A3                INC     DPTR
0027D5 E0                MOVX    A,@DPTR
0027D6 F9                MOV     R1,A
0027D7 900009            MOV     DPTR,#09H
0027DA 120112            LCALL   ?C?CLDOPTR
0027DD FF                MOV     R7,A
  419: }
0027DE 22                RET     
----- FUNCTION _CS_CommTo1186_Xor (END) -------


----- FUNCTION _SPIFlashRead (BEGIN) -----
 FILE: 'spiflash.c'
   84: void SPIFlashRead(u8_t *buf, u32_t addr, u8_t len)
   85: {
0027DF 904DE8            MOV     DPTR,#addr
0027E2 120332            LCALL   ?C?LSTXDATA
;---- Variable 'buf' assigned to Register 'R1/R2/R3' ----
   86: 	REG_SPID_RXLEN = ESWAP(len);
   87: 	REG_SPID_TXLEN = ESWAP(4);
0027E5 904DEC            MOV     DPTR,#len
0027E8 E0                MOVX    A,@DPTR
0027E9 FD                MOV     R5,A
0027EA FE                MOV     R6,A
0027EB E4                CLR     A
0027EC 90808E            MOV     DPTR,#0808EH
0027EF EE                MOV     A,R6
0027F0 F0                MOVX    @DPTR,A
0027F1 A3                INC     DPTR
0027F2 E4                CLR     A
0027F3 F0                MOVX    @DPTR,A
   88: 	*SF_TX_BUF = SF_READ_DATA;
0027F4 908088            MOV     DPTR,#08088H
0027F7 7404              MOV     A,#04H
0027F9 F0                MOVX    @DPTR,A
0027FA A3                INC     DPTR
0027FB E4                CLR     A
0027FC F0                MOVX    @DPTR,A
   89: 	*(SF_TX_BUF+1) = (addr>>16);
0027FD 9001BC            MOV     DPTR,#01BCH
002800 7403              MOV     A,#03H
002802 F0                MOVX    @DPTR,A
   90: 	*(SF_TX_BUF+2) = (addr>>8);
002803 904DE8            MOV     DPTR,#addr
002806 E0                MOVX    A,@DPTR
002807 FC                MOV     R4,A
002808 A3                INC     DPTR
002809 E0                MOVX    A,@DPTR
00280A FD                MOV     R5,A
00280B A3                INC     DPTR
00280C E0                MOVX    A,@DPTR
00280D FE                MOV     R6,A
00280E A3                INC     DPTR
00280F E0                MOVX    A,@DPTR
002810 FF                MOV     R7,A
002811 7810              MOV     R0,#010H
002813 12030C            LCALL   ?C?ULSHR
002816 9001BD            MOV     DPTR,#01BDH
002819 EF                MOV     A,R7
00281A F0                MOVX    @DPTR,A
   91: 	*(SF_TX_BUF+3) = (addr&0xff);
00281B 904DE8            MOV     DPTR,#addr
00281E E0                MOVX    A,@DPTR
00281F FC                MOV     R4,A
002820 A3                INC     DPTR
002821 E0                MOVX    A,@DPTR
002822 FD                MOV     R5,A
002823 A3                INC     DPTR
002824 E0                MOVX    A,@DPTR
002825 FE                MOV     R6,A
002826 A3                INC     DPTR
002827 E0                MOVX    A,@DPTR
002828 FF                MOV     R7,A
002829 7808              MOV     R0,#08H
00282B 12030C            LCALL   ?C?ULSHR
00282E 9001BE            MOV     DPTR,#01BEH
002831 EF                MOV     A,R7
002832 F0                MOVX    @DPTR,A
   92: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
002833 904DE8            MOV     DPTR,#addr
002836 E0                MOVX    A,@DPTR
002837 FC                MOV     R4,A
002838 A3                INC     DPTR
002839 E0                MOVX    A,@DPTR
00283A FD                MOV     R5,A
00283B A3                INC     DPTR
00283C E0                MOVX    A,@DPTR
00283D FE                MOV     R6,A
00283E A3                INC     DPTR
00283F E0                MOVX    A,@DPTR
002840 FF                MOV     R7,A
002841 E4                CLR     A
002842 9001BF            MOV     DPTR,#01BFH
002845 EF                MOV     A,R7
002846 F0                MOVX    @DPTR,A
   93: 	REG_SPID_RXADDR = ESWAP((u16_t)buf);
002847 90808A            MOV     DPTR,#0808AH
00284A 74BC              MOV     A,#0BCH
00284C F0                MOVX    @DPTR,A
00284D A3                INC     DPTR
00284E 7401              MOV     A,#01H
002850 F0                MOVX    @DPTR,A
   94: 	REG_SPID_CTRL  |=  (1<<6);
002851 E9                MOV     A,R1
002852 FC                MOV     R4,A
002853 EA                MOV     A,R2
002854 FF                MOV     R7,A
002855 EC                MOV     A,R4
002856 FE                MOV     R6,A
002857 EF                MOV     A,R7
002858 A3                INC     DPTR
002859 EE                MOV     A,R6
00285A F0                MOVX    @DPTR,A
00285B A3                INC     DPTR
00285C EF                MOV     A,R7
00285D F0                MOVX    @DPTR,A
   95: 	REG_MISC_CTRL = SPID_START;
00285E 908086            MOV     DPTR,#08086H
002861 E0                MOVX    A,@DPTR
002862 4440              ORL     A,#040H
002864 F0                MOVX    @DPTR,A
   96: 	//spi_read_flash_wait
002865 908006            MOV     DPTR,#08006H
002868 7402              MOV     A,#02H
00286A F0                MOVX    @DPTR,A
00286B         ?C0019?SPIFLASH:
   97: 	while(REG_DMA_STATUS&(1<<7));	//waiting for spid write
00286B 90812C            MOV     DPTR,#0812CH
00286E E0                MOVX    A,@DPTR
00286F 20E7F9            JB      ACC.7,?C0019?SPIFLASH
002872         ?C0020?SPIFLASH:
002872         ?C0021?SPIFLASH:
   98: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
002872 90812C            MOV     DPTR,#0812CH
002875 E0                MOVX    A,@DPTR
002876 30E3F9            JNB     ACC.3,?C0021?SPIFLASH
   99: 	return;
  100: }
002879 22                RET     
----- FUNCTION _SPIFlashRead (END) -------


----- FUNCTION _BT_EventFifoOut (BEGIN) -----
 FILE: 'BT_IPC.c'
   43: void BT_EventFifoOut(BT_EVENTFIFO_t * event)
   44: {
00287A 904E25            MOV     DPTR,#event
00287D EB                MOV     A,R3
00287E F0                MOVX    @DPTR,A
00287F A3                INC     DPTR
002880 EA                MOV     A,R2
002881 F0                MOVX    @DPTR,A
002882 A3                INC     DPTR
002883 E9                MOV     A,R1
002884 F0                MOVX    @DPTR,A
   45: 	u16_t new_rprt,i;
   46: 	u8_t event_prefix;
   47: 	if(BT_GetEvtFifoDepth()>2)
002885 317D              ACALL   BT_GetEvtFifoDepth
002887 EF                MOV     A,R7
002888 D3                SETB    C
002889 9402              SUBB    A,#02H
00288B 5002              JNC     $ + 4H
00288D 216E              AJMP    ?C0011?BT_IPC
   48: 	{//event is not empty
   49: 		new_rprt = ESWAP(BT_EventRptr);
00288F 904A05            MOV     DPTR,#BT_EventRptr+01H
002892 E0                MOVX    A,@DPTR
002893 FC                MOV     R4,A
002894 904A04            MOV     DPTR,#BT_EventRptr
002897 E0                MOVX    A,@DPTR
002898 FF                MOV     R7,A
002899 EC                MOV     A,R4
00289A FE                MOV     R6,A
00289B EF                MOV     A,R7
00289C 904E28            MOV     DPTR,#new_rprt
00289F EE                MOV     A,R6
0028A0 F0                MOVX    @DPTR,A
0028A1 A3                INC     DPTR
0028A2 EF                MOV     A,R7
0028A3 F0                MOVX    @DPTR,A
   50: 		event_prefix = HREAD(new_rprt++);
0028A4 904E28            MOV     DPTR,#new_rprt
0028A7 E4                CLR     A
0028A8 75F001            MOV     B,#01H
0028AB 1201C8            LCALL   ?C?ILDIX
0028AE 85F082            MOV     DPL,B
0028B1 F583              MOV     DPH,A
0028B3 E0                MOVX    A,@DPTR
0028B4 FF                MOV     R7,A
;---- Variable 'event_prefix' assigned to Register 'R7' ----
   51: 		if(event_prefix == CS_PREFIX_EVENT) {
0028B5 64C6              XRL     A,#0C6H
0028B7 6002              JZ      $ + 4H
0028B9 2149              AJMP    ?C0012?BT_IPC
   52: 			event->len = HREAD(new_rprt++);
0028BB 904E28            MOV     DPTR,#new_rprt
0028BE 75F001            MOV     B,#01H
0028C1 1201C8            LCALL   ?C?ILDIX
0028C4 85F082            MOV     DPL,B
0028C7 F583              MOV     DPH,A
0028C9 E0                MOVX    A,@DPTR
0028CA FF                MOV     R7,A
0028CB 904E25            MOV     DPTR,#event
0028CE E0                MOVX    A,@DPTR
0028CF FB                MOV     R3,A
0028D0 A3                INC     DPTR
0028D1 E0                MOVX    A,@DPTR
0028D2 FA                MOV     R2,A
0028D3 A3                INC     DPTR
0028D4 E0                MOVX    A,@DPTR
0028D5 F9                MOV     R1,A
0028D6 EF                MOV     A,R7
0028D7 12013F            LCALL   ?C?CSTPTR
   53: 			if( new_rprt == (mem_event_buf_end+1) )
0028DA 904E28            MOV     DPTR,#new_rprt
0028DD E0                MOVX    A,@DPTR
0028DE B4500F            CJNE    A,#050H,?C0013?BT_IPC
0028E1 A3                INC     DPTR
0028E2 E0                MOVX    A,@DPTR
0028E3 B4000A            CJNE    A,#00H,?C0013?BT_IPC
   54: 			{
   55: 				new_rprt = mem_event_buf;
0028E6 904E28            MOV     DPTR,#new_rprt
0028E9 744F              MOV     A,#04FH
0028EB F0                MOVX    @DPTR,A
0028EC A3                INC     DPTR
0028ED 7480              MOV     A,#080H
0028EF F0                MOVX    @DPTR,A
   56: 			}
0028F0         ?C0013?BT_IPC:
   57: 			for(i=0;i<event->len;i++)
;---- Variable 'i' assigned to Register 'R6/R7' ----
0028F0 E4                CLR     A
0028F1 FF                MOV     R7,A
0028F2 FE                MOV     R6,A
0028F3         ?C0014?BT_IPC:
0028F3 904E25            MOV     DPTR,#event
0028F6 E0                MOVX    A,@DPTR
0028F7 FB                MOV     R3,A
0028F8 A3                INC     DPTR
0028F9 E0                MOVX    A,@DPTR
0028FA FA                MOV     R2,A
0028FB A3                INC     DPTR
0028FC E0                MOVX    A,@DPTR
0028FD F9                MOV     R1,A
0028FE 1200F9            LCALL   ?C?CLDPTR
002901 FD                MOV     R5,A
002902 C3                CLR     C
002903 EF                MOV     A,R7
002904 9D                SUBB    A,R5
002905 EE                MOV     A,R6
002906 9400              SUBB    A,#00H
002908 504E              JNC     ?C0018?BT_IPC
   58: 			{
   59: 				event->DATA[i] = HREAD(new_rprt++);
00290A 904E28            MOV     DPTR,#new_rprt
00290D E4                CLR     A
00290E 75F001            MOV     B,#01H
002911 1201C8            LCALL   ?C?ILDIX
002914 85F082            MOV     DPL,B
002917 F583              MOV     DPH,A
002919 E0                MOVX    A,@DPTR
00291A FD                MOV     R5,A
00291B E9                MOV     A,R1
00291C 2401              ADD     A,#01H
00291E F9                MOV     R1,A
00291F E4                CLR     A
002920 3A                ADDC    A,R2
002921 FA                MOV     R2,A
002922 E9                MOV     A,R1
002923 2F                ADD     A,R7
002924 F9                MOV     R1,A
002925 EA                MOV     A,R2
002926 3E                ADDC    A,R6
002927 FA                MOV     R2,A
002928 ED                MOV     A,R5
002929 12013F            LCALL   ?C?CSTPTR
   60: 				if( new_rprt == (mem_event_buf_end+1) )
00292C 904E28            MOV     DPTR,#new_rprt
00292F E0                MOVX    A,@DPTR
002930 B4500F            CJNE    A,#050H,?C0016?BT_IPC
002933 A3                INC     DPTR
002934 E0                MOVX    A,@DPTR
002935 B4000A            CJNE    A,#00H,?C0016?BT_IPC
   61: 				{
   62: 					new_rprt = mem_event_buf;
002938 904E28            MOV     DPTR,#new_rprt
00293B 744F              MOV     A,#04FH
00293D F0                MOVX    @DPTR,A
00293E A3                INC     DPTR
00293F 7480              MOV     A,#080H
002941 F0                MOVX    @DPTR,A
   63: 				}
   64: 			}
002942         ?C0016?BT_IPC:
002942 0F                INC     R7
002943 BF0001            CJNE    R7,#00H,?C0033?BT_IPC
002946 0E                INC     R6
002947         ?C0033?BT_IPC:
002947 80AA              SJMP    ?C0014?BT_IPC
   65: 		}
002949         ?C0012?BT_IPC:
   66: 		else {
   67: 			event->len = 0;
002949 904E25            MOV     DPTR,#event
00294C E0                MOVX    A,@DPTR
00294D FB                MOV     R3,A
00294E A3                INC     DPTR
00294F E0                MOVX    A,@DPTR
002950 FA                MOV     R2,A
002951 A3                INC     DPTR
002952 E0                MOVX    A,@DPTR
002953 F9                MOV     R1,A
002954 E4                CLR     A
002955 12013F            LCALL   ?C?CSTPTR
   68: 		}
002958         ?C0018?BT_IPC:
   69: 		BT_EventRptr = ESWAP(new_rprt);
002958 904E28            MOV     DPTR,#new_rprt
00295B E0                MOVX    A,@DPTR
00295C FC                MOV     R4,A
00295D A3                INC     DPTR
00295E E0                MOVX    A,@DPTR
00295F FA                MOV     R2,A
002960 EC                MOV     A,R4
002961 FF                MOV     R7,A
002962 EA                MOV     A,R2
002963 FE                MOV     R6,A
002964 EF                MOV     A,R7
002965 904A04            MOV     DPTR,#BT_EventRptr
002968 EE                MOV     A,R6
002969 F0                MOVX    @DPTR,A
00296A A3                INC     DPTR
00296B EF                MOV     A,R7
00296C F0                MOVX    @DPTR,A
   70: 	}
00296D 22                RET     
00296E         ?C0011?BT_IPC:
   71: 	else
   72: 	{
   73: 		event->len = 0;
00296E 904E25            MOV     DPTR,#event
002971 E0                MOVX    A,@DPTR
002972 FB                MOV     R3,A
002973 A3                INC     DPTR
002974 E0                MOVX    A,@DPTR
002975 FA                MOV     R2,A
002976 A3                INC     DPTR
002977 E0                MOVX    A,@DPTR
002978 F9                MOV     R1,A
002979 E4                CLR     A
00297A 02013F            LJMP    ?C?CSTPTR
   74: 	}
----- FUNCTION _BT_EventFifoOut (END) -------


----- FUNCTION BT_GetEvtFifoDepth (BEGIN) -----
 FILE: 'BT_IPC.c'
   87: u8_t BT_GetEvtFifoDepth(void)
   88: {
   89: 	u16_t wptr,rptr,len;
   90: 	wptr = ESWAP(BT_EventWptr);
00297D 904A07            MOV     DPTR,#BT_EventWptr+01H
002980 E0                MOVX    A,@DPTR
002981 FC                MOV     R4,A
002982 904A06            MOV     DPTR,#BT_EventWptr
002985 E0                MOVX    A,@DPTR
002986 FF                MOV     R7,A
002987 EC                MOV     A,R4
002988 EF                MOV     A,R7
;---- Variable 'wptr' assigned to Register 'R4/R5' ----
002989 FD                MOV     R5,A
   91: 	rptr = ESWAP(BT_EventRptr);
00298A 904A05            MOV     DPTR,#BT_EventRptr+01H
00298D E0                MOVX    A,@DPTR
00298E FA                MOV     R2,A
00298F 904A04            MOV     DPTR,#BT_EventRptr
002992 E0                MOVX    A,@DPTR
002993 FF                MOV     R7,A
002994 EA                MOV     A,R2
002995 FE                MOV     R6,A
002996 EF                MOV     A,R7
;---- Variable 'rptr' assigned to Register 'R6/R7' ----
   92: 	len = (wptr + BT_EVT_BUF_LEN - rptr)&(BT_EVT_BUF_LEN-1);
002997 ED                MOV     A,R5
002998 2480              ADD     A,#080H
00299A FD                MOV     R5,A
00299B E4                CLR     A
00299C 3C                ADDC    A,R4
00299D FC                MOV     R4,A
00299E C3                CLR     C
00299F ED                MOV     A,R5
0029A0 9F                SUBB    A,R7
0029A1 FF                MOV     R7,A
0029A2 EC                MOV     A,R4
0029A3 9E                SUBB    A,R6
0029A4 7E00              MOV     R6,#00H
0029A6 EF                MOV     A,R7
0029A7 547F              ANL     A,#07FH
0029A9 FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R6/R7' ----
   93: 	return len&0xff;
   94: }
0029AA 22                RET     
----- FUNCTION BT_GetEvtFifoDepth (END) -------


----- FUNCTION BT_GetCmdFifoDepth (BEGIN) -----
 FILE: 'BT_IPC.c'
   78: u8_t BT_GetCmdFifoDepth(void)
   79: {
   80: 	u16_t wptr,rptr,len;
   81: 	wptr = ESWAP(BT_CmdWptr);
0029AB 904A03            MOV     DPTR,#BT_CmdWptr+01H
0029AE E0                MOVX    A,@DPTR
0029AF FC                MOV     R4,A
0029B0 904A02            MOV     DPTR,#BT_CmdWptr
0029B3 E0                MOVX    A,@DPTR
0029B4 FF                MOV     R7,A
0029B5 EC                MOV     A,R4
0029B6 EF                MOV     A,R7
;---- Variable 'wptr' assigned to Register 'R4/R5' ----
0029B7 FD                MOV     R5,A
   82: 	rptr = ESWAP(BT_CmdRptr);
0029B8 904A01            MOV     DPTR,#BT_CmdRptr+01H
0029BB E0                MOVX    A,@DPTR
0029BC FA                MOV     R2,A
0029BD 904A00            MOV     DPTR,#BT_CmdRptr
0029C0 E0                MOVX    A,@DPTR
0029C1 FF                MOV     R7,A
0029C2 EA                MOV     A,R2
0029C3 FE                MOV     R6,A
0029C4 EF                MOV     A,R7
;---- Variable 'rptr' assigned to Register 'R6/R7' ----
   83: 	len = (wptr + BT_CMD_BUF_LEN - rptr)&(BT_CMD_BUF_LEN-1);
0029C5 ED                MOV     A,R5
0029C6 2480              ADD     A,#080H
0029C8 FD                MOV     R5,A
0029C9 E4                CLR     A
0029CA 3C                ADDC    A,R4
0029CB FC                MOV     R4,A
0029CC C3                CLR     C
0029CD ED                MOV     A,R5
0029CE 9F                SUBB    A,R7
0029CF FF                MOV     R7,A
0029D0 EC                MOV     A,R4
0029D1 9E                SUBB    A,R6
0029D2 7E00              MOV     R6,#00H
0029D4 EF                MOV     A,R7
0029D5 547F              ANL     A,#07FH
0029D7 FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R6/R7' ----
   84: 	return len&0xff;
   85: }
0029D8 22                RET     
----- FUNCTION BT_GetCmdFifoDepth (END) -------


----- FUNCTION BT_CmdFifoEmpty (BEGIN) -----
 FILE: 'BT_IPC.c'
   96: bool BT_CmdFifoEmpty(void)
   97: {
   98: 	if(BT_GetCmdFifoDepth()==0)
   99: 	{
0029D9 31AB              ACALL   BT_GetCmdFifoDepth
0029DB EF                MOV     A,R7
0029DC 7002              JNZ     ?C0023?BT_IPC
  100: 		return true;
  101: 	}
0029DE D3                SETB    C
0029DF 22                RET     
  102: 	return false;
0029E0         ?C0023?BT_IPC:
  103: }
0029E0 C3                CLR     C
  104: 
0029E1 22                RET     
----- FUNCTION BT_CmdFifoEmpty (END) -------


----- FUNCTION _BT_CmdFifoFull (BEGIN) -----
 FILE: 'BT_IPC.c'
  105: bool BT_CmdFifoFull(BT_CMDFIFO_t *pFIFO)
  106: {
0029E2 904E45            MOV     DPTR,#pFIFO
0029E5 EB                MOV     A,R3
0029E6 F0                MOVX    @DPTR,A
0029E7 A3                INC     DPTR
0029E8 EA                MOV     A,R2
0029E9 F0                MOVX    @DPTR,A
0029EA A3                INC     DPTR
0029EB E9                MOV     A,R1
0029EC F0                MOVX    @DPTR,A
  107: 	if((BT_GetCmdFifoDepth()+pFIFO->len+1) > BT_CMD_BUF_LEN)
  108: 		return true;
0029ED 31AB              ACALL   BT_GetCmdFifoDepth
0029EF 904E45            MOV     DPTR,#pFIFO
0029F2 E0                MOVX    A,@DPTR
0029F3 FB                MOV     R3,A
0029F4 A3                INC     DPTR
0029F5 E0                MOVX    A,@DPTR
0029F6 FA                MOV     R2,A
0029F7 A3                INC     DPTR
0029F8 E0                MOVX    A,@DPTR
0029F9 F9                MOV     R1,A
0029FA 1200F9            LCALL   ?C?CLDPTR
0029FD 2F                ADD     A,R7
0029FE FF                MOV     R7,A
0029FF E4                CLR     A
002A00 33                RLC     A
002A01 CF                XCH     A,R7
002A02 2401              ADD     A,#01H
002A04 CF                XCH     A,R7
002A05 3400              ADDC    A,#00H
002A07 FE                MOV     R6,A
002A08 D3                SETB    C
002A09 EF                MOV     A,R7
002A0A 9480              SUBB    A,#080H
002A0C EE                MOV     A,R6
002A0D 6480              XRL     A,#080H
002A0F 9480              SUBB    A,#080H
002A11 4002              JC      ?C0025?BT_IPC
  109: 	return false;
002A13 D3                SETB    C
002A14 22                RET     
002A15         ?C0025?BT_IPC:
  110: }
002A15 C3                CLR     C
  110: 
002A16 22                RET     
----- FUNCTION _BT_CmdFifoFull (END) -------


----- FUNCTION YC_Ice_break (BEGIN) -----
 FILE: 'YC_Utilities.c'
    4: void YC_Ice_break()
    5: {
    6: 	CPUB_ICE_CTRL = 1;
    7: 	return;
002A17 908280            MOV     DPTR,#08280H
002A1A 7401              MOV     A,#01H
002A1C F0                MOVX    @DPTR,A
    8: }
002A1D 22                RET     
----- FUNCTION YC_Ice_break (END) -------


----- FUNCTION _xmemcpy (BEGIN) -----
 FILE: 'YC_Utilities.c'
   16: void xmemcpy(pxbyte dest, u8_t* src, u8_t len) small
   17: {
002A1E 8E17              MOV     dest,R6
002A20 8F18              MOV     dest+01H,R7
002A22 8B19              MOV     src,R3
002A24 8A1A              MOV     src+01H,R2
002A26 891B              MOV     src+02H,R1
002A28         ?C0005?YC_UTILITIES:
   18: 	while(len--)
002A28 AF1C              MOV     R7,len
002A2A 151C              DEC     len
002A2C EF                MOV     A,R7
002A2D 6025              JZ      ?C0007?YC_UTILITIES
   19: 		*dest++ = *src++;
002A2F AB19              MOV     R3,src
002A31 051B              INC     src+02H
002A33 E51B              MOV     A,src+02H
002A35 AA1A              MOV     R2,src+01H
002A37 7002              JNZ     ?C0045?YC_UTILITIES
002A39 051A              INC     src+01H
002A3B         ?C0045?YC_UTILITIES:
002A3B 14                DEC     A
002A3C F9                MOV     R1,A
002A3D 1200F9            LCALL   ?C?CLDPTR
002A40 FF                MOV     R7,A
002A41 0518              INC     dest+01H
002A43 E518              MOV     A,dest+01H
002A45 AC17              MOV     R4,dest
002A47 7002              JNZ     ?C0046?YC_UTILITIES
002A49 0517              INC     dest
002A4B         ?C0046?YC_UTILITIES:
002A4B 14                DEC     A
002A4C F582              MOV     DPL,A
002A4E 8C83              MOV     DPH,R4
002A50 EF                MOV     A,R7
002A51 F0                MOVX    @DPTR,A
002A52 80D4              SJMP    ?C0005?YC_UTILITIES
   20: 	return;
   21: }
002A54         ?C0007?YC_UTILITIES:
002A54 22                RET     
----- FUNCTION _xmemcpy (END) -------


----- FUNCTION _cmemcpy (BEGIN) -----
 FILE: 'YC_Utilities.c'
   28: void cmemcpy(pxbyte dest, const u8_t* src, u8_t len) small
   29: {
002A55 8E21              MOV     dest,R6
002A57 8F22              MOV     dest+01H,R7
002A59 8B23              MOV     src,R3
002A5B 8A24              MOV     src+01H,R2
002A5D 8925              MOV     src+02H,R1
002A5F         ?C0011?YC_UTILITIES:
   30: 	while(len--)
002A5F AF26              MOV     R7,len
002A61 1526              DEC     len
002A63 EF                MOV     A,R7
002A64 6025              JZ      ?C0013?YC_UTILITIES
   31: 		*dest++ = (u8_t)(*src++);
002A66 AB23              MOV     R3,src
002A68 0525              INC     src+02H
002A6A E525              MOV     A,src+02H
002A6C AA24              MOV     R2,src+01H
002A6E 7002              JNZ     ?C0049?YC_UTILITIES
002A70 0524              INC     src+01H
002A72         ?C0049?YC_UTILITIES:
002A72 14                DEC     A
002A73 F9                MOV     R1,A
002A74 1200F9            LCALL   ?C?CLDPTR
002A77 FF                MOV     R7,A
002A78 0522              INC     dest+01H
002A7A E522              MOV     A,dest+01H
002A7C AC21              MOV     R4,dest
002A7E 7002              JNZ     ?C0050?YC_UTILITIES
002A80 0521              INC     dest
002A82         ?C0050?YC_UTILITIES:
002A82 14                DEC     A
002A83 F582              MOV     DPL,A
002A85 8C83              MOV     DPH,R4
002A87 EF                MOV     A,R7
002A88 F0                MOVX    @DPTR,A
002A89 80D4              SJMP    ?C0011?YC_UTILITIES
   32: 	return;
   33: }
002A8B         ?C0013?YC_UTILITIES:
002A8B 22                RET     
----- FUNCTION _cmemcpy (END) -------


----- FUNCTION _YC_MemCheckEmpty (BEGIN) -----
 FILE: 'YC_Utilities.c'
   34: bool YC_MemCheckEmpty(u8_t *mem, u8_t len)
   35: {
002A8C 904E33            MOV     DPTR,#mem
002A8F EB                MOV     A,R3
002A90 F0                MOVX    @DPTR,A
002A91 A3                INC     DPTR
002A92 EA                MOV     A,R2
002A93 F0                MOVX    @DPTR,A
002A94 A3                INC     DPTR
002A95 E9                MOV     A,R1
002A96 F0                MOVX    @DPTR,A
002A97 A3                INC     DPTR
002A98 ED                MOV     A,R5
002A99 F0                MOVX    @DPTR,A
   36: 	int i;
   37: 	for(i=0;i<len;i++)
;---- Variable 'i' assigned to Register 'R6/R7' ----
002A9A E4                CLR     A
002A9B FF                MOV     R7,A
002A9C FE                MOV     R6,A
002A9D         ?C0014?YC_UTILITIES:
002A9D 904E36            MOV     DPTR,#len
002AA0 E0                MOVX    A,@DPTR
002AA1 FD                MOV     R5,A
002AA2 C3                CLR     C
002AA3 EF                MOV     A,R7
002AA4 9D                SUBB    A,R5
002AA5 7480              MOV     A,#080H
002AA7 F8                MOV     R0,A
002AA8 6E                XRL     A,R6
002AA9 98                SUBB    A,R0
002AAA 5034              JNC     ?C0015?YC_UTILITIES
   38: 	{
   39: 		if(mem[i])
002AAC 904E33            MOV     DPTR,#mem
002AAF E0                MOVX    A,@DPTR
002AB0 FB                MOV     R3,A
002AB1 A3                INC     DPTR
002AB2 E0                MOVX    A,@DPTR
002AB3 FA                MOV     R2,A
002AB4 A3                INC     DPTR
002AB5 E0                MOVX    A,@DPTR
002AB6 F9                MOV     R1,A
002AB7 8F82              MOV     DPL,R7
002AB9 8E83              MOV     DPH,R6
002ABB 120112            LCALL   ?C?CLDOPTR
002ABE FD                MOV     R5,A
002ABF 701F              JNZ     ?C0015?YC_UTILITIES
   40: 		{
   41: 			break;
   42: 		}
002AC1         ?C0017?YC_UTILITIES:
   43: 		if(i==(len-1)&&mem[i]==0)
002AC1 904E36            MOV     DPTR,#len
002AC4 E0                MOVX    A,@DPTR
002AC5 24FF              ADD     A,#0FFH
002AC7 FB                MOV     R3,A
002AC8 E4                CLR     A
002AC9 34FF              ADDC    A,#0FFH
002ACB FA                MOV     R2,A
002ACC EB                MOV     A,R3
002ACD B50709            CJNE    A,AR7,?C0016?YC_UTILITIES
002AD0 EA                MOV     A,R2
002AD1 B50605            CJNE    A,AR6,?C0016?YC_UTILITIES
002AD4 ED                MOV     A,R5
002AD5 7002              JNZ     ?C0016?YC_UTILITIES
   44: 		{
   45: 			return 0;
002AD7 C3                CLR     C
002AD8 22                RET     
   46: 		}
   47: 	}
002AD9         ?C0016?YC_UTILITIES:
002AD9 0F                INC     R7
002ADA BF0001            CJNE    R7,#00H,?C0052?YC_UTILITIES
002ADD 0E                INC     R6
002ADE         ?C0052?YC_UTILITIES:
002ADE 80BD              SJMP    ?C0014?YC_UTILITIES
002AE0         ?C0015?YC_UTILITIES:
   48: 	return 1;
002AE0 D3                SETB    C
   49: }
002AE1 22                RET     
----- FUNCTION _YC_MemCheckEmpty (END) -------


----- FUNCTION _YC_Delay1S (BEGIN) -----
 FILE: 'YC_Utilities.c'
   69: void YC_Delay1S(u8_t Time)
   70: {
;---- Variable 'Time' assigned to Register 'R7' ----
   71: 	u16_t j,k;
   72: 	for(;Time>0;Time--)
002AE2         ?C0034?YC_UTILITIES:
002AE2 EF                MOV     A,R7
002AE3 D3                SETB    C
002AE4 9400              SUBB    A,#00H
002AE6 401F              JC      ?C0043?YC_UTILITIES
   73: 	{
   74: 		for(j=0;j<1000;j++)
;---- Variable 'j' assigned to Register 'R4/R5' ----
002AE8 E4                CLR     A
002AE9 FD                MOV     R5,A
002AEA FC                MOV     R4,A
002AEB         ?C0037?YC_UTILITIES:
   75: 		{
   76: 			for(k=0;k<1150;k++);
;---- Variable 'k' assigned to Register 'R2/R3' ----
002AEB E4                CLR     A
002AEC FB                MOV     R3,A
002AED FA                MOV     R2,A
002AEE         ?C0040?YC_UTILITIES:
002AEE 0B                INC     R3
002AEF BB0001            CJNE    R3,#00H,?C0055?YC_UTILITIES
002AF2 0A                INC     R2
002AF3         ?C0055?YC_UTILITIES:
002AF3 BA04F8            CJNE    R2,#04H,?C0040?YC_UTILITIES
002AF6 BB7EF5            CJNE    R3,#07EH,?C0040?YC_UTILITIES
   77: 		}
002AF9         ?C0039?YC_UTILITIES:
002AF9 0D                INC     R5
002AFA BD0001            CJNE    R5,#00H,?C0056?YC_UTILITIES
002AFD 0C                INC     R4
002AFE         ?C0056?YC_UTILITIES:
002AFE BC03EA            CJNE    R4,#03H,?C0037?YC_UTILITIES
002B01 BDE8E7            CJNE    R5,#0E8H,?C0037?YC_UTILITIES
   78: 	}
002B04         ?C0036?YC_UTILITIES:
002B04 1F                DEC     R7
002B05 80DB              SJMP    ?C0034?YC_UTILITIES
   79: }
002B07         ?C0043?YC_UTILITIES:
002B07 22                RET     
----- FUNCTION _YC_Delay1S (END) -------


----- FUNCTION CS_Scale_Proc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  121: void CS_Scale_Proc(void)
  122: {
  123: 	if(R_Scale_state == CS_Scale_state_init)
  124: 		{	
002B08 904CC5            MOV     DPTR,#R_Scale_state
002B0B E0                MOVX    A,@DPTR
002B0C 7004              JNZ     ?C0001?CS_SCALE_PROC
  125: 		CS_Scale_PowerOnProc(0);
  126: 		}
002B0E C200              CLR     ?CS_Scale_PowerOnProc?BIT
002B10 B12C              ACALL   CS_Scale_PowerOnProc
  127: 	if(R_Scale_state == CS_Scale_state_standby)
002B12         ?C0001?CS_SCALE_PROC:
  128: 		{
002B12 904CC5            MOV     DPTR,#R_Scale_state
002B15 E0                MOVX    A,@DPTR
002B16 B40204            CJNE    A,#02H,?C0002?CS_SCALE_PROC
  129: 		CS_Scale_StandbyProc(0);		
  130: 		}
002B19 E4                CLR     A
002B1A FF                MOV     R7,A
002B1B 716E              ACALL   _CS_Scale_StandbyProc
  131: 		
002B1D         ?C0002?CS_SCALE_PROC:
  132: 	if(B_Weight_AdOk == true)
002B1D 904CD7            MOV     DPTR,#B_Weight_AdOk
002B20 E0                MOVX    A,@DPTR
002B21 6401              XRL     A,#01H
002B23 7048              JNZ     ?C0010?CS_SCALE_PROC
  133: 		{		
  134: 		B_Weight_AdOk = false;	
002B25 F0                MOVX    @DPTR,A
  135: 		
  136: 		if(CS_Scale_ZeroProc(GetPowerOnZeroState,0)== false)	//还没上电取零点先取零点
002B26 FD                MOV     R5,A
002B27 FC                MOV     R4,A
002B28 7F02              MOV     R7,#02H
002B2A 1212F0            LCALL   _CS_Scale_ZeroProc
002B2D EF                MOV     A,R7
002B2E 4E                ORL     A,R6
002B2F 7007              JNZ     ?C0004?CS_SCALE_PROC
  137: 			{
  138: 			CS_Scale_ZeroProc(FindPowerOnZero,0);
002B31 FD                MOV     R5,A
002B32 FC                MOV     R4,A
002B33 7F0A              MOV     R7,#0AH
002B35 0212F0            LJMP    _CS_Scale_ZeroProc
  139: 			}
002B38         ?C0004?CS_SCALE_PROC:
  140: 		else
  141: 			{
  142: 				
  143: 			if(R_Scale_state == CS_Scale_state_weighting)
002B38 904CC5            MOV     DPTR,#R_Scale_state
002B3B E0                MOVX    A,@DPTR
002B3C B40105            CJNE    A,#01H,?C0006?CS_SCALE_PROC
  144: 				{
  145: 				CS_Scale_WeightProc();
002B3F F124              ACALL   CS_Scale_WeightProc
  146: 				CS_ScaleDisplay();
002B41 121539            LCALL   CS_ScaleDisplay
  147: 				}
002B44         ?C0006?CS_SCALE_PROC:
  148: 			if(R_Scale_state == CS_Scale_state_locking)
002B44 904CC5            MOV     DPTR,#R_Scale_state
002B47 E0                MOVX    A,@DPTR
002B48 B40412            CJNE    A,#04H,?C0007?CS_SCALE_PROC
  149: 				{					
  150: 				CS_ScaleDisplay_SteadyFlash();
002B4B 120F73            LCALL   CS_ScaleDisplay_SteadyFlash
  151: 				if(CS_SoftTimer(GetIfTimeOut) == true)	//锁定闪现时间到
002B4E 7F03              MOV     R7,#03H
002B50 120F15            LCALL   _CS_SoftTimer
002B53 BF0107            CJNE    R7,#01H,?C0007?CS_SCALE_PROC
  152: 					{
  153: 					CS_Scale_SteadyProc(SteadyProcRun);
002B56 7F01              MOV     R7,#01H
002B58 D115              ACALL   _CS_Scale_SteadyProc
  154: 					CS_ScaleDisplay();
002B5A 121539            LCALL   CS_ScaleDisplay
  155: 					}
  156: 				}
002B5D         ?C0007?CS_SCALE_PROC:
  157: 			if(R_Scale_state == CS_Scale_state_caling)
002B5D 904CC5            MOV     DPTR,#R_Scale_state
002B60 E0                MOVX    A,@DPTR
002B61 B40305            CJNE    A,#03H,?C0009?CS_SCALE_PROC
  158: 				{
  159: 				CS_Scale_CaliProc(CaliProcRun);
002B64 E4                CLR     A
002B65 FF                MOV     R7,A
002B66 120A38            LCALL   _CS_Scale_CaliProc
  160: 				}	
002B69         ?C0009?CS_SCALE_PROC:
  161: 			
  162: 			CS_Scale_TimeOutProc(0);
002B69 E4                CLR     A
002B6A FF                MOV     R7,A
002B6B 9102              ACALL   _CS_Scale_TimeOutProc
  163: 			}
  164: 		}
  165: }	
002B6D         ?C0010?CS_SCALE_PROC:
002B6D 22                RET     
----- FUNCTION CS_Scale_Proc (END) -------


----- FUNCTION _CS_Scale_StandbyProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1191: void CS_Scale_StandbyProc(u8_t B_Reset)
 1192: {
;---- Variable 'B_Reset' assigned to Register 'R7' ----
 1193: 	static u8_t xdata comm_doing;
 1194: 	static u8_t xdata StandbyState;
 1195: 
 1196: 	if(B_Reset==1)
002B6E EF                MOV     A,R7
002B6F B4010A            CJNE    A,#01H,?C0171?CS_SCALE_PROC
 1197: 		{
 1198: 		StandbyState=CS_Standby_S1_ToSleep;
002B72 E4                CLR     A
002B73 904CB5            MOV     DPTR,#StandbyState
002B76 F0                MOVX    @DPTR,A
 1199: 		comm_doing=false;
002B77 904CB4            MOV     DPTR,#comm_doing
002B7A F0                MOVX    @DPTR,A
002B7B 22                RET     
 1200: 		return;
 1201: 		}
002B7C         ?C0171?CS_SCALE_PROC:
 1202: 
 1203: 	if(B_Reset==2)
002B7C EF                MOV     A,R7
002B7D B4020C            CJNE    A,#02H,?C0173?CS_SCALE_PROC
 1204: 		{
 1205: 		StandbyState=CS_Standby_S2_WakeUp;
002B80 904CB5            MOV     DPTR,#StandbyState
002B83 7401              MOV     A,#01H
002B85 F0                MOVX    @DPTR,A
 1206: 		comm_doing=false;
002B86 E4                CLR     A
002B87 904CB4            MOV     DPTR,#comm_doing
002B8A F0                MOVX    @DPTR,A
002B8B 22                RET     
 1207: 		return;
 1208: 		}
002B8C         ?C0173?CS_SCALE_PROC:
 1209: 	
 1210: 	switch(StandbyState)
002B8C 904CB5            MOV     DPTR,#StandbyState
002B8F E0                MOVX    A,@DPTR
002B90 14                DEC     A
002B91 6035              JZ      ?C0178?CS_SCALE_PROC
002B93 04                INC     A
002B94 7066              JNZ     ?C0181?CS_SCALE_PROC
 1211: 	{
 1212: 	case CS_Standby_S1_ToSleep:
002B96         ?C0175?CS_SCALE_PROC:
 1213: 		if(comm_doing==false)
002B96 904CB4            MOV     DPTR,#comm_doing
002B99 E0                MOVX    A,@DPTR
002B9A 7006              JNZ     ?C0176?CS_SCALE_PROC
 1214: 			{
 1215: 			comm_doing=true;
002B9C 04                INC     A
002B9D F0                MOVX    @DPTR,A
 1216: 
 1217: 			CS_Scale_1186ComSend(CS_CommTo1186_SetSleepMode);
002B9E 7FA0              MOV     R7,#0A0H
002BA0 B121              ACALL   _CS_Scale_1186ComSend
 1218: 			//sys_state = SYS_ST_IDLE;			//系统进入睡眠
 1219: 			}
002BA2         ?C0176?CS_SCALE_PROC:
 1220: 		if(CS_If1186ComSucess()==true)
002BA2 D10F              ACALL   CS_If1186ComSucess
002BA4 EF                MOV     A,R7
002BA5 6401              XRL     A,#01H
002BA7 7058              JNZ     ?C0172?CS_SCALE_PROC
 1221: 			{
 1222: 			comm_doing=false;
002BA9 904CB4            MOV     DPTR,#comm_doing
002BAC F0                MOVX    @DPTR,A
 1223: 			StandbyState =  CS_Standby_S2_WakeUp;
002BAD A3                INC     DPTR
002BAE 04                INC     A
002BAF F0                MOVX    @DPTR,A
 1224: 
 1225: 			btCmdBuf.len = 0x01;
002BB0 904C63            MOV     DPTR,#btCmdBuf
002BB3 F0                MOVX    @DPTR,A
 1226: 			btCmdBuf.DATA[0] = CS_CMD_SLEEP_REQ;
002BB4 A3                INC     DPTR
002BB5 7420              MOV     A,#020H
002BB7 F0                MOVX    @DPTR,A
 1227: 			BT_CmdFifoIn(&btCmdBuf);
002BB8 7B01              MOV     R3,#01H
002BBA 7A4C              MOV     R2,#HIGH btCmdBuf
002BBC 7963              MOV     R1,#LOW btCmdBuf
002BBE 121E04            LCALL   _BT_CmdFifoIn
 1228: 
 1229: 			//btCmdBuf.len = 2;
 1230: 			//btCmdBuf.DATA[0] = 0x20;
 1231: 			//btCmdBuf.DATA[1] = 0;
 1232: 			//BT_CmdFifoIn(&btCmdBuf);
 1233: 			
 1234: 			 
 1235: 			sys_state = SYS_ST_IDLE;  //SYS_ST_SLEEP;			//系统进入睡眠
002BC1 904E5C            MOV     DPTR,#sys_state
002BC4 7401              MOV     A,#01H
002BC6 F0                MOVX    @DPTR,A
 1236: 					
 1237: 			}	
 1238: 		break;
002BC7 22                RET     
 1239: 	case CS_Standby_S2_WakeUp:
002BC8         ?C0178?CS_SCALE_PROC:
 1240: 		if(comm_doing==false)
002BC8 904CB4            MOV     DPTR,#comm_doing
002BCB E0                MOVX    A,@DPTR
002BCC 7006              JNZ     ?C0179?CS_SCALE_PROC
 1241: 			{
 1242: 			comm_doing=true;
002BCE 04                INC     A
002BCF F0                MOVX    @DPTR,A
 1243: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadAdZero);
002BD0 7F85              MOV     R7,#085H
002BD2 B121              ACALL   _CS_Scale_1186ComSend
 1244: 			}
002BD4         ?C0179?CS_SCALE_PROC:
 1245: 		if(CS_If1186ComSucess()==true)
002BD4 D10F              ACALL   CS_If1186ComSucess
002BD6 BF0128            CJNE    R7,#01H,?C0172?CS_SCALE_PROC
 1246: 			{
 1247: 			comm_doing=false;
002BD9 E4                CLR     A
002BDA 904CB4            MOV     DPTR,#comm_doing
002BDD F0                MOVX    @DPTR,A
 1248: 			StandbyState =  CS_Standby_S1_ToSleep;	
002BDE A3                INC     DPTR
002BDF F0                MOVX    @DPTR,A
 1249: 			sys_state = SYS_ST_RUN;
002BE0 904E5C            MOV     DPTR,#sys_state
002BE3 7402              MOV     A,#02H
002BE5 F0                MOVX    @DPTR,A
 1250: 
 1251: 			/*
 1252: 			while(1)
 1253: 			{
 1254: 			R_Debug_temp = R_AD_Zero;
 1255: 			CS_ScaleDisplay_Debug();
 1256: 			}
 1257: 			*/
 1258: 			//清除异常状态
 1259: 			CS_Scale_JudgeOverLoad(ResetOverLoad);
002BE6 FF                MOV     R7,A
002BE7 123687            LCALL   _CS_Scale_JudgeOverLoad
 1260: 			CS_Scale_TimeOutProc(CS_Reset_AllTime);
002BEA 7F06              MOV     R7,#06H
002BEC 9102              ACALL   _CS_Scale_TimeOutProc
 1261: 			R_Display_Err = 0;
002BEE E4                CLR     A
002BEF 904CC2            MOV     DPTR,#R_Display_Err
002BF2 F0                MOVX    @DPTR,A
 1262: 			
 1263: 			R_Scale_state = CS_Scale_state_weighting;
002BF3 904CC5            MOV     DPTR,#R_Scale_state
002BF6 04                INC     A
002BF7 F0                MOVX    @DPTR,A
 1264: 			
 1265: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadAd);
002BF8 7F80              MOV     R7,#080H
002BFA A121              AJMP    _CS_Scale_1186ComSend
 1266: 			
 1267: 			}
 1268: 		break;
 1269: 	default:
002BFC         ?C0181?CS_SCALE_PROC:
 1270: 		StandbyState = CS_Standby_S1_ToSleep;
002BFC E4                CLR     A
002BFD 904CB5            MOV     DPTR,#StandbyState
002C00 F0                MOVX    @DPTR,A
 1271: 		break;
 1272: 	}
 1273: 	
 1274: 	//R_Debug_temp = 456;
 1275: 
 1276: }
002C01         ?C0172?CS_SCALE_PROC:
002C01 22                RET     
----- FUNCTION _CS_Scale_StandbyProc (END) -------


----- FUNCTION _CS_Scale_TimeOutProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1444: void CS_Scale_TimeOutProc(u8_t option)
 1445: {
;---- Variable 'option' assigned to Register 'R7' ----
 1446: 	static	CS_TimeOut_T xdata R_TimeOut;
 1447: 	static	u8_t xdata B_TimeBase_1s;		//1s时基
 1448: 
 1449: 	if(option==CS_SetTimeBase1S)
002C02 EF                MOV     A,R7
002C03 B40707            CJNE    A,#07H,?C0209?CS_SCALE_PROC
 1450: 		{
 1451: 		B_TimeBase_1s = true;
002C06 904CBF            MOV     DPTR,#B_TimeBase_1s
002C09 7401              MOV     A,#01H
002C0B F0                MOVX    @DPTR,A
002C0C 22                RET     
 1452: 		return;
 1453: 		}
002C0D         ?C0209?CS_SCALE_PROC:
 1454: 	//超时计数器复位
 1455: 	if(option)
002C0D EF                MOV     A,R7
002C0E 6040              JZ      ?C0211?CS_SCALE_PROC
 1456: 	{
 1457: 	if(option==CS_Reset_ZeroTime)
002C10 B40105            CJNE    A,#01H,?C0212?CS_SCALE_PROC
 1458: 		R_TimeOut.zero=0;
002C13 E4                CLR     A
002C14 904CBA            MOV     DPTR,#R_TimeOut
002C17 F0                MOVX    @DPTR,A
002C18         ?C0212?CS_SCALE_PROC:
 1459: 	if(option==CS_Reset_LockTime)
002C18 EF                MOV     A,R7
002C19 B40205            CJNE    A,#02H,?C0213?CS_SCALE_PROC
 1460: 		R_TimeOut.lock=0;
002C1C E4                CLR     A
002C1D 904CBB            MOV     DPTR,#R_TimeOut+01H
002C20 F0                MOVX    @DPTR,A
002C21         ?C0213?CS_SCALE_PROC:
 1461: 	if(option==CS_Reset_UnstableTime)
002C21 EF                MOV     A,R7
002C22 B40305            CJNE    A,#03H,?C0214?CS_SCALE_PROC
 1462: 		R_TimeOut.unstable=0;
002C25 E4                CLR     A
002C26 904CBC            MOV     DPTR,#R_TimeOut+02H
002C29 F0                MOVX    @DPTR,A
002C2A         ?C0214?CS_SCALE_PROC:
 1463: 	if(option==CS_Reset_OverLoadTime)
002C2A EF                MOV     A,R7
002C2B B40405            CJNE    A,#04H,?C0215?CS_SCALE_PROC
 1464: 		R_TimeOut.overload=0;
002C2E E4                CLR     A
002C2F 904CBD            MOV     DPTR,#R_TimeOut+03H
002C32 F0                MOVX    @DPTR,A
002C33         ?C0215?CS_SCALE_PROC:
 1465: 	if(option==CS_Reset_LowBatTime)
002C33 EF                MOV     A,R7
002C34 B40505            CJNE    A,#05H,?C0216?CS_SCALE_PROC
 1466: 		R_TimeOut.lowbat=0;
002C37 E4                CLR     A
002C38 904CBE            MOV     DPTR,#R_TimeOut+04H
002C3B F0                MOVX    @DPTR,A
002C3C         ?C0216?CS_SCALE_PROC:
 1467: 	if(option==CS_Reset_AllTime)
002C3C EF                MOV     A,R7
002C3D 6406              XRL     A,#06H
002C3F 6002              JZ      $ + 4H
002C41 A120              AJMP    ?C0210?CS_SCALE_PROC
 1468: 		{
 1469: 		R_TimeOut.zero=0;
002C43 904CBA            MOV     DPTR,#R_TimeOut
002C46 F0                MOVX    @DPTR,A
 1470: 		R_TimeOut.lock=0;
002C47 A3                INC     DPTR
002C48 F0                MOVX    @DPTR,A
 1471: 		R_TimeOut.unstable=0;
002C49 A3                INC     DPTR
002C4A F0                MOVX    @DPTR,A
 1472: 		R_TimeOut.overload=0;
002C4B A3                INC     DPTR
002C4C F0                MOVX    @DPTR,A
 1473: 		R_TimeOut.lowbat=0;
002C4D A3                INC     DPTR
002C4E F0                MOVX    @DPTR,A
 1474: 		}
002C4F 22                RET     
 1475: 	return;
 1476: 	}
002C50         ?C0211?CS_SCALE_PROC:
 1477: 		
 1478: 	if(B_TimeBase_1s == true)
002C50 904CBF            MOV     DPTR,#B_TimeBase_1s
002C53 E0                MOVX    A,@DPTR
002C54 6401              XRL     A,#01H
002C56 6002              JZ      $ + 4H
002C58 A120              AJMP    ?C0210?CS_SCALE_PROC
 1479: 	{
 1480: 		B_TimeBase_1s = false;
002C5A F0                MOVX    @DPTR,A
 1481: 
 1482: 		//低电超时处理
 1483: 		if(CS_Scale_JudgeLowBat(GetIfLowBat) == true)
002C5B 7F01              MOV     R7,#01H
002C5D 1217E5            LCALL   _CS_Scale_JudgeLowBat
002C60 BF011E            CJNE    R7,#01H,?C0219?CS_SCALE_PROC
 1484: 		{
 1485: 			R_TimeOut.lowbat++;
002C63 904CBE            MOV     DPTR,#R_TimeOut+04H
002C66 E0                MOVX    A,@DPTR
002C67 04                INC     A
002C68 F0                MOVX    @DPTR,A
 1486: 
 1487: 			if(R_TimeOut.lowbat>=CS_Scale_TimeOut_LowBat)
002C69 E0                MOVX    A,@DPTR
002C6A C3                CLR     C
002C6B 9403              SUBB    A,#03H
002C6D 5002              JNC     $ + 4H
002C6F A120              AJMP    ?C0210?CS_SCALE_PROC
 1488: 			{
 1489: 				R_Scale_state = CS_Scale_state_standby;
002C71 904CC5            MOV     DPTR,#R_Scale_state
002C74 7402              MOV     A,#02H
002C76 F0                MOVX    @DPTR,A
 1490: 				CS_Scale_StandbyProc(1);
002C77 7F01              MOV     R7,#01H
002C79 716E              ACALL   _CS_Scale_StandbyProc
 1491: 				R_TimeOut.lowbat=0;
002C7B E4                CLR     A
002C7C 904CBE            MOV     DPTR,#R_TimeOut+04H
002C7F F0                MOVX    @DPTR,A
 1492: 			}
002C80 22                RET     
 1493: 		return;			
 1494: 		}
002C81         ?C0219?CS_SCALE_PROC:
 1495: 
 1496: 		//超载超时处理
 1497: 		if(CS_Scale_JudgeOverLoad(GetIfOverLoad)== true)
002C81 7F01              MOV     R7,#01H
002C83 123687            LCALL   _CS_Scale_JudgeOverLoad
002C86 BF011E            CJNE    R7,#01H,?C0221?CS_SCALE_PROC
 1498: 		{
 1499: 			R_TimeOut.overload++;
002C89 904CBD            MOV     DPTR,#R_TimeOut+03H
002C8C E0                MOVX    A,@DPTR
002C8D 04                INC     A
002C8E F0                MOVX    @DPTR,A
 1500: 
 1501: 			if(R_TimeOut.overload>=CS_Scale_TimeOut_OverLoad)
002C8F E0                MOVX    A,@DPTR
002C90 C3                CLR     C
002C91 9403              SUBB    A,#03H
002C93 5002              JNC     $ + 4H
002C95 A120              AJMP    ?C0210?CS_SCALE_PROC
 1502: 			{
 1503: 				R_Scale_state = CS_Scale_state_standby;
002C97 904CC5            MOV     DPTR,#R_Scale_state
002C9A 7402              MOV     A,#02H
002C9C F0                MOVX    @DPTR,A
 1504: 				CS_Scale_StandbyProc(1);
002C9D 7F01              MOV     R7,#01H
002C9F 716E              ACALL   _CS_Scale_StandbyProc
 1505: 				R_TimeOut.overload=0;
002CA1 E4                CLR     A
002CA2 904CBD            MOV     DPTR,#R_TimeOut+03H
002CA5 F0                MOVX    @DPTR,A
 1506: 			}
002CA6 22                RET     
 1507: 		return;	
 1508: 
 1509: 		}
002CA7         ?C0221?CS_SCALE_PROC:
 1510: 		
 1511: 		
 1512: 		//称重模式下的超时处理
 1513: 		if(R_Scale_state == CS_Scale_state_weighting)
002CA7 904CC5            MOV     DPTR,#R_Scale_state
002CAA E0                MOVX    A,@DPTR
002CAB 6401              XRL     A,#01H
002CAD 704A              JNZ     ?C0223?CS_SCALE_PROC
 1514: 		{
 1515: 		
 1516: 		if(CS_Scale_ZeroProc(GetZeroState,0) == true)
002CAF FD                MOV     R5,A
002CB0 FC                MOV     R4,A
002CB1 7F03              MOV     R7,#03H
002CB3 1212F0            LCALL   _CS_Scale_ZeroProc
002CB6 EF                MOV     A,R7
002CB7 6401              XRL     A,#01H
002CB9 4E                ORL     A,R6
002CBA 700C              JNZ     ?C0224?CS_SCALE_PROC
 1517: 			{
 1518: 			R_TimeOut.unstable=0;
002CBC 904CBC            MOV     DPTR,#R_TimeOut+02H
002CBF F0                MOVX    @DPTR,A
 1519: 			R_TimeOut.zero++;
002CC0 904CBA            MOV     DPTR,#R_TimeOut
002CC3 E0                MOVX    A,@DPTR
002CC4 04                INC     A
002CC5 F0                MOVX    @DPTR,A
 1520: 			}
002CC6 800B              SJMP    ?C0225?CS_SCALE_PROC
002CC8         ?C0224?CS_SCALE_PROC:
 1521: 		else
 1522: 			{
 1523: 			R_TimeOut.zero=0;
002CC8 E4                CLR     A
002CC9 904CBA            MOV     DPTR,#R_TimeOut
002CCC F0                MOVX    @DPTR,A
 1524: 			R_TimeOut.unstable++;
002CCD 904CBC            MOV     DPTR,#R_TimeOut+02H
002CD0 E0                MOVX    A,@DPTR
002CD1 04                INC     A
002CD2 F0                MOVX    @DPTR,A
 1525: 			}
002CD3         ?C0225?CS_SCALE_PROC:
 1526: 
 1527: 		if(R_TimeOut.zero >=CS_Scale_TimeOut_Zero||R_TimeOut.unstable>=CS_Scale_TimeOut_Unstable)
002CD3 904CBA            MOV     DPTR,#R_TimeOut
002CD6 E0                MOVX    A,@DPTR
002CD7 C3                CLR     C
002CD8 940F              SUBB    A,#0FH
002CDA 5009              JNC     ?C0227?CS_SCALE_PROC
002CDC 904CBC            MOV     DPTR,#R_TimeOut+02H
002CDF E0                MOVX    A,@DPTR
002CE0 C3                CLR     C
002CE1 940F              SUBB    A,#0FH
002CE3 403B              JC      ?C0210?CS_SCALE_PROC
002CE5         ?C0227?CS_SCALE_PROC:
 1528: 			{
 1529: 				//R_Debug_temp=R_TimeOut.unstable;
 1530: 				//CS_ScaleDisplay_Debug();
 1531: 				//while(1);
 1532: 				
 1533: 				R_Scale_state = CS_Scale_state_standby;
002CE5 904CC5            MOV     DPTR,#R_Scale_state
002CE8 7402              MOV     A,#02H
002CEA F0                MOVX    @DPTR,A
 1534: 				CS_Scale_StandbyProc(1);
002CEB 7F01              MOV     R7,#01H
002CED 716E              ACALL   _CS_Scale_StandbyProc
 1535: 				R_TimeOut.zero=0;
002CEF E4                CLR     A
002CF0 904CBA            MOV     DPTR,#R_TimeOut
002CF3 F0                MOVX    @DPTR,A
 1536: 				R_TimeOut.unstable=0;
002CF4 904CBC            MOV     DPTR,#R_TimeOut+02H
002CF7 F0                MOVX    @DPTR,A
 1537: 			}
002CF8 22                RET     
 1538: 		return;
 1539: 
 1540: 		}
002CF9         ?C0223?CS_SCALE_PROC:
 1541: 		
 1542: 
 1543: 		//锁定模式下的超时处理
 1544: 		if(R_Scale_state == CS_Scale_state_locking)
002CF9 904CC5            MOV     DPTR,#R_Scale_state
002CFC E0                MOVX    A,@DPTR
002CFD B40420            CJNE    A,#04H,?C0210?CS_SCALE_PROC
 1545: 		{
 1546: 			R_TimeOut.unstable=0;
002D00 E4                CLR     A
002D01 904CBC            MOV     DPTR,#R_TimeOut+02H
002D04 F0                MOVX    @DPTR,A
 1547: 			R_TimeOut.lock++;
002D05 904CBB            MOV     DPTR,#R_TimeOut+01H
002D08 E0                MOVX    A,@DPTR
002D09 04                INC     A
002D0A F0                MOVX    @DPTR,A
 1548: 			
 1549: 			if(R_TimeOut.lock>=CS_Scale_TimeOut_Lock)
002D0B E0                MOVX    A,@DPTR
002D0C C3                CLR     C
002D0D 940F              SUBB    A,#0FH
002D0F 400F              JC      ?C0210?CS_SCALE_PROC
 1550: 			{
 1551: 				
 1552: 				R_Scale_state = CS_Scale_state_standby;
002D11 904CC5            MOV     DPTR,#R_Scale_state
002D14 7402              MOV     A,#02H
002D16 F0                MOVX    @DPTR,A
 1553: 				CS_Scale_StandbyProc(1);
002D17 7F01              MOV     R7,#01H
002D19 716E              ACALL   _CS_Scale_StandbyProc
 1554: 				R_TimeOut.lock=0;
002D1B E4                CLR     A
002D1C 904CBB            MOV     DPTR,#R_TimeOut+01H
002D1F F0                MOVX    @DPTR,A
 1555: 			}
 1556: 		return;
 1557: 		}		
 1558: 		
 1559: 
 1560: 	}
 1561: 
 1562: }
002D20         ?C0210?CS_SCALE_PROC:
002D20 22                RET     
----- FUNCTION _CS_Scale_TimeOutProc (END) -------


----- FUNCTION _CS_Scale_1186ComSend (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   18: void CS_Scale_1186ComSend(u8_t com_comand)
   19: {
;---- Variable 'com_comand' assigned to Register 'R7' ----
   20: R_Weight_Com_Coo.sucess=false;
   21: R_Weight_Com_Coo.now = com_comand;
002D21 E4                CLR     A
002D22 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
002D25 F0                MOVX    @DPTR,A
   22: }
002D26 904D55            MOV     DPTR,#R_Weight_Com_Coo
002D29 EF                MOV     A,R7
002D2A F0                MOVX    @DPTR,A
   23: 
002D2B 22                RET     
----- FUNCTION _CS_Scale_1186ComSend (END) -------


----- FUNCTION CS_Scale_PowerOnProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1290: void CS_Scale_PowerOnProc(bool B_Reset)
 1291: {
 1292: 	static u8_t xdata comm_doing;
 1293: 	static u8_t xdata PowerOnState;
 1294: 	
 1295: 	
 1296: 	if(B_Reset)
002D2C 30000A            JNB     B_Reset,?C0182?CS_SCALE_PROC
 1297: 		{
 1298: 		PowerOnState=CS_PowerOn_State1_Reset;
002D2F E4                CLR     A
002D30 904CB7            MOV     DPTR,#PowerOnState
002D33 F0                MOVX    @DPTR,A
 1299: 		comm_doing=false;
002D34 904CB6            MOV     DPTR,#comm_doing
002D37 F0                MOVX    @DPTR,A
002D38 22                RET     
 1300: 		return;
 1301: 		}
002D39         ?C0182?CS_SCALE_PROC:
 1302: 	
 1303: 	//-----------S1
 1304: 	if(PowerOnState==CS_PowerOn_State1_Reset)
002D39 904CB7            MOV     DPTR,#PowerOnState
002D3C E0                MOVX    A,@DPTR
002D3D 7016              JNZ     ?C0184?CS_SCALE_PROC
 1305: 		{
 1306: 		if(comm_doing==false)
002D3F 904CB6            MOV     DPTR,#comm_doing
002D42 E0                MOVX    A,@DPTR
002D43 7008              JNZ     ?C0185?CS_SCALE_PROC
 1307: 			{
 1308: 			comm_doing=true;
002D45 04                INC     A
002D46 F0                MOVX    @DPTR,A
 1309: 			CS_Scale_1186ComSend(CS_CommTo1186_Reset);
002D47 7FC5              MOV     R7,#0C5H
002D49 B121              ACALL   _CS_Scale_1186ComSend
 1310: 			}
002D4B 8008              SJMP    ?C0184?CS_SCALE_PROC
002D4D         ?C0185?CS_SCALE_PROC:
 1311: 		else
 1312: 			{
 1313: 			comm_doing=false;
002D4D E4                CLR     A
002D4E 904CB6            MOV     DPTR,#comm_doing
002D51 F0                MOVX    @DPTR,A
 1314: 			PowerOnState	= CS_PowerOn_State2_ReadOtp;
002D52 A3                INC     DPTR
002D53 04                INC     A
002D54 F0                MOVX    @DPTR,A
 1315: 			}		
 1316: 		}
002D55         ?C0184?CS_SCALE_PROC:
 1317: 	//-----------S2
 1318: 	if(PowerOnState==CS_PowerOn_State2_ReadOtp)
002D55 904CB7            MOV     DPTR,#PowerOnState
002D58 E0                MOVX    A,@DPTR
002D59 B4011A            CJNE    A,#01H,?C0187?CS_SCALE_PROC
 1319: 		{
 1320: 		if(comm_doing==false)
002D5C 904CB6            MOV     DPTR,#comm_doing
002D5F E0                MOVX    A,@DPTR
002D60 7006              JNZ     ?C0188?CS_SCALE_PROC
 1321: 			{
 1322: 			comm_doing=true;
002D62 04                INC     A
002D63 F0                MOVX    @DPTR,A
 1323: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadOtp);
002D64 7F84              MOV     R7,#084H
002D66 B121              ACALL   _CS_Scale_1186ComSend
 1324: 			
 1325: 			}
002D68         ?C0188?CS_SCALE_PROC:
 1326: 		if(CS_If1186ComSucess()==true)
002D68 D10F              ACALL   CS_If1186ComSucess
002D6A BF0109            CJNE    R7,#01H,?C0187?CS_SCALE_PROC
 1327: 			{
 1328: 			comm_doing=false;
002D6D E4                CLR     A
002D6E 904CB6            MOV     DPTR,#comm_doing
002D71 F0                MOVX    @DPTR,A
 1329: 			PowerOnState =  CS_PowerOn_State3_ReadVersion;
002D72 A3                INC     DPTR
002D73 7402              MOV     A,#02H
002D75 F0                MOVX    @DPTR,A
 1330: 			}
 1331: 		}
002D76         ?C0187?CS_SCALE_PROC:
 1332: 	//-----------S3
 1333: 	if(PowerOnState==CS_PowerOn_State3_ReadVersion)
002D76 904CB7            MOV     DPTR,#PowerOnState
002D79 E0                MOVX    A,@DPTR
002D7A B40203            CJNE    A,#02H,?C0190?CS_SCALE_PROC
 1334: 		{
 1335: 		PowerOnState =  CS_PowerOn_State4_ReadTime;		
002D7D 7403              MOV     A,#03H
002D7F F0                MOVX    @DPTR,A
 1336: 		}
002D80         ?C0190?CS_SCALE_PROC:
 1337: 	//-----------S4
 1338: 	if(PowerOnState==CS_PowerOn_State4_ReadTime)
002D80 904CB7            MOV     DPTR,#PowerOnState
002D83 E0                MOVX    A,@DPTR
002D84 B4031A            CJNE    A,#03H,?C0191?CS_SCALE_PROC
 1339: 		{
 1340: 		if(comm_doing==false)
002D87 904CB6            MOV     DPTR,#comm_doing
002D8A E0                MOVX    A,@DPTR
002D8B 7006              JNZ     ?C0192?CS_SCALE_PROC
 1341: 			{
 1342: 			comm_doing=true;
002D8D 04                INC     A
002D8E F0                MOVX    @DPTR,A
 1343: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadTime);
002D8F 7F82              MOV     R7,#082H
002D91 B121              ACALL   _CS_Scale_1186ComSend
 1344: 			}
002D93         ?C0192?CS_SCALE_PROC:
 1345: 		if(CS_If1186ComSucess()==true)
002D93 D10F              ACALL   CS_If1186ComSucess
002D95 BF0109            CJNE    R7,#01H,?C0191?CS_SCALE_PROC
 1346: 			{
 1347: 			comm_doing=false;
002D98 E4                CLR     A
002D99 904CB6            MOV     DPTR,#comm_doing
002D9C F0                MOVX    @DPTR,A
 1348: 			PowerOnState =  CS_PowerOn_State5_SetOpenWeight;	
002D9D A3                INC     DPTR
002D9E 7404              MOV     A,#04H
002DA0 F0                MOVX    @DPTR,A
 1349: 			}
 1350: 		}
002DA1         ?C0191?CS_SCALE_PROC:
 1351: 	//-----------S5
 1352: 	if(PowerOnState==CS_PowerOn_State5_SetOpenWeight)
002DA1 904CB7            MOV     DPTR,#PowerOnState
002DA4 E0                MOVX    A,@DPTR
002DA5 B4041A            CJNE    A,#04H,?C0194?CS_SCALE_PROC
 1353: 		{
 1354: 		if(comm_doing==false)
002DA8 904CB6            MOV     DPTR,#comm_doing
002DAB E0                MOVX    A,@DPTR
002DAC 7006              JNZ     ?C0195?CS_SCALE_PROC
 1355: 			{
 1356: 			comm_doing=true;
002DAE 04                INC     A
002DAF F0                MOVX    @DPTR,A
 1357: 			CS_Scale_1186ComSend(CS_CommTo1186_SetOpenWeight);
002DB0 7FA1              MOV     R7,#0A1H
002DB2 B121              ACALL   _CS_Scale_1186ComSend
 1358: 			}
002DB4         ?C0195?CS_SCALE_PROC:
 1359: 		if(CS_If1186ComSucess()==true)
002DB4 D10F              ACALL   CS_If1186ComSucess
002DB6 BF0109            CJNE    R7,#01H,?C0194?CS_SCALE_PROC
 1360: 			{
 1361: 			comm_doing=false;
002DB9 E4                CLR     A
002DBA 904CB6            MOV     DPTR,#comm_doing
002DBD F0                MOVX    @DPTR,A
 1362: 			PowerOnState =  CS_PowerOn_State6_ShowOpenPic;
002DBE A3                INC     DPTR
002DBF 7405              MOV     A,#05H
002DC1 F0                MOVX    @DPTR,A
 1363: 			}
 1364: 		}
002DC2         ?C0194?CS_SCALE_PROC:
 1365: 	//-----------S6
 1366: 	if(PowerOnState==CS_PowerOn_State6_ShowOpenPic)
002DC2 904CB7            MOV     DPTR,#PowerOnState
002DC5 E0                MOVX    A,@DPTR
002DC6 6405              XRL     A,#05H
002DC8 7028              JNZ     ?C0197?CS_SCALE_PROC
 1367: 		{
 1368: 		if(comm_doing==false)
002DCA 904CB6            MOV     DPTR,#comm_doing
002DCD E0                MOVX    A,@DPTR
002DCE 700F              JNZ     ?C0198?CS_SCALE_PROC
 1369: 			{
 1370: 			comm_doing=true;	
002DD0 04                INC     A
002DD1 F0                MOVX    @DPTR,A
 1371: 			CS_ScaleDisplay_FreshBuf(DisplayData,8888);
002DD2 7DB8              MOV     R5,#0B8H
002DD4 7C22              MOV     R4,#022H
002DD6 7F21              MOV     R7,#021H
002DD8 1215F8            LCALL   _CS_ScaleDisplay_FreshBuf
 1372: 			CS_Scale_1186ComSend(CS_CommTo1186_LcdDisplay);
002DDB 7FE0              MOV     R7,#0E0H
002DDD B121              ACALL   _CS_Scale_1186ComSend
 1373: 			}
002DDF         ?C0198?CS_SCALE_PROC:
 1374: 		if(CS_If1186ComSucess()==true)
002DDF D10F              ACALL   CS_If1186ComSucess
002DE1 BF010E            CJNE    R7,#01H,?C0197?CS_SCALE_PROC
 1375: 			{	
 1376: 			comm_doing=false;
002DE4 E4                CLR     A
002DE5 904CB6            MOV     DPTR,#comm_doing
002DE8 F0                MOVX    @DPTR,A
 1377: 			PowerOnState =	CS_PowerOn_State7_ShowOpenPicWait;
002DE9 A3                INC     DPTR
002DEA 7406              MOV     A,#06H
002DEC F0                MOVX    @DPTR,A
 1378: 			CS_SoftTimer(ResetSoftTimer);
002DED 7F02              MOV     R7,#02H
002DEF 120F15            LCALL   _CS_SoftTimer
 1379: 			}		
 1380: 		}
002DF2         ?C0197?CS_SCALE_PROC:
 1381: 	//-----------S7
 1382: 	if(PowerOnState==CS_PowerOn_State7_ShowOpenPicWait)
002DF2 904CB7            MOV     DPTR,#PowerOnState
002DF5 E0                MOVX    A,@DPTR
002DF6 B40615            CJNE    A,#06H,?C0183?CS_SCALE_PROC
 1383: 		{
 1384: 		if(CS_SoftTimer(GetSoftTimerTime)>200)
002DF9 7F01              MOV     R7,#01H
002DFB 120F15            LCALL   _CS_SoftTimer
002DFE EF                MOV     A,R7
002DFF D3                SETB    C
002E00 94C8              SUBB    A,#0C8H
002E02 400A              JC      ?C0183?CS_SCALE_PROC
 1385: 			{
 1386: 			R_Scale_state = CS_Scale_state_weighting;
002E04 904CC5            MOV     DPTR,#R_Scale_state
002E07 7401              MOV     A,#01H
002E09 F0                MOVX    @DPTR,A
 1387: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadAd);
002E0A 7F80              MOV     R7,#080H
002E0C B121              ACALL   _CS_Scale_1186ComSend
 1388: 			}
 1389: 		}
 1390: 
 1391: }
002E0E         ?C0183?CS_SCALE_PROC:
002E0E 22                RET     
----- FUNCTION CS_Scale_PowerOnProc (END) -------


----- FUNCTION CS_If1186ComSucess (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   25: u8_t CS_If1186ComSucess(void)
   26: {
   27: return R_Weight_Com_Coo.sucess;
   28: }
002E0F 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
002E12 E0                MOVX    A,@DPTR
002E13 FF                MOV     R7,A
   29: 
002E14 22                RET     
----- FUNCTION CS_If1186ComSucess (END) -------


----- FUNCTION _CS_Scale_SteadyProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  767: void CS_Scale_SteadyProc(u8_t option)
  768: {
;---- Variable 'option' assigned to Register 'R7' ----
  769: 	u16_t	R_AD_BUF;	
  770: 
  771: 	static	u8_t xdata B_Debug_Send;	
  772: 	static 	u8_t xdata ReadUTC;
  773: 	UserMeasureData SendData;
  774: 
  775: 	if(option==SteadyProcReset)
002E15 EF                MOV     A,R7
002E16 7005              JNZ     ?C0109?CS_SCALE_PROC
  776: 		{
  777: 		B_Debug_Send=false;
002E18 904CA7            MOV     DPTR,#B_Debug_Send
002E1B F0                MOVX    @DPTR,A
002E1C 22                RET     
  778: 		return;
  779: 		}
002E1D         ?C0109?CS_SCALE_PROC:
  780: 	
  781: 	
  782: 		if(CS_Scale_JudgeSteady(GetIfHeavySteady) == true)
002E1D 7F03              MOV     R7,#03H
002E1F F14E              ACALL   _CS_Scale_JudgeSteady
002E21 BF0112            CJNE    R7,#01H,?C0111?CS_SCALE_PROC
  783: 			{
  784: 			
  785: 			CS_Scale_JudgeSteady(ResetSteady);
002E24 7F01              MOV     R7,#01H
002E26 F14E              ACALL   _CS_Scale_JudgeSteady
  786: 		
  787: 			CS_Scale_ZeroProc(ClrLockDownCheckFlag,0);
002E28 E4                CLR     A
002E29 FD                MOV     R5,A
002E2A FC                MOV     R4,A
002E2B 7F08              MOV     R7,#08H
002E2D 1212F0            LCALL   _CS_Scale_ZeroProc
  788: 			ReadUTC = false;	//初始化读ADC
002E30 E4                CLR     A
002E31 904CA8            MOV     DPTR,#ReadUTC
002E34 F0                MOVX    @DPTR,A
  789: 			}
002E35 22                RET     
002E36         ?C0111?CS_SCALE_PROC:
  790: 		else
  791: 			{
  792: 			
  793: 			/*
  794: 			if(wechatStatus == WECHAT_ST_OK&&B_Debug_Send==false)
  795: 				{
  796: 				sendMeasureData();
  797: 				B_Debug_Send=true;
  798: 				}
  799: 			*/		
  800: 			if(B_Debug_Send==false)
002E36 904CA7            MOV     DPTR,#B_Debug_Send
002E39 E0                MOVX    A,@DPTR
002E3A 705D              JNZ     ?C0113?CS_SCALE_PROC
  801: 				{
  802: 				
  803: 				if(ReadUTC==false)
002E3C A3                INC     DPTR
002E3D E0                MOVX    A,@DPTR
002E3E 7006              JNZ     ?C0114?CS_SCALE_PROC
  804: 					{
  805: 					ReadUTC=true;
002E40 04                INC     A
002E41 F0                MOVX    @DPTR,A
  806: 					CS_Scale_1186ComSend(CS_CommTo1186_ReadTime);	
002E42 7F82              MOV     R7,#082H
002E44 B121              ACALL   _CS_Scale_1186ComSend
  807: 					}
002E46         ?C0114?CS_SCALE_PROC:
  808: 				
  809: 				if(CS_If1186ComSucess()==true)
002E46 D10F              ACALL   CS_If1186ComSucess
002E48 EF                MOV     A,R7
002E49 6401              XRL     A,#01H
002E4B 706E              JNZ     ?C0110?CS_SCALE_PROC
  810: 					{
  811: 					
  812: 					
  813: 					ReadUTC=false;
002E4D 904CA8            MOV     DPTR,#ReadUTC
002E50 F0                MOVX    @DPTR,A
  814: 					
  815: 					SendData.UTCTime[0]=R_1186_RTC[0];
002E51 904CD3            MOV     DPTR,#R_1186_RTC
002E54 E0                MOVX    A,@DPTR
002E55 904E15            MOV     DPTR,#SendData+02H
002E58 F0                MOVX    @DPTR,A
  816: 					SendData.UTCTime[1]=R_1186_RTC[1];	
002E59 904CD4            MOV     DPTR,#R_1186_RTC+01H
002E5C E0                MOVX    A,@DPTR
002E5D 904E16            MOV     DPTR,#SendData+03H
002E60 F0                MOVX    @DPTR,A
  817: 					SendData.UTCTime[2]=R_1186_RTC[2];	
002E61 904CD5            MOV     DPTR,#R_1186_RTC+02H
002E64 E0                MOVX    A,@DPTR
002E65 904E17            MOV     DPTR,#SendData+04H
002E68 F0                MOVX    @DPTR,A
  818: 					SendData.UTCTime[3]=R_1186_RTC[3];	
002E69 904CD6            MOV     DPTR,#R_1186_RTC+03H
002E6C E0                MOVX    A,@DPTR
002E6D 904E18            MOV     DPTR,#SendData+05H
002E70 F0                MOVX    @DPTR,A
  819: 					SendData.weight=ESWAP(R_UnitWeight.origin);
002E71 904CC9            MOV     DPTR,#R_UnitWeight
002E74 E0                MOVX    A,@DPTR
002E75 FC                MOV     R4,A
002E76 A3                INC     DPTR
002E77 E0                MOVX    A,@DPTR
002E78 FA                MOV     R2,A
002E79 EC                MOV     A,R4
002E7A FF                MOV     R7,A
002E7B EA                MOV     A,R2
002E7C FE                MOV     R6,A
002E7D EF                MOV     A,R7
002E7E 904E13            MOV     DPTR,#SendData
002E81 EE                MOV     A,R6
002E82 F0                MOVX    @DPTR,A
002E83 A3                INC     DPTR
002E84 EF                MOV     A,R7
002E85 F0                MOVX    @DPTR,A
  820: 					QueuePush(&SendData);
002E86 7B01              MOV     R3,#01H
002E88 7A4E              MOV     R2,#HIGH SendData
002E8A 7913              MOV     R1,#LOW SendData
002E8C 123D90            LCALL   _QueuePush
  821: 					B_Debug_Send=true;
002E8F 904CA7            MOV     DPTR,#B_Debug_Send
002E92 7401              MOV     A,#01H
002E94 F0                MOVX    @DPTR,A
  822: 
  823: 					CS_Scale_1186ComSend(CS_CommTo1186_ReadAd);
002E95 7F80              MOV     R7,#080H
002E97 A121              AJMP    _CS_Scale_1186ComSend
  824: 			
  825: 					//CS_SoftTimer(ResetSoftTimer);	
  826: 					
  827: 					}
  828: 				
  829: 				}
002E99         ?C0113?CS_SCALE_PROC:
  830: 			else
  831: 				{
  832: 				R_AD_BUF = CS_Scale_GetDeltaAD(GetDeltaAD);
002E99 E4                CLR     A
002E9A FF                MOV     R7,A
002E9B 1230B7            LCALL   _CS_Scale_GetDeltaAD
;---- Variable 'R_AD_BUF' assigned to Register 'R6/R7' ----
  833: 				R_AD_BUF = CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
002E9E AD07              MOV     R5,AR7
002EA0 AC06              MOV     R4,AR6
002EA2 E4                CLR     A
002EA3 FF                MOV     R7,A
002EA4 123118            LCALL   _CS_Scale_AdcFilter
  834: 				CS_Scale_GetWeight(R_AD_BUF);				
002EA7 1234C8            LCALL   _CS_Scale_GetWeight
  835: 				CS_Scale_ReturnLock();
002EAA D1BC              ACALL   CS_Scale_ReturnLock
  836: 				
  837: 				 R_UnitWeight.origin = R_Weight_Lock;	//锁定重量
002EAC 904CC0            MOV     DPTR,#R_Weight_Lock
002EAF E0                MOVX    A,@DPTR
002EB0 FF                MOV     R7,A
002EB1 A3                INC     DPTR
002EB2 E0                MOVX    A,@DPTR
002EB3 904CC9            MOV     DPTR,#R_UnitWeight
002EB6 CF                XCH     A,R7
002EB7 F0                MOVX    @DPTR,A
002EB8 A3                INC     DPTR
002EB9 EF                MOV     A,R7
002EBA F0                MOVX    @DPTR,A
  838: 				}
  839: 			}
  840: 	
  841: 
  842: 			/*
  843: 			if(CS_SoftTimer(GetSoftTimerTime)<200)
  844: 				{
  845: 			R_Debug_temp=SendData.UTCTime;
  846: 			CS_ScaleDisplay_Debug();			
  847: 			return;
  848: 				}
  849: 			*/	
  850: 			/* B_Debug_Test =true;
  851: 			if(B_Debug_Test)
  852: 				{
  853: 				R_Debug_temp=888;
  854: 				CS_ScaleDisplay_Debug();
  855: 				while(1);
  856: 				}
  857: 			*/
  858: }
002EBB         ?C0110?CS_SCALE_PROC:
002EBB 22                RET     
----- FUNCTION _CS_Scale_SteadyProc (END) -------


----- FUNCTION CS_Scale_ReturnLock (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  862: void CS_Scale_ReturnLock(void)
  863: {
  864: 	u16_t	weight_temp;
  865: 	
  866: 	if( R_UnitWeight.origin > R_Weight_Lock)
002EBC 904CC0            MOV     DPTR,#R_Weight_Lock
002EBF E0                MOVX    A,@DPTR
002EC0 FE                MOV     R6,A
002EC1 A3                INC     DPTR
002EC2 E0                MOVX    A,@DPTR
002EC3 FF                MOV     R7,A
002EC4 904CC9            MOV     DPTR,#R_UnitWeight
002EC7 E0                MOVX    A,@DPTR
002EC8 FC                MOV     R4,A
002EC9 A3                INC     DPTR
002ECA E0                MOVX    A,@DPTR
002ECB FD                MOV     R5,A
002ECC D3                SETB    C
002ECD 9F                SUBB    A,R7
002ECE EC                MOV     A,R4
002ECF 9E                SUBB    A,R6
002ED0 401F              JC      ?C0117?CS_SCALE_PROC
  867: 		{
  868: 		weight_temp = R_UnitWeight.origin -R_Weight_Lock;
002ED2 ED                MOV     A,R5
002ED3 9F                SUBB    A,R7
002ED4 FF                MOV     R7,A
002ED5 EC                MOV     A,R4
002ED6 9E                SUBB    A,R6
002ED7 FE                MOV     R6,A
002ED8 904E57            MOV     DPTR,#weight_temp
002EDB F0                MOVX    @DPTR,A
002EDC A3                INC     DPTR
002EDD EF                MOV     A,R7
002EDE F0                MOVX    @DPTR,A
  869: 		if(weight_temp >= CS_Scale_RetLockWeightInc)
002EDF C3                CLR     C
002EE0 94E8              SUBB    A,#0E8H
002EE2 EE                MOV     A,R6
002EE3 9403              SUBB    A,#03H
002EE5 403C              JC      ?C0121?CS_SCALE_PROC
  870: 			{
  871: 			R_Scale_state = CS_Scale_state_weighting;
002EE7 904CC5            MOV     DPTR,#R_Scale_state
002EEA 7401              MOV     A,#01H
002EEC F0                MOVX    @DPTR,A
  872: 			CS_Scale_TimeOutProc(CS_Reset_AllTime);
002EED 7F06              MOV     R7,#06H
002EEF 8102              AJMP    _CS_Scale_TimeOutProc
  873: 			}
  874: 		}
002EF1         ?C0117?CS_SCALE_PROC:
  875: 	else
  876: 		{
  877: 		weight_temp = R_Weight_Lock -R_UnitWeight.origin;
002EF1 904CC9            MOV     DPTR,#R_UnitWeight
002EF4 E0                MOVX    A,@DPTR
002EF5 FE                MOV     R6,A
002EF6 A3                INC     DPTR
002EF7 E0                MOVX    A,@DPTR
002EF8 FF                MOV     R7,A
002EF9 C3                CLR     C
002EFA 904CC1            MOV     DPTR,#R_Weight_Lock+01H
002EFD E0                MOVX    A,@DPTR
002EFE 9F                SUBB    A,R7
002EFF FF                MOV     R7,A
002F00 904CC0            MOV     DPTR,#R_Weight_Lock
002F03 E0                MOVX    A,@DPTR
002F04 9E                SUBB    A,R6
002F05 FE                MOV     R6,A
002F06 904E57            MOV     DPTR,#weight_temp
002F09 F0                MOVX    @DPTR,A
002F0A A3                INC     DPTR
002F0B EF                MOV     A,R7
002F0C F0                MOVX    @DPTR,A
  878: 		if(weight_temp >= CS_Scale_RetLockWeightDec)
002F0D C3                CLR     C
002F0E 942C              SUBB    A,#02CH
002F10 EE                MOV     A,R6
002F11 9401              SUBB    A,#01H
002F13 400E              JC      ?C0121?CS_SCALE_PROC
  879: 			{
  880: 			
  881: 			R_Scale_state = CS_Scale_state_weighting;
002F15 904CC5            MOV     DPTR,#R_Scale_state
002F18 7401              MOV     A,#01H
002F1A F0                MOVX    @DPTR,A
  882: 			CS_Scale_LockProc(SetDowningLock);
002F1B FF                MOV     R7,A
002F1C 123619            LCALL   _CS_Scale_LockProc
  883: 			CS_Scale_TimeOutProc(CS_Reset_AllTime);
002F1F 7F06              MOV     R7,#06H
002F21 9102              ACALL   _CS_Scale_TimeOutProc
  884: 			
  885: 			}
  886: 		}
  887: 
  888: }
002F23         ?C0121?CS_SCALE_PROC:
002F23 22                RET     
----- FUNCTION CS_Scale_ReturnLock (END) -------


----- FUNCTION CS_Scale_WeightProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  202: void CS_Scale_WeightProc(void)
  203: {
  204: 	u16_t	R_AD_BUF;
  205: 	
  206: 	R_AD_BUF = CS_Scale_GetDeltaAD(GetDeltaAD);
002F24 E4                CLR     A
002F25 FF                MOV     R7,A
002F26 1230B7            LCALL   _CS_Scale_GetDeltaAD
;---- Variable 'R_AD_BUF' assigned to Register 'R6/R7' ----
  207: 	R_AD_BUF = CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
002F29 AD07              MOV     R5,AR7
002F2B AC06              MOV     R4,AR6
002F2D E4                CLR     A
002F2E FF                MOV     R7,A
002F2F 123118            LCALL   _CS_Scale_AdcFilter
  208: 	CS_Scale_GetWeight(R_AD_BUF);
002F32 1234C8            LCALL   _CS_Scale_GetWeight
  209: 	CS_Scale_ZeroProc(RunningZero,0);
002F35 E4                CLR     A
002F36 FD                MOV     R5,A
002F37 FC                MOV     R4,A
002F38 7F07              MOV     R7,#07H
002F3A 1212F0            LCALL   _CS_Scale_ZeroProc
  210: 	CS_Scale_LockProc(LockProcRun);
002F3D E4                CLR     A
002F3E FF                MOV     R7,A
002F3F 123619            LCALL   _CS_Scale_LockProc
  211: 	CS_Scale_JudgeOverLoad(0);
002F42 E4                CLR     A
002F43 FF                MOV     R7,A
002F44 123687            LCALL   _CS_Scale_JudgeOverLoad
  212: 	CS_Scale_JudgeLowBat(0);
002F47 E4                CLR     A
002F48 FF                MOV     R7,A
002F49 1217E5            LCALL   _CS_Scale_JudgeLowBat
  213: 	CS_Scale_JudgeSteady(JudgeSteadyRun);
002F4C E4                CLR     A
002F4D FF                MOV     R7,A
;----                  JMP     _CS_Scale_JudgeSteady
  214: 	
----- FUNCTION CS_Scale_WeightProc (END) -------


----- FUNCTION _CS_Scale_JudgeSteady (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  678: u8_t CS_Scale_JudgeSteady(u8_t option)
  679: {
;---- Variable 'option' assigned to Register 'R7' ----
  680: 
  681: 	u16_t	weight_temp;
  682: 	u16_t	R_Weight_Temp;
  683: 	static	u16_t xdata R_Weight_kg_old;
  684: 	static	u8_t	  xdata R_Weight_SameTimes;
  685: 	static	u8_t xdata B_Weight_SmallSteady;		//小重量稳定标志
  686: 	static	u8_t xdata B_Weight_HeavySteady;	//大重量稳定标志
  687: 	
  688: 	if(option==ResetSteady)
002F4E EF                MOV     A,R7
002F4F B4010B            CJNE    A,#01H,?C0091?CS_SCALE_PROC
  689: 		{
  690: 		R_Weight_SameTimes = 0;
002F52 E4                CLR     A
002F53 904CA4            MOV     DPTR,#R_Weight_SameTimes
002F56 F0                MOVX    @DPTR,A
  691: 		B_Weight_SmallSteady = false;
002F57 A3                INC     DPTR
002F58 F0                MOVX    @DPTR,A
  692: 		B_Weight_HeavySteady = false;
002F59 A3                INC     DPTR
002F5A F0                MOVX    @DPTR,A
  693: 		return 0;
002F5B FF                MOV     R7,A
002F5C 22                RET     
  694: 		}	
002F5D         ?C0091?CS_SCALE_PROC:
  695: 
  696: 	if(option==GetIfSmallSteady)
002F5D EF                MOV     A,R7
002F5E B40206            CJNE    A,#02H,?C0093?CS_SCALE_PROC
  697: 		return B_Weight_SmallSteady;
002F61 904CA5            MOV     DPTR,#B_Weight_SmallSteady
002F64 E0                MOVX    A,@DPTR
002F65 FF                MOV     R7,A
002F66 22                RET     
002F67         ?C0093?CS_SCALE_PROC:
  698: 
  699: 	if(option==GetIfHeavySteady)
002F67 EF                MOV     A,R7
002F68 B40306            CJNE    A,#03H,?C0094?CS_SCALE_PROC
  700: 		return B_Weight_HeavySteady;
002F6B 904CA6            MOV     DPTR,#B_Weight_HeavySteady
002F6E E0                MOVX    A,@DPTR
002F6F FF                MOV     R7,A
002F70 22                RET     
002F71         ?C0094?CS_SCALE_PROC:
  701: 	
  702: 	if(CS_Scale_LockProc(GetIfLock)==false)
002F71 7F02              MOV     R7,#02H
002F73 123619            LCALL   _CS_Scale_LockProc
002F76 EF                MOV     A,R7
002F77 6003              JZ      $ + 5H
002F79 0230B4            LJMP    ?C0095?CS_SCALE_PROC
  703: 		{
  704: 	
  705: 		if(R_UnitWeight.origin > R_Weight_kg_old)
002F7C 904CA2            MOV     DPTR,#R_Weight_kg_old
002F7F E0                MOVX    A,@DPTR
002F80 FE                MOV     R6,A
002F81 A3                INC     DPTR
002F82 E0                MOVX    A,@DPTR
002F83 FF                MOV     R7,A
002F84 904CC9            MOV     DPTR,#R_UnitWeight
002F87 E0                MOVX    A,@DPTR
002F88 FC                MOV     R4,A
002F89 A3                INC     DPTR
002F8A E0                MOVX    A,@DPTR
002F8B FD                MOV     R5,A
002F8C D3                SETB    C
002F8D 9F                SUBB    A,R7
002F8E EC                MOV     A,R4
002F8F 9E                SUBB    A,R6
002F90 400E              JC      ?C0096?CS_SCALE_PROC
  706: 			weight_temp = R_UnitWeight.origin -R_Weight_kg_old;
002F92 ED                MOV     A,R5
002F93 9F                SUBB    A,R7
002F94 FF                MOV     R7,A
002F95 EC                MOV     A,R4
002F96 9E                SUBB    A,R6
002F97 904E37            MOV     DPTR,#weight_temp
002F9A F0                MOVX    @DPTR,A
002F9B A3                INC     DPTR
002F9C EF                MOV     A,R7
002F9D F0                MOVX    @DPTR,A
002F9E 801B              SJMP    ?C0097?CS_SCALE_PROC
002FA0         ?C0096?CS_SCALE_PROC:
  707: 		else
  708: 			weight_temp = R_Weight_kg_old -R_UnitWeight.origin;
002FA0 904CC9            MOV     DPTR,#R_UnitWeight
002FA3 E0                MOVX    A,@DPTR
002FA4 FE                MOV     R6,A
002FA5 A3                INC     DPTR
002FA6 E0                MOVX    A,@DPTR
002FA7 FF                MOV     R7,A
002FA8 C3                CLR     C
002FA9 904CA3            MOV     DPTR,#R_Weight_kg_old+01H
002FAC E0                MOVX    A,@DPTR
002FAD 9F                SUBB    A,R7
002FAE FF                MOV     R7,A
002FAF 904CA2            MOV     DPTR,#R_Weight_kg_old
002FB2 E0                MOVX    A,@DPTR
002FB3 9E                SUBB    A,R6
002FB4 904E37            MOV     DPTR,#weight_temp
002FB7 F0                MOVX    @DPTR,A
002FB8 A3                INC     DPTR
002FB9 EF                MOV     A,R7
002FBA F0                MOVX    @DPTR,A
002FBB         ?C0097?CS_SCALE_PROC:
  709: 		
  710: 		if(weight_temp <  CS_Scale_SameWeightRange)
002FBB C3                CLR     C
002FBC 904E38            MOV     DPTR,#weight_temp+01H
002FBF E0                MOVX    A,@DPTR
002FC0 940A              SUBB    A,#0AH
002FC2 904E37            MOV     DPTR,#weight_temp
002FC5 E0                MOVX    A,@DPTR
002FC6 9400              SUBB    A,#00H
002FC8 500E              JNC     ?C0098?CS_SCALE_PROC
  711: 			{
  712: 			if(R_Weight_SameTimes<255)
002FCA 904CA4            MOV     DPTR,#R_Weight_SameTimes
002FCD E0                MOVX    A,@DPTR
002FCE C3                CLR     C
002FCF 94FF              SUBB    A,#0FFH
002FD1 500A              JNC     ?C0100?CS_SCALE_PROC
  713: 				R_Weight_SameTimes++;
002FD3 E0                MOVX    A,@DPTR
002FD4 04                INC     A
002FD5 F0                MOVX    @DPTR,A
  714: 			}
002FD6 8005              SJMP    ?C0100?CS_SCALE_PROC
002FD8         ?C0098?CS_SCALE_PROC:
  715: 		else
  716: 			R_Weight_SameTimes = 0;
002FD8 E4                CLR     A
002FD9 904CA4            MOV     DPTR,#R_Weight_SameTimes
002FDC F0                MOVX    @DPTR,A
002FDD         ?C0100?CS_SCALE_PROC:
  717: 	
  718: 		
  719: 		R_Weight_kg_old = R_UnitWeight.origin;
002FDD 904CC9            MOV     DPTR,#R_UnitWeight
002FE0 E0                MOVX    A,@DPTR
002FE1 FE                MOV     R6,A
002FE2 A3                INC     DPTR
002FE3 E0                MOVX    A,@DPTR
002FE4 FF                MOV     R7,A
002FE5 904CA2            MOV     DPTR,#R_Weight_kg_old
002FE8 EE                MOV     A,R6
002FE9 F0                MOVX    @DPTR,A
002FEA A3                INC     DPTR
002FEB EF                MOV     A,R7
002FEC F0                MOVX    @DPTR,A
  720: 
  721: 		B_Weight_SmallSteady = false;
002FED E4                CLR     A
002FEE 904CA5            MOV     DPTR,#B_Weight_SmallSteady
002FF1 F0                MOVX    @DPTR,A
  722: 		B_Weight_HeavySteady = false;
002FF2 A3                INC     DPTR
002FF3 F0                MOVX    @DPTR,A
  723: 		
  724: 		if(R_UnitWeight.origin < CS_Scale_MinLockWeight)
002FF4 C3                CLR     C
002FF5 EF                MOV     A,R7
002FF6 94FA              SUBB    A,#0FAH
002FF8 EE                MOV     A,R6
002FF9 9400              SUBB    A,#00H
002FFB 5010              JNC     ?C0101?CS_SCALE_PROC
  725: 			{
  726: 			if(R_Weight_SameTimes>CS_SmallWeight_Steadytimes)
002FFD 904CA4            MOV     DPTR,#R_Weight_SameTimes
003000 E0                MOVX    A,@DPTR
003001 9406              SUBB    A,#06H
003003 5002              JNC     $ + 4H
003005 01B4              AJMP    ?C0095?CS_SCALE_PROC
  727: 				B_Weight_SmallSteady = true;		
003007 A3                INC     DPTR
003008 7401              MOV     A,#01H
00300A F0                MOVX    @DPTR,A
  728: 			}
00300B 01B4              AJMP    ?C0095?CS_SCALE_PROC
00300D         ?C0101?CS_SCALE_PROC:
  729: 		else
  730: 			{			
  731: 			if(R_Weight_SameTimes>CS_BigWeight_Steadytimes)
00300D 904CA4            MOV     DPTR,#R_Weight_SameTimes
003010 E0                MOVX    A,@DPTR
003011 D3                SETB    C
003012 9405              SUBB    A,#05H
003014 5002              JNC     $ + 4H
003016 01B4              AJMP    ?C0095?CS_SCALE_PROC
  732: 				{
  733: 				B_Weight_HeavySteady = true;	
003018 904CA6            MOV     DPTR,#B_Weight_HeavySteady
00301B 7401              MOV     A,#01H
00301D F0                MOVX    @DPTR,A
  734: 
  735: 				if(R_UnitWeight.origin>R_Weight_Mem)
00301E 904CC3            MOV     DPTR,#R_Weight_Mem
003021 E0                MOVX    A,@DPTR
003022 FE                MOV     R6,A
003023 A3                INC     DPTR
003024 E0                MOVX    A,@DPTR
003025 FF                MOV     R7,A
003026 904CC9            MOV     DPTR,#R_UnitWeight
003029 E0                MOVX    A,@DPTR
00302A FC                MOV     R4,A
00302B A3                INC     DPTR
00302C E0                MOVX    A,@DPTR
00302D FD                MOV     R5,A
00302E D3                SETB    C
00302F 9F                SUBB    A,R7
003030 EC                MOV     A,R4
003031 9E                SUBB    A,R6
003032 400E              JC      ?C0105?CS_SCALE_PROC
  736: 				R_Weight_Temp = R_UnitWeight.origin -R_Weight_Mem;
003034 ED                MOV     A,R5
003035 9F                SUBB    A,R7
003036 FF                MOV     R7,A
003037 EC                MOV     A,R4
003038 9E                SUBB    A,R6
003039 904E39            MOV     DPTR,#R_Weight_Temp
00303C F0                MOVX    @DPTR,A
00303D A3                INC     DPTR
00303E EF                MOV     A,R7
00303F F0                MOVX    @DPTR,A
003040 801B              SJMP    ?C0106?CS_SCALE_PROC
003042         ?C0105?CS_SCALE_PROC:
  737: 				else
  738: 				R_Weight_Temp = R_Weight_Mem - R_UnitWeight.origin;
003042 904CC9            MOV     DPTR,#R_UnitWeight
003045 E0                MOVX    A,@DPTR
003046 FE                MOV     R6,A
003047 A3                INC     DPTR
003048 E0                MOVX    A,@DPTR
003049 FF                MOV     R7,A
00304A C3                CLR     C
00304B 904CC4            MOV     DPTR,#R_Weight_Mem+01H
00304E E0                MOVX    A,@DPTR
00304F 9F                SUBB    A,R7
003050 FF                MOV     R7,A
003051 904CC3            MOV     DPTR,#R_Weight_Mem
003054 E0                MOVX    A,@DPTR
003055 9E                SUBB    A,R6
003056 904E39            MOV     DPTR,#R_Weight_Temp
003059 F0                MOVX    @DPTR,A
00305A A3                INC     DPTR
00305B EF                MOV     A,R7
00305C F0                MOVX    @DPTR,A
00305D         ?C0106?CS_SCALE_PROC:
  739: 
  740: 				//在记忆范围内记忆
  741: 				if(R_UnitWeight.origin > ScaleStartMemoryWeight)
00305D D3                SETB    C
00305E 904CCA            MOV     DPTR,#R_UnitWeight+01H
003061 E0                MOVX    A,@DPTR
003062 9458              SUBB    A,#058H
003064 904CC9            MOV     DPTR,#R_UnitWeight
003067 E0                MOVX    A,@DPTR
003068 9402              SUBB    A,#02H
00306A 401D              JC      ?C0107?CS_SCALE_PROC
  742: 					{
  743: 					if(R_Weight_Temp<CS_MemoryRange)
00306C 904E3A            MOV     DPTR,#R_Weight_Temp+01H
00306F E0                MOVX    A,@DPTR
003070 9419              SUBB    A,#019H
003072 904E39            MOV     DPTR,#R_Weight_Temp
003075 E0                MOVX    A,@DPTR
003076 9400              SUBB    A,#00H
003078 500F              JNC     ?C0107?CS_SCALE_PROC
  744: 					R_UnitWeight.origin = R_Weight_Mem;
00307A 904CC3            MOV     DPTR,#R_Weight_Mem
00307D E0                MOVX    A,@DPTR
00307E FF                MOV     R7,A
00307F A3                INC     DPTR
003080 E0                MOVX    A,@DPTR
003081 904CC9            MOV     DPTR,#R_UnitWeight
003084 CF                XCH     A,R7
003085 F0                MOVX    @DPTR,A
003086 A3                INC     DPTR
003087 EF                MOV     A,R7
003088 F0                MOVX    @DPTR,A
  745: 					}
003089         ?C0107?CS_SCALE_PROC:
  746: 			
  747: 				R_Weight_Lock = R_UnitWeight.origin;
003089 904CC9            MOV     DPTR,#R_UnitWeight
00308C E0                MOVX    A,@DPTR
00308D FE                MOV     R6,A
00308E A3                INC     DPTR
00308F E0                MOVX    A,@DPTR
003090 FF                MOV     R7,A
003091 904CC0            MOV     DPTR,#R_Weight_Lock
003094 EE                MOV     A,R6
003095 F0                MOVX    @DPTR,A
003096 A3                INC     DPTR
003097 EF                MOV     A,R7
003098 F0                MOVX    @DPTR,A
  748: 				R_Weight_Mem = R_UnitWeight.origin;
003099 904CC3            MOV     DPTR,#R_Weight_Mem
00309C EE                MOV     A,R6
00309D F0                MOVX    @DPTR,A
00309E A3                INC     DPTR
00309F EF                MOV     A,R7
0030A0 F0                MOVX    @DPTR,A
  749: 				
  750: 				R_Scale_state = CS_Scale_state_locking;
0030A1 A3                INC     DPTR
0030A2 7404              MOV     A,#04H
0030A4 F0                MOVX    @DPTR,A
  751: 				CS_SoftTimer(ResetSoftTimer);		//软件定时器开始用于锁定闪显示计时
0030A5 7F02              MOV     R7,#02H
0030A7 120F15            LCALL   _CS_SoftTimer
  752: 				CS_Scale_SteadyProc(SteadyProcReset);
0030AA E4                CLR     A
0030AB FF                MOV     R7,A
0030AC 122E15            LCALL   _CS_Scale_SteadyProc
  753: 				CS_Scale_TimeOutProc(CS_Reset_AllTime);
0030AF 7F06              MOV     R7,#06H
0030B1 122C02            LCALL   _CS_Scale_TimeOutProc
  754: 				}
  755: 			}
  756: 		}
0030B4         ?C0095?CS_SCALE_PROC:
  757: 	return 0;
0030B4 7F00              MOV     R7,#00H
  758: }
0030B6 22                RET     
----- FUNCTION _CS_Scale_JudgeSteady (END) -------


----- FUNCTION _CS_Scale_GetDeltaAD (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  219: u16_t CS_Scale_GetDeltaAD(u8_t option)
  220: {
0030B7 904E48            MOV     DPTR,#option
0030BA EF                MOV     A,R7
0030BB F0                MOVX    @DPTR,A
  221: 	static       u8_t xdata B_Weight_Pos;				//正负AD变化标志
  222: 	u16_t	ad_temp;
  223: 	u16_t      R_AD_Zero;
  224: 	R_AD_Zero = CS_Scale_ZeroProc(GetRunningZero,0);
0030BC E4                CLR     A
0030BD FD                MOV     R5,A
0030BE FC                MOV     R4,A
0030BF 7F01              MOV     R7,#01H
0030C1 1212F0            LCALL   _CS_Scale_ZeroProc
;---- Variable 'R_AD_Zero' assigned to Register 'R6/R7' ----
  225: 	if(R_AD_Original>R_AD_Zero)
0030C4 904CD8            MOV     DPTR,#R_AD_Original
0030C7 E0                MOVX    A,@DPTR
0030C8 FC                MOV     R4,A
0030C9 A3                INC     DPTR
0030CA E0                MOVX    A,@DPTR
0030CB FD                MOV     R5,A
0030CC D3                SETB    C
0030CD 9F                SUBB    A,R7
0030CE EC                MOV     A,R4
0030CF 9E                SUBB    A,R6
0030D0 4014              JC      ?C0014?CS_SCALE_PROC
  226: 		{
  227: 		ad_temp = R_AD_Original - R_AD_Zero;
0030D2 ED                MOV     A,R5
0030D3 9F                SUBB    A,R7
0030D4 FF                MOV     R7,A
0030D5 EC                MOV     A,R4
0030D6 9E                SUBB    A,R6
0030D7 904E49            MOV     DPTR,#ad_temp
0030DA F0                MOVX    @DPTR,A
0030DB A3                INC     DPTR
0030DC EF                MOV     A,R7
0030DD F0                MOVX    @DPTR,A
  228: 		B_Weight_Pos = true;
0030DE 904C80            MOV     DPTR,#B_Weight_Pos
0030E1 7401              MOV     A,#01H
0030E3 F0                MOVX    @DPTR,A
  229: 
  230: 		}
0030E4 801A              SJMP    ?C0015?CS_SCALE_PROC
0030E6         ?C0014?CS_SCALE_PROC:
  231: 	else
  232: 		{
  233: 		ad_temp = R_AD_Zero - R_AD_Original;
0030E6 904CD8            MOV     DPTR,#R_AD_Original
0030E9 E0                MOVX    A,@DPTR
0030EA FC                MOV     R4,A
0030EB A3                INC     DPTR
0030EC E0                MOVX    A,@DPTR
0030ED FD                MOV     R5,A
0030EE C3                CLR     C
0030EF EF                MOV     A,R7
0030F0 9D                SUBB    A,R5
0030F1 FF                MOV     R7,A
0030F2 EE                MOV     A,R6
0030F3 9C                SUBB    A,R4
0030F4 904E49            MOV     DPTR,#ad_temp
0030F7 F0                MOVX    @DPTR,A
0030F8 A3                INC     DPTR
0030F9 EF                MOV     A,R7
0030FA F0                MOVX    @DPTR,A
  234: 		B_Weight_Pos = false;		
0030FB E4                CLR     A
0030FC 904C80            MOV     DPTR,#B_Weight_Pos
0030FF F0                MOVX    @DPTR,A
  235: 		}
003100         ?C0015?CS_SCALE_PROC:
  236: 
  237: 	
  238: 	if(option == GetADDirection)
003100 904E48            MOV     DPTR,#option
003103 E0                MOVX    A,@DPTR
003104 B40108            CJNE    A,#01H,?C0016?CS_SCALE_PROC
  239: 		{
  240: 		return	B_Weight_Pos;
003107 904C80            MOV     DPTR,#B_Weight_Pos
00310A E0                MOVX    A,@DPTR
00310B FF                MOV     R7,A
00310C 7E00              MOV     R6,#00H
00310E 22                RET     
  241: 		}	
00310F         ?C0016?CS_SCALE_PROC:
  242: 	return ad_temp;
00310F 904E49            MOV     DPTR,#ad_temp
003112 E0                MOVX    A,@DPTR
003113 FE                MOV     R6,A
003114 A3                INC     DPTR
003115 E0                MOVX    A,@DPTR
003116 FF                MOV     R7,A
  243: }
003117 22                RET     
----- FUNCTION _CS_Scale_GetDeltaAD (END) -------


----- FUNCTION _CS_Scale_AdcFilter (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  248: u16_t CS_Scale_AdcFilter(u8_t option,u16_t R_AD_BUF)
  249: {
003118 904E0D            MOV     DPTR,#R_AD_BUF
00311B EC                MOV     A,R4
00311C F0                MOVX    @DPTR,A
00311D A3                INC     DPTR
00311E ED                MOV     A,R5
00311F F0                MOVX    @DPTR,A
003120 904E0C            MOV     DPTR,#option
003123 EF                MOV     A,R7
003124 F0                MOVX    @DPTR,A
  250: 	u32_t	ad_temp;
  251: 	static	u16_t xdata R_AD_FilTimes;
  252: 	static	u16_t xdata R_AD_BUF_OLD;
  253: 	static	u16_t xdata R_AD_F1;
  254: 	static	u16_t xdata R_AD_F2;
  255: 	static	u16_t xdata R_AD_F3;
  256: 	static	u16_t xdata R_AD_F4;
  257: 	static	u16_t xdata R_AD_F5;
  258: 	static	u16_t xdata R_AD_F6;
  259: 	static	u16_t xdata R_AD_F7;
  260: 	static	u16_t xdata R_AD_F8;	
  261: 		
  262: 	if(option==ScaleAdcFilterGetFilTimes)
003125 BF0209            CJNE    R7,#02H,?C0018?CS_SCALE_PROC
  263: 		{
  264: 		return  R_AD_FilTimes;
003128 904C81            MOV     DPTR,#R_AD_FilTimes
00312B E0                MOVX    A,@DPTR
00312C FE                MOV     R6,A
00312D A3                INC     DPTR
00312E E0                MOVX    A,@DPTR
00312F FF                MOV     R7,A
003130 22                RET     
  265: 		}
003131         ?C0018?CS_SCALE_PROC:
  266: 	
  267: 	
  268: 	if(R_AD_BUF >R_AD_BUF_OLD)
003131 904C83            MOV     DPTR,#R_AD_BUF_OLD
003134 E0                MOVX    A,@DPTR
003135 FE                MOV     R6,A
003136 A3                INC     DPTR
003137 E0                MOVX    A,@DPTR
003138 FF                MOV     R7,A
003139 904E0D            MOV     DPTR,#R_AD_BUF
00313C E0                MOVX    A,@DPTR
00313D FC                MOV     R4,A
00313E A3                INC     DPTR
00313F E0                MOVX    A,@DPTR
003140 FD                MOV     R5,A
003141 D3                SETB    C
003142 9F                SUBB    A,R7
003143 EC                MOV     A,R4
003144 9E                SUBB    A,R6
003145 4017              JC      ?C0020?CS_SCALE_PROC
  269: 		ad_temp = R_AD_BUF - R_AD_BUF_OLD;
003147 904C83            MOV     DPTR,#R_AD_BUF_OLD
00314A E0                MOVX    A,@DPTR
00314B A3                INC     DPTR
00314C E0                MOVX    A,@DPTR
00314D ED                MOV     A,R5
00314E 9F                SUBB    A,R7
00314F FF                MOV     R7,A
003150 EC                MOV     A,R4
003151 9E                SUBB    A,R6
003152 FE                MOV     R6,A
003153 E4                CLR     A
003154 FC                MOV     R4,A
003155 FD                MOV     R5,A
003156 904E0F            MOV     DPTR,#ad_temp
003159 120332            LCALL   ?C?LSTXDATA
00315C 801E              SJMP    ?C0021?CS_SCALE_PROC
00315E         ?C0020?CS_SCALE_PROC:
  270: 	else
  271: 		ad_temp = R_AD_BUF_OLD - R_AD_BUF;
00315E 904E0D            MOV     DPTR,#R_AD_BUF
003161 E0                MOVX    A,@DPTR
003162 FE                MOV     R6,A
003163 A3                INC     DPTR
003164 E0                MOVX    A,@DPTR
003165 FF                MOV     R7,A
003166 C3                CLR     C
003167 904C84            MOV     DPTR,#R_AD_BUF_OLD+01H
00316A E0                MOVX    A,@DPTR
00316B 9F                SUBB    A,R7
00316C FF                MOV     R7,A
00316D 904C83            MOV     DPTR,#R_AD_BUF_OLD
003170 E0                MOVX    A,@DPTR
003171 9E                SUBB    A,R6
003172 FE                MOV     R6,A
003173 E4                CLR     A
003174 FC                MOV     R4,A
003175 FD                MOV     R5,A
003176 904E0F            MOV     DPTR,#ad_temp
003179 120332            LCALL   ?C?LSTXDATA
00317C         ?C0021?CS_SCALE_PROC:
  272: 
  273: 	R_AD_BUF_OLD	=	R_AD_BUF;
00317C 904E0D            MOV     DPTR,#R_AD_BUF
00317F E0                MOVX    A,@DPTR
003180 FF                MOV     R7,A
003181 A3                INC     DPTR
003182 E0                MOVX    A,@DPTR
003183 904C83            MOV     DPTR,#R_AD_BUF_OLD
003186 CF                XCH     A,R7
003187 F0                MOVX    @DPTR,A
003188 A3                INC     DPTR
003189 EF                MOV     A,R7
00318A F0                MOVX    @DPTR,A
  274: 	
  275: 	if((ad_temp > CS_Scale_FiterX) ||(option==ScaleAdcFilterReset))	
00318B E4                CLR     A
00318C 7F05              MOV     R7,#05H
00318E FE                MOV     R6,A
00318F FD                MOV     R5,A
003190 FC                MOV     R4,A
003191 904E0F            MOV     DPTR,#ad_temp
003194 E0                MOVX    A,@DPTR
003195 F8                MOV     R0,A
003196 A3                INC     DPTR
003197 E0                MOVX    A,@DPTR
003198 F9                MOV     R1,A
003199 A3                INC     DPTR
00319A E0                MOVX    A,@DPTR
00319B FA                MOV     R2,A
00319C A3                INC     DPTR
00319D E0                MOVX    A,@DPTR
00319E FB                MOV     R3,A
00319F D3                SETB    C
0031A0 1202FB            LCALL   ?C?ULCMP
0031A3 5007              JNC     ?C0023?CS_SCALE_PROC
0031A5 904E0C            MOV     DPTR,#option
0031A8 E0                MOVX    A,@DPTR
0031A9 B4012B            CJNE    A,#01H,?C0022?CS_SCALE_PROC
0031AC         ?C0023?CS_SCALE_PROC:
  276: 		{						
  277: 		R_AD_FilTimes = 0;
0031AC E4                CLR     A
0031AD 904C81            MOV     DPTR,#R_AD_FilTimes
0031B0 F0                MOVX    @DPTR,A
0031B1 A3                INC     DPTR
0031B2 F0                MOVX    @DPTR,A
  278: 		R_AD_F1 	    = 0;
0031B3 904C85            MOV     DPTR,#R_AD_F1
0031B6 F0                MOVX    @DPTR,A
0031B7 A3                INC     DPTR
0031B8 F0                MOVX    @DPTR,A
  279: 		R_AD_F2 	    = 0;
0031B9 A3                INC     DPTR
0031BA F0                MOVX    @DPTR,A
0031BB A3                INC     DPTR
0031BC F0                MOVX    @DPTR,A
  280: 		R_AD_F3 	    = 0;
0031BD A3                INC     DPTR
0031BE F0                MOVX    @DPTR,A
0031BF A3                INC     DPTR
0031C0 F0                MOVX    @DPTR,A
  281: 		R_AD_F4 	    = 0;
0031C1 A3                INC     DPTR
0031C2 F0                MOVX    @DPTR,A
0031C3 A3                INC     DPTR
0031C4 F0                MOVX    @DPTR,A
  282: 		R_AD_F5 	    = 0;
0031C5 A3                INC     DPTR
0031C6 F0                MOVX    @DPTR,A
0031C7 A3                INC     DPTR
0031C8 F0                MOVX    @DPTR,A
  283: 		R_AD_F6 	    = 0;
0031C9 A3                INC     DPTR
0031CA F0                MOVX    @DPTR,A
0031CB A3                INC     DPTR
0031CC F0                MOVX    @DPTR,A
  284: 		R_AD_F7 	    = 0;
0031CD A3                INC     DPTR
0031CE F0                MOVX    @DPTR,A
0031CF A3                INC     DPTR
0031D0 F0                MOVX    @DPTR,A
  285: 		R_AD_F8 	    = 0;
0031D1 A3                INC     DPTR
0031D2 F0                MOVX    @DPTR,A
0031D3 A3                INC     DPTR
0031D4 F0                MOVX    @DPTR,A
  286: 		}
0031D5 81BF              AJMP    ?C0024?CS_SCALE_PROC
0031D7         ?C0022?CS_SCALE_PROC:
  287: 	else
  288: 		{
  289: 		if(R_AD_FilTimes < 200 )
0031D7 C3                CLR     C
0031D8 904C82            MOV     DPTR,#R_AD_FilTimes+01H
0031DB E0                MOVX    A,@DPTR
0031DC 94C8              SUBB    A,#0C8H
0031DE 904C81            MOV     DPTR,#R_AD_FilTimes
0031E1 E0                MOVX    A,@DPTR
0031E2 9400              SUBB    A,#00H
0031E4 500C              JNC     ?C0025?CS_SCALE_PROC
  290: 		R_AD_FilTimes ++;	
0031E6 A3                INC     DPTR
0031E7 E0                MOVX    A,@DPTR
0031E8 04                INC     A
0031E9 F0                MOVX    @DPTR,A
0031EA 7006              JNZ     ?C0230?CS_SCALE_PROC
0031EC 904C81            MOV     DPTR,#R_AD_FilTimes
0031EF E0                MOVX    A,@DPTR
0031F0 04                INC     A
0031F1 F0                MOVX    @DPTR,A
0031F2         ?C0230?CS_SCALE_PROC:
0031F2         ?C0025?CS_SCALE_PROC:
  291: 
  292: 			if(R_AD_FilTimes<=1)
0031F2 904C81            MOV     DPTR,#R_AD_FilTimes
0031F5 E0                MOVX    A,@DPTR
0031F6 FE                MOV     R6,A
0031F7 A3                INC     DPTR
0031F8 E0                MOVX    A,@DPTR
0031F9 FF                MOV     R7,A
0031FA D3                SETB    C
0031FB 9401              SUBB    A,#01H
0031FD EE                MOV     A,R6
0031FE 9400              SUBB    A,#00H
003200 500F              JNC     ?C0026?CS_SCALE_PROC
  293: 				R_AD_F1 = R_AD_BUF;	
003202 904E0D            MOV     DPTR,#R_AD_BUF
003205 E0                MOVX    A,@DPTR
003206 FD                MOV     R5,A
003207 A3                INC     DPTR
003208 E0                MOVX    A,@DPTR
003209 904C85            MOV     DPTR,#R_AD_F1
00320C CD                XCH     A,R5
00320D F0                MOVX    @DPTR,A
00320E A3                INC     DPTR
00320F ED                MOV     A,R5
003210 F0                MOVX    @DPTR,A
003211         ?C0026?CS_SCALE_PROC:
  294: 			if(R_AD_FilTimes<=2)
003211 D3                SETB    C
003212 EF                MOV     A,R7
003213 9402              SUBB    A,#02H
003215 EE                MOV     A,R6
003216 9400              SUBB    A,#00H
003218 500F              JNC     ?C0027?CS_SCALE_PROC
  295: 				R_AD_F2 = R_AD_BUF;
00321A 904E0D            MOV     DPTR,#R_AD_BUF
00321D E0                MOVX    A,@DPTR
00321E FF                MOV     R7,A
00321F A3                INC     DPTR
003220 E0                MOVX    A,@DPTR
003221 904C87            MOV     DPTR,#R_AD_F2
003224 CF                XCH     A,R7
003225 F0                MOVX    @DPTR,A
003226 A3                INC     DPTR
003227 EF                MOV     A,R7
003228 F0                MOVX    @DPTR,A
003229         ?C0027?CS_SCALE_PROC:
  296: 			if(R_AD_FilTimes<=3)
003229 D3                SETB    C
00322A 904C82            MOV     DPTR,#R_AD_FilTimes+01H
00322D E0                MOVX    A,@DPTR
00322E 9403              SUBB    A,#03H
003230 904C81            MOV     DPTR,#R_AD_FilTimes
003233 E0                MOVX    A,@DPTR
003234 9400              SUBB    A,#00H
003236 500F              JNC     ?C0028?CS_SCALE_PROC
  297: 				R_AD_F3 = R_AD_BUF;
003238 904E0D            MOV     DPTR,#R_AD_BUF
00323B E0                MOVX    A,@DPTR
00323C FF                MOV     R7,A
00323D A3                INC     DPTR
00323E E0                MOVX    A,@DPTR
00323F 904C89            MOV     DPTR,#R_AD_F3
003242 CF                XCH     A,R7
003243 F0                MOVX    @DPTR,A
003244 A3                INC     DPTR
003245 EF                MOV     A,R7
003246 F0                MOVX    @DPTR,A
003247         ?C0028?CS_SCALE_PROC:
  298: 			if(R_AD_FilTimes<=4)
003247 904C81            MOV     DPTR,#R_AD_FilTimes
00324A E0                MOVX    A,@DPTR
00324B FE                MOV     R6,A
00324C A3                INC     DPTR
00324D E0                MOVX    A,@DPTR
00324E FF                MOV     R7,A
00324F D3                SETB    C
003250 9404              SUBB    A,#04H
003252 EE                MOV     A,R6
003253 9400              SUBB    A,#00H
003255 500F              JNC     ?C0029?CS_SCALE_PROC
  299: 				R_AD_F4 = R_AD_BUF;
003257 904E0D            MOV     DPTR,#R_AD_BUF
00325A E0                MOVX    A,@DPTR
00325B FD                MOV     R5,A
00325C A3                INC     DPTR
00325D E0                MOVX    A,@DPTR
00325E 904C8B            MOV     DPTR,#R_AD_F4
003261 CD                XCH     A,R5
003262 F0                MOVX    @DPTR,A
003263 A3                INC     DPTR
003264 ED                MOV     A,R5
003265 F0                MOVX    @DPTR,A
003266         ?C0029?CS_SCALE_PROC:
  300: 			if(R_AD_FilTimes<=5)
003266 D3                SETB    C
003267 EF                MOV     A,R7
003268 9405              SUBB    A,#05H
00326A EE                MOV     A,R6
00326B 9400              SUBB    A,#00H
00326D 500F              JNC     ?C0030?CS_SCALE_PROC
  301: 				R_AD_F5 = R_AD_BUF;
00326F 904E0D            MOV     DPTR,#R_AD_BUF
003272 E0                MOVX    A,@DPTR
003273 FF                MOV     R7,A
003274 A3                INC     DPTR
003275 E0                MOVX    A,@DPTR
003276 904C8D            MOV     DPTR,#R_AD_F5
003279 CF                XCH     A,R7
00327A F0                MOVX    @DPTR,A
00327B A3                INC     DPTR
00327C EF                MOV     A,R7
00327D F0                MOVX    @DPTR,A
00327E         ?C0030?CS_SCALE_PROC:
  302: 			if(R_AD_FilTimes<=6)
00327E D3                SETB    C
00327F 904C82            MOV     DPTR,#R_AD_FilTimes+01H
003282 E0                MOVX    A,@DPTR
003283 9406              SUBB    A,#06H
003285 904C81            MOV     DPTR,#R_AD_FilTimes
003288 E0                MOVX    A,@DPTR
003289 9400              SUBB    A,#00H
00328B 500F              JNC     ?C0031?CS_SCALE_PROC
  303: 				R_AD_F6 = R_AD_BUF;
00328D 904E0D            MOV     DPTR,#R_AD_BUF
003290 E0                MOVX    A,@DPTR
003291 FF                MOV     R7,A
003292 A3                INC     DPTR
003293 E0                MOVX    A,@DPTR
003294 904C8F            MOV     DPTR,#R_AD_F6
003297 CF                XCH     A,R7
003298 F0                MOVX    @DPTR,A
003299 A3                INC     DPTR
00329A EF                MOV     A,R7
00329B F0                MOVX    @DPTR,A
00329C         ?C0031?CS_SCALE_PROC:
  304: 			if(R_AD_FilTimes<=7)
00329C 904C81            MOV     DPTR,#R_AD_FilTimes
00329F E0                MOVX    A,@DPTR
0032A0 FE                MOV     R6,A
0032A1 A3                INC     DPTR
0032A2 E0                MOVX    A,@DPTR
0032A3 FF                MOV     R7,A
0032A4 D3                SETB    C
0032A5 9407              SUBB    A,#07H
0032A7 EE                MOV     A,R6
0032A8 9400              SUBB    A,#00H
0032AA 500F              JNC     ?C0032?CS_SCALE_PROC
  305: 				R_AD_F7 = R_AD_BUF;
0032AC 904E0D            MOV     DPTR,#R_AD_BUF
0032AF E0                MOVX    A,@DPTR
0032B0 FD                MOV     R5,A
0032B1 A3                INC     DPTR
0032B2 E0                MOVX    A,@DPTR
0032B3 904C91            MOV     DPTR,#R_AD_F7
0032B6 CD                XCH     A,R5
0032B7 F0                MOVX    @DPTR,A
0032B8 A3                INC     DPTR
0032B9 ED                MOV     A,R5
0032BA F0                MOVX    @DPTR,A
0032BB         ?C0032?CS_SCALE_PROC:
  306: 			if(R_AD_FilTimes<=8)
0032BB D3                SETB    C
0032BC EF                MOV     A,R7
0032BD 9408              SUBB    A,#08H
0032BF EE                MOV     A,R6
0032C0 9400              SUBB    A,#00H
0032C2 500F              JNC     ?C0033?CS_SCALE_PROC
  307: 				R_AD_F8 = R_AD_BUF;
0032C4 904E0D            MOV     DPTR,#R_AD_BUF
0032C7 E0                MOVX    A,@DPTR
0032C8 FF                MOV     R7,A
0032C9 A3                INC     DPTR
0032CA E0                MOVX    A,@DPTR
0032CB 904C93            MOV     DPTR,#R_AD_F8
0032CE CF                XCH     A,R7
0032CF F0                MOVX    @DPTR,A
0032D0 A3                INC     DPTR
0032D1 EF                MOV     A,R7
0032D2 F0                MOVX    @DPTR,A
0032D3         ?C0033?CS_SCALE_PROC:
  308: 			if(R_AD_FilTimes>8)
0032D3 D3                SETB    C
0032D4 904C82            MOV     DPTR,#R_AD_FilTimes+01H
0032D7 E0                MOVX    A,@DPTR
0032D8 9408              SUBB    A,#08H
0032DA 904C81            MOV     DPTR,#R_AD_FilTimes
0032DD E0                MOVX    A,@DPTR
0032DE 9400              SUBB    A,#00H
0032E0 4078              JC      ?C0034?CS_SCALE_PROC
  309: 				{
  310: 				R_AD_F1 = R_AD_F2;
0032E2 904C87            MOV     DPTR,#R_AD_F2
0032E5 E0                MOVX    A,@DPTR
0032E6 FF                MOV     R7,A
0032E7 A3                INC     DPTR
0032E8 E0                MOVX    A,@DPTR
0032E9 904C85            MOV     DPTR,#R_AD_F1
0032EC CF                XCH     A,R7
0032ED F0                MOVX    @DPTR,A
0032EE A3                INC     DPTR
0032EF EF                MOV     A,R7
0032F0 F0                MOVX    @DPTR,A
  311: 				R_AD_F2 = R_AD_F3;
0032F1 904C89            MOV     DPTR,#R_AD_F3
0032F4 E0                MOVX    A,@DPTR
0032F5 FF                MOV     R7,A
0032F6 A3                INC     DPTR
0032F7 E0                MOVX    A,@DPTR
0032F8 904C87            MOV     DPTR,#R_AD_F2
0032FB CF                XCH     A,R7
0032FC F0                MOVX    @DPTR,A
0032FD A3                INC     DPTR
0032FE EF                MOV     A,R7
0032FF F0                MOVX    @DPTR,A
  312: 				R_AD_F3 = R_AD_F4;
003300 904C8B            MOV     DPTR,#R_AD_F4
003303 E0                MOVX    A,@DPTR
003304 FF                MOV     R7,A
003305 A3                INC     DPTR
003306 E0                MOVX    A,@DPTR
003307 904C89            MOV     DPTR,#R_AD_F3
00330A CF                XCH     A,R7
00330B F0                MOVX    @DPTR,A
00330C A3                INC     DPTR
00330D EF                MOV     A,R7
00330E F0                MOVX    @DPTR,A
  313: 				R_AD_F4 = R_AD_F5;
00330F 904C8D            MOV     DPTR,#R_AD_F5
003312 E0                MOVX    A,@DPTR
003313 FF                MOV     R7,A
003314 A3                INC     DPTR
003315 E0                MOVX    A,@DPTR
003316 904C8B            MOV     DPTR,#R_AD_F4
003319 CF                XCH     A,R7
00331A F0                MOVX    @DPTR,A
00331B A3                INC     DPTR
00331C EF                MOV     A,R7
00331D F0                MOVX    @DPTR,A
  314: 				R_AD_F5 = R_AD_F6;
00331E 904C8F            MOV     DPTR,#R_AD_F6
003321 E0                MOVX    A,@DPTR
003322 FF                MOV     R7,A
003323 A3                INC     DPTR
003324 E0                MOVX    A,@DPTR
003325 904C8D            MOV     DPTR,#R_AD_F5
003328 CF                XCH     A,R7
003329 F0                MOVX    @DPTR,A
00332A A3                INC     DPTR
00332B EF                MOV     A,R7
00332C F0                MOVX    @DPTR,A
  315: 				R_AD_F6 = R_AD_F7;
00332D 904C91            MOV     DPTR,#R_AD_F7
003330 E0                MOVX    A,@DPTR
003331 FF                MOV     R7,A
003332 A3                INC     DPTR
003333 E0                MOVX    A,@DPTR
003334 904C8F            MOV     DPTR,#R_AD_F6
003337 CF                XCH     A,R7
003338 F0                MOVX    @DPTR,A
003339 A3                INC     DPTR
00333A EF                MOV     A,R7
00333B F0                MOVX    @DPTR,A
  316: 				R_AD_F7 = R_AD_F8;
00333C 904C93            MOV     DPTR,#R_AD_F8
00333F E0                MOVX    A,@DPTR
003340 FF                MOV     R7,A
003341 A3                INC     DPTR
003342 E0                MOVX    A,@DPTR
003343 904C91            MOV     DPTR,#R_AD_F7
003346 CF                XCH     A,R7
003347 F0                MOVX    @DPTR,A
003348 A3                INC     DPTR
003349 EF                MOV     A,R7
00334A F0                MOVX    @DPTR,A
  317: 				R_AD_F8 = R_AD_BUF;
00334B 904E0D            MOV     DPTR,#R_AD_BUF
00334E E0                MOVX    A,@DPTR
00334F FF                MOV     R7,A
003350 A3                INC     DPTR
003351 E0                MOVX    A,@DPTR
003352 904C93            MOV     DPTR,#R_AD_F8
003355 CF                XCH     A,R7
003356 F0                MOVX    @DPTR,A
003357 A3                INC     DPTR
003358 EF                MOV     A,R7
003359 F0                MOVX    @DPTR,A
  318: 				}
00335A         ?C0034?CS_SCALE_PROC:
  319: 
  320: 		ad_temp	= R_AD_F1;
00335A 904C85            MOV     DPTR,#R_AD_F1
00335D E0                MOVX    A,@DPTR
00335E FE                MOV     R6,A
00335F A3                INC     DPTR
003360 E0                MOVX    A,@DPTR
003361 FF                MOV     R7,A
003362 E4                CLR     A
003363 FC                MOV     R4,A
003364 FD                MOV     R5,A
003365 904E0F            MOV     DPTR,#ad_temp
003368 120332            LCALL   ?C?LSTXDATA
  321: 		ad_temp	+= R_AD_F2;
00336B 904E0F            MOV     DPTR,#ad_temp
00336E E0                MOVX    A,@DPTR
00336F F8                MOV     R0,A
003370 A3                INC     DPTR
003371 E0                MOVX    A,@DPTR
003372 F9                MOV     R1,A
003373 A3                INC     DPTR
003374 E0                MOVX    A,@DPTR
003375 FA                MOV     R2,A
003376 A3                INC     DPTR
003377 E0                MOVX    A,@DPTR
003378 FB                MOV     R3,A
003379 904C87            MOV     DPTR,#R_AD_F2
00337C E0                MOVX    A,@DPTR
00337D FE                MOV     R6,A
00337E A3                INC     DPTR
00337F E0                MOVX    A,@DPTR
003380 FF                MOV     R7,A
003381 E4                CLR     A
003382 FC                MOV     R4,A
003383 FD                MOV     R5,A
003384 EB                MOV     A,R3
003385 2F                ADD     A,R7
003386 FF                MOV     R7,A
003387 EA                MOV     A,R2
003388 3E                ADDC    A,R6
003389 FE                MOV     R6,A
00338A ED                MOV     A,R5
00338B 39                ADDC    A,R1
00338C FD                MOV     R5,A
00338D EC                MOV     A,R4
00338E 38                ADDC    A,R0
00338F FC                MOV     R4,A
003390 904E0F            MOV     DPTR,#ad_temp
003393 120332            LCALL   ?C?LSTXDATA
  322: 		ad_temp	+= R_AD_F3;
003396 904E0F            MOV     DPTR,#ad_temp
003399 E0                MOVX    A,@DPTR
00339A F8                MOV     R0,A
00339B A3                INC     DPTR
00339C E0                MOVX    A,@DPTR
00339D F9                MOV     R1,A
00339E A3                INC     DPTR
00339F E0                MOVX    A,@DPTR
0033A0 FA                MOV     R2,A
0033A1 A3                INC     DPTR
0033A2 E0                MOVX    A,@DPTR
0033A3 FB                MOV     R3,A
0033A4 904C89            MOV     DPTR,#R_AD_F3
0033A7 E0                MOVX    A,@DPTR
0033A8 FE                MOV     R6,A
0033A9 A3                INC     DPTR
0033AA E0                MOVX    A,@DPTR
0033AB FF                MOV     R7,A
0033AC E4                CLR     A
0033AD FC                MOV     R4,A
0033AE FD                MOV     R5,A
0033AF EB                MOV     A,R3
0033B0 2F                ADD     A,R7
0033B1 FF                MOV     R7,A
0033B2 EA                MOV     A,R2
0033B3 3E                ADDC    A,R6
0033B4 FE                MOV     R6,A
0033B5 ED                MOV     A,R5
0033B6 39                ADDC    A,R1
0033B7 FD                MOV     R5,A
0033B8 EC                MOV     A,R4
0033B9 38                ADDC    A,R0
0033BA FC                MOV     R4,A
0033BB 904E0F            MOV     DPTR,#ad_temp
0033BE 120332            LCALL   ?C?LSTXDATA
  323: 		ad_temp	+= R_AD_F4;
0033C1 904E0F            MOV     DPTR,#ad_temp
0033C4 E0                MOVX    A,@DPTR
0033C5 F8                MOV     R0,A
0033C6 A3                INC     DPTR
0033C7 E0                MOVX    A,@DPTR
0033C8 F9                MOV     R1,A
0033C9 A3                INC     DPTR
0033CA E0                MOVX    A,@DPTR
0033CB FA                MOV     R2,A
0033CC A3                INC     DPTR
0033CD E0                MOVX    A,@DPTR
0033CE FB                MOV     R3,A
0033CF 904C8B            MOV     DPTR,#R_AD_F4
0033D2 E0                MOVX    A,@DPTR
0033D3 FE                MOV     R6,A
0033D4 A3                INC     DPTR
0033D5 E0                MOVX    A,@DPTR
0033D6 FF                MOV     R7,A
0033D7 E4                CLR     A
0033D8 FC                MOV     R4,A
0033D9 FD                MOV     R5,A
0033DA EB                MOV     A,R3
0033DB 2F                ADD     A,R7
0033DC FF                MOV     R7,A
0033DD EA                MOV     A,R2
0033DE 3E                ADDC    A,R6
0033DF FE                MOV     R6,A
0033E0 ED                MOV     A,R5
0033E1 39                ADDC    A,R1
0033E2 FD                MOV     R5,A
0033E3 EC                MOV     A,R4
0033E4 38                ADDC    A,R0
0033E5 FC                MOV     R4,A
0033E6 904E0F            MOV     DPTR,#ad_temp
0033E9 120332            LCALL   ?C?LSTXDATA
  324: 		ad_temp	+= R_AD_F5;
0033EC 904E0F            MOV     DPTR,#ad_temp
0033EF E0                MOVX    A,@DPTR
0033F0 F8                MOV     R0,A
0033F1 A3                INC     DPTR
0033F2 E0                MOVX    A,@DPTR
0033F3 F9                MOV     R1,A
0033F4 A3                INC     DPTR
0033F5 E0                MOVX    A,@DPTR
0033F6 FA                MOV     R2,A
0033F7 A3                INC     DPTR
0033F8 E0                MOVX    A,@DPTR
0033F9 FB                MOV     R3,A
0033FA 904C8D            MOV     DPTR,#R_AD_F5
0033FD E0                MOVX    A,@DPTR
0033FE FE                MOV     R6,A
0033FF A3                INC     DPTR
003400 E0                MOVX    A,@DPTR
003401 FF                MOV     R7,A
003402 E4                CLR     A
003403 FC                MOV     R4,A
003404 FD                MOV     R5,A
003405 EB                MOV     A,R3
003406 2F                ADD     A,R7
003407 FF                MOV     R7,A
003408 EA                MOV     A,R2
003409 3E                ADDC    A,R6
00340A FE                MOV     R6,A
00340B ED                MOV     A,R5
00340C 39                ADDC    A,R1
00340D FD                MOV     R5,A
00340E EC                MOV     A,R4
00340F 38                ADDC    A,R0
003410 FC                MOV     R4,A
003411 904E0F            MOV     DPTR,#ad_temp
003414 120332            LCALL   ?C?LSTXDATA
  325: 		ad_temp	+= R_AD_F6;
003417 904E0F            MOV     DPTR,#ad_temp
00341A E0                MOVX    A,@DPTR
00341B F8                MOV     R0,A
00341C A3                INC     DPTR
00341D E0                MOVX    A,@DPTR
00341E F9                MOV     R1,A
00341F A3                INC     DPTR
003420 E0                MOVX    A,@DPTR
003421 FA                MOV     R2,A
003422 A3                INC     DPTR
003423 E0                MOVX    A,@DPTR
003424 FB                MOV     R3,A
003425 904C8F            MOV     DPTR,#R_AD_F6
003428 E0                MOVX    A,@DPTR
003429 FE                MOV     R6,A
00342A A3                INC     DPTR
00342B E0                MOVX    A,@DPTR
00342C FF                MOV     R7,A
00342D E4                CLR     A
00342E FC                MOV     R4,A
00342F FD                MOV     R5,A
003430 EB                MOV     A,R3
003431 2F                ADD     A,R7
003432 FF                MOV     R7,A
003433 EA                MOV     A,R2
003434 3E                ADDC    A,R6
003435 FE                MOV     R6,A
003436 ED                MOV     A,R5
003437 39                ADDC    A,R1
003438 FD                MOV     R5,A
003439 EC                MOV     A,R4
00343A 38                ADDC    A,R0
00343B FC                MOV     R4,A
00343C 904E0F            MOV     DPTR,#ad_temp
00343F 120332            LCALL   ?C?LSTXDATA
  326: 		ad_temp	+= R_AD_F7;
003442 904E0F            MOV     DPTR,#ad_temp
003445 E0                MOVX    A,@DPTR
003446 F8                MOV     R0,A
003447 A3                INC     DPTR
003448 E0                MOVX    A,@DPTR
003449 F9                MOV     R1,A
00344A A3                INC     DPTR
00344B E0                MOVX    A,@DPTR
00344C FA                MOV     R2,A
00344D A3                INC     DPTR
00344E E0                MOVX    A,@DPTR
00344F FB                MOV     R3,A
003450 904C91            MOV     DPTR,#R_AD_F7
003453 E0                MOVX    A,@DPTR
003454 FE                MOV     R6,A
003455 A3                INC     DPTR
003456 E0                MOVX    A,@DPTR
003457 FF                MOV     R7,A
003458 E4                CLR     A
003459 FC                MOV     R4,A
00345A FD                MOV     R5,A
00345B EB                MOV     A,R3
00345C 2F                ADD     A,R7
00345D FF                MOV     R7,A
00345E EA                MOV     A,R2
00345F 3E                ADDC    A,R6
003460 FE                MOV     R6,A
003461 ED                MOV     A,R5
003462 39                ADDC    A,R1
003463 FD                MOV     R5,A
003464 EC                MOV     A,R4
003465 38                ADDC    A,R0
003466 FC                MOV     R4,A
003467 904E0F            MOV     DPTR,#ad_temp
00346A 120332            LCALL   ?C?LSTXDATA
  327: 		ad_temp	+= R_AD_F8;
00346D 904E0F            MOV     DPTR,#ad_temp
003470 E0                MOVX    A,@DPTR
003471 F8                MOV     R0,A
003472 A3                INC     DPTR
003473 E0                MOVX    A,@DPTR
003474 F9                MOV     R1,A
003475 A3                INC     DPTR
003476 E0                MOVX    A,@DPTR
003477 FA                MOV     R2,A
003478 A3                INC     DPTR
003479 E0                MOVX    A,@DPTR
00347A FB                MOV     R3,A
00347B 904C93            MOV     DPTR,#R_AD_F8
00347E E0                MOVX    A,@DPTR
00347F FE                MOV     R6,A
003480 A3                INC     DPTR
003481 E0                MOVX    A,@DPTR
003482 FF                MOV     R7,A
003483 E4                CLR     A
003484 FC                MOV     R4,A
003485 FD                MOV     R5,A
003486 EB                MOV     A,R3
003487 2F                ADD     A,R7
003488 FF                MOV     R7,A
003489 EA                MOV     A,R2
00348A 3E                ADDC    A,R6
00348B FE                MOV     R6,A
00348C ED                MOV     A,R5
00348D 39                ADDC    A,R1
00348E FD                MOV     R5,A
00348F EC                MOV     A,R4
003490 38                ADDC    A,R0
003491 FC                MOV     R4,A
003492 904E0F            MOV     DPTR,#ad_temp
003495 120332            LCALL   ?C?LSTXDATA
  328: 
  329: 		R_AD_BUF = ad_temp / 8 ;
003498 E4                CLR     A
003499 7B08              MOV     R3,#08H
00349B FA                MOV     R2,A
00349C F9                MOV     R1,A
00349D F8                MOV     R0,A
00349E 904E0F            MOV     DPTR,#ad_temp
0034A1 E0                MOVX    A,@DPTR
0034A2 FC                MOV     R4,A
0034A3 A3                INC     DPTR
0034A4 E0                MOVX    A,@DPTR
0034A5 FD                MOV     R5,A
0034A6 A3                INC     DPTR
0034A7 E0                MOVX    A,@DPTR
0034A8 FE                MOV     R6,A
0034A9 A3                INC     DPTR
0034AA E0                MOVX    A,@DPTR
0034AB FF                MOV     R7,A
0034AC 120269            LCALL   ?C?ULDIV
0034AF 904E0D            MOV     DPTR,#R_AD_BUF
0034B2 EE                MOV     A,R6
0034B3 F0                MOVX    @DPTR,A
0034B4 A3                INC     DPTR
0034B5 EF                MOV     A,R7
0034B6 F0                MOVX    @DPTR,A
  330: 		R_AD_BUF_OLD	=	R_AD_BUF;
0034B7 904C83            MOV     DPTR,#R_AD_BUF_OLD
0034BA EE                MOV     A,R6
0034BB F0                MOVX    @DPTR,A
0034BC A3                INC     DPTR
0034BD EF                MOV     A,R7
0034BE F0                MOVX    @DPTR,A
  331: 		}
0034BF         ?C0024?CS_SCALE_PROC:
  332: 	return	R_AD_BUF;
0034BF 904E0D            MOV     DPTR,#R_AD_BUF
0034C2 E0                MOVX    A,@DPTR
0034C3 FE                MOV     R6,A
0034C4 A3                INC     DPTR
0034C5 E0                MOVX    A,@DPTR
0034C6 FF                MOV     R7,A
  333: }
0034C7 22                RET     
----- FUNCTION _CS_Scale_AdcFilter (END) -------


----- FUNCTION _CS_Scale_GetWeight (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  338: void CS_Scale_GetWeight(u16_t R_AD_BUF)
  339: {
0034C8 904DA0            MOV     DPTR,#R_AD_BUF
0034CB EE                MOV     A,R6
0034CC F0                MOVX    @DPTR,A
0034CD A3                INC     DPTR
0034CE EF                MOV     A,R7
0034CF F0                MOVX    @DPTR,A
  340: 	u32_t	ad_temp;
  341: 	u16_t	ad_cal;
  342: 	u16_t	CaliDot1,CaliDot2,CaliDot3;
  343: 	
  344: 	CaliDot1 =CS_Scale_CaliProc(CaliProcGetCaliDot1);
0034D0 7F02              MOV     R7,#02H
0034D2 120A38            LCALL   _CS_Scale_CaliProc
0034D5 904DA8            MOV     DPTR,#CaliDot1
0034D8 EE                MOV     A,R6
0034D9 F0                MOVX    @DPTR,A
0034DA A3                INC     DPTR
0034DB EF                MOV     A,R7
0034DC F0                MOVX    @DPTR,A
  345: 	CaliDot2 =CS_Scale_CaliProc(CaliProcGetCaliDot2);
0034DD 7F03              MOV     R7,#03H
0034DF 120A38            LCALL   _CS_Scale_CaliProc
0034E2 904DAA            MOV     DPTR,#CaliDot2
0034E5 EE                MOV     A,R6
0034E6 F0                MOVX    @DPTR,A
0034E7 A3                INC     DPTR
0034E8 EF                MOV     A,R7
0034E9 F0                MOVX    @DPTR,A
  346: 	CaliDot3 =CS_Scale_CaliProc(CaliProcGetCaliDot3);
0034EA 7F04              MOV     R7,#04H
0034EC 120A38            LCALL   _CS_Scale_CaliProc
0034EF 904DAC            MOV     DPTR,#CaliDot3
0034F2 EE                MOV     A,R6
0034F3 F0                MOVX    @DPTR,A
0034F4 A3                INC     DPTR
0034F5 EF                MOV     A,R7
0034F6 F0                MOVX    @DPTR,A
  347: 	
  348: 	if(R_AD_BUF <= CaliDot1 )
0034F7 904DA8            MOV     DPTR,#CaliDot1
0034FA E0                MOVX    A,@DPTR
0034FB FE                MOV     R6,A
0034FC A3                INC     DPTR
0034FD E0                MOVX    A,@DPTR
0034FE FF                MOV     R7,A
0034FF 904DA0            MOV     DPTR,#R_AD_BUF
003502 E0                MOVX    A,@DPTR
003503 FC                MOV     R4,A
003504 A3                INC     DPTR
003505 E0                MOVX    A,@DPTR
003506 FD                MOV     R5,A
003507 D3                SETB    C
003508 9F                SUBB    A,R7
003509 EC                MOV     A,R4
00350A 9E                SUBB    A,R6
00350B 5033              JNC     ?C0035?CS_SCALE_PROC
  349: 		{
  350: 		ad_temp = (u32_t)R_AD_BUF  * 5000;	
00350D 7E13              MOV     R6,#013H
00350F 7F88              MOV     R7,#088H
003511 1203C8            LCALL   ?C?LIMUL
003514 A3                INC     DPTR
003515 120332            LCALL   ?C?LSTXDATA
  351: 		R_UnitWeight.origin = ad_temp / CaliDot1;
003518 904DA8            MOV     DPTR,#CaliDot1
00351B E0                MOVX    A,@DPTR
00351C FE                MOV     R6,A
00351D A3                INC     DPTR
00351E E0                MOVX    A,@DPTR
00351F FF                MOV     R7,A
003520 FB                MOV     R3,A
003521 AA06              MOV     R2,AR6
003523 E4                CLR     A
003524 F9                MOV     R1,A
003525 F8                MOV     R0,A
003526 904DA2            MOV     DPTR,#ad_temp
003529 E0                MOVX    A,@DPTR
00352A FC                MOV     R4,A
00352B A3                INC     DPTR
00352C E0                MOVX    A,@DPTR
00352D FD                MOV     R5,A
00352E A3                INC     DPTR
00352F E0                MOVX    A,@DPTR
003530 FE                MOV     R6,A
003531 A3                INC     DPTR
003532 E0                MOVX    A,@DPTR
003533 FF                MOV     R7,A
003534 120269            LCALL   ?C?ULDIV
003537 904CC9            MOV     DPTR,#R_UnitWeight
00353A EE                MOV     A,R6
00353B F0                MOVX    @DPTR,A
00353C A3                INC     DPTR
00353D EF                MOV     A,R7
00353E F0                MOVX    @DPTR,A
00353F 22                RET     
  352: 		return;
  353: 		}
003540         ?C0035?CS_SCALE_PROC:
  354: 	ad_cal = R_AD_BUF - CaliDot1;
003540 904DA8            MOV     DPTR,#CaliDot1
003543 E0                MOVX    A,@DPTR
003544 FE                MOV     R6,A
003545 A3                INC     DPTR
003546 E0                MOVX    A,@DPTR
003547 FF                MOV     R7,A
003548 C3                CLR     C
003549 904DA1            MOV     DPTR,#R_AD_BUF+01H
00354C E0                MOVX    A,@DPTR
00354D 9F                SUBB    A,R7
00354E FF                MOV     R7,A
00354F 904DA0            MOV     DPTR,#R_AD_BUF
003552 E0                MOVX    A,@DPTR
003553 9E                SUBB    A,R6
003554 FE                MOV     R6,A
003555 904DA6            MOV     DPTR,#ad_cal
003558 F0                MOVX    @DPTR,A
003559 A3                INC     DPTR
00355A EF                MOV     A,R7
00355B F0                MOVX    @DPTR,A
  355: 
  356: 	if(ad_cal <=CaliDot2)
00355C C3                CLR     C
00355D 904DAB            MOV     DPTR,#CaliDot2+01H
003560 E0                MOVX    A,@DPTR
003561 9F                SUBB    A,R7
003562 904DAA            MOV     DPTR,#CaliDot2
003565 E0                MOVX    A,@DPTR
003566 9E                SUBB    A,R6
003567 4043              JC      ?C0037?CS_SCALE_PROC
  357: 		{
  358: 		ad_temp = (u32_t)ad_cal  * 5000;	
003569 904DA6            MOV     DPTR,#ad_cal
00356C E0                MOVX    A,@DPTR
00356D FE                MOV     R6,A
00356E A3                INC     DPTR
00356F E0                MOVX    A,@DPTR
003570 FF                MOV     R7,A
003571 7C13              MOV     R4,#013H
003573 7D88              MOV     R5,#088H
003575 1203C8            LCALL   ?C?LIMUL
003578 904DA2            MOV     DPTR,#ad_temp
00357B 120332            LCALL   ?C?LSTXDATA
  359: 		R_UnitWeight.origin = ad_temp / CaliDot2 +5000 ;
00357E 904DAA            MOV     DPTR,#CaliDot2
003581 E0                MOVX    A,@DPTR
003582 FE                MOV     R6,A
003583 A3                INC     DPTR
003584 E0                MOVX    A,@DPTR
003585 FF                MOV     R7,A
003586 FB                MOV     R3,A
003587 AA06              MOV     R2,AR6
003589 E4                CLR     A
00358A F9                MOV     R1,A
00358B F8                MOV     R0,A
00358C 904DA2            MOV     DPTR,#ad_temp
00358F E0                MOVX    A,@DPTR
003590 FC                MOV     R4,A
003591 A3                INC     DPTR
003592 E0                MOVX    A,@DPTR
003593 FD                MOV     R5,A
003594 A3                INC     DPTR
003595 E0                MOVX    A,@DPTR
003596 FE                MOV     R6,A
003597 A3                INC     DPTR
003598 E0                MOVX    A,@DPTR
003599 FF                MOV     R7,A
00359A 120269            LCALL   ?C?ULDIV
00359D EF                MOV     A,R7
00359E 2488              ADD     A,#088H
0035A0 FF                MOV     R7,A
0035A1 EE                MOV     A,R6
0035A2 3413              ADDC    A,#013H
0035A4 904CC9            MOV     DPTR,#R_UnitWeight
0035A7 F0                MOVX    @DPTR,A
0035A8 A3                INC     DPTR
0035A9 EF                MOV     A,R7
0035AA F0                MOVX    @DPTR,A
0035AB 22                RET     
  360: 		return;
  361: 		}
0035AC         ?C0037?CS_SCALE_PROC:
  362: 	
  363: 	ad_cal  = R_AD_BUF - CaliDot1 - CaliDot2 ;	
0035AC 904DA8            MOV     DPTR,#CaliDot1
0035AF E0                MOVX    A,@DPTR
0035B0 FE                MOV     R6,A
0035B1 A3                INC     DPTR
0035B2 E0                MOVX    A,@DPTR
0035B3 FF                MOV     R7,A
0035B4 C3                CLR     C
0035B5 904DA1            MOV     DPTR,#R_AD_BUF+01H
0035B8 E0                MOVX    A,@DPTR
0035B9 9F                SUBB    A,R7
0035BA FF                MOV     R7,A
0035BB 904DA0            MOV     DPTR,#R_AD_BUF
0035BE E0                MOVX    A,@DPTR
0035BF 9E                SUBB    A,R6
0035C0 FE                MOV     R6,A
0035C1 904DAA            MOV     DPTR,#CaliDot2
0035C4 E0                MOVX    A,@DPTR
0035C5 FC                MOV     R4,A
0035C6 A3                INC     DPTR
0035C7 E0                MOVX    A,@DPTR
0035C8 FD                MOV     R5,A
0035C9 C3                CLR     C
0035CA EF                MOV     A,R7
0035CB 9D                SUBB    A,R5
0035CC FF                MOV     R7,A
0035CD EE                MOV     A,R6
0035CE 9C                SUBB    A,R4
0035CF 904DA6            MOV     DPTR,#ad_cal
0035D2 F0                MOVX    @DPTR,A
0035D3 A3                INC     DPTR
0035D4 EF                MOV     A,R7
0035D5 F0                MOVX    @DPTR,A
  364: 	ad_temp = (u32_t)ad_cal  * 5000;	
0035D6 904DA6            MOV     DPTR,#ad_cal
0035D9 E0                MOVX    A,@DPTR
0035DA FE                MOV     R6,A
0035DB A3                INC     DPTR
0035DC E0                MOVX    A,@DPTR
0035DD FF                MOV     R7,A
0035DE 7C13              MOV     R4,#013H
0035E0 7D88              MOV     R5,#088H
0035E2 1203C8            LCALL   ?C?LIMUL
0035E5 904DA2            MOV     DPTR,#ad_temp
0035E8 120332            LCALL   ?C?LSTXDATA
  365: 	R_UnitWeight.origin = ad_temp /CaliDot3 +10000 ;
0035EB 904DAC            MOV     DPTR,#CaliDot3
0035EE E0                MOVX    A,@DPTR
0035EF FE                MOV     R6,A
0035F0 A3                INC     DPTR
0035F1 E0                MOVX    A,@DPTR
0035F2 FF                MOV     R7,A
0035F3 FB                MOV     R3,A
0035F4 AA06              MOV     R2,AR6
0035F6 E4                CLR     A
0035F7 F9                MOV     R1,A
0035F8 F8                MOV     R0,A
0035F9 904DA2            MOV     DPTR,#ad_temp
0035FC E0                MOVX    A,@DPTR
0035FD FC                MOV     R4,A
0035FE A3                INC     DPTR
0035FF E0                MOVX    A,@DPTR
003600 FD                MOV     R5,A
003601 A3                INC     DPTR
003602 E0                MOVX    A,@DPTR
003603 FE                MOV     R6,A
003604 A3                INC     DPTR
003605 E0                MOVX    A,@DPTR
003606 FF                MOV     R7,A
003607 120269            LCALL   ?C?ULDIV
00360A EF                MOV     A,R7
00360B 2410              ADD     A,#010H
00360D FF                MOV     R7,A
00360E EE                MOV     A,R6
00360F 3427              ADDC    A,#027H
003611 904CC9            MOV     DPTR,#R_UnitWeight
003614 F0                MOVX    @DPTR,A
003615 A3                INC     DPTR
003616 EF                MOV     A,R7
003617 F0                MOVX    @DPTR,A
  366: 
  367: 	
  368: }
003618 22                RET     
----- FUNCTION _CS_Scale_GetWeight (END) -------


----- FUNCTION _CS_Scale_LockProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  548: u8_t CS_Scale_LockProc(u8_t option)
  549: {
;---- Variable 'option' assigned to Register 'R7' ----
  550: 	static u8_t xdata B_Weight_Downing_Lock;		//下秤过程有重物在上面锁住
  551: 	
  552: 	if(option==SetDowningLock)
003619 EF                MOV     A,R7
00361A B40109            CJNE    A,#01H,?C0072?CS_SCALE_PROC
  553: 		{
  554: 		B_Weight_Downing_Lock =LockProcLock;
00361D 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
003620 7403              MOV     A,#03H
003622 F0                MOVX    @DPTR,A
  555: 		return 0;
003623 7F00              MOV     R7,#00H
003625 22                RET     
  556: 		}
003626         ?C0072?CS_SCALE_PROC:
  557: 
  558: 	if(option==GetIfLock)
003626 EF                MOV     A,R7
003627 B40206            CJNE    A,#02H,?C0074?CS_SCALE_PROC
  559: 		{
  560: 		return B_Weight_Downing_Lock;
00362A 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
00362D E0                MOVX    A,@DPTR
00362E FF                MOV     R7,A
00362F 22                RET     
  561: 		}
003630         ?C0074?CS_SCALE_PROC:
  562: 	if(option==LockProcUnLock)
003630 EF                MOV     A,R7
003631 B40307            CJNE    A,#03H,?C0075?CS_SCALE_PROC
  563: 		{
  564: 		B_Weight_Downing_Lock =false;
003634 E4                CLR     A
003635 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
003638 F0                MOVX    @DPTR,A
  565: 		return 0;
003639 FF                MOV     R7,A
00363A 22                RET     
  566: 		}
00363B         ?C0075?CS_SCALE_PROC:
  567: 	
  568: 	if(CS_Scale_ZeroProc(GetZeroState,0)==true)		//处于零位
00363B E4                CLR     A
00363C FD                MOV     R5,A
00363D FC                MOV     R4,A
00363E 7F03              MOV     R7,#03H
003640 1212F0            LCALL   _CS_Scale_ZeroProc
003643 EF                MOV     A,R7
003644 6401              XRL     A,#01H
003646 4E                ORL     A,R6
003647 701B              JNZ     ?C0076?CS_SCALE_PROC
  569: 		{
  570: 		B_Weight_Downing_Lock &=LockProcDownUnLock ;
003649 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
00364C E0                MOVX    A,@DPTR
00364D 54FD              ANL     A,#0FDH
00364F F0                MOVX    @DPTR,A
  571: 		
  572: 		if(B_Weight_Downing_Lock&LockProcZeroLock)
003650 30E031            JNB     ACC.0,?C0078?CS_SCALE_PROC
  573: 		R_UnitWeight.origin = R_Weight_Lock;
003653 904CC0            MOV     DPTR,#R_Weight_Lock
003656 E0                MOVX    A,@DPTR
003657 FF                MOV     R7,A
003658 A3                INC     DPTR
003659 E0                MOVX    A,@DPTR
00365A 904CC9            MOV     DPTR,#R_UnitWeight
00365D CF                XCH     A,R7
00365E F0                MOVX    @DPTR,A
00365F A3                INC     DPTR
003660 EF                MOV     A,R7
003661 F0                MOVX    @DPTR,A
  574: 		}
003662 8020              SJMP    ?C0078?CS_SCALE_PROC
003664         ?C0076?CS_SCALE_PROC:
  575: 	else
  576: 		{
  577: 		if(B_Weight_Downing_Lock&LockProcDownLock)
003664 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
003667 E0                MOVX    A,@DPTR
003668 FF                MOV     R7,A
003669 30E111            JNB     ACC.1,?C0079?CS_SCALE_PROC
  578: 			R_UnitWeight.origin = R_Weight_Lock;
00366C 904CC0            MOV     DPTR,#R_Weight_Lock
00366F E0                MOVX    A,@DPTR
003670 FD                MOV     R5,A
003671 A3                INC     DPTR
003672 E0                MOVX    A,@DPTR
003673 904CC9            MOV     DPTR,#R_UnitWeight
003676 CD                XCH     A,R5
003677 F0                MOVX    @DPTR,A
003678 A3                INC     DPTR
003679 ED                MOV     A,R5
00367A F0                MOVX    @DPTR,A
00367B 8007              SJMP    ?C0078?CS_SCALE_PROC
00367D         ?C0079?CS_SCALE_PROC:
  579: 		else
  580: 			B_Weight_Downing_Lock &= LockProcZeroUnLock;
00367D EF                MOV     A,R7
00367E 54FE              ANL     A,#0FEH
003680 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
003683 F0                MOVX    @DPTR,A
  581: 		}
003684         ?C0078?CS_SCALE_PROC:
  582: 
  583: 	return 0;
003684 7F00              MOV     R7,#00H
  584: }
003686 22                RET     
----- FUNCTION _CS_Scale_LockProc (END) -------


----- FUNCTION _CS_Scale_JudgeOverLoad (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  646: u8_t CS_Scale_JudgeOverLoad(u8_t option)
  647: {
;---- Variable 'option' assigned to Register 'R7' ----
  648: 
  649: 	static	u8_t	  xdata R_Weight_OverLoadTimes;
  650: 	static	u8_t  xdata  B_Weight_OverLoad;			//超载标志
  651: 	if(option==ResetOverLoad)
003687 EF                MOV     A,R7
003688 B40209            CJNE    A,#02H,?C0085?CS_SCALE_PROC
  652: 		{
  653: 		R_Weight_OverLoadTimes = 0;
00368B E4                CLR     A
00368C 904CA0            MOV     DPTR,#R_Weight_OverLoadTimes
00368F F0                MOVX    @DPTR,A
  654: 		B_Weight_OverLoad = false;
003690 A3                INC     DPTR
003691 F0                MOVX    @DPTR,A
  655: 		return 0;
003692 FF                MOV     R7,A
003693 22                RET     
  656: 		}
003694         ?C0085?CS_SCALE_PROC:
  657: 	
  658: 	if(R_UnitWeight.origin > CS_Scale_MaxWeight)
003694 D3                SETB    C
003695 904CCA            MOV     DPTR,#R_UnitWeight+01H
003698 E0                MOVX    A,@DPTR
003699 94C4              SUBB    A,#0C4H
00369B 904CC9            MOV     DPTR,#R_UnitWeight
00369E E0                MOVX    A,@DPTR
00369F 943B              SUBB    A,#03BH
0036A1 4006              JC      ?C0087?CS_SCALE_PROC
  659: 		R_Weight_OverLoadTimes++;
0036A3 904CA0            MOV     DPTR,#R_Weight_OverLoadTimes
0036A6 E0                MOVX    A,@DPTR
0036A7 04                INC     A
0036A8 F0                MOVX    @DPTR,A
0036A9         ?C0087?CS_SCALE_PROC:
  660: 	if(R_Weight_OverLoadTimes >=2)
0036A9 904CA0            MOV     DPTR,#R_Weight_OverLoadTimes
0036AC E0                MOVX    A,@DPTR
0036AD C3                CLR     C
0036AE 9402              SUBB    A,#02H
0036B0 400E              JC      ?C0088?CS_SCALE_PROC
  661: 		{
  662: 		R_Weight_OverLoadTimes = 2;
0036B2 7402              MOV     A,#02H
0036B4 F0                MOVX    @DPTR,A
  663: 		B_Weight_OverLoad = true;
0036B5 A3                INC     DPTR
0036B6 14                DEC     A
0036B7 F0                MOVX    @DPTR,A
  664: 		R_Display_Err=CS_ScaleDisplay_L_err;
0036B8 904CC2            MOV     DPTR,#R_Display_Err
0036BB 7404              MOV     A,#04H
0036BD F0                MOVX    @DPTR,A
  665: 		}
0036BE 8005              SJMP    ?C0089?CS_SCALE_PROC
0036C0         ?C0088?CS_SCALE_PROC:
  666: 	else
  667: 		B_Weight_OverLoad = false;
0036C0 E4                CLR     A
0036C1 904CA1            MOV     DPTR,#B_Weight_OverLoad
0036C4 F0                MOVX    @DPTR,A
0036C5         ?C0089?CS_SCALE_PROC:
  668: 
  669: 	if(option==GetIfOverLoad)
0036C5 EF                MOV     A,R7
0036C6 B40106            CJNE    A,#01H,?C0090?CS_SCALE_PROC
  670: 		return B_Weight_OverLoad;
0036C9 904CA1            MOV     DPTR,#B_Weight_OverLoad
0036CC E0                MOVX    A,@DPTR
0036CD FF                MOV     R7,A
0036CE 22                RET     
0036CF         ?C0090?CS_SCALE_PROC:
  671: 	
  672: 		return 0;
0036CF 7F00              MOV     R7,#00H
  673: }
0036D1 22                RET     
----- FUNCTION _CS_Scale_JudgeOverLoad (END) -------


----- FUNCTION _CS_MemoryWeightClear_Timer (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  894: void CS_MemoryWeightClear_Timer(u8_t option)
  895: {
;---- Variable 'option' assigned to Register 'R7' ----
  896: 	static u8_t xdata timecount; 				//计时变量
  897: 	static u8_t xdata B_Timeout;
  898: 
  899: 	if(option==StartClearMemWeightTimer)
0036D2 EF                MOV     A,R7
0036D3 B40107            CJNE    A,#01H,?C0122?CS_SCALE_PROC
  900: 		{
  901: 		timecount=0;
0036D6 E4                CLR     A
0036D7 904CA9            MOV     DPTR,#timecount
0036DA F0                MOVX    @DPTR,A
  902: 		B_Timeout = false;
0036DB A3                INC     DPTR
0036DC F0                MOVX    @DPTR,A
  903: 		}
0036DD         ?C0122?CS_SCALE_PROC:
  904: 
  905: 	if(option==MemWeightTimerInc)
0036DD EF                MOV     A,R7
0036DE B4020C            CJNE    A,#02H,?C0123?CS_SCALE_PROC
  906: 		{
  907: 		if(timecount<255 ) 
0036E1 904CA9            MOV     DPTR,#timecount
0036E4 E0                MOVX    A,@DPTR
0036E5 C3                CLR     C
0036E6 94FF              SUBB    A,#0FFH
0036E8 5003              JNC     ?C0123?CS_SCALE_PROC
  908: 		timecount++;
0036EA E0                MOVX    A,@DPTR
0036EB 04                INC     A
0036EC F0                MOVX    @DPTR,A
  909: 		}
0036ED         ?C0123?CS_SCALE_PROC:
  910: 	
  911: 	if(B_Timeout == false)
0036ED 904CAA            MOV     DPTR,#B_Timeout
0036F0 E0                MOVX    A,@DPTR
0036F1 7014              JNZ     ?C0127?CS_SCALE_PROC
  912: 		{
  913: 		if(timecount>SoftTimerTimeOut)
0036F3 904CA9            MOV     DPTR,#timecount
0036F6 E0                MOVX    A,@DPTR
0036F7 D3                SETB    C
0036F8 9496              SUBB    A,#096H
0036FA 400B              JC      ?C0127?CS_SCALE_PROC
  914: 			{
  915: 			B_Timeout = true;
0036FC A3                INC     DPTR
0036FD 7401              MOV     A,#01H
0036FF F0                MOVX    @DPTR,A
  916: 			R_Weight_Mem = 0;	//时间到清记忆重量
003700 E4                CLR     A
003701 904CC3            MOV     DPTR,#R_Weight_Mem
003704 F0                MOVX    @DPTR,A
003705 A3                INC     DPTR
003706 F0                MOVX    @DPTR,A
  917: 			}
  918: 		}
  919: }
003707         ?C0127?CS_SCALE_PROC:
003707 22                RET     
----- FUNCTION _CS_MemoryWeightClear_Timer (END) -------


----- FUNCTION CS_1186Com_ReadMacAdress_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   86: void CS_1186Com_ReadMacAdress_Proc(void)
   87: {
   88: 	u8_t i;
   89: 	u8_t xdata * ptr;
   90: 
   91: 	i=0;
003708 E4                CLR     A
003709 904E4B            MOV     DPTR,#i
00370C F0                MOVX    @DPTR,A
   92: 	ptr =&i;
00370D A3                INC     DPTR
00370E 744E              MOV     A,#HIGH i
003710 F0                MOVX    @DPTR,A
003711 A3                INC     DPTR
003712 744B              MOV     A,#LOW i
003714 F0                MOVX    @DPTR,A
   93: 	
   94: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadOtp)
003715 904D55            MOV     DPTR,#R_Weight_Com_Coo
003718 E0                MOVX    A,@DPTR
003719 B4842D            CJNE    A,#084H,?C0014?CS_COMMTO1186
   95: 		{
   96: 		uartTxBuf[0]=6;		//read 6 byte MacAdress
00371C 904D58            MOV     DPTR,#uartTxBuf
00371F 7406              MOV     A,#06H
003721 F0                MOVX    @DPTR,A
   97: 		uartTxBuf[1]=0xF7;	//OTP  adress low 8bits
003722 A3                INC     DPTR
003723 74F7              MOV     A,#0F7H
003725 F0                MOVX    @DPTR,A
   98: 		uartTxBuf[2]=0x0F;	//OTP  adress high 8bits
003726 A3                INC     DPTR
003727 740F              MOV     A,#0FH
003729 F0                MOVX    @DPTR,A
   99: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadOtp,uartTxBuf);
00372A 7B01              MOV     R3,#01H
00372C 7A4D              MOV     R2,#HIGH uartTxBuf
00372E 7958              MOV     R1,#LOW uartTxBuf
003730 7F84              MOV     R7,#084H
003732 122481            LCALL   _CS_CommTo1186_SendCmd
  100: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadOtp;
003735 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
003738 7484              MOV     A,#084H
00373A F0                MOVX    @DPTR,A
  101: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadOtpStandby;
00373B 904D55            MOV     DPTR,#R_Weight_Com_Coo
00373E 7405              MOV     A,#05H
003740 F0                MOVX    @DPTR,A
  102: 		uartTimeoutCnt=0;
003741 E4                CLR     A
003742 904D68            MOV     DPTR,#uartTimeoutCnt
003745 F0                MOVX    @DPTR,A
  103: 		YC_UARTClearBuffer();
003746 120592            LCALL   YC_UARTClearBuffer
  104: 		}
003749         ?C0014?CS_COMMTO1186:
  105: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadOtpStandby)
003749 904D55            MOV     DPTR,#R_Weight_Com_Coo
00374C E0                MOVX    A,@DPTR
00374D 6405              XRL     A,#05H
00374F 706A              JNZ     ?C0019?CS_COMMTO1186
  106: 		{
  107: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 11) == 11)
003751 7B01              MOV     R3,#01H
003753 7A4D              MOV     R2,#HIGH uartRcvBuf
003755 7945              MOV     R1,#LOW uartRcvBuf
003757 7D0B              MOV     R5,#0BH
003759 FC                MOV     R4,A
00375A 1207A8            LCALL   _YC_UARTReciveDataExpected
00375D EF                MOV     A,R7
00375E 640B              XRL     A,#0BH
003760 4E                ORL     A,R6
003761 7058              JNZ     ?C0019?CS_COMMTO1186
  108: 			{
  109: 			if(generateChecksum(uartRcvBuf,10) == uartRcvBuf[10] &&
003763 7B01              MOV     R3,#01H
003765 7A4D              MOV     R2,#HIGH uartRcvBuf
003767 7945              MOV     R1,#LOW uartRcvBuf
003769 7D0A              MOV     R5,#0AH
00376B 1217F7            LCALL   _generateChecksum
00376E 904D4F            MOV     DPTR,#uartRcvBuf+0AH
003771 E0                MOVX    A,@DPTR
003772 6F                XRL     A,R7
003773 7040              JNZ     ?C0017?CS_COMMTO1186
003775 904D47            MOV     DPTR,#uartRcvBuf+02H
003778 E0                MOVX    A,@DPTR
003779 6410              XRL     A,#010H
00377B 7038              JNZ     ?C0017?CS_COMMTO1186
00377D A3                INC     DPTR
00377E E0                MOVX    A,@DPTR
00377F B48433            CJNE    A,#084H,?C0017?CS_COMMTO1186
  110: 			uartRcvBuf[2] == UART_EVENT_OK &&
  111: 			uartRcvBuf[3] == CS_CommTo1186_ReadOtp)
  112: 				{	
  113: 				//slave_state = SLAVE_ST_SET_PARAM;
  114: 				//R_Debug_temp= uartRcvBuf[5];	//测试用
  115: 
  116: 				//数据放错地址，部分数据手动赋值
  117: 				uartRcvBuf[9]= uartRcvBuf[6];
003782 904D4B            MOV     DPTR,#uartRcvBuf+06H
003785 E0                MOVX    A,@DPTR
003786 904D4E            MOV     DPTR,#uartRcvBuf+09H
003789 F0                MOVX    @DPTR,A
  118: 				uartRcvBuf[8]=0x55;
00378A 904D4D            MOV     DPTR,#uartRcvBuf+08H
00378D 7455              MOV     A,#055H
00378F F0                MOVX    @DPTR,A
  119: 				uartRcvBuf[7]=uartRcvBuf[5];
003790 904D4A            MOV     DPTR,#uartRcvBuf+05H
003793 E0                MOVX    A,@DPTR
003794 904D4C            MOV     DPTR,#uartRcvBuf+07H
003797 F0                MOVX    @DPTR,A
  120: 				uartRcvBuf[6]=0xbe;
003798 904D4B            MOV     DPTR,#uartRcvBuf+06H
00379B 74BE              MOV     A,#0BEH
00379D F0                MOVX    @DPTR,A
  121: 				uartRcvBuf[5]=uartRcvBuf[4];
00379E 904D49            MOV     DPTR,#uartRcvBuf+04H
0037A1 E0                MOVX    A,@DPTR
0037A2 A3                INC     DPTR
0037A3 F0                MOVX    @DPTR,A
  122: 				uartRcvBuf[4]=0x08;
0037A4 904D49            MOV     DPTR,#uartRcvBuf+04H
0037A7 7408              MOV     A,#08H
0037A9 F0                MOVX    @DPTR,A
  123: 
  124: 				/*
  125: 				xmemcpy(mem_le_lap,&uartRcvBuf[4],6);
  126: 				if((*mem_adv_lap_ptr) != 0) 
  127: 					{
  128: 					for(i=0;i<6;i++) 
  129: 						{
  130: 						ptr = (u8_t xdata *)(ESWAP(*mem_adv_lap_ptr)+i);
  131: 						*ptr= uartRcvBuf[9-i];
  132: 						}
  133: 					}
  134: 				*/
  135: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
0037AA E4                CLR     A
0037AB 904D55            MOV     DPTR,#R_Weight_Com_Coo
0037AE F0                MOVX    @DPTR,A
  136: 				R_Weight_Com_Coo.sucess=true;
0037AF 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
0037B2 04                INC     A
0037B3 F0                MOVX    @DPTR,A
  137: 				}
0037B4 22                RET     
0037B5         ?C0017?CS_COMMTO1186:
  138: 			else
  139: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
0037B5 904D68            MOV     DPTR,#uartTimeoutCnt
0037B8 7415              MOV     A,#015H
0037BA F0                MOVX    @DPTR,A
  140: 			}
  141: 		}
  142: }
0037BB         ?C0019?CS_COMMTO1186:
0037BB 22                RET     
----- FUNCTION CS_1186Com_ReadMacAdress_Proc (END) -------


----- FUNCTION CS_1186Com_ReadAdc_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  145: void CS_1186Com_ReadAdc_Proc(void)
  146: {
  147: 	u32_t	data_rec;
  148: 	
  149: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAd)
0037BC 904D55            MOV     DPTR,#R_Weight_Com_Coo
0037BF E0                MOVX    A,@DPTR
0037C0 B4801F            CJNE    A,#080H,?C0020?CS_COMMTO1186
  150: 		{
  151: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadAd,0);
0037C3 7B00              MOV     R3,#00H
0037C5 7A00              MOV     R2,#00H
0037C7 7900              MOV     R1,#00H
0037C9 7F80              MOV     R7,#080H
0037CB 122481            LCALL   _CS_CommTo1186_SendCmd
  152: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadAd;
0037CE 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
0037D1 7480              MOV     A,#080H
0037D3 F0                MOVX    @DPTR,A
  153: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadAdStandby;
0037D4 904D55            MOV     DPTR,#R_Weight_Com_Coo
0037D7 7401              MOV     A,#01H
0037D9 F0                MOVX    @DPTR,A
  154: 		uartTimeoutCnt=0;
0037DA E4                CLR     A
0037DB 904D68            MOV     DPTR,#uartTimeoutCnt
0037DE F0                MOVX    @DPTR,A
  155: 		YC_UARTClearBuffer();
0037DF 120592            LCALL   YC_UARTClearBuffer
  156: 		}
0037E2         ?C0020?CS_COMMTO1186:
  157: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAdStandby)
0037E2 904D55            MOV     DPTR,#R_Weight_Com_Coo
0037E5 E0                MOVX    A,@DPTR
0037E6 6401              XRL     A,#01H
0037E8 6003              JZ      $ + 5H
0037EA 023891            LJMP    ?C0028?CS_COMMTO1186
  158: 		{						
  159: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 9)==9)
0037ED 7B01              MOV     R3,#01H
0037EF 7A4D              MOV     R2,#HIGH uartRcvBuf
0037F1 7945              MOV     R1,#LOW uartRcvBuf
0037F3 7D09              MOV     R5,#09H
0037F5 FC                MOV     R4,A
0037F6 1207A8            LCALL   _YC_UARTReciveDataExpected
0037F9 EF                MOV     A,R7
0037FA 6409              XRL     A,#09H
0037FC 4E                ORL     A,R6
0037FD 6002              JZ      $ + 4H
0037FF 0191              AJMP    ?C0028?CS_COMMTO1186
  160: 			{						
  161: 			if(uartRcvBuf[3] == CS_CommTo1186_ReadAd)   
003801 904D48            MOV     DPTR,#uartRcvBuf+03H
003804 E0                MOVX    A,@DPTR
003805 6480              XRL     A,#080H
003807 6002              JZ      $ + 4H
003809 018B              AJMP    ?C0023?CS_COMMTO1186
  162: 				{
  163: 				
  164: 				
  165: 				R_1186sys_state = uartRcvBuf[7];
00380B 904D4C            MOV     DPTR,#uartRcvBuf+07H
00380E E0                MOVX    A,@DPTR
00380F 904CDA            MOV     DPTR,#R_1186sys_state
003812 F0                MOVX    @DPTR,A
  166: 
  167: 				if(R_1186sys_state&0x08)			//AD数据更新标志
003813 30E35C            JNB     ACC.3,?C0024?CS_COMMTO1186
  168: 					{
  169: 					B_Weight_AdOk = true;
003816 904CD7            MOV     DPTR,#B_Weight_AdOk
003819 7401              MOV     A,#01H
00381B F0                MOVX    @DPTR,A
  170: 					data_rec = uartRcvBuf[4];
00381C 904D49            MOV     DPTR,#uartRcvBuf+04H
00381F E0                MOVX    A,@DPTR
003820 FF                MOV     R7,A
003821 E4                CLR     A
003822 FC                MOV     R4,A
003823 FD                MOV     R5,A
003824 FE                MOV     R6,A
;---- Variable 'data_rec' assigned to Register 'R4/R5/R6/R7' ----
  171: 					data_rec = (data_rec<<8) + uartRcvBuf[5];
003825 7808              MOV     R0,#08H
003827 12031F            LCALL   ?C?LSHL
00382A A804              MOV     R0,AR4
00382C A905              MOV     R1,AR5
00382E AA06              MOV     R2,AR6
003830 AB07              MOV     R3,AR7
003832 A3                INC     DPTR
003833 E0                MOVX    A,@DPTR
003834 FF                MOV     R7,A
003835 E4                CLR     A
003836 FC                MOV     R4,A
003837 FD                MOV     R5,A
003838 FE                MOV     R6,A
003839 EB                MOV     A,R3
00383A 2F                ADD     A,R7
00383B FF                MOV     R7,A
00383C EE                MOV     A,R6
00383D 3A                ADDC    A,R2
00383E FE                MOV     R6,A
00383F ED                MOV     A,R5
003840 39                ADDC    A,R1
003841 FD                MOV     R5,A
003842 EC                MOV     A,R4
003843 38                ADDC    A,R0
003844 FC                MOV     R4,A
  172: 					data_rec = (data_rec<<8) + uartRcvBuf[6];
003845 7808              MOV     R0,#08H
003847 12031F            LCALL   ?C?LSHL
00384A A804              MOV     R0,AR4
00384C A905              MOV     R1,AR5
00384E AA06              MOV     R2,AR6
003850 AB07              MOV     R3,AR7
003852 A3                INC     DPTR
003853 E0                MOVX    A,@DPTR
003854 FF                MOV     R7,A
003855 E4                CLR     A
003856 FC                MOV     R4,A
003857 FD                MOV     R5,A
003858 FE                MOV     R6,A
003859 EB                MOV     A,R3
00385A 2F                ADD     A,R7
00385B FF                MOV     R7,A
00385C EE                MOV     A,R6
00385D 3A                ADDC    A,R2
00385E FE                MOV     R6,A
00385F ED                MOV     A,R5
003860 39                ADDC    A,R1
003861 FD                MOV     R5,A
003862 EC                MOV     A,R4
003863 38                ADDC    A,R0
003864 FC                MOV     R4,A
  173: 					R_AD_Original =data_rec >> 6;	
003865 7806              MOV     R0,#06H
003867 12030C            LCALL   ?C?ULSHR
00386A 904CD8            MOV     DPTR,#R_AD_Original
00386D EE                MOV     A,R6
00386E F0                MOVX    @DPTR,A
00386F A3                INC     DPTR
003870 EF                MOV     A,R7
003871 F0                MOVX    @DPTR,A
  174: 					}
003872         ?C0024?CS_COMMTO1186:
  175: 				
  176: 				if(R_Scale_state==CS_Scale_state_init)
003872 904CC5            MOV     DPTR,#R_Scale_state
003875 E0                MOVX    A,@DPTR
003876 7006              JNZ     ?C0025?CS_COMMTO1186
  177: 					R_Weight_Com_Coo.now = CS_CommTo1186_Null;
003878 904D55            MOV     DPTR,#R_Weight_Com_Coo
00387B F0                MOVX    @DPTR,A
00387C 8006              SJMP    ?C0026?CS_COMMTO1186
00387E         ?C0025?CS_COMMTO1186:
  178: 				else
  179: 					R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplay;
00387E 904D55            MOV     DPTR,#R_Weight_Com_Coo
003881 74E0              MOV     A,#0E0H
003883 F0                MOVX    @DPTR,A
003884         ?C0026?CS_COMMTO1186:
  180: 				R_Weight_Com_Coo.sucess=true;
003884 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
003887 7401              MOV     A,#01H
003889 F0                MOVX    @DPTR,A
  181: 				
  182: 				}
00388A 22                RET     
00388B         ?C0023?CS_COMMTO1186:
  183: 			else
  184: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
00388B 904D68            MOV     DPTR,#uartTimeoutCnt
00388E 7415              MOV     A,#015H
003890 F0                MOVX    @DPTR,A
  185: 			}
  186: 		}
  187: }
003891         ?C0028?CS_COMMTO1186:
003891 22                RET     
----- FUNCTION CS_1186Com_ReadAdc_Proc (END) -------


----- FUNCTION CS_1186Com_ReadAdZero_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  359: void CS_1186Com_ReadAdZero_Proc(void)
  360: {
  361: 	u32_t	data_rec;
  362: 	u16_t	R_AD_Zero;
  363: 	
  364: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAdZero)
003892 904D55            MOV     DPTR,#R_Weight_Com_Coo
003895 E0                MOVX    A,@DPTR
003896 B4851F            CJNE    A,#085H,?C0055?CS_COMMTO1186
  365: 		{
  366: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadAdZero,0);
003899 7B00              MOV     R3,#00H
00389B 7A00              MOV     R2,#00H
00389D 7900              MOV     R1,#00H
00389F 7F85              MOV     R7,#085H
0038A1 122481            LCALL   _CS_CommTo1186_SendCmd
  367: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadAdZero;
0038A4 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
0038A7 7485              MOV     A,#085H
0038A9 F0                MOVX    @DPTR,A
  368: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadAdZeroStandby;
0038AA 904D55            MOV     DPTR,#R_Weight_Com_Coo
0038AD 7406              MOV     A,#06H
0038AF F0                MOVX    @DPTR,A
  369: 		uartTimeoutCnt=0;
0038B0 E4                CLR     A
0038B1 904D68            MOV     DPTR,#uartTimeoutCnt
0038B4 F0                MOVX    @DPTR,A
  370: 		YC_UARTClearBuffer();
0038B5 120592            LCALL   YC_UARTClearBuffer
  371: 		}
0038B8         ?C0055?CS_COMMTO1186:
  372: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAdZeroStandby)
0038B8 904D55            MOV     DPTR,#R_Weight_Com_Coo
0038BB E0                MOVX    A,@DPTR
0038BC 6406              XRL     A,#06H
0038BE 6002              JZ      $ + 4H
0038C0 2142              AJMP    ?C0060?CS_COMMTO1186
  373: 		{						
  374: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 8)==8)
0038C2 7B01              MOV     R3,#01H
0038C4 7A4D              MOV     R2,#HIGH uartRcvBuf
0038C6 7945              MOV     R1,#LOW uartRcvBuf
0038C8 7D08              MOV     R5,#08H
0038CA FC                MOV     R4,A
0038CB 1207A8            LCALL   _YC_UARTReciveDataExpected
0038CE EF                MOV     A,R7
0038CF 6408              XRL     A,#08H
0038D1 4E                ORL     A,R6
0038D2 706E              JNZ     ?C0060?CS_COMMTO1186
  375: 			{						
  376: 			if(uartRcvBuf[3] == CS_CommTo1186_ReadAdZero)   
0038D4 904D48            MOV     DPTR,#uartRcvBuf+03H
0038D7 E0                MOVX    A,@DPTR
0038D8 6485              XRL     A,#085H
0038DA 7060              JNZ     ?C0058?CS_COMMTO1186
  377: 				{
  378: 				data_rec = uartRcvBuf[4];
0038DC A3                INC     DPTR
0038DD E0                MOVX    A,@DPTR
0038DE FF                MOV     R7,A
0038DF E4                CLR     A
0038E0 FC                MOV     R4,A
0038E1 FD                MOV     R5,A
0038E2 FE                MOV     R6,A
;---- Variable 'data_rec' assigned to Register 'R4/R5/R6/R7' ----
  379: 				data_rec = (data_rec<<8) + uartRcvBuf[5];
0038E3 7808              MOV     R0,#08H
0038E5 12031F            LCALL   ?C?LSHL
0038E8 A804              MOV     R0,AR4
0038EA A905              MOV     R1,AR5
0038EC AA06              MOV     R2,AR6
0038EE AB07              MOV     R3,AR7
0038F0 A3                INC     DPTR
0038F1 E0                MOVX    A,@DPTR
0038F2 FF                MOV     R7,A
0038F3 E4                CLR     A
0038F4 FC                MOV     R4,A
0038F5 FD                MOV     R5,A
0038F6 FE                MOV     R6,A
0038F7 EB                MOV     A,R3
0038F8 2F                ADD     A,R7
0038F9 FF                MOV     R7,A
0038FA EE                MOV     A,R6
0038FB 3A                ADDC    A,R2
0038FC FE                MOV     R6,A
0038FD ED                MOV     A,R5
0038FE 39                ADDC    A,R1
0038FF FD                MOV     R5,A
003900 EC                MOV     A,R4
003901 38                ADDC    A,R0
003902 FC                MOV     R4,A
  380: 				data_rec = (data_rec<<8) + uartRcvBuf[6];
003903 7808              MOV     R0,#08H
003905 12031F            LCALL   ?C?LSHL
003908 A804              MOV     R0,AR4
00390A A905              MOV     R1,AR5
00390C AA06              MOV     R2,AR6
00390E AB07              MOV     R3,AR7
003910 A3                INC     DPTR
003911 E0                MOVX    A,@DPTR
003912 FF                MOV     R7,A
003913 E4                CLR     A
003914 FC                MOV     R4,A
003915 FD                MOV     R5,A
003916 FE                MOV     R6,A
003917 EB                MOV     A,R3
003918 2F                ADD     A,R7
003919 FF                MOV     R7,A
00391A EE                MOV     A,R6
00391B 3A                ADDC    A,R2
00391C FE                MOV     R6,A
00391D ED                MOV     A,R5
00391E 39                ADDC    A,R1
00391F FD                MOV     R5,A
003920 EC                MOV     A,R4
003921 38                ADDC    A,R0
003922 FC                MOV     R4,A
  381: 				R_AD_Zero =data_rec >> 6;	
003923 7806              MOV     R0,#06H
003925 12030C            LCALL   ?C?ULSHR
;---- Variable 'R_AD_Zero' assigned to Register 'R6/R7' ----
  382: 				CS_Scale_ZeroProc(SetRunningZero,R_AD_Zero);
003928 AD07              MOV     R5,AR7
00392A AC06              MOV     R4,AR6
00392C 7F06              MOV     R7,#06H
00392E 1212F0            LCALL   _CS_Scale_ZeroProc
  383: 				
  384: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
003931 E4                CLR     A
003932 904D55            MOV     DPTR,#R_Weight_Com_Coo
003935 F0                MOVX    @DPTR,A
  385: 				R_Weight_Com_Coo.sucess=true;
003936 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
003939 04                INC     A
00393A F0                MOVX    @DPTR,A
  386: 				
  387: 				}
00393B 22                RET     
00393C         ?C0058?CS_COMMTO1186:
  388: 			else
  389: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
00393C 904D68            MOV     DPTR,#uartTimeoutCnt
00393F 7415              MOV     A,#015H
003941 F0                MOVX    @DPTR,A
  390: 			}
  391: 		}
  392: }
003942         ?C0060?CS_COMMTO1186:
003942 22                RET     
----- FUNCTION CS_1186Com_ReadAdZero_Proc (END) -------


----- FUNCTION CS_ScaleDisplay_Debug (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
   55: void CS_ScaleDisplay_Debug()
   56: {
   57: 	u8_t buf[5];
   58: 	CS_ScaleDisplay_HexToBcd(R_Debug_temp,buf);
003943 904CC7            MOV     DPTR,#R_Debug_temp
003946 E0                MOVX    A,@DPTR
003947 FE                MOV     R6,A
003948 A3                INC     DPTR
003949 E0                MOVX    A,@DPTR
00394A FF                MOV     R7,A
00394B 7B01              MOV     R3,#01H
00394D 7A4E              MOV     R2,#HIGH buf
00394F 792A              MOV     R1,#LOW buf
003951 3194              ACALL   _CS_ScaleDisplay_HexToBcd
   59: 		
   60: 	CS_lcd_showbuf[0] = CS_ScaleDisplay_LookUpTable(buf[1]);
003953 904E2B            MOV     DPTR,#buf+01H
003956 E0                MOVX    A,@DPTR
003957 FF                MOV     R7,A
003958 1217CB            LCALL   _CS_ScaleDisplay_LookUpTable
00395B 904D23            MOV     DPTR,#CS_lcd_showbuf
00395E EF                MOV     A,R7
00395F F0                MOVX    @DPTR,A
   61: 	CS_lcd_showbuf[1] = CS_ScaleDisplay_LookUpTable(buf[2]);
003960 904E2C            MOV     DPTR,#buf+02H
003963 E0                MOVX    A,@DPTR
003964 FF                MOV     R7,A
003965 1217CB            LCALL   _CS_ScaleDisplay_LookUpTable
003968 904D24            MOV     DPTR,#CS_lcd_showbuf+01H
00396B EF                MOV     A,R7
00396C F0                MOVX    @DPTR,A
   62: 	CS_lcd_showbuf[2] = CS_ScaleDisplay_LookUpTable(buf[3]);
00396D 904E2D            MOV     DPTR,#buf+03H
003970 E0                MOVX    A,@DPTR
003971 FF                MOV     R7,A
003972 1217CB            LCALL   _CS_ScaleDisplay_LookUpTable
003975 904D25            MOV     DPTR,#CS_lcd_showbuf+02H
003978 EF                MOV     A,R7
003979 F0                MOVX    @DPTR,A
   63: 	CS_lcd_showbuf[3] = CS_ScaleDisplay_LookUpTable(buf[4]);	
00397A 904E2E            MOV     DPTR,#buf+04H
00397D E0                MOVX    A,@DPTR
00397E FF                MOV     R7,A
00397F 1217CB            LCALL   _CS_ScaleDisplay_LookUpTable
003982 904D26            MOV     DPTR,#CS_lcd_showbuf+03H
003985 EF                MOV     A,R7
003986 F0                MOVX    @DPTR,A
   64: 		
   65: 	CS_ScaleDisplay_LcdBuf_rShift4();
003987 31FF              ACALL   CS_ScaleDisplay_LcdBuf_rShift4
   66: 
   67: 	CS_CommTo1186_SendCmd(CS_CommTo1186_LcdDisplay,CS_Lcd_Send_Data);
003989 7B01              MOV     R3,#01H
00398B 7A4D              MOV     R2,#HIGH CS_Lcd_Send_Data
00398D 7928              MOV     R1,#LOW CS_Lcd_Send_Data
00398F 7FE0              MOV     R7,#0E0H
003991 022481            LJMP    _CS_CommTo1186_SendCmd
   68: 
----- FUNCTION CS_ScaleDisplay_Debug (END) -------


----- FUNCTION _CS_ScaleDisplay_HexToBcd (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  268: void CS_ScaleDisplay_HexToBcd(u16_t HexData,u8_t* buf)
  269: {
003994 904E19            MOV     DPTR,#HexData
003997 EE                MOV     A,R6
003998 F0                MOVX    @DPTR,A
003999 A3                INC     DPTR
00399A EF                MOV     A,R7
00399B F0                MOVX    @DPTR,A
00399C A3                INC     DPTR
00399D EB                MOV     A,R3
00399E F0                MOVX    @DPTR,A
00399F A3                INC     DPTR
0039A0 EA                MOV     A,R2
0039A1 F0                MOVX    @DPTR,A
0039A2 A3                INC     DPTR
0039A3 E9                MOV     A,R1
0039A4 F0                MOVX    @DPTR,A
  270: 	u8_t  i;
  271: 	for(i=0;i<5;i++)
0039A5 E4                CLR     A
0039A6 A3                INC     DPTR
0039A7 F0                MOVX    @DPTR,A
0039A8         ?C0037?CS_SCALEDISPLAY:
0039A8 904E1E            MOV     DPTR,#i
0039AB E0                MOVX    A,@DPTR
0039AC FB                MOV     R3,A
0039AD C3                CLR     C
0039AE 9405              SUBB    A,#05H
0039B0 504C              JNC     ?C0040?CS_SCALEDISPLAY
  272: 		{
  273: 		buf[4-i] =  HexData%10;
0039B2 904E19            MOV     DPTR,#HexData
0039B5 E0                MOVX    A,@DPTR
0039B6 FE                MOV     R6,A
0039B7 A3                INC     DPTR
0039B8 E0                MOVX    A,@DPTR
0039B9 FF                MOV     R7,A
0039BA 7C00              MOV     R4,#00H
0039BC 7D0A              MOV     R5,#0AH
0039BE 120173            LCALL   ?C?UIDIV
0039C1 AF05              MOV     R7,AR5
0039C3 EB                MOV     A,R3
0039C4 FD                MOV     R5,A
0039C5 C3                CLR     C
0039C6 7404              MOV     A,#04H
0039C8 9D                SUBB    A,R5
0039C9 FD                MOV     R5,A
0039CA E4                CLR     A
0039CB 9400              SUBB    A,#00H
0039CD FC                MOV     R4,A
0039CE A3                INC     DPTR
0039CF E0                MOVX    A,@DPTR
0039D0 FB                MOV     R3,A
0039D1 A3                INC     DPTR
0039D2 E0                MOVX    A,@DPTR
0039D3 FA                MOV     R2,A
0039D4 A3                INC     DPTR
0039D5 E0                MOVX    A,@DPTR
0039D6 F9                MOV     R1,A
0039D7 8D82              MOV     DPL,R5
0039D9 8C83              MOV     DPH,R4
0039DB EF                MOV     A,R7
0039DC 120151            LCALL   ?C?CSTOPTR
  274: 		HexData = HexData /10;
0039DF 904E19            MOV     DPTR,#HexData
0039E2 E0                MOVX    A,@DPTR
0039E3 FE                MOV     R6,A
0039E4 A3                INC     DPTR
0039E5 E0                MOVX    A,@DPTR
0039E6 FF                MOV     R7,A
0039E7 7C00              MOV     R4,#00H
0039E9 7D0A              MOV     R5,#0AH
0039EB 120173            LCALL   ?C?UIDIV
0039EE 904E19            MOV     DPTR,#HexData
0039F1 EE                MOV     A,R6
0039F2 F0                MOVX    @DPTR,A
0039F3 A3                INC     DPTR
0039F4 EF                MOV     A,R7
0039F5 F0                MOVX    @DPTR,A
  275: 		}	
0039F6 904E1E            MOV     DPTR,#i
0039F9 E0                MOVX    A,@DPTR
0039FA 04                INC     A
0039FB F0                MOVX    @DPTR,A
0039FC 80AA              SJMP    ?C0037?CS_SCALEDISPLAY
  276: }
0039FE         ?C0040?CS_SCALEDISPLAY:
0039FE 22                RET     
----- FUNCTION _CS_ScaleDisplay_HexToBcd (END) -------


----- FUNCTION CS_ScaleDisplay_LcdBuf_rShift4 (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  243: void CS_ScaleDisplay_LcdBuf_rShift4()
  244: {
  245: 	CS_lcd_showbuf[4] = (CS_lcd_showbuf[4] & 0xf0) | (CS_lcd_showbuf[3] & 0x0f);
  246: 	CS_lcd_showbuf[3] = (CS_lcd_showbuf[3] & 0xf0) | (CS_lcd_showbuf[2] & 0x0f);
0039FF 904D26            MOV     DPTR,#CS_lcd_showbuf+03H
003A02 E0                MOVX    A,@DPTR
003A03 540F              ANL     A,#0FH
003A05 FF                MOV     R7,A
003A06 A3                INC     DPTR
003A07 E0                MOVX    A,@DPTR
003A08 54F0              ANL     A,#0F0H
003A0A 4F                ORL     A,R7
003A0B F0                MOVX    @DPTR,A
  247: 	CS_lcd_showbuf[2] = (CS_lcd_showbuf[2] & 0xf0) | (CS_lcd_showbuf[1] & 0x0f);
003A0C 904D25            MOV     DPTR,#CS_lcd_showbuf+02H
003A0F E0                MOVX    A,@DPTR
003A10 540F              ANL     A,#0FH
003A12 FF                MOV     R7,A
003A13 A3                INC     DPTR
003A14 E0                MOVX    A,@DPTR
003A15 54F0              ANL     A,#0F0H
003A17 4F                ORL     A,R7
003A18 F0                MOVX    @DPTR,A
  248: 	CS_lcd_showbuf[1] = (CS_lcd_showbuf[1] & 0xf0) | (CS_lcd_showbuf[0] & 0x0f);
003A19 904D24            MOV     DPTR,#CS_lcd_showbuf+01H
003A1C E0                MOVX    A,@DPTR
003A1D 540F              ANL     A,#0FH
003A1F FF                MOV     R7,A
003A20 A3                INC     DPTR
003A21 E0                MOVX    A,@DPTR
003A22 54F0              ANL     A,#0F0H
003A24 4F                ORL     A,R7
003A25 F0                MOVX    @DPTR,A
  249: 	CS_lcd_showbuf[0] = CS_lcd_showbuf[0] & 0xf0;
003A26 904D23            MOV     DPTR,#CS_lcd_showbuf
003A29 E0                MOVX    A,@DPTR
003A2A 540F              ANL     A,#0FH
003A2C FF                MOV     R7,A
003A2D A3                INC     DPTR
003A2E E0                MOVX    A,@DPTR
003A2F 54F0              ANL     A,#0F0H
003A31 4F                ORL     A,R7
003A32 F0                MOVX    @DPTR,A
  250: 
003A33 904D23            MOV     DPTR,#CS_lcd_showbuf
003A36 E0                MOVX    A,@DPTR
003A37 54F0              ANL     A,#0F0H
003A39 FF                MOV     R7,A
003A3A F0                MOVX    @DPTR,A
003A3B FD                MOV     R5,A
  251: 	//清显示缓存数字部分
  252: 	CS_Lcd_Send_Data[0]  &= 0x0f;
003A3C 904D28            MOV     DPTR,#CS_Lcd_Send_Data
003A3F E0                MOVX    A,@DPTR
003A40 540F              ANL     A,#0FH
003A42 F0                MOVX    @DPTR,A
  253: 	CS_Lcd_Send_Data[1]  &= 0x08;
003A43 A3                INC     DPTR
003A44 E0                MOVX    A,@DPTR
003A45 5408              ANL     A,#08H
003A47 F0                MOVX    @DPTR,A
  254: 	CS_Lcd_Send_Data[2]  &= 0x08;
003A48 A3                INC     DPTR
003A49 E0                MOVX    A,@DPTR
003A4A 5408              ANL     A,#08H
003A4C F0                MOVX    @DPTR,A
  255: 	CS_Lcd_Send_Data[3]  &= 0x08;
003A4D A3                INC     DPTR
003A4E E0                MOVX    A,@DPTR
003A4F 5408              ANL     A,#08H
003A51 F0                MOVX    @DPTR,A
  256: 	CS_Lcd_Send_Data[4]  &= 0xf8;
003A52 A3                INC     DPTR
003A53 E0                MOVX    A,@DPTR
003A54 54F8              ANL     A,#0F8H
003A56 F0                MOVX    @DPTR,A
  257: 
  258: 	//显示缓存数字部分重新赋值
  259: 	CS_Lcd_Send_Data[0]  |= CS_lcd_showbuf[0];
003A57 904D28            MOV     DPTR,#CS_Lcd_Send_Data
003A5A E0                MOVX    A,@DPTR
003A5B 4D                ORL     A,R5
003A5C F0                MOVX    @DPTR,A
  260: 	CS_Lcd_Send_Data[1]  |= CS_lcd_showbuf[1];
003A5D A3                INC     DPTR
003A5E E0                MOVX    A,@DPTR
003A5F FF                MOV     R7,A
003A60 904D24            MOV     DPTR,#CS_lcd_showbuf+01H
003A63 E0                MOVX    A,@DPTR
003A64 FE                MOV     R6,A
003A65 EF                MOV     A,R7
003A66 4E                ORL     A,R6
003A67 904D29            MOV     DPTR,#CS_Lcd_Send_Data+01H
003A6A F0                MOVX    @DPTR,A
  261: 	CS_Lcd_Send_Data[2]  |= CS_lcd_showbuf[2];
003A6B A3                INC     DPTR
003A6C E0                MOVX    A,@DPTR
003A6D FF                MOV     R7,A
003A6E 904D25            MOV     DPTR,#CS_lcd_showbuf+02H
003A71 E0                MOVX    A,@DPTR
003A72 FE                MOV     R6,A
003A73 EF                MOV     A,R7
003A74 4E                ORL     A,R6
003A75 904D2A            MOV     DPTR,#CS_Lcd_Send_Data+02H
003A78 F0                MOVX    @DPTR,A
  262: 	CS_Lcd_Send_Data[3]  |= CS_lcd_showbuf[3];
003A79 A3                INC     DPTR
003A7A E0                MOVX    A,@DPTR
003A7B FF                MOV     R7,A
003A7C 904D26            MOV     DPTR,#CS_lcd_showbuf+03H
003A7F E0                MOVX    A,@DPTR
003A80 FE                MOV     R6,A
003A81 EF                MOV     A,R7
003A82 4E                ORL     A,R6
003A83 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
003A86 F0                MOVX    @DPTR,A
  263: 	CS_Lcd_Send_Data[4]  |= CS_lcd_showbuf[4];
003A87 A3                INC     DPTR
003A88 E0                MOVX    A,@DPTR
003A89 FF                MOV     R7,A
003A8A 904D27            MOV     DPTR,#CS_lcd_showbuf+04H
003A8D E0                MOVX    A,@DPTR
003A8E FE                MOV     R6,A
003A8F EF                MOV     A,R7
003A90 4E                ORL     A,R6
003A91 904D2C            MOV     DPTR,#CS_Lcd_Send_Data+04H
003A94 F0                MOVX    @DPTR,A
  264: 		
  265: }
003A95 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdBuf_rShift4 (END) -------


----- FUNCTION CS_ScaleDisplay_LcdShowNull (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  298: void CS_ScaleDisplay_LcdShowNull(void)
  299: {
  300: 	CS_Lcd_Send_Data[0] = 0x00;
  301: 	CS_Lcd_Send_Data[1] = 0x00;
003A96 E4                CLR     A
003A97 904D28            MOV     DPTR,#CS_Lcd_Send_Data
003A9A F0                MOVX    @DPTR,A
  302: 	CS_Lcd_Send_Data[2] = 0x00;
003A9B A3                INC     DPTR
003A9C F0                MOVX    @DPTR,A
  303: 	CS_Lcd_Send_Data[3] = 0x00;
003A9D A3                INC     DPTR
003A9E F0                MOVX    @DPTR,A
  304: 	CS_Lcd_Send_Data[4] = 0x00;
003A9F A3                INC     DPTR
003AA0 F0                MOVX    @DPTR,A
  305: }
003AA1 A3                INC     DPTR
003AA2 F0                MOVX    @DPTR,A
  306: 
003AA3 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdShowNull (END) -------


----- FUNCTION CS_ScaleDisplay_LcdShowAll (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  316: void CS_ScaleDisplay_LcdShowAll(void)
  317: {
  318: 	CS_Lcd_Send_Data[0] = 0xFF;
  319: 	CS_Lcd_Send_Data[1] = 0xFF;
003AA4 904D28            MOV     DPTR,#CS_Lcd_Send_Data
003AA7 74FF              MOV     A,#0FFH
003AA9 F0                MOVX    @DPTR,A
  320: 	CS_Lcd_Send_Data[2] = 0xFF;
003AAA A3                INC     DPTR
003AAB F0                MOVX    @DPTR,A
  321: 	CS_Lcd_Send_Data[3] = 0xFF;
003AAC A3                INC     DPTR
003AAD F0                MOVX    @DPTR,A
  322: 	CS_Lcd_Send_Data[4] = 0xFF;
003AAE A3                INC     DPTR
003AAF F0                MOVX    @DPTR,A
  323: }
003AB0 A3                INC     DPTR
003AB1 F0                MOVX    @DPTR,A
  324: 
003AB2 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdShowAll (END) -------


----- FUNCTION CS_ScaleDisplay_LcdBackup (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  326: void CS_ScaleDisplay_LcdBackup(void)
  327: {
  328: 	CS_Lcd_Send_Data_BAK[0] = CS_Lcd_Send_Data[0];
  329: 	CS_Lcd_Send_Data_BAK[1] = CS_Lcd_Send_Data[1];
003AB3 904D28            MOV     DPTR,#CS_Lcd_Send_Data
003AB6 E0                MOVX    A,@DPTR
003AB7 904D1D            MOV     DPTR,#CS_Lcd_Send_Data_BAK
003ABA F0                MOVX    @DPTR,A
  330: 	CS_Lcd_Send_Data_BAK[2] = CS_Lcd_Send_Data[2];
003ABB 904D29            MOV     DPTR,#CS_Lcd_Send_Data+01H
003ABE E0                MOVX    A,@DPTR
003ABF 904D1E            MOV     DPTR,#CS_Lcd_Send_Data_BAK+01H
003AC2 F0                MOVX    @DPTR,A
  331: 	CS_Lcd_Send_Data_BAK[3] = CS_Lcd_Send_Data[3];
003AC3 904D2A            MOV     DPTR,#CS_Lcd_Send_Data+02H
003AC6 E0                MOVX    A,@DPTR
003AC7 904D1F            MOV     DPTR,#CS_Lcd_Send_Data_BAK+02H
003ACA F0                MOVX    @DPTR,A
  332: 	CS_Lcd_Send_Data_BAK[4] = CS_Lcd_Send_Data[4];	
003ACB 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
003ACE E0                MOVX    A,@DPTR
003ACF 904D20            MOV     DPTR,#CS_Lcd_Send_Data_BAK+03H
003AD2 F0                MOVX    @DPTR,A
  333: }
003AD3 904D2C            MOV     DPTR,#CS_Lcd_Send_Data+04H
003AD6 E0                MOVX    A,@DPTR
003AD7 904D21            MOV     DPTR,#CS_Lcd_Send_Data_BAK+04H
003ADA F0                MOVX    @DPTR,A
  334: 
003ADB 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdBackup (END) -------


----- FUNCTION sendHistoryData (BEGIN) -----
 FILE: 'lxProtocol.c'
  383: static void sendHistoryData(void)
  384: {
  385: 	static u8_t total_len = 0;
  386: 	UserMeasureData *temp = NULL;
003ADC 904DC2            MOV     DPTR,#temp
003ADF E4                CLR     A
003AE0 F0                MOVX    @DPTR,A
003AE1 A3                INC     DPTR
003AE2 F0                MOVX    @DPTR,A
003AE3 A3                INC     DPTR
003AE4 F0                MOVX    @DPTR,A
  387: 	u32_t crc32;
  388: 	u8_t i=0;
003AE5 904DC9            MOV     DPTR,#i
003AE8 F0                MOVX    @DPTR,A
  389: 	u8_t pkgCnt; 
  390: 	u8_t size;
  391: 	/*
  392: 	UserMeasureData temp1;
  393: 	temp1.UTCTime[0] = 0x12;
  394: 	temp1.UTCTime[0] = 0x34;
  395: 	temp1.UTCTime[0] = 0x56;
  396: 	temp1.UTCTime[0] = 0x78;
  397: 	temp1.weight = 0xabba;
  398: 	QueuePush(&temp1);
  399: 	QueuePush(&temp1);
  400: 	*/
  401: 	
  402: 	size = historyUserData.size;
003AE9 904C12            MOV     DPTR,#historyUserData+02H
003AEC E0                MOVX    A,@DPTR
003AED 904DCB            MOV     DPTR,#size
003AF0 F0                MOVX    @DPTR,A
  403: 	pkgCnt = (8 + historyUserData.size * 6 + 4)/18 + (((8 + historyUserData.size * 6 + 4)%18)>0?1:0);
003AF1 75F006            MOV     B,#06H
003AF4 A4                MUL     AB
003AF5 240C              ADD     A,#0CH
003AF7 FF                MOV     R7,A
003AF8 E4                CLR     A
003AF9 35F0              ADDC    A,B
003AFB FE                MOV     R6,A
003AFC 7C00              MOV     R4,#00H
003AFE 7D12              MOV     R5,#012H
003B00 120173            LCALL   ?C?UIDIV
003B03 ED                MOV     A,R5
003B04 D3                SETB    C
003B05 9400              SUBB    A,#00H
003B07 4006              JC      ?C0068?LXPROTOCOL
003B09 7F01              MOV     R7,#01H
003B0B 7B01              MOV     R3,#01H
003B0D 8004              SJMP    ?C0069?LXPROTOCOL
003B0F         ?C0068?LXPROTOCOL:
003B0F 7F00              MOV     R7,#00H
003B11 7B00              MOV     R3,#00H
003B13         ?C0069?LXPROTOCOL:
003B13 904C12            MOV     DPTR,#historyUserData+02H
003B16 E0                MOVX    A,@DPTR
003B17 FA                MOV     R2,A
003B18 75F006            MOV     B,#06H
003B1B A4                MUL     AB
003B1C 240C              ADD     A,#0CH
003B1E FF                MOV     R7,A
003B1F E4                CLR     A
003B20 35F0              ADDC    A,B
003B22 FE                MOV     R6,A
003B23 7C00              MOV     R4,#00H
003B25 7D12              MOV     R5,#012H
003B27 120173            LCALL   ?C?UIDIV
003B2A EB                MOV     A,R3
003B2B 2F                ADD     A,R7
003B2C 904DCA            MOV     DPTR,#pkgCnt
003B2F F0                MOVX    @DPTR,A
  404: 	total_len = 8 + historyUserData.size * 6 + 4;
003B30 EA                MOV     A,R2
003B31 75F006            MOV     B,#06H
003B34 A4                MUL     AB
003B35 240C              ADD     A,#0CH
003B37 904E5E            MOV     DPTR,#total_len
003B3A F0                MOVX    @DPTR,A
  405: 	
  406: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
003B3B 904C64            MOV     DPTR,#btCmdBuf+01H
003B3E 7430              MOV     A,#030H
003B40 F0                MOVX    @DPTR,A
  407: 	btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
003B41 A3                INC     DPTR
003B42 741C              MOV     A,#01CH
003B44 F0                MOVX    @DPTR,A
  408: 	btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
003B45 E4                CLR     A
003B46 A3                INC     DPTR
003B47 F0                MOVX    @DPTR,A
  409: 
  410: 	*(LX_SEND_BUF+0) = LO_UINT16(CMD_SYNC_DATA_RSP);
003B48 9048D2            MOV     DPTR,#048D2H
003B4B 7402              MOV     A,#02H
003B4D F0                MOVX    @DPTR,A
  411: 	*(LX_SEND_BUF+1) = HI_UINT16(CMD_SYNC_DATA_RSP);
003B4E A3                INC     DPTR
003B4F 7448              MOV     A,#048H
003B51 F0                MOVX    @DPTR,A
  412: 	*(LX_SEND_BUF+2) = pkgCnt - 1;
003B52 904DCA            MOV     DPTR,#pkgCnt
003B55 E0                MOVX    A,@DPTR
003B56 FF                MOV     R7,A
003B57 14                DEC     A
003B58 9048D4            MOV     DPTR,#048D4H
003B5B F0                MOVX    @DPTR,A
  413: 	*(LX_SEND_BUF+3) = 0;
003B5C A3                INC     DPTR
003B5D E4                CLR     A
003B5E F0                MOVX    @DPTR,A
  414: 	*(LX_SEND_BUF+4) = WEIGHT_UTC_FLAG;
003B5F A3                INC     DPTR
003B60 7405              MOV     A,#05H
003B62 F0                MOVX    @DPTR,A
  415: 	*(LX_SEND_BUF+5) = 0;
003B63 A3                INC     DPTR
003B64 E4                CLR     A
003B65 F0                MOVX    @DPTR,A
  416: 	*(LX_SEND_BUF+6) = 0;
003B66 A3                INC     DPTR
003B67 F0                MOVX    @DPTR,A
  417: 	*(LX_SEND_BUF+7) = 0;
003B68 A3                INC     DPTR
003B69 F0                MOVX    @DPTR,A
  418: 	if(pkgCnt > 1)
003B6A EF                MOV     A,R7
003B6B D3                SETB    C
003B6C 9401              SUBB    A,#01H
003B6E 5002              JNC     $ + 4H
003B70 81BB              AJMP    ?C0070?LXPROTOCOL
  419: 	{
  420: 		for(i=0;i<size;i++)
003B72 E4                CLR     A
003B73 904DC9            MOV     DPTR,#i
003B76 F0                MOVX    @DPTR,A
003B77         ?C0071?LXPROTOCOL:
003B77 904DCB            MOV     DPTR,#size
003B7A E0                MOVX    A,@DPTR
003B7B FF                MOV     R7,A
003B7C 904DC9            MOV     DPTR,#i
003B7F E0                MOVX    A,@DPTR
003B80 C3                CLR     C
003B81 9F                SUBB    A,R7
003B82 5047              JNC     ?C0072?LXPROTOCOL
  421: 		{
  422: 			temp = QueuePop();
003B84 B136              ACALL   QueuePop
003B86 904DC2            MOV     DPTR,#temp
003B89 EB                MOV     A,R3
003B8A F0                MOVX    @DPTR,A
003B8B A3                INC     DPTR
003B8C EA                MOV     A,R2
003B8D F0                MOVX    @DPTR,A
003B8E A3                INC     DPTR
003B8F E9                MOV     A,R1
003B90 F0                MOVX    @DPTR,A
  423: 			dmemcpy(LX_SEND_BUF + (sizeof(UserMeasureData) * i) + 8, (u8_t *)temp, sizeof(UserMeasureData));
003B91 904DC9            MOV     DPTR,#i
003B94 E0                MOVX    A,@DPTR
003B95 75F006            MOV     B,#06H
003B98 A4                MUL     AB
003B99 24DA              ADD     A,#0DAH
003B9B FF                MOV     R7,A
003B9C E5F0              MOV     A,B
003B9E 3448              ADDC    A,#048H
003BA0 FA                MOV     R2,A
003BA1 A907              MOV     R1,AR7
003BA3 7B01              MOV     R3,#01H
003BA5 C003              PUSH    AR3
003BA7 C002              PUSH    AR2
003BA9 904DC2            MOV     DPTR,#temp
003BAC E0                MOVX    A,@DPTR
003BAD FB                MOV     R3,A
003BAE A3                INC     DPTR
003BAF E0                MOVX    A,@DPTR
003BB0 FA                MOV     R2,A
003BB1 A3                INC     DPTR
003BB2 E0                MOVX    A,@DPTR
003BB3 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
003BB5 8A14              MOV     ?_dmemcpy?BYTE+04H,R2
003BB7 F515              MOV     ?_dmemcpy?BYTE+05H,A
003BB9 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
003BBC D002              POP     AR2
003BBE D003              POP     AR3
003BC0 121F25            LCALL   _dmemcpy
  424: 		}
003BC3 904DC9            MOV     DPTR,#i
003BC6 E0                MOVX    A,@DPTR
003BC7 04                INC     A
003BC8 F0                MOVX    @DPTR,A
003BC9 80AC              SJMP    ?C0071?LXPROTOCOL
003BCB         ?C0072?LXPROTOCOL:
  425: 		crc32 = cal_crc32_multiple(0, LX_SEND_BUF, total_len - 4);
003BCB 7B01              MOV     R3,#01H
003BCD 7A48              MOV     R2,#048H
003BCF 79D2              MOV     R1,#0D2H
003BD1 904E5E            MOV     DPTR,#total_len
003BD4 E0                MOVX    A,@DPTR
003BD5 24FC              ADD     A,#0FCH
003BD7 FF                MOV     R7,A
003BD8 E4                CLR     A
003BD9 34FF              ADDC    A,#0FFH
003BDB FE                MOV     R6,A
003BDC E4                CLR     A
003BDD FC                MOV     R4,A
003BDE FD                MOV     R5,A
003BDF 904D98            MOV     DPTR,#?_cal_crc32_multiple?BYTE+07H
003BE2 120332            LCALL   ?C?LSTXDATA
003BE5 7F00              MOV     R7,#00H
003BE7 7E00              MOV     R6,#00H
003BE9 7D00              MOV     R5,#00H
003BEB 7C00              MOV     R4,#00H
003BED B1EE              ACALL   _cal_crc32_multiple
003BEF 904DC5            MOV     DPTR,#crc32
003BF2 120332            LCALL   ?C?LSTXDATA
  426: 		dmemcpy(LX_SEND_BUF + (sizeof(UserMeasureData) * i) + 8, (u8_t *)&crc32, sizeof(crc32));
003BF5 904DC9            MOV     DPTR,#i
003BF8 E0                MOVX    A,@DPTR
003BF9 75F006            MOV     B,#06H
003BFC A4                MUL     AB
003BFD 24DA              ADD     A,#0DAH
003BFF FF                MOV     R7,A
003C00 E5F0              MOV     A,B
003C02 3448              ADDC    A,#048H
003C04 FA                MOV     R2,A
003C05 A907              MOV     R1,AR7
003C07 7B01              MOV     R3,#01H
003C09 C003              PUSH    AR3
003C0B 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
003C0D 75144D            MOV     ?_dmemcpy?BYTE+04H,#HIGH crc32
003C10 7515C5            MOV     ?_dmemcpy?BYTE+05H,#LOW crc32
003C13 751604            MOV     ?_dmemcpy?BYTE+06H,#04H
003C16 D003              POP     AR3
003C18 121F25            LCALL   _dmemcpy
  427: 		bigLittleEndianSwap(LX_SEND_BUF, total_len);
003C1B 7B01              MOV     R3,#01H
003C1D 7A48              MOV     R2,#048H
003C1F 79D2              MOV     R1,#0D2H
003C21 904E5E            MOV     DPTR,#total_len
003C24 E0                MOVX    A,@DPTR
003C25 FD                MOV     R5,A
003C26 7C00              MOV     R4,#00H
003C28 1219F2            LCALL   _bigLittleEndianSwap
  428: 		
  429: 		for(i=0;i<pkgCnt;i++)
003C2B E4                CLR     A
003C2C 904DC9            MOV     DPTR,#i
003C2F F0                MOVX    @DPTR,A
003C30         ?C0074?LXPROTOCOL:
003C30 904DCA            MOV     DPTR,#pkgCnt
003C33 E0                MOVX    A,@DPTR
003C34 FF                MOV     R7,A
003C35 904DC9            MOV     DPTR,#i
003C38 E0                MOVX    A,@DPTR
003C39 FE                MOV     R6,A
003C3A C3                CLR     C
003C3B 9F                SUBB    A,R7
003C3C 4002              JC      $ + 4H
003C3E A135              AJMP    ?C0082?LXPROTOCOL
  430: 		{
  431: 			btCmdBuf.DATA[3] = (pkgCnt << 4) + i;
003C40 A3                INC     DPTR
003C41 E0                MOVX    A,@DPTR
003C42 FD                MOV     R5,A
003C43 C4                SWAP    A
003C44 54F0              ANL     A,#0F0H
003C46 FF                MOV     R7,A
003C47 EE                MOV     A,R6
003C48 2F                ADD     A,R7
003C49 904C67            MOV     DPTR,#btCmdBuf+04H
003C4C F0                MOVX    @DPTR,A
  432: 			if(i == pkgCnt -1)
003C4D ED                MOV     A,R5
003C4E 14                DEC     A
003C4F B5060A            CJNE    A,AR6,?C0077?LXPROTOCOL
  433: 			{
  434: 				btCmdBuf.DATA[4] = total_len;
003C52 904E5E            MOV     DPTR,#total_len
003C55 E0                MOVX    A,@DPTR
003C56 904C68            MOV     DPTR,#btCmdBuf+05H
003C59 F0                MOVX    @DPTR,A
  435: 			}
003C5A 800D              SJMP    ?C0078?LXPROTOCOL
003C5C         ?C0077?LXPROTOCOL:
  436: 			else
  437: 			{
  438: 				btCmdBuf.DATA[4] = 20 - 2;
003C5C 904C68            MOV     DPTR,#btCmdBuf+05H
003C5F 7412              MOV     A,#012H
003C61 F0                MOVX    @DPTR,A
  439: 				total_len -= 18;
003C62 904E5E            MOV     DPTR,#total_len
003C65 E0                MOVX    A,@DPTR
003C66 24EE              ADD     A,#0EEH
003C68 F0                MOVX    @DPTR,A
  440: 				
  441: 			}
003C69         ?C0078?LXPROTOCOL:
  442: 			btCmdBuf.DATA[7] = pkgCnt - i - 1;
003C69 904DC9            MOV     DPTR,#i
003C6C E0                MOVX    A,@DPTR
003C6D FD                MOV     R5,A
003C6E A3                INC     DPTR
003C6F E0                MOVX    A,@DPTR
003C70 C3                CLR     C
003C71 9D                SUBB    A,R5
003C72 14                DEC     A
003C73 904C6B            MOV     DPTR,#btCmdBuf+08H
003C76 F0                MOVX    @DPTR,A
  443: 			btCmdBuf.len = 3 + 2 + btCmdBuf.DATA[4] ;
003C77 904C68            MOV     DPTR,#btCmdBuf+05H
003C7A E0                MOVX    A,@DPTR
003C7B 2405              ADD     A,#05H
003C7D 904C63            MOV     DPTR,#btCmdBuf
003C80 F0                MOVX    @DPTR,A
  444: 			dmemcpy(&btCmdBuf.DATA[5], (u8_t *)(LX_SEND_BUF+i*18), btCmdBuf.DATA[4] );
003C81 ED                MOV     A,R5
003C82 75F012            MOV     B,#012H
003C85 A4                MUL     AB
003C86 24D2              ADD     A,#0D2H
003C88 FF                MOV     R7,A
003C89 E5F0              MOV     A,B
003C8B 3448              ADDC    A,#048H
003C8D A907              MOV     R1,AR7
003C8F 751301            MOV     ?_dmemcpy?BYTE+03H,#01H
003C92 F514              MOV     ?_dmemcpy?BYTE+04H,A
003C94 8915              MOV     ?_dmemcpy?BYTE+05H,R1
003C96 904C68            MOV     DPTR,#btCmdBuf+05H
003C99 E0                MOVX    A,@DPTR
003C9A F516              MOV     ?_dmemcpy?BYTE+06H,A
003C9C 7B01              MOV     R3,#01H
003C9E 7A4C              MOV     R2,#HIGH btCmdBuf+06H
003CA0 7969              MOV     R1,#LOW btCmdBuf+06H
003CA2 121F25            LCALL   _dmemcpy
  445: 			BT_CmdFifoIn(&btCmdBuf);
003CA5 7B01              MOV     R3,#01H
003CA7 7A4C              MOV     R2,#HIGH btCmdBuf
003CA9 7963              MOV     R1,#LOW btCmdBuf
003CAB 121E04            LCALL   _BT_CmdFifoIn
  446: 			YC_Delay10ms(12);
003CAE 7F0C              MOV     R7,#0CH
003CB0 121DEC            LCALL   _YC_Delay10ms
  447: 		}
003CB3 904DC9            MOV     DPTR,#i
003CB6 E0                MOVX    A,@DPTR
003CB7 04                INC     A
003CB8 F0                MOVX    @DPTR,A
003CB9 8130              AJMP    ?C0074?LXPROTOCOL
  448: 	}
003CBB         ?C0070?LXPROTOCOL:
  449: 	else
  450: 	{
  451: 		btCmdBuf.len = 3 + 2 + SYNC_DATA_HDR_LEN + sizeof(UserMeasureData);
003CBB 904C63            MOV     DPTR,#btCmdBuf
003CBE 7413              MOV     A,#013H
003CC0 F0                MOVX    @DPTR,A
  452: 		btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
003CC1 904C67            MOV     DPTR,#btCmdBuf+04H
003CC4 7410              MOV     A,#010H
003CC6 F0                MOVX    @DPTR,A
  453: 		btCmdBuf.DATA[4] = SYNC_DATA_HDR_LEN + sizeof(UserMeasureData);
003CC7 A3                INC     DPTR
003CC8 740E              MOV     A,#0EH
003CCA F0                MOVX    @DPTR,A
  454: 		temp = QueuePop();
003CCB B136              ACALL   QueuePop
003CCD 904DC2            MOV     DPTR,#temp
003CD0 EB                MOV     A,R3
003CD1 F0                MOVX    @DPTR,A
003CD2 A3                INC     DPTR
003CD3 EA                MOV     A,R2
003CD4 F0                MOVX    @DPTR,A
003CD5 A3                INC     DPTR
003CD6 E9                MOV     A,R1
003CD7 F0                MOVX    @DPTR,A
  455: 		if(temp != NULL)
003CD8 4A                ORL     A,R2
003CD9 601E              JZ      ?C0080?LXPROTOCOL
  456: 		{
  457: 			dmemcpy(LX_SEND_BUF + 8, (u8_t *)temp, sizeof(UserMeasureData));
003CDB 904DC2            MOV     DPTR,#temp
003CDE E0                MOVX    A,@DPTR
003CDF FB                MOV     R3,A
003CE0 A3                INC     DPTR
003CE1 E0                MOVX    A,@DPTR
003CE2 FA                MOV     R2,A
003CE3 A3                INC     DPTR
003CE4 E0                MOVX    A,@DPTR
003CE5 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
003CE7 8A14              MOV     ?_dmemcpy?BYTE+04H,R2
003CE9 F515              MOV     ?_dmemcpy?BYTE+05H,A
003CEB 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
003CEE 7B01              MOV     R3,#01H
003CF0 7A48              MOV     R2,#048H
003CF2 79DA              MOV     R1,#0DAH
003CF4 121F25            LCALL   _dmemcpy
  458: 		}
003CF7 800B              SJMP    ?C0081?LXPROTOCOL
003CF9         ?C0080?LXPROTOCOL:
  459: 		else
  460: 		{
  461: 			xmemset(LX_SEND_BUF, 0, sizeof(UserMeasureData));
003CF9 7B06              MOV     R3,#06H
003CFB E4                CLR     A
003CFC FD                MOV     R5,A
003CFD 7FD2              MOV     R7,#0D2H
003CFF 7E48              MOV     R6,#048H
003D01 121F8B            LCALL   _xmemset
  462: 		}
003D04         ?C0081?LXPROTOCOL:
  463: 		dmemcpy(&(btCmdBuf.DATA[5]), LX_SEND_BUF, btCmdBuf.DATA[4]);
003D04 751301            MOV     ?_dmemcpy?BYTE+03H,#01H
003D07 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
003D0A 7515D2            MOV     ?_dmemcpy?BYTE+05H,#0D2H
003D0D 904C68            MOV     DPTR,#btCmdBuf+05H
003D10 E0                MOVX    A,@DPTR
003D11 F516              MOV     ?_dmemcpy?BYTE+06H,A
003D13 7B01              MOV     R3,#01H
003D15 7A4C              MOV     R2,#HIGH btCmdBuf+06H
003D17 7969              MOV     R1,#LOW btCmdBuf+06H
003D19 121F25            LCALL   _dmemcpy
  464: 		bigLittleEndianSwap(&(btCmdBuf.DATA[5]), btCmdBuf.DATA[4]);
003D1C 7B01              MOV     R3,#01H
003D1E 7A4C              MOV     R2,#HIGH btCmdBuf+06H
003D20 7969              MOV     R1,#LOW btCmdBuf+06H
003D22 904C68            MOV     DPTR,#btCmdBuf+05H
003D25 E0                MOVX    A,@DPTR
003D26 FD                MOV     R5,A
003D27 7C00              MOV     R4,#00H
003D29 1219F2            LCALL   _bigLittleEndianSwap
  465: 		BT_CmdFifoIn(&btCmdBuf);
003D2C 7B01              MOV     R3,#01H
003D2E 7A4C              MOV     R2,#HIGH btCmdBuf
003D30 7963              MOV     R1,#LOW btCmdBuf
003D32 121E04            LCALL   _BT_CmdFifoIn
  466: 	}
  467: }
003D35         ?C0082?LXPROTOCOL:
003D35 22                RET     
----- FUNCTION sendHistoryData (END) -------


----- FUNCTION QueuePop (BEGIN) -----
 FILE: 'lxProtocol.c'
  503: static UserMeasureData* QueuePop(void)
  504: {
  505: 	UserMeasureData *temp = NULL;
  506: 	
003D36 904E51            MOV     DPTR,#temp
003D39 E4                CLR     A
003D3A F0                MOVX    @DPTR,A
003D3B A3                INC     DPTR
003D3C F0                MOVX    @DPTR,A
003D3D A3                INC     DPTR
003D3E F0                MOVX    @DPTR,A
  507: 	if(QUEUE_IS_EMPTY)
003D3F 904C12            MOV     DPTR,#historyUserData+02H
003D42 E0                MOVX    A,@DPTR
003D43 D3                SETB    C
003D44 9400              SUBB    A,#00H
003D46 5007              JNC     ?C0088?LXPROTOCOL
  508: 		return NULL;
003D48 7B00              MOV     R3,#00H
003D4A 7A00              MOV     R2,#00H
003D4C 7900              MOV     R1,#00H
003D4E 22                RET     
003D4F         ?C0088?LXPROTOCOL:
  509: 
  510: 	temp = &(historyUserData.measureData[historyUserData.head]);
003D4F 904C10            MOV     DPTR,#historyUserData
003D52 E0                MOVX    A,@DPTR
003D53 75F006            MOV     B,#06H
003D56 A4                MUL     AB
003D57 2413              ADD     A,#LOW historyUserData+03H
003D59 F9                MOV     R1,A
003D5A 744C              MOV     A,#HIGH historyUserData+03H
003D5C 35F0              ADDC    A,B
003D5E FA                MOV     R2,A
003D5F 904E51            MOV     DPTR,#temp
003D62 7401              MOV     A,#01H
003D64 F0                MOVX    @DPTR,A
003D65 A3                INC     DPTR
003D66 EA                MOV     A,R2
003D67 F0                MOVX    @DPTR,A
003D68 A3                INC     DPTR
003D69 E9                MOV     A,R1
003D6A F0                MOVX    @DPTR,A
  511: 	historyUserData.head = (historyUserData.head + 1)%MAX_SIZE;
003D6B 904C10            MOV     DPTR,#historyUserData
003D6E E0                MOVX    A,@DPTR
003D6F 2401              ADD     A,#01H
003D71 FF                MOV     R7,A
003D72 E4                CLR     A
003D73 33                RLC     A
003D74 FE                MOV     R6,A
003D75 7C00              MOV     R4,#00H
003D77 7D0A              MOV     R5,#0AH
003D79 120173            LCALL   ?C?UIDIV
003D7C ED                MOV     A,R5
003D7D F0                MOVX    @DPTR,A
  512: 	historyUserData.size--;
003D7E 904C12            MOV     DPTR,#historyUserData+02H
003D81 E0                MOVX    A,@DPTR
003D82 14                DEC     A
003D83 F0                MOVX    @DPTR,A
  513: 
  514: 	return temp;
003D84 904E51            MOV     DPTR,#temp
003D87 E0                MOVX    A,@DPTR
003D88 FB                MOV     R3,A
003D89 A3                INC     DPTR
003D8A E0                MOVX    A,@DPTR
003D8B FA                MOV     R2,A
003D8C A3                INC     DPTR
003D8D E0                MOVX    A,@DPTR
003D8E F9                MOV     R1,A
  515: }
003D8F 22                RET     
----- FUNCTION QueuePop (END) -------


----- FUNCTION _QueuePush (BEGIN) -----
 FILE: 'lxProtocol.c'
  517: void QueuePush(UserMeasureData *userData)
  518: {
003D90 904E54            MOV     DPTR,#userData
003D93 EB                MOV     A,R3
003D94 F0                MOVX    @DPTR,A
003D95 A3                INC     DPTR
003D96 EA                MOV     A,R2
003D97 F0                MOVX    @DPTR,A
003D98 A3                INC     DPTR
003D99 E9                MOV     A,R1
003D9A F0                MOVX    @DPTR,A
  519: 	if(QUEUE_IS_FULL)
  520: 		QueuePop();
003D9B 904C12            MOV     DPTR,#historyUserData+02H
003D9E E0                MOVX    A,@DPTR
003D9F C3                CLR     C
003DA0 940A              SUBB    A,#0AH
003DA2 4002              JC      ?C0090?LXPROTOCOL
  521: 	
003DA4 B136              ACALL   QueuePop
003DA6         ?C0090?LXPROTOCOL:
  522: 	dmemcpy((u8_t *)&(historyUserData.measureData[historyUserData.tail]), (u8_t *)userData, sizeof(UserMeasureData))
>> ;
003DA6 904C11            MOV     DPTR,#historyUserData+01H
003DA9 E0                MOVX    A,@DPTR
003DAA 75F006            MOV     B,#06H
003DAD A4                MUL     AB
003DAE 2413              ADD     A,#LOW historyUserData+03H
003DB0 F9                MOV     R1,A
003DB1 744C              MOV     A,#HIGH historyUserData+03H
003DB3 35F0              ADDC    A,B
003DB5 FA                MOV     R2,A
003DB6 7B01              MOV     R3,#01H
003DB8 C003              PUSH    AR3
003DBA C002              PUSH    AR2
003DBC 904E54            MOV     DPTR,#userData
003DBF E0                MOVX    A,@DPTR
003DC0 FB                MOV     R3,A
003DC1 A3                INC     DPTR
003DC2 E0                MOVX    A,@DPTR
003DC3 FA                MOV     R2,A
003DC4 A3                INC     DPTR
003DC5 E0                MOVX    A,@DPTR
003DC6 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
003DC8 8A14              MOV     ?_dmemcpy?BYTE+04H,R2
003DCA F515              MOV     ?_dmemcpy?BYTE+05H,A
003DCC 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
003DCF D002              POP     AR2
003DD1 D003              POP     AR3
003DD3 121F25            LCALL   _dmemcpy
  523: 	historyUserData.tail = (historyUserData.tail + 1)%MAX_SIZE;
003DD6 904C11            MOV     DPTR,#historyUserData+01H
003DD9 E0                MOVX    A,@DPTR
003DDA 2401              ADD     A,#01H
003DDC FF                MOV     R7,A
003DDD E4                CLR     A
003DDE 33                RLC     A
003DDF FE                MOV     R6,A
003DE0 7C00              MOV     R4,#00H
003DE2 7D0A              MOV     R5,#0AH
003DE4 120173            LCALL   ?C?UIDIV
003DE7 ED                MOV     A,R5
003DE8 F0                MOVX    @DPTR,A
  524: 	historyUserData.size++;
003DE9 A3                INC     DPTR
003DEA E0                MOVX    A,@DPTR
003DEB 04                INC     A
003DEC F0                MOVX    @DPTR,A
  525: }
003DED 22                RET     
----- FUNCTION _QueuePush (END) -------


----- FUNCTION _cal_crc32_multiple (BEGIN) -----
 FILE: 'Crc32.c'
   80: u32_t cal_crc32_multiple(u32_t crc, u8_t *buffer, u32_t size)
   81: {
003DEE 904D91            MOV     DPTR,#crc
003DF1 120332            LCALL   ?C?LSTXDATA
003DF4 904D95            MOV     DPTR,#buffer
003DF7 EB                MOV     A,R3
003DF8 F0                MOVX    @DPTR,A
003DF9 A3                INC     DPTR
003DFA EA                MOV     A,R2
003DFB F0                MOVX    @DPTR,A
003DFC A3                INC     DPTR
003DFD E9                MOV     A,R1
003DFE F0                MOVX    @DPTR,A
   82:     u32_t i;
   83:     for (i = 0; i < size; ++i)
003DFF 904D9C            MOV     DPTR,#i
003E02 12033E            LCALL   ?C?LSTKXDATA
003E05 00                DB      00H
003E06 00                DB      00H
003E07 00                DB      00H
003E08 00                DB      00H
003E09         ?C0001?CRC32:
003E09 904D98            MOV     DPTR,#size
003E0C E0                MOVX    A,@DPTR
003E0D FC                MOV     R4,A
003E0E A3                INC     DPTR
003E0F E0                MOVX    A,@DPTR
003E10 FD                MOV     R5,A
003E11 A3                INC     DPTR
003E12 E0                MOVX    A,@DPTR
003E13 FE                MOV     R6,A
003E14 A3                INC     DPTR
003E15 E0                MOVX    A,@DPTR
003E16 FF                MOV     R7,A
003E17 A3                INC     DPTR
003E18 E0                MOVX    A,@DPTR
003E19 F8                MOV     R0,A
003E1A A3                INC     DPTR
003E1B E0                MOVX    A,@DPTR
003E1C F9                MOV     R1,A
003E1D A3                INC     DPTR
003E1E E0                MOVX    A,@DPTR
003E1F FA                MOV     R2,A
003E20 A3                INC     DPTR
003E21 E0                MOVX    A,@DPTR
003E22 FB                MOV     R3,A
003E23 C3                CLR     C
003E24 1202FB            LCALL   ?C?ULCMP
003E27 4002              JC      $ + 4H
003E29 C1DB              AJMP    ?C0002?CRC32
   84:     {
   85:     	SPIFlashRead((u8_t *)&crc_table, CRC32_ADDR + (((crc ^ buffer[i]) & 0xff)*4), sizeof(crc_table));
003E2B 904D9C            MOV     DPTR,#i
003E2E E0                MOVX    A,@DPTR
003E2F A3                INC     DPTR
003E30 E0                MOVX    A,@DPTR
003E31 A3                INC     DPTR
003E32 E0                MOVX    A,@DPTR
003E33 FE                MOV     R6,A
003E34 A3                INC     DPTR
003E35 E0                MOVX    A,@DPTR
003E36 FF                MOV     R7,A
003E37 904D95            MOV     DPTR,#buffer
003E3A E0                MOVX    A,@DPTR
003E3B FB                MOV     R3,A
003E3C A3                INC     DPTR
003E3D E0                MOVX    A,@DPTR
003E3E FA                MOV     R2,A
003E3F A3                INC     DPTR
003E40 E0                MOVX    A,@DPTR
003E41 F9                MOV     R1,A
003E42 8F82              MOV     DPL,R7
003E44 8E83              MOV     DPH,R6
003E46 120112            LCALL   ?C?CLDOPTR
003E49 FF                MOV     R7,A
003E4A E4                CLR     A
003E4B 904D91            MOV     DPTR,#crc
003E4E E0                MOVX    A,@DPTR
003E4F F8                MOV     R0,A
003E50 A3                INC     DPTR
003E51 E0                MOVX    A,@DPTR
003E52 F9                MOV     R1,A
003E53 A3                INC     DPTR
003E54 E0                MOVX    A,@DPTR
003E55 FA                MOV     R2,A
003E56 A3                INC     DPTR
003E57 E0                MOVX    A,@DPTR
003E58 6F                XRL     A,R7
003E59 FF                MOV     R7,A
003E5A EA                MOV     A,R2
003E5B FE                MOV     R6,A
003E5C E9                MOV     A,R1
003E5D FD                MOV     R5,A
003E5E E8                MOV     A,R0
003E5F FC                MOV     R4,A
003E60 EF                MOV     A,R7
003E61 E4                CLR     A
003E62 FE                MOV     R6,A
003E63 FD                MOV     R5,A
003E64 FC                MOV     R4,A
003E65 7B04              MOV     R3,#04H
003E67 FA                MOV     R2,A
003E68 F9                MOV     R1,A
003E69 F8                MOV     R0,A
003E6A 1201DE            LCALL   ?C?LMUL
003E6D E4                CLR     A
003E6E 2F                ADD     A,R7
003E6F FF                MOV     R7,A
003E70 EE                MOV     A,R6
003E71 3480              ADDC    A,#080H
003E73 FE                MOV     R6,A
003E74 E4                CLR     A
003E75 3D                ADDC    A,R5
003E76 FD                MOV     R5,A
003E77 E4                CLR     A
003E78 3C                ADDC    A,R4
003E79 FC                MOV     R4,A
003E7A 904DEC            MOV     DPTR,#?_SPIFlashRead?BYTE+07H
003E7D 7404              MOV     A,#04H
003E7F F0                MOVX    @DPTR,A
003E80 7B01              MOV     R3,#01H
003E82 7A4E              MOV     R2,#HIGH crc_table
003E84 793B              MOV     R1,#LOW crc_table
003E86 1227DF            LCALL   _SPIFlashRead
   86:         crc = crc_table ^ (crc >> 8);
003E89 904D91            MOV     DPTR,#crc
003E8C E0                MOVX    A,@DPTR
003E8D FC                MOV     R4,A
003E8E A3                INC     DPTR
003E8F E0                MOVX    A,@DPTR
003E90 FD                MOV     R5,A
003E91 A3                INC     DPTR
003E92 E0                MOVX    A,@DPTR
003E93 FE                MOV     R6,A
003E94 A3                INC     DPTR
003E95 E0                MOVX    A,@DPTR
003E96 FF                MOV     R7,A
003E97 7808              MOV     R0,#08H
003E99 12030C            LCALL   ?C?ULSHR
003E9C 904E3B            MOV     DPTR,#crc_table
003E9F E0                MOVX    A,@DPTR
003EA0 F8                MOV     R0,A
003EA1 A3                INC     DPTR
003EA2 E0                MOVX    A,@DPTR
003EA3 F9                MOV     R1,A
003EA4 A3                INC     DPTR
003EA5 E0                MOVX    A,@DPTR
003EA6 FA                MOV     R2,A
003EA7 A3                INC     DPTR
003EA8 E0                MOVX    A,@DPTR
003EA9 6F                XRL     A,R7
003EAA FF                MOV     R7,A
003EAB EA                MOV     A,R2
003EAC 6E                XRL     A,R6
003EAD FE                MOV     R6,A
003EAE E9                MOV     A,R1
003EAF 6D                XRL     A,R5
003EB0 FD                MOV     R5,A
003EB1 E8                MOV     A,R0
003EB2 6C                XRL     A,R4
003EB3 FC                MOV     R4,A
003EB4 904D91            MOV     DPTR,#crc
003EB7 120332            LCALL   ?C?LSTXDATA
   87:     }
003EBA 904D9C            MOV     DPTR,#i
003EBD E0                MOVX    A,@DPTR
003EBE FC                MOV     R4,A
003EBF A3                INC     DPTR
003EC0 E0                MOVX    A,@DPTR
003EC1 FD                MOV     R5,A
003EC2 A3                INC     DPTR
003EC3 E0                MOVX    A,@DPTR
003EC4 FE                MOV     R6,A
003EC5 A3                INC     DPTR
003EC6 E0                MOVX    A,@DPTR
003EC7 2401              ADD     A,#01H
003EC9 FF                MOV     R7,A
003ECA E4                CLR     A
003ECB 3E                ADDC    A,R6
003ECC FE                MOV     R6,A
003ECD E4                CLR     A
003ECE 3D                ADDC    A,R5
003ECF FD                MOV     R5,A
003ED0 E4                CLR     A
003ED1 3C                ADDC    A,R4
003ED2 FC                MOV     R4,A
003ED3 904D9C            MOV     DPTR,#i
003ED6 120332            LCALL   ?C?LSTXDATA
003ED9 C109              AJMP    ?C0001?CRC32
003EDB         ?C0002?CRC32:
   88: 
   89:     return crc;
003EDB 904D91            MOV     DPTR,#crc
003EDE E0                MOVX    A,@DPTR
003EDF FC                MOV     R4,A
003EE0 A3                INC     DPTR
003EE1 E0                MOVX    A,@DPTR
003EE2 FD                MOV     R5,A
003EE3 A3                INC     DPTR
003EE4 E0                MOVX    A,@DPTR
003EE5 FE                MOV     R6,A
003EE6 A3                INC     DPTR
003EE7 E0                MOVX    A,@DPTR
003EE8 FF                MOV     R7,A
   90: }
003EE9 22                RET     
----- FUNCTION _cal_crc32_multiple (END) -------


