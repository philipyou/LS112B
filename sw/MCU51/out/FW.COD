LX51 LINKER/LOCATER V4.41                                                               04/19/2017  14:43:07  PAGE 1





ASSEMBLER CODE PACKING OF MODULE:  OUT\FW (MAIN)


----- FUNCTION main (BEGIN) -----
 FILE: 'main.c'
   20: void main()
   21: {
   22: 	R_Test++;
   23: 	systemInit();
0004C2 904C62            MOV     DPTR,#R_Test
0004C5 E0                MOVX    A,@DPTR
0004C6 04                INC     A
0004C7 F0                MOVX    @DPTR,A
   24: 	while(1) {
0004C8 120FEC            LCALL   systemInit
0004CB         ?C0001?MAIN:
   25: 		BTControlProcess();
   26: 		lxOptProcess();
0004CB 12181F            LCALL   BTControlProcess
   27: 		//WechatProcess();
0004CE 121AAA            LCALL   lxOptProcess
   28: 		SysStatusProcess();
0004D1 B1A2              ACALL   SysStatusProcess
   29: 		if(sys_state == SYS_ST_RUN) {
0004D3 904E5C            MOV     DPTR,#sys_state
0004D6 E0                MOVX    A,@DPTR
0004D7 B402F1            CJNE    A,#02H,?C0001?MAIN
   30: 			YC_UtilTimerProcess();		
0004DA 12224C            LCALL   YC_UtilTimerProcess
   31: 			CS_Scale_1186Com();		//1186通信处理
0004DD 91E5              ACALL   CS_Scale_1186Com
   32: 			CS_Scale_Proc();
0004DF 122AC1            LCALL   CS_Scale_Proc
   33: 		}
   34: 	}
0004E2 80E7              SJMP    ?C0001?MAIN
0004E4 22                RET     
----- FUNCTION main (END) -------


----- FUNCTION CS_Scale_1186Com (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   31: void CS_Scale_1186Com(void)
   32: {	
   33: 	
   34: 	if(uartTimeoutCnt < CS_CommTo1186_TimeOut)	 
0004E5 904D68            MOV     DPTR,#uartTimeoutCnt
0004E8 E0                MOVX    A,@DPTR
0004E9 C3                CLR     C
0004EA 9415              SUBB    A,#015H
0004EC 502B              JNC     ?C0003?CS_COMMTO1186
   35: 		{
   36: 		
   37: 			switch(R_Scale_state)
0004EE 904CC5            MOV     DPTR,#R_Scale_state
0004F1 E0                MOVX    A,@DPTR
0004F2 24FE              ADD     A,#0FEH
0004F4 6014              JZ      ?C0006?CS_COMMTO1186
0004F6 04                INC     A
0004F7 24FC              ADD     A,#0FCH
0004F9 5016              JNC     ?C0009?CS_COMMTO1186
0004FB 2405              ADD     A,#05H
0004FD 702D              JNZ     ?C0013?CS_COMMTO1186
   38: 			{
   39: 			case CS_Scale_state_init:
0004FF         ?C0005?CS_COMMTO1186:
   40: 				CS_1186Com_Reset_Proc();			
0004FF F101              ACALL   CS_1186Com_Reset_Proc
   41: 				CS_1186Com_ReadMacAdress_Proc();
000501 1236C4            LCALL   CS_1186Com_ReadMacAdress_Proc
   42: 				CS_1186Com_ReadTime_Proc();
000504 B1E2              ACALL   CS_1186Com_ReadTime_Proc
   43: 				CS_1186Com_SetOpenWeight_Proc();
000506 F11B              ACALL   CS_1186Com_SetOpenWeight_Proc
   44: 				CS_1186Com_SetLcd_Proc();
000508 8023              SJMP    CS_1186Com_SetLcd_Proc
   45: 				break;			
   46: 			case CS_Scale_state_standby:
00050A         ?C0006?CS_COMMTO1186:
   47: 				CS_1186Com_SetSleepMode_Proc();
00050A D16D              ACALL   CS_1186Com_SetSleepMode_Proc
   48: 				CS_1186Com_ReadAdZero_Proc();
00050C 123850            LCALL   CS_1186Com_ReadAdZero_Proc
   49: 				CS_1186Com_SetLcd_Proc();
00050F 801C              SJMP    CS_1186Com_SetLcd_Proc
   50: 				break;
   51: 			case CS_Scale_state_weighting:
   52: 			case CS_Scale_state_caling:
   53: 			case CS_Scale_state_locking:
000511         ?C0009?CS_COMMTO1186:
   54: 				CS_1186Com_ReadTime_Proc();
000511 B1E2              ACALL   CS_1186Com_ReadTime_Proc
   55: 				CS_1186Com_ReadAdc_Proc();
000513 123778            LCALL   CS_1186Com_ReadAdc_Proc
   56: 				CS_1186Com_SetLcd_Proc();
000516 8015              SJMP    CS_1186Com_SetLcd_Proc
   57: 
   58: 				/*
   59: 				if(B_Weight_AdOk == true)
   60: 					{
   61: 					R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplay;
   62: 					B_Weight_LcdOk =false;
   63: 					}
   64: 				if(B_Weight_LcdOk == true)
   65: 					{
   66: 					R_Weight_Com_Coo.now = CS_CommTo1186_ReadAd;	
   67: 					}
   68: 				*/
   69: 				break;
   70: 			default:
   71: 				break;			
   72: 			}		
   73: 		}
000518 22                RET     
000519         ?C0003?CS_COMMTO1186:
   74: 	else
   75: 		{
   76: 		YC_UARTClearBuffer();	// fresh rec buffer
000519 B192              ACALL   YC_UARTClearBuffer
   77: 		uartTimeoutCnt=0;
00051B E4                CLR     A
00051C 904D68            MOV     DPTR,#uartTimeoutCnt
00051F F0                MOVX    @DPTR,A
   78: 		if(R_Weight_Com_Coo.now !=CS_CommTo1186_Null)
000520 904D55            MOV     DPTR,#R_Weight_Com_Coo
000523 E0                MOVX    A,@DPTR
000524 6006              JZ      ?C0013?CS_COMMTO1186
   79: 		R_Weight_Com_Coo.now = R_Weight_Com_Coo.pre;	//re send
000526 A3                INC     DPTR
000527 E0                MOVX    A,@DPTR
000528 904D55            MOV     DPTR,#R_Weight_Com_Coo
00052B F0                MOVX    @DPTR,A
   80: 		}
   81: 
   82: }
00052C         ?C0013?CS_COMMTO1186:
00052C 22                RET     
----- FUNCTION CS_Scale_1186Com (END) -------


----- FUNCTION CS_1186Com_SetLcd_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  191: void CS_1186Com_SetLcd_Proc(void)
  192: {
  193: 
  194: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_LcdDisplay)
00052D 904D55            MOV     DPTR,#R_Weight_Com_Coo
000530 E0                MOVX    A,@DPTR
000531 B4E01E            CJNE    A,#0E0H,?C0029?CS_COMMTO1186
  195: 		{
  196: 		CS_CommTo1186_SendCmd(CS_CommTo1186_LcdDisplay,CS_Lcd_Send_Data);
000534 7B01              MOV     R3,#01H
000536 7A4D              MOV     R2,#HIGH CS_Lcd_Send_Data
000538 7928              MOV     R1,#LOW CS_Lcd_Send_Data
00053A 7FE0              MOV     R7,#0E0H
00053C 1224C4            LCALL   _CS_CommTo1186_SendCmd
  197: 		R_Weight_Com_Coo.pre = CS_CommTo1186_LcdDisplay;
00053F 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
000542 74E0              MOV     A,#0E0H
000544 F0                MOVX    @DPTR,A
  198: 		R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplayStandby;
000545 904D55            MOV     DPTR,#R_Weight_Com_Coo
000548 740B              MOV     A,#0BH
00054A F0                MOVX    @DPTR,A
  199: 		uartTimeoutCnt=0;
00054B E4                CLR     A
00054C 904D68            MOV     DPTR,#uartTimeoutCnt
00054F F0                MOVX    @DPTR,A
  200: 		YC_UARTClearBuffer();
000550 B192              ACALL   YC_UARTClearBuffer
  201: 		}
000552         ?C0029?CS_COMMTO1186:
  202: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_LcdDisplayStandby)
000552 904D55            MOV     DPTR,#R_Weight_Com_Coo
000555 E0                MOVX    A,@DPTR
000556 640B              XRL     A,#0BH
000558 7037              JNZ     ?C0036?CS_COMMTO1186
  203: 		{
  204: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 5)==5)
00055A 7B01              MOV     R3,#01H
00055C 7A4D              MOV     R2,#HIGH uartRcvBuf
00055E 7945              MOV     R1,#LOW uartRcvBuf
000560 7D05              MOV     R5,#05H
000562 FC                MOV     R4,A
000563 F1A8              ACALL   _YC_UARTReciveDataExpected
000565 EF                MOV     A,R7
000566 6405              XRL     A,#05H
000568 4E                ORL     A,R6
000569 7026              JNZ     ?C0036?CS_COMMTO1186
  205: 			{
  206: 			if(uartRcvBuf[3] == CS_CommTo1186_LcdDisplay)    
00056B 904D48            MOV     DPTR,#uartRcvBuf+03H
00056E E0                MOVX    A,@DPTR
00056F B4E019            CJNE    A,#0E0H,?C0032?CS_COMMTO1186
  207: 				{
  208: 				if(R_Scale_state==CS_Scale_state_init)
000572 904CC5            MOV     DPTR,#R_Scale_state
000575 E0                MOVX    A,@DPTR
000576 7006              JNZ     ?C0033?CS_COMMTO1186
  209: 					R_Weight_Com_Coo.now = CS_CommTo1186_Null;
000578 904D55            MOV     DPTR,#R_Weight_Com_Coo
00057B F0                MOVX    @DPTR,A
00057C 8006              SJMP    ?C0034?CS_COMMTO1186
00057E         ?C0033?CS_COMMTO1186:
  210: 				else
  211: 					R_Weight_Com_Coo.now = CS_CommTo1186_ReadAd;
00057E 904D55            MOV     DPTR,#R_Weight_Com_Coo
000581 7480              MOV     A,#080H
000583 F0                MOVX    @DPTR,A
000584         ?C0034?CS_COMMTO1186:
  212: 				R_Weight_Com_Coo.sucess=true;		
000584 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
000587 7401              MOV     A,#01H
000589 F0                MOVX    @DPTR,A
  213: 				}
00058A 22                RET     
00058B         ?C0032?CS_COMMTO1186:
  214: 			else
  215: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
00058B 904D68            MOV     DPTR,#uartTimeoutCnt
00058E 7415              MOV     A,#015H
000590 F0                MOVX    @DPTR,A
  216: 			}	
  217: 		}
  218: }
000591         ?C0036?CS_COMMTO1186:
000591 22                RET     
----- FUNCTION CS_1186Com_SetLcd_Proc (END) -------


----- FUNCTION YC_UARTClearBuffer (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  409: void YC_UARTClearBuffer(void)
  410: {
  411: 	REG_UART_RX_PTR_R = REG_UART_RX_PTR_W;
  412: 	//REG_UART_TX_PTR_W = REG_UART_TX_PTR_R;
000592 908116            MOV     DPTR,#08116H
000595 E0                MOVX    A,@DPTR
000596 FF                MOV     R7,A
000597 A3                INC     DPTR
000598 E0                MOVX    A,@DPTR
000599 908058            MOV     DPTR,#08058H
00059C CF                XCH     A,R7
00059D F0                MOVX    @DPTR,A
00059E A3                INC     DPTR
00059F EF                MOV     A,R7
0005A0 F0                MOVX    @DPTR,A
  413: }
0005A1 22                RET     
----- FUNCTION YC_UARTClearBuffer (END) -------


----- FUNCTION SysStatusProcess (BEGIN) -----
 FILE: 'system.c'
  174: void SysStatusProcess(void) 
  175: {
  176: 	if( sys_state == SYS_ST_IDLE) {	//can enter LPM
  177: 		if(bleConnStatus ==BLE_STATUS_DISCONN)
0005A2 904E5C            MOV     DPTR,#sys_state
0005A5 E0                MOVX    A,@DPTR
0005A6 B40121            CJNE    A,#01H,?C0029?SYSTEM
  178: 		{
0005A9 904C5B            MOV     DPTR,#bleConnStatus
0005AC E0                MOVX    A,@DPTR
0005AD 7032              JNZ     ?C0034?SYSTEM
  179: 			YC_UARTWaitSendData();
  180: 			YC_UARTClearBuffer();
0005AF D15B              ACALL   YC_UARTWaitSendData
  181: 		    	LPM_ENABLE();
0005B1 B192              ACALL   YC_UARTClearBuffer
  182: 
0005B3 9049FE            MOV     DPTR,#049FEH
0005B6 7401              MOV     A,#01H
0005B8 F0                MOVX    @DPTR,A
  183: 			btCmdBuf.len = 0x01;
0005B9 904C63            MOV     DPTR,#btCmdBuf
0005BC F0                MOVX    @DPTR,A
  184: 			btCmdBuf.DATA[0] = CS_CMD_SLEEP_REQ;
0005BD A3                INC     DPTR
0005BE 7420              MOV     A,#020H
0005C0 F0                MOVX    @DPTR,A
  185: 			BT_CmdFifoIn(&btCmdBuf);
0005C1 7B01              MOV     R3,#01H
0005C3 7A4C              MOV     R2,#HIGH btCmdBuf
0005C5 7963              MOV     R1,#LOW btCmdBuf
0005C7 021E00            LJMP    _BT_CmdFifoIn
  186: 
  187: 				
  188: 		}
  189: 	}
0005CA         ?C0029?SYSTEM:
  190: 	else if( sys_state == SYS_ST_SLEEP) {//can enter LPM
0005CA 904E5C            MOV     DPTR,#sys_state
0005CD E0                MOVX    A,@DPTR
0005CE B4030B            CJNE    A,#03H,?C0032?SYSTEM
  191: 		YC_UARTWaitSendData();
0005D1 D15B              ACALL   YC_UARTWaitSendData
  192: 		YC_UARTClearBuffer();
0005D3 B192              ACALL   YC_UARTClearBuffer
  193: 	    	LPM_ENABLE();
0005D5 9049FE            MOV     DPTR,#049FEH
0005D8 7401              MOV     A,#01H
0005DA F0                MOVX    @DPTR,A
  194: 	} 
0005DB 22                RET     
0005DC         ?C0032?SYSTEM:
  195: 	else {
  196: 		LPM_DISABLE();
0005DC 9049FE            MOV     DPTR,#049FEH
0005DF E4                CLR     A
0005E0 F0                MOVX    @DPTR,A
  197: 	}
  198: }
0005E1         ?C0034?SYSTEM:
0005E1 22                RET     
----- FUNCTION SysStatusProcess (END) -------


----- FUNCTION CS_1186Com_ReadTime_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  222: void CS_1186Com_ReadTime_Proc(void)
  223: {
  224: 	//static u8_t xdata temp=0;
  225: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadTime)
0005E2 904D55            MOV     DPTR,#R_Weight_Com_Coo
0005E5 E0                MOVX    A,@DPTR
0005E6 B4821E            CJNE    A,#082H,?C0037?CS_COMMTO1186
  226: 		{
  227: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadTime,0);
0005E9 7B00              MOV     R3,#00H
0005EB 7A00              MOV     R2,#00H
0005ED 7900              MOV     R1,#00H
0005EF 7F82              MOV     R7,#082H
0005F1 1224C4            LCALL   _CS_CommTo1186_SendCmd
  228: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadTime;
0005F4 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
0005F7 7482              MOV     A,#082H
0005F9 F0                MOVX    @DPTR,A
  229: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadTimeStandby;
0005FA 904D55            MOV     DPTR,#R_Weight_Com_Coo
0005FD 7403              MOV     A,#03H
0005FF F0                MOVX    @DPTR,A
  230: 		uartTimeoutCnt=0;
000600 E4                CLR     A
000601 904D68            MOV     DPTR,#uartTimeoutCnt
000604 F0                MOVX    @DPTR,A
  231: 		YC_UARTClearBuffer();
000605 B192              ACALL   YC_UARTClearBuffer
  232: 		}
000607         ?C0037?CS_COMMTO1186:
  233: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadTimeStandby)
000607 904D55            MOV     DPTR,#R_Weight_Com_Coo
00060A E0                MOVX    A,@DPTR
00060B 6403              XRL     A,#03H
00060D 704B              JNZ     ?C0042?CS_COMMTO1186
  234: 		{
  235: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 9)==9)
00060F 7B01              MOV     R3,#01H
000611 7A4D              MOV     R2,#HIGH uartRcvBuf
000613 7945              MOV     R1,#LOW uartRcvBuf
000615 7D09              MOV     R5,#09H
000617 FC                MOV     R4,A
000618 F1A8              ACALL   _YC_UARTReciveDataExpected
00061A EF                MOV     A,R7
00061B 6409              XRL     A,#09H
00061D 4E                ORL     A,R6
00061E 703A              JNZ     ?C0042?CS_COMMTO1186
  236: 			{
  237: 			if(uartRcvBuf[3] == CS_CommTo1186_ReadTime)    
000620 904D48            MOV     DPTR,#uartRcvBuf+03H
000623 E0                MOVX    A,@DPTR
000624 B4822D            CJNE    A,#082H,?C0040?CS_COMMTO1186
  238: 				{			
  239: 				//读到时间的操作
  240: 				R_1186_RTC[3] = uartRcvBuf[4];
000627 A3                INC     DPTR
000628 E0                MOVX    A,@DPTR
000629 904CD6            MOV     DPTR,#R_1186_RTC+03H
00062C F0                MOVX    @DPTR,A
  241: 				R_1186_RTC[2] = uartRcvBuf[5];
00062D 904D4A            MOV     DPTR,#uartRcvBuf+05H
000630 E0                MOVX    A,@DPTR
000631 904CD5            MOV     DPTR,#R_1186_RTC+02H
000634 F0                MOVX    @DPTR,A
  242: 				R_1186_RTC[1] = uartRcvBuf[6];
000635 904D4B            MOV     DPTR,#uartRcvBuf+06H
000638 E0                MOVX    A,@DPTR
000639 904CD4            MOV     DPTR,#R_1186_RTC+01H
00063C F0                MOVX    @DPTR,A
  243: 				R_1186_RTC[0] = uartRcvBuf[7];
00063D 904D4C            MOV     DPTR,#uartRcvBuf+07H
000640 E0                MOVX    A,@DPTR
000641 904CD3            MOV     DPTR,#R_1186_RTC
000644 F0                MOVX    @DPTR,A
  244: 
  245: 			
  246: 				/*
  247: 				R_Debug_temp=R_1186RTC.R_32;
  248: 				CS_ScaleDisplay_Debug();
  249: 				while(temp==2);
  250: 				temp=2;
  251: 				*/
  252: 				/*
  253: 				R_1186RTC.R_BYTE[3]=  uartRcvBuf[4];
  254: 				R_1186RTC.R_BYTE[2] = uartRcvBuf[5];
  255: 				R_1186RTC.R_BYTE[1] = uartRcvBuf[6];
  256: 				R_1186RTC.R_BYTE[0] = uartRcvBuf[7];
  257: 				/*
  258: 				R_1186_RTC = uartRcvBuf[4];
  259: 				R_1186_RTC = R_1186_RTC<<8;
  260: 				R_1186_RTC |= uartRcvBuf[5];
  261: 				R_1186_RTC = R_1186_RTC<<8;
  262: 				R_1186_RTC |= uartRcvBuf[6];
  263: 				R_1186_RTC = R_1186_RTC<<8;
  264: 				R_1186_RTC |= uartRcvBuf[7];
  265: 				*/
  266: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
000645 E4                CLR     A
000646 904D55            MOV     DPTR,#R_Weight_Com_Coo
000649 F0                MOVX    @DPTR,A
  267: 				R_Weight_Com_Coo.sucess=true;
00064A 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
00064D 04                INC     A
00064E F0                MOVX    @DPTR,A
  268: 				B_Weight_AdOk = true;
00064F 904CD7            MOV     DPTR,#B_Weight_AdOk
000652 F0                MOVX    @DPTR,A
  269: 						
  270: 				}
000653 22                RET     
000654         ?C0040?CS_COMMTO1186:
  271: 			else
  272: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
000654 904D68            MOV     DPTR,#uartTimeoutCnt
000657 7415              MOV     A,#015H
000659 F0                MOVX    @DPTR,A
  273: 			}	
  274: 		}
  275: }
00065A         ?C0042?CS_COMMTO1186:
00065A 22                RET     
----- FUNCTION CS_1186Com_ReadTime_Proc (END) -------


----- FUNCTION YC_UARTWaitSendData (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  373: void YC_UARTWaitSendData(void)
  374: {
  375: 	while(ESWAP(REG_UART_TX_ITEMS));
00065B         ?C0009?YC_PERIPHERAL:
  376: }
00065B 90810E            MOV     DPTR,#0810EH
00065E A3                INC     DPTR
00065F E0                MOVX    A,@DPTR
000660 FC                MOV     R4,A
000661 90810E            MOV     DPTR,#0810EH
000664 E0                MOVX    A,@DPTR
000665 FF                MOV     R7,A
000666 EC                MOV     A,R4
000667 FE                MOV     R6,A
000668 EF                MOV     A,R7
000669 4E                ORL     A,R6
00066A 70EF              JNZ     ?C0009?YC_PERIPHERAL
  377: 
00066C 22                RET     
----- FUNCTION YC_UARTWaitSendData (END) -------


----- FUNCTION CS_1186Com_SetSleepMode_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  279: void CS_1186Com_SetSleepMode_Proc(void)
  280: {
  281: 	u16_t	R_AD_Zero;
  282: 	
  283: 	R_AD_Zero = CS_Scale_ZeroProc(GetRunningZero,0);
00066D E4                CLR     A
00066E FD                MOV     R5,A
00066F FC                MOV     R4,A
000670 7F01              MOV     R7,#01H
000672 1212F1            LCALL   _CS_Scale_ZeroProc
;---- Variable 'R_AD_Zero' assigned to Register 'R4/R5' ----
000675 AD07              MOV     R5,AR7
000677 AC06              MOV     R4,AR6
  284: 		
  285: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetSleepMode)
000679 904D55            MOV     DPTR,#R_Weight_Com_Coo
00067C E0                MOVX    A,@DPTR
00067D 64A0              XRL     A,#0A0H
00067F 704E              JNZ     ?C0043?CS_COMMTO1186
  286: 		{
  287: 		
  288: 		uartTxBuf[0]= 0x91;
000681 904D58            MOV     DPTR,#uartTxBuf
000684 7491              MOV     A,#091H
000686 F0                MOVX    @DPTR,A
  289: 		uartTxBuf[1]= R_AD_Zero<<6;
000687 ED                MOV     A,R5
000688 7806              MOV     R0,#06H
00068A         ?C0082?CS_COMMTO1186:
00068A C3                CLR     C
00068B 33                RLC     A
00068C CE                XCH     A,R6
00068D 33                RLC     A
00068E CE                XCH     A,R6
00068F D8F9              DJNZ    R0,?C0082?CS_COMMTO1186
000691 904D59            MOV     DPTR,#uartTxBuf+01H
000694 F0                MOVX    @DPTR,A
  290: 		uartTxBuf[2]= R_AD_Zero>>2;
000695 ED                MOV     A,R5
000696 AE04              MOV     R6,AR4
000698 7802              MOV     R0,#02H
00069A         ?C0083?CS_COMMTO1186:
00069A CE                XCH     A,R6
00069B C3                CLR     C
00069C 13                RRC     A
00069D CE                XCH     A,R6
00069E 13                RRC     A
00069F D8F9              DJNZ    R0,?C0083?CS_COMMTO1186
0006A1 904D5A            MOV     DPTR,#uartTxBuf+02H
0006A4 F0                MOVX    @DPTR,A
  291: 		uartTxBuf[3]= R_AD_Zero>>10;
0006A5 EC                MOV     A,R4
0006A6 13                RRC     A
0006A7 13                RRC     A
0006A8 543F              ANL     A,#03FH
0006AA A3                INC     DPTR
0006AB F0                MOVX    @DPTR,A
  292: 		uartTxBuf[3]|= 0x80;
0006AC 4480              ORL     A,#080H
0006AE F0                MOVX    @DPTR,A
  293: 		CS_CommTo1186_SendCmd(CS_CommTo1186_SetSleepMode,uartTxBuf);
0006AF 7B01              MOV     R3,#01H
0006B1 7A4D              MOV     R2,#HIGH uartTxBuf
0006B3 7958              MOV     R1,#LOW uartTxBuf
0006B5 7FA0              MOV     R7,#0A0H
0006B7 1224C4            LCALL   _CS_CommTo1186_SendCmd
  294: 		
  295: 		YC_UARTWaitSendData();
0006BA D15B              ACALL   YC_UARTWaitSendData
  296: 		
  297: 		R_Weight_Com_Coo.pre = CS_CommTo1186_SetSleepMode;
0006BC 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
0006BF 74A0              MOV     A,#0A0H
0006C1 F0                MOVX    @DPTR,A
  298: 		R_Weight_Com_Coo.now = CS_CommTo1186_SetSleepModeStandby;
0006C2 904D55            MOV     DPTR,#R_Weight_Com_Coo
0006C5 7407              MOV     A,#07H
0006C7 F0                MOVX    @DPTR,A
  299: 		uartTimeoutCnt=0;
0006C8 E4                CLR     A
0006C9 904D68            MOV     DPTR,#uartTimeoutCnt
0006CC F0                MOVX    @DPTR,A
  300: 		YC_UARTClearBuffer();
0006CD B192              ACALL   YC_UARTClearBuffer
  301: 		}
0006CF         ?C0043?CS_COMMTO1186:
  302: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetSleepModeStandby)
0006CF 904D55            MOV     DPTR,#R_Weight_Com_Coo
0006D2 E0                MOVX    A,@DPTR
0006D3 B4072A            CJNE    A,#07H,?C0048?CS_COMMTO1186
  303: 		{
  304: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 5)==5)
0006D6 7B01              MOV     R3,#01H
0006D8 7A4D              MOV     R2,#HIGH uartRcvBuf
0006DA 7945              MOV     R1,#LOW uartRcvBuf
0006DC 7D05              MOV     R5,#05H
0006DE 7C00              MOV     R4,#00H
0006E0 F1A8              ACALL   _YC_UARTReciveDataExpected
0006E2 EF                MOV     A,R7
0006E3 6405              XRL     A,#05H
0006E5 4E                ORL     A,R6
0006E6 7018              JNZ     ?C0048?CS_COMMTO1186
  305: 			{
  306: 			if(uartRcvBuf[3] == CS_CommTo1186_SetSleepMode)    
0006E8 904D48            MOV     DPTR,#uartRcvBuf+03H
0006EB E0                MOVX    A,@DPTR
0006EC B4A00B            CJNE    A,#0A0H,?C0046?CS_COMMTO1186
  307: 				{			
  308: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
0006EF E4                CLR     A
0006F0 904D55            MOV     DPTR,#R_Weight_Com_Coo
0006F3 F0                MOVX    @DPTR,A
  309: 				R_Weight_Com_Coo.sucess=true;	
0006F4 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
0006F7 04                INC     A
0006F8 F0                MOVX    @DPTR,A
  310: 				}
0006F9 22                RET     
0006FA         ?C0046?CS_COMMTO1186:
  311: 			else
  312: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
0006FA 904D68            MOV     DPTR,#uartTimeoutCnt
0006FD 7415              MOV     A,#015H
0006FF F0                MOVX    @DPTR,A
  313: 			}	
  314: 		}
  315: }
000700         ?C0048?CS_COMMTO1186:
000700 22                RET     
----- FUNCTION CS_1186Com_SetSleepMode_Proc (END) -------


----- FUNCTION CS_1186Com_Reset_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  396: void CS_1186Com_Reset_Proc(void)
  397: {
  398: 
  399: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_Reset)
000701 904D55            MOV     DPTR,#R_Weight_Com_Coo
000704 E0                MOVX    A,@DPTR
000705 B4C512            CJNE    A,#0C5H,?C0062?CS_COMMTO1186
  400: 		{
  401: 		CS_CommTo1186_SendCmd(CS_CommTo1186_Reset,0);
000708 7B00              MOV     R3,#00H
00070A 7A00              MOV     R2,#00H
00070C 7900              MOV     R1,#00H
00070E 7FC5              MOV     R7,#0C5H
000710 1224C4            LCALL   _CS_CommTo1186_SendCmd
  402: 		YC_UARTClearBuffer();
000713 B192              ACALL   YC_UARTClearBuffer
  403: 		R_Weight_Com_Coo.now=CS_CommTo1186_Null;
000715 E4                CLR     A
000716 904D55            MOV     DPTR,#R_Weight_Com_Coo
000719 F0                MOVX    @DPTR,A
  404: 		
  405: 		}
  406: 													
  407: }
00071A         ?C0062?CS_COMMTO1186:
00071A 22                RET     
----- FUNCTION CS_1186Com_Reset_Proc (END) -------


----- FUNCTION CS_1186Com_SetOpenWeight_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  320: void CS_1186Com_SetOpenWeight_Proc(void)
  321: {
  322: 	u16_t	R_Open_Weight;
  323: 	R_Open_Weight = CS_Scale_CaliProc(CaliProcGetOpenWeight);	//获取开机重量值
00071B 7F07              MOV     R7,#07H
00071D 120A38            LCALL   _CS_Scale_CaliProc
;---- Variable 'R_Open_Weight' assigned to Register 'R4/R5' ----
000720 AD07              MOV     R5,AR7
000722 AC06              MOV     R4,AR6
  324: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetOpenWeight)
000724 904D55            MOV     DPTR,#R_Weight_Com_Coo
000727 E0                MOVX    A,@DPTR
000728 64A1              XRL     A,#0A1H
00072A 704A              JNZ     ?C0049?CS_COMMTO1186
  325: 		{
  326: 		uartTxBuf[0]= 0x20;
00072C 904D58            MOV     DPTR,#uartTxBuf
00072F 7420              MOV     A,#020H
000731 F0                MOVX    @DPTR,A
  327: 		uartTxBuf[1]= R_Open_Weight<<6;
000732 ED                MOV     A,R5
000733 7806              MOV     R0,#06H
000735         ?C0084?CS_COMMTO1186:
000735 C3                CLR     C
000736 33                RLC     A
000737 CE                XCH     A,R6
000738 33                RLC     A
000739 CE                XCH     A,R6
00073A D8F9              DJNZ    R0,?C0084?CS_COMMTO1186
00073C FB                MOV     R3,A
00073D 904D59            MOV     DPTR,#uartTxBuf+01H
000740 F0                MOVX    @DPTR,A
  328: 		uartTxBuf[2]= R_Open_Weight>>2;
000741 ED                MOV     A,R5
000742 AE04              MOV     R6,AR4
000744 7802              MOV     R0,#02H
000746         ?C0085?CS_COMMTO1186:
000746 CE                XCH     A,R6
000747 C3                CLR     C
000748 13                RRC     A
000749 CE                XCH     A,R6
00074A 13                RRC     A
00074B D8F9              DJNZ    R0,?C0085?CS_COMMTO1186
00074D FF                MOV     R7,A
00074E 904D5A            MOV     DPTR,#uartTxBuf+02H
000751 F0                MOVX    @DPTR,A
  329: 		uartTxBuf[3]= R_Open_Weight<<6;
000752 A3                INC     DPTR
000753 EB                MOV     A,R3
000754 F0                MOVX    @DPTR,A
  330: 		uartTxBuf[4]= R_Open_Weight>>2;	
000755 A3                INC     DPTR
000756 EF                MOV     A,R7
000757 F0                MOVX    @DPTR,A
  331: 		CS_CommTo1186_SendCmd(CS_CommTo1186_SetOpenWeight,uartTxBuf);
000758 7B01              MOV     R3,#01H
00075A 7A4D              MOV     R2,#HIGH uartTxBuf
00075C 7958              MOV     R1,#LOW uartTxBuf
00075E 7FA1              MOV     R7,#0A1H
000760 1224C4            LCALL   _CS_CommTo1186_SendCmd
  332: 		R_Weight_Com_Coo.pre = CS_CommTo1186_SetOpenWeight;
000763 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
000766 74A1              MOV     A,#0A1H
000768 F0                MOVX    @DPTR,A
  333: 		R_Weight_Com_Coo.now = CS_CommTo1186_SetOpenWeightStandby;
000769 904D55            MOV     DPTR,#R_Weight_Com_Coo
00076C 7408              MOV     A,#08H
00076E F0                MOVX    @DPTR,A
  334: 		uartTimeoutCnt=0;
00076F E4                CLR     A
000770 904D68            MOV     DPTR,#uartTimeoutCnt
000773 F0                MOVX    @DPTR,A
  335: 		YC_UARTClearBuffer();
000774 B192              ACALL   YC_UARTClearBuffer
  336: 		}
000776         ?C0049?CS_COMMTO1186:
  337: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetOpenWeightStandby)
000776 904D55            MOV     DPTR,#R_Weight_Com_Coo
000779 E0                MOVX    A,@DPTR
00077A B4082A            CJNE    A,#08H,?C0054?CS_COMMTO1186
  338: 		{
  339: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 5)==5)
00077D 7B01              MOV     R3,#01H
00077F 7A4D              MOV     R2,#HIGH uartRcvBuf
000781 7945              MOV     R1,#LOW uartRcvBuf
000783 7D05              MOV     R5,#05H
000785 7C00              MOV     R4,#00H
000787 F1A8              ACALL   _YC_UARTReciveDataExpected
000789 EF                MOV     A,R7
00078A 6405              XRL     A,#05H
00078C 4E                ORL     A,R6
00078D 7018              JNZ     ?C0054?CS_COMMTO1186
  340: 			{
  341: 			if(uartRcvBuf[3] == CS_CommTo1186_SetOpenWeight)    
00078F 904D48            MOV     DPTR,#uartRcvBuf+03H
000792 E0                MOVX    A,@DPTR
000793 B4A10B            CJNE    A,#0A1H,?C0052?CS_COMMTO1186
  342: 				{			
  343: 				//读到时间的操作
  344: 				//R_Debug_temp=uartRcvBuf[5];
  345: 				
  346: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
000796 E4                CLR     A
000797 904D55            MOV     DPTR,#R_Weight_Com_Coo
00079A F0                MOVX    @DPTR,A
  347: 				R_Weight_Com_Coo.sucess=true;
00079B 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
00079E 04                INC     A
00079F F0                MOVX    @DPTR,A
  348: 				
  349: 						
  350: 				}
0007A0 22                RET     
0007A1         ?C0052?CS_COMMTO1186:
  351: 			else
  352: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
0007A1 904D68            MOV     DPTR,#uartTimeoutCnt
0007A4 7415              MOV     A,#015H
0007A6 F0                MOVX    @DPTR,A
  353: 			}	
  354: 		}
  355: }
0007A7         ?C0054?CS_COMMTO1186:
0007A7 22                RET     
----- FUNCTION CS_1186Com_SetOpenWeight_Proc (END) -------


----- FUNCTION _YC_UARTReciveDataExpected (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  378: u16_t YC_UARTReciveDataExpected(u8_t* pbuff, u16_t len)
  379: {
0007A8 904DCC            MOV     DPTR,#pbuff
0007AB EB                MOV     A,R3
0007AC F0                MOVX    @DPTR,A
0007AD A3                INC     DPTR
0007AE EA                MOV     A,R2
0007AF F0                MOVX    @DPTR,A
0007B0 A3                INC     DPTR
0007B1 E9                MOV     A,R1
0007B2 F0                MOVX    @DPTR,A
0007B3 A3                INC     DPTR
0007B4 EC                MOV     A,R4
0007B5 F0                MOVX    @DPTR,A
0007B6 A3                INC     DPTR
0007B7 ED                MOV     A,R5
0007B8 F0                MOVX    @DPTR,A
  380: 	int i = 0;
  381: 	u8_t xdata* rrptr = (u8_t *)ESWAP(REG_UART_RX_PTR_R);
0007B9 E4                CLR     A
0007BA A3                INC     DPTR
0007BB F0                MOVX    @DPTR,A
0007BC A3                INC     DPTR
0007BD F0                MOVX    @DPTR,A
  382: 
0007BE 908058            MOV     DPTR,#08058H
0007C1 A3                INC     DPTR
0007C2 E0                MOVX    A,@DPTR
0007C3 FC                MOV     R4,A
0007C4 908058            MOV     DPTR,#08058H
0007C7 E0                MOVX    A,@DPTR
0007C8 FF                MOV     R7,A
0007C9 EC                MOV     A,R4
0007CA FE                MOV     R6,A
0007CB EF                MOV     A,R7
0007CC 904DD3            MOV     DPTR,#rrptr
0007CF EE                MOV     A,R6
0007D0 F0                MOVX    @DPTR,A
0007D1 A3                INC     DPTR
0007D2 EF                MOV     A,R7
0007D3 F0                MOVX    @DPTR,A
  383: 	if(ESWAP(REG_UART_RX_ITEMS)<len)
0007D4 908112            MOV     DPTR,#08112H
0007D7 A3                INC     DPTR
0007D8 E0                MOVX    A,@DPTR
0007D9 FC                MOV     R4,A
0007DA 908112            MOV     DPTR,#08112H
0007DD E0                MOVX    A,@DPTR
0007DE FF                MOV     R7,A
0007DF EC                MOV     A,R4
0007E0 FE                MOV     R6,A
0007E1 EF                MOV     A,R7
0007E2 D3                SETB    C
0007E3 904DD0            MOV     DPTR,#len+01H
0007E6 E0                MOVX    A,@DPTR
0007E7 9F                SUBB    A,R7
0007E8 904DCF            MOV     DPTR,#len
0007EB E0                MOVX    A,@DPTR
0007EC 9E                SUBB    A,R6
0007ED 4004              JC      ?C0012?YC_PERIPHERAL
  384: 	{
  385: 		return false;
0007EF E4                CLR     A
0007F0 FE                MOV     R6,A
0007F1 FF                MOV     R7,A
0007F2 22                RET     
  386: 	}
0007F3         ?C0012?YC_PERIPHERAL:
  387: 
  388: 	for(i=0;i<len;i++)
0007F3 E4                CLR     A
0007F4 904DD1            MOV     DPTR,#i
0007F7 F0                MOVX    @DPTR,A
0007F8 A3                INC     DPTR
0007F9 F0                MOVX    @DPTR,A
0007FA         ?C0014?YC_PERIPHERAL:
0007FA 904DCF            MOV     DPTR,#len
0007FD E0                MOVX    A,@DPTR
0007FE FE                MOV     R6,A
0007FF A3                INC     DPTR
000800 E0                MOVX    A,@DPTR
000801 FF                MOV     R7,A
000802 C3                CLR     C
000803 904DD2            MOV     DPTR,#i+01H
000806 E0                MOVX    A,@DPTR
000807 9F                SUBB    A,R7
000808 904DD1            MOV     DPTR,#i
00080B E0                MOVX    A,@DPTR
00080C 9E                SUBB    A,R6
00080D 4002              JC      $ + 4H
00080F 01CD              AJMP    ?C0015?YC_PERIPHERAL
  389: 	{
  390: 		memcpy(pbuff++, rrptr++, 1);
000811 904DD3            MOV     DPTR,#rrptr
000814 E4                CLR     A
000815 75F001            MOV     B,#01H
000818 1201C8            LCALL   ?C?ILDIX
00081B FA                MOV     R2,A
00081C A9F0              MOV     R1,B
00081E 7B01              MOV     R3,#01H
000820 C003              PUSH    AR3
000822 904DCC            MOV     DPTR,#pbuff
000825 E0                MOVX    A,@DPTR
000826 FB                MOV     R3,A
000827 A3                INC     DPTR
000828 E4                CLR     A
000829 75F001            MOV     B,#01H
00082C 1201C8            LCALL   ?C?ILDIX
00082F A8F0              MOV     R0,B
000831 FC                MOV     R4,A
000832 AD03              MOV     R5,AR3
000834 D003              POP     AR3
000836 7E00              MOV     R6,#00H
000838 7F01              MOV     R7,#01H
00083A 1200D3            LCALL   ?C?COPY
  391: 
  392: 		if((short)rrptr == ESWAP(REG_UART_RX_ADDR_E) + 1)		//rrptr reach the end of buffer
00083D 908056            MOV     DPTR,#08056H
000840 A3                INC     DPTR
000841 E0                MOVX    A,@DPTR
000842 FC                MOV     R4,A
000843 908056            MOV     DPTR,#08056H
000846 E0                MOVX    A,@DPTR
000847 FF                MOV     R7,A
000848 EC                MOV     A,R4
000849 FE                MOV     R6,A
00084A EF                MOV     A,R7
00084B 2401              ADD     A,#01H
00084D FF                MOV     R7,A
00084E E4                CLR     A
00084F 3E                ADDC    A,R6
000850 FE                MOV     R6,A
000851 904DD3            MOV     DPTR,#rrptr
000854 E0                MOVX    A,@DPTR
000855 FC                MOV     R4,A
000856 A3                INC     DPTR
000857 E0                MOVX    A,@DPTR
000858 B5071A            CJNE    A,AR7,?C0017?YC_PERIPHERAL
00085B EE                MOV     A,R6
00085C B50416            CJNE    A,AR4,?C0017?YC_PERIPHERAL
  393: 		{
  394: 			rrptr = (u8_t *)ESWAP(REG_UART_RX_ADDR_S);
00085F 908054            MOV     DPTR,#08054H
000862 A3                INC     DPTR
000863 E0                MOVX    A,@DPTR
000864 FC                MOV     R4,A
000865 908054            MOV     DPTR,#08054H
000868 E0                MOVX    A,@DPTR
000869 FF                MOV     R7,A
00086A EC                MOV     A,R4
00086B FE                MOV     R6,A
00086C EF                MOV     A,R7
00086D 904DD3            MOV     DPTR,#rrptr
000870 EE                MOV     A,R6
000871 F0                MOVX    @DPTR,A
000872 A3                INC     DPTR
000873 EF                MOV     A,R7
000874 F0                MOVX    @DPTR,A
  395: 		}
000875         ?C0017?YC_PERIPHERAL:
  396: 
  397: 		if((short)rrptr == ESWAP(REG_UART_RX_PTR_W) )	//read all data already
000875 908116            MOV     DPTR,#08116H
000878 A3                INC     DPTR
000879 E0                MOVX    A,@DPTR
00087A FC                MOV     R4,A
00087B 908116            MOV     DPTR,#08116H
00087E E0                MOVX    A,@DPTR
00087F FF                MOV     R7,A
000880 EC                MOV     A,R4
000881 FE                MOV     R6,A
000882 EF                MOV     A,R7
000883 904DD3            MOV     DPTR,#rrptr
000886 E0                MOVX    A,@DPTR
000887 FC                MOV     R4,A
000888 A3                INC     DPTR
000889 E0                MOVX    A,@DPTR
00088A FD                MOV     R5,A
00088B EF                MOV     A,R7
00088C 6D                XRL     A,R5
00088D 7002              JNZ     ?C0025?YC_PERIPHERAL
00088F EE                MOV     A,R6
000890 6C                XRL     A,R4
000891         ?C0025?YC_PERIPHERAL:
000891 7029              JNZ     ?C0016?YC_PERIPHERAL
  398: 		{
  399: 			REG_UART_RX_PTR_R = ESWAP((short)rrptr);
000893 904DD3            MOV     DPTR,#rrptr
000896 E0                MOVX    A,@DPTR
000897 FE                MOV     R6,A
000898 A3                INC     DPTR
000899 E0                MOVX    A,@DPTR
00089A FF                MOV     R7,A
00089B EC                MOV     A,R4
00089C FF                MOV     R7,A
00089D 33                RLC     A
00089E 95E0              SUBB    A,ACC
0008A0 AB07              MOV     R3,AR7
0008A2 ED                MOV     A,R5
0008A3 FF                MOV     R7,A
0008A4 EB                MOV     A,R3
0008A5 908058            MOV     DPTR,#08058H
0008A8 CF                XCH     A,R7
0008A9 F0                MOVX    @DPTR,A
0008AA A3                INC     DPTR
0008AB EF                MOV     A,R7
0008AC F0                MOVX    @DPTR,A
  400: 			return (i+1);
0008AD 904DD2            MOV     DPTR,#i+01H
0008B0 E0                MOVX    A,@DPTR
0008B1 2401              ADD     A,#01H
0008B3 FF                MOV     R7,A
0008B4 904DD1            MOV     DPTR,#i
0008B7 E0                MOVX    A,@DPTR
0008B8 3400              ADDC    A,#00H
0008BA FE                MOV     R6,A
0008BB 22                RET     
  401: 		}
  402: 	}
0008BC         ?C0016?YC_PERIPHERAL:
0008BC 904DD2            MOV     DPTR,#i+01H
0008BF E0                MOVX    A,@DPTR
0008C0 04                INC     A
0008C1 F0                MOVX    @DPTR,A
0008C2 7006              JNZ     ?C0026?YC_PERIPHERAL
0008C4 904DD1            MOV     DPTR,#i
0008C7 E0                MOVX    A,@DPTR
0008C8 04                INC     A
0008C9 F0                MOVX    @DPTR,A
0008CA         ?C0026?YC_PERIPHERAL:
0008CA 0207FA            LJMP    ?C0014?YC_PERIPHERAL
0008CD         ?C0015?YC_PERIPHERAL:
  403: 
  404: 	REG_UART_RX_PTR_R = ESWAP((short)rrptr);
0008CD 904DD3            MOV     DPTR,#rrptr
0008D0 E0                MOVX    A,@DPTR
0008D1 FE                MOV     R6,A
0008D2 A3                INC     DPTR
0008D3 E0                MOVX    A,@DPTR
0008D4 FF                MOV     R7,A
0008D5 FD                MOV     R5,A
0008D6 AC06              MOV     R4,AR6
0008D8 EC                MOV     A,R4
0008D9 FF                MOV     R7,A
0008DA 33                RLC     A
0008DB 95E0              SUBB    A,ACC
0008DD AB07              MOV     R3,AR7
0008DF ED                MOV     A,R5
0008E0 FF                MOV     R7,A
0008E1 EB                MOV     A,R3
0008E2 908058            MOV     DPTR,#08058H
0008E5 CF                XCH     A,R7
0008E6 F0                MOVX    @DPTR,A
0008E7 A3                INC     DPTR
0008E8 EF                MOV     A,R7
0008E9 F0                MOVX    @DPTR,A
  405: 	
  406: 	return len;
0008EA 904DCF            MOV     DPTR,#len
0008ED E0                MOVX    A,@DPTR
0008EE FE                MOV     R6,A
0008EF A3                INC     DPTR
0008F0 E0                MOVX    A,@DPTR
0008F1 FF                MOV     R7,A
  407: }
0008F2 22                RET     
----- FUNCTION _YC_UARTReciveDataExpected (END) -------


----- FUNCTION SoftTimer_10mSCallback (BEGIN) -----
 FILE: 'system.c'
   44: void SoftTimer_10mSCallback(void)
   45: {
   46: 	static u8_t count;
   47: 	YC_UtilTimerStartMs(10, SoftTimer_10mSCallback, &SoftTimer_10msTimerID);
0008F3 7BFF              MOV     R3,#0FFH
0008F5 7A08              MOV     R2,#HIGH SoftTimer_10mSCallback
0008F7 79F3              MOV     R1,#LOW SoftTimer_10mSCallback
0008F9 904DDA            MOV     DPTR,#?_YC_UtilTimerStartMs?BYTE+05H
0008FC 744E              MOV     A,#HIGH SoftTimer_10msTimerID
0008FE F0                MOVX    @DPTR,A
0008FF A3                INC     DPTR
000900 7441              MOV     A,#LOW SoftTimer_10msTimerID
000902 F0                MOVX    @DPTR,A
000903 7F0A              MOV     R7,#0AH
000905 7E00              MOV     R6,#00H
000907 12117C            LCALL   _YC_UtilTimerStartMs
   48: 	//add user function
   49: 	if(uartTimeoutCnt<255) {
00090A 904D68            MOV     DPTR,#uartTimeoutCnt
00090D E0                MOVX    A,@DPTR
00090E C3                CLR     C
00090F 94FF              SUBB    A,#0FFH
000911 5003              JNC     ?C0001?SYSTEM
   50: 		uartTimeoutCnt++;
000913 E0                MOVX    A,@DPTR
000914 04                INC     A
000915 F0                MOVX    @DPTR,A
   51: 	}
000916         ?C0001?SYSTEM:
   52: 
   53: 
   54: 	if(count<100)
000916 904E3F            MOV     DPTR,#count
000919 E0                MOVX    A,@DPTR
00091A C3                CLR     C
00091B 9464              SUBB    A,#064H
00091D 5005              JNC     ?C0002?SYSTEM
   55: 		count++;
00091F E0                MOVX    A,@DPTR
000920 04                INC     A
000921 F0                MOVX    @DPTR,A
000922 800F              SJMP    ?C0003?SYSTEM
000924         ?C0002?SYSTEM:
   56: 	else
   57: 		{
   58: 		count=0;
000924 E4                CLR     A
000925 904E3F            MOV     DPTR,#count
000928 F0                MOVX    @DPTR,A
   59: 		CS_Scale_TimeOutProc(CS_SetTimeBase1S);
000929 7F07              MOV     R7,#07H
00092B 122BBB            LCALL   _CS_Scale_TimeOutProc
   60: 		CS_MemoryWeightClear_Timer(MemWeightTimerInc);
00092E 7F02              MOV     R7,#02H
000930 12368E            LCALL   _CS_MemoryWeightClear_Timer
   61: 		}
000933         ?C0003?SYSTEM:
   62: 		
   63: 	CS_SoftTimer(SoftTimerInc);
000933 E4                CLR     A
000934 FF                MOV     R7,A
000935 F115              ACALL   _CS_SoftTimer
;----                  JMP     CS_KeyScan
   64: 
   65: 	CS_KeyScan();
   66: 
----- FUNCTION SoftTimer_10mSCallback (END) -------


----- FUNCTION CS_KeyScan (BEGIN) -----
 FILE: 'CS_ScaleKey.c'
   17: void CS_KeyScan(void)
   18: {
   19: 	u8_t  keyState;
   20: 	static u8_t xdata keyState_prev=1;
   21: 	static u8_t xdata keyStateCnt;
   22: 	static u8_t xdata KeyPressDeal=0;
   23: 	static u8_t xdata KeyLongPressDeal=0;
   24: 	static u8_t xdata ShortPressCount=0;
   25: 	static u8_t xdata PressTimesCount=0;
   26: 	static u8_t xdata Press;
   27: 	static u8_t xdata stanby;
   28: 	
   29: 	
   30: 	keyState = YC_GPIOGetInputStatus(5);	//GPIO5	
000937 7F05              MOV     R7,#05H
000939 121084            LCALL   _YC_GPIOGetInputStatus
00093C E4                CLR     A
00093D 33                RLC     A
00093E FF                MOV     R7,A
;---- Variable 'keyState' assigned to Register 'R7' ----
   31: 
   32: 	if(R_Scale_state == CS_Scale_state_standby)
00093F 904CC5            MOV     DPTR,#R_Scale_state
000942 E0                MOVX    A,@DPTR
000943 B40206            CJNE    A,#02H,?C0001?CS_SCALEKEY
   33: 		stanby=true;
000946 904E04            MOV     DPTR,#stanby
000949 7401              MOV     A,#01H
00094B F0                MOVX    @DPTR,A
00094C         ?C0001?CS_SCALEKEY:
   34: 
   35: 	if(ShortPressCount<255)		//短按计时
00094C 904E01            MOV     DPTR,#ShortPressCount
00094F E0                MOVX    A,@DPTR
000950 C3                CLR     C
000951 94FF              SUBB    A,#0FFH
000953 5003              JNC     ?C0002?CS_SCALEKEY
   36: 		ShortPressCount++;
000955 E0                MOVX    A,@DPTR
000956 04                INC     A
000957 F0                MOVX    @DPTR,A
000958         ?C0002?CS_SCALEKEY:
   37: 	
   38: 	if(keyState ==KEY_UP)
000958 EF                MOV     A,R7
000959 6401              XRL     A,#01H
00095B 7066              JNZ     ?C0003?CS_SCALEKEY
   39: 		{
   40: 		keyState_prev = KEY_UP;	
00095D 904DFD            MOV     DPTR,#keyState_prev
000960 04                INC     A
000961 F0                MOVX    @DPTR,A
   41: 		keyStateCnt = 0; 
000962 E4                CLR     A
000963 A3                INC     DPTR
000964 F0                MOVX    @DPTR,A
   42: 
   43: 		if(KeyLongPressDeal==1)
000965 904E00            MOV     DPTR,#KeyLongPressDeal
000968 E0                MOVX    A,@DPTR
000969 B40105            CJNE    A,#01H,?C0004?CS_SCALEKEY
   44: 			Press = false;
00096C E4                CLR     A
00096D 904E03            MOV     DPTR,#Press
000970 F0                MOVX    @DPTR,A
000971         ?C0004?CS_SCALEKEY:
   45: 		
   46: 		KeyPressDeal=0;
000971 E4                CLR     A
000972 904DFF            MOV     DPTR,#KeyPressDeal
000975 F0                MOVX    @DPTR,A
   47: 		KeyLongPressDeal=0;
000976 A3                INC     DPTR
000977 F0                MOVX    @DPTR,A
   48: 
   49: 		if(ShortPressCount>=KEY_SHORT_PRESS_TIME&&PressTimesCount==1)
000978 A3                INC     DPTR
000979 E0                MOVX    A,@DPTR
00097A C3                CLR     C
00097B 9412              SUBB    A,#012H
00097D 400F              JC      ?C0005?CS_SCALEKEY
00097F A3                INC     DPTR
000980 E0                MOVX    A,@DPTR
000981 B4010A            CJNE    A,#01H,?C0005?CS_SCALEKEY
   50: 			{
   51: 			PressTimesCount = 0;
000984 E4                CLR     A
000985 F0                MOVX    @DPTR,A
   52: 			if(stanby==false)
000986 904E04            MOV     DPTR,#stanby
000989 E0                MOVX    A,@DPTR
00098A 7002              JNZ     ?C0005?CS_SCALEKEY
   53: 			CS_Scale_ChangeUnit();	
00098C F153              ACALL   CS_Scale_ChangeUnit
   54: 			}
00098E         ?C0005?CS_SCALEKEY:
   55: 		
   56: 		if(Press == true)
00098E 904E03            MOV     DPTR,#Press
000991 E0                MOVX    A,@DPTR
000992 B40124            CJNE    A,#01H,?C0007?CS_SCALEKEY
   57: 			{
   58: 			Press = false;
000995 E4                CLR     A
000996 F0                MOVX    @DPTR,A
   59: 						
   60: 			//短按弹起处理
   61: 			if(ShortPressCount <KEY_SHORT_PRESS_TIME)
000997 904E01            MOV     DPTR,#ShortPressCount
00099A E0                MOVX    A,@DPTR
00099B C3                CLR     C
00099C 9412              SUBB    A,#012H
00099E 5006              JNC     ?C0008?CS_SCALEKEY
   62: 				PressTimesCount++;
0009A0 A3                INC     DPTR
0009A1 E0                MOVX    A,@DPTR
0009A2 04                INC     A
0009A3 F0                MOVX    @DPTR,A
0009A4 800E              SJMP    ?C0009?CS_SCALEKEY
0009A6         ?C0008?CS_SCALEKEY:
   63: 			else
   64: 				{
   65: 				PressTimesCount = 0;
0009A6 E4                CLR     A
0009A7 904E02            MOV     DPTR,#PressTimesCount
0009AA F0                MOVX    @DPTR,A
   66: 				PressTimesCount = 0;
0009AB F0                MOVX    @DPTR,A
   67: 				if(stanby==false)
0009AC 904E04            MOV     DPTR,#stanby
0009AF E0                MOVX    A,@DPTR
0009B0 7002              JNZ     ?C0009?CS_SCALEKEY
   68: 				CS_Scale_ChangeUnit();	
0009B2 F153              ACALL   CS_Scale_ChangeUnit
   69: 				}
0009B4         ?C0009?CS_SCALEKEY:
   70: 			ShortPressCount =0;	
0009B4 E4                CLR     A
0009B5 904E01            MOV     DPTR,#ShortPressCount
0009B8 F0                MOVX    @DPTR,A
   71: 			}
0009B9         ?C0007?CS_SCALEKEY:
   72: 		
   73: 			if(stanby==true)				//待机起来第一次按键不处理
0009B9 904E04            MOV     DPTR,#stanby
0009BC E0                MOVX    A,@DPTR
0009BD 6401              XRL     A,#01H
0009BF 7076              JNZ     ?C0022?CS_SCALEKEY
   74: 			stanby=false;
0009C1 F0                MOVX    @DPTR,A
   75: 		}
0009C2 22                RET     
0009C3         ?C0003?CS_SCALEKEY:
   76: 	else
   77: 		{
   78: 		if(keyState_prev == KEY_DOWN)
0009C3 904DFD            MOV     DPTR,#keyState_prev
0009C6 E0                MOVX    A,@DPTR
0009C7 7065              JNZ     ?C0013?CS_SCALEKEY
   79: 			{	
   80: 			if(keyStateCnt<255)
0009C9 A3                INC     DPTR
0009CA E0                MOVX    A,@DPTR
0009CB C3                CLR     C
0009CC 94FF              SUBB    A,#0FFH
0009CE 5003              JNC     ?C0014?CS_SCALEKEY
   81: 				keyStateCnt++;
0009D0 E0                MOVX    A,@DPTR
0009D1 04                INC     A
0009D2 F0                MOVX    @DPTR,A
0009D3         ?C0014?CS_SCALEKEY:
   82: 			 if(keyStateCnt > KEY_SHORT_PUSH_CNT)
0009D3 904DFE            MOV     DPTR,#keyStateCnt
0009D6 E0                MOVX    A,@DPTR
0009D7 FF                MOV     R7,A
0009D8 D3                SETB    C
0009D9 9403              SUBB    A,#03H
0009DB 401F              JC      ?C0015?CS_SCALEKEY
   83: 			 	{
   84: 			 	Press =true;
0009DD 904E03            MOV     DPTR,#Press
0009E0 7401              MOV     A,#01H
0009E2 F0                MOVX    @DPTR,A
   85: 				if(KeyPressDeal==0)
0009E3 904DFF            MOV     DPTR,#KeyPressDeal
0009E6 E0                MOVX    A,@DPTR
0009E7 7013              JNZ     ?C0015?CS_SCALEKEY
   86: 					{
   87: 					KeyPressDeal=1;
0009E9 04                INC     A
0009EA F0                MOVX    @DPTR,A
   88: 					//按键刚按下的处理
   89: 					if(ShortPressCount > KEY_SHORT_PRESS_TIME)
0009EB 904E01            MOV     DPTR,#ShortPressCount
0009EE E0                MOVX    A,@DPTR
0009EF D3                SETB    C
0009F0 9412              SUBB    A,#012H
0009F2 4003              JC      ?C0017?CS_SCALEKEY
   90: 						PressTimesCount = 0;
0009F4 E4                CLR     A
0009F5 A3                INC     DPTR
0009F6 F0                MOVX    @DPTR,A
0009F7         ?C0017?CS_SCALEKEY:
   91: 					ShortPressCount=0;
0009F7 E4                CLR     A
0009F8 904E01            MOV     DPTR,#ShortPressCount
0009FB F0                MOVX    @DPTR,A
   92: 					}
   93: 			 	}
0009FC         ?C0015?CS_SCALEKEY:
   94: 			 if(keyStateCnt > KEY_LONG_PUSH_CNT)
0009FC EF                MOV     A,R7
0009FD D3                SETB    C
0009FE 9450              SUBB    A,#050H
000A00 4035              JC      ?C0022?CS_SCALEKEY
   95: 			 	{
   96: 				if(KeyLongPressDeal==0)
000A02 904E00            MOV     DPTR,#KeyLongPressDeal
000A05 E0                MOVX    A,@DPTR
000A06 702F              JNZ     ?C0022?CS_SCALEKEY
   97: 					{
   98: 					//按键刚长按下的处理	
   99: 					KeyLongPressDeal=1;					
000A08 04                INC     A
000A09 F0                MOVX    @DPTR,A
  100: 					if(PressTimesCount==3)
000A0A 904E02            MOV     DPTR,#PressTimesCount
000A0D E0                MOVX    A,@DPTR
000A0E B40313            CJNE    A,#03H,?C0020?CS_SCALEKEY
  101: 						{
  102: 						R_Scale_state = CS_Scale_state_caling;	
000A11 904CC5            MOV     DPTR,#R_Scale_state
000A14 7403              MOV     A,#03H
000A16 F0                MOVX    @DPTR,A
  103: 						CS_Scale_CaliProc(CaliProcReset);
000A17 7F05              MOV     R7,#05H
000A19 5138              ACALL   _CS_Scale_CaliProc
  104: 						Press = false;
000A1B E4                CLR     A
000A1C 904E03            MOV     DPTR,#Press
000A1F F0                MOVX    @DPTR,A
  105: 						keyStateCnt=0;
000A20 904DFE            MOV     DPTR,#keyStateCnt
000A23 F0                MOVX    @DPTR,A
  106: 						}
000A24         ?C0020?CS_SCALEKEY:
  107: 					PressTimesCount = 0;
000A24 E4                CLR     A
000A25 904E02            MOV     DPTR,#PressTimesCount
000A28 F0                MOVX    @DPTR,A
  108: 					ShortPressCount =0;
000A29 904E01            MOV     DPTR,#ShortPressCount
000A2C F0                MOVX    @DPTR,A
  109: 					}
  110: 			 	}
  111: 			}
000A2D 22                RET     
000A2E         ?C0013?CS_SCALEKEY:
  112: 		else
  113: 			{
  114: 			keyState_prev = KEY_DOWN;
000A2E E4                CLR     A
000A2F 904DFD            MOV     DPTR,#keyState_prev
000A32 F0                MOVX    @DPTR,A
  115: 			Press = false;
000A33 904E03            MOV     DPTR,#Press
000A36 F0                MOVX    @DPTR,A
  116: 			}
  117: 		}
  118: }
000A37         ?C0022?CS_SCALEKEY:
000A37 22                RET     
----- FUNCTION CS_KeyScan (END) -------


----- FUNCTION _CS_Scale_CaliProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  935: u16_t CS_Scale_CaliProc(u8_t option)
  936: {
;---- Variable 'option' assigned to Register 'R5' ----
000A38 AD07              MOV     R5,AR7
  937: 	static	u16_t xdata R_AD_CaliDot1;		//第一个标定点AD值
  938: 	static	u16_t xdata R_AD_CaliDot2;		//第二个标定点AD值
  939: 	static	u16_t xdata R_AD_CaliDot3;		//第三个标定点AD值
  940: 	static	u8_t	  xdata R_CaliState;			//标定状态
  941: 	static	u16_t xdata R_OpenWeight_Ad;	//开机重量AD值
  942: 	
  943: 	u16_t	R_AdFilTimes;	
  944: 	u16_t	weight_temp;
  945: 	u16_t	R_AD_BUF;
  946: 	u16_t	R_AD_PowerOnZero;
  947: 
  948: 	if(option==CaliProcReset)
000A3A ED                MOV     A,R5
000A3B B40508            CJNE    A,#05H,?C0128?CS_SCALE_PROC
  949: 		{
  950: 		R_CaliState=CS_CaliState_GetZero;
000A3E E4                CLR     A
000A3F 904CB1            MOV     DPTR,#R_CaliState
000A42 F0                MOVX    @DPTR,A
  951: 		return	0;
000A43 FE                MOV     R6,A
000A44 FF                MOV     R7,A
000A45 22                RET     
  952: 		}
000A46         ?C0128?CS_SCALE_PROC:
  953: 	if(option==CaliProcSetCali)
000A46 ED                MOV     A,R5
000A47 6401              XRL     A,#01H
000A49 6002              JZ      $ + 4H
000A4B 612A              AJMP    ?C0130?CS_SCALE_PROC
  954: 		{
  955: /*
  956: 		*(mem_sensor_buf )= 12;
  957: 		*(mem_sensor_buf+1) = 12;
  958: 		*(mem_sensor_buf+2 )= 12;
  959: 		*(mem_sensor_buf+3) = 12;
  960: 		*(mem_sensor_buf+4 )= 12;
  961: 		*(mem_sensor_buf+5) = 12;
  962: 		SpiFlashOperator(CS_CMD_WRITE_FLASH);
  963: 		//YC_Delay10ms(10);
  964: 		
  965: 		*(mem_sensor_buf )= 0;
  966: 		*(mem_sensor_buf+1) = 0;
  967: 		*(mem_sensor_buf+2 )= 0;
  968: 		*(mem_sensor_buf+3) = 0;
  969: 		*(mem_sensor_buf+4 )= 0;
  970: 		*(mem_sensor_buf+5) = 0;
  971: 		
  972: 		
  973: 		SpiFlashOperator( CS_CMD_READ_FLASH);
  974: 		
  975: 		
  976: 		
  977: 		R_Debug_temp=(u16_t) *(mem_sensor_buf+2 ) ;
  978: 		CS_ScaleDisplay_Debug();
  979: 		while(1);
  980: 		*/
  981: 		//YC_Delay1S(1);
  982: 		
  983: 		R_AD_BUF = *(mem_sensor_buf );
000A4D 904C08            MOV     DPTR,#04C08H
000A50 E0                MOVX    A,@DPTR
000A51 FF                MOV     R7,A
000A52 904DF9            MOV     DPTR,#R_AD_BUF
000A55 E4                CLR     A
000A56 F0                MOVX    @DPTR,A
000A57 A3                INC     DPTR
000A58 EF                MOV     A,R7
000A59 F0                MOVX    @DPTR,A
  984: 		R_AD_CaliDot1 =R_AD_BUF<<8 |  (*(mem_sensor_buf+1));
000A5A E0                MOVX    A,@DPTR
000A5B FE                MOV     R6,A
000A5C 904C09            MOV     DPTR,#04C09H
000A5F E0                MOVX    A,@DPTR
000A60 FB                MOV     R3,A
000A61 EE                MOV     A,R6
000A62 EB                MOV     A,R3
000A63 FF                MOV     R7,A
000A64 904CAB            MOV     DPTR,#R_AD_CaliDot1
000A67 EE                MOV     A,R6
000A68 F0                MOVX    @DPTR,A
000A69 A3                INC     DPTR
000A6A EF                MOV     A,R7
000A6B F0                MOVX    @DPTR,A
  985: 		R_AD_BUF = *(mem_sensor_buf+2 );
000A6C 904C0A            MOV     DPTR,#04C0AH
000A6F E0                MOVX    A,@DPTR
000A70 FF                MOV     R7,A
000A71 904DF9            MOV     DPTR,#R_AD_BUF
000A74 E4                CLR     A
000A75 F0                MOVX    @DPTR,A
000A76 A3                INC     DPTR
000A77 EF                MOV     A,R7
000A78 F0                MOVX    @DPTR,A
  986: 		R_AD_CaliDot2 =R_AD_BUF<<8 |  (*(mem_sensor_buf+3));
000A79 E0                MOVX    A,@DPTR
000A7A FE                MOV     R6,A
000A7B 904C0B            MOV     DPTR,#04C0BH
000A7E E0                MOVX    A,@DPTR
000A7F FB                MOV     R3,A
000A80 EE                MOV     A,R6
000A81 EB                MOV     A,R3
000A82 FF                MOV     R7,A
000A83 904CAD            MOV     DPTR,#R_AD_CaliDot2
000A86 EE                MOV     A,R6
000A87 F0                MOVX    @DPTR,A
000A88 A3                INC     DPTR
000A89 EF                MOV     A,R7
000A8A F0                MOVX    @DPTR,A
  987: 		R_AD_BUF = *(mem_sensor_buf+4 );
000A8B 904C0C            MOV     DPTR,#04C0CH
000A8E E0                MOVX    A,@DPTR
000A8F FF                MOV     R7,A
000A90 904DF9            MOV     DPTR,#R_AD_BUF
000A93 E4                CLR     A
000A94 F0                MOVX    @DPTR,A
000A95 A3                INC     DPTR
000A96 EF                MOV     A,R7
000A97 F0                MOVX    @DPTR,A
  988: 		R_AD_CaliDot3 =R_AD_BUF<<8 |  (*(mem_sensor_buf+5));	
000A98 E0                MOVX    A,@DPTR
000A99 FE                MOV     R6,A
000A9A 904C0D            MOV     DPTR,#04C0DH
000A9D E0                MOVX    A,@DPTR
000A9E FB                MOV     R3,A
000A9F EE                MOV     A,R6
000AA0 EB                MOV     A,R3
000AA1 FF                MOV     R7,A
000AA2 904CAF            MOV     DPTR,#R_AD_CaliDot3
000AA5 EE                MOV     A,R6
000AA6 F0                MOVX    @DPTR,A
000AA7 A3                INC     DPTR
000AA8 EF                MOV     A,R7
000AA9 F0                MOVX    @DPTR,A
  989: 
  990: 		
  991: 
  992: 		if(R_AD_CaliDot1<CS_CaliStateData_Down || R_AD_CaliDot1>CS_CaliStateData_Up)
000AAA 904CAB            MOV     DPTR,#R_AD_CaliDot1
000AAD E0                MOVX    A,@DPTR
000AAE FE                MOV     R6,A
000AAF A3                INC     DPTR
000AB0 E0                MOVX    A,@DPTR
000AB1 FF                MOV     R7,A
000AB2 C3                CLR     C
000AB3 94E8              SUBB    A,#0E8H
000AB5 EE                MOV     A,R6
000AB6 9403              SUBB    A,#03H
000AB8 4009              JC      ?C0132?CS_SCALE_PROC
000ABA D3                SETB    C
000ABB EF                MOV     A,R7
000ABC 9470              SUBB    A,#070H
000ABE EE                MOV     A,R6
000ABF 9417              SUBB    A,#017H
000AC1 404C              JC      ?C0131?CS_SCALE_PROC
000AC3         ?C0132?CS_SCALE_PROC:
  993: 			if(R_AD_CaliDot2<CS_CaliStateData_Down||R_AD_CaliDot2>CS_CaliStateData_Up)
000AC3 904CAD            MOV     DPTR,#R_AD_CaliDot2
000AC6 E0                MOVX    A,@DPTR
000AC7 FE                MOV     R6,A
000AC8 A3                INC     DPTR
000AC9 E0                MOVX    A,@DPTR
000ACA FF                MOV     R7,A
000ACB C3                CLR     C
000ACC 94E8              SUBB    A,#0E8H
000ACE EE                MOV     A,R6
000ACF 9403              SUBB    A,#03H
000AD1 4009              JC      ?C0134?CS_SCALE_PROC
000AD3 D3                SETB    C
000AD4 EF                MOV     A,R7
000AD5 9470              SUBB    A,#070H
000AD7 EE                MOV     A,R6
000AD8 9417              SUBB    A,#017H
000ADA 4033              JC      ?C0131?CS_SCALE_PROC
000ADC         ?C0134?CS_SCALE_PROC:
  994: 				if(R_AD_CaliDot3<CS_CaliStateData_Down||R_AD_CaliDot3>CS_CaliStateData_Up)
000ADC 904CAF            MOV     DPTR,#R_AD_CaliDot3
000ADF E0                MOVX    A,@DPTR
000AE0 FE                MOV     R6,A
000AE1 A3                INC     DPTR
000AE2 E0                MOVX    A,@DPTR
000AE3 FF                MOV     R7,A
000AE4 C3                CLR     C
000AE5 94E8              SUBB    A,#0E8H
000AE7 EE                MOV     A,R6
000AE8 9403              SUBB    A,#03H
000AEA 4009              JC      ?C0136?CS_SCALE_PROC
000AEC D3                SETB    C
000AED EF                MOV     A,R7
000AEE 9470              SUBB    A,#070H
000AF0 EE                MOV     A,R6
000AF1 9417              SUBB    A,#017H
000AF3 401A              JC      ?C0131?CS_SCALE_PROC
000AF5         ?C0136?CS_SCALE_PROC:
  995: 					{
  996: 					R_AD_CaliDot1	= 6000;
000AF5 904CAB            MOV     DPTR,#R_AD_CaliDot1
000AF8 7417              MOV     A,#017H
000AFA F0                MOVX    @DPTR,A
000AFB A3                INC     DPTR
000AFC 7470              MOV     A,#070H
000AFE F0                MOVX    @DPTR,A
  997: 					R_AD_CaliDot2	= 5000;
000AFF A3                INC     DPTR
000B00 7413              MOV     A,#013H
000B02 F0                MOVX    @DPTR,A
000B03 A3                INC     DPTR
000B04 7488              MOV     A,#088H
000B06 F0                MOVX    @DPTR,A
  998: 					R_AD_CaliDot3	= 4000;	
000B07 A3                INC     DPTR
000B08 740F              MOV     A,#0FH
000B0A F0                MOVX    @DPTR,A
000B0B A3                INC     DPTR
000B0C 74A0              MOV     A,#0A0H
000B0E F0                MOVX    @DPTR,A
  999: 					}	
000B0F         ?C0131?CS_SCALE_PROC:
 1000: 		
 1001: 		
 1002: 		R_OpenWeight_Ad	= R_AD_CaliDot1/10;
000B0F 904CAB            MOV     DPTR,#R_AD_CaliDot1
000B12 E0                MOVX    A,@DPTR
000B13 FE                MOV     R6,A
000B14 A3                INC     DPTR
000B15 E0                MOVX    A,@DPTR
000B16 FF                MOV     R7,A
000B17 7C00              MOV     R4,#00H
000B19 7D0A              MOV     R5,#0AH
000B1B 120173            LCALL   ?C?UIDIV
000B1E 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000B21 EE                MOV     A,R6
000B22 F0                MOVX    @DPTR,A
000B23 A3                INC     DPTR
000B24 EF                MOV     A,R7
000B25 F0                MOVX    @DPTR,A
 1003: 		return	0;		
000B26 E4                CLR     A
000B27 FE                MOV     R6,A
000B28 FF                MOV     R7,A
000B29 22                RET     
 1004: 		}
000B2A         ?C0130?CS_SCALE_PROC:
 1005: 	if(option==CaliProcSetOpenWeight)
000B2A ED                MOV     A,R5
000B2B B4061B            CJNE    A,#06H,?C0137?CS_SCALE_PROC
 1006: 		{
 1007: 		R_OpenWeight_Ad	= R_AD_CaliDot1/10;
000B2E 904CAB            MOV     DPTR,#R_AD_CaliDot1
000B31 E0                MOVX    A,@DPTR
000B32 FE                MOV     R6,A
000B33 A3                INC     DPTR
000B34 E0                MOVX    A,@DPTR
000B35 FF                MOV     R7,A
000B36 7C00              MOV     R4,#00H
000B38 7D0A              MOV     R5,#0AH
000B3A 120173            LCALL   ?C?UIDIV
000B3D 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000B40 EE                MOV     A,R6
000B41 F0                MOVX    @DPTR,A
000B42 A3                INC     DPTR
000B43 EF                MOV     A,R7
000B44 F0                MOVX    @DPTR,A
 1008: 		return	0;
000B45 E4                CLR     A
000B46 FE                MOV     R6,A
000B47 FF                MOV     R7,A
000B48 22                RET     
 1009: 		}
000B49         ?C0137?CS_SCALE_PROC:
 1010: 	
 1011: 	if(option==CaliProcGetOpenWeight)
000B49 ED                MOV     A,R5
000B4A B40709            CJNE    A,#07H,?C0138?CS_SCALE_PROC
 1012: 		return R_OpenWeight_Ad;
000B4D 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000B50 E0                MOVX    A,@DPTR
000B51 FE                MOV     R6,A
000B52 A3                INC     DPTR
000B53 E0                MOVX    A,@DPTR
000B54 FF                MOV     R7,A
000B55 22                RET     
000B56         ?C0138?CS_SCALE_PROC:
 1013: 	if(option==CaliProcGetCaliDot1)
000B56 ED                MOV     A,R5
000B57 B40209            CJNE    A,#02H,?C0139?CS_SCALE_PROC
 1014: 		return R_AD_CaliDot1;
000B5A 904CAB            MOV     DPTR,#R_AD_CaliDot1
000B5D E0                MOVX    A,@DPTR
000B5E FE                MOV     R6,A
000B5F A3                INC     DPTR
000B60 E0                MOVX    A,@DPTR
000B61 FF                MOV     R7,A
000B62 22                RET     
000B63         ?C0139?CS_SCALE_PROC:
 1015: 	if(option==CaliProcGetCaliDot2)
000B63 ED                MOV     A,R5
000B64 B40309            CJNE    A,#03H,?C0140?CS_SCALE_PROC
 1016: 		return R_AD_CaliDot2;
000B67 904CAD            MOV     DPTR,#R_AD_CaliDot2
000B6A E0                MOVX    A,@DPTR
000B6B FE                MOV     R6,A
000B6C A3                INC     DPTR
000B6D E0                MOVX    A,@DPTR
000B6E FF                MOV     R7,A
000B6F 22                RET     
000B70         ?C0140?CS_SCALE_PROC:
 1017: 	if(option==CaliProcGetCaliDot3)
000B70 ED                MOV     A,R5
000B71 B40409            CJNE    A,#04H,?C0141?CS_SCALE_PROC
 1018: 		return R_AD_CaliDot3;
000B74 904CAF            MOV     DPTR,#R_AD_CaliDot3
000B77 E0                MOVX    A,@DPTR
000B78 FE                MOV     R6,A
000B79 A3                INC     DPTR
000B7A E0                MOVX    A,@DPTR
000B7B FF                MOV     R7,A
000B7C 22                RET     
000B7D         ?C0141?CS_SCALE_PROC:
 1019: 	
 1020: 	R_AD_BUF = R_AD_Original;
000B7D 904CD8            MOV     DPTR,#R_AD_Original
000B80 E0                MOVX    A,@DPTR
000B81 FE                MOV     R6,A
000B82 A3                INC     DPTR
000B83 E0                MOVX    A,@DPTR
000B84 FF                MOV     R7,A
000B85 904DF9            MOV     DPTR,#R_AD_BUF
000B88 EE                MOV     A,R6
000B89 F0                MOVX    @DPTR,A
000B8A FC                MOV     R4,A
000B8B A3                INC     DPTR
000B8C EF                MOV     A,R7
000B8D F0                MOVX    @DPTR,A
000B8E FD                MOV     R5,A
 1021: 	R_AD_BUF=CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
000B8F E4                CLR     A
000B90 FF                MOV     R7,A
000B91 1230D4            LCALL   _CS_Scale_AdcFilter
000B94 904DF9            MOV     DPTR,#R_AD_BUF
000B97 EE                MOV     A,R6
000B98 F0                MOVX    @DPTR,A
000B99 FC                MOV     R4,A
000B9A A3                INC     DPTR
000B9B EF                MOV     A,R7
000B9C F0                MOVX    @DPTR,A
000B9D FD                MOV     R5,A
 1022: 	R_AdFilTimes = CS_Scale_AdcFilter(ScaleAdcFilterGetFilTimes,R_AD_BUF);
000B9E 7F02              MOV     R7,#02H
000BA0 1230D4            LCALL   _CS_Scale_AdcFilter
000BA3 904DF5            MOV     DPTR,#R_AdFilTimes
000BA6 EE                MOV     A,R6
000BA7 F0                MOVX    @DPTR,A
000BA8 A3                INC     DPTR
000BA9 EF                MOV     A,R7
000BAA F0                MOVX    @DPTR,A
 1023: 	
 1024: 	
 1025: 
 1026: 	//数据稳定才处理
 1027: 		
 1028: 	if(R_CaliState==CS_CaliState_GetZero) 
000BAB 904CB1            MOV     DPTR,#R_CaliState
000BAE E0                MOVX    A,@DPTR
000BAF 7048              JNZ     ?C0142?CS_SCALE_PROC
 1029: 		{	
 1030: 
 1031: 			R_AD_CaliDot1 = R_AD_BUF;	//暂存零点用于显示
000BB1 904DF9            MOV     DPTR,#R_AD_BUF
000BB4 E0                MOVX    A,@DPTR
000BB5 FC                MOV     R4,A
000BB6 A3                INC     DPTR
000BB7 E0                MOVX    A,@DPTR
000BB8 FD                MOV     R5,A
000BB9 904CAB            MOV     DPTR,#R_AD_CaliDot1
000BBC EC                MOV     A,R4
000BBD F0                MOVX    @DPTR,A
000BBE A3                INC     DPTR
000BBF ED                MOV     A,R5
000BC0 F0                MOVX    @DPTR,A
 1032: 			if(R_AdFilTimes>=CS_Cali_Steadytimes)
000BC1 C3                CLR     C
000BC2 904DF6            MOV     DPTR,#R_AdFilTimes+01H
000BC5 E0                MOVX    A,@DPTR
000BC6 940C              SUBB    A,#0CH
000BC8 904DF5            MOV     DPTR,#R_AdFilTimes
000BCB E0                MOVX    A,@DPTR
000BCC 9400              SUBB    A,#00H
000BCE 401C              JC      ?C0143?CS_SCALE_PROC
 1033: 				{
 1034: 			CS_Scale_ZeroProc(SetPowerOnZero,R_AD_BUF);	
000BD0 7F05              MOV     R7,#05H
000BD2 1212F1            LCALL   _CS_Scale_ZeroProc
 1035: 			CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000BD5 904DF9            MOV     DPTR,#R_AD_BUF
000BD8 E0                MOVX    A,@DPTR
000BD9 FC                MOV     R4,A
000BDA A3                INC     DPTR
000BDB E0                MOVX    A,@DPTR
000BDC FD                MOV     R5,A
000BDD 7F01              MOV     R7,#01H
000BDF 1230D4            LCALL   _CS_Scale_AdcFilter
 1036: 			CS_SoftTimer(ResetSoftTimer);
000BE2 7F02              MOV     R7,#02H
000BE4 F115              ACALL   _CS_SoftTimer
 1037: 			R_CaliState = CS_CaliState_ShowCal1;
000BE6 904CB1            MOV     DPTR,#R_CaliState
000BE9 7401              MOV     A,#01H
000BEB F0                MOVX    @DPTR,A
 1038: 				}
000BEC         ?C0143?CS_SCALE_PROC:
 1039: 		CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_BUF);
000BEC 904DF9            MOV     DPTR,#R_AD_BUF
000BEF E0                MOVX    A,@DPTR
000BF0 FC                MOV     R4,A
000BF1 A3                INC     DPTR
000BF2 E0                MOVX    A,@DPTR
000BF3 FD                MOV     R5,A
000BF4 7F21              MOV     R7,#021H
000BF6 1215FA            LCALL   _CS_ScaleDisplay_FreshBuf
 1040: 		}
000BF9         ?C0142?CS_SCALE_PROC:
 1041: 	
 1042: 	if(R_CaliState == CS_CaliState_ShowCal1)
000BF9 904CB1            MOV     DPTR,#R_CaliState
000BFC E0                MOVX    A,@DPTR
000BFD B40118            CJNE    A,#01H,?C0144?CS_SCALE_PROC
 1043: 		{
 1044: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 	
000C00 7F01              MOV     R7,#01H
000C02 F115              ACALL   _CS_SoftTimer
000C04 EF                MOV     A,R7
000C05 D3                SETB    C
000C06 94C8              SUBB    A,#0C8H
000C08 4006              JC      ?C0145?CS_SCALE_PROC
 1045: 			R_CaliState = CS_CaliState_GetCal1;
000C0A 904CB1            MOV     DPTR,#R_CaliState
000C0D 7402              MOV     A,#02H
000C0F F0                MOVX    @DPTR,A
000C10         ?C0145?CS_SCALE_PROC:
 1046: 		CS_ScaleDisplay_FreshBuf(DisplayCal1,0);
000C10 E4                CLR     A
000C11 FD                MOV     R5,A
000C12 FC                MOV     R4,A
000C13 7F81              MOV     R7,#081H
000C15 1215FA            LCALL   _CS_ScaleDisplay_FreshBuf
 1047: 		}
000C18         ?C0144?CS_SCALE_PROC:
 1048: 
 1049: 	if(R_CaliState==CS_CaliState_GetCal1)
000C18 904CB1            MOV     DPTR,#R_CaliState
000C1B E0                MOVX    A,@DPTR
000C1C 6402              XRL     A,#02H
000C1E 6002              JZ      $ + 4H
000C20 81D9              AJMP    ?C0146?CS_SCALE_PROC
 1050: 		{	
 1051: 			R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);	
000C22 FD                MOV     R5,A
000C23 FC                MOV     R4,A
000C24 FF                MOV     R7,A
000C25 1212F1            LCALL   _CS_Scale_ZeroProc
000C28 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000C2B EE                MOV     A,R6
000C2C F0                MOVX    @DPTR,A
000C2D A3                INC     DPTR
000C2E EF                MOV     A,R7
000C2F F0                MOVX    @DPTR,A
 1052: 			R_AD_CaliDot1 = R_AD_BUF - R_AD_PowerOnZero;
000C30 C3                CLR     C
000C31 904DFA            MOV     DPTR,#R_AD_BUF+01H
000C34 E0                MOVX    A,@DPTR
000C35 9F                SUBB    A,R7
000C36 FF                MOV     R7,A
000C37 904DF9            MOV     DPTR,#R_AD_BUF
000C3A E0                MOVX    A,@DPTR
000C3B 9E                SUBB    A,R6
000C3C FE                MOV     R6,A
000C3D 904CAB            MOV     DPTR,#R_AD_CaliDot1
000C40 F0                MOVX    @DPTR,A
000C41 A3                INC     DPTR
000C42 EF                MOV     A,R7
000C43 F0                MOVX    @DPTR,A
 1053: 				
 1054: 			if((R_AD_CaliDot1 < R_OpenWeight_Ad)||(R_AD_BUF < R_AD_PowerOnZero))
000C44 D3                SETB    C
000C45 904CB3            MOV     DPTR,#R_OpenWeight_Ad+01H
000C48 E0                MOVX    A,@DPTR
000C49 9F                SUBB    A,R7
000C4A 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000C4D E0                MOVX    A,@DPTR
000C4E 9E                SUBB    A,R6
000C4F 5015              JNC     ?C0148?CS_SCALE_PROC
000C51 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000C54 E0                MOVX    A,@DPTR
000C55 FE                MOV     R6,A
000C56 A3                INC     DPTR
000C57 E0                MOVX    A,@DPTR
000C58 FF                MOV     R7,A
000C59 C3                CLR     C
000C5A 904DFA            MOV     DPTR,#R_AD_BUF+01H
000C5D E0                MOVX    A,@DPTR
000C5E 9F                SUBB    A,R7
000C5F 904DF9            MOV     DPTR,#R_AD_BUF
000C62 E0                MOVX    A,@DPTR
000C63 9E                SUBB    A,R6
000C64 5032              JNC     ?C0147?CS_SCALE_PROC
000C66         ?C0148?CS_SCALE_PROC:
 1055: 				{
 1056: 				if(R_AdFilTimes>=CS_Cali_Steadytimes)
000C66 C3                CLR     C
000C67 904DF6            MOV     DPTR,#R_AdFilTimes+01H
000C6A E0                MOVX    A,@DPTR
000C6B 940C              SUBB    A,#0CH
000C6D 904DF5            MOV     DPTR,#R_AdFilTimes
000C70 E0                MOVX    A,@DPTR
000C71 9400              SUBB    A,#00H
000C73 401A              JC      ?C0149?CS_SCALE_PROC
 1057: 					{
 1058: 					CS_Scale_ZeroProc(SetPowerOnZero,R_AD_BUF);	
000C75 904DF9            MOV     DPTR,#R_AD_BUF
000C78 E0                MOVX    A,@DPTR
000C79 FC                MOV     R4,A
000C7A A3                INC     DPTR
000C7B E0                MOVX    A,@DPTR
000C7C FD                MOV     R5,A
000C7D 7F05              MOV     R7,#05H
000C7F 1212F1            LCALL   _CS_Scale_ZeroProc
 1059: 					CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000C82 904DF9            MOV     DPTR,#R_AD_BUF
000C85 E0                MOVX    A,@DPTR
000C86 FC                MOV     R4,A
000C87 A3                INC     DPTR
000C88 E0                MOVX    A,@DPTR
000C89 FD                MOV     R5,A
000C8A 7F01              MOV     R7,#01H
000C8C 1230D4            LCALL   _CS_Scale_AdcFilter
 1060: 					}
000C8F         ?C0149?CS_SCALE_PROC:
 1061: 				R_AD_CaliDot1 = 0;
000C8F E4                CLR     A
000C90 904CAB            MOV     DPTR,#R_AD_CaliDot1
000C93 F0                MOVX    @DPTR,A
000C94 A3                INC     DPTR
000C95 F0                MOVX    @DPTR,A
 1062: 				}
000C96 8034              SJMP    ?C0150?CS_SCALE_PROC
000C98         ?C0147?CS_SCALE_PROC:
 1063: 			else
 1064: 				{
 1065: 				if((R_AD_CaliDot1> 750)&&(R_AdFilTimes>=CS_Cali_Steadytimes))
000C98 D3                SETB    C
000C99 904CAC            MOV     DPTR,#R_AD_CaliDot1+01H
000C9C E0                MOVX    A,@DPTR
000C9D 94EE              SUBB    A,#0EEH
000C9F 904CAB            MOV     DPTR,#R_AD_CaliDot1
000CA2 E0                MOVX    A,@DPTR
000CA3 9402              SUBB    A,#02H
000CA5 4025              JC      ?C0150?CS_SCALE_PROC
000CA7 904DF6            MOV     DPTR,#R_AdFilTimes+01H
000CAA E0                MOVX    A,@DPTR
000CAB 940C              SUBB    A,#0CH
000CAD 904DF5            MOV     DPTR,#R_AdFilTimes
000CB0 E0                MOVX    A,@DPTR
000CB1 9400              SUBB    A,#00H
000CB3 4017              JC      ?C0150?CS_SCALE_PROC
 1066: 					{				
 1067: 					CS_SoftTimer(ResetSoftTimer);
000CB5 7F02              MOV     R7,#02H
000CB7 F115              ACALL   _CS_SoftTimer
 1068: 					CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000CB9 904DF9            MOV     DPTR,#R_AD_BUF
000CBC E0                MOVX    A,@DPTR
000CBD FC                MOV     R4,A
000CBE A3                INC     DPTR
000CBF E0                MOVX    A,@DPTR
000CC0 FD                MOV     R5,A
000CC1 7F01              MOV     R7,#01H
000CC3 1230D4            LCALL   _CS_Scale_AdcFilter
 1069: 					R_CaliState = CS_CaliState_ShowCal2;
000CC6 904CB1            MOV     DPTR,#R_CaliState
000CC9 7403              MOV     A,#03H
000CCB F0                MOVX    @DPTR,A
 1070: 					}
 1071: 				}
000CCC         ?C0150?CS_SCALE_PROC:
 1072: 			CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_CaliDot1);
000CCC 904CAB            MOV     DPTR,#R_AD_CaliDot1
000CCF E0                MOVX    A,@DPTR
000CD0 FC                MOV     R4,A
000CD1 A3                INC     DPTR
000CD2 E0                MOVX    A,@DPTR
000CD3 FD                MOV     R5,A
000CD4 7F21              MOV     R7,#021H
000CD6 1215FA            LCALL   _CS_ScaleDisplay_FreshBuf
 1073: 			
 1074: 		}
000CD9         ?C0146?CS_SCALE_PROC:
 1075: 
 1076: 	if(R_CaliState == CS_CaliState_ShowCal2)
000CD9 904CB1            MOV     DPTR,#R_CaliState
000CDC E0                MOVX    A,@DPTR
000CDD B40318            CJNE    A,#03H,?C0152?CS_SCALE_PROC
 1077: 		{
 1078: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 	
000CE0 7F01              MOV     R7,#01H
000CE2 F115              ACALL   _CS_SoftTimer
000CE4 EF                MOV     A,R7
000CE5 D3                SETB    C
000CE6 94C8              SUBB    A,#0C8H
000CE8 4006              JC      ?C0153?CS_SCALE_PROC
 1079: 			R_CaliState = CS_CaliState_GetCal2;
000CEA 904CB1            MOV     DPTR,#R_CaliState
000CED 7404              MOV     A,#04H
000CEF F0                MOVX    @DPTR,A
000CF0         ?C0153?CS_SCALE_PROC:
 1080: 		CS_ScaleDisplay_FreshBuf(DisplayCal2,0);
000CF0 E4                CLR     A
000CF1 FD                MOV     R5,A
000CF2 FC                MOV     R4,A
000CF3 7F82              MOV     R7,#082H
000CF5 1215FA            LCALL   _CS_ScaleDisplay_FreshBuf
 1081: 		}
000CF8         ?C0152?CS_SCALE_PROC:
 1082: 	
 1083: 	if(R_CaliState==CS_CaliState_GetCal2)
000CF8 904CB1            MOV     DPTR,#R_CaliState
000CFB E0                MOVX    A,@DPTR
000CFC 6404              XRL     A,#04H
000CFE 6002              JZ      $ + 4H
000D00 A19E              AJMP    ?C0154?CS_SCALE_PROC
 1084: 		{		
 1085: 			R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);		
000D02 FD                MOV     R5,A
000D03 FC                MOV     R4,A
000D04 FF                MOV     R7,A
000D05 1212F1            LCALL   _CS_Scale_ZeroProc
000D08 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000D0B EE                MOV     A,R6
000D0C F0                MOVX    @DPTR,A
000D0D A3                INC     DPTR
000D0E EF                MOV     A,R7
000D0F F0                MOVX    @DPTR,A
 1086: 			weight_temp = R_AD_BUF - R_AD_PowerOnZero;
000D10 C3                CLR     C
000D11 904DFA            MOV     DPTR,#R_AD_BUF+01H
000D14 E0                MOVX    A,@DPTR
000D15 9F                SUBB    A,R7
000D16 FF                MOV     R7,A
000D17 904DF9            MOV     DPTR,#R_AD_BUF
000D1A E0                MOVX    A,@DPTR
000D1B 9E                SUBB    A,R6
000D1C FE                MOV     R6,A
000D1D 904DF7            MOV     DPTR,#weight_temp
000D20 F0                MOVX    @DPTR,A
000D21 A3                INC     DPTR
000D22 EF                MOV     A,R7
000D23 F0                MOVX    @DPTR,A
 1087: 					
 1088: 			if((weight_temp < R_AD_CaliDot1)||(R_AD_BUF < R_AD_PowerOnZero))
000D24 904CAB            MOV     DPTR,#R_AD_CaliDot1
000D27 E0                MOVX    A,@DPTR
000D28 FC                MOV     R4,A
000D29 A3                INC     DPTR
000D2A E0                MOVX    A,@DPTR
000D2B FD                MOV     R5,A
000D2C D3                SETB    C
000D2D 9F                SUBB    A,R7
000D2E EC                MOV     A,R4
000D2F 9E                SUBB    A,R6
000D30 5015              JNC     ?C0156?CS_SCALE_PROC
000D32 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000D35 E0                MOVX    A,@DPTR
000D36 FE                MOV     R6,A
000D37 A3                INC     DPTR
000D38 E0                MOVX    A,@DPTR
000D39 FF                MOV     R7,A
000D3A C3                CLR     C
000D3B 904DFA            MOV     DPTR,#R_AD_BUF+01H
000D3E E0                MOVX    A,@DPTR
000D3F 9F                SUBB    A,R7
000D40 904DF9            MOV     DPTR,#R_AD_BUF
000D43 E0                MOVX    A,@DPTR
000D44 9E                SUBB    A,R6
000D45 5009              JNC     ?C0155?CS_SCALE_PROC
000D47         ?C0156?CS_SCALE_PROC:
 1089: 				{
 1090: 				R_AD_CaliDot2 = 0;
000D47 E4                CLR     A
000D48 904CAD            MOV     DPTR,#R_AD_CaliDot2
000D4B F0                MOVX    @DPTR,A
000D4C A3                INC     DPTR
000D4D F0                MOVX    @DPTR,A
 1091: 				}
000D4E 8041              SJMP    ?C0157?CS_SCALE_PROC
000D50         ?C0155?CS_SCALE_PROC:
 1092: 			else
 1093: 				{
 1094: 				R_AD_CaliDot2 = weight_temp -R_AD_CaliDot1;
000D50 C3                CLR     C
000D51 904DF8            MOV     DPTR,#weight_temp+01H
000D54 E0                MOVX    A,@DPTR
000D55 9D                SUBB    A,R5
000D56 FF                MOV     R7,A
000D57 904DF7            MOV     DPTR,#weight_temp
000D5A E0                MOVX    A,@DPTR
000D5B 9C                SUBB    A,R4
000D5C FE                MOV     R6,A
000D5D 904CAD            MOV     DPTR,#R_AD_CaliDot2
000D60 F0                MOVX    @DPTR,A
000D61 A3                INC     DPTR
000D62 EF                MOV     A,R7
000D63 F0                MOVX    @DPTR,A
 1095: 			
 1096: 				if((R_AD_CaliDot2> 750)&& (R_AdFilTimes>=CS_Cali_Steadytimes))
000D64 D3                SETB    C
000D65 94EE              SUBB    A,#0EEH
000D67 EE                MOV     A,R6
000D68 9402              SUBB    A,#02H
000D6A 4025              JC      ?C0157?CS_SCALE_PROC
000D6C 904DF6            MOV     DPTR,#R_AdFilTimes+01H
000D6F E0                MOVX    A,@DPTR
000D70 940C              SUBB    A,#0CH
000D72 904DF5            MOV     DPTR,#R_AdFilTimes
000D75 E0                MOVX    A,@DPTR
000D76 9400              SUBB    A,#00H
000D78 4017              JC      ?C0157?CS_SCALE_PROC
 1097: 					{
 1098: 					CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000D7A 904DF9            MOV     DPTR,#R_AD_BUF
000D7D E0                MOVX    A,@DPTR
000D7E FC                MOV     R4,A
000D7F A3                INC     DPTR
000D80 E0                MOVX    A,@DPTR
000D81 FD                MOV     R5,A
000D82 7F01              MOV     R7,#01H
000D84 1230D4            LCALL   _CS_Scale_AdcFilter
 1099: 					CS_SoftTimer(ResetSoftTimer);
000D87 7F02              MOV     R7,#02H
000D89 F115              ACALL   _CS_SoftTimer
 1100: 					R_CaliState = CS_CaliState_ShowCal3;
000D8B 904CB1            MOV     DPTR,#R_CaliState
000D8E 7405              MOV     A,#05H
000D90 F0                MOVX    @DPTR,A
 1101: 					}
 1102: 				}
000D91         ?C0157?CS_SCALE_PROC:
 1103: 			CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_CaliDot2);
000D91 904CAD            MOV     DPTR,#R_AD_CaliDot2
000D94 E0                MOVX    A,@DPTR
000D95 FC                MOV     R4,A
000D96 A3                INC     DPTR
000D97 E0                MOVX    A,@DPTR
000D98 FD                MOV     R5,A
000D99 7F21              MOV     R7,#021H
000D9B 1215FA            LCALL   _CS_ScaleDisplay_FreshBuf
 1104: 		}
000D9E         ?C0154?CS_SCALE_PROC:
 1105: 
 1106: 	if(R_CaliState == CS_CaliState_ShowCal3)
000D9E 904CB1            MOV     DPTR,#R_CaliState
000DA1 E0                MOVX    A,@DPTR
000DA2 B40518            CJNE    A,#05H,?C0159?CS_SCALE_PROC
 1107: 		{
 1108: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 	
000DA5 7F01              MOV     R7,#01H
000DA7 F115              ACALL   _CS_SoftTimer
000DA9 EF                MOV     A,R7
000DAA D3                SETB    C
000DAB 94C8              SUBB    A,#0C8H
000DAD 4006              JC      ?C0160?CS_SCALE_PROC
 1109: 			R_CaliState = CS_CaliState_GetCal3;
000DAF 904CB1            MOV     DPTR,#R_CaliState
000DB2 7406              MOV     A,#06H
000DB4 F0                MOVX    @DPTR,A
000DB5         ?C0160?CS_SCALE_PROC:
 1110: 		CS_ScaleDisplay_FreshBuf(DisplayCal3,0);
000DB5 E4                CLR     A
000DB6 FD                MOV     R5,A
000DB7 FC                MOV     R4,A
000DB8 7F83              MOV     R7,#083H
000DBA 1215FA            LCALL   _CS_ScaleDisplay_FreshBuf
 1111: 		}
000DBD         ?C0159?CS_SCALE_PROC:
 1112: 	
 1113: 	if(R_CaliState==CS_CaliState_GetCal3)
000DBD 904CB1            MOV     DPTR,#R_CaliState
000DC0 E0                MOVX    A,@DPTR
000DC1 6406              XRL     A,#06H
000DC3 6002              JZ      $ + 4H
000DC5 C17C              AJMP    ?C0161?CS_SCALE_PROC
 1114: 		{		
 1115: 			R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);		
000DC7 FD                MOV     R5,A
000DC8 FC                MOV     R4,A
000DC9 FF                MOV     R7,A
000DCA 1212F1            LCALL   _CS_Scale_ZeroProc
000DCD 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000DD0 EE                MOV     A,R6
000DD1 F0                MOVX    @DPTR,A
000DD2 A3                INC     DPTR
000DD3 EF                MOV     A,R7
000DD4 F0                MOVX    @DPTR,A
 1116: 			weight_temp = R_AD_BUF - R_AD_PowerOnZero;
000DD5 C3                CLR     C
000DD6 904DFA            MOV     DPTR,#R_AD_BUF+01H
000DD9 E0                MOVX    A,@DPTR
000DDA 9F                SUBB    A,R7
000DDB FF                MOV     R7,A
000DDC 904DF9            MOV     DPTR,#R_AD_BUF
000DDF E0                MOVX    A,@DPTR
000DE0 9E                SUBB    A,R6
000DE1 FE                MOV     R6,A
000DE2 904DF7            MOV     DPTR,#weight_temp
000DE5 F0                MOVX    @DPTR,A
000DE6 A3                INC     DPTR
000DE7 EF                MOV     A,R7
000DE8 F0                MOVX    @DPTR,A
 1117: 					
 1118: 			if((weight_temp < R_AD_CaliDot1)||(R_AD_BUF < R_AD_PowerOnZero))
000DE9 904CAB            MOV     DPTR,#R_AD_CaliDot1
000DEC E0                MOVX    A,@DPTR
000DED FC                MOV     R4,A
000DEE A3                INC     DPTR
000DEF E0                MOVX    A,@DPTR
000DF0 FD                MOV     R5,A
000DF1 D3                SETB    C
000DF2 9F                SUBB    A,R7
000DF3 EC                MOV     A,R4
000DF4 9E                SUBB    A,R6
000DF5 5015              JNC     ?C0163?CS_SCALE_PROC
000DF7 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000DFA E0                MOVX    A,@DPTR
000DFB FE                MOV     R6,A
000DFC A3                INC     DPTR
000DFD E0                MOVX    A,@DPTR
000DFE FF                MOV     R7,A
000DFF C3                CLR     C
000E00 904DFA            MOV     DPTR,#R_AD_BUF+01H
000E03 E0                MOVX    A,@DPTR
000E04 9F                SUBB    A,R7
000E05 904DF9            MOV     DPTR,#R_AD_BUF
000E08 E0                MOVX    A,@DPTR
000E09 9E                SUBB    A,R6
000E0A 5009              JNC     ?C0162?CS_SCALE_PROC
000E0C         ?C0163?CS_SCALE_PROC:
 1119: 				{
 1120: 				R_AD_CaliDot3 = 0;
000E0C E4                CLR     A
000E0D 904CAF            MOV     DPTR,#R_AD_CaliDot3
000E10 F0                MOVX    @DPTR,A
000E11 A3                INC     DPTR
000E12 F0                MOVX    @DPTR,A
 1121: 				}
000E13 805A              SJMP    ?C0164?CS_SCALE_PROC
000E15         ?C0162?CS_SCALE_PROC:
 1122: 			else
 1123: 				{
 1124: 				weight_temp = weight_temp -R_AD_CaliDot1;
000E15 C3                CLR     C
000E16 904DF8            MOV     DPTR,#weight_temp+01H
000E19 E0                MOVX    A,@DPTR
000E1A 9D                SUBB    A,R5
000E1B FF                MOV     R7,A
000E1C 904DF7            MOV     DPTR,#weight_temp
000E1F E0                MOVX    A,@DPTR
000E20 9C                SUBB    A,R4
000E21 FE                MOV     R6,A
000E22 F0                MOVX    @DPTR,A
000E23 A3                INC     DPTR
000E24 EF                MOV     A,R7
000E25 F0                MOVX    @DPTR,A
 1125: 
 1126: 				if(weight_temp < R_AD_CaliDot2)
000E26 904CAD            MOV     DPTR,#R_AD_CaliDot2
000E29 E0                MOVX    A,@DPTR
000E2A FC                MOV     R4,A
000E2B A3                INC     DPTR
000E2C E0                MOVX    A,@DPTR
000E2D FD                MOV     R5,A
000E2E D3                SETB    C
000E2F 9F                SUBB    A,R7
000E30 EC                MOV     A,R4
000E31 9E                SUBB    A,R6
000E32 4007              JC      ?C0165?CS_SCALE_PROC
 1127: 					{
 1128: 					R_AD_CaliDot3 = 0;
000E34 E4                CLR     A
000E35 A3                INC     DPTR
000E36 F0                MOVX    @DPTR,A
000E37 A3                INC     DPTR
000E38 F0                MOVX    @DPTR,A
 1129: 					
 1130: 					}
000E39 8034              SJMP    ?C0164?CS_SCALE_PROC
000E3B         ?C0165?CS_SCALE_PROC:
 1131: 				else
 1132: 					{
 1133: 				R_AD_CaliDot3 = weight_temp -R_AD_CaliDot2;
000E3B C3                CLR     C
000E3C 904DF8            MOV     DPTR,#weight_temp+01H
000E3F E0                MOVX    A,@DPTR
000E40 9D                SUBB    A,R5
000E41 FF                MOV     R7,A
000E42 904DF7            MOV     DPTR,#weight_temp
000E45 E0                MOVX    A,@DPTR
000E46 9C                SUBB    A,R4
000E47 FE                MOV     R6,A
000E48 904CAF            MOV     DPTR,#R_AD_CaliDot3
000E4B F0                MOVX    @DPTR,A
000E4C A3                INC     DPTR
000E4D EF                MOV     A,R7
000E4E F0                MOVX    @DPTR,A
 1134: 			
 1135: 				if((R_AD_CaliDot3> 750)&& (R_AdFilTimes>=CS_Cali_Steadytimes))
000E4F D3                SETB    C
000E50 94EE              SUBB    A,#0EEH
000E52 EE                MOV     A,R6
000E53 9402              SUBB    A,#02H
000E55 4018              JC      ?C0164?CS_SCALE_PROC
000E57 904DF6            MOV     DPTR,#R_AdFilTimes+01H
000E5A E0                MOVX    A,@DPTR
000E5B 940C              SUBB    A,#0CH
000E5D 904DF5            MOV     DPTR,#R_AdFilTimes
000E60 E0                MOVX    A,@DPTR
000E61 9400              SUBB    A,#00H
000E63 400A              JC      ?C0164?CS_SCALE_PROC
 1136: 					{
 1137: 					CS_SoftTimer(ResetSoftTimer);
000E65 7F02              MOV     R7,#02H
000E67 F115              ACALL   _CS_SoftTimer
 1138: 					R_CaliState = CS_CaliState_ShowCal4;
000E69 904CB1            MOV     DPTR,#R_CaliState
000E6C 7407              MOV     A,#07H
000E6E F0                MOVX    @DPTR,A
 1139: 					}
 1140: 					}
 1141: 				}
000E6F         ?C0164?CS_SCALE_PROC:
 1142: 			CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_CaliDot3);
000E6F 904CAF            MOV     DPTR,#R_AD_CaliDot3
000E72 E0                MOVX    A,@DPTR
000E73 FC                MOV     R4,A
000E74 A3                INC     DPTR
000E75 E0                MOVX    A,@DPTR
000E76 FD                MOV     R5,A
000E77 7F21              MOV     R7,#021H
000E79 1215FA            LCALL   _CS_ScaleDisplay_FreshBuf
 1143: 		}
000E7C         ?C0161?CS_SCALE_PROC:
 1144: 	
 1145: 	if(R_CaliState == CS_CaliState_ShowCal4)
000E7C 904CB1            MOV     DPTR,#R_CaliState
000E7F E0                MOVX    A,@DPTR
000E80 B40718            CJNE    A,#07H,?C0168?CS_SCALE_PROC
 1146: 		{
 1147: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 
000E83 7F01              MOV     R7,#01H
000E85 F115              ACALL   _CS_SoftTimer
000E87 EF                MOV     A,R7
000E88 D3                SETB    C
000E89 94C8              SUBB    A,#0C8H
000E8B 4006              JC      ?C0169?CS_SCALE_PROC
 1148: 			R_CaliState = CS_CaliState_SaveData;
000E8D 904CB1            MOV     DPTR,#R_CaliState
000E90 7408              MOV     A,#08H
000E92 F0                MOVX    @DPTR,A
000E93         ?C0169?CS_SCALE_PROC:
 1149: 		CS_ScaleDisplay_FreshBuf(DisplayCal4,0);
000E93 E4                CLR     A
000E94 FD                MOV     R5,A
000E95 FC                MOV     R4,A
000E96 7F84              MOV     R7,#084H
000E98 1215FA            LCALL   _CS_ScaleDisplay_FreshBuf
 1150: 		}
000E9B         ?C0168?CS_SCALE_PROC:
 1151: 	
 1152: 	if(R_CaliState==CS_CaliState_SaveData)
000E9B 904CB1            MOV     DPTR,#R_CaliState
000E9E E0                MOVX    A,@DPTR
000E9F 6408              XRL     A,#08H
000EA1 706E              JNZ     ?C0170?CS_SCALE_PROC
 1153: 		{
 1154: 		
 1155: 		R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);
000EA3 FD                MOV     R5,A
000EA4 FC                MOV     R4,A
000EA5 FF                MOV     R7,A
000EA6 1212F1            LCALL   _CS_Scale_ZeroProc
000EA9 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000EAC EE                MOV     A,R6
000EAD F0                MOVX    @DPTR,A
000EAE A3                INC     DPTR
000EAF EF                MOV     A,R7
000EB0 F0                MOVX    @DPTR,A
 1156: 		CS_Scale_ZeroProc(SetRunningZero,R_AD_PowerOnZero);
000EB1 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000EB4 E0                MOVX    A,@DPTR
000EB5 FC                MOV     R4,A
000EB6 A3                INC     DPTR
000EB7 E0                MOVX    A,@DPTR
000EB8 FD                MOV     R5,A
000EB9 7F06              MOV     R7,#06H
000EBB 1212F1            LCALL   _CS_Scale_ZeroProc
 1157: 		R_Scale_state = CS_Scale_state_weighting;
000EBE 904CC5            MOV     DPTR,#R_Scale_state
000EC1 7401              MOV     A,#01H
000EC3 F0                MOVX    @DPTR,A
 1158: 		R_OpenWeight_Ad	=  R_AD_CaliDot1/10;
000EC4 904CAB            MOV     DPTR,#R_AD_CaliDot1
000EC7 E0                MOVX    A,@DPTR
000EC8 FA                MOV     R2,A
000EC9 A3                INC     DPTR
000ECA E0                MOVX    A,@DPTR
000ECB 7C00              MOV     R4,#00H
000ECD 7D0A              MOV     R5,#0AH
000ECF FF                MOV     R7,A
000ED0 AE02              MOV     R6,AR2
000ED2 120173            LCALL   ?C?UIDIV
000ED5 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000ED8 EE                MOV     A,R6
000ED9 F0                MOVX    @DPTR,A
000EDA A3                INC     DPTR
000EDB EF                MOV     A,R7
000EDC F0                MOVX    @DPTR,A
 1159: 
 1160: 		/*
 1161: 		R_Debug_temp=R_AD_CaliDot2;
 1162: 		CS_ScaleDisplay_Debug();
 1163: 		while(1);
 1164: 		*/
 1165: 		
 1166: 		*(mem_sensor_buf )= HI_UINT16(R_AD_CaliDot1);
000EDD EA                MOV     A,R2
000EDE 904C08            MOV     DPTR,#04C08H
000EE1 F0                MOVX    @DPTR,A
 1167: 		*(mem_sensor_buf+1) = LO_UINT16(R_AD_CaliDot1);
000EE2 904CAB            MOV     DPTR,#R_AD_CaliDot1
000EE5 E0                MOVX    A,@DPTR
000EE6 A3                INC     DPTR
000EE7 E0                MOVX    A,@DPTR
000EE8 904C09            MOV     DPTR,#04C09H
000EEB F0                MOVX    @DPTR,A
 1168: 		*(mem_sensor_buf+2 )= HI_UINT16(R_AD_CaliDot2);
000EEC 904CAD            MOV     DPTR,#R_AD_CaliDot2
000EEF E0                MOVX    A,@DPTR
000EF0 FC                MOV     R4,A
000EF1 A3                INC     DPTR
000EF2 E0                MOVX    A,@DPTR
000EF3 FD                MOV     R5,A
000EF4 EC                MOV     A,R4
000EF5 904C0A            MOV     DPTR,#04C0AH
000EF8 F0                MOVX    @DPTR,A
 1169: 		*(mem_sensor_buf+3) = LO_UINT16(R_AD_CaliDot2);
000EF9 ED                MOV     A,R5
000EFA A3                INC     DPTR
000EFB F0                MOVX    @DPTR,A
 1170: 		*(mem_sensor_buf+4 )= HI_UINT16(R_AD_CaliDot3);
000EFC 904CAF            MOV     DPTR,#R_AD_CaliDot3
000EFF E0                MOVX    A,@DPTR
000F00 FC                MOV     R4,A
000F01 A3                INC     DPTR
000F02 E0                MOVX    A,@DPTR
000F03 FD                MOV     R5,A
000F04 EC                MOV     A,R4
000F05 904C0C            MOV     DPTR,#04C0CH
000F08 F0                MOVX    @DPTR,A
 1171: 		*(mem_sensor_buf+5) = LO_UINT16(R_AD_CaliDot3);
000F09 ED                MOV     A,R5
000F0A A3                INC     DPTR
000F0B F0                MOVX    @DPTR,A
 1172: 		SpiFlashOperator(CS_CMD_WRITE_FLASH);
000F0C 7F41              MOV     R7,#041H
000F0E 121FD5            LCALL   _SpiFlashOperator
 1173: 
 1174: 		
 1175: 
 1176: 		}
000F11         ?C0170?CS_SCALE_PROC:
 1177: 	return 0;
000F11 E4                CLR     A
000F12 FE                MOV     R6,A
000F13 FF                MOV     R7,A
 1178: 	
 1179: }
000F14 22                RET     
----- FUNCTION _CS_Scale_CaliProc (END) -------


----- FUNCTION _CS_SoftTimer (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1396: u8_t CS_SoftTimer(u8_t option)
 1397: {
;---- Variable 'option' assigned to Register 'R7' ----
 1398: 	static u8_t xdata timecount; 				//计时变量
 1399: 	static u8_t xdata B_Timeout;
 1400: 
 1401: 	if(option==ResetSoftTimer)
000F15 EF                MOV     A,R7
000F16 B40207            CJNE    A,#02H,?C0202?CS_SCALE_PROC
 1402: 		{
 1403: 		timecount=0;
000F19 E4                CLR     A
000F1A 904CB8            MOV     DPTR,#timecount
000F1D F0                MOVX    @DPTR,A
 1404: 		B_Timeout = false;
000F1E A3                INC     DPTR
000F1F F0                MOVX    @DPTR,A
 1405: 		}
000F20         ?C0202?CS_SCALE_PROC:
 1406: 
 1407: 	if(option==GetSoftTimerTime)
000F20 EF                MOV     A,R7
000F21 B40106            CJNE    A,#01H,?C0203?CS_SCALE_PROC
 1408: 		return	timecount;
000F24 904CB8            MOV     DPTR,#timecount
000F27 E0                MOVX    A,@DPTR
000F28 FF                MOV     R7,A
000F29 22                RET     
000F2A         ?C0203?CS_SCALE_PROC:
 1409: 
 1410: 	if(option==SoftTimerInc)
000F2A EF                MOV     A,R7
000F2B 700C              JNZ     ?C0205?CS_SCALE_PROC
 1411: 		{
 1412: 		if(timecount<255 ) 
000F2D 904CB8            MOV     DPTR,#timecount
000F30 E0                MOVX    A,@DPTR
000F31 C3                CLR     C
000F32 94FF              SUBB    A,#0FFH
000F34 5003              JNC     ?C0205?CS_SCALE_PROC
 1413: 		timecount++;
000F36 E0                MOVX    A,@DPTR
000F37 04                INC     A
000F38 F0                MOVX    @DPTR,A
 1414: 		}
000F39         ?C0205?CS_SCALE_PROC:
 1415: 	
 1416: 	
 1417: 	if(timecount>SoftTimerTimeOut)
000F39 904CB8            MOV     DPTR,#timecount
000F3C E0                MOVX    A,@DPTR
000F3D D3                SETB    C
000F3E 9496              SUBB    A,#096H
000F40 4004              JC      ?C0207?CS_SCALE_PROC
 1418: 		B_Timeout = true;
000F42 A3                INC     DPTR
000F43 7401              MOV     A,#01H
000F45 F0                MOVX    @DPTR,A
000F46         ?C0207?CS_SCALE_PROC:
 1419: 
 1420: 	if(option==GetIfTimeOut)
000F46 EF                MOV     A,R7
000F47 B40306            CJNE    A,#03H,?C0208?CS_SCALE_PROC
 1421: 		return	B_Timeout;
000F4A 904CB9            MOV     DPTR,#B_Timeout
000F4D E0                MOVX    A,@DPTR
000F4E FF                MOV     R7,A
000F4F 22                RET     
000F50         ?C0208?CS_SCALE_PROC:
 1422: 	
 1423: 	return 0;
000F50 7F00              MOV     R7,#00H
 1424: 
 1425: }
000F52 22                RET     
----- FUNCTION _CS_SoftTimer (END) -------


----- FUNCTION CS_Scale_ChangeUnit (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  371: void CS_Scale_ChangeUnit()
  372: {
  373: 	switch(R_Selet_Unit)
  374: 		{
000F53 904CC6            MOV     DPTR,#R_Selet_Unit
000F56 E0                MOVX    A,@DPTR
000F57 24FE              ADD     A,#0FEH
000F59 600A              JZ      ?C0040?CS_SCALE_PROC
000F5B 14                DEC     A
000F5C 700E              JNZ     ?C0041?CS_SCALE_PROC
  375: 		/*
  376: 		case CS_ScaleDisplay_L_kg:
  377: 			R_Selet_Unit=CS_ScaleDisplay_L_lb;
  378: 			break;
  379: 		case CS_ScaleDisplay_L_lb:
  380: 			R_Selet_Unit=CS_ScaleDisplay_L_jin;
  381: 			break;
  382: 		*/
  383: 		case CS_ScaleDisplay_L_jin:
000F5E         ?C0039?CS_SCALE_PROC:
  384: 			R_Selet_Unit=CS_ScaleDisplay_L_gongjin;
000F5E 904CC6            MOV     DPTR,#R_Selet_Unit
000F61 7402              MOV     A,#02H
000F63 F0                MOVX    @DPTR,A
  385: 			break;
000F64 22                RET     
  386: 		case CS_ScaleDisplay_L_gongjin:
000F65         ?C0040?CS_SCALE_PROC:
  387: 			R_Selet_Unit=CS_ScaleDisplay_L_jin;
000F65 904CC6            MOV     DPTR,#R_Selet_Unit
000F68 7403              MOV     A,#03H
000F6A F0                MOVX    @DPTR,A
  388: 			break;
000F6B 22                RET     
  389: 		default :
000F6C         ?C0041?CS_SCALE_PROC:
  390: 			R_Selet_Unit=CS_ScaleDisplay_L_gongjin;
000F6C 904CC6            MOV     DPTR,#R_Selet_Unit
000F6F 7402              MOV     A,#02H
000F71 F0                MOVX    @DPTR,A
  391: 			break;
  392: 		}
  393: }
000F72 22                RET     
----- FUNCTION CS_Scale_ChangeUnit (END) -------


----- FUNCTION CS_ScaleDisplay_SteadyFlash (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  346: void CS_ScaleDisplay_SteadyFlash(void)
  347: {	 
  348: 
  349: 	u8_t xdata R_Weight_FlashTime;
  350: 
  351: 	
  352: 	if(CS_SoftTimer(GetIfTimeOut) == false)
000F73 7F03              MOV     R7,#03H
000F75 F115              ACALL   _CS_SoftTimer
000F77 EF                MOV     A,R7
000F78 702D              JNZ     ?C0059?CS_SCALEDISPLAY
  353: 		{
  354: 		R_Weight_FlashTime = CS_SoftTimer(GetSoftTimerTime);
000F7A 7F01              MOV     R7,#01H
000F7C F115              ACALL   _CS_SoftTimer
;---- Variable 'R_Weight_FlashTime' assigned to Register 'R7' ----
  355: 		   if(R_Weight_FlashTime<30) 
000F7E EF                MOV     A,R7
000F7F C3                CLR     C
000F80 941E              SUBB    A,#01EH
000F82 5003              JNC     ?C0050?CS_SCALEDISPLAY
  356: 		   	CS_ScaleDisplay_LcdBackup();
000F84 023ACB            LJMP    CS_ScaleDisplay_LcdBackup
000F87         ?C0050?CS_SCALEDISPLAY:
  357: 		    else if(R_Weight_FlashTime<60) 
000F87 EF                MOV     A,R7
000F88 C3                CLR     C
000F89 943C              SUBB    A,#03CH
000F8B 5002              JNC     ?C0052?CS_SCALEDISPLAY
  358: 				CS_ScaleDisplay_LcdShowNoDigit();
000F8D 8019              SJMP    CS_ScaleDisplay_LcdShowNoDigit
000F8F         ?C0052?CS_SCALEDISPLAY:
  359: 		    		else if(R_Weight_FlashTime<90)
000F8F EF                MOV     A,R7
000F90 C3                CLR     C
000F91 945A              SUBB    A,#05AH
000F93 5002              JNC     ?C0054?CS_SCALEDISPLAY
  360: 					CS_ScaleDisplay_LcdRestore();
000F95 802C              SJMP    CS_ScaleDisplay_LcdRestore
000F97         ?C0054?CS_SCALEDISPLAY:
  361: 		     			else if(R_Weight_FlashTime<120) 
000F97 EF                MOV     A,R7
000F98 C3                CLR     C
000F99 9478              SUBB    A,#078H
000F9B 5002              JNC     ?C0056?CS_SCALEDISPLAY
  362: 						CS_ScaleDisplay_LcdShowNoDigit();
000F9D 8009              SJMP    CS_ScaleDisplay_LcdShowNoDigit
000F9F         ?C0056?CS_SCALEDISPLAY:
  363: 		   			 	else if(R_Weight_FlashTime<150)
000F9F EF                MOV     A,R7
000FA0 C3                CLR     C
000FA1 9496              SUBB    A,#096H
000FA3 5002              JNC     ?C0059?CS_SCALEDISPLAY
  364: 							CS_ScaleDisplay_LcdRestore();		
000FA5 F1C3              ACALL   CS_ScaleDisplay_LcdRestore
  365: 		}
  366: }
000FA7         ?C0059?CS_SCALEDISPLAY:
000FA7 22                RET     
----- FUNCTION CS_ScaleDisplay_SteadyFlash (END) -------


----- FUNCTION CS_ScaleDisplay_LcdShowNoDigit (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  307: void CS_ScaleDisplay_LcdShowNoDigit(void)
  308: {
  309: 	CS_Lcd_Send_Data[0] &= 0x0f;
  310: 	CS_Lcd_Send_Data[1] &= 0x00;
000FA8 904D28            MOV     DPTR,#CS_Lcd_Send_Data
000FAB E0                MOVX    A,@DPTR
000FAC 540F              ANL     A,#0FH
000FAE F0                MOVX    @DPTR,A
  311: 	CS_Lcd_Send_Data[2] &= 0x08;
000FAF A3                INC     DPTR
000FB0 E0                MOVX    A,@DPTR
000FB1 E4                CLR     A
000FB2 F0                MOVX    @DPTR,A
  312: 	CS_Lcd_Send_Data[3] &= 0x08;
000FB3 A3                INC     DPTR
000FB4 E0                MOVX    A,@DPTR
000FB5 5408              ANL     A,#08H
000FB7 F0                MOVX    @DPTR,A
  313: 	CS_Lcd_Send_Data[4] &= 0xf0;
000FB8 A3                INC     DPTR
000FB9 E0                MOVX    A,@DPTR
000FBA 5408              ANL     A,#08H
000FBC F0                MOVX    @DPTR,A
  314: }
000FBD A3                INC     DPTR
000FBE E0                MOVX    A,@DPTR
000FBF 54F0              ANL     A,#0F0H
000FC1 F0                MOVX    @DPTR,A
  315: 
000FC2 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdShowNoDigit (END) -------


----- FUNCTION CS_ScaleDisplay_LcdRestore (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  336: void CS_ScaleDisplay_LcdRestore(void)
  337: {
  338: 	CS_Lcd_Send_Data[0] = CS_Lcd_Send_Data_BAK[0];
  339: 	CS_Lcd_Send_Data[1] = CS_Lcd_Send_Data_BAK[1];
000FC3 904D1D            MOV     DPTR,#CS_Lcd_Send_Data_BAK
000FC6 E0                MOVX    A,@DPTR
000FC7 904D28            MOV     DPTR,#CS_Lcd_Send_Data
000FCA F0                MOVX    @DPTR,A
  340: 	CS_Lcd_Send_Data[2] = CS_Lcd_Send_Data_BAK[2];
000FCB 904D1E            MOV     DPTR,#CS_Lcd_Send_Data_BAK+01H
000FCE E0                MOVX    A,@DPTR
000FCF 904D29            MOV     DPTR,#CS_Lcd_Send_Data+01H
000FD2 F0                MOVX    @DPTR,A
  341: 	CS_Lcd_Send_Data[3] = CS_Lcd_Send_Data_BAK[3];
000FD3 904D1F            MOV     DPTR,#CS_Lcd_Send_Data_BAK+02H
000FD6 E0                MOVX    A,@DPTR
000FD7 904D2A            MOV     DPTR,#CS_Lcd_Send_Data+02H
000FDA F0                MOVX    @DPTR,A
  342: 	CS_Lcd_Send_Data[4] = CS_Lcd_Send_Data_BAK[4];
000FDB 904D20            MOV     DPTR,#CS_Lcd_Send_Data_BAK+03H
000FDE E0                MOVX    A,@DPTR
000FDF 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
000FE2 F0                MOVX    @DPTR,A
  343: }
000FE3 904D21            MOV     DPTR,#CS_Lcd_Send_Data_BAK+04H
000FE6 E0                MOVX    A,@DPTR
000FE7 904D2C            MOV     DPTR,#CS_Lcd_Send_Data+04H
000FEA F0                MOVX    @DPTR,A
  344: 
000FEB 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdRestore (END) -------


----- FUNCTION systemInit (BEGIN) -----
 FILE: 'system.c'
   69: void systemInit(void)
   70: {
   71: 	LPM_DISABLE();
   72: 	if(*mem_poweron_flag == CS_POWERON_FLAG		//poweron or reset
000FEC 9049FE            MOV     DPTR,#049FEH
000FEF E4                CLR     A
000FF0 F0                MOVX    @DPTR,A
   73: 	/*|| *mem_poweron_flag == CS_IOWAKE_FLAG*/) {		//iowake from sleep
000FF1 9049FC            MOV     DPTR,#049FCH
000FF4 E0                MOVX    A,@DPTR
000FF5 6410              XRL     A,#010H
000FF7 704F              JNZ     ?C0005?SYSTEM
   74: 		sys_state = SYS_ST_RUN;
   75: 		R_Scale_state = CS_Scale_state_init;
000FF9 904E5C            MOV     DPTR,#sys_state
000FFC 7402              MOV     A,#02H
000FFE F0                MOVX    @DPTR,A
   76: 
000FFF E4                CLR     A
001000 904CC5            MOV     DPTR,#R_Scale_state
001003 F0                MOVX    @DPTR,A
   77: 		QueueInit();
001004 123F02            LCALL   QueueInit
   78: 		//read spiflash data,save to buffer
   79: 		SpiFlashOperator(CS_CMD_READ_FLASH);
001007 7F40              MOV     R7,#040H
001009 121FD5            LCALL   _SpiFlashOperator
   80: 		bleConnStatus = BLE_STATUS_DISCONN;
00100C E4                CLR     A
00100D 904C5B            MOV     DPTR,#bleConnStatus
001010 F0                MOVX    @DPTR,A
   81: 		if(deviceInfo.registerFlag != DEVICE_REGISTERED)
001011 904C06            MOV     DPTR,#deviceInfo
001014 E0                MOVX    A,@DPTR
001015 6401              XRL     A,#01H
001017 600B              JZ      ?C0006?SYSTEM
   82: 		{
   83: 			xmemset(mem_register_buf, 0, sizeof(deviceInfo));
001019 7B0A              MOV     R3,#0AH
00101B E4                CLR     A
00101C FD                MOV     R5,A
00101D 7F0E              MOV     R7,#0EH
00101F 7E4C              MOV     R6,#04CH
001021 121F99            LCALL   _xmemset
   84: 		}
001024         ?C0006?SYSTEM:
   85: 		*(mem_le_adv_data + 13) = deviceInfo.registerFlag;
001024 904C06            MOV     DPTR,#deviceInfo
001027 E0                MOVX    A,@DPTR
001028 9043E7            MOV     DPTR,#043E7H
00102B F0                MOVX    @DPTR,A
   86: 			
   87: 		YC_UtilTimerInit();
00102C 11B9              ACALL   YC_UtilTimerInit
   88: 		//YC_UtilTimerStart(1, SoftTimer_1SCallback, &SoftTimer_1STimerID);
   89: 		YC_UtilTimerStartMs(10, SoftTimer_10mSCallback, &SoftTimer_10msTimerID);
00102E 7BFF              MOV     R3,#0FFH
001030 7A08              MOV     R2,#HIGH SoftTimer_10mSCallback
001032 79F3              MOV     R1,#LOW SoftTimer_10mSCallback
001034 904DDA            MOV     DPTR,#?_YC_UtilTimerStartMs?BYTE+05H
001037 744E              MOV     A,#HIGH SoftTimer_10msTimerID
001039 F0                MOVX    @DPTR,A
00103A A3                INC     DPTR
00103B 7441              MOV     A,#LOW SoftTimer_10msTimerID
00103D F0                MOVX    @DPTR,A
00103E 7F0A              MOV     R7,#0AH
001040 7E00              MOV     R6,#00H
001042 317C              ACALL   _YC_UtilTimerStartMs
   90: 		CS_Scale_PowerOn();	
001044 51BB              ACALL   CS_Scale_PowerOn
   91: 		
   92: 	}
001046 8036              SJMP    ?C0007?SYSTEM
001048         ?C0005?SYSTEM:
   93: 	else {	//wake from LPM mode
   94: 		if(YC_GPIOGetInputStatus(5) == 0 ||	//GPIO5, key is  down	
001048 7F05              MOV     R7,#05H
00104A 1184              ACALL   _YC_GPIOGetInputStatus
00104C 5006              JNC     ?C0009?SYSTEM
00104E 7F1B              MOV     R7,#01BH
001050 1184              ACALL   _YC_GPIOGetInputStatus
001052 4024              JC      ?C0008?SYSTEM
001054         ?C0009?SYSTEM:
   95: 		YC_GPIOGetInputStatus(27) == 0) {	//GPIO27, scale wakeup
   96: 			sys_state = SYS_ST_RUN;
001054 904E5C            MOV     DPTR,#sys_state
001057 7402              MOV     A,#02H
001059 F0                MOVX    @DPTR,A
   97: 			R_Scale_state = CS_Scale_state_standby;
00105A 904CC5            MOV     DPTR,#R_Scale_state
00105D F0                MOVX    @DPTR,A
   98: 			YC_UtilTimerInit();
00105E 11B9              ACALL   YC_UtilTimerInit
   99: 			//YC_UtilTimerStart(1, SoftTimer_1SCallback, &SoftTimer_1STimerID);
  100: 			YC_UtilTimerStartMs(10, SoftTimer_10mSCallback, &SoftTimer_10msTimerID);
001060 7BFF              MOV     R3,#0FFH
001062 7A08              MOV     R2,#HIGH SoftTimer_10mSCallback
001064 79F3              MOV     R1,#LOW SoftTimer_10mSCallback
001066 904DDA            MOV     DPTR,#?_YC_UtilTimerStartMs?BYTE+05H
001069 744E              MOV     A,#HIGH SoftTimer_10msTimerID
00106B F0                MOVX    @DPTR,A
00106C A3                INC     DPTR
00106D 7441              MOV     A,#LOW SoftTimer_10msTimerID
00106F F0                MOVX    @DPTR,A
001070 7F0A              MOV     R7,#0AH
001072 7E00              MOV     R6,#00H
001074 317C              ACALL   _YC_UtilTimerStartMs
  101: 			//CS_Scale_PowerOn();	
  102: 
  103: 			//R_Debug_temp=R_Scale_state;
  104: 			//CS_ScaleDisplay_Debug();
  105: 			//while(1);
  106: 		}
001076 8006              SJMP    ?C0007?SYSTEM
001078         ?C0008?SYSTEM:
  107: 		else {	//remote bluetooth wakeup
  108: 			sys_state = SYS_ST_IDLE;
001078 904E5C            MOV     DPTR,#sys_state
00107B 7401              MOV     A,#01H
00107D F0                MOVX    @DPTR,A
  109: 		}
  110: 	}
00107E         ?C0007?SYSTEM:
  111: 	*mem_poweron_flag = CS_NULL_FLAG;
00107E 9049FC            MOV     DPTR,#049FCH
001081 E4                CLR     A
001082 F0                MOVX    @DPTR,A
  112: }
001083 22                RET     
----- FUNCTION systemInit (END) -------


----- FUNCTION _YC_GPIOGetInputStatus (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  140: bool YC_GPIOGetInputStatus(u8_t gpio_num)
  141: {
;---- Variable 'gpio_num' assigned to Register 'R7' ----
  142: 	u8_t queue, group;
  143: 
  144: 	queue = (gpio_num & 7);
001084 EF                MOV     A,R7
001085 5407              ANL     A,#07H
001087 FE                MOV     R6,A
;---- Variable 'queue' assigned to Register 'R6' ----
  145: 	group = (gpio_num>>3 & 3);
001088 EF                MOV     A,R7
001089 13                RRC     A
00108A 13                RRC     A
00108B 13                RRC     A
00108C 5403              ANL     A,#03H
00108E FF                MOV     R7,A
;---- Variable 'group' assigned to Register 'R7' ----
  146: 
  147: 	return (REG_GPIO_IN(group) & (1<<queue));
00108F 241C              ADD     A,#01CH
001091 FD                MOV     R5,A
001092 E4                CLR     A
001093 3481              ADDC    A,#081H
001095 8D82              MOV     DPL,R5
001097 F583              MOV     DPH,A
001099 E0                MOVX    A,@DPTR
00109A FD                MOV     R5,A
00109B 7C00              MOV     R4,#00H
00109D AF06              MOV     R7,AR6
00109F 7401              MOV     A,#01H
0010A1 7E00              MOV     R6,#00H
0010A3 A807              MOV     R0,AR7
0010A5 08                INC     R0
0010A6 8005              SJMP    ?C0021?YC_PERIPHERAL
0010A8         ?C0020?YC_PERIPHERAL:
0010A8 C3                CLR     C
0010A9 33                RLC     A
0010AA CE                XCH     A,R6
0010AB 33                RLC     A
0010AC CE                XCH     A,R6
0010AD         ?C0021?YC_PERIPHERAL:
0010AD D8F9              DJNZ    R0,?C0020?YC_PERIPHERAL
0010AF FF                MOV     R7,A
0010B0 EE                MOV     A,R6
0010B1 5C                ANL     A,R4
0010B2 FE                MOV     R6,A
0010B3 EF                MOV     A,R7
0010B4 5D                ANL     A,R5
0010B5 4E                ORL     A,R6
0010B6 24FF              ADD     A,#0FFH
  148: }
0010B8 22                RET     
----- FUNCTION _YC_GPIOGetInputStatus (END) -------


----- FUNCTION YC_UtilTimerInit (BEGIN) -----
 FILE: 'YC_Sys.c'
    8: void YC_UtilTimerInit(void)
    9: {
   10: 	u8_t i;
   11: 	
   12: 	YC_UtilTimer.timer_flages = 0;
0010B9 E4                CLR     A
0010BA 904CDB            MOV     DPTR,#YC_UtilTimer
0010BD F0                MOVX    @DPTR,A
   13: 	YC_UtilTimer.last_timer = YC_CLK_N;
0010BE 908101            MOV     DPTR,#08101H
0010C1 E0                MOVX    A,@DPTR
0010C2 FF                MOV     R7,A
0010C3 E4                CLR     A
0010C4 FC                MOV     R4,A
0010C5 FD                MOV     R5,A
0010C6 FE                MOV     R6,A
0010C7 7808              MOV     R0,#08H
0010C9 12031F            LCALL   ?C?LSHL
0010CC A804              MOV     R0,AR4
0010CE A905              MOV     R1,AR5
0010D0 AA06              MOV     R2,AR6
0010D2 AB07              MOV     R3,AR7
0010D4 908100            MOV     DPTR,#08100H
0010D7 E0                MOVX    A,@DPTR
0010D8 FF                MOV     R7,A
0010D9 E4                CLR     A
0010DA EB                MOV     A,R3
0010DB 4F                ORL     A,R7
0010DC FF                MOV     R7,A
0010DD EA                MOV     A,R2
0010DE FE                MOV     R6,A
0010DF E9                MOV     A,R1
0010E0 FD                MOV     R5,A
0010E1 E8                MOV     A,R0
0010E2 FC                MOV     R4,A
0010E3 C004              PUSH    AR4
0010E5 C005              PUSH    AR5
0010E7 C006              PUSH    AR6
0010E9 C007              PUSH    AR7
0010EB 908102            MOV     DPTR,#08102H
0010EE E0                MOVX    A,@DPTR
0010EF FF                MOV     R7,A
0010F0 E4                CLR     A
0010F1 FC                MOV     R4,A
0010F2 FD                MOV     R5,A
0010F3 FE                MOV     R6,A
0010F4 7810              MOV     R0,#010H
0010F6 12031F            LCALL   ?C?LSHL
0010F9 D003              POP     AR3
0010FB D002              POP     AR2
0010FD D001              POP     AR1
0010FF D000              POP     AR0
001101 EF                MOV     A,R7
001102 4B                ORL     A,R3
001103 FF                MOV     R7,A
001104 EE                MOV     A,R6
001105 4A                ORL     A,R2
001106 FE                MOV     R6,A
001107 ED                MOV     A,R5
001108 49                ORL     A,R1
001109 FD                MOV     R5,A
00110A EC                MOV     A,R4
00110B 48                ORL     A,R0
00110C FC                MOV     R4,A
00110D C004              PUSH    AR4
00110F C005              PUSH    AR5
001111 C006              PUSH    AR6
001113 C007              PUSH    AR7
001115 A3                INC     DPTR
001116 E0                MOVX    A,@DPTR
001117 FF                MOV     R7,A
001118 E4                CLR     A
001119 FC                MOV     R4,A
00111A FD                MOV     R5,A
00111B FE                MOV     R6,A
00111C 7818              MOV     R0,#018H
00111E 12031F            LCALL   ?C?LSHL
001121 D003              POP     AR3
001123 D002              POP     AR2
001125 D001              POP     AR1
001127 D000              POP     AR0
001129 EF                MOV     A,R7
00112A 4B                ORL     A,R3
00112B FF                MOV     R7,A
00112C EE                MOV     A,R6
00112D 4A                ORL     A,R2
00112E FE                MOV     R6,A
00112F ED                MOV     A,R5
001130 49                ORL     A,R1
001131 FD                MOV     R5,A
001132 EC                MOV     A,R4
001133 48                ORL     A,R0
001134 FC                MOV     R4,A
001135 904D14            MOV     DPTR,#YC_UtilTimer+039H
001138 120332            LCALL   ?C?LSTXDATA
   14: 	for(i = 0; i < YC_UTIL_TIMER_NUM; i++){
00113B E4                CLR     A
00113C 904E59            MOV     DPTR,#i
00113F F0                MOVX    @DPTR,A
001140         ?C0001?YC_SYS:
001140 904E59            MOV     DPTR,#i
001143 E0                MOVX    A,@DPTR
001144 FF                MOV     R7,A
001145 C3                CLR     C
001146 9408              SUBB    A,#08H
001148 5031              JNC     ?C0004?YC_SYS
   15: 		YC_UtilTimer.callback[i] = 0;
00114A EF                MOV     A,R7
00114B 75F003            MOV     B,#03H
00114E A4                MUL     AB
00114F 24DC              ADD     A,#LOW YC_UtilTimer+01H
001151 F582              MOV     DPL,A
001153 E4                CLR     A
001154 344C              ADDC    A,#HIGH YC_UtilTimer+01H
001156 F583              MOV     DPH,A
001158 E4                CLR     A
001159 F0                MOVX    @DPTR,A
00115A A3                INC     DPTR
00115B F0                MOVX    @DPTR,A
00115C A3                INC     DPTR
00115D F0                MOVX    @DPTR,A
   16: 		YC_UtilTimer.timer_end[i] = 0;
00115E EF                MOV     A,R7
00115F 25E0              ADD     A,ACC
001161 25E0              ADD     A,ACC
001163 24F4              ADD     A,#LOW YC_UtilTimer+019H
001165 F582              MOV     DPL,A
001167 E4                CLR     A
001168 344C              ADDC    A,#HIGH YC_UtilTimer+019H
00116A F583              MOV     DPH,A
00116C 12033E            LCALL   ?C?LSTKXDATA
00116F 00                DB      00H
001170 00                DB      00H
001171 00                DB      00H
001172 00                DB      00H
   17: 	}
001173 904E59            MOV     DPTR,#i
001176 E0                MOVX    A,@DPTR
001177 04                INC     A
001178 F0                MOVX    @DPTR,A
001179 80C5              SJMP    ?C0001?YC_SYS
   18: 	return;
   19: }
00117B         ?C0004?YC_SYS:
00117B 22                RET     
----- FUNCTION YC_UtilTimerInit (END) -------


----- FUNCTION _YC_UtilTimerStartMs (BEGIN) -----
 FILE: 'YC_Sys.c'
   44: bool YC_UtilTimerStartMs(u16_t time_in_ms, p_TimerCallback callback, pxbyte timer_id)
   45: {
00117C 904DD5            MOV     DPTR,#time_in_ms
00117F EE                MOV     A,R6
001180 F0                MOVX    @DPTR,A
001181 A3                INC     DPTR
001182 EF                MOV     A,R7
001183 F0                MOVX    @DPTR,A
;---- Variable 'callback' assigned to Register 'R1/R2/R3' ----
   46: 	u8_t i = 0;
   47: 	
001184 E4                CLR     A
001185 904DDC            MOV     DPTR,#i
001188 F0                MOVX    @DPTR,A
   48: 	//do we have enough timers?
   49: 	if(YC_UtilTimer.timer_flages == 0xff){
001189 904CDB            MOV     DPTR,#YC_UtilTimer
00118C E0                MOVX    A,@DPTR
00118D B4FF02            CJNE    A,#0FFH,?C0007?YC_SYS
   50: 		return false;
001190 C3                CLR     C
001191 22                RET     
   51: 	}
001192         ?C0007?YC_SYS:
   52: 	while(i < YC_UTIL_TIMER_NUM){
001192 904DDC            MOV     DPTR,#i
001195 E0                MOVX    A,@DPTR
001196 FF                MOV     R7,A
001197 C3                CLR     C
001198 9408              SUBB    A,#08H
00119A 502D              JNC     ?C0008?YC_SYS
   53: 		if(!((YC_UtilTimer.timer_flages >> i) & 1)){
00119C 904CDB            MOV     DPTR,#YC_UtilTimer
00119F E0                MOVX    A,@DPTR
0011A0 FE                MOV     R6,A
0011A1 A807              MOV     R0,AR7
0011A3 08                INC     R0
0011A4 8002              SJMP    ?C0022?YC_SYS
0011A6         ?C0021?YC_SYS:
0011A6 C3                CLR     C
0011A7 13                RRC     A
0011A8         ?C0022?YC_SYS:
0011A8 D8FC              DJNZ    R0,?C0021?YC_SYS
0011AA 20E014            JB      ACC.0,?C0009?YC_SYS
   54: 			if(timer_id)
0011AD 904DDA            MOV     DPTR,#timer_id
0011B0 E0                MOVX    A,@DPTR
0011B1 FE                MOV     R6,A
0011B2 A3                INC     DPTR
0011B3 E0                MOVX    A,@DPTR
0011B4 FF                MOV     R7,A
0011B5 4E                ORL     A,R6
0011B6 6011              JZ      ?C0008?YC_SYS
   55: 				*timer_id = i;
0011B8 A3                INC     DPTR
0011B9 E0                MOVX    A,@DPTR
0011BA 8F82              MOV     DPL,R7
0011BC 8E83              MOV     DPH,R6
0011BE F0                MOVX    @DPTR,A
   56: 			break;
0011BF 8008              SJMP    ?C0008?YC_SYS
   57: 		}
0011C1         ?C0009?YC_SYS:
   58: 		++i;
0011C1 904DDC            MOV     DPTR,#i
0011C4 E0                MOVX    A,@DPTR
0011C5 04                INC     A
0011C6 F0                MOVX    @DPTR,A
   59: 	}
0011C7 80C9              SJMP    ?C0007?YC_SYS
0011C9         ?C0008?YC_SYS:
   60: 	YC_UtilTimer.timer_flages |= 1 << i;
0011C9 904CDB            MOV     DPTR,#YC_UtilTimer
0011CC E0                MOVX    A,@DPTR
0011CD FF                MOV     R7,A
0011CE 904DDC            MOV     DPTR,#i
0011D1 E0                MOVX    A,@DPTR
0011D2 FE                MOV     R6,A
0011D3 7401              MOV     A,#01H
0011D5 A806              MOV     R0,AR6
0011D7 08                INC     R0
0011D8 8002              SJMP    ?C0024?YC_SYS
0011DA         ?C0023?YC_SYS:
0011DA C3                CLR     C
0011DB 33                RLC     A
0011DC         ?C0024?YC_SYS:
0011DC D8FC              DJNZ    R0,?C0023?YC_SYS
0011DE 4F                ORL     A,R7
0011DF 904CDB            MOV     DPTR,#YC_UtilTimer
0011E2 F0                MOVX    @DPTR,A
   61: 	YC_UtilTimer.callback[i] = callback;
0011E3 EE                MOV     A,R6
0011E4 75F003            MOV     B,#03H
0011E7 A4                MUL     AB
0011E8 24DC              ADD     A,#LOW YC_UtilTimer+01H
0011EA F582              MOV     DPL,A
0011EC E4                CLR     A
0011ED 344C              ADDC    A,#HIGH YC_UtilTimer+01H
0011EF F583              MOV     DPH,A
0011F1 EB                MOV     A,R3
0011F2 F0                MOVX    @DPTR,A
0011F3 A3                INC     DPTR
0011F4 EA                MOV     A,R2
0011F5 F0                MOVX    @DPTR,A
0011F6 A3                INC     DPTR
0011F7 E9                MOV     A,R1
0011F8 F0                MOVX    @DPTR,A
   62: 	YC_UtilTimer.timer_end[i] = YC_CLK_N + ((u32_t)time_in_ms << 4)/5;
0011F9 908101            MOV     DPTR,#08101H
0011FC E0                MOVX    A,@DPTR
0011FD FF                MOV     R7,A
0011FE E4                CLR     A
0011FF FC                MOV     R4,A
001200 FD                MOV     R5,A
001201 FE                MOV     R6,A
001202 7808              MOV     R0,#08H
001204 12031F            LCALL   ?C?LSHL
001207 A804              MOV     R0,AR4
001209 A905              MOV     R1,AR5
00120B AA06              MOV     R2,AR6
00120D AB07              MOV     R3,AR7
00120F 908100            MOV     DPTR,#08100H
001212 E0                MOVX    A,@DPTR
001213 FF                MOV     R7,A
001214 E4                CLR     A
001215 EB                MOV     A,R3
001216 4F                ORL     A,R7
001217 FF                MOV     R7,A
001218 EA                MOV     A,R2
001219 FE                MOV     R6,A
00121A E9                MOV     A,R1
00121B FD                MOV     R5,A
00121C E8                MOV     A,R0
00121D FC                MOV     R4,A
00121E C004              PUSH    AR4
001220 C005              PUSH    AR5
001222 C006              PUSH    AR6
001224 C007              PUSH    AR7
001226 908102            MOV     DPTR,#08102H
001229 E0                MOVX    A,@DPTR
00122A FF                MOV     R7,A
00122B E4                CLR     A
00122C FC                MOV     R4,A
00122D FD                MOV     R5,A
00122E FE                MOV     R6,A
00122F 7810              MOV     R0,#010H
001231 12031F            LCALL   ?C?LSHL
001234 D003              POP     AR3
001236 D002              POP     AR2
001238 D001              POP     AR1
00123A D000              POP     AR0
00123C EF                MOV     A,R7
00123D 4B                ORL     A,R3
00123E FF                MOV     R7,A
00123F EE                MOV     A,R6
001240 4A                ORL     A,R2
001241 FE                MOV     R6,A
001242 ED                MOV     A,R5
001243 49                ORL     A,R1
001244 FD                MOV     R5,A
001245 EC                MOV     A,R4
001246 48                ORL     A,R0
001247 FC                MOV     R4,A
001248 C004              PUSH    AR4
00124A C005              PUSH    AR5
00124C C006              PUSH    AR6
00124E C007              PUSH    AR7
001250 A3                INC     DPTR
001251 E0                MOVX    A,@DPTR
001252 FF                MOV     R7,A
001253 E4                CLR     A
001254 FC                MOV     R4,A
001255 FD                MOV     R5,A
001256 FE                MOV     R6,A
001257 7818              MOV     R0,#018H
001259 12031F            LCALL   ?C?LSHL
00125C D003              POP     AR3
00125E D002              POP     AR2
001260 D001              POP     AR1
001262 D000              POP     AR0
001264 EF                MOV     A,R7
001265 4B                ORL     A,R3
001266 FF                MOV     R7,A
001267 EE                MOV     A,R6
001268 4A                ORL     A,R2
001269 FE                MOV     R6,A
00126A ED                MOV     A,R5
00126B 49                ORL     A,R1
00126C FD                MOV     R5,A
00126D EC                MOV     A,R4
00126E 48                ORL     A,R0
00126F FC                MOV     R4,A
001270 C004              PUSH    AR4
001272 C005              PUSH    AR5
001274 C006              PUSH    AR6
001276 C007              PUSH    AR7
001278 904DD5            MOV     DPTR,#time_in_ms
00127B E0                MOVX    A,@DPTR
00127C FE                MOV     R6,A
00127D A3                INC     DPTR
00127E E0                MOVX    A,@DPTR
00127F FF                MOV     R7,A
001280 E4                CLR     A
001281 FC                MOV     R4,A
001282 FD                MOV     R5,A
001283 7804              MOV     R0,#04H
001285 12031F            LCALL   ?C?LSHL
001288 E4                CLR     A
001289 7B05              MOV     R3,#05H
00128B FA                MOV     R2,A
00128C F9                MOV     R1,A
00128D F8                MOV     R0,A
00128E 120269            LCALL   ?C?ULDIV
001291 D003              POP     AR3
001293 D002              POP     AR2
001295 D001              POP     AR1
001297 D000              POP     AR0
001299 EF                MOV     A,R7
00129A 2B                ADD     A,R3
00129B FF                MOV     R7,A
00129C EE                MOV     A,R6
00129D 3A                ADDC    A,R2
00129E FE                MOV     R6,A
00129F ED                MOV     A,R5
0012A0 39                ADDC    A,R1
0012A1 FD                MOV     R5,A
0012A2 EC                MOV     A,R4
0012A3 38                ADDC    A,R0
0012A4 FC                MOV     R4,A
0012A5 904DDC            MOV     DPTR,#i
0012A8 E0                MOVX    A,@DPTR
0012A9 25E0              ADD     A,ACC
0012AB 25E0              ADD     A,ACC
0012AD 24F4              ADD     A,#LOW YC_UtilTimer+019H
0012AF F582              MOV     DPL,A
0012B1 E4                CLR     A
0012B2 344C              ADDC    A,#HIGH YC_UtilTimer+019H
0012B4 F583              MOV     DPH,A
0012B6 120332            LCALL   ?C?LSTXDATA
   63: 	return true;
0012B9 D3                SETB    C
   64: }
0012BA 22                RET     
----- FUNCTION _YC_UtilTimerStartMs (END) -------


----- FUNCTION CS_Scale_PowerOn (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  173: void CS_Scale_PowerOn(void)
  174: {
  175: 	
  176: 	if(R_Scale_state == CS_Scale_state_init)
0012BB 904CC5            MOV     DPTR,#R_Scale_state
0012BE E0                MOVX    A,@DPTR
0012BF 702F              JNZ     ?C0012?CS_SCALE_PROC
  177: 		{
  178: 		B_Weight_AdOk = false;
0012C1 904CD7            MOV     DPTR,#B_Weight_AdOk
0012C4 F0                MOVX    @DPTR,A
  179: 		R_Weight_Com_Coo.pre =CS_CommTo1186_Null;	
0012C5 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
0012C8 F0                MOVX    @DPTR,A
  180: 		R_Weight_Com_Coo.now = CS_CommTo1186_Null;	
0012C9 904D55            MOV     DPTR,#R_Weight_Com_Coo
0012CC F0                MOVX    @DPTR,A
  181: 		//R_Scale_state =	CS_Scale_state_weighting;
  182: 		R_Selet_Unit = CS_ScaleDisplay_L_gongjin;
0012CD 904CC6            MOV     DPTR,#R_Selet_Unit
0012D0 7402              MOV     A,#02H
0012D2 F0                MOVX    @DPTR,A
  183: 
  184: 		R_Debug_temp = 0;
0012D3 E4                CLR     A
0012D4 A3                INC     DPTR
0012D5 F0                MOVX    @DPTR,A
0012D6 A3                INC     DPTR
0012D7 F0                MOVX    @DPTR,A
  185: 		B_Debug_Test =false;
0012D8 C201              CLR     B_Debug_Test
  186: 		
  187: 		CS_Scale_CaliProc(CaliProcSetCali);		
0012DA 7F01              MOV     R7,#01H
0012DC 120A38            LCALL   _CS_Scale_CaliProc
  188: 		CS_Scale_ZeroProc(ZeroProcReset,0);	
0012DF E4                CLR     A
0012E0 FD                MOV     R5,A
0012E1 FC                MOV     R4,A
0012E2 7F04              MOV     R7,#04H
0012E4 51F1              ACALL   _CS_Scale_ZeroProc
  189: 		
  190: 		CS_Scale_TimeOutProc(CS_Reset_AllTime);
0012E6 7F06              MOV     R7,#06H
0012E8 122BBB            LCALL   _CS_Scale_TimeOutProc
  191: 		CS_Scale_PowerOnProc(1);
0012EB D200              SETB    ?CS_Scale_PowerOnProc?BIT
0012ED 122CE5            LCALL   CS_Scale_PowerOnProc
  192: 		}
  193: }
0012F0         ?C0012?CS_SCALE_PROC:
0012F0 22                RET     
----- FUNCTION CS_Scale_PowerOn (END) -------


----- FUNCTION _CS_Scale_ZeroProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  397: u16_t  CS_Scale_ZeroProc(u8_t option,u16_t setdata)
  398: {
;---- Variable 'setdata' assigned to Register 'R4/R5' ----
0012F1 904DED            MOV     DPTR,#option
0012F4 EF                MOV     A,R7
0012F5 F0                MOVX    @DPTR,A
  399: 	static	u8_t	   xdata R_Weight_GetZeroTimeOut = 0;	
  400: 	static	u16_t  xdata R_AD_PowerOnZero;	//上电零点AD值
  401: 	static	u16_t  xdata R_AD_Zero;			//零点AD值
  402: 	static	u8_t    xdata B_Weight_Zero;		//处于零点标志
  403: 	static	u8_t    xdata B_Weight_ZeroOk;	//上电获取完零点标志
  404: 	static	u8_t	   xdata B_LockDownCheck;	//下秤后第一次稳定追零
  405: 	static	u8_t	   xdata B_WeightZeroErr;		//零点错误标志
  406: 	
  407: 	u16_t	R_AdFilTimes;
  408: 	u16_t	R_AD_BUF;
  409: 	u16_t	weight_temp;
  410: 	u16_t	R_Open_Weight;
  411: 	u8_t		B_Weight_Pos;
  412: 
  413: 	
  414: 	
  415: 	if(option==ZeroProcReset)
0012F6 BF0408            CJNE    R7,#04H,?C0043?CS_SCALE_PROC
  416: 		{
  417: 		B_Weight_ZeroOk = 0;
0012F9 E4                CLR     A
0012FA 904C9B            MOV     DPTR,#B_Weight_ZeroOk
0012FD F0                MOVX    @DPTR,A
  418: 		return 0;		
0012FE FE                MOV     R6,A
0012FF FF                MOV     R7,A
001300 22                RET     
  419: 		}
001301         ?C0043?CS_SCALE_PROC:
  420: 	if(option==SetPowerOnZero)
001301 904DED            MOV     DPTR,#option
001304 E0                MOVX    A,@DPTR
001305 FB                MOV     R3,A
001306 B4050C            CJNE    A,#05H,?C0045?CS_SCALE_PROC
  421: 		{
  422: 		R_AD_PowerOnZero = setdata;
001309 904C96            MOV     DPTR,#R_AD_PowerOnZero
00130C EC                MOV     A,R4
00130D F0                MOVX    @DPTR,A
00130E A3                INC     DPTR
00130F ED                MOV     A,R5
001310 F0                MOVX    @DPTR,A
  423: 		return 0;		
001311 E4                CLR     A
001312 FE                MOV     R6,A
001313 FF                MOV     R7,A
001314 22                RET     
  424: 		}
001315         ?C0045?CS_SCALE_PROC:
  425: 	if(option==SetRunningZero)
001315 EB                MOV     A,R3
001316 B4060E            CJNE    A,#06H,?C0046?CS_SCALE_PROC
  426: 		{
  427: 		R_AD_Zero = setdata;
001319 AF05              MOV     R7,AR5
00131B 904C98            MOV     DPTR,#R_AD_Zero
00131E EC                MOV     A,R4
00131F F0                MOVX    @DPTR,A
001320 A3                INC     DPTR
001321 EF                MOV     A,R7
001322 F0                MOVX    @DPTR,A
  428: 		return 0;		
001323 E4                CLR     A
001324 FE                MOV     R6,A
001325 FF                MOV     R7,A
001326 22                RET     
  429: 		}
001327         ?C0046?CS_SCALE_PROC:
  430: 	if(option==ClrLockDownCheckFlag)
001327 904DED            MOV     DPTR,#option
00132A E0                MOVX    A,@DPTR
00132B FD                MOV     R5,A
00132C B40808            CJNE    A,#08H,?C0047?CS_SCALE_PROC
  431: 		{
  432: 		B_LockDownCheck=false;
00132F E4                CLR     A
001330 904C9C            MOV     DPTR,#B_LockDownCheck
001333 F0                MOVX    @DPTR,A
  433: 		return 0;
001334 FE                MOV     R6,A
001335 FF                MOV     R7,A
001336 22                RET     
  434: 		}
001337         ?C0047?CS_SCALE_PROC:
  435: 	
  436: 	if(option==FindPowerOnZero)
001337 ED                MOV     A,R5
001338 640A              XRL     A,#0AH
00133A 7075              JNZ     ?C0048?CS_SCALE_PROC
  437: 	{
  438: 		
  439: 	
  440: 		if(R_Weight_GetZeroTimeOut <60)
00133C 904C95            MOV     DPTR,#R_Weight_GetZeroTimeOut
00133F E0                MOVX    A,@DPTR
001340 C3                CLR     C
001341 943C              SUBB    A,#03CH
001343 5052              JNC     ?C0049?CS_SCALE_PROC
  441: 		{
  442: 		R_Weight_GetZeroTimeOut ++;
001345 E0                MOVX    A,@DPTR
001346 04                INC     A
001347 F0                MOVX    @DPTR,A
  443: 		
  444: 		R_AD_BUF = R_AD_Original;
001348 904CD8            MOV     DPTR,#R_AD_Original
00134B E0                MOVX    A,@DPTR
00134C FE                MOV     R6,A
00134D A3                INC     DPTR
00134E E0                MOVX    A,@DPTR
00134F FF                MOV     R7,A
001350 904DEE            MOV     DPTR,#R_AD_BUF
001353 EE                MOV     A,R6
001354 F0                MOVX    @DPTR,A
001355 FC                MOV     R4,A
001356 A3                INC     DPTR
001357 EF                MOV     A,R7
001358 F0                MOVX    @DPTR,A
001359 FD                MOV     R5,A
  445: 		R_AD_BUF=CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
00135A E4                CLR     A
00135B FF                MOV     R7,A
00135C 1230D4            LCALL   _CS_Scale_AdcFilter
00135F 904DEE            MOV     DPTR,#R_AD_BUF
001362 EE                MOV     A,R6
001363 F0                MOVX    @DPTR,A
001364 FC                MOV     R4,A
001365 A3                INC     DPTR
001366 EF                MOV     A,R7
001367 F0                MOVX    @DPTR,A
001368 FD                MOV     R5,A
  446: 		R_AdFilTimes = CS_Scale_AdcFilter(ScaleAdcFilterGetFilTimes,R_AD_BUF);
001369 7F02              MOV     R7,#02H
00136B 1230D4            LCALL   _CS_Scale_AdcFilter
;---- Variable 'R_AdFilTimes' assigned to Register 'R6/R7' ----
  447: 		
  448: 			if(R_AdFilTimes >=CS_PowerOnAD_Steadytimes)
00136E C3                CLR     C
00136F EF                MOV     A,R7
001370 940A              SUBB    A,#0AH
001372 EE                MOV     A,R6
001373 9400              SUBB    A,#00H
001375 403A              JC      ?C0048?CS_SCALE_PROC
  449: 				{
  450: 				R_AD_Zero	= R_AD_BUF;
001377 904DEE            MOV     DPTR,#R_AD_BUF
00137A E0                MOVX    A,@DPTR
00137B FE                MOV     R6,A
00137C A3                INC     DPTR
00137D E0                MOVX    A,@DPTR
00137E FF                MOV     R7,A
00137F 904C98            MOV     DPTR,#R_AD_Zero
001382 EE                MOV     A,R6
001383 F0                MOVX    @DPTR,A
001384 A3                INC     DPTR
001385 EF                MOV     A,R7
001386 F0                MOVX    @DPTR,A
  451: 				R_AD_PowerOnZero = R_AD_BUF;
001387 904C96            MOV     DPTR,#R_AD_PowerOnZero
00138A EE                MOV     A,R6
00138B F0                MOVX    @DPTR,A
00138C A3                INC     DPTR
00138D EF                MOV     A,R7
00138E F0                MOVX    @DPTR,A
  452: 				B_Weight_ZeroOk = true;
00138F 904C9B            MOV     DPTR,#B_Weight_ZeroOk
001392 7401              MOV     A,#01H
001394 F0                MOVX    @DPTR,A
  453: 				}
  454: 		}
001395 801A              SJMP    ?C0048?CS_SCALE_PROC
001397         ?C0049?CS_SCALE_PROC:
  455: 		else
  456: 		{
  457: 		R_AD_Zero	= 4000;
001397 904C98            MOV     DPTR,#R_AD_Zero
00139A 740F              MOV     A,#0FH
00139C F0                MOVX    @DPTR,A
00139D A3                INC     DPTR
00139E 74A0              MOV     A,#0A0H
0013A0 F0                MOVX    @DPTR,A
  458: 		R_AD_PowerOnZero = 4000;
0013A1 904C96            MOV     DPTR,#R_AD_PowerOnZero
0013A4 740F              MOV     A,#0FH
0013A6 F0                MOVX    @DPTR,A
0013A7 A3                INC     DPTR
0013A8 74A0              MOV     A,#0A0H
0013AA F0                MOVX    @DPTR,A
  459: 		B_Weight_ZeroOk = true;
0013AB 904C9B            MOV     DPTR,#B_Weight_ZeroOk
0013AE 7401              MOV     A,#01H
0013B0 F0                MOVX    @DPTR,A
  460: 		}
  461: 
  462: 	}
0013B1         ?C0048?CS_SCALE_PROC:
  463: 
  464: 	if(option==RunningZero)
0013B1 904DED            MOV     DPTR,#option
0013B4 E0                MOVX    A,@DPTR
0013B5 6407              XRL     A,#07H
0013B7 6002              JZ      $ + 4H
0013B9 81EE              AJMP    ?C0052?CS_SCALE_PROC
  465: 	{
  466: 	B_Weight_Zero = false;		
0013BB 904C9A            MOV     DPTR,#B_Weight_Zero
0013BE F0                MOVX    @DPTR,A
  467: 	//3kg以下才追零包括负重量
  468: 	B_Weight_Pos = CS_Scale_GetDeltaAD(GetADDirection);		//获取AD方向
0013BF 7F01              MOV     R7,#01H
0013C1 123073            LCALL   _CS_Scale_GetDeltaAD
0013C4 904DF4            MOV     DPTR,#B_Weight_Pos
0013C7 EF                MOV     A,R7
0013C8 F0                MOVX    @DPTR,A
  469: 	R_Open_Weight = CS_Scale_CaliProc(CaliProcGetOpenWeight);	//获取开机重量值
0013C9 7F07              MOV     R7,#07H
0013CB 120A38            LCALL   _CS_Scale_CaliProc
0013CE 904DF2            MOV     DPTR,#R_Open_Weight
0013D1 EE                MOV     A,R6
0013D2 F0                MOVX    @DPTR,A
0013D3 A3                INC     DPTR
0013D4 EF                MOV     A,R7
0013D5 F0                MOVX    @DPTR,A
  470: 	
  471: 	if(R_UnitWeight.origin <= 300 ||B_Weight_Pos ==false)	
0013D6 904CC9            MOV     DPTR,#R_UnitWeight
0013D9 E0                MOVX    A,@DPTR
0013DA FE                MOV     R6,A
0013DB A3                INC     DPTR
0013DC E0                MOVX    A,@DPTR
0013DD FF                MOV     R7,A
0013DE D3                SETB    C
0013DF 942C              SUBB    A,#02CH
0013E1 EE                MOV     A,R6
0013E2 9401              SUBB    A,#01H
0013E4 4006              JC      ?C0054?CS_SCALE_PROC
0013E6 904DF4            MOV     DPTR,#B_Weight_Pos
0013E9 E0                MOVX    A,@DPTR
0013EA 7006              JNZ     ?C0053?CS_SCALE_PROC
0013EC         ?C0054?CS_SCALE_PROC:
  472: 		B_Weight_Zero = true;
0013EC 904C9A            MOV     DPTR,#B_Weight_Zero
0013EF 7401              MOV     A,#01H
0013F1 F0                MOVX    @DPTR,A
0013F2         ?C0053?CS_SCALE_PROC:
  473: 
  474: 		if(R_UnitWeight.origin <= 200 || B_Weight_Pos==false)
0013F2 D3                SETB    C
0013F3 EF                MOV     A,R7
0013F4 94C8              SUBB    A,#0C8H
0013F6 EE                MOV     A,R6
0013F7 9400              SUBB    A,#00H
0013F9 4008              JC      ?C0056?CS_SCALE_PROC
0013FB 904DF4            MOV     DPTR,#B_Weight_Pos
0013FE E0                MOVX    A,@DPTR
0013FF 6002              JZ      $ + 4H
001401 81EA              AJMP    ?C0055?CS_SCALE_PROC
001403         ?C0056?CS_SCALE_PROC:
  475: 			{		
  476: 				if(CS_Scale_JudgeSteady(GetIfSmallSteady)==true)
001403 7F02              MOV     R7,#02H
001405 122F07            LCALL   _CS_Scale_JudgeSteady
001408 EF                MOV     A,R7
001409 6401              XRL     A,#01H
00140B 6002              JZ      $ + 4H
00140D 81EA              AJMP    ?C0055?CS_SCALE_PROC
  477: 					{
  478: 
  479: 					CS_Scale_JudgeSteady(ResetSteady);
00140F 7F01              MOV     R7,#01H
001411 122F07            LCALL   _CS_Scale_JudgeSteady
  480: 					
  481: 					//非锁定状态正常追零
  482: 					if(CS_Scale_LockProc(GetIfLock)==false)	
001414 7F02              MOV     R7,#02H
001416 1235D5            LCALL   _CS_Scale_LockProc
001419 EF                MOV     A,R7
00141A 7054              JNZ     ?C0058?CS_SCALE_PROC
  483: 						{
  484: 						if(R_AD_Original >= R_AD_PowerOnZero)
00141C 904C96            MOV     DPTR,#R_AD_PowerOnZero
00141F E0                MOVX    A,@DPTR
001420 FE                MOV     R6,A
001421 A3                INC     DPTR
001422 E0                MOVX    A,@DPTR
001423 FF                MOV     R7,A
001424 904CD8            MOV     DPTR,#R_AD_Original
001427 E0                MOVX    A,@DPTR
001428 FC                MOV     R4,A
001429 A3                INC     DPTR
00142A E0                MOVX    A,@DPTR
00142B FD                MOV     R5,A
00142C C3                CLR     C
00142D 9F                SUBB    A,R7
00142E EC                MOV     A,R4
00142F 9E                SUBB    A,R6
001430 402D              JC      ?C0059?CS_SCALE_PROC
  485: 							{
  486: 							weight_temp = R_AD_Original - R_AD_PowerOnZero;
001432 ED                MOV     A,R5
001433 9F                SUBB    A,R7
001434 FF                MOV     R7,A
001435 EC                MOV     A,R4
001436 9E                SUBB    A,R6
001437 FE                MOV     R6,A
001438 904DF0            MOV     DPTR,#weight_temp
00143B F0                MOVX    @DPTR,A
00143C A3                INC     DPTR
00143D EF                MOV     A,R7
00143E F0                MOVX    @DPTR,A
  487: 							if(weight_temp < R_Open_Weight)
00143F D3                SETB    C
001440 904DF3            MOV     DPTR,#R_Open_Weight+01H
001443 E0                MOVX    A,@DPTR
001444 9F                SUBB    A,R7
001445 904DF2            MOV     DPTR,#R_Open_Weight
001448 E0                MOVX    A,@DPTR
001449 9E                SUBB    A,R6
00144A 5002              JNC     $ + 4H
00144C 81EA              AJMP    ?C0055?CS_SCALE_PROC
  488: 								R_AD_Zero = R_AD_Original;
00144E 904CD8            MOV     DPTR,#R_AD_Original
001451 E0                MOVX    A,@DPTR
001452 FF                MOV     R7,A
001453 A3                INC     DPTR
001454 E0                MOVX    A,@DPTR
001455 904C98            MOV     DPTR,#R_AD_Zero
001458 CF                XCH     A,R7
001459 F0                MOVX    @DPTR,A
00145A A3                INC     DPTR
00145B EF                MOV     A,R7
00145C F0                MOVX    @DPTR,A
  489: 							}
00145D 81EA              AJMP    ?C0055?CS_SCALE_PROC
00145F         ?C0059?CS_SCALE_PROC:
  490: 						else
  491: 							R_AD_Zero = R_AD_Original;
00145F 904CD8            MOV     DPTR,#R_AD_Original
001462 E0                MOVX    A,@DPTR
001463 FF                MOV     R7,A
001464 A3                INC     DPTR
001465 E0                MOVX    A,@DPTR
001466 904C98            MOV     DPTR,#R_AD_Zero
001469 CF                XCH     A,R7
00146A F0                MOVX    @DPTR,A
00146B A3                INC     DPTR
00146C EF                MOV     A,R7
00146D F0                MOVX    @DPTR,A
  492: 						}
00146E 807A              SJMP    ?C0055?CS_SCALE_PROC
001470         ?C0058?CS_SCALE_PROC:
  493: 					//锁定状态下秤第一次追零做防提起处理
  494: 					else			
  495: 						{
  496: 						if(B_LockDownCheck==false)
001470 904C9C            MOV     DPTR,#B_LockDownCheck
001473 E0                MOVX    A,@DPTR
001474 7074              JNZ     ?C0055?CS_SCALE_PROC
  497: 							{
  498: 							if(R_AD_Original>R_AD_Zero)
001476 904C98            MOV     DPTR,#R_AD_Zero
001479 E0                MOVX    A,@DPTR
00147A FE                MOV     R6,A
00147B A3                INC     DPTR
00147C E0                MOVX    A,@DPTR
00147D FF                MOV     R7,A
00147E 904CD8            MOV     DPTR,#R_AD_Original
001481 E0                MOVX    A,@DPTR
001482 FC                MOV     R4,A
001483 A3                INC     DPTR
001484 E0                MOVX    A,@DPTR
001485 FD                MOV     R5,A
001486 D3                SETB    C
001487 9F                SUBB    A,R7
001488 EC                MOV     A,R4
001489 9E                SUBB    A,R6
00148A 400E              JC      ?C0064?CS_SCALE_PROC
  499: 								weight_temp = R_AD_Original - R_AD_Zero;
00148C ED                MOV     A,R5
00148D 9F                SUBB    A,R7
00148E FF                MOV     R7,A
00148F EC                MOV     A,R4
001490 9E                SUBB    A,R6
001491 904DF0            MOV     DPTR,#weight_temp
001494 F0                MOVX    @DPTR,A
001495 A3                INC     DPTR
001496 EF                MOV     A,R7
001497 F0                MOVX    @DPTR,A
001498 801B              SJMP    ?C0065?CS_SCALE_PROC
00149A         ?C0064?CS_SCALE_PROC:
  500: 							else
  501: 								weight_temp = R_AD_Zero - R_AD_Original;
00149A 904CD8            MOV     DPTR,#R_AD_Original
00149D E0                MOVX    A,@DPTR
00149E FE                MOV     R6,A
00149F A3                INC     DPTR
0014A0 E0                MOVX    A,@DPTR
0014A1 FF                MOV     R7,A
0014A2 C3                CLR     C
0014A3 904C99            MOV     DPTR,#R_AD_Zero+01H
0014A6 E0                MOVX    A,@DPTR
0014A7 9F                SUBB    A,R7
0014A8 FF                MOV     R7,A
0014A9 904C98            MOV     DPTR,#R_AD_Zero
0014AC E0                MOVX    A,@DPTR
0014AD 9E                SUBB    A,R6
0014AE 904DF0            MOV     DPTR,#weight_temp
0014B1 F0                MOVX    @DPTR,A
0014B2 A3                INC     DPTR
0014B3 EF                MOV     A,R7
0014B4 F0                MOVX    @DPTR,A
0014B5         ?C0065?CS_SCALE_PROC:
  502: 
  503: 							//跟锁定前的零点做比较不等于一个秤体重量的处理
  504: 							//if(weight_temp<ScaleWeightMin&&weight_temp>ScaleWeightMax)
  505: 								//{
  506: 								R_AD_Zero = R_AD_Original;	//更新零点
0014B5 904CD8            MOV     DPTR,#R_AD_Original
0014B8 E0                MOVX    A,@DPTR
0014B9 FF                MOV     R7,A
0014BA A3                INC     DPTR
0014BB E0                MOVX    A,@DPTR
0014BC 904C98            MOV     DPTR,#R_AD_Zero
0014BF CF                XCH     A,R7
0014C0 F0                MOVX    @DPTR,A
0014C1 A3                INC     DPTR
0014C2 EF                MOV     A,R7
0014C3 F0                MOVX    @DPTR,A
  507: 								if(weight_temp>SameZeroRange)
0014C4 D3                SETB    C
0014C5 904DF1            MOV     DPTR,#weight_temp+01H
0014C8 E0                MOVX    A,@DPTR
0014C9 940A              SUBB    A,#0AH
0014CB 904DF0            MOV     DPTR,#weight_temp
0014CE E0                MOVX    A,@DPTR
0014CF 9400              SUBB    A,#00H
0014D1 4011              JC      ?C0066?CS_SCALE_PROC
  508: 									{
  509: 									//跟称重前不是一个零点报零点错并解锁
  510: 									B_WeightZeroErr=true;
0014D3 904C9D            MOV     DPTR,#B_WeightZeroErr
0014D6 7401              MOV     A,#01H
0014D8 F0                MOVX    @DPTR,A
  511: 									R_Display_Err=CS_ScaleDisplay_L_err;
0014D9 904CC2            MOV     DPTR,#R_Display_Err
0014DC 7404              MOV     A,#04H
0014DE F0                MOVX    @DPTR,A
  512: 									CS_Scale_LockProc(LockProcUnLock);
0014DF 7F03              MOV     R7,#03H
0014E1 1235D5            LCALL   _CS_Scale_LockProc
  513: 									}
0014E4         ?C0066?CS_SCALE_PROC:
  514: 								B_LockDownCheck=true;
0014E4 904C9C            MOV     DPTR,#B_LockDownCheck
0014E7 7401              MOV     A,#01H
0014E9 F0                MOVX    @DPTR,A
  515: 								//}
  516: 
  517: 							}						
  518: 						}
  519: 					
  520: 					}
  521: 			}
0014EA         ?C0055?CS_SCALE_PROC:
  522: 	return	0;		
0014EA E4                CLR     A
0014EB FE                MOV     R6,A
0014EC FF                MOV     R7,A
0014ED 22                RET     
  523: 	}
0014EE         ?C0052?CS_SCALE_PROC:
  524: 
  525: 	if(option==GetPowerOnZero)
0014EE 904DED            MOV     DPTR,#option
0014F1 E0                MOVX    A,@DPTR
0014F2 FD                MOV     R5,A
0014F3 7009              JNZ     ?C0067?CS_SCALE_PROC
  526: 		return	R_AD_PowerOnZero;
0014F5 904C96            MOV     DPTR,#R_AD_PowerOnZero
0014F8 E0                MOVX    A,@DPTR
0014F9 FE                MOV     R6,A
0014FA A3                INC     DPTR
0014FB E0                MOVX    A,@DPTR
0014FC FF                MOV     R7,A
0014FD 22                RET     
0014FE         ?C0067?CS_SCALE_PROC:
  527: 	if(option==GetPowerOnZeroState)
0014FE ED                MOV     A,R5
0014FF B40208            CJNE    A,#02H,?C0068?CS_SCALE_PROC
  528: 		return	B_Weight_ZeroOk;
001502 904C9B            MOV     DPTR,#B_Weight_ZeroOk
001505 E0                MOVX    A,@DPTR
001506 FF                MOV     R7,A
001507 7E00              MOV     R6,#00H
001509 22                RET     
00150A         ?C0068?CS_SCALE_PROC:
  529: 	if(option==GetRunningZero)
00150A 904DED            MOV     DPTR,#option
00150D E0                MOVX    A,@DPTR
00150E FD                MOV     R5,A
00150F B40109            CJNE    A,#01H,?C0069?CS_SCALE_PROC
  530: 		return	R_AD_Zero;
001512 904C98            MOV     DPTR,#R_AD_Zero
001515 E0                MOVX    A,@DPTR
001516 FE                MOV     R6,A
001517 A3                INC     DPTR
001518 E0                MOVX    A,@DPTR
001519 FF                MOV     R7,A
00151A 22                RET     
00151B         ?C0069?CS_SCALE_PROC:
  531: 	if(option==GetZeroState)
00151B ED                MOV     A,R5
00151C B40308            CJNE    A,#03H,?C0070?CS_SCALE_PROC
  532: 		return	B_Weight_Zero;
00151F 904C9A            MOV     DPTR,#B_Weight_Zero
001522 E0                MOVX    A,@DPTR
001523 FF                MOV     R7,A
001524 7E00              MOV     R6,#00H
001526 22                RET     
001527         ?C0070?CS_SCALE_PROC:
  533: 	if(option==GetIfZeroErr)
001527 904DED            MOV     DPTR,#option
00152A E0                MOVX    A,@DPTR
00152B B40908            CJNE    A,#09H,?C0071?CS_SCALE_PROC
  534: 		return   B_WeightZeroErr;
00152E 904C9D            MOV     DPTR,#B_WeightZeroErr
001531 E0                MOVX    A,@DPTR
001532 FF                MOV     R7,A
001533 7E00              MOV     R6,#00H
001535 22                RET     
001536         ?C0071?CS_SCALE_PROC:
  535: 	
  536: 	return 0;	
001536 E4                CLR     A
001537 FE                MOV     R6,A
001538 FF                MOV     R7,A
  537: }
001539 22                RET     
----- FUNCTION _CS_Scale_ZeroProc (END) -------


----- FUNCTION CS_ScaleDisplay (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
   14: void CS_ScaleDisplay()
   15: {
   16: 	u32_t weight_temp;
   17: 	
   18: 	if(R_Display_Err==CS_ScaleDisplay_L_err)	//提示信息显示
00153A 904CC2            MOV     DPTR,#R_Display_Err
00153D E0                MOVX    A,@DPTR
00153E 6404              XRL     A,#04H
001540 7033              JNZ     ?C0001?CS_SCALEDISPLAY
   19: 		{
   20: 		if(CS_Scale_JudgeOverLoad(GetIfOverLoad)== true)	
001542 7F01              MOV     R7,#01H
001544 123643            LCALL   _CS_Scale_JudgeOverLoad
001547 BF0107            CJNE    R7,#01H,?C0002?CS_SCALEDISPLAY
   21: 			CS_ScaleDisplay_FreshBuf(DisplayOverLoad,0);			
00154A E4                CLR     A
00154B FD                MOV     R5,A
00154C FC                MOV     R4,A
00154D 7F85              MOV     R7,#085H
00154F B1FA              ACALL   _CS_ScaleDisplay_FreshBuf
001551         ?C0002?CS_SCALEDISPLAY:
   22: 		if(CS_Scale_JudgeLowBat(GetIfLowBat)== true)
001551 7F01              MOV     R7,#01H
001553 121F87            LCALL   _CS_Scale_JudgeLowBat
001556 BF0107            CJNE    R7,#01H,?C0003?CS_SCALEDISPLAY
   23: 			CS_ScaleDisplay_FreshBuf(DisplayLowBat,0);	
001559 E4                CLR     A
00155A FD                MOV     R5,A
00155B FC                MOV     R4,A
00155C 7F86              MOV     R7,#086H
00155E B1FA              ACALL   _CS_ScaleDisplay_FreshBuf
001560         ?C0003?CS_SCALEDISPLAY:
   24: 		if(CS_Scale_ZeroProc(GetIfZeroErr,0)==true)
001560 E4                CLR     A
001561 FD                MOV     R5,A
001562 FC                MOV     R4,A
001563 7F09              MOV     R7,#09H
001565 51F1              ACALL   _CS_Scale_ZeroProc
001567 EF                MOV     A,R7
001568 6401              XRL     A,#01H
00156A 4E                ORL     A,R6
00156B 6002              JZ      $ + 4H
00156D A1F9              AJMP    ?C0005?CS_SCALEDISPLAY
   25: 			CS_ScaleDisplay_FreshBuf(DisplayZeroErr,0);
00156F FD                MOV     R5,A
001570 FC                MOV     R4,A
001571 7F87              MOV     R7,#087H
001573 A1FA              AJMP    _CS_ScaleDisplay_FreshBuf
   26: 		return;
   27: 		}
001575         ?C0001?CS_SCALEDISPLAY:
   28: 	if(R_Selet_Unit == CS_ScaleDisplay_L_kg)
001575 904CC6            MOV     DPTR,#R_Selet_Unit
001578 E0                MOVX    A,@DPTR
001579 7014              JNZ     ?C0006?CS_SCALEDISPLAY
   29: 		{
   30: 		R_UnitWeight.kg = R_UnitWeight.origin;
00157B 904CC9            MOV     DPTR,#R_UnitWeight
00157E E0                MOVX    A,@DPTR
00157F FE                MOV     R6,A
001580 A3                INC     DPTR
001581 E0                MOVX    A,@DPTR
001582 FF                MOV     R7,A
001583 A3                INC     DPTR
001584 EE                MOV     A,R6
001585 F0                MOVX    @DPTR,A
001586 FC                MOV     R4,A
001587 A3                INC     DPTR
001588 EF                MOV     A,R7
001589 F0                MOVX    @DPTR,A
00158A FD                MOV     R5,A
   31: 		CS_ScaleDisplay_FreshBuf(Displaykg,R_UnitWeight.kg);
00158B 7F41              MOV     R7,#041H
00158D B1FA              ACALL   _CS_ScaleDisplay_FreshBuf
   32: 		}
00158F         ?C0006?CS_SCALEDISPLAY:
   33: 	if(R_Selet_Unit == CS_ScaleDisplay_L_gongjin)
00158F 904CC6            MOV     DPTR,#R_Selet_Unit
001592 E0                MOVX    A,@DPTR
001593 B40214            CJNE    A,#02H,?C0007?CS_SCALEDISPLAY
   34: 		{
   35: 		R_UnitWeight.kg = R_UnitWeight.origin;
001596 904CC9            MOV     DPTR,#R_UnitWeight
001599 E0                MOVX    A,@DPTR
00159A FE                MOV     R6,A
00159B A3                INC     DPTR
00159C E0                MOVX    A,@DPTR
00159D FF                MOV     R7,A
00159E A3                INC     DPTR
00159F EE                MOV     A,R6
0015A0 F0                MOVX    @DPTR,A
0015A1 FC                MOV     R4,A
0015A2 A3                INC     DPTR
0015A3 EF                MOV     A,R7
0015A4 F0                MOVX    @DPTR,A
0015A5 FD                MOV     R5,A
   36: 		CS_ScaleDisplay_FreshBuf(Displaygongjin,R_UnitWeight.kg);
0015A6 7F44              MOV     R7,#044H
0015A8 B1FA              ACALL   _CS_ScaleDisplay_FreshBuf
   37: 		}
0015AA         ?C0007?CS_SCALEDISPLAY:
   38: 	if(R_Selet_Unit == CS_ScaleDisplay_L_jin)
0015AA 904CC6            MOV     DPTR,#R_Selet_Unit
0015AD E0                MOVX    A,@DPTR
0015AE B4031A            CJNE    A,#03H,?C0008?CS_SCALEDISPLAY
   39: 		{
   40: 		R_UnitWeight.jin = R_UnitWeight.origin *2;
0015B1 904CCA            MOV     DPTR,#R_UnitWeight+01H
0015B4 E0                MOVX    A,@DPTR
0015B5 25E0              ADD     A,ACC
0015B7 FF                MOV     R7,A
0015B8 904CC9            MOV     DPTR,#R_UnitWeight
0015BB E0                MOVX    A,@DPTR
0015BC 33                RLC     A
0015BD FE                MOV     R6,A
0015BE 904CD1            MOV     DPTR,#R_UnitWeight+08H
0015C1 F0                MOVX    @DPTR,A
0015C2 FC                MOV     R4,A
0015C3 A3                INC     DPTR
0015C4 EF                MOV     A,R7
0015C5 F0                MOVX    @DPTR,A
0015C6 FD                MOV     R5,A
   41: 		CS_ScaleDisplay_FreshBuf(Displayjin,R_UnitWeight.jin);
0015C7 7F43              MOV     R7,#043H
0015C9 B1FA              ACALL   _CS_ScaleDisplay_FreshBuf
   42: 		}				
0015CB         ?C0008?CS_SCALEDISPLAY:
   43:        if(R_Selet_Unit == CS_ScaleDisplay_L_lb )
0015CB 904CC6            MOV     DPTR,#R_Selet_Unit
0015CE E0                MOVX    A,@DPTR
0015CF B40127            CJNE    A,#01H,?C0005?CS_SCALEDISPLAY
   44:        	{
   45: 		weight_temp   = (u32_t) R_UnitWeight.origin *22046;
0015D2 904CC9            MOV     DPTR,#R_UnitWeight
0015D5 E0                MOVX    A,@DPTR
0015D6 FE                MOV     R6,A
0015D7 A3                INC     DPTR
0015D8 E0                MOVX    A,@DPTR
0015D9 FF                MOV     R7,A
0015DA 7C56              MOV     R4,#056H
0015DC 7D1E              MOV     R5,#01EH
0015DE 1203C8            LCALL   ?C?LIMUL
;---- Variable 'weight_temp' assigned to Register 'R4/R5/R6/R7' ----
   46: 		R_UnitWeight.lb = weight_temp / 10000;
0015E1 E4                CLR     A
0015E2 7B10              MOV     R3,#010H
0015E4 7A27              MOV     R2,#027H
0015E6 F9                MOV     R1,A
0015E7 F8                MOV     R0,A
0015E8 120269            LCALL   ?C?ULDIV
0015EB 904CCD            MOV     DPTR,#R_UnitWeight+04H
0015EE EE                MOV     A,R6
0015EF F0                MOVX    @DPTR,A
0015F0 FC                MOV     R4,A
0015F1 A3                INC     DPTR
0015F2 EF                MOV     A,R7
0015F3 F0                MOVX    @DPTR,A
0015F4 FD                MOV     R5,A
   47: 		CS_ScaleDisplay_FreshBuf(Displaylb,R_UnitWeight.lb);
0015F5 7F42              MOV     R7,#042H
0015F7 B1FA              ACALL   _CS_ScaleDisplay_FreshBuf
   48:        	}		
   49: }
0015F9         ?C0005?CS_SCALEDISPLAY:
0015F9 22                RET     
----- FUNCTION CS_ScaleDisplay (END) -------


----- FUNCTION _CS_ScaleDisplay_FreshBuf (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
   73: void CS_ScaleDisplay_FreshBuf(u8_t option,u16_t showdata)
   74: {
;---- Variable 'showdata' assigned to Register 'R4/R5' ----
0015FA 904E5B            MOV     DPTR,#option
0015FD EF                MOV     A,R7
0015FE F0                MOVX    @DPTR,A
   75: 	static	u8_t	data_buf[5];
   76: 
   77: 	//////////////////////////////////////////
   78: 	//数字部分赋值
   79: 	if(option==DisplayOverLoad)
0015FF BF850F            CJNE    R7,#085H,?C0011?CS_SCALEDISPLAY
   80: 	{
   81: 	data_buf[0]=Lcdnull_Num;
001602 904D18            MOV     DPTR,#data_buf
001605 7415              MOV     A,#015H
001607 F0                MOVX    @DPTR,A
   82: 	data_buf[1]=Lcdup_Num;
001608 A3                INC     DPTR
001609 04                INC     A
00160A F0                MOVX    @DPTR,A
   83: 	data_buf[2]=Lcdup_Num;
00160B A3                INC     DPTR
00160C F0                MOVX    @DPTR,A
   84: 	data_buf[3]=Lcdup_Num;
00160D A3                INC     DPTR
00160E F0                MOVX    @DPTR,A
   85: 	data_buf[4]=Lcdup_Num;
00160F A3                INC     DPTR
001610 F0                MOVX    @DPTR,A
   86: 	}
001611         ?C0011?CS_SCALEDISPLAY:
   87: 
   88: 	if(option==DisplayLowBat)
001611 904E5B            MOV     DPTR,#option
001614 E0                MOVX    A,@DPTR
001615 FF                MOV     R7,A
001616 B48614            CJNE    A,#086H,?C0012?CS_SCALEDISPLAY
   89: 	{
   90: 	data_buf[0]=0;
001619 E4                CLR     A
00161A 904D18            MOV     DPTR,#data_buf
00161D F0                MOVX    @DPTR,A
   91: 	data_buf[1]=Lcdnull_Num;
00161E A3                INC     DPTR
00161F 7415              MOV     A,#015H
001621 F0                MOVX    @DPTR,A
   92: 	data_buf[2]=LcdchL_Num;
001622 A3                INC     DPTR
001623 7410              MOV     A,#010H
001625 F0                MOVX    @DPTR,A
   93: 	data_buf[3]=Lcdcho_Num;
001626 A3                INC     DPTR
001627 04                INC     A
001628 F0                MOVX    @DPTR,A
   94: 	data_buf[4]=Lcdnull_Num;
001629 A3                INC     DPTR
00162A 7415              MOV     A,#015H
00162C F0                MOVX    @DPTR,A
   95: 	}
00162D         ?C0012?CS_SCALEDISPLAY:
   96: 
   97: 	if(option==DisplayZeroErr)
00162D EF                MOV     A,R7
00162E B48712            CJNE    A,#087H,?C0013?CS_SCALEDISPLAY
   98: 	{
   99: 	data_buf[0]=Lcdnull_Num;
001631 904D18            MOV     DPTR,#data_buf
001634 7415              MOV     A,#015H
001636 F0                MOVX    @DPTR,A
  100: 	data_buf[1]=Lcdnull_Num;
001637 A3                INC     DPTR
001638 F0                MOVX    @DPTR,A
  101: 	data_buf[2]=LcdchC_Num;
001639 A3                INC     DPTR
00163A 740C              MOV     A,#0CH
00163C F0                MOVX    @DPTR,A
  102: 	data_buf[3]=Lcdnull_Num;
00163D A3                INC     DPTR
00163E 7415              MOV     A,#015H
001640 F0                MOVX    @DPTR,A
  103: 	data_buf[4]=Lcdnull_Num;
001641 A3                INC     DPTR
001642 F0                MOVX    @DPTR,A
  104: 	}
001643         ?C0013?CS_SCALEDISPLAY:
  105: 	
  106: 	if(option==DisplayCal1||option==DisplayCal2||option==DisplayCal3||option==DisplayCal4)
001643 EF                MOV     A,R7
001644 6481              XRL     A,#081H
001646 600F              JZ      ?C0015?CS_SCALEDISPLAY
001648 EF                MOV     A,R7
001649 6482              XRL     A,#082H
00164B 600A              JZ      ?C0015?CS_SCALEDISPLAY
00164D EF                MOV     A,R7
00164E 6483              XRL     A,#083H
001650 6005              JZ      ?C0015?CS_SCALEDISPLAY
001652 EF                MOV     A,R7
001653 6484              XRL     A,#084H
001655 703E              JNZ     ?C0014?CS_SCALEDISPLAY
001657         ?C0015?CS_SCALEDISPLAY:
  107: 	{
  108: 	data_buf[0]=0;
001657 E4                CLR     A
001658 904D18            MOV     DPTR,#data_buf
00165B F0                MOVX    @DPTR,A
  109: 	data_buf[1]=LcdchC_Num;
00165C A3                INC     DPTR
00165D 740C              MOV     A,#0CH
00165F F0                MOVX    @DPTR,A
  110: 	data_buf[2]=LcdchA_Num;
001660 A3                INC     DPTR
001661 740A              MOV     A,#0AH
001663 F0                MOVX    @DPTR,A
  111: 	data_buf[3]=LcdchL_Num;
001664 A3                INC     DPTR
001665 7410              MOV     A,#010H
001667 F0                MOVX    @DPTR,A
  112: 		if(option==DisplayCal1)
001668 EF                MOV     A,R7
001669 B48104            CJNE    A,#081H,?C0016?CS_SCALEDISPLAY
  113: 			data_buf[4]=1;
00166C A3                INC     DPTR
00166D 7401              MOV     A,#01H
00166F F0                MOVX    @DPTR,A
001670         ?C0016?CS_SCALEDISPLAY:
  114: 		if(option==DisplayCal2)
001670 904E5B            MOV     DPTR,#option
001673 E0                MOVX    A,@DPTR
001674 B48206            CJNE    A,#082H,?C0017?CS_SCALEDISPLAY
  115: 			data_buf[4]=2;
001677 904D1C            MOV     DPTR,#data_buf+04H
00167A 7402              MOV     A,#02H
00167C F0                MOVX    @DPTR,A
00167D         ?C0017?CS_SCALEDISPLAY:
  116: 		if(option==DisplayCal3)
00167D 904E5B            MOV     DPTR,#option
001680 E0                MOVX    A,@DPTR
001681 FF                MOV     R7,A
001682 B48306            CJNE    A,#083H,?C0018?CS_SCALEDISPLAY
  117: 			data_buf[4]=3;
001685 904D1C            MOV     DPTR,#data_buf+04H
001688 7403              MOV     A,#03H
00168A F0                MOVX    @DPTR,A
00168B         ?C0018?CS_SCALEDISPLAY:
  118: 		if(option==DisplayCal4)
00168B EF                MOV     A,R7
00168C B48406            CJNE    A,#084H,?C0014?CS_SCALEDISPLAY
  119: 			data_buf[4]=4;
00168F 904D1C            MOV     DPTR,#data_buf+04H
001692 7404              MOV     A,#04H
001694 F0                MOVX    @DPTR,A
  120: 	}
001695         ?C0014?CS_SCALEDISPLAY:
  121: 
  122: 	if(option==DisplayData||option==Displaykg||option==Displaylb||option==Displayjin||option==Displaygongjin)
001695 904E5B            MOV     DPTR,#option
001698 E0                MOVX    A,@DPTR
001699 FF                MOV     R7,A
00169A 6421              XRL     A,#021H
00169C 6014              JZ      ?C0021?CS_SCALEDISPLAY
00169E EF                MOV     A,R7
00169F 6441              XRL     A,#041H
0016A1 600F              JZ      ?C0021?CS_SCALEDISPLAY
0016A3 EF                MOV     A,R7
0016A4 6442              XRL     A,#042H
0016A6 600A              JZ      ?C0021?CS_SCALEDISPLAY
0016A8 EF                MOV     A,R7
0016A9 6443              XRL     A,#043H
0016AB 6005              JZ      ?C0021?CS_SCALEDISPLAY
0016AD EF                MOV     A,R7
0016AE 6444              XRL     A,#044H
0016B0 705F              JNZ     ?C0020?CS_SCALEDISPLAY
0016B2         ?C0021?CS_SCALEDISPLAY:
  123: 	{
  124: 	CS_ScaleDisplay_HexToBcd(showdata,data_buf);
0016B2 AE04              MOV     R6,AR4
0016B4 AF05              MOV     R7,AR5
0016B6 7B01              MOV     R3,#01H
0016B8 7A4D              MOV     R2,#HIGH data_buf
0016BA 7918              MOV     R1,#LOW data_buf
0016BC 1239AC            LCALL   _CS_ScaleDisplay_HexToBcd
  125: 	
  126: 	if(option&showhigh4)		//显示高4位
0016BF 904E5B            MOV     DPTR,#option
0016C2 E0                MOVX    A,@DPTR
0016C3 FF                MOV     R7,A
0016C4 30E61D            JNB     ACC.6,?C0022?CS_SCALEDISPLAY
  127: 		{
  128: 		data_buf[4]=data_buf[3];
0016C7 904D1B            MOV     DPTR,#data_buf+03H
0016CA E0                MOVX    A,@DPTR
0016CB A3                INC     DPTR
0016CC F0                MOVX    @DPTR,A
  129: 		data_buf[3]=data_buf[2];
0016CD 904D1A            MOV     DPTR,#data_buf+02H
0016D0 E0                MOVX    A,@DPTR
0016D1 A3                INC     DPTR
0016D2 F0                MOVX    @DPTR,A
  130: 		data_buf[2]=data_buf[1];
0016D3 904D19            MOV     DPTR,#data_buf+01H
0016D6 E0                MOVX    A,@DPTR
0016D7 A3                INC     DPTR
0016D8 F0                MOVX    @DPTR,A
  131: 		data_buf[1]=data_buf[0];
0016D9 904D18            MOV     DPTR,#data_buf
0016DC E0                MOVX    A,@DPTR
0016DD A3                INC     DPTR
0016DE F0                MOVX    @DPTR,A
  132: 		data_buf[0]=0;
0016DF E4                CLR     A
0016E0 904D18            MOV     DPTR,#data_buf
0016E3 F0                MOVX    @DPTR,A
  133: 		}
0016E4         ?C0022?CS_SCALEDISPLAY:
  134: 
  135: 		if(data_buf[0]==0 && data_buf[1]==0 )	
0016E4 904D18            MOV     DPTR,#data_buf
0016E7 E0                MOVX    A,@DPTR
0016E8 7007              JNZ     ?C0023?CS_SCALEDISPLAY
0016EA A3                INC     DPTR
0016EB E0                MOVX    A,@DPTR
0016EC 7003              JNZ     ?C0023?CS_SCALEDISPLAY
  136: 			data_buf[1]=Lcdnull_Num;
0016EE 7415              MOV     A,#015H
0016F0 F0                MOVX    @DPTR,A
0016F1         ?C0023?CS_SCALEDISPLAY:
  137: 		if(data_buf[1]==Lcdnull_Num && data_buf[2]==0 )	
0016F1 904D19            MOV     DPTR,#data_buf+01H
0016F4 E0                MOVX    A,@DPTR
0016F5 B41507            CJNE    A,#015H,?C0024?CS_SCALEDISPLAY
0016F8 A3                INC     DPTR
0016F9 E0                MOVX    A,@DPTR
0016FA 7003              JNZ     ?C0024?CS_SCALEDISPLAY
  138: 			data_buf[2]=Lcdnull_Num;
0016FC 7415              MOV     A,#015H
0016FE F0                MOVX    @DPTR,A
0016FF         ?C0024?CS_SCALEDISPLAY:
  139: 
  140: 		if(option&ShowNoDot)	//没有小数点还要判断多一位数字为0时是否不显示
0016FF EF                MOV     A,R7
001700 30E50E            JNB     ACC.5,?C0020?CS_SCALEDISPLAY
  141: 			{
  142: 			if(data_buf[2]==Lcdnull_Num && data_buf[3]==0 )	
001703 904D1A            MOV     DPTR,#data_buf+02H
001706 E0                MOVX    A,@DPTR
001707 B41507            CJNE    A,#015H,?C0020?CS_SCALEDISPLAY
00170A A3                INC     DPTR
00170B E0                MOVX    A,@DPTR
00170C 7003              JNZ     ?C0020?CS_SCALEDISPLAY
  143: 				data_buf[3]=Lcdnull_Num;
00170E 7415              MOV     A,#015H
001710 F0                MOVX    @DPTR,A
  144: 			}
  145: 	}
001711         ?C0020?CS_SCALEDISPLAY:
  146: 	
  147: 	CS_lcd_showbuf[0] = CS_ScaleDisplay_LookUpTable(data_buf[1]);
001711 904D19            MOV     DPTR,#data_buf+01H
001714 E0                MOVX    A,@DPTR
001715 FF                MOV     R7,A
001716 F1E4              ACALL   _CS_ScaleDisplay_LookUpTable
001718 904D23            MOV     DPTR,#CS_lcd_showbuf
00171B EF                MOV     A,R7
00171C F0                MOVX    @DPTR,A
  148: 	CS_lcd_showbuf[1] = CS_ScaleDisplay_LookUpTable(data_buf[2]);
00171D 904D1A            MOV     DPTR,#data_buf+02H
001720 E0                MOVX    A,@DPTR
001721 FF                MOV     R7,A
001722 F1E4              ACALL   _CS_ScaleDisplay_LookUpTable
001724 904D24            MOV     DPTR,#CS_lcd_showbuf+01H
001727 EF                MOV     A,R7
001728 F0                MOVX    @DPTR,A
  149: 	CS_lcd_showbuf[2] = CS_ScaleDisplay_LookUpTable(data_buf[3]);
001729 904D1B            MOV     DPTR,#data_buf+03H
00172C E0                MOVX    A,@DPTR
00172D FF                MOV     R7,A
00172E F1E4              ACALL   _CS_ScaleDisplay_LookUpTable
001730 904D25            MOV     DPTR,#CS_lcd_showbuf+02H
001733 EF                MOV     A,R7
001734 F0                MOVX    @DPTR,A
  150: 	CS_lcd_showbuf[3] = CS_ScaleDisplay_LookUpTable(data_buf[4]);
001735 904D1C            MOV     DPTR,#data_buf+04H
001738 E0                MOVX    A,@DPTR
001739 FF                MOV     R7,A
00173A F1E4              ACALL   _CS_ScaleDisplay_LookUpTable
00173C 904D26            MOV     DPTR,#CS_lcd_showbuf+03H
00173F EF                MOV     A,R7
001740 F0                MOVX    @DPTR,A
  151: 
  152: 	CS_ScaleDisplay_LcdBuf_rShift4();	//显示缓存跟实际液晶的逻辑对应有出入还要微调
001741 123A17            LCALL   CS_ScaleDisplay_LcdBuf_rShift4
  153: 
  154: 										//显示缓存数字还有符号部分的位置
  155: 
  156: 	//////////////////////////////////////////
  157: 	//符号部分赋值
  158: 	CS_Lcd_Send_Data[4] &=0x0f;			//清单位符号缓存	
001744 904D2C            MOV     DPTR,#CS_Lcd_Send_Data+04H
001747 E0                MOVX    A,@DPTR
001748 540F              ANL     A,#0FH
00174A F0                MOVX    @DPTR,A
  159: 	CS_Lcd_Buf_DOT2	 &= ~S_DOT;			//清显示小数点
00174B 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
00174E E0                MOVX    A,@DPTR
00174F 54F7              ANL     A,#0F7H
001751 F0                MOVX    @DPTR,A
  160: 
  161: 		
  162: 	if(option==Displaykg)
001752 904E5B            MOV     DPTR,#option
001755 E0                MOVX    A,@DPTR
001756 FD                MOV     R5,A
001757 B4410C            CJNE    A,#041H,?C0027?CS_SCALEDISPLAY
  163: 		{
  164: 		CS_Lcd_Buf_DOT2	|= S_DOT;
00175A 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
00175D E0                MOVX    A,@DPTR
00175E 4408              ORL     A,#08H
001760 F0                MOVX    @DPTR,A
  165: 		CS_Lcd_Buf_Unit	|= S_KG;							
001761 A3                INC     DPTR
001762 E0                MOVX    A,@DPTR
001763 4410              ORL     A,#010H
001765 F0                MOVX    @DPTR,A
  166: 		}	
001766         ?C0027?CS_SCALEDISPLAY:
  167: 
  168: 	if(option==Displaylb)
001766 ED                MOV     A,R5
001767 B4420C            CJNE    A,#042H,?C0028?CS_SCALEDISPLAY
  169: 		{
  170: 		CS_Lcd_Buf_DOT2	|= S_DOT;
00176A 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
00176D E0                MOVX    A,@DPTR
00176E 4408              ORL     A,#08H
001770 F0                MOVX    @DPTR,A
  171: 		CS_Lcd_Buf_Unit	|= S_LB;							
001771 A3                INC     DPTR
001772 E0                MOVX    A,@DPTR
001773 4420              ORL     A,#020H
001775 F0                MOVX    @DPTR,A
  172: 		}
001776         ?C0028?CS_SCALEDISPLAY:
  173: 	if(option==Displayjin)
001776 904E5B            MOV     DPTR,#option
001779 E0                MOVX    A,@DPTR
00177A B4430C            CJNE    A,#043H,?C0029?CS_SCALEDISPLAY
  174: 		{
  175: 		CS_Lcd_Buf_DOT2	|= S_DOT;
00177D 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
001780 E0                MOVX    A,@DPTR
001781 4408              ORL     A,#08H
001783 F0                MOVX    @DPTR,A
  176: 		CS_Lcd_Buf_Unit	|= S_JIN;							
001784 A3                INC     DPTR
001785 E0                MOVX    A,@DPTR
001786 4480              ORL     A,#080H
001788 F0                MOVX    @DPTR,A
  177: 		}
001789         ?C0029?CS_SCALEDISPLAY:
  178: 	
  179: 	if(option==Displaygongjin)
001789 904E5B            MOV     DPTR,#option
00178C E0                MOVX    A,@DPTR
00178D FD                MOV     R5,A
00178E B4440C            CJNE    A,#044H,?C0030?CS_SCALEDISPLAY
  180: 		{
  181: 		CS_Lcd_Buf_DOT2	|= S_DOT;
001791 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
001794 E0                MOVX    A,@DPTR
001795 4408              ORL     A,#08H
001797 F0                MOVX    @DPTR,A
  182: 		CS_Lcd_Buf_Unit	|= S_GONG | S_JIN;							
001798 A3                INC     DPTR
001799 E0                MOVX    A,@DPTR
00179A 44C0              ORL     A,#0C0H
00179C F0                MOVX    @DPTR,A
  183: 		}
00179D         ?C0030?CS_SCALEDISPLAY:
  184: 
  185: 	
  186: 	if( R_1186sys_state&0x02)
00179D 904CDA            MOV     DPTR,#R_1186sys_state
0017A0 E0                MOVX    A,@DPTR
0017A1 30E109            JNB     ACC.1,?C0031?CS_SCALEDISPLAY
  187: 		CS_Lcd_Buf_SIGN |=S_DAT;
0017A4 904D28            MOV     DPTR,#CS_Lcd_Send_Data
0017A7 E0                MOVX    A,@DPTR
0017A8 4404              ORL     A,#04H
0017AA F0                MOVX    @DPTR,A
0017AB 8007              SJMP    ?C0032?CS_SCALEDISPLAY
0017AD         ?C0031?CS_SCALEDISPLAY:
  188: 	else
  189: 		CS_Lcd_Buf_SIGN &=~S_DAT;
0017AD 904D28            MOV     DPTR,#CS_Lcd_Send_Data
0017B0 E0                MOVX    A,@DPTR
0017B1 54FB              ANL     A,#0FBH
0017B3 F0                MOVX    @DPTR,A
0017B4         ?C0032?CS_SCALEDISPLAY:
  190: 	
  191: 	
  192: 	if(bleConnStatus==BLE_STATUS_CONN)
0017B4 904C5B            MOV     DPTR,#bleConnStatus
0017B7 E0                MOVX    A,@DPTR
0017B8 B40109            CJNE    A,#01H,?C0033?CS_SCALEDISPLAY
  193: 		CS_Lcd_Buf_SIGN |=S_BLE;
0017BB 904D28            MOV     DPTR,#CS_Lcd_Send_Data
0017BE E0                MOVX    A,@DPTR
0017BF 4402              ORL     A,#02H
0017C1 F0                MOVX    @DPTR,A
0017C2 8007              SJMP    ?C0034?CS_SCALEDISPLAY
0017C4         ?C0033?CS_SCALEDISPLAY:
  194: 	else
  195: 		CS_Lcd_Buf_SIGN &=~S_BLE;
0017C4 904D28            MOV     DPTR,#CS_Lcd_Send_Data
0017C7 E0                MOVX    A,@DPTR
0017C8 54FD              ANL     A,#0FDH
0017CA F0                MOVX    @DPTR,A
0017CB         ?C0034?CS_SCALEDISPLAY:
  196: 										
  197: 	if(option==DisplayData)				//最高位用蓝牙标志辅助显示
0017CB ED                MOV     A,R5
0017CC B42114            CJNE    A,#021H,?C0037?CS_SCALEDISPLAY
  198: 		{	
  199: 		CS_Lcd_Buf_SIGN &=~S_BLE;
0017CF 904D28            MOV     DPTR,#CS_Lcd_Send_Data
0017D2 E0                MOVX    A,@DPTR
0017D3 54FD              ANL     A,#0FDH
0017D5 F0                MOVX    @DPTR,A
  200: 		if(data_buf[0]!=0)
0017D6 904D18            MOV     DPTR,#data_buf
0017D9 E0                MOVX    A,@DPTR
0017DA 6007              JZ      ?C0037?CS_SCALEDISPLAY
  201: 		CS_Lcd_Buf_SIGN |=S_BLE;
0017DC 904D28            MOV     DPTR,#CS_Lcd_Send_Data
0017DF E0                MOVX    A,@DPTR
0017E0 4402              ORL     A,#02H
0017E2 F0                MOVX    @DPTR,A
  202: 		}
  203: 	
  204: }
0017E3         ?C0037?CS_SCALEDISPLAY:
0017E3 22                RET     
----- FUNCTION _CS_ScaleDisplay_FreshBuf (END) -------


----- FUNCTION _CS_ScaleDisplay_LookUpTable (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  288: u8_t CS_ScaleDisplay_LookUpTable(u8_t NumData)
  289: {
;---- Variable 'NumData' assigned to Register 'R7' ----
  290: 	u8_t	 * data_ptr;
  291: 	data_ptr = CS_Lcd_Table;
0017E4 7B01              MOV     R3,#01H
0017E6 7A4D              MOV     R2,#HIGH CS_Lcd_Table
0017E8 792E              MOV     R1,#LOW CS_Lcd_Table
;---- Variable 'data_ptr' assigned to Register 'R1/R2/R3' ----
  292: 	return 	*(data_ptr + NumData);
0017EA 8F82              MOV     DPL,R7
0017EC 758300            MOV     DPH,#00H
0017EF 120112            LCALL   ?C?CLDOPTR
0017F2 FF                MOV     R7,A
  293: }
0017F3 22                RET     
----- FUNCTION _CS_ScaleDisplay_LookUpTable (END) -------


----- FUNCTION _generateChecksum (BEGIN) -----
 FILE: 'system.c'
  114: u8_t generateChecksum(u8_t *buf,u8_t len)
  115: {
0017F4 904E42            MOV     DPTR,#buf
0017F7 EB                MOV     A,R3
0017F8 F0                MOVX    @DPTR,A
0017F9 A3                INC     DPTR
0017FA EA                MOV     A,R2
0017FB F0                MOVX    @DPTR,A
0017FC A3                INC     DPTR
0017FD E9                MOV     A,R1
0017FE F0                MOVX    @DPTR,A
;---- Variable 'len' assigned to Register 'R5' ----
  116: 	u8_t result;
  117: 	result = 0;
;---- Variable 'result' assigned to Register 'R7' ----
0017FF E4                CLR     A
001800 FF                MOV     R7,A
001801         ?C0012?SYSTEM:
  118: 	while(len--) {
001801 AE05              MOV     R6,AR5
001803 1D                DEC     R5
001804 EE                MOV     A,R6
001805 6017              JZ      ?C0013?SYSTEM
  119: 		result^=*buf++;
001807 904E42            MOV     DPTR,#buf
00180A E0                MOVX    A,@DPTR
00180B FB                MOV     R3,A
00180C A3                INC     DPTR
00180D E4                CLR     A
00180E 75F001            MOV     B,#01H
001811 1201C8            LCALL   ?C?ILDIX
001814 A9F0              MOV     R1,B
001816 FA                MOV     R2,A
001817 1200F9            LCALL   ?C?CLDPTR
00181A 6F                XRL     A,R7
00181B FF                MOV     R7,A
  120: 	}
00181C 80E3              SJMP    ?C0012?SYSTEM
00181E         ?C0013?SYSTEM:
  121: 	return result;
  122: }
00181E 22                RET     
----- FUNCTION _generateChecksum (END) -------


----- FUNCTION BTControlProcess (BEGIN) -----
 FILE: 'system.c'
  124: void BTControlProcess(void)
  125: {
  126: 	BT_EVENTFIFO_t event;
  127: 	//normal process
  128: 	BT_EventFifoOut(&event);
00181F 7B01              MOV     R3,#01H
001821 7A4D              MOV     R2,#HIGH event
001823 7969              MOV     R1,#LOW event
001825 12286A            LCALL   _BT_EventFifoOut
  129: 	if(event.len != 0)
001828 904D69            MOV     DPTR,#event
00182B E0                MOVX    A,@DPTR
00182C 6075              JZ      ?C0028?SYSTEM
  130: 	{
  131: 		//YC_UARTSendData(event.DATA, event.len);
  132: 		switch(event.DATA[0]) {
00182E A3                INC     DPTR
00182F E0                MOVX    A,@DPTR
001830 24EE              ADD     A,#0EEH
001832 601C              JZ      ?C0019?SYSTEM
001834 14                DEC     A
001835 6024              JZ      ?C0020?SYSTEM
001837 14                DEC     A
001838 6029              JZ      ?C0021?SYSTEM
00183A 24FC              ADD     A,#0FCH
00183C 605F              JZ      ?C0027?SYSTEM
00183E 2407              ADD     A,#07H
001840 7061              JNZ     ?C0028?SYSTEM
  133: 			case CS_NOTIFY_POWERON:
  134: 				break;
  135: 			case CS_NOTIFY_DISC:		//bluetooth disconnect
001842         ?C0018?SYSTEM:
  136: 				notifyValueUUIDA621 = NOTIFY_INDICATE_DISABLE;
001842 E4                CLR     A
001843 904C59            MOV     DPTR,#notifyValueUUIDA621
001846 F0                MOVX    @DPTR,A
  137: 				notifyValueUUIDA625 = NOTIFY_INDICATE_DISABLE;
001847 904C5A            MOV     DPTR,#notifyValueUUIDA625
00184A F0                MOVX    @DPTR,A
  138: 				bleConnStatus= BLE_STATUS_DISCONN;
00184B 904C5B            MOV     DPTR,#bleConnStatus
00184E F0                MOVX    @DPTR,A
  139: 				break;
00184F 22                RET     
  140: 			case CS_NOTIFY_CONN:	//bluetooth connected
001850         ?C0019?SYSTEM:
  141: 				lxOptStatus = OPT_IDLE;
001850 E4                CLR     A
001851 904C5C            MOV     DPTR,#lxOptStatus
001854 F0                MOVX    @DPTR,A
  142: 				bleConnStatus= BLE_STATUS_CONN;
001855 904C5B            MOV     DPTR,#bleConnStatus
001858 04                INC     A
001859 F0                MOVX    @DPTR,A
  143: 				break;
00185A 22                RET     
  144: 			case CS_NOTIFY_DATA:	//receive data
00185B         ?C0020?SYSTEM:
  145: 				lxRecvDataFromApp(&event);
00185B 7B01              MOV     R3,#01H
00185D 7A4D              MOV     R2,#HIGH event
00185F 7969              MOV     R1,#LOW event
001861 8041              SJMP    _lxRecvDataFromApp
  146: 				break; 
  147: 			case CS_NOTIFY_OPENHANDLE:
001863         ?C0021?SYSTEM:
  148: 				if(event.DATA[1] == HANDLE_UUIDA621_NOTIFY)
001863 904D6B            MOV     DPTR,#event+02H
001866 E0                MOVX    A,@DPTR
001867 FF                MOV     R7,A
001868 B41C0A            CJNE    A,#01CH,?C0022?SYSTEM
  149: 				{
  150: 					notifyValueUUIDA621 = event.DATA[3];
00186B 904D6D            MOV     DPTR,#event+04H
00186E E0                MOVX    A,@DPTR
00186F 904C59            MOV     DPTR,#notifyValueUUIDA621
001872 F0                MOVX    @DPTR,A
  151: 				}
001873 800C              SJMP    ?C0023?SYSTEM
001875         ?C0022?SYSTEM:
  152: 				else if(event.DATA[1] == HANDLE_UUIDA625_NOTIFY)
001875 EF                MOV     A,R7
001876 B42508            CJNE    A,#025H,?C0023?SYSTEM
  153: 				{
  154: 					notifyValueUUIDA625 = event.DATA[3];
001879 904D6D            MOV     DPTR,#event+04H
00187C E0                MOVX    A,@DPTR
00187D 904C5A            MOV     DPTR,#notifyValueUUIDA625
001880 F0                MOVX    @DPTR,A
  155: 				}
001881         ?C0023?SYSTEM:
  156: 
  157: 				if(*mem_register_buf == DEVICE_REGISTERED &&
001881 904C0E            MOV     DPTR,#04C0EH
001884 E0                MOVX    A,@DPTR
001885 B4011B            CJNE    A,#01H,?C0028?SYSTEM
001888 904C59            MOV     DPTR,#notifyValueUUIDA621
00188B E0                MOVX    A,@DPTR
00188C B40114            CJNE    A,#01H,?C0028?SYSTEM
00188F 904C5A            MOV     DPTR,#notifyValueUUIDA625
001892 E0                MOVX    A,@DPTR
001893 B4010D            CJNE    A,#01H,?C0028?SYSTEM
  158: 					notifyValueUUIDA621 == NOTIFY_ENABLE &&
  159: 					notifyValueUUIDA625 == NOTIFY_ENABLE)
  160: 				{
  161: 					lxOptStatus = OPT_LOGIN_REQ;
001896 904C5C            MOV     DPTR,#lxOptStatus
001899 7416              MOV     A,#016H
00189B F0                MOVX    @DPTR,A
  162: 				}
  163: 				break;
00189C 22                RET     
  164: 			case CS_NOTIFY_READ_REQ:
  165: 				break;
  166: 			case CS_NOTIFY_INDICATE_CONFIRM:
00189D         ?C0027?SYSTEM:
  167: 				handleIndicationConfirm = 1;
00189D 904C5D            MOV     DPTR,#handleIndicationConfirm
0018A0 7401              MOV     A,#01H
0018A2 F0                MOVX    @DPTR,A
  168: 				break;
  169: 		}
  170: 	}
  171: }
0018A3         ?C0028?SYSTEM:
0018A3 22                RET     
----- FUNCTION BTControlProcess (END) -------


----- FUNCTION _lxRecvDataFromApp (BEGIN) -----
 FILE: 'lxProtocol.c'
   50: void lxRecvDataFromApp(BT_EVENTFIFO_t *event)
   51: {
0018A4 904E1F            MOV     DPTR,#event
0018A7 EB                MOV     A,R3
0018A8 F0                MOVX    @DPTR,A
0018A9 A3                INC     DPTR
0018AA EA                MOV     A,R2
0018AB F0                MOVX    @DPTR,A
0018AC A3                INC     DPTR
0018AD E9                MOV     A,R1
0018AE F0                MOVX    @DPTR,A
   52: 	//data[0]:total length, data[1~2]:handle
   53: 	//data[3]:frame control,data[4]:length,data[5~N]:content
   54: 	u8_t frameControl = event->DATA[3];
0018AF 904E1F            MOV     DPTR,#event
0018B2 E0                MOVX    A,@DPTR
0018B3 FB                MOV     R3,A
0018B4 A3                INC     DPTR
0018B5 E0                MOVX    A,@DPTR
0018B6 FA                MOV     R2,A
0018B7 A3                INC     DPTR
0018B8 E0                MOVX    A,@DPTR
0018B9 F9                MOV     R1,A
0018BA 900004            MOV     DPTR,#04H
0018BD 120112            LCALL   ?C?CLDOPTR
0018C0 904E22            MOV     DPTR,#frameControl
0018C3 F0                MOVX    @DPTR,A
   55: 	u16_t cmd;
   56: 	
   57: 	bigLittleEndianSwap(&(event->DATA[5]), event->DATA[4]);
0018C4 E9                MOV     A,R1
0018C5 2406              ADD     A,#06H
0018C7 F9                MOV     R1,A
0018C8 E4                CLR     A
0018C9 3A                ADDC    A,R2
0018CA FA                MOV     R2,A
0018CB C002              PUSH    AR2
0018CD C001              PUSH    AR1
0018CF 904E1F            MOV     DPTR,#event
0018D2 E0                MOVX    A,@DPTR
0018D3 A3                INC     DPTR
0018D4 E0                MOVX    A,@DPTR
0018D5 FA                MOV     R2,A
0018D6 A3                INC     DPTR
0018D7 E0                MOVX    A,@DPTR
0018D8 F9                MOV     R1,A
0018D9 900005            MOV     DPTR,#05H
0018DC 120112            LCALL   ?C?CLDOPTR
0018DF FD                MOV     R5,A
0018E0 7C00              MOV     R4,#00H
0018E2 D001              POP     AR1
0018E4 D002              POP     AR2
0018E6 31EF              ACALL   _bigLittleEndianSwap
   58: 	cmd = event->DATA[5] | (event->DATA[6] << 8);
0018E8 904E1F            MOV     DPTR,#event
0018EB E0                MOVX    A,@DPTR
0018EC FB                MOV     R3,A
0018ED A3                INC     DPTR
0018EE E0                MOVX    A,@DPTR
0018EF FA                MOV     R2,A
0018F0 A3                INC     DPTR
0018F1 E0                MOVX    A,@DPTR
0018F2 F9                MOV     R1,A
0018F3 900007            MOV     DPTR,#07H
0018F6 120112            LCALL   ?C?CLDOPTR
0018F9 FE                MOV     R6,A
0018FA 900006            MOV     DPTR,#06H
0018FD 120112            LCALL   ?C?CLDOPTR
001900 FD                MOV     R5,A
001901 EE                MOV     A,R6
001902 ED                MOV     A,R5
001903 FF                MOV     R7,A
001904 904E23            MOV     DPTR,#cmd
001907 EE                MOV     A,R6
001908 F0                MOVX    @DPTR,A
001909 A3                INC     DPTR
00190A EF                MOV     A,R7
00190B F0                MOVX    @DPTR,A
   59: 	
   60: 	//numTotalFrames == 1
   61: 	if(frameControl == FRAME_CONTROL_SINGLE)
00190C 904E22            MOV     DPTR,#frameControl
00190F E0                MOVX    A,@DPTR
001910 6410              XRL     A,#010H
001912 6002              JZ      $ + 4H
001914 219F              AJMP    ?C0007?LXPROTOCOL
   62: 	{
   63: 		//send ack
   64: 		lxSendRecvDataACK(HANDLE_UUIDA625_NOTIFY, RECV_ACK_SUCCESS);
001916 7D01              MOV     R5,#01H
001918 7F25              MOV     R7,#025H
00191A FE                MOV     R6,A
00191B F155              ACALL   _lxSendRecvDataACK
   65: 
   66: 		//copy data
   67: 		xmemcpy(LX_RECV_BUF, &(event->DATA[5]), event->DATA[4]);
00191D 904E1F            MOV     DPTR,#event
001920 E0                MOVX    A,@DPTR
001921 FB                MOV     R3,A
001922 A3                INC     DPTR
001923 E0                MOVX    A,@DPTR
001924 FA                MOV     R2,A
001925 A3                INC     DPTR
001926 E0                MOVX    A,@DPTR
001927 2406              ADD     A,#06H
001929 F9                MOV     R1,A
00192A E4                CLR     A
00192B 3A                ADDC    A,R2
00192C FA                MOV     R2,A
00192D C002              PUSH    AR2
00192F C001              PUSH    AR1
001931 904E1F            MOV     DPTR,#event
001934 E0                MOVX    A,@DPTR
001935 A3                INC     DPTR
001936 E0                MOVX    A,@DPTR
001937 FA                MOV     R2,A
001938 A3                INC     DPTR
001939 E0                MOVX    A,@DPTR
00193A F9                MOV     R1,A
00193B 900005            MOV     DPTR,#05H
00193E 120112            LCALL   ?C?CLDOPTR
001941 F51C              MOV     ?_xmemcpy?BYTE+05H,A
001943 D001              POP     AR1
001945 D002              POP     AR2
001947 7FA0              MOV     R7,#0A0H
001949 7E48              MOV     R6,#048H
00194B 12248D            LCALL   _xmemcpy
   68: 		
   69: 		switch(cmd)
00194E 904E23            MOV     DPTR,#cmd
001951 E0                MOVX    A,@DPTR
001952 FE                MOV     R6,A
001953 A3                INC     DPTR
001954 E0                MOVX    A,@DPTR
001955 8EF0              MOV     B,R6
001957 120395            LCALL   ?C?ICASE
00195A 197E              DW      ?C0009?LXPROTOCOL
00195C 0001              DW      01H
00195E 1982              DW      ?C0010?LXPROTOCOL
001960 0003              DW      03H
001962 1986              DW      ?C0011?LXPROTOCOL
001964 0008              DW      08H
001966 198A              DW      ?C0012?LXPROTOCOL
001968 000A              DW      0AH
00196A 198E              DW      ?C0013?LXPROTOCOL
00196C 1002              DW      01002H
00196E 1992              DW      ?C0014?LXPROTOCOL
001970 1004              DW      01004H
001972 1996              DW      ?C0015?LXPROTOCOL
001974 1005              DW      01005H
001976 199A              DW      ?C0016?LXPROTOCOL
001978 4801              DW      04801H
00197A 0000              DW      00H
00197C 19E5              DW      ?C0023?LXPROTOCOL
   70: 		{
   71: 			case CMD_REGISTRATION_REQ:
00197E         ?C0009?LXPROTOCOL:
   72: 				changeLxOptStatus(OPT_REGISTER_REQ);
00197E 7F10              MOV     R7,#010H
001980 8064              SJMP    _changeLxOptStatus
   73: 				break;
   74: 			case CMD_BIND_REQ:
001982         ?C0010?LXPROTOCOL:
   75: 				changeLxOptStatus(OPT_BIND_REQ);
001982 7F13              MOV     R7,#013H
001984 8060              SJMP    _changeLxOptStatus
   76: 				break;
   77: 			case CMD_LOGIN_RSP:
001986         ?C0011?LXPROTOCOL:
   78: 				changeLxOptStatus(OPT_LOGIN_RSP);
001986 7F18              MOV     R7,#018H
001988 805C              SJMP    _changeLxOptStatus
   79: 				break;
   80: 			case CMD_INIT_RSP:
00198A         ?C0012?LXPROTOCOL:
   81: 				changeLxOptStatus(OPT_INIT_RSP);
00198A 7F22              MOV     R7,#022H
00198C 8058              SJMP    _changeLxOptStatus
   82: 				break;
   83: 				
   84: 			case CMD_TIME_SETTING_REQ:
00198E         ?C0013?LXPROTOCOL:
   85: 				changeLxOptStatus(OPT_TIME_SETTING_REQ);
00198E 7F25              MOV     R7,#025H
001990 8054              SJMP    _changeLxOptStatus
   86: 				break;
   87: 			case CMD_UNIT_SETTING_REQ:
001992         ?C0014?LXPROTOCOL:
   88: 				changeLxOptStatus(OPT_UNIT_SETTING_REQ);
001992 7F28              MOV     R7,#028H
001994 8050              SJMP    _changeLxOptStatus
   89: 				break;
   90: 			case CMD_DATA_CLEAR_SETTING_REQ:
001996         ?C0015?LXPROTOCOL:
   91: 				changeLxOptStatus(OPT_DATA_DEL_SETTING_REQ);
001996 7F31              MOV     R7,#031H
001998 804C              SJMP    _changeLxOptStatus
   92: 				break;
   93: 				
   94: 			case CMD_SYNC_DATA_REQ:
00199A         ?C0016?LXPROTOCOL:
   95: 				changeLxOptStatus(OPT_SYNC_DATA_REQ);
00199A 7F35              MOV     R7,#035H
00199C 8048              SJMP    _changeLxOptStatus
   96: 				break;
   97: 		}
   98: 		
   99: 	}
00199E 22                RET     
00199F         ?C0007?LXPROTOCOL:
  100: 	//ACK:numTotalFrames == 0
  101: 	else if(frameControl == FRAME_CONTROL_ACK)
00199F 904E22            MOV     DPTR,#frameControl
0019A2 E0                MOVX    A,@DPTR
0019A3 7040              JNZ     ?C0023?LXPROTOCOL
  102: 	{
  103: 		if(event->DATA[5] == RECV_ACK_SUCCESS)
0019A5 904E1F            MOV     DPTR,#event
0019A8 E0                MOVX    A,@DPTR
0019A9 FB                MOV     R3,A
0019AA A3                INC     DPTR
0019AB E0                MOVX    A,@DPTR
0019AC FA                MOV     R2,A
0019AD A3                INC     DPTR
0019AE E0                MOVX    A,@DPTR
0019AF F9                MOV     R1,A
0019B0 900006            MOV     DPTR,#06H
0019B3 120112            LCALL   ?C?CLDOPTR
0019B6 B40111            CJNE    A,#01H,?C0019?LXPROTOCOL
  104: 		{
  105: 			if(lxOptStatus == OPT_REGISTER_RSP_WAIT_ACK)
0019B9 904C5C            MOV     DPTR,#lxOptStatus
0019BC E0                MOVX    A,@DPTR
0019BD B41104            CJNE    A,#011H,?C0020?LXPROTOCOL
  106: 			{
  107: 				SpiFlashOperator(CS_CMD_WRITE_FLASH);
0019C0 7F41              MOV     R7,#041H
0019C2 F1D5              ACALL   _SpiFlashOperator
  108: 			}
0019C4         ?C0020?LXPROTOCOL:
  109: 			
  110: 			lxOptStatus = OPT_IDLE;
0019C4 E4                CLR     A
0019C5 904C5C            MOV     DPTR,#lxOptStatus
0019C8 F0                MOVX    @DPTR,A
  111: 		}
0019C9 22                RET     
0019CA         ?C0019?LXPROTOCOL:
  112: 		else
  113: 		{
  114: 			if(lxOptStatus == OPT_REGISTER_RSP_WAIT_ACK)
0019CA 904C5C            MOV     DPTR,#lxOptStatus
0019CD E0                MOVX    A,@DPTR
0019CE B4110F            CJNE    A,#011H,?C0022?LXPROTOCOL
  115: 			{
  116: 				xmemset(mem_register_buf , 0, 10);
0019D1 7B0A              MOV     R3,#0AH
0019D3 E4                CLR     A
0019D4 FD                MOV     R5,A
0019D5 7F0E              MOV     R7,#0EH
0019D7 7E4C              MOV     R6,#04CH
0019D9 F199              ACALL   _xmemset
  117: 				//update adv flag
  118: 				*(mem_le_adv_data + 13) = 0;
0019DB 9043E7            MOV     DPTR,#043E7H
0019DE E4                CLR     A
0019DF F0                MOVX    @DPTR,A
  119: 			}
0019E0         ?C0022?LXPROTOCOL:
  120: 			lxOptStatus = OPT_IDLE;
0019E0 E4                CLR     A
0019E1 904C5C            MOV     DPTR,#lxOptStatus
0019E4 F0                MOVX    @DPTR,A
  121: 		}
  122: 	}
  123: }
0019E5         ?C0023?LXPROTOCOL:
0019E5 22                RET     
----- FUNCTION _lxRecvDataFromApp (END) -------


----- FUNCTION _changeLxOptStatus (BEGIN) -----
 FILE: 'lxProtocol.c'
  125: void changeLxOptStatus(u8_t opt)
  126: {
;---- Variable 'opt' assigned to Register 'R7' ----
  127: 	if(lxOptStatus == OPT_IDLE)
  128: 	{
0019E6 904C5C            MOV     DPTR,#lxOptStatus
0019E9 E0                MOVX    A,@DPTR
0019EA 7002              JNZ     ?C0025?LXPROTOCOL
  129: 		lxOptStatus = opt;
  130: 	}
0019EC EF                MOV     A,R7
0019ED F0                MOVX    @DPTR,A
  131: }
  132: 
0019EE         ?C0025?LXPROTOCOL:
0019EE 22                RET     
----- FUNCTION _changeLxOptStatus (END) -------


----- FUNCTION _bigLittleEndianSwap (BEGIN) -----
 FILE: 'lxProtocol.c'
   17: static void bigLittleEndianSwap(u8_t *buf, u16_t len)
   18: {
0019EF 904DB8            MOV     DPTR,#buf
0019F2 EB                MOV     A,R3
0019F3 F0                MOVX    @DPTR,A
0019F4 A3                INC     DPTR
0019F5 EA                MOV     A,R2
0019F6 F0                MOVX    @DPTR,A
0019F7 A3                INC     DPTR
0019F8 E9                MOV     A,R1
0019F9 F0                MOVX    @DPTR,A
0019FA A3                INC     DPTR
0019FB EC                MOV     A,R4
0019FC F0                MOVX    @DPTR,A
0019FD A3                INC     DPTR
0019FE ED                MOV     A,R5
0019FF F0                MOVX    @DPTR,A
   19: 	u16_t i, size;
   20: 	u8_t temp;
   21: 	
   22: 	size = len -1;
001A00 24FF              ADD     A,#0FFH
001A02 FE                MOV     R6,A
001A03 EC                MOV     A,R4
001A04 34FF              ADDC    A,#0FFH
001A06 904DBF            MOV     DPTR,#size
001A09 F0                MOVX    @DPTR,A
001A0A A3                INC     DPTR
001A0B CE                XCH     A,R6
001A0C F0                MOVX    @DPTR,A
   23: 	for(i=0; i<len/2; i++)
001A0D E4                CLR     A
001A0E 904DBD            MOV     DPTR,#i
001A11 F0                MOVX    @DPTR,A
001A12 A3                INC     DPTR
001A13 F0                MOVX    @DPTR,A
001A14         ?C0001?LXPROTOCOL:
001A14 904DBB            MOV     DPTR,#len
001A17 E0                MOVX    A,@DPTR
001A18 C3                CLR     C
001A19 13                RRC     A
001A1A FE                MOV     R6,A
001A1B A3                INC     DPTR
001A1C E0                MOVX    A,@DPTR
001A1D 13                RRC     A
001A1E FF                MOV     R7,A
001A1F C3                CLR     C
001A20 904DBE            MOV     DPTR,#i+01H
001A23 E0                MOVX    A,@DPTR
001A24 9F                SUBB    A,R7
001A25 904DBD            MOV     DPTR,#i
001A28 E0                MOVX    A,@DPTR
001A29 9E                SUBB    A,R6
001A2A 507D              JNC     ?C0004?LXPROTOCOL
   24: 	{
   25: 		temp = buf[i];
001A2C 904DB8            MOV     DPTR,#buf
001A2F E0                MOVX    A,@DPTR
001A30 FB                MOV     R3,A
001A31 A3                INC     DPTR
001A32 E0                MOVX    A,@DPTR
001A33 FA                MOV     R2,A
001A34 A3                INC     DPTR
001A35 E0                MOVX    A,@DPTR
001A36 F9                MOV     R1,A
001A37 904DBD            MOV     DPTR,#i
001A3A E0                MOVX    A,@DPTR
001A3B FE                MOV     R6,A
001A3C A3                INC     DPTR
001A3D E0                MOVX    A,@DPTR
001A3E F582              MOV     DPL,A
001A40 8E83              MOV     DPH,R6
001A42 120112            LCALL   ?C?CLDOPTR
001A45 904DC1            MOV     DPTR,#temp
001A48 F0                MOVX    @DPTR,A
   26: 		buf[i] = buf[size -i];
001A49 904DBD            MOV     DPTR,#i
001A4C E0                MOVX    A,@DPTR
001A4D A3                INC     DPTR
001A4E E0                MOVX    A,@DPTR
001A4F FF                MOV     R7,A
001A50 C3                CLR     C
001A51 904DC0            MOV     DPTR,#size+01H
001A54 E0                MOVX    A,@DPTR
001A55 9F                SUBB    A,R7
001A56 FF                MOV     R7,A
001A57 904DBF            MOV     DPTR,#size
001A5A E0                MOVX    A,@DPTR
001A5B 9E                SUBB    A,R6
001A5C 8F82              MOV     DPL,R7
001A5E F583              MOV     DPH,A
001A60 120112            LCALL   ?C?CLDOPTR
001A63 FF                MOV     R7,A
001A64 904DBD            MOV     DPTR,#i
001A67 E0                MOVX    A,@DPTR
001A68 FC                MOV     R4,A
001A69 A3                INC     DPTR
001A6A E0                MOVX    A,@DPTR
001A6B FD                MOV     R5,A
001A6C F582              MOV     DPL,A
001A6E 8C83              MOV     DPH,R4
001A70 EF                MOV     A,R7
001A71 120151            LCALL   ?C?CSTOPTR
   27: 		buf[size -i] = temp;
001A74 904DC1            MOV     DPTR,#temp
001A77 E0                MOVX    A,@DPTR
001A78 FF                MOV     R7,A
001A79 C3                CLR     C
001A7A 904DC0            MOV     DPTR,#size+01H
001A7D E0                MOVX    A,@DPTR
001A7E 9D                SUBB    A,R5
001A7F FD                MOV     R5,A
001A80 904DBF            MOV     DPTR,#size
001A83 E0                MOVX    A,@DPTR
001A84 9C                SUBB    A,R4
001A85 FC                MOV     R4,A
001A86 904DB8            MOV     DPTR,#buf
001A89 E0                MOVX    A,@DPTR
001A8A FB                MOV     R3,A
001A8B A3                INC     DPTR
001A8C E0                MOVX    A,@DPTR
001A8D FA                MOV     R2,A
001A8E A3                INC     DPTR
001A8F E0                MOVX    A,@DPTR
001A90 F9                MOV     R1,A
001A91 8D82              MOV     DPL,R5
001A93 8C83              MOV     DPH,R4
001A95 EF                MOV     A,R7
001A96 120151            LCALL   ?C?CSTOPTR
   28: 	}
001A99 904DBE            MOV     DPTR,#i+01H
001A9C E0                MOVX    A,@DPTR
001A9D 04                INC     A
001A9E F0                MOVX    @DPTR,A
001A9F 7006              JNZ     ?C0092?LXPROTOCOL
001AA1 904DBD            MOV     DPTR,#i
001AA4 E0                MOVX    A,@DPTR
001AA5 04                INC     A
001AA6 F0                MOVX    @DPTR,A
001AA7         ?C0092?LXPROTOCOL:
001AA7 4114              AJMP    ?C0001?LXPROTOCOL
   29: }
001AA9         ?C0004?LXPROTOCOL:
001AA9 22                RET     
----- FUNCTION _bigLittleEndianSwap (END) -------


----- FUNCTION lxOptProcess (BEGIN) -----
 FILE: 'lxProtocol.c'
  133: void lxOptProcess(void)
  134: {
  135: 	u8_t i;
  136: 
  137: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
001AAA 904C64            MOV     DPTR,#btCmdBuf+01H
001AAD 7430              MOV     A,#030H
001AAF F0                MOVX    @DPTR,A
  138: 	btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
001AB0 A3                INC     DPTR
001AB1 741C              MOV     A,#01CH
001AB3 F0                MOVX    @DPTR,A
  139: 	btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
001AB4 E4                CLR     A
001AB5 A3                INC     DPTR
001AB6 F0                MOVX    @DPTR,A
  140: 	switch(lxOptStatus)
001AB7 904C5C            MOV     DPTR,#lxOptStatus
001ABA E0                MOVX    A,@DPTR
001ABB 12036F            LCALL   ?C?CCASE
001ABE 1AE3              DW      ?C0027?LXPROTOCOL
001AC0 10                DB      010H
001AC1 1B4D              DW      ?C0031?LXPROTOCOL
001AC3 13                DB      013H
001AC4 1BB9              DW      ?C0034?LXPROTOCOL
001AC6 16                DB      016H
001AC7 1C47              DW      ?C0040?LXPROTOCOL
001AC9 18                DB      018H
001ACA 1CBA              DW      ?C0050?LXPROTOCOL
001ACC 20                DB      020H
001ACD 1CF9              DW      ?C0051?LXPROTOCOL
001ACF 22                DB      022H
001AD0 1D1D              DW      ?C0053?LXPROTOCOL
001AD2 25                DB      025H
001AD3 1D4A              DW      ?C0055?LXPROTOCOL
001AD5 28                DB      028H
001AD6 1D71              DW      ?C0058?LXPROTOCOL
001AD8 31                DB      031H
001AD9 1D89              DW      ?C0062?LXPROTOCOL
001ADB 35                DB      035H
001ADC 1D9B              DW      ?C0065?LXPROTOCOL
001ADE 36                DB      036H
001ADF 0000              DW      00H
001AE1 1DA4              DW      ?C0049?LXPROTOCOL
  141: 	{
  142: #if 1
  143: 		case OPT_REGISTER_REQ:
001AE3         ?C0027?LXPROTOCOL:
  144: 			if(*(LX_RECV_BUF + 8) == DEVICE_ID_UNREGISTERED ||
  145: 				*(LX_RECV_BUF + 8) == DEVICE_ID_REGISTERED)
001AE3 9048A8            MOV     DPTR,#048A8H
001AE6 E0                MOVX    A,@DPTR
001AE7 6401              XRL     A,#01H
001AE9 6004              JZ      ?C0029?LXPROTOCOL
001AEB E0                MOVX    A,@DPTR
001AEC B40220            CJNE    A,#02H,?C0028?LXPROTOCOL
001AEF         ?C0029?LXPROTOCOL:
  146: 			{
  147: 				//save deviceID
  148: 				dmemcpy(deviceInfo.deviceID, LX_RECV_BUF + 2, DEVICE_ID_LENGTH);
001AEF 751301            MOV     ?_dmemcpy?BYTE+03H,#01H
001AF2 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
001AF5 7515A2            MOV     ?_dmemcpy?BYTE+05H,#0A2H
001AF8 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
001AFB 7B01              MOV     R3,#01H
001AFD 7A4C              MOV     R2,#HIGH deviceInfo+04H
001AFF 790A              MOV     R1,#LOW deviceInfo+04H
001B01 F121              ACALL   _dmemcpy
  149: 				//register success
  150: 				deviceInfo.registerFlag = DEVICE_REGISTERED;
001B03 904C06            MOV     DPTR,#deviceInfo
001B06 7401              MOV     A,#01H
001B08 F0                MOVX    @DPTR,A
  151: 				//update adv flag
  152: 				*(mem_le_adv_data + 13) = DEVICE_REGISTERED;
001B09 9043E7            MOV     DPTR,#043E7H
001B0C F0                MOVX    @DPTR,A
  153: 			}
001B0D 8005              SJMP    ?C0030?LXPROTOCOL
001B0F         ?C0028?LXPROTOCOL:
  154: 			else// if(*(LX_RECV_BUF + 8) == DEVICE_ID_ILLEGALED)
  155: 			{
  156: 				deviceInfo.registerFlag = DEVICE_UNREGISTERED;
001B0F E4                CLR     A
001B10 904C06            MOV     DPTR,#deviceInfo
001B13 F0                MOVX    @DPTR,A
  157: 			}
001B14         ?C0030?LXPROTOCOL:
  158: 			
  159: 			btCmdBuf.len = 0x08;
001B14 904C63            MOV     DPTR,#btCmdBuf
001B17 7408              MOV     A,#08H
001B19 F0                MOVX    @DPTR,A
  160: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
001B1A 904C67            MOV     DPTR,#btCmdBuf+04H
001B1D 7410              MOV     A,#010H
001B1F F0                MOVX    @DPTR,A
  161: 			btCmdBuf.DATA[4] = REGISTER_RSP_DATA_LEN;
001B20 A3                INC     DPTR
001B21 7403              MOV     A,#03H
001B23 F0                MOVX    @DPTR,A
  162: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_REGISTER_RSP);
001B24 A3                INC     DPTR
001B25 14                DEC     A
001B26 F0                MOVX    @DPTR,A
  163: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_REGISTER_RSP);
001B27 E4                CLR     A
001B28 A3                INC     DPTR
001B29 F0                MOVX    @DPTR,A
  164: 			btCmdBuf.DATA[7] = deviceInfo.registerFlag;
001B2A 904C06            MOV     DPTR,#deviceInfo
001B2D E0                MOVX    A,@DPTR
001B2E 904C6B            MOV     DPTR,#btCmdBuf+08H
001B31 F0                MOVX    @DPTR,A
  165: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), REGISTER_RSP_DATA_LEN);
001B32 7B01              MOV     R3,#01H
001B34 7A4C              MOV     R2,#HIGH btCmdBuf+06H
001B36 7969              MOV     R1,#LOW btCmdBuf+06H
001B38 7D03              MOV     R5,#03H
001B3A 7C00              MOV     R4,#00H
001B3C 31EF              ACALL   _bigLittleEndianSwap
  166: 			BT_CmdFifoIn(&btCmdBuf);
001B3E 7B01              MOV     R3,#01H
001B40 7A4C              MOV     R2,#HIGH btCmdBuf
001B42 7963              MOV     R1,#LOW btCmdBuf
001B44 D100              ACALL   _BT_CmdFifoIn
  167: 			lxOptStatus = OPT_REGISTER_RSP_WAIT_ACK;
001B46 904C5C            MOV     DPTR,#lxOptStatus
001B49 7411              MOV     A,#011H
001B4B F0                MOVX    @DPTR,A
  168: 			break;
001B4C 22                RET     
  169: 			
  170: 		case OPT_BIND_REQ:
001B4D         ?C0031?LXPROTOCOL:
  171: 			//bind success
  172: 			if(*(LX_RECV_BUF + 2) >= 1 && *(LX_RECV_BUF + 2) <= 4 && *(LX_RECV_BUF + 3) == 1)
001B4D 9048A2            MOV     DPTR,#048A2H
001B50 E0                MOVX    A,@DPTR
001B51 C3                CLR     C
001B52 9401              SUBB    A,#01H
001B54 401B              JC      ?C0032?LXPROTOCOL
001B56 E0                MOVX    A,@DPTR
001B57 D3                SETB    C
001B58 9404              SUBB    A,#04H
001B5A 5015              JNC     ?C0032?LXPROTOCOL
001B5C A3                INC     DPTR
001B5D E0                MOVX    A,@DPTR
001B5E B40110            CJNE    A,#01H,?C0032?LXPROTOCOL
  173: 			{
  174: 				//save user number
  175: 				deviceInfo.userNum = *(LX_RECV_BUF + 2);
001B61 9048A2            MOV     DPTR,#048A2H
001B64 E0                MOVX    A,@DPTR
001B65 904C09            MOV     DPTR,#deviceInfo+03H
001B68 F0                MOVX    @DPTR,A
  176: 				//lcd display result
  177: 				deviceInfo.bindFlag = BIND_SUCCESS;
001B69 904C07            MOV     DPTR,#deviceInfo+01H
001B6C 7401              MOV     A,#01H
001B6E F0                MOVX    @DPTR,A
  178: 			}
001B6F 8006              SJMP    ?C0033?LXPROTOCOL
001B71         ?C0032?LXPROTOCOL:
  179: 			else
  180: 			{
  181: 				deviceInfo.bindFlag =  BIND_FAIL;
001B71 904C07            MOV     DPTR,#deviceInfo+01H
001B74 7402              MOV     A,#02H
001B76 F0                MOVX    @DPTR,A
  182: 			}
001B77         ?C0033?LXPROTOCOL:
  183: 			
  184: 			btCmdBuf.len = 0x08;
001B77 904C63            MOV     DPTR,#btCmdBuf
001B7A 7408              MOV     A,#08H
001B7C F0                MOVX    @DPTR,A
  185: 			btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
001B7D A3                INC     DPTR
001B7E 7430              MOV     A,#030H
001B80 F0                MOVX    @DPTR,A
  186: 			btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
001B81 A3                INC     DPTR
001B82 741C              MOV     A,#01CH
001B84 F0                MOVX    @DPTR,A
  187: 			btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
001B85 E4                CLR     A
001B86 A3                INC     DPTR
001B87 F0                MOVX    @DPTR,A
  188: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
001B88 A3                INC     DPTR
001B89 7410              MOV     A,#010H
001B8B F0                MOVX    @DPTR,A
  189: 			btCmdBuf.DATA[4] = BIND_RSP_DATA_LEN;
001B8C A3                INC     DPTR
001B8D 7403              MOV     A,#03H
001B8F F0                MOVX    @DPTR,A
  190: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_BIND_RSP);
001B90 A3                INC     DPTR
001B91 04                INC     A
001B92 F0                MOVX    @DPTR,A
  191: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_BIND_RSP);
001B93 E4                CLR     A
001B94 A3                INC     DPTR
001B95 F0                MOVX    @DPTR,A
  192: 			btCmdBuf.DATA[7] = deviceInfo.bindFlag;
001B96 904C07            MOV     DPTR,#deviceInfo+01H
001B99 E0                MOVX    A,@DPTR
001B9A 904C6B            MOV     DPTR,#btCmdBuf+08H
001B9D F0                MOVX    @DPTR,A
  193: 
  194: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), BIND_RSP_DATA_LEN);
001B9E 7B01              MOV     R3,#01H
001BA0 7A4C              MOV     R2,#HIGH btCmdBuf+06H
001BA2 7969              MOV     R1,#LOW btCmdBuf+06H
001BA4 7D03              MOV     R5,#03H
001BA6 7C00              MOV     R4,#00H
001BA8 31EF              ACALL   _bigLittleEndianSwap
  195: 			BT_CmdFifoIn(&btCmdBuf);
001BAA 7B01              MOV     R3,#01H
001BAC 7A4C              MOV     R2,#HIGH btCmdBuf
001BAE 7963              MOV     R1,#LOW btCmdBuf
001BB0 D100              ACALL   _BT_CmdFifoIn
  196: 			lxOptStatus = OPT_BIND_RSP_WAIT_ACK;
001BB2 904C5C            MOV     DPTR,#lxOptStatus
001BB5 7414              MOV     A,#014H
001BB7 F0                MOVX    @DPTR,A
  197: 			break;
001BB8 22                RET     
  198: 		
  199: 		case OPT_LOGIN_REQ:
001BB9         ?C0034?LXPROTOCOL:
  200: 			btCmdBuf.len = 0x0f;
001BB9 904C63            MOV     DPTR,#btCmdBuf
001BBC 740F              MOV     A,#0FH
001BBE F0                MOVX    @DPTR,A
  201: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
001BBF 904C67            MOV     DPTR,#btCmdBuf+04H
001BC2 04                INC     A
001BC3 F0                MOVX    @DPTR,A
  202: 			btCmdBuf.DATA[4] = LOGIN_REQ_DATA_LEN;
001BC4 A3                INC     DPTR
001BC5 740A              MOV     A,#0AH
001BC7 F0                MOVX    @DPTR,A
  203: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_LOGIN_REQ);
001BC8 A3                INC     DPTR
001BC9 7407              MOV     A,#07H
001BCB F0                MOVX    @DPTR,A
  204: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_LOGIN_REQ);
001BCC E4                CLR     A
001BCD A3                INC     DPTR
001BCE F0                MOVX    @DPTR,A
  205: 			//Verification code:6bytes deviceID XOR MAC
  206: 			for(i=0;i<6;i++)
001BCF 904E5D            MOV     DPTR,#i
001BD2 F0                MOVX    @DPTR,A
001BD3         ?C0035?LXPROTOCOL:
001BD3 904E5D            MOV     DPTR,#i
001BD6 E0                MOVX    A,@DPTR
001BD7 FF                MOV     R7,A
001BD8 C3                CLR     C
001BD9 9406              SUBB    A,#06H
001BDB 502E              JNC     ?C0036?LXPROTOCOL
  207: 			{
  208: 				btCmdBuf.DATA[7+i] = deviceInfo.deviceID[i] ^ (*(mem_le_mac+i));
001BDD E0                MOVX    A,@DPTR
001BDE FE                MOV     R6,A
001BDF 24E8              ADD     A,#0E8H
001BE1 F582              MOV     DPL,A
001BE3 E4                CLR     A
001BE4 3443              ADDC    A,#043H
001BE6 F583              MOV     DPH,A
001BE8 E0                MOVX    A,@DPTR
001BE9 FD                MOV     R5,A
001BEA 740A              MOV     A,#LOW deviceInfo+04H
001BEC 2E                ADD     A,R6
001BED F582              MOV     DPL,A
001BEF E4                CLR     A
001BF0 344C              ADDC    A,#HIGH deviceInfo+04H
001BF2 F583              MOV     DPH,A
001BF4 E0                MOVX    A,@DPTR
001BF5 6D                XRL     A,R5
001BF6 FE                MOV     R6,A
001BF7 746B              MOV     A,#LOW btCmdBuf+08H
001BF9 2F                ADD     A,R7
001BFA F582              MOV     DPL,A
001BFC E4                CLR     A
001BFD 344C              ADDC    A,#HIGH btCmdBuf+08H
001BFF F583              MOV     DPH,A
001C01 EE                MOV     A,R6
001C02 F0                MOVX    @DPTR,A
  209: 			}
001C03 904E5D            MOV     DPTR,#i
001C06 E0                MOVX    A,@DPTR
001C07 04                INC     A
001C08 F0                MOVX    @DPTR,A
001C09 80C8              SJMP    ?C0035?LXPROTOCOL
001C0B         ?C0036?LXPROTOCOL:
  210: 			
  211: 			//user number:1bytes
  212: 			btCmdBuf.DATA[13] = deviceInfo.userNum;
001C0B 904C09            MOV     DPTR,#deviceInfo+03H
001C0E E0                MOVX    A,@DPTR
001C0F 904C71            MOV     DPTR,#btCmdBuf+0EH
001C12 F0                MOVX    @DPTR,A
  213: 			//battery:1bytes
  214: 			if(CS_Scale_JudgeLowBat(GetIfLowBat) == true)
001C13 7F01              MOV     R7,#01H
001C15 F187              ACALL   _CS_Scale_JudgeLowBat
001C17 BF0108            CJNE    R7,#01H,?C0038?LXPROTOCOL
  215: 				btCmdBuf.DATA[14] = 10;
001C1A 904C72            MOV     DPTR,#btCmdBuf+0FH
001C1D 740A              MOV     A,#0AH
001C1F F0                MOVX    @DPTR,A
001C20 8006              SJMP    ?C0039?LXPROTOCOL
001C22         ?C0038?LXPROTOCOL:
  216: 			else
  217: 				btCmdBuf.DATA[14] = 100;
001C22 904C72            MOV     DPTR,#btCmdBuf+0FH
001C25 7464              MOV     A,#064H
001C27 F0                MOVX    @DPTR,A
001C28         ?C0039?LXPROTOCOL:
  218: 
  219: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), LOGIN_REQ_DATA_LEN);
001C28 7B01              MOV     R3,#01H
001C2A 7A4C              MOV     R2,#HIGH btCmdBuf+06H
001C2C 7969              MOV     R1,#LOW btCmdBuf+06H
001C2E 7D0A              MOV     R5,#0AH
001C30 7C00              MOV     R4,#00H
001C32 31EF              ACALL   _bigLittleEndianSwap
  220: 			BT_CmdFifoIn(&btCmdBuf);
001C34 7B01              MOV     R3,#01H
001C36 7A4C              MOV     R2,#HIGH btCmdBuf
001C38 7963              MOV     R1,#LOW btCmdBuf
001C3A D100              ACALL   _BT_CmdFifoIn
  221: 			YC_Delay10ms(10);
001C3C 7F0A              MOV     R7,#0AH
001C3E B1E8              ACALL   _YC_Delay10ms
  222: 			lxOptStatus = OPT_LOGIN_REQ_WAIT_ACK;
001C40 904C5C            MOV     DPTR,#lxOptStatus
001C43 7417              MOV     A,#017H
001C45 F0                MOVX    @DPTR,A
  223: 			break;
001C46 22                RET     
  224: 		case OPT_LOGIN_RSP:
001C47         ?C0040?LXPROTOCOL:
  225: 			*(mem_register_buf + 2) = *(LX_RECV_BUF + 2);
001C47 9048A2            MOV     DPTR,#048A2H
001C4A E0                MOVX    A,@DPTR
001C4B 904C10            MOV     DPTR,#04C10H
001C4E F0                MOVX    @DPTR,A
  226: 			if(*(mem_register_buf + 2) == LOGIN_SUCCESS)
001C4F E0                MOVX    A,@DPTR
001C50 6401              XRL     A,#01H
001C52 7050              JNZ     ?C0041?LXPROTOCOL
  227: 			{
  228: 				//Verification code:6bytes deviceID XOR MAC
  229: 				for(i=0;i<6;i++)
001C54 904E5D            MOV     DPTR,#i
001C57 F0                MOVX    @DPTR,A
001C58         ?C0042?LXPROTOCOL:
  230: 				{
  231: 					if(*(LX_RECV_BUF + 3+i) != *(mem_register_buf + 4 + i) ^ (*(mem_le_mac+i)))
001C58 904E5D            MOV     DPTR,#i
001C5B E0                MOVX    A,@DPTR
001C5C FF                MOV     R7,A
001C5D 2412              ADD     A,#012H
001C5F F582              MOV     DPL,A
001C61 E4                CLR     A
001C62 344C              ADDC    A,#04CH
001C64 F583              MOV     DPH,A
001C66 E0                MOVX    A,@DPTR
001C67 FE                MOV     R6,A
001C68 74A3              MOV     A,#0A3H
001C6A 2F                ADD     A,R7
001C6B F582              MOV     DPL,A
001C6D E4                CLR     A
001C6E 3448              ADDC    A,#048H
001C70 F583              MOV     DPH,A
001C72 E0                MOVX    A,@DPTR
001C73 6E                XRL     A,R6
001C74 6004              JZ      ?C0046?LXPROTOCOL
001C76 7F01              MOV     R7,#01H
001C78 8002              SJMP    ?C0047?LXPROTOCOL
001C7A         ?C0046?LXPROTOCOL:
001C7A 7F00              MOV     R7,#00H
001C7C         ?C0047?LXPROTOCOL:
001C7C 904E5D            MOV     DPTR,#i
001C7F E0                MOVX    A,@DPTR
001C80 24E8              ADD     A,#0E8H
001C82 F582              MOV     DPL,A
001C84 E4                CLR     A
001C85 3443              ADDC    A,#043H
001C87 F583              MOV     DPH,A
001C89 E0                MOVX    A,@DPTR
001C8A 6F                XRL     A,R7
001C8B 6006              JZ      ?C0044?LXPROTOCOL
  232: 					{
  233: 						//disconnected
  234: 						btCmdBuf.len = 0x01;
001C8D 904C63            MOV     DPTR,#btCmdBuf
001C90 7401              MOV     A,#01H
001C92 F0                MOVX    @DPTR,A
  235: 						//btCmdBuf.DATA[0] = CS_CMD_LE_DISC_REQ;
  236: 						//BT_CmdFifoIn(&btCmdBuf);
  237: 						//return;
  238: 					}
  239: 				}
001C93         ?C0044?LXPROTOCOL:
001C93 904E5D            MOV     DPTR,#i
001C96 E0                MOVX    A,@DPTR
001C97 04                INC     A
001C98 F0                MOVX    @DPTR,A
001C99 E0                MOVX    A,@DPTR
001C9A B406BB            CJNE    A,#06H,?C0042?LXPROTOCOL
001C9D         ?C0043?LXPROTOCOL:
  240: 				//login success:sync time
  241: 				lxOptStatus = OPT_INIT_REQ;
001C9D 904C5C            MOV     DPTR,#lxOptStatus
001CA0 7420              MOV     A,#020H
001CA2 F0                MOVX    @DPTR,A
  242: 			}
001CA3 22                RET     
001CA4         ?C0041?LXPROTOCOL:
  243: 			else
  244: 			{
  245: 				lxOptStatus = OPT_IDLE;
001CA4 E4                CLR     A
001CA5 904C5C            MOV     DPTR,#lxOptStatus
001CA8 F0                MOVX    @DPTR,A
  246: 				//disconnected
  247: 				btCmdBuf.len = 0x01;
001CA9 904C63            MOV     DPTR,#btCmdBuf
001CAC 04                INC     A
001CAD F0                MOVX    @DPTR,A
  248: 				btCmdBuf.DATA[0] = CS_CMD_LE_DISC_REQ;
001CAE A3                INC     DPTR
001CAF 7429              MOV     A,#029H
001CB1 F0                MOVX    @DPTR,A
  249: 				BT_CmdFifoIn(&btCmdBuf);
001CB2 7B01              MOV     R3,#01H
001CB4 7A4C              MOV     R2,#HIGH btCmdBuf
001CB6 7963              MOV     R1,#LOW btCmdBuf
001CB8 C100              AJMP    _BT_CmdFifoIn
  250: 				return;
  251: 			}
  252: 			break;
  253: 			
  254: 		case OPT_INIT_REQ:
001CBA         ?C0050?LXPROTOCOL:
  255: 			btCmdBuf.len = 0x08;
001CBA 904C63            MOV     DPTR,#btCmdBuf
001CBD 7408              MOV     A,#08H
001CBF F0                MOVX    @DPTR,A
  256: 			btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
001CC0 A3                INC     DPTR
001CC1 7430              MOV     A,#030H
001CC3 F0                MOVX    @DPTR,A
  257: 			btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
001CC4 A3                INC     DPTR
001CC5 741C              MOV     A,#01CH
001CC7 F0                MOVX    @DPTR,A
  258: 			btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
001CC8 E4                CLR     A
001CC9 A3                INC     DPTR
001CCA F0                MOVX    @DPTR,A
  259: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
001CCB A3                INC     DPTR
001CCC 7410              MOV     A,#010H
001CCE F0                MOVX    @DPTR,A
  260: 			btCmdBuf.DATA[4] = INIT_REQ_DATA_LEN;
001CCF A3                INC     DPTR
001CD0 7403              MOV     A,#03H
001CD2 F0                MOVX    @DPTR,A
  261: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_INIT_REQ);
001CD3 A3                INC     DPTR
001CD4 7409              MOV     A,#09H
001CD6 F0                MOVX    @DPTR,A
  262: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_INIT_REQ);
001CD7 E4                CLR     A
001CD8 A3                INC     DPTR
001CD9 F0                MOVX    @DPTR,A
  263: 			btCmdBuf.DATA[7] = 0x08;
001CDA A3                INC     DPTR
001CDB 7408              MOV     A,#08H
001CDD F0                MOVX    @DPTR,A
  264: 			
  265: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), INIT_REQ_DATA_LEN);
001CDE 7B01              MOV     R3,#01H
001CE0 7A4C              MOV     R2,#HIGH btCmdBuf+06H
001CE2 7969              MOV     R1,#LOW btCmdBuf+06H
001CE4 7D03              MOV     R5,#03H
001CE6 7C00              MOV     R4,#00H
001CE8 31EF              ACALL   _bigLittleEndianSwap
  266: 			BT_CmdFifoIn(&btCmdBuf);
001CEA 7B01              MOV     R3,#01H
001CEC 7A4C              MOV     R2,#HIGH btCmdBuf
001CEE 7963              MOV     R1,#LOW btCmdBuf
001CF0 D100              ACALL   _BT_CmdFifoIn
  267: 			lxOptStatus = OPT_INIT_REQ_WAIT_ACK;
001CF2 904C5C            MOV     DPTR,#lxOptStatus
001CF5 7421              MOV     A,#021H
001CF7 F0                MOVX    @DPTR,A
  268: 			break;
001CF8 22                RET     
  269: 		case OPT_INIT_RSP:
001CF9         ?C0051?LXPROTOCOL:
  270: 			if(*(LX_RECV_BUF + 2) == 0x08)
001CF9 9048A2            MOV     DPTR,#048A2H
001CFC E0                MOVX    A,@DPTR
001CFD B40817            CJNE    A,#08H,?C0052?LXPROTOCOL
  271: 			{
  272: 				//save UTC time
  273: 				dmemcpy((pxbyte)&UTCTime, LX_RECV_BUF + 3, 4);
001D00 7A4C              MOV     R2,#HIGH UTCTime
001D02 795E              MOV     R1,#LOW UTCTime
001D04 7B01              MOV     R3,#01H
001D06 C003              PUSH    AR3
001D08 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
001D0A 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
001D0D 7515A3            MOV     ?_dmemcpy?BYTE+05H,#0A3H
001D10 751604            MOV     ?_dmemcpy?BYTE+06H,#04H
001D13 D003              POP     AR3
001D15 F121              ACALL   _dmemcpy
  274: 			}
001D17         ?C0052?LXPROTOCOL:
  275: 			lxOptStatus = OPT_IDLE;
001D17 E4                CLR     A
001D18 904C5C            MOV     DPTR,#lxOptStatus
001D1B F0                MOVX    @DPTR,A
  276: 			break;
001D1C 22                RET     
  277: 			
  278: 		case OPT_TIME_SETTING_REQ:
001D1D         ?C0053?LXPROTOCOL:
  279: 			if(*(LX_RECV_BUF+2) &0x01 == 1)
001D1D 9048A2            MOV     DPTR,#048A2H
001D20 E0                MOVX    A,@DPTR
001D21 30E017            JNB     ACC.0,?C0054?LXPROTOCOL
  280: 			{
  281: 				dmemcpy((pxbyte)&UTCTime, LX_RECV_BUF + 3, 4);
001D24 7A4C              MOV     R2,#HIGH UTCTime
001D26 795E              MOV     R1,#LOW UTCTime
001D28 7B01              MOV     R3,#01H
001D2A C003              PUSH    AR3
001D2C 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
001D2E 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
001D31 7515A3            MOV     ?_dmemcpy?BYTE+05H,#0A3H
001D34 751604            MOV     ?_dmemcpy?BYTE+06H,#04H
001D37 D003              POP     AR3
001D39 F121              ACALL   _dmemcpy
  282: 			}
001D3B         ?C0054?LXPROTOCOL:
  283: 			/*
  284: 			if(*(LX_RECV_BUF+2) &0x02 == 1)
  285: 			{
  286: 
  287: 			}
  288: 			*/
  289: 			lxSettingDeviceRespone(CMD_TIME_SETTING_REQ, DEVICE_RSP_SUCCESS);
001D3B 7D01              MOV     R5,#01H
001D3D 7F02              MOV     R7,#02H
001D3F 7E10              MOV     R6,#010H
001D41 B1A5              ACALL   _lxSettingDeviceRespone
  290: 			lxOptStatus = OPT_TIME_SETTING_RSP_WAIT_ACK;
001D43 904C5C            MOV     DPTR,#lxOptStatus
001D46 7426              MOV     A,#026H
001D48 F0                MOVX    @DPTR,A
  291: 			break;
001D49 22                RET     
  292: 		
  293: 		case OPT_UNIT_SETTING_REQ:
001D4A         ?C0055?LXPROTOCOL:
  294: 			//save
  295: 			if(*(LX_RECV_BUF + 2) <= 3)
001D4A 9048A2            MOV     DPTR,#048A2H
001D4D E0                MOVX    A,@DPTR
001D4E D3                SETB    C
001D4F 9403              SUBB    A,#03H
001D51 500F              JNC     ?C0056?LXPROTOCOL
  296: 			{
  297: 				R_Selet_Unit = *(LX_RECV_BUF + 2);
001D53 E0                MOVX    A,@DPTR
001D54 904CC6            MOV     DPTR,#R_Selet_Unit
001D57 F0                MOVX    @DPTR,A
  298: 				lxSettingDeviceRespone(CMD_UNIT_SETTING_REQ, DEVICE_RSP_SUCCESS);
001D58 7D01              MOV     R5,#01H
001D5A 7F04              MOV     R7,#04H
001D5C 7E10              MOV     R6,#010H
001D5E B1A5              ACALL   _lxSettingDeviceRespone
  299: 			}
001D60 8008              SJMP    ?C0057?LXPROTOCOL
001D62         ?C0056?LXPROTOCOL:
  300: 			else
  301: 			{
  302: 				lxSettingDeviceRespone(CMD_UNIT_SETTING_REQ, DEVICE_RSP_FAIL);
001D62 7D02              MOV     R5,#02H
001D64 7F04              MOV     R7,#04H
001D66 7E10              MOV     R6,#010H
001D68 B1A5              ACALL   _lxSettingDeviceRespone
  303: 			}
001D6A         ?C0057?LXPROTOCOL:
  304: 			lxOptStatus = OPT_UNIT_SETTING_RSP_WAIT_ACK;
001D6A 904C5C            MOV     DPTR,#lxOptStatus
001D6D 7429              MOV     A,#029H
001D6F F0                MOVX    @DPTR,A
  305: 			break;
001D70 22                RET     
  306: 
  307: 		case OPT_DATA_DEL_SETTING_REQ:
001D71         ?C0058?LXPROTOCOL:
  308: 			if(*(LX_RECV_BUF + 3)&0x01 == 1)
001D71 9048A3            MOV     DPTR,#048A3H
001D74 E0                MOVX    A,@DPTR
001D75 30E002            JNB     ACC.0,?C0061?LXPROTOCOL
  309: 			{
  310: 				delUserData();
001D78 F1B7              ACALL   delUserData
  311: 			}
  312: 			if(*(LX_RECV_BUF + 3)&0x04 == 1)
  313: 			{
  314: 				UTCTime = 0;
  315: 				R_Selet_Unit = CS_ScaleDisplay_L_kg;
  316: 			}
  317: 			if(*(LX_RECV_BUF + 3)&0x08 == 1)
  318: 			{
  319: 				QueueInit();
  320: 			}
001D7A         ?C0061?LXPROTOCOL:
  321: 			
  322: 			lxSettingDeviceRespone(CMD_DATA_CLEAR_SETTING_REQ, DEVICE_RSP_SUCCESS);
001D7A 7D01              MOV     R5,#01H
001D7C 7F05              MOV     R7,#05H
001D7E 7E10              MOV     R6,#010H
001D80 B1A5              ACALL   _lxSettingDeviceRespone
  323: 			lxOptStatus = OPT_DATA_DEL_SETTING_RSP_WAIT_ACK;
001D82 904C5C            MOV     DPTR,#lxOptStatus
001D85 7432              MOV     A,#032H
001D87 F0                MOVX    @DPTR,A
  324: 			break;
001D88 22                RET     
  325: #endif
  326: 		case OPT_SYNC_DATA_REQ:
001D89         ?C0062?LXPROTOCOL:
  327: 			//forbidden
  328: 			if(*(LX_RECV_BUF + 3) == 0)
001D89 9048A3            MOV     DPTR,#048A3H
001D8C E0                MOVX    A,@DPTR
001D8D 7005              JNZ     ?C0063?LXPROTOCOL
  329: 			{
  330: 				lxOptStatus = OPT_IDLE;
001D8F 904C5C            MOV     DPTR,#lxOptStatus
001D92 F0                MOVX    @DPTR,A
  331: 			}
001D93 22                RET     
001D94         ?C0063?LXPROTOCOL:
  332: 			else
  333: 			{
  334: 				lxOptStatus = OPT_SYNC_DATA_RSP;
001D94 904C5C            MOV     DPTR,#lxOptStatus
001D97 7436              MOV     A,#036H
001D99 F0                MOVX    @DPTR,A
  335: 			}
  336: 			break;
001D9A 22                RET     
  337: 		case OPT_SYNC_DATA_RSP:
001D9B         ?C0065?LXPROTOCOL:
  338: 			//send measuredata
  339: 			sendHistoryData();
001D9B 123AF4            LCALL   sendHistoryData
  340: 			lxOptStatus = OPT_SYNC_DATA_RSP_WAIT_ACK;
001D9E 904C5C            MOV     DPTR,#lxOptStatus
001DA1 7437              MOV     A,#037H
001DA3 F0                MOVX    @DPTR,A
  341: 			break;
  342: 		/*
  343: 		case LX_OPT_STATUS_RESEND:
  344: 			BT_CmdFifoIn(&btCmdBuf);
  345: 			lxOptStatus = OPT_IDLE;
  346: 			break;
  347: 			*/
  348: 	}
  349: }
001DA4         ?C0049?LXPROTOCOL:
001DA4 22                RET     
----- FUNCTION lxOptProcess (END) -------


----- FUNCTION _lxSettingDeviceRespone (BEGIN) -----
 FILE: 'lxProtocol.c'
  351: static void lxSettingDeviceRespone(u16_t cmd, u8_t state)
  352: {
;---- Variable 'cmd' assigned to Register 'R2/R3' ----
001DA5 AB07              MOV     R3,AR7
001DA7 AA06              MOV     R2,AR6
;---- Variable 'state' assigned to Register 'R5' ----
  353: 	btCmdBuf.len = DEVICE_RSP_DATA_LEN + 5;
  354: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
001DA9 904C63            MOV     DPTR,#btCmdBuf
001DAC 740A              MOV     A,#0AH
001DAE F0                MOVX    @DPTR,A
  355: 	btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
001DAF A3                INC     DPTR
001DB0 7430              MOV     A,#030H
001DB2 F0                MOVX    @DPTR,A
  356: 	btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
001DB3 A3                INC     DPTR
001DB4 741C              MOV     A,#01CH
001DB6 F0                MOVX    @DPTR,A
  357: 	btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
001DB7 E4                CLR     A
001DB8 A3                INC     DPTR
001DB9 F0                MOVX    @DPTR,A
  358: 	btCmdBuf.DATA[4] = DEVICE_RSP_DATA_LEN;
001DBA A3                INC     DPTR
001DBB 7410              MOV     A,#010H
001DBD F0                MOVX    @DPTR,A
  359: 	btCmdBuf.DATA[5] = LO_UINT16(CMD_DEVICE_RSP);
001DBE A3                INC     DPTR
001DBF 7405              MOV     A,#05H
001DC1 F0                MOVX    @DPTR,A
  360: 	btCmdBuf.DATA[6] = HI_UINT16(CMD_DEVICE_RSP);
001DC2 E4                CLR     A
001DC3 A3                INC     DPTR
001DC4 F0                MOVX    @DPTR,A
  361: 	btCmdBuf.DATA[7] = LO_UINT16(cmd);
001DC5 A3                INC     DPTR
001DC6 7410              MOV     A,#010H
001DC8 F0                MOVX    @DPTR,A
  362: 	btCmdBuf.DATA[8] = HI_UINT16(cmd);
001DC9 EF                MOV     A,R7
001DCA A3                INC     DPTR
001DCB F0                MOVX    @DPTR,A
  363: 	btCmdBuf.DATA[9] = state;
001DCC EE                MOV     A,R6
001DCD A3                INC     DPTR
001DCE F0                MOVX    @DPTR,A
  364: 
001DCF A3                INC     DPTR
001DD0 ED                MOV     A,R5
001DD1 F0                MOVX    @DPTR,A
  365: 	bigLittleEndianSwap(&(btCmdBuf.DATA[5]), DEVICE_RSP_DATA_LEN);
001DD2 7B01              MOV     R3,#01H
001DD4 7A4C              MOV     R2,#HIGH btCmdBuf+06H
001DD6 7969              MOV     R1,#LOW btCmdBuf+06H
001DD8 7D05              MOV     R5,#05H
001DDA 7C00              MOV     R4,#00H
001DDC 31EF              ACALL   _bigLittleEndianSwap
  366: 	BT_CmdFifoIn(&btCmdBuf);
001DDE 7B01              MOV     R3,#01H
001DE0 7A4C              MOV     R2,#HIGH btCmdBuf
001DE2 7963              MOV     R1,#LOW btCmdBuf
001DE4 D100              ACALL   _BT_CmdFifoIn
  367: 	YC_Delay10ms(10);
001DE6 7F0A              MOV     R7,#0AH
;----                  JMP     _YC_Delay10ms
  368: }
----- FUNCTION _lxSettingDeviceRespone (END) -------


----- FUNCTION _YC_Delay10ms (BEGIN) -----
 FILE: 'YC_Utilities.c'
   60: void YC_Delay10ms(u8_t Time)
   61: {
;---- Variable 'Time' assigned to Register 'R7' ----
   62: 	u16_t j; 
   63: 	for(;Time>0;Time--)
001DE8         ?C0027?YC_UTILITIES:
001DE8 EF                MOV     A,R7
001DE9 D3                SETB    C
001DEA 9400              SUBB    A,#00H
001DEC 4011              JC      ?C0033?YC_UTILITIES
   64: 	{
   65: 		for(j=0;j<11900;j++);
;---- Variable 'j' assigned to Register 'R4/R5' ----
001DEE E4                CLR     A
001DEF FD                MOV     R5,A
001DF0 FC                MOV     R4,A
001DF1         ?C0030?YC_UTILITIES:
001DF1 0D                INC     R5
001DF2 BD0001            CJNE    R5,#00H,?C0054?YC_UTILITIES
001DF5 0C                INC     R4
001DF6         ?C0054?YC_UTILITIES:
001DF6 BC2EF8            CJNE    R4,#02EH,?C0030?YC_UTILITIES
001DF9 BD7CF5            CJNE    R5,#07CH,?C0030?YC_UTILITIES
   66: 	}
001DFC         ?C0029?YC_UTILITIES:
001DFC 1F                DEC     R7
001DFD 80E9              SJMP    ?C0027?YC_UTILITIES
   67: }
001DFF         ?C0033?YC_UTILITIES:
001DFF 22                RET     
----- FUNCTION _YC_Delay10ms (END) -------


----- FUNCTION _BT_CmdFifoIn (BEGIN) -----
 FILE: 'BT_IPC.c'
    7: bool BT_CmdFifoIn(BT_CMDFIFO_t *pFIFO)
    8: {
001E00 904E05            MOV     DPTR,#pFIFO
001E03 EB                MOV     A,R3
001E04 F0                MOVX    @DPTR,A
001E05 A3                INC     DPTR
001E06 EA                MOV     A,R2
001E07 F0                MOVX    @DPTR,A
001E08 A3                INC     DPTR
001E09 E9                MOV     A,R1
001E0A F0                MOVX    @DPTR,A
    9: 	u16_t new_wprt,new_cmd_len,i;
   10: 	if( pFIFO->len ==0 )
001E0B 1200F9            LCALL   ?C?CLDPTR
001E0E 7002              JNZ     ?C0001?BT_IPC
   11: 		return false;
001E10 C3                CLR     C
001E11 22                RET     
001E12         ?C0001?BT_IPC:
   12: 	new_cmd_len = BT_GetCmdFifoDepth()+pFIFO->len+2;
001E12 12299B            LCALL   BT_GetCmdFifoDepth
001E15 904E05            MOV     DPTR,#pFIFO
001E18 E0                MOVX    A,@DPTR
001E19 FB                MOV     R3,A
001E1A A3                INC     DPTR
001E1B E0                MOVX    A,@DPTR
001E1C FA                MOV     R2,A
001E1D A3                INC     DPTR
001E1E E0                MOVX    A,@DPTR
001E1F F9                MOV     R1,A
001E20 1200F9            LCALL   ?C?CLDPTR
001E23 FD                MOV     R5,A
001E24 2F                ADD     A,R7
001E25 FF                MOV     R7,A
001E26 E4                CLR     A
001E27 33                RLC     A
001E28 CF                XCH     A,R7
001E29 2402              ADD     A,#02H
001E2B CF                XCH     A,R7
001E2C 3400              ADDC    A,#00H
001E2E FE                MOV     R6,A
;---- Variable 'new_cmd_len' assigned to Register 'R6/R7' ----
   13: 	if(new_cmd_len<=BT_CMD_BUF_LEN)
001E2F D3                SETB    C
001E30 EF                MOV     A,R7
001E31 9480              SUBB    A,#080H
001E33 EE                MOV     A,R6
001E34 9400              SUBB    A,#00H
001E36 4002              JC      $ + 4H
001E38 E11F              AJMP    ?C0003?BT_IPC
   14: 	{
   15: 		new_wprt = ESWAP(BT_CmdWptr);
001E3A 904A03            MOV     DPTR,#BT_CmdWptr+01H
001E3D E0                MOVX    A,@DPTR
001E3E FA                MOV     R2,A
001E3F 904A02            MOV     DPTR,#BT_CmdWptr
001E42 E0                MOVX    A,@DPTR
001E43 FF                MOV     R7,A
001E44 EA                MOV     A,R2
001E45 FE                MOV     R6,A
001E46 EF                MOV     A,R7
001E47 904E08            MOV     DPTR,#new_wprt
001E4A EE                MOV     A,R6
001E4B F0                MOVX    @DPTR,A
001E4C A3                INC     DPTR
001E4D EF                MOV     A,R7
001E4E F0                MOVX    @DPTR,A
   16: 		HWRITE(new_wprt++,CS_PREFIX_CMD);
001E4F 904E08            MOV     DPTR,#new_wprt
001E52 E4                CLR     A
001E53 75F001            MOV     B,#01H
001E56 1201C8            LCALL   ?C?ILDIX
001E59 85F082            MOV     DPL,B
001E5C F583              MOV     DPH,A
001E5E 74C5              MOV     A,#0C5H
001E60 F0                MOVX    @DPTR,A
   17: 		if(new_wprt == (mem_cmd_buf_end + 1))
001E61 904E08            MOV     DPTR,#new_wprt
001E64 E0                MOVX    A,@DPTR
001E65 B44F0E            CJNE    A,#04FH,?C0004?BT_IPC
001E68 A3                INC     DPTR
001E69 E0                MOVX    A,@DPTR
001E6A B48009            CJNE    A,#080H,?C0004?BT_IPC
   18: 		{
   19: 			new_wprt = mem_cmd_buf;
001E6D 904E08            MOV     DPTR,#new_wprt
001E70 744F              MOV     A,#04FH
001E72 F0                MOVX    @DPTR,A
001E73 A3                INC     DPTR
001E74 E4                CLR     A
001E75 F0                MOVX    @DPTR,A
   20: 		}
001E76         ?C0004?BT_IPC:
   21: 		HWRITE(new_wprt++,pFIFO->len);
001E76 904E08            MOV     DPTR,#new_wprt
001E79 E4                CLR     A
001E7A 75F001            MOV     B,#01H
001E7D 1201C8            LCALL   ?C?ILDIX
001E80 85F082            MOV     DPL,B
001E83 F583              MOV     DPH,A
001E85 ED                MOV     A,R5
001E86 F0                MOVX    @DPTR,A
   22: 		if(new_wprt == (mem_cmd_buf_end + 1))
001E87 904E08            MOV     DPTR,#new_wprt
001E8A E0                MOVX    A,@DPTR
001E8B B44F0E            CJNE    A,#04FH,?C0005?BT_IPC
001E8E A3                INC     DPTR
001E8F E0                MOVX    A,@DPTR
001E90 B48009            CJNE    A,#080H,?C0005?BT_IPC
   23: 		{
   24: 			new_wprt = mem_cmd_buf;
001E93 904E08            MOV     DPTR,#new_wprt
001E96 744F              MOV     A,#04FH
001E98 F0                MOVX    @DPTR,A
001E99 A3                INC     DPTR
001E9A E4                CLR     A
001E9B F0                MOVX    @DPTR,A
   25: 		}
001E9C         ?C0005?BT_IPC:
   26: 		for(i=0;i<pFIFO->len;i++)
001E9C E4                CLR     A
001E9D 904E0A            MOV     DPTR,#i
001EA0 F0                MOVX    @DPTR,A
001EA1 A3                INC     DPTR
001EA2 F0                MOVX    @DPTR,A
001EA3         ?C0006?BT_IPC:
001EA3 904E05            MOV     DPTR,#pFIFO
001EA6 E0                MOVX    A,@DPTR
001EA7 FB                MOV     R3,A
001EA8 A3                INC     DPTR
001EA9 E0                MOVX    A,@DPTR
001EAA FA                MOV     R2,A
001EAB A3                INC     DPTR
001EAC E0                MOVX    A,@DPTR
001EAD F9                MOV     R1,A
001EAE 1200F9            LCALL   ?C?CLDPTR
001EB1 FF                MOV     R7,A
001EB2 904E0A            MOV     DPTR,#i
001EB5 E0                MOVX    A,@DPTR
001EB6 FC                MOV     R4,A
001EB7 A3                INC     DPTR
001EB8 E0                MOVX    A,@DPTR
001EB9 FD                MOV     R5,A
001EBA C3                CLR     C
001EBB 9F                SUBB    A,R7
001EBC EC                MOV     A,R4
001EBD 9400              SUBB    A,#00H
001EBF 5047              JNC     ?C0007?BT_IPC
   27: 		{
   28: 			HWRITE(new_wprt++,pFIFO->DATA[i]);
001EC1 E9                MOV     A,R1
001EC2 2401              ADD     A,#01H
001EC4 F9                MOV     R1,A
001EC5 E4                CLR     A
001EC6 3A                ADDC    A,R2
001EC7 FA                MOV     R2,A
001EC8 E9                MOV     A,R1
001EC9 2D                ADD     A,R5
001ECA F9                MOV     R1,A
001ECB EA                MOV     A,R2
001ECC 3C                ADDC    A,R4
001ECD FA                MOV     R2,A
001ECE 1200F9            LCALL   ?C?CLDPTR
001ED1 FF                MOV     R7,A
001ED2 904E08            MOV     DPTR,#new_wprt
001ED5 E4                CLR     A
001ED6 75F001            MOV     B,#01H
001ED9 1201C8            LCALL   ?C?ILDIX
001EDC 85F082            MOV     DPL,B
001EDF F583              MOV     DPH,A
001EE1 EF                MOV     A,R7
001EE2 F0                MOVX    @DPTR,A
   29: 			if(new_wprt == (mem_cmd_buf_end + 1))
001EE3 904E08            MOV     DPTR,#new_wprt
001EE6 E0                MOVX    A,@DPTR
001EE7 B44F0E            CJNE    A,#04FH,?C0008?BT_IPC
001EEA A3                INC     DPTR
001EEB E0                MOVX    A,@DPTR
001EEC B48009            CJNE    A,#080H,?C0008?BT_IPC
   30: 			{
   31: 				new_wprt = mem_cmd_buf;
001EEF 904E08            MOV     DPTR,#new_wprt
001EF2 744F              MOV     A,#04FH
001EF4 F0                MOVX    @DPTR,A
001EF5 A3                INC     DPTR
001EF6 E4                CLR     A
001EF7 F0                MOVX    @DPTR,A
   32: 			}
   33: 		}
001EF8         ?C0008?BT_IPC:
001EF8 904E0B            MOV     DPTR,#i+01H
001EFB E0                MOVX    A,@DPTR
001EFC 04                INC     A
001EFD F0                MOVX    @DPTR,A
001EFE 7006              JNZ     ?C0030?BT_IPC
001F00 904E0A            MOV     DPTR,#i
001F03 E0                MOVX    A,@DPTR
001F04 04                INC     A
001F05 F0                MOVX    @DPTR,A
001F06         ?C0030?BT_IPC:
001F06 809B              SJMP    ?C0006?BT_IPC
001F08         ?C0007?BT_IPC:
   34: 		BT_CmdWptr = ESWAP(new_wprt);
001F08 904E08            MOV     DPTR,#new_wprt
001F0B E0                MOVX    A,@DPTR
001F0C FC                MOV     R4,A
001F0D A3                INC     DPTR
001F0E E0                MOVX    A,@DPTR
001F0F FA                MOV     R2,A
001F10 EC                MOV     A,R4
001F11 FF                MOV     R7,A
001F12 EA                MOV     A,R2
001F13 FE                MOV     R6,A
001F14 EF                MOV     A,R7
001F15 904A02            MOV     DPTR,#BT_CmdWptr
001F18 EE                MOV     A,R6
001F19 F0                MOVX    @DPTR,A
001F1A A3                INC     DPTR
001F1B EF                MOV     A,R7
001F1C F0                MOVX    @DPTR,A
   35: 		return true;
001F1D D3                SETB    C
001F1E 22                RET     
   36: 	}
001F1F         ?C0003?BT_IPC:
   37: 	else
   38: 	{
   39: 		return false;
001F1F C3                CLR     C
   40: 	}
   41: }
001F20 22                RET     
----- FUNCTION _BT_CmdFifoIn (END) -------


----- FUNCTION _dmemcpy (BEGIN) -----
 FILE: 'YC_Utilities.c'
   22: void dmemcpy(u8_t *dest, u8_t* src, u8_t len) small
   23: {
001F21 8B10              MOV     dest,R3
001F23 8A11              MOV     dest+01H,R2
001F25 8912              MOV     dest+02H,R1
001F27         ?C0008?YC_UTILITIES:
   24: 	while(len--)
001F27 AF16              MOV     R7,len
001F29 1516              DEC     len
001F2B EF                MOV     A,R7
001F2C 6026              JZ      ?C0010?YC_UTILITIES
   25: 		*dest++ = *src++;
001F2E AB13              MOV     R3,src
001F30 0515              INC     src+02H
001F32 E515              MOV     A,src+02H
001F34 AA14              MOV     R2,src+01H
001F36 7002              JNZ     ?C0047?YC_UTILITIES
001F38 0514              INC     src+01H
001F3A         ?C0047?YC_UTILITIES:
001F3A 14                DEC     A
001F3B F9                MOV     R1,A
001F3C 1200F9            LCALL   ?C?CLDPTR
001F3F FF                MOV     R7,A
001F40 AB10              MOV     R3,dest
001F42 0512              INC     dest+02H
001F44 E512              MOV     A,dest+02H
001F46 AA11              MOV     R2,dest+01H
001F48 7002              JNZ     ?C0048?YC_UTILITIES
001F4A 0511              INC     dest+01H
001F4C         ?C0048?YC_UTILITIES:
001F4C 14                DEC     A
001F4D F9                MOV     R1,A
001F4E EF                MOV     A,R7
001F4F 12013F            LCALL   ?C?CSTPTR
001F52 80D3              SJMP    ?C0008?YC_UTILITIES
   26: 	return;
   27: }
001F54         ?C0010?YC_UTILITIES:
001F54 22                RET     
----- FUNCTION _dmemcpy (END) -------


----- FUNCTION _lxSendRecvDataACK (BEGIN) -----
 FILE: 'lxProtocol.c'
   31: static void lxSendRecvDataACK(u16_t handle, u8_t state)
   32: {
;---- Variable 'handle' assigned to Register 'R2/R3' ----
001F55 AB07              MOV     R3,AR7
001F57 AA06              MOV     R2,AR6
;---- Variable 'state' assigned to Register 'R5' ----
   33: 	if(notifyValueUUIDA625 != NOTIFY_ENABLE)
   34: 	{
001F59 904C5A            MOV     DPTR,#notifyValueUUIDA625
001F5C E0                MOVX    A,@DPTR
001F5D 6401              XRL     A,#01H
001F5F 7025              JNZ     ?C0006?LXPROTOCOL
   35: 		return;
   36: 	}
001F61         ?C0005?LXPROTOCOL:
   37: 
   38: 	btCmdBuf.len = 0x06;
001F61 904C63            MOV     DPTR,#btCmdBuf
001F64 7406              MOV     A,#06H
001F66 F0                MOVX    @DPTR,A
   39: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
001F67 A3                INC     DPTR
001F68 7430              MOV     A,#030H
001F6A F0                MOVX    @DPTR,A
   40: 	btCmdBuf.DATA[1] = LO_UINT16(handle);
001F6B EB                MOV     A,R3
001F6C A3                INC     DPTR
001F6D F0                MOVX    @DPTR,A
   41: 	btCmdBuf.DATA[2] = HI_UINT16(handle);
001F6E EA                MOV     A,R2
001F6F A3                INC     DPTR
001F70 F0                MOVX    @DPTR,A
   42: 	btCmdBuf.DATA[3] = ACK_FRAME;
001F71 E4                CLR     A
001F72 A3                INC     DPTR
001F73 F0                MOVX    @DPTR,A
   43: 	btCmdBuf.DATA[4] = RECV_ACK_FRAME_LEN;
001F74 A3                INC     DPTR
001F75 04                INC     A
001F76 F0                MOVX    @DPTR,A
   44: 	btCmdBuf.DATA[5] = state;
001F77 A3                INC     DPTR
001F78 ED                MOV     A,R5
001F79 F0                MOVX    @DPTR,A
   45: 	
   46: 	BT_CmdFifoIn(&btCmdBuf);
001F7A 7B01              MOV     R3,#01H
001F7C 7A4C              MOV     R2,#HIGH btCmdBuf
001F7E 7963              MOV     R1,#LOW btCmdBuf
001F80 D100              ACALL   _BT_CmdFifoIn
   47: 	YC_Delay10ms(10);
001F82 7F0A              MOV     R7,#0AH
001F84 B1E8              ACALL   _YC_Delay10ms
   48: }
001F86         ?C0006?LXPROTOCOL:
001F86 22                RET     
----- FUNCTION _lxSendRecvDataACK (END) -------


----- FUNCTION _CS_Scale_JudgeLowBat (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  627: u8_t CS_Scale_JudgeLowBat(u8_t option)
  628: {
;---- Variable 'option' assigned to Register 'R7' ----
  629: 	static	u8_t xdata B_Weight_LowBat;			//低电标志
  630: 	
  631: 	if(R_1186sys_state&CS_Scale_LowBatBit==true)
  632: 		{
  633: 		B_Weight_LowBat = true;
  634: 		R_Display_Err=CS_ScaleDisplay_L_err;
  635: 		}
001F87         ?C0081?CS_SCALE_PROC:
  636: 	else
  637: 		B_Weight_LowBat = false;
001F87 E4                CLR     A
001F88 904C9F            MOV     DPTR,#B_Weight_LowBat
001F8B F0                MOVX    @DPTR,A
001F8C         ?C0082?CS_SCALE_PROC:
  638: 
  639: 	if(option==GetIfLowBat)
001F8C EF                MOV     A,R7
001F8D B40106            CJNE    A,#01H,?C0083?CS_SCALE_PROC
  640: 		return B_Weight_LowBat;
001F90 904C9F            MOV     DPTR,#B_Weight_LowBat
001F93 E0                MOVX    A,@DPTR
001F94 FF                MOV     R7,A
001F95 22                RET     
001F96         ?C0083?CS_SCALE_PROC:
  641: 	
  642: 		return 0;	
001F96 7F00              MOV     R7,#00H
  643: }
001F98 22                RET     
----- FUNCTION _CS_Scale_JudgeLowBat (END) -------


----- FUNCTION _xmemset (BEGIN) -----
 FILE: 'YC_Utilities.c'
   10: void xmemset(pxbyte addr, u8_t value, u8_t len) small
   11: {
001F99 8E1D              MOV     addr,R6
001F9B 8F1E              MOV     addr+01H,R7
;---- Variable 'len' assigned to Register 'R3' ----
;---- Variable 'value' assigned to Register 'R5' ----
001F9D         ?C0002?YC_UTILITIES:
   12: 	while(len--)
001F9D AF03              MOV     R7,AR3
001F9F 1B                DEC     R3
001FA0 EF                MOV     A,R7
001FA1 6013              JZ      ?C0004?YC_UTILITIES
   13: 		*addr++ = value;
001FA3 051E              INC     addr+01H
001FA5 E51E              MOV     A,addr+01H
001FA7 AE1D              MOV     R6,addr
001FA9 7002              JNZ     ?C0044?YC_UTILITIES
001FAB 051D              INC     addr
001FAD         ?C0044?YC_UTILITIES:
001FAD 14                DEC     A
001FAE F582              MOV     DPL,A
001FB0 8E83              MOV     DPH,R6
001FB2 ED                MOV     A,R5
001FB3 F0                MOVX    @DPTR,A
001FB4 80E7              SJMP    ?C0002?YC_UTILITIES
   14: 	return;
   15: }
001FB6         ?C0004?YC_UTILITIES:
001FB6 22                RET     
----- FUNCTION _xmemset (END) -------


----- FUNCTION delUserData (BEGIN) -----
 FILE: 'lxProtocol.c'
  370: static void delUserData(void)
  371: {
  372: 	//(mem_register_buf) = DEVICE_UNREGISTERED;
  373: 	//*(mem_le_adv_data + 13) = *(mem_register_buf);
  374: 	xmemset((u8_t *)&deviceInfo, 0, sizeof(DeviceInfo_t));
001FB7 7E4C              MOV     R6,#HIGH deviceInfo
001FB9 7F06              MOV     R7,#LOW deviceInfo
001FBB 7B0A              MOV     R3,#0AH
001FBD E4                CLR     A
001FBE FD                MOV     R5,A
001FBF F199              ACALL   _xmemset
  375: 	QueueInit();
001FC1 123F02            LCALL   QueueInit
  376: 	*(mem_le_adv_data + 13) = DEVICE_UNREGISTERED;
001FC4 9043E7            MOV     DPTR,#043E7H
001FC7 E4                CLR     A
001FC8 F0                MOVX    @DPTR,A
  377: 	UTCTime = 0;
001FC9 904C5E            MOV     DPTR,#UTCTime
001FCC 12033E            LCALL   ?C?LSTKXDATA
001FCF 00                DB      00H
001FD0 00                DB      00H
001FD1 00                DB      00H
001FD2 00                DB      00H
  378: 	SpiFlashOperator(CS_CMD_WRITE_FLASH);
001FD3 7F41              MOV     R7,#041H
;----                  JMP     _SpiFlashOperator
  379: }
----- FUNCTION delUserData (END) -------


----- FUNCTION _SpiFlashOperator (BEGIN) -----
 FILE: 'lxProtocol.c'
  469: void SpiFlashOperator(u8_t opt)
  470: {
001FD5 904E5F            MOV     DPTR,#opt
001FD8 EF                MOV     A,R7
001FD9 F0                MOVX    @DPTR,A
  471: #if 1
  472: 	if(CS_CMD_READ_FLASH == opt)
001FDA BF4017            CJNE    R7,#040H,?C0083?LXPROTOCOL
  473: 	{
  474: 		SPIFlashRead(mem_spiflash_buf, SPIFLASH_DATA_ADDR, SPIFLASH_READ_LENGTH);
001FDD 7B01              MOV     R3,#01H
001FDF 7A4C              MOV     R2,#04CH
001FE1 7900              MOV     R1,#00H
001FE3 904DEC            MOV     DPTR,#?_SPIFlashRead?BYTE+07H
001FE6 744C              MOV     A,#04CH
001FE8 F0                MOVX    @DPTR,A
001FE9 7F00              MOV     R7,#00H
001FEB 7EA0              MOV     R6,#0A0H
001FED 7D00              MOV     R5,#00H
001FEF 7C00              MOV     R4,#00H
001FF1 0227CF            LJMP    _SPIFlashRead
  475: 	}
001FF4         ?C0083?LXPROTOCOL:
  476: 	else if(CS_CMD_WRITE_FLASH == opt)
001FF4 904E5F            MOV     DPTR,#opt
001FF7 E0                MOVX    A,@DPTR
001FF8 B44120            CJNE    A,#041H,?C0086?LXPROTOCOL
  477: 	{
  478: 		SPIFlashEraseSector(SPIFLASH_DATA_ADDR);
001FFB 7F00              MOV     R7,#00H
001FFD 7EA0              MOV     R6,#0A0H
001FFF 7D00              MOV     R5,#00H
002001 7C00              MOV     R4,#00H
002003 111C              ACALL   _SPIFlashEraseSector
  479: 		SPIFlashWrite(mem_spiflash_buf, SPIFLASH_DATA_ADDR, SPIFLASH_READ_LENGTH);
002005 7B01              MOV     R3,#01H
002007 7A4C              MOV     R2,#04CH
002009 7900              MOV     R1,#00H
00200B 904DE4            MOV     DPTR,#?_SPIFlashWrite?BYTE+07H
00200E 744C              MOV     A,#04CH
002010 F0                MOVX    @DPTR,A
002011 7F00              MOV     R7,#00H
002013 7EA0              MOV     R6,#0A0H
002015 7D00              MOV     R5,#00H
002017 7C00              MOV     R4,#00H
002019 11A4              ACALL   _SPIFlashWrite
  480: 	}
  481: #else
  482: 	btCmdBuf.len = 1;
  483: 	btCmdBuf.DATA[0] = opt;
  484: 	BT_CmdFifoIn(&btCmdBuf);
  485: 	YC_Delay10ms(10);
  486: #endif
  487: }
00201B         ?C0086?LXPROTOCOL:
00201B 22                RET     
----- FUNCTION _SpiFlashOperator (END) -------


----- FUNCTION _SPIFlashEraseSector (BEGIN) -----
 FILE: 'spiflash.c'
   50: void SPIFlashEraseSector(u32_t addr)
   51: {
00201C 904E2F            MOV     DPTR,#addr
00201F 1192              ACALL   ?L?COM0001
   52: 	SPIFlashWriteEnable();
   53: 	SPIFlashWaitBusy();
   54: 	*(SF_TX_BUF) = SF_SECTOR_ERASE;
002021 9001BC            MOV     DPTR,#01BCH
002024 7420              MOV     A,#020H
002026 F0                MOVX    @DPTR,A
   55: 	*(SF_TX_BUF+1) = (addr>>16);
002027 904E2F            MOV     DPTR,#addr
00202A E0                MOVX    A,@DPTR
00202B FC                MOV     R4,A
00202C A3                INC     DPTR
00202D E0                MOVX    A,@DPTR
00202E FD                MOV     R5,A
00202F A3                INC     DPTR
002030 E0                MOVX    A,@DPTR
002031 FE                MOV     R6,A
002032 A3                INC     DPTR
002033 E0                MOVX    A,@DPTR
002034 FF                MOV     R7,A
002035 7810              MOV     R0,#010H
002037 12030C            LCALL   ?C?ULSHR
00203A 9001BD            MOV     DPTR,#01BDH
00203D EF                MOV     A,R7
00203E F0                MOVX    @DPTR,A
   56: 	*(SF_TX_BUF+2) = (addr>>8);
00203F 904E2F            MOV     DPTR,#addr
002042 E0                MOVX    A,@DPTR
002043 FC                MOV     R4,A
002044 A3                INC     DPTR
002045 E0                MOVX    A,@DPTR
002046 FD                MOV     R5,A
002047 A3                INC     DPTR
002048 E0                MOVX    A,@DPTR
002049 FE                MOV     R6,A
00204A A3                INC     DPTR
00204B E0                MOVX    A,@DPTR
00204C FF                MOV     R7,A
00204D 7808              MOV     R0,#08H
00204F 12030C            LCALL   ?C?ULSHR
002052 9001BE            MOV     DPTR,#01BEH
002055 EF                MOV     A,R7
002056 F0                MOVX    @DPTR,A
   57: 	*(SF_TX_BUF+3) = (addr&0xff);
002057 904E2F            MOV     DPTR,#addr
00205A E0                MOVX    A,@DPTR
00205B FC                MOV     R4,A
00205C A3                INC     DPTR
00205D E0                MOVX    A,@DPTR
00205E FD                MOV     R5,A
00205F A3                INC     DPTR
002060 E0                MOVX    A,@DPTR
002061 FE                MOV     R6,A
002062 A3                INC     DPTR
002063 E0                MOVX    A,@DPTR
002064 FF                MOV     R7,A
002065 E4                CLR     A
002066 9001BF            MOV     DPTR,#01BFH
002069 EF                MOV     A,R7
00206A F0                MOVX    @DPTR,A
   58: 	REG_SPID_TXLEN = ESWAP(4);
00206B 908088            MOV     DPTR,#08088H
00206E 7404              MOV     A,#04H
002070 F0                MOVX    @DPTR,A
002071 A3                INC     DPTR
002072 E4                CLR     A
002073 F0                MOVX    @DPTR,A
   59: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
002074 A3                INC     DPTR
002075 74BC              MOV     A,#0BCH
002077 F0                MOVX    @DPTR,A
002078 A3                INC     DPTR
002079 7401              MOV     A,#01H
00207B F0                MOVX    @DPTR,A
   60: 	REG_SPID_RXLEN = ESWAP(0);
00207C 90808E            MOV     DPTR,#0808EH
00207F E4                CLR     A
002080 F0                MOVX    @DPTR,A
002081 A3                INC     DPTR
002082 F0                MOVX    @DPTR,A
   61: 	REG_MISC_CTRL = SPID_START;
002083 908006            MOV     DPTR,#08006H
002086 7402              MOV     A,#02H
002088 F0                MOVX    @DPTR,A
002089         ?C0010?SPIFLASH:
   62: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
002089 90812C            MOV     DPTR,#0812CH
00208C E0                MOVX    A,@DPTR
00208D 30E3F9            JNB     ACC.3,?C0010?SPIFLASH
002090         ?C0011?SPIFLASH:
   63: 	SPIFlashWaitBusy();
002090 8005              SJMP    SPIFlashWaitBusy
   64: }
----- FUNCTION _SPIFlashEraseSector (END) -------


----- FUNCTION ?L?COM0001 (BEGIN) -----
002092 120332            LCALL   ?C?LSTXDATA
002095 3165              ACALL   SPIFlashWriteEnable
----- FUNCTION SPIFlashWaitBusy (BEGIN) -----
 FILE: 'spiflash.c'
   44: void SPIFlashWaitBusy(void)
   45: {
   46: 	while((SPIFlashReadSR()&0x01) == 0x01) {	//wait for BUSY
002097         ?C0007?SPIFLASH:
   47: 		YC_Delay1ms(1);
002097 31A9              ACALL   SPIFlashReadSR
002099 EF                MOV     A,R7
00209A 30E006            JNB     ACC.0,?C0009?SPIFLASH
   48: 	}
00209D 7F01              MOV     R7,#01H
00209F 3191              ACALL   _YC_Delay1ms
   49: }
0020A1 80F4              SJMP    ?C0007?SPIFLASH
   50: void SPIFlashEraseSector(u32_t addr)
0020A3         ?C0009?SPIFLASH:
0020A3 22                RET     
----- FUNCTION SPIFlashWaitBusy (END) -------


----- FUNCTION _SPIFlashWrite (BEGIN) -----
 FILE: 'spiflash.c'
   65: void SPIFlashWrite(u8_t *buf, u32_t addr, u8_t len)
   66: {
0020A4 904DDD            MOV     DPTR,#buf
0020A7 EB                MOV     A,R3
0020A8 F0                MOVX    @DPTR,A
0020A9 A3                INC     DPTR
0020AA EA                MOV     A,R2
0020AB F0                MOVX    @DPTR,A
0020AC A3                INC     DPTR
0020AD E9                MOV     A,R1
0020AE F0                MOVX    @DPTR,A
0020AF A3                INC     DPTR
0020B0 1192              ACALL   ?L?COM0001
   67: 	u8_t i;
   68: 	SPIFlashWriteEnable();
   69: 	SPIFlashWaitBusy();
   70: 	for(i=0;i<len;i++) {
;---- Variable 'i' assigned to Register 'R7' ----
0020B2 E4                CLR     A
0020B3 FF                MOV     R7,A
0020B4         ?C0013?SPIFLASH:
0020B4 904DE4            MOV     DPTR,#len
0020B7 E0                MOVX    A,@DPTR
0020B8 FE                MOV     R6,A
0020B9 EF                MOV     A,R7
0020BA C3                CLR     C
0020BB 9E                SUBB    A,R6
0020BC 5023              JNC     ?C0014?SPIFLASH
   71: 		*(SF_TX_BUF+4+i) = buf[i];
0020BE 904DDD            MOV     DPTR,#buf
0020C1 E0                MOVX    A,@DPTR
0020C2 FB                MOV     R3,A
0020C3 A3                INC     DPTR
0020C4 E0                MOVX    A,@DPTR
0020C5 FA                MOV     R2,A
0020C6 A3                INC     DPTR
0020C7 E0                MOVX    A,@DPTR
0020C8 F9                MOV     R1,A
0020C9 8F82              MOV     DPL,R7
0020CB 758300            MOV     DPH,#00H
0020CE 120112            LCALL   ?C?CLDOPTR
0020D1 FE                MOV     R6,A
0020D2 74C0              MOV     A,#0C0H
0020D4 2F                ADD     A,R7
0020D5 F582              MOV     DPL,A
0020D7 E4                CLR     A
0020D8 3401              ADDC    A,#01H
0020DA F583              MOV     DPH,A
0020DC EE                MOV     A,R6
0020DD F0                MOVX    @DPTR,A
   72: 	}
0020DE 0F                INC     R7
0020DF 80D3              SJMP    ?C0013?SPIFLASH
0020E1         ?C0014?SPIFLASH:
   73: 	*(SF_TX_BUF) = SF_PAGE_PROGRAM;
0020E1 9001BC            MOV     DPTR,#01BCH
0020E4 7402              MOV     A,#02H
0020E6 F0                MOVX    @DPTR,A
   74: 	*(SF_TX_BUF+1) = (addr>>16);
0020E7 904DE0            MOV     DPTR,#addr
0020EA E0                MOVX    A,@DPTR
0020EB FC                MOV     R4,A
0020EC A3                INC     DPTR
0020ED E0                MOVX    A,@DPTR
0020EE FD                MOV     R5,A
0020EF A3                INC     DPTR
0020F0 E0                MOVX    A,@DPTR
0020F1 FE                MOV     R6,A
0020F2 A3                INC     DPTR
0020F3 E0                MOVX    A,@DPTR
0020F4 FF                MOV     R7,A
0020F5 7810              MOV     R0,#010H
0020F7 12030C            LCALL   ?C?ULSHR
0020FA 9001BD            MOV     DPTR,#01BDH
0020FD EF                MOV     A,R7
0020FE F0                MOVX    @DPTR,A
   75: 	*(SF_TX_BUF+2) = (addr>>8);
0020FF 904DE0            MOV     DPTR,#addr
002102 E0                MOVX    A,@DPTR
002103 FC                MOV     R4,A
002104 A3                INC     DPTR
002105 E0                MOVX    A,@DPTR
002106 FD                MOV     R5,A
002107 A3                INC     DPTR
002108 E0                MOVX    A,@DPTR
002109 FE                MOV     R6,A
00210A A3                INC     DPTR
00210B E0                MOVX    A,@DPTR
00210C FF                MOV     R7,A
00210D 7808              MOV     R0,#08H
00210F 12030C            LCALL   ?C?ULSHR
002112 9001BE            MOV     DPTR,#01BEH
002115 EF                MOV     A,R7
002116 F0                MOVX    @DPTR,A
   76: 	*(SF_TX_BUF+3) = (addr&0xff);
002117 904DE0            MOV     DPTR,#addr
00211A E0                MOVX    A,@DPTR
00211B FC                MOV     R4,A
00211C A3                INC     DPTR
00211D E0                MOVX    A,@DPTR
00211E FD                MOV     R5,A
00211F A3                INC     DPTR
002120 E0                MOVX    A,@DPTR
002121 FE                MOV     R6,A
002122 A3                INC     DPTR
002123 E0                MOVX    A,@DPTR
002124 FF                MOV     R7,A
002125 E4                CLR     A
002126 9001BF            MOV     DPTR,#01BFH
002129 EF                MOV     A,R7
00212A F0                MOVX    @DPTR,A
   77: 	REG_SPID_TXLEN = ESWAP(len+4);
00212B 904DE4            MOV     DPTR,#len
00212E E0                MOVX    A,@DPTR
00212F 2404              ADD     A,#04H
002131 FD                MOV     R5,A
002132 E4                CLR     A
002133 33                RLC     A
002134 FC                MOV     R4,A
002135 ED                MOV     A,R5
002136 FA                MOV     R2,A
002137 EC                MOV     A,R4
002138 FF                MOV     R7,A
002139 33                RLC     A
00213A 95E0              SUBB    A,ACC
00213C EA                MOV     A,R2
00213D FE                MOV     R6,A
00213E EF                MOV     A,R7
00213F 908088            MOV     DPTR,#08088H
002142 EE                MOV     A,R6
002143 F0                MOVX    @DPTR,A
002144 A3                INC     DPTR
002145 EF                MOV     A,R7
002146 F0                MOVX    @DPTR,A
   78: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
002147 A3                INC     DPTR
002148 74BC              MOV     A,#0BCH
00214A F0                MOVX    @DPTR,A
00214B A3                INC     DPTR
00214C 7401              MOV     A,#01H
00214E F0                MOVX    @DPTR,A
   79: 	REG_SPID_RXLEN = ESWAP(0);
00214F 90808E            MOV     DPTR,#0808EH
002152 E4                CLR     A
002153 F0                MOVX    @DPTR,A
002154 A3                INC     DPTR
002155 F0                MOVX    @DPTR,A
   80: 	REG_MISC_CTRL = SPID_START;
002156 908006            MOV     DPTR,#08006H
002159 7402              MOV     A,#02H
00215B F0                MOVX    @DPTR,A
00215C         ?C0016?SPIFLASH:
   81: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
00215C 90812C            MOV     DPTR,#0812CH
00215F E0                MOVX    A,@DPTR
002160 30E3F9            JNB     ACC.3,?C0016?SPIFLASH
002163         ?C0017?SPIFLASH:
   82: 	SPIFlashWaitBusy();
002163 0197              AJMP    SPIFlashWaitBusy
   83: }
----- FUNCTION _SPIFlashWrite (END) -------


----- FUNCTION SPIFlashWriteEnable (BEGIN) -----
 FILE: 'spiflash.c'
   35: void SPIFlashWriteEnable(void)
   36: {
   37: 	REG_SPID_RXLEN = ESWAP(0);
   38: 	REG_SPID_TXLEN = ESWAP(1);
002165 90808E            MOV     DPTR,#0808EH
002168 E4                CLR     A
002169 F0                MOVX    @DPTR,A
00216A A3                INC     DPTR
00216B F0                MOVX    @DPTR,A
   39: 	*SF_TX_BUF = SF_WRITE_ENABLE;
00216C 908088            MOV     DPTR,#08088H
00216F 04                INC     A
002170 F0                MOVX    @DPTR,A
002171 A3                INC     DPTR
002172 E4                CLR     A
002173 F0                MOVX    @DPTR,A
   40: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
002174 9001BC            MOV     DPTR,#01BCH
002177 7406              MOV     A,#06H
002179 F0                MOVX    @DPTR,A
   41: 	REG_MISC_CTRL = SPID_START;
00217A 90808A            MOV     DPTR,#0808AH
00217D 74BC              MOV     A,#0BCH
00217F F0                MOVX    @DPTR,A
002180 A3                INC     DPTR
002181 7401              MOV     A,#01H
002183 F0                MOVX    @DPTR,A
   42: 	while((REG_DMA_STATUS&(1<<3)) == 0);
002184 908006            MOV     DPTR,#08006H
002187 04                INC     A
002188 F0                MOVX    @DPTR,A
002189         ?C0004?SPIFLASH:
   43: }
002189 90812C            MOV     DPTR,#0812CH
00218C E0                MOVX    A,@DPTR
00218D 30E3F9            JNB     ACC.3,?C0004?SPIFLASH
   44: void SPIFlashWaitBusy(void)
002190 22                RET     
----- FUNCTION SPIFlashWriteEnable (END) -------


----- FUNCTION _YC_Delay1ms (BEGIN) -----
 FILE: 'YC_Utilities.c'
   51: void YC_Delay1ms(u8_t Time)
   52: {
;---- Variable 'Time' assigned to Register 'R7' ----
   53: 	u16_t j; 
   54: 	for(;Time>0;Time--)
002191         ?C0020?YC_UTILITIES:
002191 EF                MOV     A,R7
002192 D3                SETB    C
002193 9400              SUBB    A,#00H
002195 4011              JC      ?C0026?YC_UTILITIES
   55: 	{
   56: 		for(j=0;j<1160;j++);
;---- Variable 'j' assigned to Register 'R4/R5' ----
002197 E4                CLR     A
002198 FD                MOV     R5,A
002199 FC                MOV     R4,A
00219A         ?C0023?YC_UTILITIES:
00219A 0D                INC     R5
00219B BD0001            CJNE    R5,#00H,?C0053?YC_UTILITIES
00219E 0C                INC     R4
00219F         ?C0053?YC_UTILITIES:
00219F BC04F8            CJNE    R4,#04H,?C0023?YC_UTILITIES
0021A2 BD88F5            CJNE    R5,#088H,?C0023?YC_UTILITIES
   57: 	}
0021A5         ?C0022?YC_UTILITIES:
0021A5 1F                DEC     R7
0021A6 80E9              SJMP    ?C0020?YC_UTILITIES
   58: }
0021A8         ?C0026?YC_UTILITIES:
0021A8 22                RET     
----- FUNCTION _YC_Delay1ms (END) -------


----- FUNCTION SPIFlashReadSR (BEGIN) -----
 FILE: 'spiflash.c'
   21: u8_t SPIFlashReadSR(void)
   22: {
   23: 	u8_t status;
   24: 	status = 0xff;
0021A9 904E5A            MOV     DPTR,#status
0021AC 74FF              MOV     A,#0FFH
0021AE F0                MOVX    @DPTR,A
   25: 	REG_SPID_RXLEN = ESWAP(1);
0021AF 90808E            MOV     DPTR,#0808EH
0021B2 7401              MOV     A,#01H
0021B4 F0                MOVX    @DPTR,A
0021B5 A3                INC     DPTR
0021B6 E4                CLR     A
0021B7 F0                MOVX    @DPTR,A
   26: 	REG_SPID_TXLEN = ESWAP(1);
0021B8 908088            MOV     DPTR,#08088H
0021BB 04                INC     A
0021BC F0                MOVX    @DPTR,A
0021BD A3                INC     DPTR
0021BE E4                CLR     A
0021BF F0                MOVX    @DPTR,A
   27: 	*SF_TX_BUF = SF_READ_STATUS_REG;
0021C0 9001BC            MOV     DPTR,#01BCH
0021C3 7405              MOV     A,#05H
0021C5 F0                MOVX    @DPTR,A
   28: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
0021C6 90808A            MOV     DPTR,#0808AH
0021C9 74BC              MOV     A,#0BCH
0021CB F0                MOVX    @DPTR,A
0021CC A3                INC     DPTR
0021CD 7401              MOV     A,#01H
0021CF F0                MOVX    @DPTR,A
   29: 	REG_SPID_RXADDR = ESWAP((u16_t)(&status));
0021D0 7D5A              MOV     R5,#LOW status
0021D2 ED                MOV     A,R5
0021D3 FA                MOV     R2,A
0021D4 744E              MOV     A,#HIGH status
0021D6 FF                MOV     R7,A
0021D7 EA                MOV     A,R2
0021D8 FE                MOV     R6,A
0021D9 EF                MOV     A,R7
0021DA A3                INC     DPTR
0021DB EE                MOV     A,R6
0021DC F0                MOVX    @DPTR,A
0021DD A3                INC     DPTR
0021DE EF                MOV     A,R7
0021DF F0                MOVX    @DPTR,A
   30: 	REG_MISC_CTRL = SPID_START;
0021E0 908006            MOV     DPTR,#08006H
0021E3 7402              MOV     A,#02H
0021E5 F0                MOVX    @DPTR,A
0021E6         ?C0001?SPIFLASH:
   31: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
0021E6 90812C            MOV     DPTR,#0812CH
0021E9 E0                MOVX    A,@DPTR
0021EA 30E3F9            JNB     ACC.3,?C0001?SPIFLASH
0021ED         ?C0002?SPIFLASH:
   32: 	//YC_UARTSendData(&status, 1);
   33: 	return status;
0021ED 904E5A            MOV     DPTR,#status
0021F0 E0                MOVX    A,@DPTR
0021F1 FF                MOV     R7,A
   34: }
0021F2 22                RET     
----- FUNCTION SPIFlashReadSR (END) -------


----- FUNCTION _YC_UtilTimerStop (BEGIN) -----
 FILE: 'YC_Sys.c'
   66: bool YC_UtilTimerStop( u8_t timer_id) large
   67: {
;---- Variable 'timer_id' assigned to Register 'R4' ----
0021F3 AC07              MOV     R4,AR7
   68: 	if((timer_id > 8) ||!((YC_UtilTimer.timer_flages >> timer_id) & 1))
0021F5 EF                MOV     A,R7
0021F6 D3                SETB    C
0021F7 9408              SUBB    A,#08H
0021F9 5011              JNC     ?C0012?YC_SYS
0021FB 904CDB            MOV     DPTR,#YC_UtilTimer
0021FE E0                MOVX    A,@DPTR
0021FF FE                MOV     R6,A
002200 A807              MOV     R0,AR7
002202 08                INC     R0
002203 8002              SJMP    ?C0026?YC_SYS
002205         ?C0025?YC_SYS:
002205 C3                CLR     C
002206 13                RRC     A
002207         ?C0026?YC_SYS:
002207 D8FC              DJNZ    R0,?C0025?YC_SYS
002209 20E002            JB      ACC.0,?C0011?YC_SYS
00220C         ?C0012?YC_SYS:
   69: 		return false;
00220C C3                CLR     C
00220D 22                RET     
00220E         ?C0011?YC_SYS:
   70: 	YC_UtilTimer.timer_flages &= ~( 1<< timer_id);
00220E AF04              MOV     R7,AR4
002210 7401              MOV     A,#01H
002212 A807              MOV     R0,AR7
002214 08                INC     R0
002215 8002              SJMP    ?C0028?YC_SYS
002217         ?C0027?YC_SYS:
002217 C3                CLR     C
002218 33                RLC     A
002219         ?C0028?YC_SYS:
002219 D8FC              DJNZ    R0,?C0027?YC_SYS
00221B F4                CPL     A
00221C 5E                ANL     A,R6
00221D 904CDB            MOV     DPTR,#YC_UtilTimer
002220 F0                MOVX    @DPTR,A
   71: 	YC_UtilTimer.callback[timer_id] = 0;
002221 EC                MOV     A,R4
002222 75F003            MOV     B,#03H
002225 A4                MUL     AB
002226 24DC              ADD     A,#LOW YC_UtilTimer+01H
002228 F582              MOV     DPL,A
00222A E4                CLR     A
00222B 344C              ADDC    A,#HIGH YC_UtilTimer+01H
00222D F583              MOV     DPH,A
00222F E4                CLR     A
002230 F0                MOVX    @DPTR,A
002231 A3                INC     DPTR
002232 F0                MOVX    @DPTR,A
002233 A3                INC     DPTR
002234 F0                MOVX    @DPTR,A
   72: 	YC_UtilTimer.timer_end[timer_id] = 0;
002235 EC                MOV     A,R4
002236 25E0              ADD     A,ACC
002238 25E0              ADD     A,ACC
00223A 24F4              ADD     A,#LOW YC_UtilTimer+019H
00223C F582              MOV     DPL,A
00223E E4                CLR     A
00223F 344C              ADDC    A,#HIGH YC_UtilTimer+019H
002241 F583              MOV     DPH,A
002243 12033E            LCALL   ?C?LSTKXDATA
002246 00                DB      00H
002247 00                DB      00H
002248 00                DB      00H
002249 00                DB      00H
   73: 	return true;
00224A D3                SETB    C
   74: }
00224B 22                RET     
----- FUNCTION _YC_UtilTimerStop (END) -------


----- FUNCTION YC_UtilTimerProcess (BEGIN) -----
 FILE: 'YC_Sys.c'
   76: void YC_UtilTimerProcess(void) small
   77: {
   78: 	u8_t i;
   79: #if 0
   80: 	if(YC_UtilTimer.last_timer > (YC_CLK_N + 0x1000)){
   81: 		for(i = 0; i < YC_UTIL_TIMER_NUM; ++i){
   82: 			if((YC_UtilTimer.timer_flages >> i) & 1){
   83: 				YC_UtilTimer.timer_end[i] -= YC_UtilTimer.last_timer;
   84: 			}
   85: 		}
   86: 	}
   87: 	YC_UtilTimer.last_timer = YC_CLK_N;
   88: 	for(i = 0; i < YC_UTIL_TIMER_NUM; ++i){
   89: 		if((YC_UtilTimer.timer_flages >> i) & 1){
   90: 			if(YC_UtilTimer.timer_end[i] < YC_CLK_N){
   91: 				YC_UtilTimer.timer_flages &=~( 1<< i); // clear the flag
   92: 				YC_UtilTimer.callback[i](i);			
   93: 			}
   94: 		}
   95: 	}
   96: #else
   97: 	YC_UtilTimer.last_timer = YC_CLK_N;
00224C 908101            MOV     DPTR,#08101H
00224F E0                MOVX    A,@DPTR
002250 FF                MOV     R7,A
002251 E4                CLR     A
002252 FC                MOV     R4,A
002253 FD                MOV     R5,A
002254 FE                MOV     R6,A
002255 7808              MOV     R0,#08H
002257 12031F            LCALL   ?C?LSHL
00225A A804              MOV     R0,AR4
00225C A905              MOV     R1,AR5
00225E AA06              MOV     R2,AR6
002260 AB07              MOV     R3,AR7
002262 908100            MOV     DPTR,#08100H
002265 E0                MOVX    A,@DPTR
002266 FF                MOV     R7,A
002267 E4                CLR     A
002268 EB                MOV     A,R3
002269 4F                ORL     A,R7
00226A FF                MOV     R7,A
00226B EA                MOV     A,R2
00226C FE                MOV     R6,A
00226D E9                MOV     A,R1
00226E FD                MOV     R5,A
00226F E8                MOV     A,R0
002270 FC                MOV     R4,A
002271 C004              PUSH    AR4
002273 C005              PUSH    AR5
002275 C006              PUSH    AR6
002277 C007              PUSH    AR7
002279 908102            MOV     DPTR,#08102H
00227C E0                MOVX    A,@DPTR
00227D FF                MOV     R7,A
00227E E4                CLR     A
00227F FC                MOV     R4,A
002280 FD                MOV     R5,A
002281 FE                MOV     R6,A
002282 7810              MOV     R0,#010H
002284 12031F            LCALL   ?C?LSHL
002287 D003              POP     AR3
002289 D002              POP     AR2
00228B D001              POP     AR1
00228D D000              POP     AR0
00228F EF                MOV     A,R7
002290 4B                ORL     A,R3
002291 FF                MOV     R7,A
002292 EE                MOV     A,R6
002293 4A                ORL     A,R2
002294 FE                MOV     R6,A
002295 ED                MOV     A,R5
002296 49                ORL     A,R1
002297 FD                MOV     R5,A
002298 EC                MOV     A,R4
002299 48                ORL     A,R0
00229A FC                MOV     R4,A
00229B C004              PUSH    AR4
00229D C005              PUSH    AR5
00229F C006              PUSH    AR6
0022A1 C007              PUSH    AR7
0022A3 A3                INC     DPTR
0022A4 E0                MOVX    A,@DPTR
0022A5 FF                MOV     R7,A
0022A6 E4                CLR     A
0022A7 FC                MOV     R4,A
0022A8 FD                MOV     R5,A
0022A9 FE                MOV     R6,A
0022AA 7818              MOV     R0,#018H
0022AC 12031F            LCALL   ?C?LSHL
0022AF D003              POP     AR3
0022B1 D002              POP     AR2
0022B3 D001              POP     AR1
0022B5 D000              POP     AR0
0022B7 EF                MOV     A,R7
0022B8 4B                ORL     A,R3
0022B9 FF                MOV     R7,A
0022BA EE                MOV     A,R6
0022BB 4A                ORL     A,R2
0022BC FE                MOV     R6,A
0022BD ED                MOV     A,R5
0022BE 49                ORL     A,R1
0022BF FD                MOV     R5,A
0022C0 EC                MOV     A,R4
0022C1 48                ORL     A,R0
0022C2 FC                MOV     R4,A
0022C3 904D14            MOV     DPTR,#YC_UtilTimer+039H
0022C6 120332            LCALL   ?C?LSTXDATA
   98: 	for(i = 0; i < YC_UTIL_TIMER_NUM; ++i){
0022C9 E4                CLR     A
0022CA F51F              MOV     i,A
0022CC         ?C0014?YC_SYS:
   99: 		if((YC_UtilTimer.timer_flages >> i) & 1){
0022CC AF1F              MOV     R7,i
0022CE 904CDB            MOV     DPTR,#YC_UtilTimer
0022D1 E0                MOVX    A,@DPTR
0022D2 FE                MOV     R6,A
0022D3 A807              MOV     R0,AR7
0022D5 08                INC     R0
0022D6 8002              SJMP    ?C0030?YC_SYS
0022D8         ?C0029?YC_SYS:
0022D8 C3                CLR     C
0022D9 13                RRC     A
0022DA         ?C0030?YC_SYS:
0022DA D8FC              DJNZ    R0,?C0029?YC_SYS
0022DC 20E002            JB      ACC.0,$ + 5H
0022DF 6183              AJMP    ?C0016?YC_SYS
  100: 			if((YC_UtilTimer.timer_end[i] < YC_UtilTimer.last_timer) || 
0022E1 E51F              MOV     A,i
0022E3 25E0              ADD     A,ACC
0022E5 25E0              ADD     A,ACC
0022E7 24F4              ADD     A,#LOW YC_UtilTimer+019H
0022E9 F582              MOV     DPL,A
0022EB E4                CLR     A
0022EC 344C              ADDC    A,#HIGH YC_UtilTimer+019H
0022EE F583              MOV     DPH,A
0022F0 E0                MOVX    A,@DPTR
0022F1 FC                MOV     R4,A
0022F2 A3                INC     DPTR
0022F3 E0                MOVX    A,@DPTR
0022F4 FD                MOV     R5,A
0022F5 A3                INC     DPTR
0022F6 E0                MOVX    A,@DPTR
0022F7 FE                MOV     R6,A
0022F8 A3                INC     DPTR
0022F9 E0                MOVX    A,@DPTR
0022FA FF                MOV     R7,A
0022FB 904D14            MOV     DPTR,#YC_UtilTimer+039H
0022FE E0                MOVX    A,@DPTR
0022FF F8                MOV     R0,A
002300 A3                INC     DPTR
002301 E0                MOVX    A,@DPTR
002302 F9                MOV     R1,A
002303 A3                INC     DPTR
002304 E0                MOVX    A,@DPTR
002305 FA                MOV     R2,A
002306 A3                INC     DPTR
002307 E0                MOVX    A,@DPTR
002308 FB                MOV     R3,A
002309 D3                SETB    C
00230A 1202FB            LCALL   ?C?ULCMP
00230D 503E              JNC     ?C0019?YC_SYS
00230F E51F              MOV     A,i
002311 25E0              ADD     A,ACC
002313 25E0              ADD     A,ACC
002315 24F4              ADD     A,#LOW YC_UtilTimer+019H
002317 F582              MOV     DPL,A
002319 E4                CLR     A
00231A 344C              ADDC    A,#HIGH YC_UtilTimer+019H
00231C F583              MOV     DPH,A
00231E E0                MOVX    A,@DPTR
00231F FC                MOV     R4,A
002320 A3                INC     DPTR
002321 E0                MOVX    A,@DPTR
002322 FD                MOV     R5,A
002323 A3                INC     DPTR
002324 E0                MOVX    A,@DPTR
002325 FE                MOV     R6,A
002326 A3                INC     DPTR
002327 E0                MOVX    A,@DPTR
002328 FF                MOV     R7,A
002329 904D14            MOV     DPTR,#YC_UtilTimer+039H
00232C E0                MOVX    A,@DPTR
00232D F8                MOV     R0,A
00232E A3                INC     DPTR
00232F E0                MOVX    A,@DPTR
002330 A3                INC     DPTR
002331 E0                MOVX    A,@DPTR
002332 A3                INC     DPTR
002333 E0                MOVX    A,@DPTR
002334 C3                CLR     C
002335 EF                MOV     A,R7
002336 9B                SUBB    A,R3
002337 FF                MOV     R7,A
002338 EE                MOV     A,R6
002339 9A                SUBB    A,R2
00233A FE                MOV     R6,A
00233B ED                MOV     A,R5
00233C 99                SUBB    A,R1
00233D FD                MOV     R5,A
00233E EC                MOV     A,R4
00233F 98                SUBB    A,R0
002340 FC                MOV     R4,A
002341 E4                CLR     A
002342 FB                MOV     R3,A
002343 7A10              MOV     R2,#010H
002345 F9                MOV     R1,A
002346 F8                MOV     R0,A
002347 C3                CLR     C
002348 1202FB            LCALL   ?C?ULCMP
00234B 5036              JNC     ?C0016?YC_SYS
00234D         ?C0019?YC_SYS:
  101: 			   (YC_UtilTimer.timer_end[i]  - YC_UtilTimer.last_timer > 0x1000)){
  102: 				YC_UtilTimer.timer_flages &=~( 1<< i); // clear the flag
00234D 904CDB            MOV     DPTR,#YC_UtilTimer
002350 E0                MOVX    A,@DPTR
002351 FF                MOV     R7,A
002352 AE1F              MOV     R6,i
002354 7401              MOV     A,#01H
002356 A806              MOV     R0,AR6
002358 08                INC     R0
002359 8002              SJMP    ?C0032?YC_SYS
00235B         ?C0031?YC_SYS:
00235B C3                CLR     C
00235C 33                RLC     A
00235D         ?C0032?YC_SYS:
00235D D8FC              DJNZ    R0,?C0031?YC_SYS
00235F F4                CPL     A
002360 5F                ANL     A,R7
002361 904CDB            MOV     DPTR,#YC_UtilTimer
002364 F0                MOVX    @DPTR,A
  103: 				YC_UtilTimer.callback[i](i);			
002365 E51F              MOV     A,i
002367 75F003            MOV     B,#03H
00236A A4                MUL     AB
00236B 24DC              ADD     A,#LOW YC_UtilTimer+01H
00236D F582              MOV     DPL,A
00236F E4                CLR     A
002370 344C              ADDC    A,#HIGH YC_UtilTimer+01H
002372 F583              MOV     DPH,A
002374 E0                MOVX    A,@DPTR
002375 A3                INC     DPTR
002376 E0                MOVX    A,@DPTR
002377 FA                MOV     R2,A
002378 A3                INC     DPTR
002379 E0                MOVX    A,@DPTR
00237A F582              MOV     DPL,A
00237C 8A83              MOV     DPH,R2
00237E AF1F              MOV     R7,i
002380 1203C6            LCALL   ?C?ICALL2
  104: 			}
  105: 		}
  106: 	}
002383         ?C0016?YC_SYS:
002383 051F              INC     i
002385 E51F              MOV     A,i
002387 C3                CLR     C
002388 9408              SUBB    A,#08H
00238A 5002              JNC     $ + 4H
00238C 41CC              AJMP    ?C0014?YC_SYS
  107: #endif
  108: 	return;
  109: }
00238E 22                RET     
----- FUNCTION YC_UtilTimerProcess (END) -------


----- FUNCTION _YC_UARTSendData (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  351: void YC_UARTSendData(u8_t* pbuff, u16_t len)
  352: {
00238F 904DAE            MOV     DPTR,#pbuff
002392 EB                MOV     A,R3
002393 F0                MOVX    @DPTR,A
002394 A3                INC     DPTR
002395 EA                MOV     A,R2
002396 F0                MOVX    @DPTR,A
002397 A3                INC     DPTR
002398 E9                MOV     A,R1
002399 F0                MOVX    @DPTR,A
00239A A3                INC     DPTR
00239B EC                MOV     A,R4
00239C F0                MOVX    @DPTR,A
00239D A3                INC     DPTR
00239E ED                MOV     A,R5
00239F F0                MOVX    @DPTR,A
  353: 	int i;
  354: 	u8_t *twptr = (u8_t *)ESWAP(REG_UART_TX_PTR_W);
0023A0 90805E            MOV     DPTR,#0805EH
0023A3 A3                INC     DPTR
0023A4 E0                MOVX    A,@DPTR
0023A5 FC                MOV     R4,A
0023A6 90805E            MOV     DPTR,#0805EH
0023A9 E0                MOVX    A,@DPTR
0023AA FF                MOV     R7,A
0023AB EC                MOV     A,R4
0023AC FE                MOV     R6,A
0023AD EF                MOV     A,R7
0023AE AA06              MOV     R2,AR6
0023B0 F9                MOV     R1,A
0023B1 904DB5            MOV     DPTR,#twptr
0023B4 E4                CLR     A
0023B5 F0                MOVX    @DPTR,A
0023B6 A3                INC     DPTR
0023B7 EA                MOV     A,R2
0023B8 F0                MOVX    @DPTR,A
0023B9 A3                INC     DPTR
0023BA E9                MOV     A,R1
0023BB F0                MOVX    @DPTR,A
  355: 
  356: 	for(i=0;i<len;i++)
0023BC E4                CLR     A
0023BD 904DB3            MOV     DPTR,#i
0023C0 F0                MOVX    @DPTR,A
0023C1 A3                INC     DPTR
0023C2 F0                MOVX    @DPTR,A
0023C3         ?C0002?YC_PERIPHERAL:
0023C3 904DB1            MOV     DPTR,#len
0023C6 E0                MOVX    A,@DPTR
0023C7 FE                MOV     R6,A
0023C8 A3                INC     DPTR
0023C9 E0                MOVX    A,@DPTR
0023CA FF                MOV     R7,A
0023CB C3                CLR     C
0023CC 904DB4            MOV     DPTR,#i+01H
0023CF E0                MOVX    A,@DPTR
0023D0 9F                SUBB    A,R7
0023D1 904DB3            MOV     DPTR,#i
0023D4 E0                MOVX    A,@DPTR
0023D5 9E                SUBB    A,R6
0023D6 4002              JC      $ + 4H
0023D8 816E              AJMP    ?C0003?YC_PERIPHERAL
  357: 	{
  358: 		xmemcpy(twptr++, pbuff++, 1);
0023DA 904DB5            MOV     DPTR,#twptr
0023DD E0                MOVX    A,@DPTR
0023DE A3                INC     DPTR
0023DF E4                CLR     A
0023E0 75F001            MOV     B,#01H
0023E3 1201C8            LCALL   ?C?ILDIX
0023E6 FE                MOV     R6,A
0023E7 AFF0              MOV     R7,B
0023E9 904DAE            MOV     DPTR,#pbuff
0023EC E0                MOVX    A,@DPTR
0023ED FB                MOV     R3,A
0023EE A3                INC     DPTR
0023EF E4                CLR     A
0023F0 75F001            MOV     B,#01H
0023F3 1201C8            LCALL   ?C?ILDIX
0023F6 A9F0              MOV     R1,B
0023F8 FA                MOV     R2,A
0023F9 751C01            MOV     ?_xmemcpy?BYTE+05H,#01H
0023FC 918D              ACALL   _xmemcpy
  359: 
  360: 		if(((short)twptr-1)==ESWAP(REG_UART_TX_ADDR_E))	//twptr reach the end of buffer
0023FE 90805C            MOV     DPTR,#0805CH
002401 A3                INC     DPTR
002402 E0                MOVX    A,@DPTR
002403 FC                MOV     R4,A
002404 90805C            MOV     DPTR,#0805CH
002407 E0                MOVX    A,@DPTR
002408 FF                MOV     R7,A
002409 EC                MOV     A,R4
00240A FE                MOV     R6,A
00240B EF                MOV     A,R7
00240C 904DB5            MOV     DPTR,#twptr
00240F E0                MOVX    A,@DPTR
002410 A3                INC     DPTR
002411 E0                MOVX    A,@DPTR
002412 FA                MOV     R2,A
002413 A3                INC     DPTR
002414 E0                MOVX    A,@DPTR
002415 24FF              ADD     A,#0FFH
002417 FD                MOV     R5,A
002418 EA                MOV     A,R2
002419 34FF              ADDC    A,#0FFH
00241B FC                MOV     R4,A
00241C EF                MOV     A,R7
00241D 6D                XRL     A,R5
00241E 7002              JNZ     ?C0022?YC_PERIPHERAL
002420 EE                MOV     A,R6
002421 6C                XRL     A,R4
002422         ?C0022?YC_PERIPHERAL:
002422 703A              JNZ     ?C0004?YC_PERIPHERAL
  361: 		{
  362: 			REG_UART_TX_PTR_W = REG_UART_TX_ADDR_E;
002424 90805C            MOV     DPTR,#0805CH
002427 E0                MOVX    A,@DPTR
002428 FF                MOV     R7,A
002429 A3                INC     DPTR
00242A E0                MOVX    A,@DPTR
00242B A3                INC     DPTR
00242C CF                XCH     A,R7
00242D F0                MOVX    @DPTR,A
00242E A3                INC     DPTR
00242F EF                MOV     A,R7
002430 F0                MOVX    @DPTR,A
002431         ?C0006?YC_PERIPHERAL:
  363: 			while(ESWAP(REG_UART_TX_ITEMS));
002431 90810E            MOV     DPTR,#0810EH
002434 A3                INC     DPTR
002435 E0                MOVX    A,@DPTR
002436 FC                MOV     R4,A
002437 90810E            MOV     DPTR,#0810EH
00243A E0                MOVX    A,@DPTR
00243B FF                MOV     R7,A
00243C EC                MOV     A,R4
00243D FE                MOV     R6,A
00243E EF                MOV     A,R7
00243F 4E                ORL     A,R6
002440 70EF              JNZ     ?C0006?YC_PERIPHERAL
002442         ?C0007?YC_PERIPHERAL:
  364: 			
  365: 			twptr = (u8_t *)ESWAP(REG_UART_TX_ADDR_S);	//reset twptr
002442 90805A            MOV     DPTR,#0805AH
002445 A3                INC     DPTR
002446 E0                MOVX    A,@DPTR
002447 FC                MOV     R4,A
002448 90805A            MOV     DPTR,#0805AH
00244B E0                MOVX    A,@DPTR
00244C FF                MOV     R7,A
00244D EC                MOV     A,R4
00244E FE                MOV     R6,A
00244F EF                MOV     A,R7
002450 AA06              MOV     R2,AR6
002452 F9                MOV     R1,A
002453 904DB5            MOV     DPTR,#twptr
002456 E4                CLR     A
002457 F0                MOVX    @DPTR,A
002458 A3                INC     DPTR
002459 EA                MOV     A,R2
00245A F0                MOVX    @DPTR,A
00245B A3                INC     DPTR
00245C E9                MOV     A,R1
00245D F0                MOVX    @DPTR,A
  366: 		}	
  367: 	}	
00245E         ?C0004?YC_PERIPHERAL:
00245E 904DB4            MOV     DPTR,#i+01H
002461 E0                MOVX    A,@DPTR
002462 04                INC     A
002463 F0                MOVX    @DPTR,A
002464 7006              JNZ     ?C0023?YC_PERIPHERAL
002466 904DB3            MOV     DPTR,#i
002469 E0                MOVX    A,@DPTR
00246A 04                INC     A
00246B F0                MOVX    @DPTR,A
00246C         ?C0023?YC_PERIPHERAL:
00246C 61C3              AJMP    ?C0002?YC_PERIPHERAL
00246E         ?C0003?YC_PERIPHERAL:
  368: 
  369: 	REG_UART_TX_PTR_W = ESWAP((short)twptr);
00246E 904DB5            MOV     DPTR,#twptr
002471 E0                MOVX    A,@DPTR
002472 A3                INC     DPTR
002473 E0                MOVX    A,@DPTR
002474 FA                MOV     R2,A
002475 A3                INC     DPTR
002476 E0                MOVX    A,@DPTR
002477 AC02              MOV     R4,AR2
002479 FD                MOV     R5,A
00247A EC                MOV     A,R4
00247B FF                MOV     R7,A
00247C 33                RLC     A
00247D 95E0              SUBB    A,ACC
00247F AB07              MOV     R3,AR7
002481 ED                MOV     A,R5
002482 FF                MOV     R7,A
002483 EB                MOV     A,R3
002484 90805E            MOV     DPTR,#0805EH
002487 CF                XCH     A,R7
002488 F0                MOVX    @DPTR,A
002489 A3                INC     DPTR
00248A EF                MOV     A,R7
00248B F0                MOVX    @DPTR,A
  370: 	//YC_UARTWaitSendData();
  371: }
00248C 22                RET     
----- FUNCTION _YC_UARTSendData (END) -------


----- FUNCTION _xmemcpy (BEGIN) -----
 FILE: 'YC_Utilities.c'
   16: void xmemcpy(pxbyte dest, u8_t* src, u8_t len) small
   17: {
00248D 8E17              MOV     dest,R6
00248F 8F18              MOV     dest+01H,R7
002491 8B19              MOV     src,R3
002493 8A1A              MOV     src+01H,R2
002495 891B              MOV     src+02H,R1
002497         ?C0005?YC_UTILITIES:
   18: 	while(len--)
002497 AF1C              MOV     R7,len
002499 151C              DEC     len
00249B EF                MOV     A,R7
00249C 6025              JZ      ?C0007?YC_UTILITIES
   19: 		*dest++ = *src++;
00249E AB19              MOV     R3,src
0024A0 051B              INC     src+02H
0024A2 E51B              MOV     A,src+02H
0024A4 AA1A              MOV     R2,src+01H
0024A6 7002              JNZ     ?C0045?YC_UTILITIES
0024A8 051A              INC     src+01H
0024AA         ?C0045?YC_UTILITIES:
0024AA 14                DEC     A
0024AB F9                MOV     R1,A
0024AC 1200F9            LCALL   ?C?CLDPTR
0024AF FF                MOV     R7,A
0024B0 0518              INC     dest+01H
0024B2 E518              MOV     A,dest+01H
0024B4 AC17              MOV     R4,dest
0024B6 7002              JNZ     ?C0046?YC_UTILITIES
0024B8 0517              INC     dest
0024BA         ?C0046?YC_UTILITIES:
0024BA 14                DEC     A
0024BB F582              MOV     DPL,A
0024BD 8C83              MOV     DPH,R4
0024BF EF                MOV     A,R7
0024C0 F0                MOVX    @DPTR,A
0024C1 80D4              SJMP    ?C0005?YC_UTILITIES
   20: 	return;
   21: }
0024C3         ?C0007?YC_UTILITIES:
0024C3 22                RET     
----- FUNCTION _xmemcpy (END) -------


----- FUNCTION _CS_CommTo1186_SendCmd (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  421: void CS_CommTo1186_SendCmd(u8_t cmd_code ,u8_t * databuf)
  422: {
0024C4 904D82            MOV     DPTR,#cmd_code
0024C7 EF                MOV     A,R7
0024C8 F0                MOVX    @DPTR,A
0024C9 A3                INC     DPTR
0024CA EB                MOV     A,R3
0024CB F0                MOVX    @DPTR,A
0024CC A3                INC     DPTR
0024CD EA                MOV     A,R2
0024CE F0                MOVX    @DPTR,A
0024CF A3                INC     DPTR
0024D0 E9                MOV     A,R1
0024D1 F0                MOVX    @DPTR,A
  423: 	u8_t buf[10] = {0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,0x00,0x00};
  424:        u8_t len;
0024D2 7886              MOV     R0,#LOW buf
0024D4 7C4D              MOV     R4,#HIGH buf
0024D6 7D01              MOV     R5,#01H
0024D8 7BFF              MOV     R3,#0FFH
0024DA 7A04              MOV     R2,#HIGH _?ix1000
0024DC 79B8              MOV     R1,#LOW _?ix1000
0024DE 7E00              MOV     R6,#00H
0024E0 7F0A              MOV     R7,#0AH
0024E2 1200D3            LCALL   ?C?COPY
  425: 
  426: 	 buf[0] = 0xc5;							//包头数据
0024E5 904D86            MOV     DPTR,#buf
0024E8 74C5              MOV     A,#0C5H
0024EA F0                MOVX    @DPTR,A
  427: 	switch(cmd_code)
0024EB 904D82            MOV     DPTR,#cmd_code
0024EE E0                MOVX    A,@DPTR
0024EF 12036F            LCALL   ?C?CCASE
0024F2 252B              DW      ?C0069?CS_COMMTO1186
0024F4 80                DB      080H
0024F5 2541              DW      ?C0070?CS_COMMTO1186
0024F7 81                DB      081H
0024F8 2557              DW      ?C0071?CS_COMMTO1186
0024FA 82                DB      082H
0024FB 256D              DW      ?C0072?CS_COMMTO1186
0024FD 83                DB      083H
0024FE 25AB              DW      ?C0073?CS_COMMTO1186
002500 84                DB      084H
002501 25F3              DW      ?C0074?CS_COMMTO1186
002503 85                DB      085H
002504 2609              DW      ?C0075?CS_COMMTO1186
002506 A0                DB      0A0H
002507 265B              DW      ?C0076?CS_COMMTO1186
002509 A1                DB      0A1H
00250A 26B7              DW      ?C0077?CS_COMMTO1186
00250C A2                DB      0A2H
00250D 2709              DW      ?C0078?CS_COMMTO1186
00250F A3                DB      0A3H
002510 251A              DW      ?C0068?CS_COMMTO1186
002512 C5                DB      0C5H
002513 2751              DW      ?C0079?CS_COMMTO1186
002515 E0                DB      0E0H
002516 0000              DW      00H
002518 27B5              DW      ?C0080?CS_COMMTO1186
  428: 		{
  429: 		case CS_CommTo1186_Reset:			//0
00251A         ?C0068?CS_COMMTO1186:
  430: 			buf[0] = 0x00;
00251A E4                CLR     A
00251B 904D86            MOV     DPTR,#buf
00251E F0                MOVX    @DPTR,A
  431: 			buf[1] = 0x00;
00251F A3                INC     DPTR
002520 F0                MOVX    @DPTR,A
  432: 			buf[2] = 0x00;
002521 A3                INC     DPTR
002522 F0                MOVX    @DPTR,A
  433: 			len  =  3;
002523 904D90            MOV     DPTR,#len
002526 7403              MOV     A,#03H
002528 F0                MOVX    @DPTR,A
  434: 			break;
002529 E1C0              AJMP    ?C0067?CS_COMMTO1186
  435: 		case CS_CommTo1186_ReadAd:		 	// 1 
00252B         ?C0069?CS_COMMTO1186:
  436: 			buf[1] = 0x01;
00252B 904D87            MOV     DPTR,#buf+01H
00252E 7401              MOV     A,#01H
002530 F0                MOVX    @DPTR,A
  437: 			buf[2] = 0x80;
002531 A3                INC     DPTR
002532 7480              MOV     A,#080H
002534 F0                MOVX    @DPTR,A
  438: 			buf[3] = 0x44;
002535 A3                INC     DPTR
002536 7444              MOV     A,#044H
002538 F0                MOVX    @DPTR,A
  439: 			len  =  4;
002539 904D90            MOV     DPTR,#len
00253C 7404              MOV     A,#04H
00253E F0                MOVX    @DPTR,A
  440: 			break;			
00253F E1C0              AJMP    ?C0067?CS_COMMTO1186
  441: 		case CS_CommTo1186_ReadVersion:		 // 2 
002541         ?C0070?CS_COMMTO1186:
  442: 			buf[1] = 0x01;
002541 904D87            MOV     DPTR,#buf+01H
002544 7401              MOV     A,#01H
002546 F0                MOVX    @DPTR,A
  443: 			buf[2] = 0x81;
002547 A3                INC     DPTR
002548 7481              MOV     A,#081H
00254A F0                MOVX    @DPTR,A
  444: 			buf[3] = 0x45;
00254B A3                INC     DPTR
00254C 7445              MOV     A,#045H
00254E F0                MOVX    @DPTR,A
  445: 			len  =  4;
00254F 904D90            MOV     DPTR,#len
002552 7404              MOV     A,#04H
002554 F0                MOVX    @DPTR,A
  446: 			break;
002555 E1C0              AJMP    ?C0067?CS_COMMTO1186
  447: 		case CS_CommTo1186_ReadTime:		 // 3 
002557         ?C0071?CS_COMMTO1186:
  448: 			buf[1] = 0x01;
002557 904D87            MOV     DPTR,#buf+01H
00255A 7401              MOV     A,#01H
00255C F0                MOVX    @DPTR,A
  449: 			buf[2] = 0x82;
00255D A3                INC     DPTR
00255E 7482              MOV     A,#082H
002560 F0                MOVX    @DPTR,A
  450: 			buf[3] = 0x46;
002561 A3                INC     DPTR
002562 7446              MOV     A,#046H
002564 F0                MOVX    @DPTR,A
  451: 			len  =  4;
002565 904D90            MOV     DPTR,#len
002568 7404              MOV     A,#04H
00256A F0                MOVX    @DPTR,A
  452: 			break;
00256B E1C0              AJMP    ?C0067?CS_COMMTO1186
  453: 		case CS_CommTo1186_ReadRam:		 // 4 
00256D         ?C0072?CS_COMMTO1186:
  454: 			buf[1] = 0x03;
00256D 904D87            MOV     DPTR,#buf+01H
002570 7403              MOV     A,#03H
002572 F0                MOVX    @DPTR,A
  455: 			buf[2] = 0x83;
002573 A3                INC     DPTR
002574 7483              MOV     A,#083H
002576 F0                MOVX    @DPTR,A
  456: 			buf[3] = databuf[1];
002577 904D83            MOV     DPTR,#databuf
00257A E0                MOVX    A,@DPTR
00257B FB                MOV     R3,A
00257C A3                INC     DPTR
00257D E0                MOVX    A,@DPTR
00257E FA                MOV     R2,A
00257F A3                INC     DPTR
002580 E0                MOVX    A,@DPTR
002581 F9                MOV     R1,A
002582 900001            MOV     DPTR,#01H
002585 120112            LCALL   ?C?CLDOPTR
002588 904D89            MOV     DPTR,#buf+03H
00258B F0                MOVX    @DPTR,A
  457: 			buf[4] = databuf[0];	 
00258C 1200F9            LCALL   ?C?CLDPTR
00258F 904D8A            MOV     DPTR,#buf+04H
002592 F0                MOVX    @DPTR,A
  458: 			buf[5] =  CS_CommTo1186_Xor(buf,5);
002593 7B01              MOV     R3,#01H
002595 7A4D              MOV     R2,#HIGH buf
002597 7986              MOV     R1,#LOW buf
002599 7D05              MOV     R5,#05H
00259B 123901            LCALL   _CS_CommTo1186_Xor
00259E 904D8B            MOV     DPTR,#buf+05H
0025A1 EF                MOV     A,R7
0025A2 F0                MOVX    @DPTR,A
  459: 			len  =  6;
0025A3 904D90            MOV     DPTR,#len
0025A6 7406              MOV     A,#06H
0025A8 F0                MOVX    @DPTR,A
  460: 			break;
0025A9 E1C0              AJMP    ?C0067?CS_COMMTO1186
  461: 		case CS_CommTo1186_ReadOtp:		 // 5 
0025AB         ?C0073?CS_COMMTO1186:
  462: 			buf[1] = 0x04;
0025AB 904D87            MOV     DPTR,#buf+01H
0025AE 7404              MOV     A,#04H
0025B0 F0                MOVX    @DPTR,A
  463: 			buf[2] = 0x84;
0025B1 A3                INC     DPTR
0025B2 7484              MOV     A,#084H
0025B4 F0                MOVX    @DPTR,A
  464: 			buf[3] = databuf[2];
0025B5 904D83            MOV     DPTR,#databuf
0025B8 E0                MOVX    A,@DPTR
0025B9 FB                MOV     R3,A
0025BA A3                INC     DPTR
0025BB E0                MOVX    A,@DPTR
0025BC FA                MOV     R2,A
0025BD A3                INC     DPTR
0025BE E0                MOVX    A,@DPTR
0025BF F9                MOV     R1,A
0025C0 900002            MOV     DPTR,#02H
0025C3 120112            LCALL   ?C?CLDOPTR
0025C6 904D89            MOV     DPTR,#buf+03H
0025C9 F0                MOVX    @DPTR,A
  465: 			buf[4] = databuf[1];	
0025CA 900001            MOV     DPTR,#01H
0025CD 120112            LCALL   ?C?CLDOPTR
0025D0 904D8A            MOV     DPTR,#buf+04H
0025D3 F0                MOVX    @DPTR,A
  466: 			buf[5] = databuf[0]; 
0025D4 1200F9            LCALL   ?C?CLDPTR
0025D7 904D8B            MOV     DPTR,#buf+05H
0025DA F0                MOVX    @DPTR,A
  467: 			buf[6] = CS_CommTo1186_Xor(buf,6);
0025DB 7B01              MOV     R3,#01H
0025DD 7A4D              MOV     R2,#HIGH buf
0025DF 7986              MOV     R1,#LOW buf
0025E1 7D06              MOV     R5,#06H
0025E3 123901            LCALL   _CS_CommTo1186_Xor
0025E6 904D8C            MOV     DPTR,#buf+06H
0025E9 EF                MOV     A,R7
0025EA F0                MOVX    @DPTR,A
  468: 			len  =  7;
0025EB 904D90            MOV     DPTR,#len
0025EE 7407              MOV     A,#07H
0025F0 F0                MOVX    @DPTR,A
  469: 			break;
0025F1 E1C0              AJMP    ?C0067?CS_COMMTO1186
  470: 		case CS_CommTo1186_ReadAdZero:		 // 6 
0025F3         ?C0074?CS_COMMTO1186:
  471: 			buf[1] = 0x01;
0025F3 904D87            MOV     DPTR,#buf+01H
0025F6 7401              MOV     A,#01H
0025F8 F0                MOVX    @DPTR,A
  472: 			buf[2] = 0x85;
0025F9 A3                INC     DPTR
0025FA 7485              MOV     A,#085H
0025FC F0                MOVX    @DPTR,A
  473: 			buf[3] = 0x41;
0025FD A3                INC     DPTR
0025FE 7441              MOV     A,#041H
002600 F0                MOVX    @DPTR,A
  474: 			len  =  4;
002601 904D90            MOV     DPTR,#len
002604 7404              MOV     A,#04H
002606 F0                MOVX    @DPTR,A
  475: 			break;
002607 E1C0              AJMP    ?C0067?CS_COMMTO1186
  476: 		case CS_CommTo1186_SetSleepMode:	 // 7 
002609         ?C0075?CS_COMMTO1186:
  477: 			buf[1] = 0x05;
002609 904D87            MOV     DPTR,#buf+01H
00260C 7405              MOV     A,#05H
00260E F0                MOVX    @DPTR,A
  478: 			buf[2] = 0xA0;
00260F A3                INC     DPTR
002610 74A0              MOV     A,#0A0H
002612 F0                MOVX    @DPTR,A
  479: 			buf[3] = databuf[3];
002613 904D83            MOV     DPTR,#databuf
002616 E0                MOVX    A,@DPTR
002617 FB                MOV     R3,A
002618 A3                INC     DPTR
002619 E0                MOVX    A,@DPTR
00261A FA                MOV     R2,A
00261B A3                INC     DPTR
00261C E0                MOVX    A,@DPTR
00261D F9                MOV     R1,A
00261E 900003            MOV     DPTR,#03H
002621 120112            LCALL   ?C?CLDOPTR
002624 904D89            MOV     DPTR,#buf+03H
002627 F0                MOVX    @DPTR,A
  480: 			buf[4] = databuf[2];	
002628 900002            MOV     DPTR,#02H
00262B 120112            LCALL   ?C?CLDOPTR
00262E 904D8A            MOV     DPTR,#buf+04H
002631 F0                MOVX    @DPTR,A
  481: 			buf[5] = databuf[1];
002632 900001            MOV     DPTR,#01H
002635 120112            LCALL   ?C?CLDOPTR
002638 904D8B            MOV     DPTR,#buf+05H
00263B F0                MOVX    @DPTR,A
  482: 			buf[6] = databuf[0]; 
00263C 1200F9            LCALL   ?C?CLDPTR
00263F 904D8C            MOV     DPTR,#buf+06H
002642 F0                MOVX    @DPTR,A
  483: 			buf[7] = CS_CommTo1186_Xor(buf,7);
002643 7B01              MOV     R3,#01H
002645 7A4D              MOV     R2,#HIGH buf
002647 7986              MOV     R1,#LOW buf
002649 7D07              MOV     R5,#07H
00264B 123901            LCALL   _CS_CommTo1186_Xor
00264E 904D8D            MOV     DPTR,#buf+07H
002651 EF                MOV     A,R7
002652 F0                MOVX    @DPTR,A
  484: 			len  =  8;
002653 904D90            MOV     DPTR,#len
002656 7408              MOV     A,#08H
002658 F0                MOVX    @DPTR,A
  485: 			break;
002659 E1C0              AJMP    ?C0067?CS_COMMTO1186
  486: 		case CS_CommTo1186_SetOpenWeight:	 // 8 
00265B         ?C0076?CS_COMMTO1186:
  487: 			buf[1] = 0x06;
00265B 904D87            MOV     DPTR,#buf+01H
00265E 7406              MOV     A,#06H
002660 F0                MOVX    @DPTR,A
  488: 			buf[2] = 0xA1;
002661 A3                INC     DPTR
002662 74A1              MOV     A,#0A1H
002664 F0                MOVX    @DPTR,A
  489: 			buf[3] = databuf[4];
002665 904D83            MOV     DPTR,#databuf
002668 E0                MOVX    A,@DPTR
002669 FB                MOV     R3,A
00266A A3                INC     DPTR
00266B E0                MOVX    A,@DPTR
00266C FA                MOV     R2,A
00266D A3                INC     DPTR
00266E E0                MOVX    A,@DPTR
00266F F9                MOV     R1,A
002670 900004            MOV     DPTR,#04H
002673 120112            LCALL   ?C?CLDOPTR
002676 904D89            MOV     DPTR,#buf+03H
002679 F0                MOVX    @DPTR,A
  490: 			buf[4] = databuf[3];	
00267A 900003            MOV     DPTR,#03H
00267D 120112            LCALL   ?C?CLDOPTR
002680 904D8A            MOV     DPTR,#buf+04H
002683 F0                MOVX    @DPTR,A
  491: 			buf[5] = databuf[2];
002684 900002            MOV     DPTR,#02H
002687 120112            LCALL   ?C?CLDOPTR
00268A 904D8B            MOV     DPTR,#buf+05H
00268D F0                MOVX    @DPTR,A
  492: 			buf[6] = databuf[1];
00268E 900001            MOV     DPTR,#01H
002691 120112            LCALL   ?C?CLDOPTR
002694 904D8C            MOV     DPTR,#buf+06H
002697 F0                MOVX    @DPTR,A
  493: 			buf[7] = databuf[0]; 
002698 1200F9            LCALL   ?C?CLDPTR
00269B 904D8D            MOV     DPTR,#buf+07H
00269E F0                MOVX    @DPTR,A
  494: 			buf[8] = CS_CommTo1186_Xor(buf,8);
00269F 7B01              MOV     R3,#01H
0026A1 7A4D              MOV     R2,#HIGH buf
0026A3 7986              MOV     R1,#LOW buf
0026A5 7D08              MOV     R5,#08H
0026A7 123901            LCALL   _CS_CommTo1186_Xor
0026AA 904D8E            MOV     DPTR,#buf+08H
0026AD EF                MOV     A,R7
0026AE F0                MOVX    @DPTR,A
  495: 			len  =  9;
0026AF 904D90            MOV     DPTR,#len
0026B2 7409              MOV     A,#09H
0026B4 F0                MOVX    @DPTR,A
  496: 			break;
0026B5 E1C0              AJMP    ?C0067?CS_COMMTO1186
  497: 		case CS_CommTo1186_SetTime:		 // 9 
0026B7         ?C0077?CS_COMMTO1186:
  498: 			buf[1] = 0x05;
0026B7 904D87            MOV     DPTR,#buf+01H
0026BA 7405              MOV     A,#05H
0026BC F0                MOVX    @DPTR,A
  499: 			buf[2] = 0xA2;
0026BD A3                INC     DPTR
0026BE 74A2              MOV     A,#0A2H
0026C0 F0                MOVX    @DPTR,A
  500: 			buf[3] = databuf[3];
0026C1 904D83            MOV     DPTR,#databuf
0026C4 E0                MOVX    A,@DPTR
0026C5 FB                MOV     R3,A
0026C6 A3                INC     DPTR
0026C7 E0                MOVX    A,@DPTR
0026C8 FA                MOV     R2,A
0026C9 A3                INC     DPTR
0026CA E0                MOVX    A,@DPTR
0026CB F9                MOV     R1,A
0026CC 900003            MOV     DPTR,#03H
0026CF 120112            LCALL   ?C?CLDOPTR
0026D2 904D89            MOV     DPTR,#buf+03H
0026D5 F0                MOVX    @DPTR,A
  501: 			buf[4] = databuf[2];	
0026D6 900002            MOV     DPTR,#02H
0026D9 120112            LCALL   ?C?CLDOPTR
0026DC 904D8A            MOV     DPTR,#buf+04H
0026DF F0                MOVX    @DPTR,A
  502: 			buf[5] = databuf[1];
0026E0 900001            MOV     DPTR,#01H
0026E3 120112            LCALL   ?C?CLDOPTR
0026E6 904D8B            MOV     DPTR,#buf+05H
0026E9 F0                MOVX    @DPTR,A
  503: 			buf[6] = databuf[0]; 
0026EA 1200F9            LCALL   ?C?CLDPTR
0026ED 904D8C            MOV     DPTR,#buf+06H
0026F0 F0                MOVX    @DPTR,A
  504: 			buf[7] = CS_CommTo1186_Xor(buf,7);
0026F1 7B01              MOV     R3,#01H
0026F3 7A4D              MOV     R2,#HIGH buf
0026F5 7986              MOV     R1,#LOW buf
0026F7 7D07              MOV     R5,#07H
0026F9 123901            LCALL   _CS_CommTo1186_Xor
0026FC 904D8D            MOV     DPTR,#buf+07H
0026FF EF                MOV     A,R7
002700 F0                MOVX    @DPTR,A
  505: 			len  =  8;	
002701 904D90            MOV     DPTR,#len
002704 7408              MOV     A,#08H
002706 F0                MOVX    @DPTR,A
  506: 			break;
002707 E1C0              AJMP    ?C0067?CS_COMMTO1186
  507: 		case CS_CommTo1186_SetRam:		 	// 10 
002709         ?C0078?CS_COMMTO1186:
  508: 			buf[1] = 0x04;
002709 904D87            MOV     DPTR,#buf+01H
00270C 7404              MOV     A,#04H
00270E F0                MOVX    @DPTR,A
  509: 			buf[2] = 0xA3;
00270F A3                INC     DPTR
002710 74A3              MOV     A,#0A3H
002712 F0                MOVX    @DPTR,A
  510: 			buf[3] = databuf[2];
002713 904D83            MOV     DPTR,#databuf
002716 E0                MOVX    A,@DPTR
002717 FB                MOV     R3,A
002718 A3                INC     DPTR
002719 E0                MOVX    A,@DPTR
00271A FA                MOV     R2,A
00271B A3                INC     DPTR
00271C E0                MOVX    A,@DPTR
00271D F9                MOV     R1,A
00271E 900002            MOV     DPTR,#02H
002721 120112            LCALL   ?C?CLDOPTR
002724 904D89            MOV     DPTR,#buf+03H
002727 F0                MOVX    @DPTR,A
  511: 			buf[4] = databuf[1];	
002728 900001            MOV     DPTR,#01H
00272B 120112            LCALL   ?C?CLDOPTR
00272E 904D8A            MOV     DPTR,#buf+04H
002731 F0                MOVX    @DPTR,A
  512: 			buf[5] = databuf[0]; 
002732 1200F9            LCALL   ?C?CLDPTR
002735 904D8B            MOV     DPTR,#buf+05H
002738 F0                MOVX    @DPTR,A
  513: 			buf[6] = CS_CommTo1186_Xor(buf,6);
002739 7B01              MOV     R3,#01H
00273B 7A4D              MOV     R2,#HIGH buf
00273D 7986              MOV     R1,#LOW buf
00273F 7D06              MOV     R5,#06H
002741 123901            LCALL   _CS_CommTo1186_Xor
002744 904D8C            MOV     DPTR,#buf+06H
002747 EF                MOV     A,R7
002748 F0                MOVX    @DPTR,A
  514: 			len  =  7;			
002749 904D90            MOV     DPTR,#len
00274C 7407              MOV     A,#07H
00274E F0                MOVX    @DPTR,A
  515: 			break;
00274F 806F              SJMP    ?C0067?CS_COMMTO1186
  516: 		case CS_CommTo1186_LcdDisplay:		// 11 
002751         ?C0079?CS_COMMTO1186:
  517: 			buf[1] = 0x07;
002751 904D87            MOV     DPTR,#buf+01H
002754 7407              MOV     A,#07H
002756 F0                MOVX    @DPTR,A
  518: 			buf[2] = 0xe0;
002757 A3                INC     DPTR
002758 74E0              MOV     A,#0E0H
00275A F0                MOVX    @DPTR,A
  519: 			buf[3] = databuf[5];
00275B 904D83            MOV     DPTR,#databuf
00275E E0                MOVX    A,@DPTR
00275F FB                MOV     R3,A
002760 A3                INC     DPTR
002761 E0                MOVX    A,@DPTR
002762 FA                MOV     R2,A
002763 A3                INC     DPTR
002764 E0                MOVX    A,@DPTR
002765 F9                MOV     R1,A
002766 900005            MOV     DPTR,#05H
002769 120112            LCALL   ?C?CLDOPTR
00276C 904D89            MOV     DPTR,#buf+03H
00276F F0                MOVX    @DPTR,A
  520: 			buf[4] = databuf[4];
002770 900004            MOV     DPTR,#04H
002773 120112            LCALL   ?C?CLDOPTR
002776 904D8A            MOV     DPTR,#buf+04H
002779 F0                MOVX    @DPTR,A
  521: 			buf[5] = databuf[3];
00277A 900003            MOV     DPTR,#03H
00277D 120112            LCALL   ?C?CLDOPTR
002780 904D8B            MOV     DPTR,#buf+05H
002783 F0                MOVX    @DPTR,A
  522: 			buf[6] = databuf[2];
002784 900002            MOV     DPTR,#02H
002787 120112            LCALL   ?C?CLDOPTR
00278A 904D8C            MOV     DPTR,#buf+06H
00278D F0                MOVX    @DPTR,A
  523: 			buf[7] = databuf[1];
00278E 900001            MOV     DPTR,#01H
002791 120112            LCALL   ?C?CLDOPTR
002794 904D8D            MOV     DPTR,#buf+07H
002797 F0                MOVX    @DPTR,A
  524: 			buf[8] = databuf[0];		 
002798 1200F9            LCALL   ?C?CLDPTR
00279B 904D8E            MOV     DPTR,#buf+08H
00279E F0                MOVX    @DPTR,A
  525: 			buf[9] = CS_CommTo1186_Xor(buf,9);
00279F 7B01              MOV     R3,#01H
0027A1 7A4D              MOV     R2,#HIGH buf
0027A3 7986              MOV     R1,#LOW buf
0027A5 7D09              MOV     R5,#09H
0027A7 123901            LCALL   _CS_CommTo1186_Xor
0027AA 904D8F            MOV     DPTR,#buf+09H
0027AD EF                MOV     A,R7
0027AE F0                MOVX    @DPTR,A
  526: 			len  =  10;
0027AF A3                INC     DPTR
0027B0 740A              MOV     A,#0AH
0027B2 F0                MOVX    @DPTR,A
  527: 			break;
0027B3 800B              SJMP    ?C0067?CS_COMMTO1186
  528: 		default:		
0027B5         ?C0080?CS_COMMTO1186:
  529: 			buf[1] = 0x00;
0027B5 E4                CLR     A
0027B6 904D87            MOV     DPTR,#buf+01H
0027B9 F0                MOVX    @DPTR,A
  530: 			len   = 2;
0027BA 904D90            MOV     DPTR,#len
0027BD 7402              MOV     A,#02H
0027BF F0                MOVX    @DPTR,A
  531: 			break;
  532: 		}
0027C0         ?C0067?CS_COMMTO1186:
  533: 	YC_UARTSendData(buf, len);
0027C0 7B01              MOV     R3,#01H
0027C2 7A4D              MOV     R2,#HIGH buf
0027C4 7986              MOV     R1,#LOW buf
0027C6 904D90            MOV     DPTR,#len
0027C9 E0                MOVX    A,@DPTR
0027CA FD                MOV     R5,A
0027CB 7C00              MOV     R4,#00H
0027CD 618F              AJMP    _YC_UARTSendData
  534: }
----- FUNCTION _CS_CommTo1186_SendCmd (END) -------


----- FUNCTION _SPIFlashRead (BEGIN) -----
 FILE: 'spiflash.c'
   84: void SPIFlashRead(u8_t *buf, u32_t addr, u8_t len)
   85: {
0027CF 904DE8            MOV     DPTR,#addr
0027D2 120332            LCALL   ?C?LSTXDATA
;---- Variable 'buf' assigned to Register 'R1/R2/R3' ----
   86: 	REG_SPID_RXLEN = ESWAP(len);
   87: 	REG_SPID_TXLEN = ESWAP(4);
0027D5 904DEC            MOV     DPTR,#len
0027D8 E0                MOVX    A,@DPTR
0027D9 FD                MOV     R5,A
0027DA FE                MOV     R6,A
0027DB E4                CLR     A
0027DC 90808E            MOV     DPTR,#0808EH
0027DF EE                MOV     A,R6
0027E0 F0                MOVX    @DPTR,A
0027E1 A3                INC     DPTR
0027E2 E4                CLR     A
0027E3 F0                MOVX    @DPTR,A
   88: 	*SF_TX_BUF = SF_READ_DATA;
0027E4 908088            MOV     DPTR,#08088H
0027E7 7404              MOV     A,#04H
0027E9 F0                MOVX    @DPTR,A
0027EA A3                INC     DPTR
0027EB E4                CLR     A
0027EC F0                MOVX    @DPTR,A
   89: 	*(SF_TX_BUF+1) = (addr>>16);
0027ED 9001BC            MOV     DPTR,#01BCH
0027F0 7403              MOV     A,#03H
0027F2 F0                MOVX    @DPTR,A
   90: 	*(SF_TX_BUF+2) = (addr>>8);
0027F3 904DE8            MOV     DPTR,#addr
0027F6 E0                MOVX    A,@DPTR
0027F7 FC                MOV     R4,A
0027F8 A3                INC     DPTR
0027F9 E0                MOVX    A,@DPTR
0027FA FD                MOV     R5,A
0027FB A3                INC     DPTR
0027FC E0                MOVX    A,@DPTR
0027FD FE                MOV     R6,A
0027FE A3                INC     DPTR
0027FF E0                MOVX    A,@DPTR
002800 FF                MOV     R7,A
002801 7810              MOV     R0,#010H
002803 12030C            LCALL   ?C?ULSHR
002806 9001BD            MOV     DPTR,#01BDH
002809 EF                MOV     A,R7
00280A F0                MOVX    @DPTR,A
   91: 	*(SF_TX_BUF+3) = (addr&0xff);
00280B 904DE8            MOV     DPTR,#addr
00280E E0                MOVX    A,@DPTR
00280F FC                MOV     R4,A
002810 A3                INC     DPTR
002811 E0                MOVX    A,@DPTR
002812 FD                MOV     R5,A
002813 A3                INC     DPTR
002814 E0                MOVX    A,@DPTR
002815 FE                MOV     R6,A
002816 A3                INC     DPTR
002817 E0                MOVX    A,@DPTR
002818 FF                MOV     R7,A
002819 7808              MOV     R0,#08H
00281B 12030C            LCALL   ?C?ULSHR
00281E 9001BE            MOV     DPTR,#01BEH
002821 EF                MOV     A,R7
002822 F0                MOVX    @DPTR,A
   92: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
002823 904DE8            MOV     DPTR,#addr
002826 E0                MOVX    A,@DPTR
002827 FC                MOV     R4,A
002828 A3                INC     DPTR
002829 E0                MOVX    A,@DPTR
00282A FD                MOV     R5,A
00282B A3                INC     DPTR
00282C E0                MOVX    A,@DPTR
00282D FE                MOV     R6,A
00282E A3                INC     DPTR
00282F E0                MOVX    A,@DPTR
002830 FF                MOV     R7,A
002831 E4                CLR     A
002832 9001BF            MOV     DPTR,#01BFH
002835 EF                MOV     A,R7
002836 F0                MOVX    @DPTR,A
   93: 	REG_SPID_RXADDR = ESWAP((u16_t)buf);
002837 90808A            MOV     DPTR,#0808AH
00283A 74BC              MOV     A,#0BCH
00283C F0                MOVX    @DPTR,A
00283D A3                INC     DPTR
00283E 7401              MOV     A,#01H
002840 F0                MOVX    @DPTR,A
   94: 	REG_SPID_CTRL  |=  (1<<6);
002841 E9                MOV     A,R1
002842 FC                MOV     R4,A
002843 EA                MOV     A,R2
002844 FF                MOV     R7,A
002845 EC                MOV     A,R4
002846 FE                MOV     R6,A
002847 EF                MOV     A,R7
002848 A3                INC     DPTR
002849 EE                MOV     A,R6
00284A F0                MOVX    @DPTR,A
00284B A3                INC     DPTR
00284C EF                MOV     A,R7
00284D F0                MOVX    @DPTR,A
   95: 	REG_MISC_CTRL = SPID_START;
00284E 908086            MOV     DPTR,#08086H
002851 E0                MOVX    A,@DPTR
002852 4440              ORL     A,#040H
002854 F0                MOVX    @DPTR,A
   96: 	//spi_read_flash_wait
002855 908006            MOV     DPTR,#08006H
002858 7402              MOV     A,#02H
00285A F0                MOVX    @DPTR,A
00285B         ?C0019?SPIFLASH:
   97: 	while(REG_DMA_STATUS&(1<<7));	//waiting for spid write
00285B 90812C            MOV     DPTR,#0812CH
00285E E0                MOVX    A,@DPTR
00285F 20E7F9            JB      ACC.7,?C0019?SPIFLASH
002862         ?C0020?SPIFLASH:
002862         ?C0021?SPIFLASH:
   98: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
002862 90812C            MOV     DPTR,#0812CH
002865 E0                MOVX    A,@DPTR
002866 30E3F9            JNB     ACC.3,?C0021?SPIFLASH
   99: 	return;
  100: }
002869 22                RET     
----- FUNCTION _SPIFlashRead (END) -------


----- FUNCTION _BT_EventFifoOut (BEGIN) -----
 FILE: 'BT_IPC.c'
   43: void BT_EventFifoOut(BT_EVENTFIFO_t * event)
   44: {
00286A 904E25            MOV     DPTR,#event
00286D EB                MOV     A,R3
00286E F0                MOVX    @DPTR,A
00286F A3                INC     DPTR
002870 EA                MOV     A,R2
002871 F0                MOVX    @DPTR,A
002872 A3                INC     DPTR
002873 E9                MOV     A,R1
002874 F0                MOVX    @DPTR,A
   45: 	u16_t new_rprt,i;
   46: 	u8_t event_prefix;
   47: 	if(BT_GetEvtFifoDepth()>2)
002875 316D              ACALL   BT_GetEvtFifoDepth
002877 EF                MOV     A,R7
002878 D3                SETB    C
002879 9402              SUBB    A,#02H
00287B 5002              JNC     $ + 4H
00287D 215E              AJMP    ?C0011?BT_IPC
   48: 	{//event is not empty
   49: 		new_rprt = ESWAP(BT_EventRptr);
00287F 904A05            MOV     DPTR,#BT_EventRptr+01H
002882 E0                MOVX    A,@DPTR
002883 FC                MOV     R4,A
002884 904A04            MOV     DPTR,#BT_EventRptr
002887 E0                MOVX    A,@DPTR
002888 FF                MOV     R7,A
002889 EC                MOV     A,R4
00288A FE                MOV     R6,A
00288B EF                MOV     A,R7
00288C 904E28            MOV     DPTR,#new_rprt
00288F EE                MOV     A,R6
002890 F0                MOVX    @DPTR,A
002891 A3                INC     DPTR
002892 EF                MOV     A,R7
002893 F0                MOVX    @DPTR,A
   50: 		event_prefix = HREAD(new_rprt++);
002894 904E28            MOV     DPTR,#new_rprt
002897 E4                CLR     A
002898 75F001            MOV     B,#01H
00289B 1201C8            LCALL   ?C?ILDIX
00289E 85F082            MOV     DPL,B
0028A1 F583              MOV     DPH,A
0028A3 E0                MOVX    A,@DPTR
0028A4 FF                MOV     R7,A
;---- Variable 'event_prefix' assigned to Register 'R7' ----
   51: 		if(event_prefix == CS_PREFIX_EVENT) {
0028A5 64C6              XRL     A,#0C6H
0028A7 6002              JZ      $ + 4H
0028A9 2139              AJMP    ?C0012?BT_IPC
   52: 			event->len = HREAD(new_rprt++);
0028AB 904E28            MOV     DPTR,#new_rprt
0028AE 75F001            MOV     B,#01H
0028B1 1201C8            LCALL   ?C?ILDIX
0028B4 85F082            MOV     DPL,B
0028B7 F583              MOV     DPH,A
0028B9 E0                MOVX    A,@DPTR
0028BA FF                MOV     R7,A
0028BB 904E25            MOV     DPTR,#event
0028BE E0                MOVX    A,@DPTR
0028BF FB                MOV     R3,A
0028C0 A3                INC     DPTR
0028C1 E0                MOVX    A,@DPTR
0028C2 FA                MOV     R2,A
0028C3 A3                INC     DPTR
0028C4 E0                MOVX    A,@DPTR
0028C5 F9                MOV     R1,A
0028C6 EF                MOV     A,R7
0028C7 12013F            LCALL   ?C?CSTPTR
   53: 			if( new_rprt == (mem_event_buf_end+1) )
0028CA 904E28            MOV     DPTR,#new_rprt
0028CD E0                MOVX    A,@DPTR
0028CE B4500F            CJNE    A,#050H,?C0013?BT_IPC
0028D1 A3                INC     DPTR
0028D2 E0                MOVX    A,@DPTR
0028D3 B4000A            CJNE    A,#00H,?C0013?BT_IPC
   54: 			{
   55: 				new_rprt = mem_event_buf;
0028D6 904E28            MOV     DPTR,#new_rprt
0028D9 744F              MOV     A,#04FH
0028DB F0                MOVX    @DPTR,A
0028DC A3                INC     DPTR
0028DD 7480              MOV     A,#080H
0028DF F0                MOVX    @DPTR,A
   56: 			}
0028E0         ?C0013?BT_IPC:
   57: 			for(i=0;i<event->len;i++)
;---- Variable 'i' assigned to Register 'R6/R7' ----
0028E0 E4                CLR     A
0028E1 FF                MOV     R7,A
0028E2 FE                MOV     R6,A
0028E3         ?C0014?BT_IPC:
0028E3 904E25            MOV     DPTR,#event
0028E6 E0                MOVX    A,@DPTR
0028E7 FB                MOV     R3,A
0028E8 A3                INC     DPTR
0028E9 E0                MOVX    A,@DPTR
0028EA FA                MOV     R2,A
0028EB A3                INC     DPTR
0028EC E0                MOVX    A,@DPTR
0028ED F9                MOV     R1,A
0028EE 1200F9            LCALL   ?C?CLDPTR
0028F1 FD                MOV     R5,A
0028F2 C3                CLR     C
0028F3 EF                MOV     A,R7
0028F4 9D                SUBB    A,R5
0028F5 EE                MOV     A,R6
0028F6 9400              SUBB    A,#00H
0028F8 504E              JNC     ?C0018?BT_IPC
   58: 			{
   59: 				event->DATA[i] = HREAD(new_rprt++);
0028FA 904E28            MOV     DPTR,#new_rprt
0028FD E4                CLR     A
0028FE 75F001            MOV     B,#01H
002901 1201C8            LCALL   ?C?ILDIX
002904 85F082            MOV     DPL,B
002907 F583              MOV     DPH,A
002909 E0                MOVX    A,@DPTR
00290A FD                MOV     R5,A
00290B E9                MOV     A,R1
00290C 2401              ADD     A,#01H
00290E F9                MOV     R1,A
00290F E4                CLR     A
002910 3A                ADDC    A,R2
002911 FA                MOV     R2,A
002912 E9                MOV     A,R1
002913 2F                ADD     A,R7
002914 F9                MOV     R1,A
002915 EA                MOV     A,R2
002916 3E                ADDC    A,R6
002917 FA                MOV     R2,A
002918 ED                MOV     A,R5
002919 12013F            LCALL   ?C?CSTPTR
   60: 				if( new_rprt == (mem_event_buf_end+1) )
00291C 904E28            MOV     DPTR,#new_rprt
00291F E0                MOVX    A,@DPTR
002920 B4500F            CJNE    A,#050H,?C0016?BT_IPC
002923 A3                INC     DPTR
002924 E0                MOVX    A,@DPTR
002925 B4000A            CJNE    A,#00H,?C0016?BT_IPC
   61: 				{
   62: 					new_rprt = mem_event_buf;
002928 904E28            MOV     DPTR,#new_rprt
00292B 744F              MOV     A,#04FH
00292D F0                MOVX    @DPTR,A
00292E A3                INC     DPTR
00292F 7480              MOV     A,#080H
002931 F0                MOVX    @DPTR,A
   63: 				}
   64: 			}
002932         ?C0016?BT_IPC:
002932 0F                INC     R7
002933 BF0001            CJNE    R7,#00H,?C0033?BT_IPC
002936 0E                INC     R6
002937         ?C0033?BT_IPC:
002937 80AA              SJMP    ?C0014?BT_IPC
   65: 		}
002939         ?C0012?BT_IPC:
   66: 		else {
   67: 			event->len = 0;
002939 904E25            MOV     DPTR,#event
00293C E0                MOVX    A,@DPTR
00293D FB                MOV     R3,A
00293E A3                INC     DPTR
00293F E0                MOVX    A,@DPTR
002940 FA                MOV     R2,A
002941 A3                INC     DPTR
002942 E0                MOVX    A,@DPTR
002943 F9                MOV     R1,A
002944 E4                CLR     A
002945 12013F            LCALL   ?C?CSTPTR
   68: 		}
002948         ?C0018?BT_IPC:
   69: 		BT_EventRptr = ESWAP(new_rprt);
002948 904E28            MOV     DPTR,#new_rprt
00294B E0                MOVX    A,@DPTR
00294C FC                MOV     R4,A
00294D A3                INC     DPTR
00294E E0                MOVX    A,@DPTR
00294F FA                MOV     R2,A
002950 EC                MOV     A,R4
002951 FF                MOV     R7,A
002952 EA                MOV     A,R2
002953 FE                MOV     R6,A
002954 EF                MOV     A,R7
002955 904A04            MOV     DPTR,#BT_EventRptr
002958 EE                MOV     A,R6
002959 F0                MOVX    @DPTR,A
00295A A3                INC     DPTR
00295B EF                MOV     A,R7
00295C F0                MOVX    @DPTR,A
   70: 	}
00295D 22                RET     
00295E         ?C0011?BT_IPC:
   71: 	else
   72: 	{
   73: 		event->len = 0;
00295E 904E25            MOV     DPTR,#event
002961 E0                MOVX    A,@DPTR
002962 FB                MOV     R3,A
002963 A3                INC     DPTR
002964 E0                MOVX    A,@DPTR
002965 FA                MOV     R2,A
002966 A3                INC     DPTR
002967 E0                MOVX    A,@DPTR
002968 F9                MOV     R1,A
002969 E4                CLR     A
00296A 02013F            LJMP    ?C?CSTPTR
   74: 	}
----- FUNCTION _BT_EventFifoOut (END) -------


----- FUNCTION BT_GetEvtFifoDepth (BEGIN) -----
 FILE: 'BT_IPC.c'
   87: u8_t BT_GetEvtFifoDepth(void)
   88: {
   89: 	u16_t wptr,rptr,len;
   90: 	wptr = ESWAP(BT_EventWptr);
00296D 904A07            MOV     DPTR,#BT_EventWptr+01H
002970 E0                MOVX    A,@DPTR
002971 FC                MOV     R4,A
002972 904A06            MOV     DPTR,#BT_EventWptr
002975 E0                MOVX    A,@DPTR
002976 FF                MOV     R7,A
002977 EC                MOV     A,R4
002978 EF                MOV     A,R7
;---- Variable 'wptr' assigned to Register 'R4/R5' ----
002979 FD                MOV     R5,A
   91: 	rptr = ESWAP(BT_EventRptr);
00297A 904A05            MOV     DPTR,#BT_EventRptr+01H
00297D E0                MOVX    A,@DPTR
00297E FA                MOV     R2,A
00297F 904A04            MOV     DPTR,#BT_EventRptr
002982 E0                MOVX    A,@DPTR
002983 FF                MOV     R7,A
002984 EA                MOV     A,R2
002985 FE                MOV     R6,A
002986 EF                MOV     A,R7
;---- Variable 'rptr' assigned to Register 'R6/R7' ----
   92: 	len = (wptr + BT_EVT_BUF_LEN - rptr)&(BT_EVT_BUF_LEN-1);
002987 ED                MOV     A,R5
002988 2480              ADD     A,#080H
00298A FD                MOV     R5,A
00298B E4                CLR     A
00298C 3C                ADDC    A,R4
00298D FC                MOV     R4,A
00298E C3                CLR     C
00298F ED                MOV     A,R5
002990 9F                SUBB    A,R7
002991 FF                MOV     R7,A
002992 EC                MOV     A,R4
002993 9E                SUBB    A,R6
002994 7E00              MOV     R6,#00H
002996 EF                MOV     A,R7
002997 547F              ANL     A,#07FH
002999 FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R6/R7' ----
   93: 	return len&0xff;
   94: }
00299A 22                RET     
----- FUNCTION BT_GetEvtFifoDepth (END) -------


----- FUNCTION BT_GetCmdFifoDepth (BEGIN) -----
 FILE: 'BT_IPC.c'
   78: u8_t BT_GetCmdFifoDepth(void)
   79: {
   80: 	u16_t wptr,rptr,len;
   81: 	wptr = ESWAP(BT_CmdWptr);
00299B 904A03            MOV     DPTR,#BT_CmdWptr+01H
00299E E0                MOVX    A,@DPTR
00299F FC                MOV     R4,A
0029A0 904A02            MOV     DPTR,#BT_CmdWptr
0029A3 E0                MOVX    A,@DPTR
0029A4 FF                MOV     R7,A
0029A5 EC                MOV     A,R4
0029A6 EF                MOV     A,R7
;---- Variable 'wptr' assigned to Register 'R4/R5' ----
0029A7 FD                MOV     R5,A
   82: 	rptr = ESWAP(BT_CmdRptr);
0029A8 904A01            MOV     DPTR,#BT_CmdRptr+01H
0029AB E0                MOVX    A,@DPTR
0029AC FA                MOV     R2,A
0029AD 904A00            MOV     DPTR,#BT_CmdRptr
0029B0 E0                MOVX    A,@DPTR
0029B1 FF                MOV     R7,A
0029B2 EA                MOV     A,R2
0029B3 FE                MOV     R6,A
0029B4 EF                MOV     A,R7
;---- Variable 'rptr' assigned to Register 'R6/R7' ----
   83: 	len = (wptr + BT_CMD_BUF_LEN - rptr)&(BT_CMD_BUF_LEN-1);
0029B5 ED                MOV     A,R5
0029B6 2480              ADD     A,#080H
0029B8 FD                MOV     R5,A
0029B9 E4                CLR     A
0029BA 3C                ADDC    A,R4
0029BB FC                MOV     R4,A
0029BC C3                CLR     C
0029BD ED                MOV     A,R5
0029BE 9F                SUBB    A,R7
0029BF FF                MOV     R7,A
0029C0 EC                MOV     A,R4
0029C1 9E                SUBB    A,R6
0029C2 7E00              MOV     R6,#00H
0029C4 EF                MOV     A,R7
0029C5 547F              ANL     A,#07FH
0029C7 FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R6/R7' ----
   84: 	return len&0xff;
   85: }
0029C8 22                RET     
----- FUNCTION BT_GetCmdFifoDepth (END) -------


----- FUNCTION BT_CmdFifoEmpty (BEGIN) -----
 FILE: 'BT_IPC.c'
   96: bool BT_CmdFifoEmpty(void)
   97: {
   98: 	if(BT_GetCmdFifoDepth()==0)
   99: 	{
0029C9 319B              ACALL   BT_GetCmdFifoDepth
0029CB EF                MOV     A,R7
0029CC 7002              JNZ     ?C0023?BT_IPC
  100: 		return true;
  101: 	}
0029CE D3                SETB    C
0029CF 22                RET     
  102: 	return false;
0029D0         ?C0023?BT_IPC:
  103: }
0029D0 C3                CLR     C
  104: 
0029D1 22                RET     
----- FUNCTION BT_CmdFifoEmpty (END) -------


----- FUNCTION _BT_CmdFifoFull (BEGIN) -----
 FILE: 'BT_IPC.c'
  105: bool BT_CmdFifoFull(BT_CMDFIFO_t *pFIFO)
  106: {
0029D2 904E45            MOV     DPTR,#pFIFO
0029D5 EB                MOV     A,R3
0029D6 F0                MOVX    @DPTR,A
0029D7 A3                INC     DPTR
0029D8 EA                MOV     A,R2
0029D9 F0                MOVX    @DPTR,A
0029DA A3                INC     DPTR
0029DB E9                MOV     A,R1
0029DC F0                MOVX    @DPTR,A
  107: 	if((BT_GetCmdFifoDepth()+pFIFO->len+1) > BT_CMD_BUF_LEN)
  108: 		return true;
0029DD 319B              ACALL   BT_GetCmdFifoDepth
0029DF 904E45            MOV     DPTR,#pFIFO
0029E2 E0                MOVX    A,@DPTR
0029E3 FB                MOV     R3,A
0029E4 A3                INC     DPTR
0029E5 E0                MOVX    A,@DPTR
0029E6 FA                MOV     R2,A
0029E7 A3                INC     DPTR
0029E8 E0                MOVX    A,@DPTR
0029E9 F9                MOV     R1,A
0029EA 1200F9            LCALL   ?C?CLDPTR
0029ED 2F                ADD     A,R7
0029EE FF                MOV     R7,A
0029EF E4                CLR     A
0029F0 33                RLC     A
0029F1 CF                XCH     A,R7
0029F2 2401              ADD     A,#01H
0029F4 CF                XCH     A,R7
0029F5 3400              ADDC    A,#00H
0029F7 FE                MOV     R6,A
0029F8 D3                SETB    C
0029F9 EF                MOV     A,R7
0029FA 9480              SUBB    A,#080H
0029FC EE                MOV     A,R6
0029FD 6480              XRL     A,#080H
0029FF 9480              SUBB    A,#080H
002A01 4002              JC      ?C0025?BT_IPC
  109: 	return false;
002A03 D3                SETB    C
002A04 22                RET     
002A05         ?C0025?BT_IPC:
  110: }
002A05 C3                CLR     C
  110: 
002A06 22                RET     
----- FUNCTION _BT_CmdFifoFull (END) -------


----- FUNCTION YC_Ice_break (BEGIN) -----
 FILE: 'YC_Utilities.c'
    4: void YC_Ice_break()
    5: {
    6: 	CPUB_ICE_CTRL = 1;
    7: 	return;
002A07 908280            MOV     DPTR,#08280H
002A0A 7401              MOV     A,#01H
002A0C F0                MOVX    @DPTR,A
    8: }
002A0D 22                RET     
----- FUNCTION YC_Ice_break (END) -------


----- FUNCTION _cmemcpy (BEGIN) -----
 FILE: 'YC_Utilities.c'
   28: void cmemcpy(pxbyte dest, const u8_t* src, u8_t len) small
   29: {
002A0E 8E21              MOV     dest,R6
002A10 8F22              MOV     dest+01H,R7
002A12 8B23              MOV     src,R3
002A14 8A24              MOV     src+01H,R2
002A16 8925              MOV     src+02H,R1
002A18         ?C0011?YC_UTILITIES:
   30: 	while(len--)
002A18 AF26              MOV     R7,len
002A1A 1526              DEC     len
002A1C EF                MOV     A,R7
002A1D 6025              JZ      ?C0013?YC_UTILITIES
   31: 		*dest++ = (u8_t)(*src++);
002A1F AB23              MOV     R3,src
002A21 0525              INC     src+02H
002A23 E525              MOV     A,src+02H
002A25 AA24              MOV     R2,src+01H
002A27 7002              JNZ     ?C0049?YC_UTILITIES
002A29 0524              INC     src+01H
002A2B         ?C0049?YC_UTILITIES:
002A2B 14                DEC     A
002A2C F9                MOV     R1,A
002A2D 1200F9            LCALL   ?C?CLDPTR
002A30 FF                MOV     R7,A
002A31 0522              INC     dest+01H
002A33 E522              MOV     A,dest+01H
002A35 AC21              MOV     R4,dest
002A37 7002              JNZ     ?C0050?YC_UTILITIES
002A39 0521              INC     dest
002A3B         ?C0050?YC_UTILITIES:
002A3B 14                DEC     A
002A3C F582              MOV     DPL,A
002A3E 8C83              MOV     DPH,R4
002A40 EF                MOV     A,R7
002A41 F0                MOVX    @DPTR,A
002A42 80D4              SJMP    ?C0011?YC_UTILITIES
   32: 	return;
   33: }
002A44         ?C0013?YC_UTILITIES:
002A44 22                RET     
----- FUNCTION _cmemcpy (END) -------


----- FUNCTION _YC_MemCheckEmpty (BEGIN) -----
 FILE: 'YC_Utilities.c'
   34: bool YC_MemCheckEmpty(u8_t *mem, u8_t len)
   35: {
002A45 904E33            MOV     DPTR,#mem
002A48 EB                MOV     A,R3
002A49 F0                MOVX    @DPTR,A
002A4A A3                INC     DPTR
002A4B EA                MOV     A,R2
002A4C F0                MOVX    @DPTR,A
002A4D A3                INC     DPTR
002A4E E9                MOV     A,R1
002A4F F0                MOVX    @DPTR,A
002A50 A3                INC     DPTR
002A51 ED                MOV     A,R5
002A52 F0                MOVX    @DPTR,A
   36: 	int i;
   37: 	for(i=0;i<len;i++)
;---- Variable 'i' assigned to Register 'R6/R7' ----
002A53 E4                CLR     A
002A54 FF                MOV     R7,A
002A55 FE                MOV     R6,A
002A56         ?C0014?YC_UTILITIES:
002A56 904E36            MOV     DPTR,#len
002A59 E0                MOVX    A,@DPTR
002A5A FD                MOV     R5,A
002A5B C3                CLR     C
002A5C EF                MOV     A,R7
002A5D 9D                SUBB    A,R5
002A5E 7480              MOV     A,#080H
002A60 F8                MOV     R0,A
002A61 6E                XRL     A,R6
002A62 98                SUBB    A,R0
002A63 5034              JNC     ?C0015?YC_UTILITIES
   38: 	{
   39: 		if(mem[i])
002A65 904E33            MOV     DPTR,#mem
002A68 E0                MOVX    A,@DPTR
002A69 FB                MOV     R3,A
002A6A A3                INC     DPTR
002A6B E0                MOVX    A,@DPTR
002A6C FA                MOV     R2,A
002A6D A3                INC     DPTR
002A6E E0                MOVX    A,@DPTR
002A6F F9                MOV     R1,A
002A70 8F82              MOV     DPL,R7
002A72 8E83              MOV     DPH,R6
002A74 120112            LCALL   ?C?CLDOPTR
002A77 FD                MOV     R5,A
002A78 701F              JNZ     ?C0015?YC_UTILITIES
   40: 		{
   41: 			break;
   42: 		}
002A7A         ?C0017?YC_UTILITIES:
   43: 		if(i==(len-1)&&mem[i]==0)
002A7A 904E36            MOV     DPTR,#len
002A7D E0                MOVX    A,@DPTR
002A7E 24FF              ADD     A,#0FFH
002A80 FB                MOV     R3,A
002A81 E4                CLR     A
002A82 34FF              ADDC    A,#0FFH
002A84 FA                MOV     R2,A
002A85 EB                MOV     A,R3
002A86 B50709            CJNE    A,AR7,?C0016?YC_UTILITIES
002A89 EA                MOV     A,R2
002A8A B50605            CJNE    A,AR6,?C0016?YC_UTILITIES
002A8D ED                MOV     A,R5
002A8E 7002              JNZ     ?C0016?YC_UTILITIES
   44: 		{
   45: 			return 0;
002A90 C3                CLR     C
002A91 22                RET     
   46: 		}
   47: 	}
002A92         ?C0016?YC_UTILITIES:
002A92 0F                INC     R7
002A93 BF0001            CJNE    R7,#00H,?C0052?YC_UTILITIES
002A96 0E                INC     R6
002A97         ?C0052?YC_UTILITIES:
002A97 80BD              SJMP    ?C0014?YC_UTILITIES
002A99         ?C0015?YC_UTILITIES:
   48: 	return 1;
002A99 D3                SETB    C
   49: }
002A9A 22                RET     
----- FUNCTION _YC_MemCheckEmpty (END) -------


----- FUNCTION _YC_Delay1S (BEGIN) -----
 FILE: 'YC_Utilities.c'
   69: void YC_Delay1S(u8_t Time)
   70: {
;---- Variable 'Time' assigned to Register 'R7' ----
   71: 	u16_t j,k;
   72: 	for(;Time>0;Time--)
002A9B         ?C0034?YC_UTILITIES:
002A9B EF                MOV     A,R7
002A9C D3                SETB    C
002A9D 9400              SUBB    A,#00H
002A9F 401F              JC      ?C0043?YC_UTILITIES
   73: 	{
   74: 		for(j=0;j<1000;j++)
;---- Variable 'j' assigned to Register 'R4/R5' ----
002AA1 E4                CLR     A
002AA2 FD                MOV     R5,A
002AA3 FC                MOV     R4,A
002AA4         ?C0037?YC_UTILITIES:
   75: 		{
   76: 			for(k=0;k<1150;k++);
;---- Variable 'k' assigned to Register 'R2/R3' ----
002AA4 E4                CLR     A
002AA5 FB                MOV     R3,A
002AA6 FA                MOV     R2,A
002AA7         ?C0040?YC_UTILITIES:
002AA7 0B                INC     R3
002AA8 BB0001            CJNE    R3,#00H,?C0055?YC_UTILITIES
002AAB 0A                INC     R2
002AAC         ?C0055?YC_UTILITIES:
002AAC BA04F8            CJNE    R2,#04H,?C0040?YC_UTILITIES
002AAF BB7EF5            CJNE    R3,#07EH,?C0040?YC_UTILITIES
   77: 		}
002AB2         ?C0039?YC_UTILITIES:
002AB2 0D                INC     R5
002AB3 BD0001            CJNE    R5,#00H,?C0056?YC_UTILITIES
002AB6 0C                INC     R4
002AB7         ?C0056?YC_UTILITIES:
002AB7 BC03EA            CJNE    R4,#03H,?C0037?YC_UTILITIES
002ABA BDE8E7            CJNE    R5,#0E8H,?C0037?YC_UTILITIES
   78: 	}
002ABD         ?C0036?YC_UTILITIES:
002ABD 1F                DEC     R7
002ABE 80DB              SJMP    ?C0034?YC_UTILITIES
   79: }
002AC0         ?C0043?YC_UTILITIES:
002AC0 22                RET     
----- FUNCTION _YC_Delay1S (END) -------


----- FUNCTION CS_Scale_Proc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  121: void CS_Scale_Proc(void)
  122: {
  123: 	if(R_Scale_state == CS_Scale_state_init)
  124: 		{	
002AC1 904CC5            MOV     DPTR,#R_Scale_state
002AC4 E0                MOVX    A,@DPTR
002AC5 7004              JNZ     ?C0001?CS_SCALE_PROC
  125: 		CS_Scale_PowerOnProc(0);
  126: 		}
002AC7 C200              CLR     ?CS_Scale_PowerOnProc?BIT
002AC9 91E5              ACALL   CS_Scale_PowerOnProc
  127: 	if(R_Scale_state == CS_Scale_state_standby)
002ACB         ?C0001?CS_SCALE_PROC:
  128: 		{
002ACB 904CC5            MOV     DPTR,#R_Scale_state
002ACE E0                MOVX    A,@DPTR
002ACF B40204            CJNE    A,#02H,?C0002?CS_SCALE_PROC
  129: 		CS_Scale_StandbyProc(0);		
  130: 		}
002AD2 E4                CLR     A
002AD3 FF                MOV     R7,A
002AD4 7127              ACALL   _CS_Scale_StandbyProc
  131: 		
002AD6         ?C0002?CS_SCALE_PROC:
  132: 	if(B_Weight_AdOk == true)
002AD6 904CD7            MOV     DPTR,#B_Weight_AdOk
002AD9 E0                MOVX    A,@DPTR
002ADA 6401              XRL     A,#01H
002ADC 7048              JNZ     ?C0010?CS_SCALE_PROC
  133: 		{		
  134: 		B_Weight_AdOk = false;	
002ADE F0                MOVX    @DPTR,A
  135: 		
  136: 		if(CS_Scale_ZeroProc(GetPowerOnZeroState,0)== false)	//还没上电取零点先取零点
002ADF FD                MOV     R5,A
002AE0 FC                MOV     R4,A
002AE1 7F02              MOV     R7,#02H
002AE3 1212F1            LCALL   _CS_Scale_ZeroProc
002AE6 EF                MOV     A,R7
002AE7 4E                ORL     A,R6
002AE8 7007              JNZ     ?C0004?CS_SCALE_PROC
  137: 			{
  138: 			CS_Scale_ZeroProc(FindPowerOnZero,0);
002AEA FD                MOV     R5,A
002AEB FC                MOV     R4,A
002AEC 7F0A              MOV     R7,#0AH
002AEE 0212F1            LJMP    _CS_Scale_ZeroProc
  139: 			}
002AF1         ?C0004?CS_SCALE_PROC:
  140: 		else
  141: 			{
  142: 				
  143: 			if(R_Scale_state == CS_Scale_state_weighting)
002AF1 904CC5            MOV     DPTR,#R_Scale_state
002AF4 E0                MOVX    A,@DPTR
002AF5 B40105            CJNE    A,#01H,?C0006?CS_SCALE_PROC
  144: 				{
  145: 				CS_Scale_WeightProc();
002AF8 D1DD              ACALL   CS_Scale_WeightProc
  146: 				CS_ScaleDisplay();
002AFA 12153A            LCALL   CS_ScaleDisplay
  147: 				}
002AFD         ?C0006?CS_SCALE_PROC:
  148: 			if(R_Scale_state == CS_Scale_state_locking)
002AFD 904CC5            MOV     DPTR,#R_Scale_state
002B00 E0                MOVX    A,@DPTR
002B01 B40412            CJNE    A,#04H,?C0007?CS_SCALE_PROC
  149: 				{					
  150: 				CS_ScaleDisplay_SteadyFlash();
002B04 120F73            LCALL   CS_ScaleDisplay_SteadyFlash
  151: 				if(CS_SoftTimer(GetIfTimeOut) == true)	//锁定闪现时间到
002B07 7F03              MOV     R7,#03H
002B09 120F15            LCALL   _CS_SoftTimer
002B0C BF0107            CJNE    R7,#01H,?C0007?CS_SCALE_PROC
  152: 					{
  153: 					CS_Scale_SteadyProc(SteadyProcRun);
002B0F 7F01              MOV     R7,#01H
002B11 B1CE              ACALL   _CS_Scale_SteadyProc
  154: 					CS_ScaleDisplay();
002B13 12153A            LCALL   CS_ScaleDisplay
  155: 					}
  156: 				}
002B16         ?C0007?CS_SCALE_PROC:
  157: 			if(R_Scale_state == CS_Scale_state_caling)
002B16 904CC5            MOV     DPTR,#R_Scale_state
002B19 E0                MOVX    A,@DPTR
002B1A B40305            CJNE    A,#03H,?C0009?CS_SCALE_PROC
  158: 				{
  159: 				CS_Scale_CaliProc(CaliProcRun);
002B1D E4                CLR     A
002B1E FF                MOV     R7,A
002B1F 120A38            LCALL   _CS_Scale_CaliProc
  160: 				}	
002B22         ?C0009?CS_SCALE_PROC:
  161: 			
  162: 			CS_Scale_TimeOutProc(0);
002B22 E4                CLR     A
002B23 FF                MOV     R7,A
002B24 71BB              ACALL   _CS_Scale_TimeOutProc
  163: 			}
  164: 		}
  165: }	
002B26         ?C0010?CS_SCALE_PROC:
002B26 22                RET     
----- FUNCTION CS_Scale_Proc (END) -------


----- FUNCTION _CS_Scale_StandbyProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1191: void CS_Scale_StandbyProc(u8_t B_Reset)
 1192: {
;---- Variable 'B_Reset' assigned to Register 'R7' ----
 1193: 	static u8_t xdata comm_doing;
 1194: 	static u8_t xdata StandbyState;
 1195: 
 1196: 	if(B_Reset==1)
002B27 EF                MOV     A,R7
002B28 B4010A            CJNE    A,#01H,?C0171?CS_SCALE_PROC
 1197: 		{
 1198: 		StandbyState=CS_Standby_S1_ToSleep;
002B2B E4                CLR     A
002B2C 904CB5            MOV     DPTR,#StandbyState
002B2F F0                MOVX    @DPTR,A
 1199: 		comm_doing=false;
002B30 904CB4            MOV     DPTR,#comm_doing
002B33 F0                MOVX    @DPTR,A
002B34 22                RET     
 1200: 		return;
 1201: 		}
002B35         ?C0171?CS_SCALE_PROC:
 1202: 
 1203: 	if(B_Reset==2)
002B35 EF                MOV     A,R7
002B36 B4020C            CJNE    A,#02H,?C0173?CS_SCALE_PROC
 1204: 		{
 1205: 		StandbyState=CS_Standby_S2_WakeUp;
002B39 904CB5            MOV     DPTR,#StandbyState
002B3C 7401              MOV     A,#01H
002B3E F0                MOVX    @DPTR,A
 1206: 		comm_doing=false;
002B3F E4                CLR     A
002B40 904CB4            MOV     DPTR,#comm_doing
002B43 F0                MOVX    @DPTR,A
002B44 22                RET     
 1207: 		return;
 1208: 		}
002B45         ?C0173?CS_SCALE_PROC:
 1209: 	
 1210: 	switch(StandbyState)
002B45 904CB5            MOV     DPTR,#StandbyState
002B48 E0                MOVX    A,@DPTR
002B49 14                DEC     A
002B4A 6035              JZ      ?C0178?CS_SCALE_PROC
002B4C 04                INC     A
002B4D 7066              JNZ     ?C0181?CS_SCALE_PROC
 1211: 	{
 1212: 	case CS_Standby_S1_ToSleep:
002B4F         ?C0175?CS_SCALE_PROC:
 1213: 		if(comm_doing==false)
002B4F 904CB4            MOV     DPTR,#comm_doing
002B52 E0                MOVX    A,@DPTR
002B53 7006              JNZ     ?C0176?CS_SCALE_PROC
 1214: 			{
 1215: 			comm_doing=true;
002B55 04                INC     A
002B56 F0                MOVX    @DPTR,A
 1216: 
 1217: 			CS_Scale_1186ComSend(CS_CommTo1186_SetSleepMode);
002B57 7FA0              MOV     R7,#0A0H
002B59 91DA              ACALL   _CS_Scale_1186ComSend
 1218: 			//sys_state = SYS_ST_IDLE;			//系统进入睡眠
 1219: 			}
002B5B         ?C0176?CS_SCALE_PROC:
 1220: 		if(CS_If1186ComSucess()==true)
002B5B B1C8              ACALL   CS_If1186ComSucess
002B5D EF                MOV     A,R7
002B5E 6401              XRL     A,#01H
002B60 7058              JNZ     ?C0172?CS_SCALE_PROC
 1221: 			{
 1222: 			comm_doing=false;
002B62 904CB4            MOV     DPTR,#comm_doing
002B65 F0                MOVX    @DPTR,A
 1223: 			StandbyState =  CS_Standby_S2_WakeUp;
002B66 A3                INC     DPTR
002B67 04                INC     A
002B68 F0                MOVX    @DPTR,A
 1224: 
 1225: 			btCmdBuf.len = 0x01;
002B69 904C63            MOV     DPTR,#btCmdBuf
002B6C F0                MOVX    @DPTR,A
 1226: 			btCmdBuf.DATA[0] = CS_CMD_SLEEP_REQ;
002B6D A3                INC     DPTR
002B6E 7420              MOV     A,#020H
002B70 F0                MOVX    @DPTR,A
 1227: 			BT_CmdFifoIn(&btCmdBuf);
002B71 7B01              MOV     R3,#01H
002B73 7A4C              MOV     R2,#HIGH btCmdBuf
002B75 7963              MOV     R1,#LOW btCmdBuf
002B77 121E00            LCALL   _BT_CmdFifoIn
 1228: 
 1229: 			//btCmdBuf.len = 2;
 1230: 			//btCmdBuf.DATA[0] = 0x20;
 1231: 			//btCmdBuf.DATA[1] = 0;
 1232: 			//BT_CmdFifoIn(&btCmdBuf);
 1233: 			
 1234: 			 
 1235: 			sys_state = SYS_ST_IDLE;  //SYS_ST_SLEEP;			//系统进入睡眠
002B7A 904E5C            MOV     DPTR,#sys_state
002B7D 7401              MOV     A,#01H
002B7F F0                MOVX    @DPTR,A
 1236: 					
 1237: 			}	
 1238: 		break;
002B80 22                RET     
 1239: 	case CS_Standby_S2_WakeUp:
002B81         ?C0178?CS_SCALE_PROC:
 1240: 		if(comm_doing==false)
002B81 904CB4            MOV     DPTR,#comm_doing
002B84 E0                MOVX    A,@DPTR
002B85 7006              JNZ     ?C0179?CS_SCALE_PROC
 1241: 			{
 1242: 			comm_doing=true;
002B87 04                INC     A
002B88 F0                MOVX    @DPTR,A
 1243: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadAdZero);
002B89 7F85              MOV     R7,#085H
002B8B 91DA              ACALL   _CS_Scale_1186ComSend
 1244: 			}
002B8D         ?C0179?CS_SCALE_PROC:
 1245: 		if(CS_If1186ComSucess()==true)
002B8D B1C8              ACALL   CS_If1186ComSucess
002B8F BF0128            CJNE    R7,#01H,?C0172?CS_SCALE_PROC
 1246: 			{
 1247: 			comm_doing=false;
002B92 E4                CLR     A
002B93 904CB4            MOV     DPTR,#comm_doing
002B96 F0                MOVX    @DPTR,A
 1248: 			StandbyState =  CS_Standby_S1_ToSleep;	
002B97 A3                INC     DPTR
002B98 F0                MOVX    @DPTR,A
 1249: 			sys_state = SYS_ST_RUN;
002B99 904E5C            MOV     DPTR,#sys_state
002B9C 7402              MOV     A,#02H
002B9E F0                MOVX    @DPTR,A
 1250: 
 1251: 			/*
 1252: 			while(1)
 1253: 			{
 1254: 			R_Debug_temp = R_AD_Zero;
 1255: 			CS_ScaleDisplay_Debug();
 1256: 			}
 1257: 			*/
 1258: 			//清除异常状态
 1259: 			CS_Scale_JudgeOverLoad(ResetOverLoad);
002B9F FF                MOV     R7,A
002BA0 123643            LCALL   _CS_Scale_JudgeOverLoad
 1260: 			CS_Scale_TimeOutProc(CS_Reset_AllTime);
002BA3 7F06              MOV     R7,#06H
002BA5 71BB              ACALL   _CS_Scale_TimeOutProc
 1261: 			R_Display_Err = 0;
002BA7 E4                CLR     A
002BA8 904CC2            MOV     DPTR,#R_Display_Err
002BAB F0                MOVX    @DPTR,A
 1262: 			
 1263: 			R_Scale_state = CS_Scale_state_weighting;
002BAC 904CC5            MOV     DPTR,#R_Scale_state
002BAF 04                INC     A
002BB0 F0                MOVX    @DPTR,A
 1264: 			
 1265: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadAd);
002BB1 7F80              MOV     R7,#080H
002BB3 81DA              AJMP    _CS_Scale_1186ComSend
 1266: 			
 1267: 			}
 1268: 		break;
 1269: 	default:
002BB5         ?C0181?CS_SCALE_PROC:
 1270: 		StandbyState = CS_Standby_S1_ToSleep;
002BB5 E4                CLR     A
002BB6 904CB5            MOV     DPTR,#StandbyState
002BB9 F0                MOVX    @DPTR,A
 1271: 		break;
 1272: 	}
 1273: 	
 1274: 	//R_Debug_temp = 456;
 1275: 
 1276: }
002BBA         ?C0172?CS_SCALE_PROC:
002BBA 22                RET     
----- FUNCTION _CS_Scale_StandbyProc (END) -------


----- FUNCTION _CS_Scale_TimeOutProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1444: void CS_Scale_TimeOutProc(u8_t option)
 1445: {
;---- Variable 'option' assigned to Register 'R7' ----
 1446: 	static	CS_TimeOut_T xdata R_TimeOut;
 1447: 	static	u8_t xdata B_TimeBase_1s;		//1s时基
 1448: 
 1449: 	if(option==CS_SetTimeBase1S)
002BBB EF                MOV     A,R7
002BBC B40707            CJNE    A,#07H,?C0209?CS_SCALE_PROC
 1450: 		{
 1451: 		B_TimeBase_1s = true;
002BBF 904CBF            MOV     DPTR,#B_TimeBase_1s
002BC2 7401              MOV     A,#01H
002BC4 F0                MOVX    @DPTR,A
002BC5 22                RET     
 1452: 		return;
 1453: 		}
002BC6         ?C0209?CS_SCALE_PROC:
 1454: 	//超时计数器复位
 1455: 	if(option)
002BC6 EF                MOV     A,R7
002BC7 6040              JZ      ?C0211?CS_SCALE_PROC
 1456: 	{
 1457: 	if(option==CS_Reset_ZeroTime)
002BC9 B40105            CJNE    A,#01H,?C0212?CS_SCALE_PROC
 1458: 		R_TimeOut.zero=0;
002BCC E4                CLR     A
002BCD 904CBA            MOV     DPTR,#R_TimeOut
002BD0 F0                MOVX    @DPTR,A
002BD1         ?C0212?CS_SCALE_PROC:
 1459: 	if(option==CS_Reset_LockTime)
002BD1 EF                MOV     A,R7
002BD2 B40205            CJNE    A,#02H,?C0213?CS_SCALE_PROC
 1460: 		R_TimeOut.lock=0;
002BD5 E4                CLR     A
002BD6 904CBB            MOV     DPTR,#R_TimeOut+01H
002BD9 F0                MOVX    @DPTR,A
002BDA         ?C0213?CS_SCALE_PROC:
 1461: 	if(option==CS_Reset_UnstableTime)
002BDA EF                MOV     A,R7
002BDB B40305            CJNE    A,#03H,?C0214?CS_SCALE_PROC
 1462: 		R_TimeOut.unstable=0;
002BDE E4                CLR     A
002BDF 904CBC            MOV     DPTR,#R_TimeOut+02H
002BE2 F0                MOVX    @DPTR,A
002BE3         ?C0214?CS_SCALE_PROC:
 1463: 	if(option==CS_Reset_OverLoadTime)
002BE3 EF                MOV     A,R7
002BE4 B40405            CJNE    A,#04H,?C0215?CS_SCALE_PROC
 1464: 		R_TimeOut.overload=0;
002BE7 E4                CLR     A
002BE8 904CBD            MOV     DPTR,#R_TimeOut+03H
002BEB F0                MOVX    @DPTR,A
002BEC         ?C0215?CS_SCALE_PROC:
 1465: 	if(option==CS_Reset_LowBatTime)
002BEC EF                MOV     A,R7
002BED B40505            CJNE    A,#05H,?C0216?CS_SCALE_PROC
 1466: 		R_TimeOut.lowbat=0;
002BF0 E4                CLR     A
002BF1 904CBE            MOV     DPTR,#R_TimeOut+04H
002BF4 F0                MOVX    @DPTR,A
002BF5         ?C0216?CS_SCALE_PROC:
 1467: 	if(option==CS_Reset_AllTime)
002BF5 EF                MOV     A,R7
002BF6 6406              XRL     A,#06H
002BF8 6002              JZ      $ + 4H
002BFA 81D9              AJMP    ?C0210?CS_SCALE_PROC
 1468: 		{
 1469: 		R_TimeOut.zero=0;
002BFC 904CBA            MOV     DPTR,#R_TimeOut
002BFF F0                MOVX    @DPTR,A
 1470: 		R_TimeOut.lock=0;
002C00 A3                INC     DPTR
002C01 F0                MOVX    @DPTR,A
 1471: 		R_TimeOut.unstable=0;
002C02 A3                INC     DPTR
002C03 F0                MOVX    @DPTR,A
 1472: 		R_TimeOut.overload=0;
002C04 A3                INC     DPTR
002C05 F0                MOVX    @DPTR,A
 1473: 		R_TimeOut.lowbat=0;
002C06 A3                INC     DPTR
002C07 F0                MOVX    @DPTR,A
 1474: 		}
002C08 22                RET     
 1475: 	return;
 1476: 	}
002C09         ?C0211?CS_SCALE_PROC:
 1477: 		
 1478: 	if(B_TimeBase_1s == true)
002C09 904CBF            MOV     DPTR,#B_TimeBase_1s
002C0C E0                MOVX    A,@DPTR
002C0D 6401              XRL     A,#01H
002C0F 6002              JZ      $ + 4H
002C11 81D9              AJMP    ?C0210?CS_SCALE_PROC
 1479: 	{
 1480: 		B_TimeBase_1s = false;
002C13 F0                MOVX    @DPTR,A
 1481: 
 1482: 		//低电超时处理
 1483: 		if(CS_Scale_JudgeLowBat(GetIfLowBat) == true)
002C14 7F01              MOV     R7,#01H
002C16 121F87            LCALL   _CS_Scale_JudgeLowBat
002C19 BF011E            CJNE    R7,#01H,?C0219?CS_SCALE_PROC
 1484: 		{
 1485: 			R_TimeOut.lowbat++;
002C1C 904CBE            MOV     DPTR,#R_TimeOut+04H
002C1F E0                MOVX    A,@DPTR
002C20 04                INC     A
002C21 F0                MOVX    @DPTR,A
 1486: 
 1487: 			if(R_TimeOut.lowbat>=CS_Scale_TimeOut_LowBat)
002C22 E0                MOVX    A,@DPTR
002C23 C3                CLR     C
002C24 9403              SUBB    A,#03H
002C26 5002              JNC     $ + 4H
002C28 81D9              AJMP    ?C0210?CS_SCALE_PROC
 1488: 			{
 1489: 				R_Scale_state = CS_Scale_state_standby;
002C2A 904CC5            MOV     DPTR,#R_Scale_state
002C2D 7402              MOV     A,#02H
002C2F F0                MOVX    @DPTR,A
 1490: 				CS_Scale_StandbyProc(1);
002C30 7F01              MOV     R7,#01H
002C32 7127              ACALL   _CS_Scale_StandbyProc
 1491: 				R_TimeOut.lowbat=0;
002C34 E4                CLR     A
002C35 904CBE            MOV     DPTR,#R_TimeOut+04H
002C38 F0                MOVX    @DPTR,A
 1492: 			}
002C39 22                RET     
 1493: 		return;			
 1494: 		}
002C3A         ?C0219?CS_SCALE_PROC:
 1495: 
 1496: 		//超载超时处理
 1497: 		if(CS_Scale_JudgeOverLoad(GetIfOverLoad)== true)
002C3A 7F01              MOV     R7,#01H
002C3C 123643            LCALL   _CS_Scale_JudgeOverLoad
002C3F BF011E            CJNE    R7,#01H,?C0221?CS_SCALE_PROC
 1498: 		{
 1499: 			R_TimeOut.overload++;
002C42 904CBD            MOV     DPTR,#R_TimeOut+03H
002C45 E0                MOVX    A,@DPTR
002C46 04                INC     A
002C47 F0                MOVX    @DPTR,A
 1500: 
 1501: 			if(R_TimeOut.overload>=CS_Scale_TimeOut_OverLoad)
002C48 E0                MOVX    A,@DPTR
002C49 C3                CLR     C
002C4A 9403              SUBB    A,#03H
002C4C 5002              JNC     $ + 4H
002C4E 81D9              AJMP    ?C0210?CS_SCALE_PROC
 1502: 			{
 1503: 				R_Scale_state = CS_Scale_state_standby;
002C50 904CC5            MOV     DPTR,#R_Scale_state
002C53 7402              MOV     A,#02H
002C55 F0                MOVX    @DPTR,A
 1504: 				CS_Scale_StandbyProc(1);
002C56 7F01              MOV     R7,#01H
002C58 7127              ACALL   _CS_Scale_StandbyProc
 1505: 				R_TimeOut.overload=0;
002C5A E4                CLR     A
002C5B 904CBD            MOV     DPTR,#R_TimeOut+03H
002C5E F0                MOVX    @DPTR,A
 1506: 			}
002C5F 22                RET     
 1507: 		return;	
 1508: 
 1509: 		}
002C60         ?C0221?CS_SCALE_PROC:
 1510: 		
 1511: 		
 1512: 		//称重模式下的超时处理
 1513: 		if(R_Scale_state == CS_Scale_state_weighting)
002C60 904CC5            MOV     DPTR,#R_Scale_state
002C63 E0                MOVX    A,@DPTR
002C64 6401              XRL     A,#01H
002C66 704A              JNZ     ?C0223?CS_SCALE_PROC
 1514: 		{
 1515: 		
 1516: 		if(CS_Scale_ZeroProc(GetZeroState,0) == true)
002C68 FD                MOV     R5,A
002C69 FC                MOV     R4,A
002C6A 7F03              MOV     R7,#03H
002C6C 1212F1            LCALL   _CS_Scale_ZeroProc
002C6F EF                MOV     A,R7
002C70 6401              XRL     A,#01H
002C72 4E                ORL     A,R6
002C73 700C              JNZ     ?C0224?CS_SCALE_PROC
 1517: 			{
 1518: 			R_TimeOut.unstable=0;
002C75 904CBC            MOV     DPTR,#R_TimeOut+02H
002C78 F0                MOVX    @DPTR,A
 1519: 			R_TimeOut.zero++;
002C79 904CBA            MOV     DPTR,#R_TimeOut
002C7C E0                MOVX    A,@DPTR
002C7D 04                INC     A
002C7E F0                MOVX    @DPTR,A
 1520: 			}
002C7F 800B              SJMP    ?C0225?CS_SCALE_PROC
002C81         ?C0224?CS_SCALE_PROC:
 1521: 		else
 1522: 			{
 1523: 			R_TimeOut.zero=0;
002C81 E4                CLR     A
002C82 904CBA            MOV     DPTR,#R_TimeOut
002C85 F0                MOVX    @DPTR,A
 1524: 			R_TimeOut.unstable++;
002C86 904CBC            MOV     DPTR,#R_TimeOut+02H
002C89 E0                MOVX    A,@DPTR
002C8A 04                INC     A
002C8B F0                MOVX    @DPTR,A
 1525: 			}
002C8C         ?C0225?CS_SCALE_PROC:
 1526: 
 1527: 		if(R_TimeOut.zero >=CS_Scale_TimeOut_Zero||R_TimeOut.unstable>=CS_Scale_TimeOut_Unstable)
002C8C 904CBA            MOV     DPTR,#R_TimeOut
002C8F E0                MOVX    A,@DPTR
002C90 C3                CLR     C
002C91 940F              SUBB    A,#0FH
002C93 5009              JNC     ?C0227?CS_SCALE_PROC
002C95 904CBC            MOV     DPTR,#R_TimeOut+02H
002C98 E0                MOVX    A,@DPTR
002C99 C3                CLR     C
002C9A 940F              SUBB    A,#0FH
002C9C 403B              JC      ?C0210?CS_SCALE_PROC
002C9E         ?C0227?CS_SCALE_PROC:
 1528: 			{
 1529: 				//R_Debug_temp=R_TimeOut.unstable;
 1530: 				//CS_ScaleDisplay_Debug();
 1531: 				//while(1);
 1532: 				
 1533: 				R_Scale_state = CS_Scale_state_standby;
002C9E 904CC5            MOV     DPTR,#R_Scale_state
002CA1 7402              MOV     A,#02H
002CA3 F0                MOVX    @DPTR,A
 1534: 				CS_Scale_StandbyProc(1);
002CA4 7F01              MOV     R7,#01H
002CA6 7127              ACALL   _CS_Scale_StandbyProc
 1535: 				R_TimeOut.zero=0;
002CA8 E4                CLR     A
002CA9 904CBA            MOV     DPTR,#R_TimeOut
002CAC F0                MOVX    @DPTR,A
 1536: 				R_TimeOut.unstable=0;
002CAD 904CBC            MOV     DPTR,#R_TimeOut+02H
002CB0 F0                MOVX    @DPTR,A
 1537: 			}
002CB1 22                RET     
 1538: 		return;
 1539: 
 1540: 		}
002CB2         ?C0223?CS_SCALE_PROC:
 1541: 		
 1542: 
 1543: 		//锁定模式下的超时处理
 1544: 		if(R_Scale_state == CS_Scale_state_locking)
002CB2 904CC5            MOV     DPTR,#R_Scale_state
002CB5 E0                MOVX    A,@DPTR
002CB6 B40420            CJNE    A,#04H,?C0210?CS_SCALE_PROC
 1545: 		{
 1546: 			R_TimeOut.unstable=0;
002CB9 E4                CLR     A
002CBA 904CBC            MOV     DPTR,#R_TimeOut+02H
002CBD F0                MOVX    @DPTR,A
 1547: 			R_TimeOut.lock++;
002CBE 904CBB            MOV     DPTR,#R_TimeOut+01H
002CC1 E0                MOVX    A,@DPTR
002CC2 04                INC     A
002CC3 F0                MOVX    @DPTR,A
 1548: 			
 1549: 			if(R_TimeOut.lock>=CS_Scale_TimeOut_Lock)
002CC4 E0                MOVX    A,@DPTR
002CC5 C3                CLR     C
002CC6 940F              SUBB    A,#0FH
002CC8 400F              JC      ?C0210?CS_SCALE_PROC
 1550: 			{
 1551: 				
 1552: 				R_Scale_state = CS_Scale_state_standby;
002CCA 904CC5            MOV     DPTR,#R_Scale_state
002CCD 7402              MOV     A,#02H
002CCF F0                MOVX    @DPTR,A
 1553: 				CS_Scale_StandbyProc(1);
002CD0 7F01              MOV     R7,#01H
002CD2 7127              ACALL   _CS_Scale_StandbyProc
 1554: 				R_TimeOut.lock=0;
002CD4 E4                CLR     A
002CD5 904CBB            MOV     DPTR,#R_TimeOut+01H
002CD8 F0                MOVX    @DPTR,A
 1555: 			}
 1556: 		return;
 1557: 		}		
 1558: 		
 1559: 
 1560: 	}
 1561: 
 1562: }
002CD9         ?C0210?CS_SCALE_PROC:
002CD9 22                RET     
----- FUNCTION _CS_Scale_TimeOutProc (END) -------


----- FUNCTION _CS_Scale_1186ComSend (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   18: void CS_Scale_1186ComSend(u8_t com_comand)
   19: {
;---- Variable 'com_comand' assigned to Register 'R7' ----
   20: R_Weight_Com_Coo.sucess=false;
   21: R_Weight_Com_Coo.now = com_comand;
002CDA E4                CLR     A
002CDB 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
002CDE F0                MOVX    @DPTR,A
   22: }
002CDF 904D55            MOV     DPTR,#R_Weight_Com_Coo
002CE2 EF                MOV     A,R7
002CE3 F0                MOVX    @DPTR,A
   23: 
002CE4 22                RET     
----- FUNCTION _CS_Scale_1186ComSend (END) -------


----- FUNCTION CS_Scale_PowerOnProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1290: void CS_Scale_PowerOnProc(bool B_Reset)
 1291: {
 1292: 	static u8_t xdata comm_doing;
 1293: 	static u8_t xdata PowerOnState;
 1294: 	
 1295: 	
 1296: 	if(B_Reset)
002CE5 30000A            JNB     B_Reset,?C0182?CS_SCALE_PROC
 1297: 		{
 1298: 		PowerOnState=CS_PowerOn_State1_Reset;
002CE8 E4                CLR     A
002CE9 904CB7            MOV     DPTR,#PowerOnState
002CEC F0                MOVX    @DPTR,A
 1299: 		comm_doing=false;
002CED 904CB6            MOV     DPTR,#comm_doing
002CF0 F0                MOVX    @DPTR,A
002CF1 22                RET     
 1300: 		return;
 1301: 		}
002CF2         ?C0182?CS_SCALE_PROC:
 1302: 	
 1303: 	//-----------S1
 1304: 	if(PowerOnState==CS_PowerOn_State1_Reset)
002CF2 904CB7            MOV     DPTR,#PowerOnState
002CF5 E0                MOVX    A,@DPTR
002CF6 7016              JNZ     ?C0184?CS_SCALE_PROC
 1305: 		{
 1306: 		if(comm_doing==false)
002CF8 904CB6            MOV     DPTR,#comm_doing
002CFB E0                MOVX    A,@DPTR
002CFC 7008              JNZ     ?C0185?CS_SCALE_PROC
 1307: 			{
 1308: 			comm_doing=true;
002CFE 04                INC     A
002CFF F0                MOVX    @DPTR,A
 1309: 			CS_Scale_1186ComSend(CS_CommTo1186_Reset);
002D00 7FC5              MOV     R7,#0C5H
002D02 91DA              ACALL   _CS_Scale_1186ComSend
 1310: 			}
002D04 8008              SJMP    ?C0184?CS_SCALE_PROC
002D06         ?C0185?CS_SCALE_PROC:
 1311: 		else
 1312: 			{
 1313: 			comm_doing=false;
002D06 E4                CLR     A
002D07 904CB6            MOV     DPTR,#comm_doing
002D0A F0                MOVX    @DPTR,A
 1314: 			PowerOnState	= CS_PowerOn_State2_ReadOtp;
002D0B A3                INC     DPTR
002D0C 04                INC     A
002D0D F0                MOVX    @DPTR,A
 1315: 			}		
 1316: 		}
002D0E         ?C0184?CS_SCALE_PROC:
 1317: 	//-----------S2
 1318: 	if(PowerOnState==CS_PowerOn_State2_ReadOtp)
002D0E 904CB7            MOV     DPTR,#PowerOnState
002D11 E0                MOVX    A,@DPTR
002D12 B4011A            CJNE    A,#01H,?C0187?CS_SCALE_PROC
 1319: 		{
 1320: 		if(comm_doing==false)
002D15 904CB6            MOV     DPTR,#comm_doing
002D18 E0                MOVX    A,@DPTR
002D19 7006              JNZ     ?C0188?CS_SCALE_PROC
 1321: 			{
 1322: 			comm_doing=true;
002D1B 04                INC     A
002D1C F0                MOVX    @DPTR,A
 1323: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadOtp);
002D1D 7F84              MOV     R7,#084H
002D1F 91DA              ACALL   _CS_Scale_1186ComSend
 1324: 			
 1325: 			}
002D21         ?C0188?CS_SCALE_PROC:
 1326: 		if(CS_If1186ComSucess()==true)
002D21 B1C8              ACALL   CS_If1186ComSucess
002D23 BF0109            CJNE    R7,#01H,?C0187?CS_SCALE_PROC
 1327: 			{
 1328: 			comm_doing=false;
002D26 E4                CLR     A
002D27 904CB6            MOV     DPTR,#comm_doing
002D2A F0                MOVX    @DPTR,A
 1329: 			PowerOnState =  CS_PowerOn_State3_ReadVersion;
002D2B A3                INC     DPTR
002D2C 7402              MOV     A,#02H
002D2E F0                MOVX    @DPTR,A
 1330: 			}
 1331: 		}
002D2F         ?C0187?CS_SCALE_PROC:
 1332: 	//-----------S3
 1333: 	if(PowerOnState==CS_PowerOn_State3_ReadVersion)
002D2F 904CB7            MOV     DPTR,#PowerOnState
002D32 E0                MOVX    A,@DPTR
002D33 B40203            CJNE    A,#02H,?C0190?CS_SCALE_PROC
 1334: 		{
 1335: 		PowerOnState =  CS_PowerOn_State4_ReadTime;		
002D36 7403              MOV     A,#03H
002D38 F0                MOVX    @DPTR,A
 1336: 		}
002D39         ?C0190?CS_SCALE_PROC:
 1337: 	//-----------S4
 1338: 	if(PowerOnState==CS_PowerOn_State4_ReadTime)
002D39 904CB7            MOV     DPTR,#PowerOnState
002D3C E0                MOVX    A,@DPTR
002D3D B4031A            CJNE    A,#03H,?C0191?CS_SCALE_PROC
 1339: 		{
 1340: 		if(comm_doing==false)
002D40 904CB6            MOV     DPTR,#comm_doing
002D43 E0                MOVX    A,@DPTR
002D44 7006              JNZ     ?C0192?CS_SCALE_PROC
 1341: 			{
 1342: 			comm_doing=true;
002D46 04                INC     A
002D47 F0                MOVX    @DPTR,A
 1343: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadTime);
002D48 7F82              MOV     R7,#082H
002D4A 91DA              ACALL   _CS_Scale_1186ComSend
 1344: 			}
002D4C         ?C0192?CS_SCALE_PROC:
 1345: 		if(CS_If1186ComSucess()==true)
002D4C B1C8              ACALL   CS_If1186ComSucess
002D4E BF0109            CJNE    R7,#01H,?C0191?CS_SCALE_PROC
 1346: 			{
 1347: 			comm_doing=false;
002D51 E4                CLR     A
002D52 904CB6            MOV     DPTR,#comm_doing
002D55 F0                MOVX    @DPTR,A
 1348: 			PowerOnState =  CS_PowerOn_State5_SetOpenWeight;	
002D56 A3                INC     DPTR
002D57 7404              MOV     A,#04H
002D59 F0                MOVX    @DPTR,A
 1349: 			}
 1350: 		}
002D5A         ?C0191?CS_SCALE_PROC:
 1351: 	//-----------S5
 1352: 	if(PowerOnState==CS_PowerOn_State5_SetOpenWeight)
002D5A 904CB7            MOV     DPTR,#PowerOnState
002D5D E0                MOVX    A,@DPTR
002D5E B4041A            CJNE    A,#04H,?C0194?CS_SCALE_PROC
 1353: 		{
 1354: 		if(comm_doing==false)
002D61 904CB6            MOV     DPTR,#comm_doing
002D64 E0                MOVX    A,@DPTR
002D65 7006              JNZ     ?C0195?CS_SCALE_PROC
 1355: 			{
 1356: 			comm_doing=true;
002D67 04                INC     A
002D68 F0                MOVX    @DPTR,A
 1357: 			CS_Scale_1186ComSend(CS_CommTo1186_SetOpenWeight);
002D69 7FA1              MOV     R7,#0A1H
002D6B 91DA              ACALL   _CS_Scale_1186ComSend
 1358: 			}
002D6D         ?C0195?CS_SCALE_PROC:
 1359: 		if(CS_If1186ComSucess()==true)
002D6D B1C8              ACALL   CS_If1186ComSucess
002D6F BF0109            CJNE    R7,#01H,?C0194?CS_SCALE_PROC
 1360: 			{
 1361: 			comm_doing=false;
002D72 E4                CLR     A
002D73 904CB6            MOV     DPTR,#comm_doing
002D76 F0                MOVX    @DPTR,A
 1362: 			PowerOnState =  CS_PowerOn_State6_ShowOpenPic;
002D77 A3                INC     DPTR
002D78 7405              MOV     A,#05H
002D7A F0                MOVX    @DPTR,A
 1363: 			}
 1364: 		}
002D7B         ?C0194?CS_SCALE_PROC:
 1365: 	//-----------S6
 1366: 	if(PowerOnState==CS_PowerOn_State6_ShowOpenPic)
002D7B 904CB7            MOV     DPTR,#PowerOnState
002D7E E0                MOVX    A,@DPTR
002D7F 6405              XRL     A,#05H
002D81 7028              JNZ     ?C0197?CS_SCALE_PROC
 1367: 		{
 1368: 		if(comm_doing==false)
002D83 904CB6            MOV     DPTR,#comm_doing
002D86 E0                MOVX    A,@DPTR
002D87 700F              JNZ     ?C0198?CS_SCALE_PROC
 1369: 			{
 1370: 			comm_doing=true;	
002D89 04                INC     A
002D8A F0                MOVX    @DPTR,A
 1371: 			CS_ScaleDisplay_FreshBuf(DisplayData,8888);
002D8B 7DB8              MOV     R5,#0B8H
002D8D 7C22              MOV     R4,#022H
002D8F 7F21              MOV     R7,#021H
002D91 1215FA            LCALL   _CS_ScaleDisplay_FreshBuf
 1372: 			CS_Scale_1186ComSend(CS_CommTo1186_LcdDisplay);
002D94 7FE0              MOV     R7,#0E0H
002D96 91DA              ACALL   _CS_Scale_1186ComSend
 1373: 			}
002D98         ?C0198?CS_SCALE_PROC:
 1374: 		if(CS_If1186ComSucess()==true)
002D98 B1C8              ACALL   CS_If1186ComSucess
002D9A BF010E            CJNE    R7,#01H,?C0197?CS_SCALE_PROC
 1375: 			{	
 1376: 			comm_doing=false;
002D9D E4                CLR     A
002D9E 904CB6            MOV     DPTR,#comm_doing
002DA1 F0                MOVX    @DPTR,A
 1377: 			PowerOnState =	CS_PowerOn_State7_ShowOpenPicWait;
002DA2 A3                INC     DPTR
002DA3 7406              MOV     A,#06H
002DA5 F0                MOVX    @DPTR,A
 1378: 			CS_SoftTimer(ResetSoftTimer);
002DA6 7F02              MOV     R7,#02H
002DA8 120F15            LCALL   _CS_SoftTimer
 1379: 			}		
 1380: 		}
002DAB         ?C0197?CS_SCALE_PROC:
 1381: 	//-----------S7
 1382: 	if(PowerOnState==CS_PowerOn_State7_ShowOpenPicWait)
002DAB 904CB7            MOV     DPTR,#PowerOnState
002DAE E0                MOVX    A,@DPTR
002DAF B40615            CJNE    A,#06H,?C0183?CS_SCALE_PROC
 1383: 		{
 1384: 		if(CS_SoftTimer(GetSoftTimerTime)>200)
002DB2 7F01              MOV     R7,#01H
002DB4 120F15            LCALL   _CS_SoftTimer
002DB7 EF                MOV     A,R7
002DB8 D3                SETB    C
002DB9 94C8              SUBB    A,#0C8H
002DBB 400A              JC      ?C0183?CS_SCALE_PROC
 1385: 			{
 1386: 			R_Scale_state = CS_Scale_state_weighting;
002DBD 904CC5            MOV     DPTR,#R_Scale_state
002DC0 7401              MOV     A,#01H
002DC2 F0                MOVX    @DPTR,A
 1387: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadAd);
002DC3 7F80              MOV     R7,#080H
002DC5 91DA              ACALL   _CS_Scale_1186ComSend
 1388: 			}
 1389: 		}
 1390: 
 1391: }
002DC7         ?C0183?CS_SCALE_PROC:
002DC7 22                RET     
----- FUNCTION CS_Scale_PowerOnProc (END) -------


----- FUNCTION CS_If1186ComSucess (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   25: u8_t CS_If1186ComSucess(void)
   26: {
   27: return R_Weight_Com_Coo.sucess;
   28: }
002DC8 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
002DCB E0                MOVX    A,@DPTR
002DCC FF                MOV     R7,A
   29: 
002DCD 22                RET     
----- FUNCTION CS_If1186ComSucess (END) -------


----- FUNCTION _CS_Scale_SteadyProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  767: void CS_Scale_SteadyProc(u8_t option)
  768: {
;---- Variable 'option' assigned to Register 'R7' ----
  769: 	u16_t	R_AD_BUF;	
  770: 
  771: 	static	u8_t xdata B_Debug_Send;	
  772: 	static 	u8_t xdata ReadUTC;
  773: 	UserMeasureData SendData;
  774: 
  775: 	if(option==SteadyProcReset)
002DCE EF                MOV     A,R7
002DCF 7005              JNZ     ?C0109?CS_SCALE_PROC
  776: 		{
  777: 		B_Debug_Send=false;
002DD1 904CA7            MOV     DPTR,#B_Debug_Send
002DD4 F0                MOVX    @DPTR,A
002DD5 22                RET     
  778: 		return;
  779: 		}
002DD6         ?C0109?CS_SCALE_PROC:
  780: 	
  781: 	
  782: 		if(CS_Scale_JudgeSteady(GetIfHeavySteady) == true)
002DD6 7F03              MOV     R7,#03H
002DD8 F107              ACALL   _CS_Scale_JudgeSteady
002DDA BF0112            CJNE    R7,#01H,?C0111?CS_SCALE_PROC
  783: 			{
  784: 			
  785: 			CS_Scale_JudgeSteady(ResetSteady);
002DDD 7F01              MOV     R7,#01H
002DDF F107              ACALL   _CS_Scale_JudgeSteady
  786: 		
  787: 			CS_Scale_ZeroProc(ClrLockDownCheckFlag,0);
002DE1 E4                CLR     A
002DE2 FD                MOV     R5,A
002DE3 FC                MOV     R4,A
002DE4 7F08              MOV     R7,#08H
002DE6 1212F1            LCALL   _CS_Scale_ZeroProc
  788: 			ReadUTC = false;	//初始化读ADC
002DE9 E4                CLR     A
002DEA 904CA8            MOV     DPTR,#ReadUTC
002DED F0                MOVX    @DPTR,A
  789: 			}
002DEE 22                RET     
002DEF         ?C0111?CS_SCALE_PROC:
  790: 		else
  791: 			{
  792: 			
  793: 			/*
  794: 			if(wechatStatus == WECHAT_ST_OK&&B_Debug_Send==false)
  795: 				{
  796: 				sendMeasureData();
  797: 				B_Debug_Send=true;
  798: 				}
  799: 			*/		
  800: 			if(B_Debug_Send==false)
002DEF 904CA7            MOV     DPTR,#B_Debug_Send
002DF2 E0                MOVX    A,@DPTR
002DF3 705D              JNZ     ?C0113?CS_SCALE_PROC
  801: 				{
  802: 				
  803: 				if(ReadUTC==false)
002DF5 A3                INC     DPTR
002DF6 E0                MOVX    A,@DPTR
002DF7 7006              JNZ     ?C0114?CS_SCALE_PROC
  804: 					{
  805: 					ReadUTC=true;
002DF9 04                INC     A
002DFA F0                MOVX    @DPTR,A
  806: 					CS_Scale_1186ComSend(CS_CommTo1186_ReadTime);	
002DFB 7F82              MOV     R7,#082H
002DFD 91DA              ACALL   _CS_Scale_1186ComSend
  807: 					}
002DFF         ?C0114?CS_SCALE_PROC:
  808: 				
  809: 				if(CS_If1186ComSucess()==true)
002DFF B1C8              ACALL   CS_If1186ComSucess
002E01 EF                MOV     A,R7
002E02 6401              XRL     A,#01H
002E04 706E              JNZ     ?C0110?CS_SCALE_PROC
  810: 					{
  811: 					
  812: 					
  813: 					ReadUTC=false;
002E06 904CA8            MOV     DPTR,#ReadUTC
002E09 F0                MOVX    @DPTR,A
  814: 					
  815: 					SendData.UTCTime[0]=R_1186_RTC[0];
002E0A 904CD3            MOV     DPTR,#R_1186_RTC
002E0D E0                MOVX    A,@DPTR
002E0E 904E15            MOV     DPTR,#SendData+02H
002E11 F0                MOVX    @DPTR,A
  816: 					SendData.UTCTime[1]=R_1186_RTC[1];	
002E12 904CD4            MOV     DPTR,#R_1186_RTC+01H
002E15 E0                MOVX    A,@DPTR
002E16 904E16            MOV     DPTR,#SendData+03H
002E19 F0                MOVX    @DPTR,A
  817: 					SendData.UTCTime[2]=R_1186_RTC[2];	
002E1A 904CD5            MOV     DPTR,#R_1186_RTC+02H
002E1D E0                MOVX    A,@DPTR
002E1E 904E17            MOV     DPTR,#SendData+04H
002E21 F0                MOVX    @DPTR,A
  818: 					SendData.UTCTime[3]=R_1186_RTC[3];	
002E22 904CD6            MOV     DPTR,#R_1186_RTC+03H
002E25 E0                MOVX    A,@DPTR
002E26 904E18            MOV     DPTR,#SendData+05H
002E29 F0                MOVX    @DPTR,A
  819: 					SendData.weight=ESWAP(R_UnitWeight.origin);
002E2A 904CC9            MOV     DPTR,#R_UnitWeight
002E2D E0                MOVX    A,@DPTR
002E2E FC                MOV     R4,A
002E2F A3                INC     DPTR
002E30 E0                MOVX    A,@DPTR
002E31 FA                MOV     R2,A
002E32 EC                MOV     A,R4
002E33 FF                MOV     R7,A
002E34 EA                MOV     A,R2
002E35 FE                MOV     R6,A
002E36 EF                MOV     A,R7
002E37 904E13            MOV     DPTR,#SendData
002E3A EE                MOV     A,R6
002E3B F0                MOVX    @DPTR,A
002E3C A3                INC     DPTR
002E3D EF                MOV     A,R7
002E3E F0                MOVX    @DPTR,A
  820: 					QueuePush(&SendData);
002E3F 7B01              MOV     R3,#01H
002E41 7A4E              MOV     R2,#HIGH SendData
002E43 7913              MOV     R1,#LOW SendData
002E45 123DA8            LCALL   _QueuePush
  821: 					B_Debug_Send=true;
002E48 904CA7            MOV     DPTR,#B_Debug_Send
002E4B 7401              MOV     A,#01H
002E4D F0                MOVX    @DPTR,A
  822: 
  823: 					CS_Scale_1186ComSend(CS_CommTo1186_ReadAd);
002E4E 7F80              MOV     R7,#080H
002E50 81DA              AJMP    _CS_Scale_1186ComSend
  824: 			
  825: 					//CS_SoftTimer(ResetSoftTimer);	
  826: 					
  827: 					}
  828: 				
  829: 				}
002E52         ?C0113?CS_SCALE_PROC:
  830: 			else
  831: 				{
  832: 				R_AD_BUF = CS_Scale_GetDeltaAD(GetDeltaAD);
002E52 E4                CLR     A
002E53 FF                MOV     R7,A
002E54 123073            LCALL   _CS_Scale_GetDeltaAD
;---- Variable 'R_AD_BUF' assigned to Register 'R6/R7' ----
  833: 				R_AD_BUF = CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
002E57 AD07              MOV     R5,AR7
002E59 AC06              MOV     R4,AR6
002E5B E4                CLR     A
002E5C FF                MOV     R7,A
002E5D 1230D4            LCALL   _CS_Scale_AdcFilter
  834: 				CS_Scale_GetWeight(R_AD_BUF);				
002E60 123484            LCALL   _CS_Scale_GetWeight
  835: 				CS_Scale_ReturnLock();
002E63 D175              ACALL   CS_Scale_ReturnLock
  836: 				
  837: 				 R_UnitWeight.origin = R_Weight_Lock;	//锁定重量
002E65 904CC0            MOV     DPTR,#R_Weight_Lock
002E68 E0                MOVX    A,@DPTR
002E69 FF                MOV     R7,A
002E6A A3                INC     DPTR
002E6B E0                MOVX    A,@DPTR
002E6C 904CC9            MOV     DPTR,#R_UnitWeight
002E6F CF                XCH     A,R7
002E70 F0                MOVX    @DPTR,A
002E71 A3                INC     DPTR
002E72 EF                MOV     A,R7
002E73 F0                MOVX    @DPTR,A
  838: 				}
  839: 			}
  840: 	
  841: 
  842: 			/*
  843: 			if(CS_SoftTimer(GetSoftTimerTime)<200)
  844: 				{
  845: 			R_Debug_temp=SendData.UTCTime;
  846: 			CS_ScaleDisplay_Debug();			
  847: 			return;
  848: 				}
  849: 			*/	
  850: 			/* B_Debug_Test =true;
  851: 			if(B_Debug_Test)
  852: 				{
  853: 				R_Debug_temp=888;
  854: 				CS_ScaleDisplay_Debug();
  855: 				while(1);
  856: 				}
  857: 			*/
  858: }
002E74         ?C0110?CS_SCALE_PROC:
002E74 22                RET     
----- FUNCTION _CS_Scale_SteadyProc (END) -------


----- FUNCTION CS_Scale_ReturnLock (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  862: void CS_Scale_ReturnLock(void)
  863: {
  864: 	u16_t	weight_temp;
  865: 	
  866: 	if( R_UnitWeight.origin > R_Weight_Lock)
002E75 904CC0            MOV     DPTR,#R_Weight_Lock
002E78 E0                MOVX    A,@DPTR
002E79 FE                MOV     R6,A
002E7A A3                INC     DPTR
002E7B E0                MOVX    A,@DPTR
002E7C FF                MOV     R7,A
002E7D 904CC9            MOV     DPTR,#R_UnitWeight
002E80 E0                MOVX    A,@DPTR
002E81 FC                MOV     R4,A
002E82 A3                INC     DPTR
002E83 E0                MOVX    A,@DPTR
002E84 FD                MOV     R5,A
002E85 D3                SETB    C
002E86 9F                SUBB    A,R7
002E87 EC                MOV     A,R4
002E88 9E                SUBB    A,R6
002E89 401F              JC      ?C0117?CS_SCALE_PROC
  867: 		{
  868: 		weight_temp = R_UnitWeight.origin -R_Weight_Lock;
002E8B ED                MOV     A,R5
002E8C 9F                SUBB    A,R7
002E8D FF                MOV     R7,A
002E8E EC                MOV     A,R4
002E8F 9E                SUBB    A,R6
002E90 FE                MOV     R6,A
002E91 904E57            MOV     DPTR,#weight_temp
002E94 F0                MOVX    @DPTR,A
002E95 A3                INC     DPTR
002E96 EF                MOV     A,R7
002E97 F0                MOVX    @DPTR,A
  869: 		if(weight_temp >= CS_Scale_RetLockWeightInc)
002E98 C3                CLR     C
002E99 94E8              SUBB    A,#0E8H
002E9B EE                MOV     A,R6
002E9C 9403              SUBB    A,#03H
002E9E 403C              JC      ?C0121?CS_SCALE_PROC
  870: 			{
  871: 			R_Scale_state = CS_Scale_state_weighting;
002EA0 904CC5            MOV     DPTR,#R_Scale_state
002EA3 7401              MOV     A,#01H
002EA5 F0                MOVX    @DPTR,A
  872: 			CS_Scale_TimeOutProc(CS_Reset_AllTime);
002EA6 7F06              MOV     R7,#06H
002EA8 61BB              AJMP    _CS_Scale_TimeOutProc
  873: 			}
  874: 		}
002EAA         ?C0117?CS_SCALE_PROC:
  875: 	else
  876: 		{
  877: 		weight_temp = R_Weight_Lock -R_UnitWeight.origin;
002EAA 904CC9            MOV     DPTR,#R_UnitWeight
002EAD E0                MOVX    A,@DPTR
002EAE FE                MOV     R6,A
002EAF A3                INC     DPTR
002EB0 E0                MOVX    A,@DPTR
002EB1 FF                MOV     R7,A
002EB2 C3                CLR     C
002EB3 904CC1            MOV     DPTR,#R_Weight_Lock+01H
002EB6 E0                MOVX    A,@DPTR
002EB7 9F                SUBB    A,R7
002EB8 FF                MOV     R7,A
002EB9 904CC0            MOV     DPTR,#R_Weight_Lock
002EBC E0                MOVX    A,@DPTR
002EBD 9E                SUBB    A,R6
002EBE FE                MOV     R6,A
002EBF 904E57            MOV     DPTR,#weight_temp
002EC2 F0                MOVX    @DPTR,A
002EC3 A3                INC     DPTR
002EC4 EF                MOV     A,R7
002EC5 F0                MOVX    @DPTR,A
  878: 		if(weight_temp >= CS_Scale_RetLockWeightDec)
002EC6 C3                CLR     C
002EC7 942C              SUBB    A,#02CH
002EC9 EE                MOV     A,R6
002ECA 9401              SUBB    A,#01H
002ECC 400E              JC      ?C0121?CS_SCALE_PROC
  879: 			{
  880: 			
  881: 			R_Scale_state = CS_Scale_state_weighting;
002ECE 904CC5            MOV     DPTR,#R_Scale_state
002ED1 7401              MOV     A,#01H
002ED3 F0                MOVX    @DPTR,A
  882: 			CS_Scale_LockProc(SetDowningLock);
002ED4 FF                MOV     R7,A
002ED5 1235D5            LCALL   _CS_Scale_LockProc
  883: 			CS_Scale_TimeOutProc(CS_Reset_AllTime);
002ED8 7F06              MOV     R7,#06H
002EDA 71BB              ACALL   _CS_Scale_TimeOutProc
  884: 			
  885: 			}
  886: 		}
  887: 
  888: }
002EDC         ?C0121?CS_SCALE_PROC:
002EDC 22                RET     
----- FUNCTION CS_Scale_ReturnLock (END) -------


----- FUNCTION CS_Scale_WeightProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  202: void CS_Scale_WeightProc(void)
  203: {
  204: 	u16_t	R_AD_BUF;
  205: 	
  206: 	R_AD_BUF = CS_Scale_GetDeltaAD(GetDeltaAD);
002EDD E4                CLR     A
002EDE FF                MOV     R7,A
002EDF 123073            LCALL   _CS_Scale_GetDeltaAD
;---- Variable 'R_AD_BUF' assigned to Register 'R6/R7' ----
  207: 	R_AD_BUF = CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
002EE2 AD07              MOV     R5,AR7
002EE4 AC06              MOV     R4,AR6
002EE6 E4                CLR     A
002EE7 FF                MOV     R7,A
002EE8 1230D4            LCALL   _CS_Scale_AdcFilter
  208: 	CS_Scale_GetWeight(R_AD_BUF);
002EEB 123484            LCALL   _CS_Scale_GetWeight
  209: 	CS_Scale_ZeroProc(RunningZero,0);
002EEE E4                CLR     A
002EEF FD                MOV     R5,A
002EF0 FC                MOV     R4,A
002EF1 7F07              MOV     R7,#07H
002EF3 1212F1            LCALL   _CS_Scale_ZeroProc
  210: 	CS_Scale_LockProc(LockProcRun);
002EF6 E4                CLR     A
002EF7 FF                MOV     R7,A
002EF8 1235D5            LCALL   _CS_Scale_LockProc
  211: 	CS_Scale_JudgeOverLoad(0);
002EFB E4                CLR     A
002EFC FF                MOV     R7,A
002EFD 123643            LCALL   _CS_Scale_JudgeOverLoad
  212: 	CS_Scale_JudgeLowBat(0);
002F00 E4                CLR     A
002F01 FF                MOV     R7,A
002F02 121F87            LCALL   _CS_Scale_JudgeLowBat
  213: 	CS_Scale_JudgeSteady(JudgeSteadyRun);
002F05 E4                CLR     A
002F06 FF                MOV     R7,A
;----                  JMP     _CS_Scale_JudgeSteady
  214: 	
----- FUNCTION CS_Scale_WeightProc (END) -------


----- FUNCTION _CS_Scale_JudgeSteady (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  678: u8_t CS_Scale_JudgeSteady(u8_t option)
  679: {
;---- Variable 'option' assigned to Register 'R7' ----
  680: 
  681: 	u16_t	weight_temp;
  682: 	u16_t	R_Weight_Temp;
  683: 	static	u16_t xdata R_Weight_kg_old;
  684: 	static	u8_t	  xdata R_Weight_SameTimes;
  685: 	static	u8_t xdata B_Weight_SmallSteady;		//小重量稳定标志
  686: 	static	u8_t xdata B_Weight_HeavySteady;	//大重量稳定标志
  687: 	
  688: 	if(option==ResetSteady)
002F07 EF                MOV     A,R7
002F08 B4010B            CJNE    A,#01H,?C0091?CS_SCALE_PROC
  689: 		{
  690: 		R_Weight_SameTimes = 0;
002F0B E4                CLR     A
002F0C 904CA4            MOV     DPTR,#R_Weight_SameTimes
002F0F F0                MOVX    @DPTR,A
  691: 		B_Weight_SmallSteady = false;
002F10 A3                INC     DPTR
002F11 F0                MOVX    @DPTR,A
  692: 		B_Weight_HeavySteady = false;
002F12 A3                INC     DPTR
002F13 F0                MOVX    @DPTR,A
  693: 		return 0;
002F14 FF                MOV     R7,A
002F15 22                RET     
  694: 		}	
002F16         ?C0091?CS_SCALE_PROC:
  695: 
  696: 	if(option==GetIfSmallSteady)
002F16 EF                MOV     A,R7
002F17 B40206            CJNE    A,#02H,?C0093?CS_SCALE_PROC
  697: 		return B_Weight_SmallSteady;
002F1A 904CA5            MOV     DPTR,#B_Weight_SmallSteady
002F1D E0                MOVX    A,@DPTR
002F1E FF                MOV     R7,A
002F1F 22                RET     
002F20         ?C0093?CS_SCALE_PROC:
  698: 
  699: 	if(option==GetIfHeavySteady)
002F20 EF                MOV     A,R7
002F21 B40306            CJNE    A,#03H,?C0094?CS_SCALE_PROC
  700: 		return B_Weight_HeavySteady;
002F24 904CA6            MOV     DPTR,#B_Weight_HeavySteady
002F27 E0                MOVX    A,@DPTR
002F28 FF                MOV     R7,A
002F29 22                RET     
002F2A         ?C0094?CS_SCALE_PROC:
  701: 	
  702: 	if(CS_Scale_LockProc(GetIfLock)==false)
002F2A 7F02              MOV     R7,#02H
002F2C 1235D5            LCALL   _CS_Scale_LockProc
002F2F EF                MOV     A,R7
002F30 6003              JZ      $ + 5H
002F32 023070            LJMP    ?C0095?CS_SCALE_PROC
  703: 		{
  704: 	
  705: 		if(R_UnitWeight.origin > R_Weight_kg_old)
002F35 904CA2            MOV     DPTR,#R_Weight_kg_old
002F38 E0                MOVX    A,@DPTR
002F39 FE                MOV     R6,A
002F3A A3                INC     DPTR
002F3B E0                MOVX    A,@DPTR
002F3C FF                MOV     R7,A
002F3D 904CC9            MOV     DPTR,#R_UnitWeight
002F40 E0                MOVX    A,@DPTR
002F41 FC                MOV     R4,A
002F42 A3                INC     DPTR
002F43 E0                MOVX    A,@DPTR
002F44 FD                MOV     R5,A
002F45 D3                SETB    C
002F46 9F                SUBB    A,R7
002F47 EC                MOV     A,R4
002F48 9E                SUBB    A,R6
002F49 400E              JC      ?C0096?CS_SCALE_PROC
  706: 			weight_temp = R_UnitWeight.origin -R_Weight_kg_old;
002F4B ED                MOV     A,R5
002F4C 9F                SUBB    A,R7
002F4D FF                MOV     R7,A
002F4E EC                MOV     A,R4
002F4F 9E                SUBB    A,R6
002F50 904E37            MOV     DPTR,#weight_temp
002F53 F0                MOVX    @DPTR,A
002F54 A3                INC     DPTR
002F55 EF                MOV     A,R7
002F56 F0                MOVX    @DPTR,A
002F57 801B              SJMP    ?C0097?CS_SCALE_PROC
002F59         ?C0096?CS_SCALE_PROC:
  707: 		else
  708: 			weight_temp = R_Weight_kg_old -R_UnitWeight.origin;
002F59 904CC9            MOV     DPTR,#R_UnitWeight
002F5C E0                MOVX    A,@DPTR
002F5D FE                MOV     R6,A
002F5E A3                INC     DPTR
002F5F E0                MOVX    A,@DPTR
002F60 FF                MOV     R7,A
002F61 C3                CLR     C
002F62 904CA3            MOV     DPTR,#R_Weight_kg_old+01H
002F65 E0                MOVX    A,@DPTR
002F66 9F                SUBB    A,R7
002F67 FF                MOV     R7,A
002F68 904CA2            MOV     DPTR,#R_Weight_kg_old
002F6B E0                MOVX    A,@DPTR
002F6C 9E                SUBB    A,R6
002F6D 904E37            MOV     DPTR,#weight_temp
002F70 F0                MOVX    @DPTR,A
002F71 A3                INC     DPTR
002F72 EF                MOV     A,R7
002F73 F0                MOVX    @DPTR,A
002F74         ?C0097?CS_SCALE_PROC:
  709: 		
  710: 		if(weight_temp <  CS_Scale_SameWeightRange)
002F74 C3                CLR     C
002F75 904E38            MOV     DPTR,#weight_temp+01H
002F78 E0                MOVX    A,@DPTR
002F79 940A              SUBB    A,#0AH
002F7B 904E37            MOV     DPTR,#weight_temp
002F7E E0                MOVX    A,@DPTR
002F7F 9400              SUBB    A,#00H
002F81 500E              JNC     ?C0098?CS_SCALE_PROC
  711: 			{
  712: 			if(R_Weight_SameTimes<255)
002F83 904CA4            MOV     DPTR,#R_Weight_SameTimes
002F86 E0                MOVX    A,@DPTR
002F87 C3                CLR     C
002F88 94FF              SUBB    A,#0FFH
002F8A 500A              JNC     ?C0100?CS_SCALE_PROC
  713: 				R_Weight_SameTimes++;
002F8C E0                MOVX    A,@DPTR
002F8D 04                INC     A
002F8E F0                MOVX    @DPTR,A
  714: 			}
002F8F 8005              SJMP    ?C0100?CS_SCALE_PROC
002F91         ?C0098?CS_SCALE_PROC:
  715: 		else
  716: 			R_Weight_SameTimes = 0;
002F91 E4                CLR     A
002F92 904CA4            MOV     DPTR,#R_Weight_SameTimes
002F95 F0                MOVX    @DPTR,A
002F96         ?C0100?CS_SCALE_PROC:
  717: 	
  718: 		
  719: 		R_Weight_kg_old = R_UnitWeight.origin;
002F96 904CC9            MOV     DPTR,#R_UnitWeight
002F99 E0                MOVX    A,@DPTR
002F9A FE                MOV     R6,A
002F9B A3                INC     DPTR
002F9C E0                MOVX    A,@DPTR
002F9D FF                MOV     R7,A
002F9E 904CA2            MOV     DPTR,#R_Weight_kg_old
002FA1 EE                MOV     A,R6
002FA2 F0                MOVX    @DPTR,A
002FA3 A3                INC     DPTR
002FA4 EF                MOV     A,R7
002FA5 F0                MOVX    @DPTR,A
  720: 
  721: 		B_Weight_SmallSteady = false;
002FA6 E4                CLR     A
002FA7 904CA5            MOV     DPTR,#B_Weight_SmallSteady
002FAA F0                MOVX    @DPTR,A
  722: 		B_Weight_HeavySteady = false;
002FAB A3                INC     DPTR
002FAC F0                MOVX    @DPTR,A
  723: 		
  724: 		if(R_UnitWeight.origin < CS_Scale_MinLockWeight)
002FAD C3                CLR     C
002FAE EF                MOV     A,R7
002FAF 94FA              SUBB    A,#0FAH
002FB1 EE                MOV     A,R6
002FB2 9400              SUBB    A,#00H
002FB4 5012              JNC     ?C0101?CS_SCALE_PROC
  725: 			{
  726: 			if(R_Weight_SameTimes>CS_SmallWeight_Steadytimes)
002FB6 904CA4            MOV     DPTR,#R_Weight_SameTimes
002FB9 E0                MOVX    A,@DPTR
002FBA 9406              SUBB    A,#06H
002FBC 5003              JNC     $ + 5H
002FBE 023070            LJMP    ?C0095?CS_SCALE_PROC
  727: 				B_Weight_SmallSteady = true;		
002FC1 A3                INC     DPTR
002FC2 7401              MOV     A,#01H
002FC4 F0                MOVX    @DPTR,A
  728: 			}
002FC5 023070            LJMP    ?C0095?CS_SCALE_PROC
002FC8         ?C0101?CS_SCALE_PROC:
  729: 		else
  730: 			{			
  731: 			if(R_Weight_SameTimes>CS_BigWeight_Steadytimes)
002FC8 904CA4            MOV     DPTR,#R_Weight_SameTimes
002FCB E0                MOVX    A,@DPTR
002FCC D3                SETB    C
002FCD 9405              SUBB    A,#05H
002FCF 5003              JNC     $ + 5H
002FD1 023070            LJMP    ?C0095?CS_SCALE_PROC
  732: 				{
  733: 				B_Weight_HeavySteady = true;	
002FD4 904CA6            MOV     DPTR,#B_Weight_HeavySteady
002FD7 7401              MOV     A,#01H
002FD9 F0                MOVX    @DPTR,A
  734: 
  735: 				if(R_UnitWeight.origin>R_Weight_Mem)
002FDA 904CC3            MOV     DPTR,#R_Weight_Mem
002FDD E0                MOVX    A,@DPTR
002FDE FE                MOV     R6,A
002FDF A3                INC     DPTR
002FE0 E0                MOVX    A,@DPTR
002FE1 FF                MOV     R7,A
002FE2 904CC9            MOV     DPTR,#R_UnitWeight
002FE5 E0                MOVX    A,@DPTR
002FE6 FC                MOV     R4,A
002FE7 A3                INC     DPTR
002FE8 E0                MOVX    A,@DPTR
002FE9 FD                MOV     R5,A
002FEA D3                SETB    C
002FEB 9F                SUBB    A,R7
002FEC EC                MOV     A,R4
002FED 9E                SUBB    A,R6
002FEE 400E              JC      ?C0105?CS_SCALE_PROC
  736: 				R_Weight_Temp = R_UnitWeight.origin -R_Weight_Mem;
002FF0 ED                MOV     A,R5
002FF1 9F                SUBB    A,R7
002FF2 FF                MOV     R7,A
002FF3 EC                MOV     A,R4
002FF4 9E                SUBB    A,R6
002FF5 904E39            MOV     DPTR,#R_Weight_Temp
002FF8 F0                MOVX    @DPTR,A
002FF9 A3                INC     DPTR
002FFA EF                MOV     A,R7
002FFB F0                MOVX    @DPTR,A
002FFC 801B              SJMP    ?C0106?CS_SCALE_PROC
002FFE         ?C0105?CS_SCALE_PROC:
  737: 				else
  738: 				R_Weight_Temp = R_Weight_Mem - R_UnitWeight.origin;
002FFE 904CC9            MOV     DPTR,#R_UnitWeight
003001 E0                MOVX    A,@DPTR
003002 FE                MOV     R6,A
003003 A3                INC     DPTR
003004 E0                MOVX    A,@DPTR
003005 FF                MOV     R7,A
003006 C3                CLR     C
003007 904CC4            MOV     DPTR,#R_Weight_Mem+01H
00300A E0                MOVX    A,@DPTR
00300B 9F                SUBB    A,R7
00300C FF                MOV     R7,A
00300D 904CC3            MOV     DPTR,#R_Weight_Mem
003010 E0                MOVX    A,@DPTR
003011 9E                SUBB    A,R6
003012 904E39            MOV     DPTR,#R_Weight_Temp
003015 F0                MOVX    @DPTR,A
003016 A3                INC     DPTR
003017 EF                MOV     A,R7
003018 F0                MOVX    @DPTR,A
003019         ?C0106?CS_SCALE_PROC:
  739: 
  740: 				//在记忆范围内记忆
  741: 				if(R_UnitWeight.origin > ScaleStartMemoryWeight)
003019 D3                SETB    C
00301A 904CCA            MOV     DPTR,#R_UnitWeight+01H
00301D E0                MOVX    A,@DPTR
00301E 9458              SUBB    A,#058H
003020 904CC9            MOV     DPTR,#R_UnitWeight
003023 E0                MOVX    A,@DPTR
003024 9402              SUBB    A,#02H
003026 401D              JC      ?C0107?CS_SCALE_PROC
  742: 					{
  743: 					if(R_Weight_Temp<CS_MemoryRange)
003028 904E3A            MOV     DPTR,#R_Weight_Temp+01H
00302B E0                MOVX    A,@DPTR
00302C 9419              SUBB    A,#019H
00302E 904E39            MOV     DPTR,#R_Weight_Temp
003031 E0                MOVX    A,@DPTR
003032 9400              SUBB    A,#00H
003034 500F              JNC     ?C0107?CS_SCALE_PROC
  744: 					R_UnitWeight.origin = R_Weight_Mem;
003036 904CC3            MOV     DPTR,#R_Weight_Mem
003039 E0                MOVX    A,@DPTR
00303A FF                MOV     R7,A
00303B A3                INC     DPTR
00303C E0                MOVX    A,@DPTR
00303D 904CC9            MOV     DPTR,#R_UnitWeight
003040 CF                XCH     A,R7
003041 F0                MOVX    @DPTR,A
003042 A3                INC     DPTR
003043 EF                MOV     A,R7
003044 F0                MOVX    @DPTR,A
  745: 					}
003045         ?C0107?CS_SCALE_PROC:
  746: 			
  747: 				R_Weight_Lock = R_UnitWeight.origin;
003045 904CC9            MOV     DPTR,#R_UnitWeight
003048 E0                MOVX    A,@DPTR
003049 FE                MOV     R6,A
00304A A3                INC     DPTR
00304B E0                MOVX    A,@DPTR
00304C FF                MOV     R7,A
00304D 904CC0            MOV     DPTR,#R_Weight_Lock
003050 EE                MOV     A,R6
003051 F0                MOVX    @DPTR,A
003052 A3                INC     DPTR
003053 EF                MOV     A,R7
003054 F0                MOVX    @DPTR,A
  748: 				R_Weight_Mem = R_UnitWeight.origin;
003055 904CC3            MOV     DPTR,#R_Weight_Mem
003058 EE                MOV     A,R6
003059 F0                MOVX    @DPTR,A
00305A A3                INC     DPTR
00305B EF                MOV     A,R7
00305C F0                MOVX    @DPTR,A
  749: 				
  750: 				R_Scale_state = CS_Scale_state_locking;
00305D A3                INC     DPTR
00305E 7404              MOV     A,#04H
003060 F0                MOVX    @DPTR,A
  751: 				CS_SoftTimer(ResetSoftTimer);		//软件定时器开始用于锁定闪显示计时
003061 7F02              MOV     R7,#02H
003063 120F15            LCALL   _CS_SoftTimer
  752: 				CS_Scale_SteadyProc(SteadyProcReset);
003066 E4                CLR     A
003067 FF                MOV     R7,A
003068 122DCE            LCALL   _CS_Scale_SteadyProc
  753: 				CS_Scale_TimeOutProc(CS_Reset_AllTime);
00306B 7F06              MOV     R7,#06H
00306D 122BBB            LCALL   _CS_Scale_TimeOutProc
  754: 				}
  755: 			}
  756: 		}
003070         ?C0095?CS_SCALE_PROC:
  757: 	return 0;
003070 7F00              MOV     R7,#00H
  758: }
003072 22                RET     
----- FUNCTION _CS_Scale_JudgeSteady (END) -------


----- FUNCTION _CS_Scale_GetDeltaAD (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  219: u16_t CS_Scale_GetDeltaAD(u8_t option)
  220: {
003073 904E48            MOV     DPTR,#option
003076 EF                MOV     A,R7
003077 F0                MOVX    @DPTR,A
  221: 	static       u8_t xdata B_Weight_Pos;				//正负AD变化标志
  222: 	u16_t	ad_temp;
  223: 	u16_t      R_AD_Zero;
  224: 	R_AD_Zero = CS_Scale_ZeroProc(GetRunningZero,0);
003078 E4                CLR     A
003079 FD                MOV     R5,A
00307A FC                MOV     R4,A
00307B 7F01              MOV     R7,#01H
00307D 1212F1            LCALL   _CS_Scale_ZeroProc
;---- Variable 'R_AD_Zero' assigned to Register 'R6/R7' ----
  225: 	if(R_AD_Original>R_AD_Zero)
003080 904CD8            MOV     DPTR,#R_AD_Original
003083 E0                MOVX    A,@DPTR
003084 FC                MOV     R4,A
003085 A3                INC     DPTR
003086 E0                MOVX    A,@DPTR
003087 FD                MOV     R5,A
003088 D3                SETB    C
003089 9F                SUBB    A,R7
00308A EC                MOV     A,R4
00308B 9E                SUBB    A,R6
00308C 4014              JC      ?C0014?CS_SCALE_PROC
  226: 		{
  227: 		ad_temp = R_AD_Original - R_AD_Zero;
00308E ED                MOV     A,R5
00308F 9F                SUBB    A,R7
003090 FF                MOV     R7,A
003091 EC                MOV     A,R4
003092 9E                SUBB    A,R6
003093 904E49            MOV     DPTR,#ad_temp
003096 F0                MOVX    @DPTR,A
003097 A3                INC     DPTR
003098 EF                MOV     A,R7
003099 F0                MOVX    @DPTR,A
  228: 		B_Weight_Pos = true;
00309A 904C80            MOV     DPTR,#B_Weight_Pos
00309D 7401              MOV     A,#01H
00309F F0                MOVX    @DPTR,A
  229: 
  230: 		}
0030A0 801A              SJMP    ?C0015?CS_SCALE_PROC
0030A2         ?C0014?CS_SCALE_PROC:
  231: 	else
  232: 		{
  233: 		ad_temp = R_AD_Zero - R_AD_Original;
0030A2 904CD8            MOV     DPTR,#R_AD_Original
0030A5 E0                MOVX    A,@DPTR
0030A6 FC                MOV     R4,A
0030A7 A3                INC     DPTR
0030A8 E0                MOVX    A,@DPTR
0030A9 FD                MOV     R5,A
0030AA C3                CLR     C
0030AB EF                MOV     A,R7
0030AC 9D                SUBB    A,R5
0030AD FF                MOV     R7,A
0030AE EE                MOV     A,R6
0030AF 9C                SUBB    A,R4
0030B0 904E49            MOV     DPTR,#ad_temp
0030B3 F0                MOVX    @DPTR,A
0030B4 A3                INC     DPTR
0030B5 EF                MOV     A,R7
0030B6 F0                MOVX    @DPTR,A
  234: 		B_Weight_Pos = false;		
0030B7 E4                CLR     A
0030B8 904C80            MOV     DPTR,#B_Weight_Pos
0030BB F0                MOVX    @DPTR,A
  235: 		}
0030BC         ?C0015?CS_SCALE_PROC:
  236: 
  237: 	
  238: 	if(option == GetADDirection)
0030BC 904E48            MOV     DPTR,#option
0030BF E0                MOVX    A,@DPTR
0030C0 B40108            CJNE    A,#01H,?C0016?CS_SCALE_PROC
  239: 		{
  240: 		return	B_Weight_Pos;
0030C3 904C80            MOV     DPTR,#B_Weight_Pos
0030C6 E0                MOVX    A,@DPTR
0030C7 FF                MOV     R7,A
0030C8 7E00              MOV     R6,#00H
0030CA 22                RET     
  241: 		}	
0030CB         ?C0016?CS_SCALE_PROC:
  242: 	return ad_temp;
0030CB 904E49            MOV     DPTR,#ad_temp
0030CE E0                MOVX    A,@DPTR
0030CF FE                MOV     R6,A
0030D0 A3                INC     DPTR
0030D1 E0                MOVX    A,@DPTR
0030D2 FF                MOV     R7,A
  243: }
0030D3 22                RET     
----- FUNCTION _CS_Scale_GetDeltaAD (END) -------


----- FUNCTION _CS_Scale_AdcFilter (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  248: u16_t CS_Scale_AdcFilter(u8_t option,u16_t R_AD_BUF)
  249: {
0030D4 904E0D            MOV     DPTR,#R_AD_BUF
0030D7 EC                MOV     A,R4
0030D8 F0                MOVX    @DPTR,A
0030D9 A3                INC     DPTR
0030DA ED                MOV     A,R5
0030DB F0                MOVX    @DPTR,A
0030DC 904E0C            MOV     DPTR,#option
0030DF EF                MOV     A,R7
0030E0 F0                MOVX    @DPTR,A
  250: 	u32_t	ad_temp;
  251: 	static	u16_t xdata R_AD_FilTimes;
  252: 	static	u16_t xdata R_AD_BUF_OLD;
  253: 	static	u16_t xdata R_AD_F1;
  254: 	static	u16_t xdata R_AD_F2;
  255: 	static	u16_t xdata R_AD_F3;
  256: 	static	u16_t xdata R_AD_F4;
  257: 	static	u16_t xdata R_AD_F5;
  258: 	static	u16_t xdata R_AD_F6;
  259: 	static	u16_t xdata R_AD_F7;
  260: 	static	u16_t xdata R_AD_F8;	
  261: 		
  262: 	if(option==ScaleAdcFilterGetFilTimes)
0030E1 BF0209            CJNE    R7,#02H,?C0018?CS_SCALE_PROC
  263: 		{
  264: 		return  R_AD_FilTimes;
0030E4 904C81            MOV     DPTR,#R_AD_FilTimes
0030E7 E0                MOVX    A,@DPTR
0030E8 FE                MOV     R6,A
0030E9 A3                INC     DPTR
0030EA E0                MOVX    A,@DPTR
0030EB FF                MOV     R7,A
0030EC 22                RET     
  265: 		}
0030ED         ?C0018?CS_SCALE_PROC:
  266: 	
  267: 	
  268: 	if(R_AD_BUF >R_AD_BUF_OLD)
0030ED 904C83            MOV     DPTR,#R_AD_BUF_OLD
0030F0 E0                MOVX    A,@DPTR
0030F1 FE                MOV     R6,A
0030F2 A3                INC     DPTR
0030F3 E0                MOVX    A,@DPTR
0030F4 FF                MOV     R7,A
0030F5 904E0D            MOV     DPTR,#R_AD_BUF
0030F8 E0                MOVX    A,@DPTR
0030F9 FC                MOV     R4,A
0030FA A3                INC     DPTR
0030FB E0                MOVX    A,@DPTR
0030FC FD                MOV     R5,A
0030FD D3                SETB    C
0030FE 9F                SUBB    A,R7
0030FF EC                MOV     A,R4
003100 9E                SUBB    A,R6
003101 4017              JC      ?C0020?CS_SCALE_PROC
  269: 		ad_temp = R_AD_BUF - R_AD_BUF_OLD;
003103 904C83            MOV     DPTR,#R_AD_BUF_OLD
003106 E0                MOVX    A,@DPTR
003107 A3                INC     DPTR
003108 E0                MOVX    A,@DPTR
003109 ED                MOV     A,R5
00310A 9F                SUBB    A,R7
00310B FF                MOV     R7,A
00310C EC                MOV     A,R4
00310D 9E                SUBB    A,R6
00310E FE                MOV     R6,A
00310F E4                CLR     A
003110 FC                MOV     R4,A
003111 FD                MOV     R5,A
003112 904E0F            MOV     DPTR,#ad_temp
003115 120332            LCALL   ?C?LSTXDATA
003118 801E              SJMP    ?C0021?CS_SCALE_PROC
00311A         ?C0020?CS_SCALE_PROC:
  270: 	else
  271: 		ad_temp = R_AD_BUF_OLD - R_AD_BUF;
00311A 904E0D            MOV     DPTR,#R_AD_BUF
00311D E0                MOVX    A,@DPTR
00311E FE                MOV     R6,A
00311F A3                INC     DPTR
003120 E0                MOVX    A,@DPTR
003121 FF                MOV     R7,A
003122 C3                CLR     C
003123 904C84            MOV     DPTR,#R_AD_BUF_OLD+01H
003126 E0                MOVX    A,@DPTR
003127 9F                SUBB    A,R7
003128 FF                MOV     R7,A
003129 904C83            MOV     DPTR,#R_AD_BUF_OLD
00312C E0                MOVX    A,@DPTR
00312D 9E                SUBB    A,R6
00312E FE                MOV     R6,A
00312F E4                CLR     A
003130 FC                MOV     R4,A
003131 FD                MOV     R5,A
003132 904E0F            MOV     DPTR,#ad_temp
003135 120332            LCALL   ?C?LSTXDATA
003138         ?C0021?CS_SCALE_PROC:
  272: 
  273: 	R_AD_BUF_OLD	=	R_AD_BUF;
003138 904E0D            MOV     DPTR,#R_AD_BUF
00313B E0                MOVX    A,@DPTR
00313C FF                MOV     R7,A
00313D A3                INC     DPTR
00313E E0                MOVX    A,@DPTR
00313F 904C83            MOV     DPTR,#R_AD_BUF_OLD
003142 CF                XCH     A,R7
003143 F0                MOVX    @DPTR,A
003144 A3                INC     DPTR
003145 EF                MOV     A,R7
003146 F0                MOVX    @DPTR,A
  274: 	
  275: 	if((ad_temp > CS_Scale_FiterX) ||(option==ScaleAdcFilterReset))	
003147 E4                CLR     A
003148 7F05              MOV     R7,#05H
00314A FE                MOV     R6,A
00314B FD                MOV     R5,A
00314C FC                MOV     R4,A
00314D 904E0F            MOV     DPTR,#ad_temp
003150 E0                MOVX    A,@DPTR
003151 F8                MOV     R0,A
003152 A3                INC     DPTR
003153 E0                MOVX    A,@DPTR
003154 F9                MOV     R1,A
003155 A3                INC     DPTR
003156 E0                MOVX    A,@DPTR
003157 FA                MOV     R2,A
003158 A3                INC     DPTR
003159 E0                MOVX    A,@DPTR
00315A FB                MOV     R3,A
00315B D3                SETB    C
00315C 1202FB            LCALL   ?C?ULCMP
00315F 5007              JNC     ?C0023?CS_SCALE_PROC
003161 904E0C            MOV     DPTR,#option
003164 E0                MOVX    A,@DPTR
003165 B4012B            CJNE    A,#01H,?C0022?CS_SCALE_PROC
003168         ?C0023?CS_SCALE_PROC:
  276: 		{						
  277: 		R_AD_FilTimes = 0;
003168 E4                CLR     A
003169 904C81            MOV     DPTR,#R_AD_FilTimes
00316C F0                MOVX    @DPTR,A
00316D A3                INC     DPTR
00316E F0                MOVX    @DPTR,A
  278: 		R_AD_F1 	    = 0;
00316F 904C85            MOV     DPTR,#R_AD_F1
003172 F0                MOVX    @DPTR,A
003173 A3                INC     DPTR
003174 F0                MOVX    @DPTR,A
  279: 		R_AD_F2 	    = 0;
003175 A3                INC     DPTR
003176 F0                MOVX    @DPTR,A
003177 A3                INC     DPTR
003178 F0                MOVX    @DPTR,A
  280: 		R_AD_F3 	    = 0;
003179 A3                INC     DPTR
00317A F0                MOVX    @DPTR,A
00317B A3                INC     DPTR
00317C F0                MOVX    @DPTR,A
  281: 		R_AD_F4 	    = 0;
00317D A3                INC     DPTR
00317E F0                MOVX    @DPTR,A
00317F A3                INC     DPTR
003180 F0                MOVX    @DPTR,A
  282: 		R_AD_F5 	    = 0;
003181 A3                INC     DPTR
003182 F0                MOVX    @DPTR,A
003183 A3                INC     DPTR
003184 F0                MOVX    @DPTR,A
  283: 		R_AD_F6 	    = 0;
003185 A3                INC     DPTR
003186 F0                MOVX    @DPTR,A
003187 A3                INC     DPTR
003188 F0                MOVX    @DPTR,A
  284: 		R_AD_F7 	    = 0;
003189 A3                INC     DPTR
00318A F0                MOVX    @DPTR,A
00318B A3                INC     DPTR
00318C F0                MOVX    @DPTR,A
  285: 		R_AD_F8 	    = 0;
00318D A3                INC     DPTR
00318E F0                MOVX    @DPTR,A
00318F A3                INC     DPTR
003190 F0                MOVX    @DPTR,A
  286: 		}
003191 817B              AJMP    ?C0024?CS_SCALE_PROC
003193         ?C0022?CS_SCALE_PROC:
  287: 	else
  288: 		{
  289: 		if(R_AD_FilTimes < 200 )
003193 C3                CLR     C
003194 904C82            MOV     DPTR,#R_AD_FilTimes+01H
003197 E0                MOVX    A,@DPTR
003198 94C8              SUBB    A,#0C8H
00319A 904C81            MOV     DPTR,#R_AD_FilTimes
00319D E0                MOVX    A,@DPTR
00319E 9400              SUBB    A,#00H
0031A0 500C              JNC     ?C0025?CS_SCALE_PROC
  290: 		R_AD_FilTimes ++;	
0031A2 A3                INC     DPTR
0031A3 E0                MOVX    A,@DPTR
0031A4 04                INC     A
0031A5 F0                MOVX    @DPTR,A
0031A6 7006              JNZ     ?C0230?CS_SCALE_PROC
0031A8 904C81            MOV     DPTR,#R_AD_FilTimes
0031AB E0                MOVX    A,@DPTR
0031AC 04                INC     A
0031AD F0                MOVX    @DPTR,A
0031AE         ?C0230?CS_SCALE_PROC:
0031AE         ?C0025?CS_SCALE_PROC:
  291: 
  292: 			if(R_AD_FilTimes<=1)
0031AE 904C81            MOV     DPTR,#R_AD_FilTimes
0031B1 E0                MOVX    A,@DPTR
0031B2 FE                MOV     R6,A
0031B3 A3                INC     DPTR
0031B4 E0                MOVX    A,@DPTR
0031B5 FF                MOV     R7,A
0031B6 D3                SETB    C
0031B7 9401              SUBB    A,#01H
0031B9 EE                MOV     A,R6
0031BA 9400              SUBB    A,#00H
0031BC 500F              JNC     ?C0026?CS_SCALE_PROC
  293: 				R_AD_F1 = R_AD_BUF;	
0031BE 904E0D            MOV     DPTR,#R_AD_BUF
0031C1 E0                MOVX    A,@DPTR
0031C2 FD                MOV     R5,A
0031C3 A3                INC     DPTR
0031C4 E0                MOVX    A,@DPTR
0031C5 904C85            MOV     DPTR,#R_AD_F1
0031C8 CD                XCH     A,R5
0031C9 F0                MOVX    @DPTR,A
0031CA A3                INC     DPTR
0031CB ED                MOV     A,R5
0031CC F0                MOVX    @DPTR,A
0031CD         ?C0026?CS_SCALE_PROC:
  294: 			if(R_AD_FilTimes<=2)
0031CD D3                SETB    C
0031CE EF                MOV     A,R7
0031CF 9402              SUBB    A,#02H
0031D1 EE                MOV     A,R6
0031D2 9400              SUBB    A,#00H
0031D4 500F              JNC     ?C0027?CS_SCALE_PROC
  295: 				R_AD_F2 = R_AD_BUF;
0031D6 904E0D            MOV     DPTR,#R_AD_BUF
0031D9 E0                MOVX    A,@DPTR
0031DA FF                MOV     R7,A
0031DB A3                INC     DPTR
0031DC E0                MOVX    A,@DPTR
0031DD 904C87            MOV     DPTR,#R_AD_F2
0031E0 CF                XCH     A,R7
0031E1 F0                MOVX    @DPTR,A
0031E2 A3                INC     DPTR
0031E3 EF                MOV     A,R7
0031E4 F0                MOVX    @DPTR,A
0031E5         ?C0027?CS_SCALE_PROC:
  296: 			if(R_AD_FilTimes<=3)
0031E5 D3                SETB    C
0031E6 904C82            MOV     DPTR,#R_AD_FilTimes+01H
0031E9 E0                MOVX    A,@DPTR
0031EA 9403              SUBB    A,#03H
0031EC 904C81            MOV     DPTR,#R_AD_FilTimes
0031EF E0                MOVX    A,@DPTR
0031F0 9400              SUBB    A,#00H
0031F2 500F              JNC     ?C0028?CS_SCALE_PROC
  297: 				R_AD_F3 = R_AD_BUF;
0031F4 904E0D            MOV     DPTR,#R_AD_BUF
0031F7 E0                MOVX    A,@DPTR
0031F8 FF                MOV     R7,A
0031F9 A3                INC     DPTR
0031FA E0                MOVX    A,@DPTR
0031FB 904C89            MOV     DPTR,#R_AD_F3
0031FE CF                XCH     A,R7
0031FF F0                MOVX    @DPTR,A
003200 A3                INC     DPTR
003201 EF                MOV     A,R7
003202 F0                MOVX    @DPTR,A
003203         ?C0028?CS_SCALE_PROC:
  298: 			if(R_AD_FilTimes<=4)
003203 904C81            MOV     DPTR,#R_AD_FilTimes
003206 E0                MOVX    A,@DPTR
003207 FE                MOV     R6,A
003208 A3                INC     DPTR
003209 E0                MOVX    A,@DPTR
00320A FF                MOV     R7,A
00320B D3                SETB    C
00320C 9404              SUBB    A,#04H
00320E EE                MOV     A,R6
00320F 9400              SUBB    A,#00H
003211 500F              JNC     ?C0029?CS_SCALE_PROC
  299: 				R_AD_F4 = R_AD_BUF;
003213 904E0D            MOV     DPTR,#R_AD_BUF
003216 E0                MOVX    A,@DPTR
003217 FD                MOV     R5,A
003218 A3                INC     DPTR
003219 E0                MOVX    A,@DPTR
00321A 904C8B            MOV     DPTR,#R_AD_F4
00321D CD                XCH     A,R5
00321E F0                MOVX    @DPTR,A
00321F A3                INC     DPTR
003220 ED                MOV     A,R5
003221 F0                MOVX    @DPTR,A
003222         ?C0029?CS_SCALE_PROC:
  300: 			if(R_AD_FilTimes<=5)
003222 D3                SETB    C
003223 EF                MOV     A,R7
003224 9405              SUBB    A,#05H
003226 EE                MOV     A,R6
003227 9400              SUBB    A,#00H
003229 500F              JNC     ?C0030?CS_SCALE_PROC
  301: 				R_AD_F5 = R_AD_BUF;
00322B 904E0D            MOV     DPTR,#R_AD_BUF
00322E E0                MOVX    A,@DPTR
00322F FF                MOV     R7,A
003230 A3                INC     DPTR
003231 E0                MOVX    A,@DPTR
003232 904C8D            MOV     DPTR,#R_AD_F5
003235 CF                XCH     A,R7
003236 F0                MOVX    @DPTR,A
003237 A3                INC     DPTR
003238 EF                MOV     A,R7
003239 F0                MOVX    @DPTR,A
00323A         ?C0030?CS_SCALE_PROC:
  302: 			if(R_AD_FilTimes<=6)
00323A D3                SETB    C
00323B 904C82            MOV     DPTR,#R_AD_FilTimes+01H
00323E E0                MOVX    A,@DPTR
00323F 9406              SUBB    A,#06H
003241 904C81            MOV     DPTR,#R_AD_FilTimes
003244 E0                MOVX    A,@DPTR
003245 9400              SUBB    A,#00H
003247 500F              JNC     ?C0031?CS_SCALE_PROC
  303: 				R_AD_F6 = R_AD_BUF;
003249 904E0D            MOV     DPTR,#R_AD_BUF
00324C E0                MOVX    A,@DPTR
00324D FF                MOV     R7,A
00324E A3                INC     DPTR
00324F E0                MOVX    A,@DPTR
003250 904C8F            MOV     DPTR,#R_AD_F6
003253 CF                XCH     A,R7
003254 F0                MOVX    @DPTR,A
003255 A3                INC     DPTR
003256 EF                MOV     A,R7
003257 F0                MOVX    @DPTR,A
003258         ?C0031?CS_SCALE_PROC:
  304: 			if(R_AD_FilTimes<=7)
003258 904C81            MOV     DPTR,#R_AD_FilTimes
00325B E0                MOVX    A,@DPTR
00325C FE                MOV     R6,A
00325D A3                INC     DPTR
00325E E0                MOVX    A,@DPTR
00325F FF                MOV     R7,A
003260 D3                SETB    C
003261 9407              SUBB    A,#07H
003263 EE                MOV     A,R6
003264 9400              SUBB    A,#00H
003266 500F              JNC     ?C0032?CS_SCALE_PROC
  305: 				R_AD_F7 = R_AD_BUF;
003268 904E0D            MOV     DPTR,#R_AD_BUF
00326B E0                MOVX    A,@DPTR
00326C FD                MOV     R5,A
00326D A3                INC     DPTR
00326E E0                MOVX    A,@DPTR
00326F 904C91            MOV     DPTR,#R_AD_F7
003272 CD                XCH     A,R5
003273 F0                MOVX    @DPTR,A
003274 A3                INC     DPTR
003275 ED                MOV     A,R5
003276 F0                MOVX    @DPTR,A
003277         ?C0032?CS_SCALE_PROC:
  306: 			if(R_AD_FilTimes<=8)
003277 D3                SETB    C
003278 EF                MOV     A,R7
003279 9408              SUBB    A,#08H
00327B EE                MOV     A,R6
00327C 9400              SUBB    A,#00H
00327E 500F              JNC     ?C0033?CS_SCALE_PROC
  307: 				R_AD_F8 = R_AD_BUF;
003280 904E0D            MOV     DPTR,#R_AD_BUF
003283 E0                MOVX    A,@DPTR
003284 FF                MOV     R7,A
003285 A3                INC     DPTR
003286 E0                MOVX    A,@DPTR
003287 904C93            MOV     DPTR,#R_AD_F8
00328A CF                XCH     A,R7
00328B F0                MOVX    @DPTR,A
00328C A3                INC     DPTR
00328D EF                MOV     A,R7
00328E F0                MOVX    @DPTR,A
00328F         ?C0033?CS_SCALE_PROC:
  308: 			if(R_AD_FilTimes>8)
00328F D3                SETB    C
003290 904C82            MOV     DPTR,#R_AD_FilTimes+01H
003293 E0                MOVX    A,@DPTR
003294 9408              SUBB    A,#08H
003296 904C81            MOV     DPTR,#R_AD_FilTimes
003299 E0                MOVX    A,@DPTR
00329A 9400              SUBB    A,#00H
00329C 4078              JC      ?C0034?CS_SCALE_PROC
  309: 				{
  310: 				R_AD_F1 = R_AD_F2;
00329E 904C87            MOV     DPTR,#R_AD_F2
0032A1 E0                MOVX    A,@DPTR
0032A2 FF                MOV     R7,A
0032A3 A3                INC     DPTR
0032A4 E0                MOVX    A,@DPTR
0032A5 904C85            MOV     DPTR,#R_AD_F1
0032A8 CF                XCH     A,R7
0032A9 F0                MOVX    @DPTR,A
0032AA A3                INC     DPTR
0032AB EF                MOV     A,R7
0032AC F0                MOVX    @DPTR,A
  311: 				R_AD_F2 = R_AD_F3;
0032AD 904C89            MOV     DPTR,#R_AD_F3
0032B0 E0                MOVX    A,@DPTR
0032B1 FF                MOV     R7,A
0032B2 A3                INC     DPTR
0032B3 E0                MOVX    A,@DPTR
0032B4 904C87            MOV     DPTR,#R_AD_F2
0032B7 CF                XCH     A,R7
0032B8 F0                MOVX    @DPTR,A
0032B9 A3                INC     DPTR
0032BA EF                MOV     A,R7
0032BB F0                MOVX    @DPTR,A
  312: 				R_AD_F3 = R_AD_F4;
0032BC 904C8B            MOV     DPTR,#R_AD_F4
0032BF E0                MOVX    A,@DPTR
0032C0 FF                MOV     R7,A
0032C1 A3                INC     DPTR
0032C2 E0                MOVX    A,@DPTR
0032C3 904C89            MOV     DPTR,#R_AD_F3
0032C6 CF                XCH     A,R7
0032C7 F0                MOVX    @DPTR,A
0032C8 A3                INC     DPTR
0032C9 EF                MOV     A,R7
0032CA F0                MOVX    @DPTR,A
  313: 				R_AD_F4 = R_AD_F5;
0032CB 904C8D            MOV     DPTR,#R_AD_F5
0032CE E0                MOVX    A,@DPTR
0032CF FF                MOV     R7,A
0032D0 A3                INC     DPTR
0032D1 E0                MOVX    A,@DPTR
0032D2 904C8B            MOV     DPTR,#R_AD_F4
0032D5 CF                XCH     A,R7
0032D6 F0                MOVX    @DPTR,A
0032D7 A3                INC     DPTR
0032D8 EF                MOV     A,R7
0032D9 F0                MOVX    @DPTR,A
  314: 				R_AD_F5 = R_AD_F6;
0032DA 904C8F            MOV     DPTR,#R_AD_F6
0032DD E0                MOVX    A,@DPTR
0032DE FF                MOV     R7,A
0032DF A3                INC     DPTR
0032E0 E0                MOVX    A,@DPTR
0032E1 904C8D            MOV     DPTR,#R_AD_F5
0032E4 CF                XCH     A,R7
0032E5 F0                MOVX    @DPTR,A
0032E6 A3                INC     DPTR
0032E7 EF                MOV     A,R7
0032E8 F0                MOVX    @DPTR,A
  315: 				R_AD_F6 = R_AD_F7;
0032E9 904C91            MOV     DPTR,#R_AD_F7
0032EC E0                MOVX    A,@DPTR
0032ED FF                MOV     R7,A
0032EE A3                INC     DPTR
0032EF E0                MOVX    A,@DPTR
0032F0 904C8F            MOV     DPTR,#R_AD_F6
0032F3 CF                XCH     A,R7
0032F4 F0                MOVX    @DPTR,A
0032F5 A3                INC     DPTR
0032F6 EF                MOV     A,R7
0032F7 F0                MOVX    @DPTR,A
  316: 				R_AD_F7 = R_AD_F8;
0032F8 904C93            MOV     DPTR,#R_AD_F8
0032FB E0                MOVX    A,@DPTR
0032FC FF                MOV     R7,A
0032FD A3                INC     DPTR
0032FE E0                MOVX    A,@DPTR
0032FF 904C91            MOV     DPTR,#R_AD_F7
003302 CF                XCH     A,R7
003303 F0                MOVX    @DPTR,A
003304 A3                INC     DPTR
003305 EF                MOV     A,R7
003306 F0                MOVX    @DPTR,A
  317: 				R_AD_F8 = R_AD_BUF;
003307 904E0D            MOV     DPTR,#R_AD_BUF
00330A E0                MOVX    A,@DPTR
00330B FF                MOV     R7,A
00330C A3                INC     DPTR
00330D E0                MOVX    A,@DPTR
00330E 904C93            MOV     DPTR,#R_AD_F8
003311 CF                XCH     A,R7
003312 F0                MOVX    @DPTR,A
003313 A3                INC     DPTR
003314 EF                MOV     A,R7
003315 F0                MOVX    @DPTR,A
  318: 				}
003316         ?C0034?CS_SCALE_PROC:
  319: 
  320: 		ad_temp	= R_AD_F1;
003316 904C85            MOV     DPTR,#R_AD_F1
003319 E0                MOVX    A,@DPTR
00331A FE                MOV     R6,A
00331B A3                INC     DPTR
00331C E0                MOVX    A,@DPTR
00331D FF                MOV     R7,A
00331E E4                CLR     A
00331F FC                MOV     R4,A
003320 FD                MOV     R5,A
003321 904E0F            MOV     DPTR,#ad_temp
003324 120332            LCALL   ?C?LSTXDATA
  321: 		ad_temp	+= R_AD_F2;
003327 904E0F            MOV     DPTR,#ad_temp
00332A E0                MOVX    A,@DPTR
00332B F8                MOV     R0,A
00332C A3                INC     DPTR
00332D E0                MOVX    A,@DPTR
00332E F9                MOV     R1,A
00332F A3                INC     DPTR
003330 E0                MOVX    A,@DPTR
003331 FA                MOV     R2,A
003332 A3                INC     DPTR
003333 E0                MOVX    A,@DPTR
003334 FB                MOV     R3,A
003335 904C87            MOV     DPTR,#R_AD_F2
003338 E0                MOVX    A,@DPTR
003339 FE                MOV     R6,A
00333A A3                INC     DPTR
00333B E0                MOVX    A,@DPTR
00333C FF                MOV     R7,A
00333D E4                CLR     A
00333E FC                MOV     R4,A
00333F FD                MOV     R5,A
003340 EB                MOV     A,R3
003341 2F                ADD     A,R7
003342 FF                MOV     R7,A
003343 EA                MOV     A,R2
003344 3E                ADDC    A,R6
003345 FE                MOV     R6,A
003346 ED                MOV     A,R5
003347 39                ADDC    A,R1
003348 FD                MOV     R5,A
003349 EC                MOV     A,R4
00334A 38                ADDC    A,R0
00334B FC                MOV     R4,A
00334C 904E0F            MOV     DPTR,#ad_temp
00334F 120332            LCALL   ?C?LSTXDATA
  322: 		ad_temp	+= R_AD_F3;
003352 904E0F            MOV     DPTR,#ad_temp
003355 E0                MOVX    A,@DPTR
003356 F8                MOV     R0,A
003357 A3                INC     DPTR
003358 E0                MOVX    A,@DPTR
003359 F9                MOV     R1,A
00335A A3                INC     DPTR
00335B E0                MOVX    A,@DPTR
00335C FA                MOV     R2,A
00335D A3                INC     DPTR
00335E E0                MOVX    A,@DPTR
00335F FB                MOV     R3,A
003360 904C89            MOV     DPTR,#R_AD_F3
003363 E0                MOVX    A,@DPTR
003364 FE                MOV     R6,A
003365 A3                INC     DPTR
003366 E0                MOVX    A,@DPTR
003367 FF                MOV     R7,A
003368 E4                CLR     A
003369 FC                MOV     R4,A
00336A FD                MOV     R5,A
00336B EB                MOV     A,R3
00336C 2F                ADD     A,R7
00336D FF                MOV     R7,A
00336E EA                MOV     A,R2
00336F 3E                ADDC    A,R6
003370 FE                MOV     R6,A
003371 ED                MOV     A,R5
003372 39                ADDC    A,R1
003373 FD                MOV     R5,A
003374 EC                MOV     A,R4
003375 38                ADDC    A,R0
003376 FC                MOV     R4,A
003377 904E0F            MOV     DPTR,#ad_temp
00337A 120332            LCALL   ?C?LSTXDATA
  323: 		ad_temp	+= R_AD_F4;
00337D 904E0F            MOV     DPTR,#ad_temp
003380 E0                MOVX    A,@DPTR
003381 F8                MOV     R0,A
003382 A3                INC     DPTR
003383 E0                MOVX    A,@DPTR
003384 F9                MOV     R1,A
003385 A3                INC     DPTR
003386 E0                MOVX    A,@DPTR
003387 FA                MOV     R2,A
003388 A3                INC     DPTR
003389 E0                MOVX    A,@DPTR
00338A FB                MOV     R3,A
00338B 904C8B            MOV     DPTR,#R_AD_F4
00338E E0                MOVX    A,@DPTR
00338F FE                MOV     R6,A
003390 A3                INC     DPTR
003391 E0                MOVX    A,@DPTR
003392 FF                MOV     R7,A
003393 E4                CLR     A
003394 FC                MOV     R4,A
003395 FD                MOV     R5,A
003396 EB                MOV     A,R3
003397 2F                ADD     A,R7
003398 FF                MOV     R7,A
003399 EA                MOV     A,R2
00339A 3E                ADDC    A,R6
00339B FE                MOV     R6,A
00339C ED                MOV     A,R5
00339D 39                ADDC    A,R1
00339E FD                MOV     R5,A
00339F EC                MOV     A,R4
0033A0 38                ADDC    A,R0
0033A1 FC                MOV     R4,A
0033A2 904E0F            MOV     DPTR,#ad_temp
0033A5 120332            LCALL   ?C?LSTXDATA
  324: 		ad_temp	+= R_AD_F5;
0033A8 904E0F            MOV     DPTR,#ad_temp
0033AB E0                MOVX    A,@DPTR
0033AC F8                MOV     R0,A
0033AD A3                INC     DPTR
0033AE E0                MOVX    A,@DPTR
0033AF F9                MOV     R1,A
0033B0 A3                INC     DPTR
0033B1 E0                MOVX    A,@DPTR
0033B2 FA                MOV     R2,A
0033B3 A3                INC     DPTR
0033B4 E0                MOVX    A,@DPTR
0033B5 FB                MOV     R3,A
0033B6 904C8D            MOV     DPTR,#R_AD_F5
0033B9 E0                MOVX    A,@DPTR
0033BA FE                MOV     R6,A
0033BB A3                INC     DPTR
0033BC E0                MOVX    A,@DPTR
0033BD FF                MOV     R7,A
0033BE E4                CLR     A
0033BF FC                MOV     R4,A
0033C0 FD                MOV     R5,A
0033C1 EB                MOV     A,R3
0033C2 2F                ADD     A,R7
0033C3 FF                MOV     R7,A
0033C4 EA                MOV     A,R2
0033C5 3E                ADDC    A,R6
0033C6 FE                MOV     R6,A
0033C7 ED                MOV     A,R5
0033C8 39                ADDC    A,R1
0033C9 FD                MOV     R5,A
0033CA EC                MOV     A,R4
0033CB 38                ADDC    A,R0
0033CC FC                MOV     R4,A
0033CD 904E0F            MOV     DPTR,#ad_temp
0033D0 120332            LCALL   ?C?LSTXDATA
  325: 		ad_temp	+= R_AD_F6;
0033D3 904E0F            MOV     DPTR,#ad_temp
0033D6 E0                MOVX    A,@DPTR
0033D7 F8                MOV     R0,A
0033D8 A3                INC     DPTR
0033D9 E0                MOVX    A,@DPTR
0033DA F9                MOV     R1,A
0033DB A3                INC     DPTR
0033DC E0                MOVX    A,@DPTR
0033DD FA                MOV     R2,A
0033DE A3                INC     DPTR
0033DF E0                MOVX    A,@DPTR
0033E0 FB                MOV     R3,A
0033E1 904C8F            MOV     DPTR,#R_AD_F6
0033E4 E0                MOVX    A,@DPTR
0033E5 FE                MOV     R6,A
0033E6 A3                INC     DPTR
0033E7 E0                MOVX    A,@DPTR
0033E8 FF                MOV     R7,A
0033E9 E4                CLR     A
0033EA FC                MOV     R4,A
0033EB FD                MOV     R5,A
0033EC EB                MOV     A,R3
0033ED 2F                ADD     A,R7
0033EE FF                MOV     R7,A
0033EF EA                MOV     A,R2
0033F0 3E                ADDC    A,R6
0033F1 FE                MOV     R6,A
0033F2 ED                MOV     A,R5
0033F3 39                ADDC    A,R1
0033F4 FD                MOV     R5,A
0033F5 EC                MOV     A,R4
0033F6 38                ADDC    A,R0
0033F7 FC                MOV     R4,A
0033F8 904E0F            MOV     DPTR,#ad_temp
0033FB 120332            LCALL   ?C?LSTXDATA
  326: 		ad_temp	+= R_AD_F7;
0033FE 904E0F            MOV     DPTR,#ad_temp
003401 E0                MOVX    A,@DPTR
003402 F8                MOV     R0,A
003403 A3                INC     DPTR
003404 E0                MOVX    A,@DPTR
003405 F9                MOV     R1,A
003406 A3                INC     DPTR
003407 E0                MOVX    A,@DPTR
003408 FA                MOV     R2,A
003409 A3                INC     DPTR
00340A E0                MOVX    A,@DPTR
00340B FB                MOV     R3,A
00340C 904C91            MOV     DPTR,#R_AD_F7
00340F E0                MOVX    A,@DPTR
003410 FE                MOV     R6,A
003411 A3                INC     DPTR
003412 E0                MOVX    A,@DPTR
003413 FF                MOV     R7,A
003414 E4                CLR     A
003415 FC                MOV     R4,A
003416 FD                MOV     R5,A
003417 EB                MOV     A,R3
003418 2F                ADD     A,R7
003419 FF                MOV     R7,A
00341A EA                MOV     A,R2
00341B 3E                ADDC    A,R6
00341C FE                MOV     R6,A
00341D ED                MOV     A,R5
00341E 39                ADDC    A,R1
00341F FD                MOV     R5,A
003420 EC                MOV     A,R4
003421 38                ADDC    A,R0
003422 FC                MOV     R4,A
003423 904E0F            MOV     DPTR,#ad_temp
003426 120332            LCALL   ?C?LSTXDATA
  327: 		ad_temp	+= R_AD_F8;
003429 904E0F            MOV     DPTR,#ad_temp
00342C E0                MOVX    A,@DPTR
00342D F8                MOV     R0,A
00342E A3                INC     DPTR
00342F E0                MOVX    A,@DPTR
003430 F9                MOV     R1,A
003431 A3                INC     DPTR
003432 E0                MOVX    A,@DPTR
003433 FA                MOV     R2,A
003434 A3                INC     DPTR
003435 E0                MOVX    A,@DPTR
003436 FB                MOV     R3,A
003437 904C93            MOV     DPTR,#R_AD_F8
00343A E0                MOVX    A,@DPTR
00343B FE                MOV     R6,A
00343C A3                INC     DPTR
00343D E0                MOVX    A,@DPTR
00343E FF                MOV     R7,A
00343F E4                CLR     A
003440 FC                MOV     R4,A
003441 FD                MOV     R5,A
003442 EB                MOV     A,R3
003443 2F                ADD     A,R7
003444 FF                MOV     R7,A
003445 EA                MOV     A,R2
003446 3E                ADDC    A,R6
003447 FE                MOV     R6,A
003448 ED                MOV     A,R5
003449 39                ADDC    A,R1
00344A FD                MOV     R5,A
00344B EC                MOV     A,R4
00344C 38                ADDC    A,R0
00344D FC                MOV     R4,A
00344E 904E0F            MOV     DPTR,#ad_temp
003451 120332            LCALL   ?C?LSTXDATA
  328: 
  329: 		R_AD_BUF = ad_temp / 8 ;
003454 E4                CLR     A
003455 7B08              MOV     R3,#08H
003457 FA                MOV     R2,A
003458 F9                MOV     R1,A
003459 F8                MOV     R0,A
00345A 904E0F            MOV     DPTR,#ad_temp
00345D E0                MOVX    A,@DPTR
00345E FC                MOV     R4,A
00345F A3                INC     DPTR
003460 E0                MOVX    A,@DPTR
003461 FD                MOV     R5,A
003462 A3                INC     DPTR
003463 E0                MOVX    A,@DPTR
003464 FE                MOV     R6,A
003465 A3                INC     DPTR
003466 E0                MOVX    A,@DPTR
003467 FF                MOV     R7,A
003468 120269            LCALL   ?C?ULDIV
00346B 904E0D            MOV     DPTR,#R_AD_BUF
00346E EE                MOV     A,R6
00346F F0                MOVX    @DPTR,A
003470 A3                INC     DPTR
003471 EF                MOV     A,R7
003472 F0                MOVX    @DPTR,A
  330: 		R_AD_BUF_OLD	=	R_AD_BUF;
003473 904C83            MOV     DPTR,#R_AD_BUF_OLD
003476 EE                MOV     A,R6
003477 F0                MOVX    @DPTR,A
003478 A3                INC     DPTR
003479 EF                MOV     A,R7
00347A F0                MOVX    @DPTR,A
  331: 		}
00347B         ?C0024?CS_SCALE_PROC:
  332: 	return	R_AD_BUF;
00347B 904E0D            MOV     DPTR,#R_AD_BUF
00347E E0                MOVX    A,@DPTR
00347F FE                MOV     R6,A
003480 A3                INC     DPTR
003481 E0                MOVX    A,@DPTR
003482 FF                MOV     R7,A
  333: }
003483 22                RET     
----- FUNCTION _CS_Scale_AdcFilter (END) -------


----- FUNCTION _CS_Scale_GetWeight (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  338: void CS_Scale_GetWeight(u16_t R_AD_BUF)
  339: {
003484 904DA0            MOV     DPTR,#R_AD_BUF
003487 EE                MOV     A,R6
003488 F0                MOVX    @DPTR,A
003489 A3                INC     DPTR
00348A EF                MOV     A,R7
00348B F0                MOVX    @DPTR,A
  340: 	u32_t	ad_temp;
  341: 	u16_t	ad_cal;
  342: 	u16_t	CaliDot1,CaliDot2,CaliDot3;
  343: 	
  344: 	CaliDot1 =CS_Scale_CaliProc(CaliProcGetCaliDot1);
00348C 7F02              MOV     R7,#02H
00348E 120A38            LCALL   _CS_Scale_CaliProc
003491 904DA8            MOV     DPTR,#CaliDot1
003494 EE                MOV     A,R6
003495 F0                MOVX    @DPTR,A
003496 A3                INC     DPTR
003497 EF                MOV     A,R7
003498 F0                MOVX    @DPTR,A
  345: 	CaliDot2 =CS_Scale_CaliProc(CaliProcGetCaliDot2);
003499 7F03              MOV     R7,#03H
00349B 120A38            LCALL   _CS_Scale_CaliProc
00349E 904DAA            MOV     DPTR,#CaliDot2
0034A1 EE                MOV     A,R6
0034A2 F0                MOVX    @DPTR,A
0034A3 A3                INC     DPTR
0034A4 EF                MOV     A,R7
0034A5 F0                MOVX    @DPTR,A
  346: 	CaliDot3 =CS_Scale_CaliProc(CaliProcGetCaliDot3);
0034A6 7F04              MOV     R7,#04H
0034A8 120A38            LCALL   _CS_Scale_CaliProc
0034AB 904DAC            MOV     DPTR,#CaliDot3
0034AE EE                MOV     A,R6
0034AF F0                MOVX    @DPTR,A
0034B0 A3                INC     DPTR
0034B1 EF                MOV     A,R7
0034B2 F0                MOVX    @DPTR,A
  347: 	
  348: 	if(R_AD_BUF <= CaliDot1 )
0034B3 904DA8            MOV     DPTR,#CaliDot1
0034B6 E0                MOVX    A,@DPTR
0034B7 FE                MOV     R6,A
0034B8 A3                INC     DPTR
0034B9 E0                MOVX    A,@DPTR
0034BA FF                MOV     R7,A
0034BB 904DA0            MOV     DPTR,#R_AD_BUF
0034BE E0                MOVX    A,@DPTR
0034BF FC                MOV     R4,A
0034C0 A3                INC     DPTR
0034C1 E0                MOVX    A,@DPTR
0034C2 FD                MOV     R5,A
0034C3 D3                SETB    C
0034C4 9F                SUBB    A,R7
0034C5 EC                MOV     A,R4
0034C6 9E                SUBB    A,R6
0034C7 5033              JNC     ?C0035?CS_SCALE_PROC
  349: 		{
  350: 		ad_temp = (u32_t)R_AD_BUF  * 5000;	
0034C9 7E13              MOV     R6,#013H
0034CB 7F88              MOV     R7,#088H
0034CD 1203C8            LCALL   ?C?LIMUL
0034D0 A3                INC     DPTR
0034D1 120332            LCALL   ?C?LSTXDATA
  351: 		R_UnitWeight.origin = ad_temp / CaliDot1;
0034D4 904DA8            MOV     DPTR,#CaliDot1
0034D7 E0                MOVX    A,@DPTR
0034D8 FE                MOV     R6,A
0034D9 A3                INC     DPTR
0034DA E0                MOVX    A,@DPTR
0034DB FF                MOV     R7,A
0034DC FB                MOV     R3,A
0034DD AA06              MOV     R2,AR6
0034DF E4                CLR     A
0034E0 F9                MOV     R1,A
0034E1 F8                MOV     R0,A
0034E2 904DA2            MOV     DPTR,#ad_temp
0034E5 E0                MOVX    A,@DPTR
0034E6 FC                MOV     R4,A
0034E7 A3                INC     DPTR
0034E8 E0                MOVX    A,@DPTR
0034E9 FD                MOV     R5,A
0034EA A3                INC     DPTR
0034EB E0                MOVX    A,@DPTR
0034EC FE                MOV     R6,A
0034ED A3                INC     DPTR
0034EE E0                MOVX    A,@DPTR
0034EF FF                MOV     R7,A
0034F0 120269            LCALL   ?C?ULDIV
0034F3 904CC9            MOV     DPTR,#R_UnitWeight
0034F6 EE                MOV     A,R6
0034F7 F0                MOVX    @DPTR,A
0034F8 A3                INC     DPTR
0034F9 EF                MOV     A,R7
0034FA F0                MOVX    @DPTR,A
0034FB 22                RET     
  352: 		return;
  353: 		}
0034FC         ?C0035?CS_SCALE_PROC:
  354: 	ad_cal = R_AD_BUF - CaliDot1;
0034FC 904DA8            MOV     DPTR,#CaliDot1
0034FF E0                MOVX    A,@DPTR
003500 FE                MOV     R6,A
003501 A3                INC     DPTR
003502 E0                MOVX    A,@DPTR
003503 FF                MOV     R7,A
003504 C3                CLR     C
003505 904DA1            MOV     DPTR,#R_AD_BUF+01H
003508 E0                MOVX    A,@DPTR
003509 9F                SUBB    A,R7
00350A FF                MOV     R7,A
00350B 904DA0            MOV     DPTR,#R_AD_BUF
00350E E0                MOVX    A,@DPTR
00350F 9E                SUBB    A,R6
003510 FE                MOV     R6,A
003511 904DA6            MOV     DPTR,#ad_cal
003514 F0                MOVX    @DPTR,A
003515 A3                INC     DPTR
003516 EF                MOV     A,R7
003517 F0                MOVX    @DPTR,A
  355: 
  356: 	if(ad_cal <=CaliDot2)
003518 C3                CLR     C
003519 904DAB            MOV     DPTR,#CaliDot2+01H
00351C E0                MOVX    A,@DPTR
00351D 9F                SUBB    A,R7
00351E 904DAA            MOV     DPTR,#CaliDot2
003521 E0                MOVX    A,@DPTR
003522 9E                SUBB    A,R6
003523 4043              JC      ?C0037?CS_SCALE_PROC
  357: 		{
  358: 		ad_temp = (u32_t)ad_cal  * 5000;	
003525 904DA6            MOV     DPTR,#ad_cal
003528 E0                MOVX    A,@DPTR
003529 FE                MOV     R6,A
00352A A3                INC     DPTR
00352B E0                MOVX    A,@DPTR
00352C FF                MOV     R7,A
00352D 7C13              MOV     R4,#013H
00352F 7D88              MOV     R5,#088H
003531 1203C8            LCALL   ?C?LIMUL
003534 904DA2            MOV     DPTR,#ad_temp
003537 120332            LCALL   ?C?LSTXDATA
  359: 		R_UnitWeight.origin = ad_temp / CaliDot2 +5000 ;
00353A 904DAA            MOV     DPTR,#CaliDot2
00353D E0                MOVX    A,@DPTR
00353E FE                MOV     R6,A
00353F A3                INC     DPTR
003540 E0                MOVX    A,@DPTR
003541 FF                MOV     R7,A
003542 FB                MOV     R3,A
003543 AA06              MOV     R2,AR6
003545 E4                CLR     A
003546 F9                MOV     R1,A
003547 F8                MOV     R0,A
003548 904DA2            MOV     DPTR,#ad_temp
00354B E0                MOVX    A,@DPTR
00354C FC                MOV     R4,A
00354D A3                INC     DPTR
00354E E0                MOVX    A,@DPTR
00354F FD                MOV     R5,A
003550 A3                INC     DPTR
003551 E0                MOVX    A,@DPTR
003552 FE                MOV     R6,A
003553 A3                INC     DPTR
003554 E0                MOVX    A,@DPTR
003555 FF                MOV     R7,A
003556 120269            LCALL   ?C?ULDIV
003559 EF                MOV     A,R7
00355A 2488              ADD     A,#088H
00355C FF                MOV     R7,A
00355D EE                MOV     A,R6
00355E 3413              ADDC    A,#013H
003560 904CC9            MOV     DPTR,#R_UnitWeight
003563 F0                MOVX    @DPTR,A
003564 A3                INC     DPTR
003565 EF                MOV     A,R7
003566 F0                MOVX    @DPTR,A
003567 22                RET     
  360: 		return;
  361: 		}
003568         ?C0037?CS_SCALE_PROC:
  362: 	
  363: 	ad_cal  = R_AD_BUF - CaliDot1 - CaliDot2 ;	
003568 904DA8            MOV     DPTR,#CaliDot1
00356B E0                MOVX    A,@DPTR
00356C FE                MOV     R6,A
00356D A3                INC     DPTR
00356E E0                MOVX    A,@DPTR
00356F FF                MOV     R7,A
003570 C3                CLR     C
003571 904DA1            MOV     DPTR,#R_AD_BUF+01H
003574 E0                MOVX    A,@DPTR
003575 9F                SUBB    A,R7
003576 FF                MOV     R7,A
003577 904DA0            MOV     DPTR,#R_AD_BUF
00357A E0                MOVX    A,@DPTR
00357B 9E                SUBB    A,R6
00357C FE                MOV     R6,A
00357D 904DAA            MOV     DPTR,#CaliDot2
003580 E0                MOVX    A,@DPTR
003581 FC                MOV     R4,A
003582 A3                INC     DPTR
003583 E0                MOVX    A,@DPTR
003584 FD                MOV     R5,A
003585 C3                CLR     C
003586 EF                MOV     A,R7
003587 9D                SUBB    A,R5
003588 FF                MOV     R7,A
003589 EE                MOV     A,R6
00358A 9C                SUBB    A,R4
00358B 904DA6            MOV     DPTR,#ad_cal
00358E F0                MOVX    @DPTR,A
00358F A3                INC     DPTR
003590 EF                MOV     A,R7
003591 F0                MOVX    @DPTR,A
  364: 	ad_temp = (u32_t)ad_cal  * 5000;	
003592 904DA6            MOV     DPTR,#ad_cal
003595 E0                MOVX    A,@DPTR
003596 FE                MOV     R6,A
003597 A3                INC     DPTR
003598 E0                MOVX    A,@DPTR
003599 FF                MOV     R7,A
00359A 7C13              MOV     R4,#013H
00359C 7D88              MOV     R5,#088H
00359E 1203C8            LCALL   ?C?LIMUL
0035A1 904DA2            MOV     DPTR,#ad_temp
0035A4 120332            LCALL   ?C?LSTXDATA
  365: 	R_UnitWeight.origin = ad_temp /CaliDot3 +10000 ;
0035A7 904DAC            MOV     DPTR,#CaliDot3
0035AA E0                MOVX    A,@DPTR
0035AB FE                MOV     R6,A
0035AC A3                INC     DPTR
0035AD E0                MOVX    A,@DPTR
0035AE FF                MOV     R7,A
0035AF FB                MOV     R3,A
0035B0 AA06              MOV     R2,AR6
0035B2 E4                CLR     A
0035B3 F9                MOV     R1,A
0035B4 F8                MOV     R0,A
0035B5 904DA2            MOV     DPTR,#ad_temp
0035B8 E0                MOVX    A,@DPTR
0035B9 FC                MOV     R4,A
0035BA A3                INC     DPTR
0035BB E0                MOVX    A,@DPTR
0035BC FD                MOV     R5,A
0035BD A3                INC     DPTR
0035BE E0                MOVX    A,@DPTR
0035BF FE                MOV     R6,A
0035C0 A3                INC     DPTR
0035C1 E0                MOVX    A,@DPTR
0035C2 FF                MOV     R7,A
0035C3 120269            LCALL   ?C?ULDIV
0035C6 EF                MOV     A,R7
0035C7 2410              ADD     A,#010H
0035C9 FF                MOV     R7,A
0035CA EE                MOV     A,R6
0035CB 3427              ADDC    A,#027H
0035CD 904CC9            MOV     DPTR,#R_UnitWeight
0035D0 F0                MOVX    @DPTR,A
0035D1 A3                INC     DPTR
0035D2 EF                MOV     A,R7
0035D3 F0                MOVX    @DPTR,A
  366: 
  367: 	
  368: }
0035D4 22                RET     
----- FUNCTION _CS_Scale_GetWeight (END) -------


----- FUNCTION _CS_Scale_LockProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  548: u8_t CS_Scale_LockProc(u8_t option)
  549: {
;---- Variable 'option' assigned to Register 'R7' ----
  550: 	static u8_t xdata B_Weight_Downing_Lock;		//下秤过程有重物在上面锁住
  551: 	
  552: 	if(option==SetDowningLock)
0035D5 EF                MOV     A,R7
0035D6 B40109            CJNE    A,#01H,?C0072?CS_SCALE_PROC
  553: 		{
  554: 		B_Weight_Downing_Lock =LockProcLock;
0035D9 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
0035DC 7403              MOV     A,#03H
0035DE F0                MOVX    @DPTR,A
  555: 		return 0;
0035DF 7F00              MOV     R7,#00H
0035E1 22                RET     
  556: 		}
0035E2         ?C0072?CS_SCALE_PROC:
  557: 
  558: 	if(option==GetIfLock)
0035E2 EF                MOV     A,R7
0035E3 B40206            CJNE    A,#02H,?C0074?CS_SCALE_PROC
  559: 		{
  560: 		return B_Weight_Downing_Lock;
0035E6 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
0035E9 E0                MOVX    A,@DPTR
0035EA FF                MOV     R7,A
0035EB 22                RET     
  561: 		}
0035EC         ?C0074?CS_SCALE_PROC:
  562: 	if(option==LockProcUnLock)
0035EC EF                MOV     A,R7
0035ED B40307            CJNE    A,#03H,?C0075?CS_SCALE_PROC
  563: 		{
  564: 		B_Weight_Downing_Lock =false;
0035F0 E4                CLR     A
0035F1 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
0035F4 F0                MOVX    @DPTR,A
  565: 		return 0;
0035F5 FF                MOV     R7,A
0035F6 22                RET     
  566: 		}
0035F7         ?C0075?CS_SCALE_PROC:
  567: 	
  568: 	if(CS_Scale_ZeroProc(GetZeroState,0)==true)		//处于零位
0035F7 E4                CLR     A
0035F8 FD                MOV     R5,A
0035F9 FC                MOV     R4,A
0035FA 7F03              MOV     R7,#03H
0035FC 1212F1            LCALL   _CS_Scale_ZeroProc
0035FF EF                MOV     A,R7
003600 6401              XRL     A,#01H
003602 4E                ORL     A,R6
003603 701B              JNZ     ?C0076?CS_SCALE_PROC
  569: 		{
  570: 		B_Weight_Downing_Lock &=LockProcDownUnLock ;
003605 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
003608 E0                MOVX    A,@DPTR
003609 54FD              ANL     A,#0FDH
00360B F0                MOVX    @DPTR,A
  571: 		
  572: 		if(B_Weight_Downing_Lock&LockProcZeroLock)
00360C 30E031            JNB     ACC.0,?C0078?CS_SCALE_PROC
  573: 		R_UnitWeight.origin = R_Weight_Lock;
00360F 904CC0            MOV     DPTR,#R_Weight_Lock
003612 E0                MOVX    A,@DPTR
003613 FF                MOV     R7,A
003614 A3                INC     DPTR
003615 E0                MOVX    A,@DPTR
003616 904CC9            MOV     DPTR,#R_UnitWeight
003619 CF                XCH     A,R7
00361A F0                MOVX    @DPTR,A
00361B A3                INC     DPTR
00361C EF                MOV     A,R7
00361D F0                MOVX    @DPTR,A
  574: 		}
00361E 8020              SJMP    ?C0078?CS_SCALE_PROC
003620         ?C0076?CS_SCALE_PROC:
  575: 	else
  576: 		{
  577: 		if(B_Weight_Downing_Lock&LockProcDownLock)
003620 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
003623 E0                MOVX    A,@DPTR
003624 FF                MOV     R7,A
003625 30E111            JNB     ACC.1,?C0079?CS_SCALE_PROC
  578: 			R_UnitWeight.origin = R_Weight_Lock;
003628 904CC0            MOV     DPTR,#R_Weight_Lock
00362B E0                MOVX    A,@DPTR
00362C FD                MOV     R5,A
00362D A3                INC     DPTR
00362E E0                MOVX    A,@DPTR
00362F 904CC9            MOV     DPTR,#R_UnitWeight
003632 CD                XCH     A,R5
003633 F0                MOVX    @DPTR,A
003634 A3                INC     DPTR
003635 ED                MOV     A,R5
003636 F0                MOVX    @DPTR,A
003637 8007              SJMP    ?C0078?CS_SCALE_PROC
003639         ?C0079?CS_SCALE_PROC:
  579: 		else
  580: 			B_Weight_Downing_Lock &= LockProcZeroUnLock;
003639 EF                MOV     A,R7
00363A 54FE              ANL     A,#0FEH
00363C 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
00363F F0                MOVX    @DPTR,A
  581: 		}
003640         ?C0078?CS_SCALE_PROC:
  582: 
  583: 	return 0;
003640 7F00              MOV     R7,#00H
  584: }
003642 22                RET     
----- FUNCTION _CS_Scale_LockProc (END) -------


----- FUNCTION _CS_Scale_JudgeOverLoad (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  646: u8_t CS_Scale_JudgeOverLoad(u8_t option)
  647: {
;---- Variable 'option' assigned to Register 'R7' ----
  648: 
  649: 	static	u8_t	  xdata R_Weight_OverLoadTimes;
  650: 	static	u8_t  xdata  B_Weight_OverLoad;			//超载标志
  651: 	if(option==ResetOverLoad)
003643 EF                MOV     A,R7
003644 B40209            CJNE    A,#02H,?C0085?CS_SCALE_PROC
  652: 		{
  653: 		R_Weight_OverLoadTimes = 0;
003647 E4                CLR     A
003648 904CA0            MOV     DPTR,#R_Weight_OverLoadTimes
00364B F0                MOVX    @DPTR,A
  654: 		B_Weight_OverLoad = false;
00364C A3                INC     DPTR
00364D F0                MOVX    @DPTR,A
  655: 		return 0;
00364E FF                MOV     R7,A
00364F 22                RET     
  656: 		}
003650         ?C0085?CS_SCALE_PROC:
  657: 	
  658: 	if(R_UnitWeight.origin > CS_Scale_MaxWeight)
003650 D3                SETB    C
003651 904CCA            MOV     DPTR,#R_UnitWeight+01H
003654 E0                MOVX    A,@DPTR
003655 94C4              SUBB    A,#0C4H
003657 904CC9            MOV     DPTR,#R_UnitWeight
00365A E0                MOVX    A,@DPTR
00365B 943B              SUBB    A,#03BH
00365D 4006              JC      ?C0087?CS_SCALE_PROC
  659: 		R_Weight_OverLoadTimes++;
00365F 904CA0            MOV     DPTR,#R_Weight_OverLoadTimes
003662 E0                MOVX    A,@DPTR
003663 04                INC     A
003664 F0                MOVX    @DPTR,A
003665         ?C0087?CS_SCALE_PROC:
  660: 	if(R_Weight_OverLoadTimes >=2)
003665 904CA0            MOV     DPTR,#R_Weight_OverLoadTimes
003668 E0                MOVX    A,@DPTR
003669 C3                CLR     C
00366A 9402              SUBB    A,#02H
00366C 400E              JC      ?C0088?CS_SCALE_PROC
  661: 		{
  662: 		R_Weight_OverLoadTimes = 2;
00366E 7402              MOV     A,#02H
003670 F0                MOVX    @DPTR,A
  663: 		B_Weight_OverLoad = true;
003671 A3                INC     DPTR
003672 14                DEC     A
003673 F0                MOVX    @DPTR,A
  664: 		R_Display_Err=CS_ScaleDisplay_L_err;
003674 904CC2            MOV     DPTR,#R_Display_Err
003677 7404              MOV     A,#04H
003679 F0                MOVX    @DPTR,A
  665: 		}
00367A 8005              SJMP    ?C0089?CS_SCALE_PROC
00367C         ?C0088?CS_SCALE_PROC:
  666: 	else
  667: 		B_Weight_OverLoad = false;
00367C E4                CLR     A
00367D 904CA1            MOV     DPTR,#B_Weight_OverLoad
003680 F0                MOVX    @DPTR,A
003681         ?C0089?CS_SCALE_PROC:
  668: 
  669: 	if(option==GetIfOverLoad)
003681 EF                MOV     A,R7
003682 B40106            CJNE    A,#01H,?C0090?CS_SCALE_PROC
  670: 		return B_Weight_OverLoad;
003685 904CA1            MOV     DPTR,#B_Weight_OverLoad
003688 E0                MOVX    A,@DPTR
003689 FF                MOV     R7,A
00368A 22                RET     
00368B         ?C0090?CS_SCALE_PROC:
  671: 	
  672: 		return 0;
00368B 7F00              MOV     R7,#00H
  673: }
00368D 22                RET     
----- FUNCTION _CS_Scale_JudgeOverLoad (END) -------


----- FUNCTION _CS_MemoryWeightClear_Timer (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  894: void CS_MemoryWeightClear_Timer(u8_t option)
  895: {
;---- Variable 'option' assigned to Register 'R7' ----
  896: 	static u8_t xdata timecount; 				//计时变量
  897: 	static u8_t xdata B_Timeout;
  898: 
  899: 	if(option==StartClearMemWeightTimer)
00368E EF                MOV     A,R7
00368F B40107            CJNE    A,#01H,?C0122?CS_SCALE_PROC
  900: 		{
  901: 		timecount=0;
003692 E4                CLR     A
003693 904CA9            MOV     DPTR,#timecount
003696 F0                MOVX    @DPTR,A
  902: 		B_Timeout = false;
003697 A3                INC     DPTR
003698 F0                MOVX    @DPTR,A
  903: 		}
003699         ?C0122?CS_SCALE_PROC:
  904: 
  905: 	if(option==MemWeightTimerInc)
003699 EF                MOV     A,R7
00369A B4020C            CJNE    A,#02H,?C0123?CS_SCALE_PROC
  906: 		{
  907: 		if(timecount<255 ) 
00369D 904CA9            MOV     DPTR,#timecount
0036A0 E0                MOVX    A,@DPTR
0036A1 C3                CLR     C
0036A2 94FF              SUBB    A,#0FFH
0036A4 5003              JNC     ?C0123?CS_SCALE_PROC
  908: 		timecount++;
0036A6 E0                MOVX    A,@DPTR
0036A7 04                INC     A
0036A8 F0                MOVX    @DPTR,A
  909: 		}
0036A9         ?C0123?CS_SCALE_PROC:
  910: 	
  911: 	if(B_Timeout == false)
0036A9 904CAA            MOV     DPTR,#B_Timeout
0036AC E0                MOVX    A,@DPTR
0036AD 7014              JNZ     ?C0127?CS_SCALE_PROC
  912: 		{
  913: 		if(timecount>SoftTimerTimeOut)
0036AF 904CA9            MOV     DPTR,#timecount
0036B2 E0                MOVX    A,@DPTR
0036B3 D3                SETB    C
0036B4 9496              SUBB    A,#096H
0036B6 400B              JC      ?C0127?CS_SCALE_PROC
  914: 			{
  915: 			B_Timeout = true;
0036B8 A3                INC     DPTR
0036B9 7401              MOV     A,#01H
0036BB F0                MOVX    @DPTR,A
  916: 			R_Weight_Mem = 0;	//时间到清记忆重量
0036BC E4                CLR     A
0036BD 904CC3            MOV     DPTR,#R_Weight_Mem
0036C0 F0                MOVX    @DPTR,A
0036C1 A3                INC     DPTR
0036C2 F0                MOVX    @DPTR,A
  917: 			}
  918: 		}
  919: }
0036C3         ?C0127?CS_SCALE_PROC:
0036C3 22                RET     
----- FUNCTION _CS_MemoryWeightClear_Timer (END) -------


----- FUNCTION CS_1186Com_ReadMacAdress_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   86: void CS_1186Com_ReadMacAdress_Proc(void)
   87: {
   88: 	u8_t i;
   89: 	u8_t xdata * ptr;
   90: 
   91: 	i=0;
0036C4 E4                CLR     A
0036C5 904E4B            MOV     DPTR,#i
0036C8 F0                MOVX    @DPTR,A
   92: 	ptr =&i;
0036C9 A3                INC     DPTR
0036CA 744E              MOV     A,#HIGH i
0036CC F0                MOVX    @DPTR,A
0036CD A3                INC     DPTR
0036CE 744B              MOV     A,#LOW i
0036D0 F0                MOVX    @DPTR,A
   93: 	
   94: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadOtp)
0036D1 904D55            MOV     DPTR,#R_Weight_Com_Coo
0036D4 E0                MOVX    A,@DPTR
0036D5 B4842D            CJNE    A,#084H,?C0014?CS_COMMTO1186
   95: 		{
   96: 		uartTxBuf[0]=6;		//read 6 byte MacAdress
0036D8 904D58            MOV     DPTR,#uartTxBuf
0036DB 7406              MOV     A,#06H
0036DD F0                MOVX    @DPTR,A
   97: 		uartTxBuf[1]=0xF7;	//OTP  adress low 8bits
0036DE A3                INC     DPTR
0036DF 74F7              MOV     A,#0F7H
0036E1 F0                MOVX    @DPTR,A
   98: 		uartTxBuf[2]=0x0F;	//OTP  adress high 8bits
0036E2 A3                INC     DPTR
0036E3 740F              MOV     A,#0FH
0036E5 F0                MOVX    @DPTR,A
   99: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadOtp,uartTxBuf);
0036E6 7B01              MOV     R3,#01H
0036E8 7A4D              MOV     R2,#HIGH uartTxBuf
0036EA 7958              MOV     R1,#LOW uartTxBuf
0036EC 7F84              MOV     R7,#084H
0036EE 1224C4            LCALL   _CS_CommTo1186_SendCmd
  100: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadOtp;
0036F1 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
0036F4 7484              MOV     A,#084H
0036F6 F0                MOVX    @DPTR,A
  101: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadOtpStandby;
0036F7 904D55            MOV     DPTR,#R_Weight_Com_Coo
0036FA 7405              MOV     A,#05H
0036FC F0                MOVX    @DPTR,A
  102: 		uartTimeoutCnt=0;
0036FD E4                CLR     A
0036FE 904D68            MOV     DPTR,#uartTimeoutCnt
003701 F0                MOVX    @DPTR,A
  103: 		YC_UARTClearBuffer();
003702 120592            LCALL   YC_UARTClearBuffer
  104: 		}
003705         ?C0014?CS_COMMTO1186:
  105: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadOtpStandby)
003705 904D55            MOV     DPTR,#R_Weight_Com_Coo
003708 E0                MOVX    A,@DPTR
003709 6405              XRL     A,#05H
00370B 706A              JNZ     ?C0019?CS_COMMTO1186
  106: 		{
  107: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 11) == 11)
00370D 7B01              MOV     R3,#01H
00370F 7A4D              MOV     R2,#HIGH uartRcvBuf
003711 7945              MOV     R1,#LOW uartRcvBuf
003713 7D0B              MOV     R5,#0BH
003715 FC                MOV     R4,A
003716 1207A8            LCALL   _YC_UARTReciveDataExpected
003719 EF                MOV     A,R7
00371A 640B              XRL     A,#0BH
00371C 4E                ORL     A,R6
00371D 7058              JNZ     ?C0019?CS_COMMTO1186
  108: 			{
  109: 			if(generateChecksum(uartRcvBuf,10) == uartRcvBuf[10] &&
00371F 7B01              MOV     R3,#01H
003721 7A4D              MOV     R2,#HIGH uartRcvBuf
003723 7945              MOV     R1,#LOW uartRcvBuf
003725 7D0A              MOV     R5,#0AH
003727 1217F4            LCALL   _generateChecksum
00372A 904D4F            MOV     DPTR,#uartRcvBuf+0AH
00372D E0                MOVX    A,@DPTR
00372E 6F                XRL     A,R7
00372F 7040              JNZ     ?C0017?CS_COMMTO1186
003731 904D47            MOV     DPTR,#uartRcvBuf+02H
003734 E0                MOVX    A,@DPTR
003735 6410              XRL     A,#010H
003737 7038              JNZ     ?C0017?CS_COMMTO1186
003739 A3                INC     DPTR
00373A E0                MOVX    A,@DPTR
00373B B48433            CJNE    A,#084H,?C0017?CS_COMMTO1186
  110: 			uartRcvBuf[2] == UART_EVENT_OK &&
  111: 			uartRcvBuf[3] == CS_CommTo1186_ReadOtp)
  112: 				{	
  113: 				//slave_state = SLAVE_ST_SET_PARAM;
  114: 				//R_Debug_temp= uartRcvBuf[5];	//测试用
  115: 
  116: 				//数据放错地址，部分数据手动赋值
  117: 				uartRcvBuf[9]= uartRcvBuf[6];
00373E 904D4B            MOV     DPTR,#uartRcvBuf+06H
003741 E0                MOVX    A,@DPTR
003742 904D4E            MOV     DPTR,#uartRcvBuf+09H
003745 F0                MOVX    @DPTR,A
  118: 				uartRcvBuf[8]=0x55;
003746 904D4D            MOV     DPTR,#uartRcvBuf+08H
003749 7455              MOV     A,#055H
00374B F0                MOVX    @DPTR,A
  119: 				uartRcvBuf[7]=uartRcvBuf[5];
00374C 904D4A            MOV     DPTR,#uartRcvBuf+05H
00374F E0                MOVX    A,@DPTR
003750 904D4C            MOV     DPTR,#uartRcvBuf+07H
003753 F0                MOVX    @DPTR,A
  120: 				uartRcvBuf[6]=0xbe;
003754 904D4B            MOV     DPTR,#uartRcvBuf+06H
003757 74BE              MOV     A,#0BEH
003759 F0                MOVX    @DPTR,A
  121: 				uartRcvBuf[5]=uartRcvBuf[4];
00375A 904D49            MOV     DPTR,#uartRcvBuf+04H
00375D E0                MOVX    A,@DPTR
00375E A3                INC     DPTR
00375F F0                MOVX    @DPTR,A
  122: 				uartRcvBuf[4]=0x08;
003760 904D49            MOV     DPTR,#uartRcvBuf+04H
003763 7408              MOV     A,#08H
003765 F0                MOVX    @DPTR,A
  123: 
  124: 				/*
  125: 				xmemcpy(mem_le_lap,&uartRcvBuf[4],6);
  126: 				if((*mem_adv_lap_ptr) != 0) 
  127: 					{
  128: 					for(i=0;i<6;i++) 
  129: 						{
  130: 						ptr = (u8_t xdata *)(ESWAP(*mem_adv_lap_ptr)+i);
  131: 						*ptr= uartRcvBuf[9-i];
  132: 						}
  133: 					}
  134: 				*/
  135: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
003766 E4                CLR     A
003767 904D55            MOV     DPTR,#R_Weight_Com_Coo
00376A F0                MOVX    @DPTR,A
  136: 				R_Weight_Com_Coo.sucess=true;
00376B 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
00376E 04                INC     A
00376F F0                MOVX    @DPTR,A
  137: 				}
003770 22                RET     
003771         ?C0017?CS_COMMTO1186:
  138: 			else
  139: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
003771 904D68            MOV     DPTR,#uartTimeoutCnt
003774 7415              MOV     A,#015H
003776 F0                MOVX    @DPTR,A
  140: 			}
  141: 		}
  142: }
003777         ?C0019?CS_COMMTO1186:
003777 22                RET     
----- FUNCTION CS_1186Com_ReadMacAdress_Proc (END) -------


----- FUNCTION CS_1186Com_ReadAdc_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  145: void CS_1186Com_ReadAdc_Proc(void)
  146: {
  147: 	u32_t	data_rec;
  148: 	
  149: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAd)
003778 904D55            MOV     DPTR,#R_Weight_Com_Coo
00377B E0                MOVX    A,@DPTR
00377C B4801F            CJNE    A,#080H,?C0020?CS_COMMTO1186
  150: 		{
  151: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadAd,0);
00377F 7B00              MOV     R3,#00H
003781 7A00              MOV     R2,#00H
003783 7900              MOV     R1,#00H
003785 7F80              MOV     R7,#080H
003787 1224C4            LCALL   _CS_CommTo1186_SendCmd
  152: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadAd;
00378A 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
00378D 7480              MOV     A,#080H
00378F F0                MOVX    @DPTR,A
  153: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadAdStandby;
003790 904D55            MOV     DPTR,#R_Weight_Com_Coo
003793 7401              MOV     A,#01H
003795 F0                MOVX    @DPTR,A
  154: 		uartTimeoutCnt=0;
003796 E4                CLR     A
003797 904D68            MOV     DPTR,#uartTimeoutCnt
00379A F0                MOVX    @DPTR,A
  155: 		YC_UARTClearBuffer();
00379B 120592            LCALL   YC_UARTClearBuffer
  156: 		}
00379E         ?C0020?CS_COMMTO1186:
  157: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAdStandby)
00379E 904D55            MOV     DPTR,#R_Weight_Com_Coo
0037A1 E0                MOVX    A,@DPTR
0037A2 6401              XRL     A,#01H
0037A4 6003              JZ      $ + 5H
0037A6 02384F            LJMP    ?C0028?CS_COMMTO1186
  158: 		{						
  159: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 9)==9)
0037A9 7B01              MOV     R3,#01H
0037AB 7A4D              MOV     R2,#HIGH uartRcvBuf
0037AD 7945              MOV     R1,#LOW uartRcvBuf
0037AF 7D09              MOV     R5,#09H
0037B1 FC                MOV     R4,A
0037B2 1207A8            LCALL   _YC_UARTReciveDataExpected
0037B5 EF                MOV     A,R7
0037B6 6409              XRL     A,#09H
0037B8 4E                ORL     A,R6
0037B9 6003              JZ      $ + 5H
0037BB 02384F            LJMP    ?C0028?CS_COMMTO1186
  160: 			{						
  161: 			if(uartRcvBuf[3] == CS_CommTo1186_ReadAd)   
0037BE 904D48            MOV     DPTR,#uartRcvBuf+03H
0037C1 E0                MOVX    A,@DPTR
0037C2 6480              XRL     A,#080H
0037C4 6003              JZ      $ + 5H
0037C6 023849            LJMP    ?C0023?CS_COMMTO1186
  162: 				{
  163: 				
  164: 				
  165: 				R_1186sys_state = uartRcvBuf[7];
0037C9 904D4C            MOV     DPTR,#uartRcvBuf+07H
0037CC E0                MOVX    A,@DPTR
0037CD 904CDA            MOV     DPTR,#R_1186sys_state
0037D0 F0                MOVX    @DPTR,A
  166: 
  167: 				if(R_1186sys_state&0x08)			//AD数据更新标志
0037D1 30E35C            JNB     ACC.3,?C0024?CS_COMMTO1186
  168: 					{
  169: 					B_Weight_AdOk = true;
0037D4 904CD7            MOV     DPTR,#B_Weight_AdOk
0037D7 7401              MOV     A,#01H
0037D9 F0                MOVX    @DPTR,A
  170: 					data_rec = uartRcvBuf[4];
0037DA 904D49            MOV     DPTR,#uartRcvBuf+04H
0037DD E0                MOVX    A,@DPTR
0037DE FF                MOV     R7,A
0037DF E4                CLR     A
0037E0 FC                MOV     R4,A
0037E1 FD                MOV     R5,A
0037E2 FE                MOV     R6,A
;---- Variable 'data_rec' assigned to Register 'R4/R5/R6/R7' ----
  171: 					data_rec = (data_rec<<8) + uartRcvBuf[5];
0037E3 7808              MOV     R0,#08H
0037E5 12031F            LCALL   ?C?LSHL
0037E8 A804              MOV     R0,AR4
0037EA A905              MOV     R1,AR5
0037EC AA06              MOV     R2,AR6
0037EE AB07              MOV     R3,AR7
0037F0 A3                INC     DPTR
0037F1 E0                MOVX    A,@DPTR
0037F2 FF                MOV     R7,A
0037F3 E4                CLR     A
0037F4 FC                MOV     R4,A
0037F5 FD                MOV     R5,A
0037F6 FE                MOV     R6,A
0037F7 EB                MOV     A,R3
0037F8 2F                ADD     A,R7
0037F9 FF                MOV     R7,A
0037FA EE                MOV     A,R6
0037FB 3A                ADDC    A,R2
0037FC FE                MOV     R6,A
0037FD ED                MOV     A,R5
0037FE 39                ADDC    A,R1
0037FF FD                MOV     R5,A
003800 EC                MOV     A,R4
003801 38                ADDC    A,R0
003802 FC                MOV     R4,A
  172: 					data_rec = (data_rec<<8) + uartRcvBuf[6];
003803 7808              MOV     R0,#08H
003805 12031F            LCALL   ?C?LSHL
003808 A804              MOV     R0,AR4
00380A A905              MOV     R1,AR5
00380C AA06              MOV     R2,AR6
00380E AB07              MOV     R3,AR7
003810 A3                INC     DPTR
003811 E0                MOVX    A,@DPTR
003812 FF                MOV     R7,A
003813 E4                CLR     A
003814 FC                MOV     R4,A
003815 FD                MOV     R5,A
003816 FE                MOV     R6,A
003817 EB                MOV     A,R3
003818 2F                ADD     A,R7
003819 FF                MOV     R7,A
00381A EE                MOV     A,R6
00381B 3A                ADDC    A,R2
00381C FE                MOV     R6,A
00381D ED                MOV     A,R5
00381E 39                ADDC    A,R1
00381F FD                MOV     R5,A
003820 EC                MOV     A,R4
003821 38                ADDC    A,R0
003822 FC                MOV     R4,A
  173: 					R_AD_Original =data_rec >> 6;	
003823 7806              MOV     R0,#06H
003825 12030C            LCALL   ?C?ULSHR
003828 904CD8            MOV     DPTR,#R_AD_Original
00382B EE                MOV     A,R6
00382C F0                MOVX    @DPTR,A
00382D A3                INC     DPTR
00382E EF                MOV     A,R7
00382F F0                MOVX    @DPTR,A
  174: 					}
003830         ?C0024?CS_COMMTO1186:
  175: 				
  176: 				if(R_Scale_state==CS_Scale_state_init)
003830 904CC5            MOV     DPTR,#R_Scale_state
003833 E0                MOVX    A,@DPTR
003834 7006              JNZ     ?C0025?CS_COMMTO1186
  177: 					R_Weight_Com_Coo.now = CS_CommTo1186_Null;
003836 904D55            MOV     DPTR,#R_Weight_Com_Coo
003839 F0                MOVX    @DPTR,A
00383A 8006              SJMP    ?C0026?CS_COMMTO1186
00383C         ?C0025?CS_COMMTO1186:
  178: 				else
  179: 					R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplay;
00383C 904D55            MOV     DPTR,#R_Weight_Com_Coo
00383F 74E0              MOV     A,#0E0H
003841 F0                MOVX    @DPTR,A
003842         ?C0026?CS_COMMTO1186:
  180: 				R_Weight_Com_Coo.sucess=true;
003842 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
003845 7401              MOV     A,#01H
003847 F0                MOVX    @DPTR,A
  181: 				
  182: 				}
003848 22                RET     
003849         ?C0023?CS_COMMTO1186:
  183: 			else
  184: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
003849 904D68            MOV     DPTR,#uartTimeoutCnt
00384C 7415              MOV     A,#015H
00384E F0                MOVX    @DPTR,A
  185: 			}
  186: 		}
  187: }
00384F         ?C0028?CS_COMMTO1186:
00384F 22                RET     
----- FUNCTION CS_1186Com_ReadAdc_Proc (END) -------


----- FUNCTION CS_1186Com_ReadAdZero_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  359: void CS_1186Com_ReadAdZero_Proc(void)
  360: {
  361: 	u32_t	data_rec;
  362: 	u16_t	R_AD_Zero;
  363: 	
  364: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAdZero)
003850 904D55            MOV     DPTR,#R_Weight_Com_Coo
003853 E0                MOVX    A,@DPTR
003854 B4851F            CJNE    A,#085H,?C0055?CS_COMMTO1186
  365: 		{
  366: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadAdZero,0);
003857 7B00              MOV     R3,#00H
003859 7A00              MOV     R2,#00H
00385B 7900              MOV     R1,#00H
00385D 7F85              MOV     R7,#085H
00385F 1224C4            LCALL   _CS_CommTo1186_SendCmd
  367: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadAdZero;
003862 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
003865 7485              MOV     A,#085H
003867 F0                MOVX    @DPTR,A
  368: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadAdZeroStandby;
003868 904D55            MOV     DPTR,#R_Weight_Com_Coo
00386B 7406              MOV     A,#06H
00386D F0                MOVX    @DPTR,A
  369: 		uartTimeoutCnt=0;
00386E E4                CLR     A
00386F 904D68            MOV     DPTR,#uartTimeoutCnt
003872 F0                MOVX    @DPTR,A
  370: 		YC_UARTClearBuffer();
003873 120592            LCALL   YC_UARTClearBuffer
  371: 		}
003876         ?C0055?CS_COMMTO1186:
  372: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAdZeroStandby)
003876 904D55            MOV     DPTR,#R_Weight_Com_Coo
003879 E0                MOVX    A,@DPTR
00387A 6406              XRL     A,#06H
00387C 6002              JZ      $ + 4H
00387E 2100              AJMP    ?C0060?CS_COMMTO1186
  373: 		{						
  374: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 8)==8)
003880 7B01              MOV     R3,#01H
003882 7A4D              MOV     R2,#HIGH uartRcvBuf
003884 7945              MOV     R1,#LOW uartRcvBuf
003886 7D08              MOV     R5,#08H
003888 FC                MOV     R4,A
003889 1207A8            LCALL   _YC_UARTReciveDataExpected
00388C EF                MOV     A,R7
00388D 6408              XRL     A,#08H
00388F 4E                ORL     A,R6
003890 706E              JNZ     ?C0060?CS_COMMTO1186
  375: 			{						
  376: 			if(uartRcvBuf[3] == CS_CommTo1186_ReadAdZero)   
003892 904D48            MOV     DPTR,#uartRcvBuf+03H
003895 E0                MOVX    A,@DPTR
003896 6485              XRL     A,#085H
003898 7060              JNZ     ?C0058?CS_COMMTO1186
  377: 				{
  378: 				data_rec = uartRcvBuf[4];
00389A A3                INC     DPTR
00389B E0                MOVX    A,@DPTR
00389C FF                MOV     R7,A
00389D E4                CLR     A
00389E FC                MOV     R4,A
00389F FD                MOV     R5,A
0038A0 FE                MOV     R6,A
;---- Variable 'data_rec' assigned to Register 'R4/R5/R6/R7' ----
  379: 				data_rec = (data_rec<<8) + uartRcvBuf[5];
0038A1 7808              MOV     R0,#08H
0038A3 12031F            LCALL   ?C?LSHL
0038A6 A804              MOV     R0,AR4
0038A8 A905              MOV     R1,AR5
0038AA AA06              MOV     R2,AR6
0038AC AB07              MOV     R3,AR7
0038AE A3                INC     DPTR
0038AF E0                MOVX    A,@DPTR
0038B0 FF                MOV     R7,A
0038B1 E4                CLR     A
0038B2 FC                MOV     R4,A
0038B3 FD                MOV     R5,A
0038B4 FE                MOV     R6,A
0038B5 EB                MOV     A,R3
0038B6 2F                ADD     A,R7
0038B7 FF                MOV     R7,A
0038B8 EE                MOV     A,R6
0038B9 3A                ADDC    A,R2
0038BA FE                MOV     R6,A
0038BB ED                MOV     A,R5
0038BC 39                ADDC    A,R1
0038BD FD                MOV     R5,A
0038BE EC                MOV     A,R4
0038BF 38                ADDC    A,R0
0038C0 FC                MOV     R4,A
  380: 				data_rec = (data_rec<<8) + uartRcvBuf[6];
0038C1 7808              MOV     R0,#08H
0038C3 12031F            LCALL   ?C?LSHL
0038C6 A804              MOV     R0,AR4
0038C8 A905              MOV     R1,AR5
0038CA AA06              MOV     R2,AR6
0038CC AB07              MOV     R3,AR7
0038CE A3                INC     DPTR
0038CF E0                MOVX    A,@DPTR
0038D0 FF                MOV     R7,A
0038D1 E4                CLR     A
0038D2 FC                MOV     R4,A
0038D3 FD                MOV     R5,A
0038D4 FE                MOV     R6,A
0038D5 EB                MOV     A,R3
0038D6 2F                ADD     A,R7
0038D7 FF                MOV     R7,A
0038D8 EE                MOV     A,R6
0038D9 3A                ADDC    A,R2
0038DA FE                MOV     R6,A
0038DB ED                MOV     A,R5
0038DC 39                ADDC    A,R1
0038DD FD                MOV     R5,A
0038DE EC                MOV     A,R4
0038DF 38                ADDC    A,R0
0038E0 FC                MOV     R4,A
  381: 				R_AD_Zero =data_rec >> 6;	
0038E1 7806              MOV     R0,#06H
0038E3 12030C            LCALL   ?C?ULSHR
;---- Variable 'R_AD_Zero' assigned to Register 'R6/R7' ----
  382: 				CS_Scale_ZeroProc(SetRunningZero,R_AD_Zero);
0038E6 AD07              MOV     R5,AR7
0038E8 AC06              MOV     R4,AR6
0038EA 7F06              MOV     R7,#06H
0038EC 1212F1            LCALL   _CS_Scale_ZeroProc
  383: 				
  384: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
0038EF E4                CLR     A
0038F0 904D55            MOV     DPTR,#R_Weight_Com_Coo
0038F3 F0                MOVX    @DPTR,A
  385: 				R_Weight_Com_Coo.sucess=true;
0038F4 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
0038F7 04                INC     A
0038F8 F0                MOVX    @DPTR,A
  386: 				
  387: 				}
0038F9 22                RET     
0038FA         ?C0058?CS_COMMTO1186:
  388: 			else
  389: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
0038FA 904D68            MOV     DPTR,#uartTimeoutCnt
0038FD 7415              MOV     A,#015H
0038FF F0                MOVX    @DPTR,A
  390: 			}
  391: 		}
  392: }
003900         ?C0060?CS_COMMTO1186:
003900 22                RET     
----- FUNCTION CS_1186Com_ReadAdZero_Proc (END) -------


----- FUNCTION _CS_CommTo1186_Xor (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  411: u8_t CS_CommTo1186_Xor(u8_t * buf,u8_t len)
  412: {
003901 904E4E            MOV     DPTR,#buf
003904 EB                MOV     A,R3
003905 F0                MOVX    @DPTR,A
003906 A3                INC     DPTR
003907 EA                MOV     A,R2
003908 F0                MOVX    @DPTR,A
003909 A3                INC     DPTR
00390A E9                MOV     A,R1
00390B F0                MOVX    @DPTR,A
;---- Variable 'len' assigned to Register 'R5' ----
  413: 	u8_t	i;
  414: 	for(i=0;i<len;i++)
;---- Variable 'i' assigned to Register 'R7' ----
00390C E4                CLR     A
00390D FF                MOV     R7,A
00390E         ?C0063?CS_COMMTO1186:
00390E EF                MOV     A,R7
00390F C3                CLR     C
003910 9D                SUBB    A,R5
003911 5035              JNC     ?C0064?CS_COMMTO1186
  415: 		{
  416: 		*(buf+9) = *(buf+9) ^	*(buf+i);
003913 904E4E            MOV     DPTR,#buf
003916 E0                MOVX    A,@DPTR
003917 FB                MOV     R3,A
003918 A3                INC     DPTR
003919 E0                MOVX    A,@DPTR
00391A FA                MOV     R2,A
00391B A3                INC     DPTR
00391C E0                MOVX    A,@DPTR
00391D 2409              ADD     A,#09H
00391F F9                MOV     R1,A
003920 E4                CLR     A
003921 3A                ADDC    A,R2
003922 FA                MOV     R2,A
003923 C002              PUSH    AR2
003925 C001              PUSH    AR1
003927 1200F9            LCALL   ?C?CLDPTR
00392A FE                MOV     R6,A
00392B 904E4E            MOV     DPTR,#buf
00392E E0                MOVX    A,@DPTR
00392F A3                INC     DPTR
003930 E0                MOVX    A,@DPTR
003931 FA                MOV     R2,A
003932 A3                INC     DPTR
003933 E0                MOVX    A,@DPTR
003934 F9                MOV     R1,A
003935 8F82              MOV     DPL,R7
003937 758300            MOV     DPH,#00H
00393A 120112            LCALL   ?C?CLDOPTR
00393D 6E                XRL     A,R6
00393E D001              POP     AR1
003940 D002              POP     AR2
003942 12013F            LCALL   ?C?CSTPTR
  417: 		}
003945 0F                INC     R7
003946 80C6              SJMP    ?C0063?CS_COMMTO1186
003948         ?C0064?CS_COMMTO1186:
  418: 	return *(buf+9);
003948 904E4E            MOV     DPTR,#buf
00394B E0                MOVX    A,@DPTR
00394C FB                MOV     R3,A
00394D A3                INC     DPTR
00394E E0                MOVX    A,@DPTR
00394F FA                MOV     R2,A
003950 A3                INC     DPTR
003951 E0                MOVX    A,@DPTR
003952 F9                MOV     R1,A
003953 900009            MOV     DPTR,#09H
003956 120112            LCALL   ?C?CLDOPTR
003959 FF                MOV     R7,A
  419: }
00395A 22                RET     
----- FUNCTION _CS_CommTo1186_Xor (END) -------


----- FUNCTION CS_ScaleDisplay_Debug (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
   55: void CS_ScaleDisplay_Debug()
   56: {
   57: 	u8_t buf[5];
   58: 	CS_ScaleDisplay_HexToBcd(R_Debug_temp,buf);
00395B 904CC7            MOV     DPTR,#R_Debug_temp
00395E E0                MOVX    A,@DPTR
00395F FE                MOV     R6,A
003960 A3                INC     DPTR
003961 E0                MOVX    A,@DPTR
003962 FF                MOV     R7,A
003963 7B01              MOV     R3,#01H
003965 7A4E              MOV     R2,#HIGH buf
003967 792A              MOV     R1,#LOW buf
003969 31AC              ACALL   _CS_ScaleDisplay_HexToBcd
   59: 		
   60: 	CS_lcd_showbuf[0] = CS_ScaleDisplay_LookUpTable(buf[1]);
00396B 904E2B            MOV     DPTR,#buf+01H
00396E E0                MOVX    A,@DPTR
00396F FF                MOV     R7,A
003970 1217E4            LCALL   _CS_ScaleDisplay_LookUpTable
003973 904D23            MOV     DPTR,#CS_lcd_showbuf
003976 EF                MOV     A,R7
003977 F0                MOVX    @DPTR,A
   61: 	CS_lcd_showbuf[1] = CS_ScaleDisplay_LookUpTable(buf[2]);
003978 904E2C            MOV     DPTR,#buf+02H
00397B E0                MOVX    A,@DPTR
00397C FF                MOV     R7,A
00397D 1217E4            LCALL   _CS_ScaleDisplay_LookUpTable
003980 904D24            MOV     DPTR,#CS_lcd_showbuf+01H
003983 EF                MOV     A,R7
003984 F0                MOVX    @DPTR,A
   62: 	CS_lcd_showbuf[2] = CS_ScaleDisplay_LookUpTable(buf[3]);
003985 904E2D            MOV     DPTR,#buf+03H
003988 E0                MOVX    A,@DPTR
003989 FF                MOV     R7,A
00398A 1217E4            LCALL   _CS_ScaleDisplay_LookUpTable
00398D 904D25            MOV     DPTR,#CS_lcd_showbuf+02H
003990 EF                MOV     A,R7
003991 F0                MOVX    @DPTR,A
   63: 	CS_lcd_showbuf[3] = CS_ScaleDisplay_LookUpTable(buf[4]);	
003992 904E2E            MOV     DPTR,#buf+04H
003995 E0                MOVX    A,@DPTR
003996 FF                MOV     R7,A
003997 1217E4            LCALL   _CS_ScaleDisplay_LookUpTable
00399A 904D26            MOV     DPTR,#CS_lcd_showbuf+03H
00399D EF                MOV     A,R7
00399E F0                MOVX    @DPTR,A
   64: 		
   65: 	CS_ScaleDisplay_LcdBuf_rShift4();
00399F 5117              ACALL   CS_ScaleDisplay_LcdBuf_rShift4
   66: 
   67: 	CS_CommTo1186_SendCmd(CS_CommTo1186_LcdDisplay,CS_Lcd_Send_Data);
0039A1 7B01              MOV     R3,#01H
0039A3 7A4D              MOV     R2,#HIGH CS_Lcd_Send_Data
0039A5 7928              MOV     R1,#LOW CS_Lcd_Send_Data
0039A7 7FE0              MOV     R7,#0E0H
0039A9 0224C4            LJMP    _CS_CommTo1186_SendCmd
   68: 
----- FUNCTION CS_ScaleDisplay_Debug (END) -------


----- FUNCTION _CS_ScaleDisplay_HexToBcd (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  268: void CS_ScaleDisplay_HexToBcd(u16_t HexData,u8_t* buf)
  269: {
0039AC 904E19            MOV     DPTR,#HexData
0039AF EE                MOV     A,R6
0039B0 F0                MOVX    @DPTR,A
0039B1 A3                INC     DPTR
0039B2 EF                MOV     A,R7
0039B3 F0                MOVX    @DPTR,A
0039B4 A3                INC     DPTR
0039B5 EB                MOV     A,R3
0039B6 F0                MOVX    @DPTR,A
0039B7 A3                INC     DPTR
0039B8 EA                MOV     A,R2
0039B9 F0                MOVX    @DPTR,A
0039BA A3                INC     DPTR
0039BB E9                MOV     A,R1
0039BC F0                MOVX    @DPTR,A
  270: 	u8_t  i;
  271: 	for(i=0;i<5;i++)
0039BD E4                CLR     A
0039BE A3                INC     DPTR
0039BF F0                MOVX    @DPTR,A
0039C0         ?C0039?CS_SCALEDISPLAY:
0039C0 904E1E            MOV     DPTR,#i
0039C3 E0                MOVX    A,@DPTR
0039C4 FB                MOV     R3,A
0039C5 C3                CLR     C
0039C6 9405              SUBB    A,#05H
0039C8 504C              JNC     ?C0042?CS_SCALEDISPLAY
  272: 		{
  273: 		buf[4-i] =  HexData%10;
0039CA 904E19            MOV     DPTR,#HexData
0039CD E0                MOVX    A,@DPTR
0039CE FE                MOV     R6,A
0039CF A3                INC     DPTR
0039D0 E0                MOVX    A,@DPTR
0039D1 FF                MOV     R7,A
0039D2 7C00              MOV     R4,#00H
0039D4 7D0A              MOV     R5,#0AH
0039D6 120173            LCALL   ?C?UIDIV
0039D9 AF05              MOV     R7,AR5
0039DB EB                MOV     A,R3
0039DC FD                MOV     R5,A
0039DD C3                CLR     C
0039DE 7404              MOV     A,#04H
0039E0 9D                SUBB    A,R5
0039E1 FD                MOV     R5,A
0039E2 E4                CLR     A
0039E3 9400              SUBB    A,#00H
0039E5 FC                MOV     R4,A
0039E6 A3                INC     DPTR
0039E7 E0                MOVX    A,@DPTR
0039E8 FB                MOV     R3,A
0039E9 A3                INC     DPTR
0039EA E0                MOVX    A,@DPTR
0039EB FA                MOV     R2,A
0039EC A3                INC     DPTR
0039ED E0                MOVX    A,@DPTR
0039EE F9                MOV     R1,A
0039EF 8D82              MOV     DPL,R5
0039F1 8C83              MOV     DPH,R4
0039F3 EF                MOV     A,R7
0039F4 120151            LCALL   ?C?CSTOPTR
  274: 		HexData = HexData /10;
0039F7 904E19            MOV     DPTR,#HexData
0039FA E0                MOVX    A,@DPTR
0039FB FE                MOV     R6,A
0039FC A3                INC     DPTR
0039FD E0                MOVX    A,@DPTR
0039FE FF                MOV     R7,A
0039FF 7C00              MOV     R4,#00H
003A01 7D0A              MOV     R5,#0AH
003A03 120173            LCALL   ?C?UIDIV
003A06 904E19            MOV     DPTR,#HexData
003A09 EE                MOV     A,R6
003A0A F0                MOVX    @DPTR,A
003A0B A3                INC     DPTR
003A0C EF                MOV     A,R7
003A0D F0                MOVX    @DPTR,A
  275: 		}	
003A0E 904E1E            MOV     DPTR,#i
003A11 E0                MOVX    A,@DPTR
003A12 04                INC     A
003A13 F0                MOVX    @DPTR,A
003A14 80AA              SJMP    ?C0039?CS_SCALEDISPLAY
  276: }
003A16         ?C0042?CS_SCALEDISPLAY:
003A16 22                RET     
----- FUNCTION _CS_ScaleDisplay_HexToBcd (END) -------


----- FUNCTION CS_ScaleDisplay_LcdBuf_rShift4 (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  243: void CS_ScaleDisplay_LcdBuf_rShift4()
  244: {
  245: 	CS_lcd_showbuf[4] = (CS_lcd_showbuf[4] & 0xf0) | (CS_lcd_showbuf[3] & 0x0f);
  246: 	CS_lcd_showbuf[3] = (CS_lcd_showbuf[3] & 0xf0) | (CS_lcd_showbuf[2] & 0x0f);
003A17 904D26            MOV     DPTR,#CS_lcd_showbuf+03H
003A1A E0                MOVX    A,@DPTR
003A1B 540F              ANL     A,#0FH
003A1D FF                MOV     R7,A
003A1E A3                INC     DPTR
003A1F E0                MOVX    A,@DPTR
003A20 54F0              ANL     A,#0F0H
003A22 4F                ORL     A,R7
003A23 F0                MOVX    @DPTR,A
  247: 	CS_lcd_showbuf[2] = (CS_lcd_showbuf[2] & 0xf0) | (CS_lcd_showbuf[1] & 0x0f);
003A24 904D25            MOV     DPTR,#CS_lcd_showbuf+02H
003A27 E0                MOVX    A,@DPTR
003A28 540F              ANL     A,#0FH
003A2A FF                MOV     R7,A
003A2B A3                INC     DPTR
003A2C E0                MOVX    A,@DPTR
003A2D 54F0              ANL     A,#0F0H
003A2F 4F                ORL     A,R7
003A30 F0                MOVX    @DPTR,A
  248: 	CS_lcd_showbuf[1] = (CS_lcd_showbuf[1] & 0xf0) | (CS_lcd_showbuf[0] & 0x0f);
003A31 904D24            MOV     DPTR,#CS_lcd_showbuf+01H
003A34 E0                MOVX    A,@DPTR
003A35 540F              ANL     A,#0FH
003A37 FF                MOV     R7,A
003A38 A3                INC     DPTR
003A39 E0                MOVX    A,@DPTR
003A3A 54F0              ANL     A,#0F0H
003A3C 4F                ORL     A,R7
003A3D F0                MOVX    @DPTR,A
  249: 	CS_lcd_showbuf[0] = CS_lcd_showbuf[0] & 0xf0;
003A3E 904D23            MOV     DPTR,#CS_lcd_showbuf
003A41 E0                MOVX    A,@DPTR
003A42 540F              ANL     A,#0FH
003A44 FF                MOV     R7,A
003A45 A3                INC     DPTR
003A46 E0                MOVX    A,@DPTR
003A47 54F0              ANL     A,#0F0H
003A49 4F                ORL     A,R7
003A4A F0                MOVX    @DPTR,A
  250: 
003A4B 904D23            MOV     DPTR,#CS_lcd_showbuf
003A4E E0                MOVX    A,@DPTR
003A4F 54F0              ANL     A,#0F0H
003A51 FF                MOV     R7,A
003A52 F0                MOVX    @DPTR,A
003A53 FD                MOV     R5,A
  251: 	//清显示缓存数字部分
  252: 	CS_Lcd_Send_Data[0]  &= 0x0f;
003A54 904D28            MOV     DPTR,#CS_Lcd_Send_Data
003A57 E0                MOVX    A,@DPTR
003A58 540F              ANL     A,#0FH
003A5A F0                MOVX    @DPTR,A
  253: 	CS_Lcd_Send_Data[1]  &= 0x08;
003A5B A3                INC     DPTR
003A5C E0                MOVX    A,@DPTR
003A5D 5408              ANL     A,#08H
003A5F F0                MOVX    @DPTR,A
  254: 	CS_Lcd_Send_Data[2]  &= 0x08;
003A60 A3                INC     DPTR
003A61 E0                MOVX    A,@DPTR
003A62 5408              ANL     A,#08H
003A64 F0                MOVX    @DPTR,A
  255: 	CS_Lcd_Send_Data[3]  &= 0x08;
003A65 A3                INC     DPTR
003A66 E0                MOVX    A,@DPTR
003A67 5408              ANL     A,#08H
003A69 F0                MOVX    @DPTR,A
  256: 	CS_Lcd_Send_Data[4]  &= 0xf8;
003A6A A3                INC     DPTR
003A6B E0                MOVX    A,@DPTR
003A6C 54F8              ANL     A,#0F8H
003A6E F0                MOVX    @DPTR,A
  257: 
  258: 	//显示缓存数字部分重新赋值
  259: 	CS_Lcd_Send_Data[0]  |= CS_lcd_showbuf[0];
003A6F 904D28            MOV     DPTR,#CS_Lcd_Send_Data
003A72 E0                MOVX    A,@DPTR
003A73 4D                ORL     A,R5
003A74 F0                MOVX    @DPTR,A
  260: 	CS_Lcd_Send_Data[1]  |= CS_lcd_showbuf[1];
003A75 A3                INC     DPTR
003A76 E0                MOVX    A,@DPTR
003A77 FF                MOV     R7,A
003A78 904D24            MOV     DPTR,#CS_lcd_showbuf+01H
003A7B E0                MOVX    A,@DPTR
003A7C FE                MOV     R6,A
003A7D EF                MOV     A,R7
003A7E 4E                ORL     A,R6
003A7F 904D29            MOV     DPTR,#CS_Lcd_Send_Data+01H
003A82 F0                MOVX    @DPTR,A
  261: 	CS_Lcd_Send_Data[2]  |= CS_lcd_showbuf[2];
003A83 A3                INC     DPTR
003A84 E0                MOVX    A,@DPTR
003A85 FF                MOV     R7,A
003A86 904D25            MOV     DPTR,#CS_lcd_showbuf+02H
003A89 E0                MOVX    A,@DPTR
003A8A FE                MOV     R6,A
003A8B EF                MOV     A,R7
003A8C 4E                ORL     A,R6
003A8D 904D2A            MOV     DPTR,#CS_Lcd_Send_Data+02H
003A90 F0                MOVX    @DPTR,A
  262: 	CS_Lcd_Send_Data[3]  |= CS_lcd_showbuf[3];
003A91 A3                INC     DPTR
003A92 E0                MOVX    A,@DPTR
003A93 FF                MOV     R7,A
003A94 904D26            MOV     DPTR,#CS_lcd_showbuf+03H
003A97 E0                MOVX    A,@DPTR
003A98 FE                MOV     R6,A
003A99 EF                MOV     A,R7
003A9A 4E                ORL     A,R6
003A9B 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
003A9E F0                MOVX    @DPTR,A
  263: 	CS_Lcd_Send_Data[4]  |= CS_lcd_showbuf[4];
003A9F A3                INC     DPTR
003AA0 E0                MOVX    A,@DPTR
003AA1 FF                MOV     R7,A
003AA2 904D27            MOV     DPTR,#CS_lcd_showbuf+04H
003AA5 E0                MOVX    A,@DPTR
003AA6 FE                MOV     R6,A
003AA7 EF                MOV     A,R7
003AA8 4E                ORL     A,R6
003AA9 904D2C            MOV     DPTR,#CS_Lcd_Send_Data+04H
003AAC F0                MOVX    @DPTR,A
  264: 		
  265: }
003AAD 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdBuf_rShift4 (END) -------


----- FUNCTION CS_ScaleDisplay_LcdShowNull (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  298: void CS_ScaleDisplay_LcdShowNull(void)
  299: {
  300: 	CS_Lcd_Send_Data[0] = 0x00;
  301: 	CS_Lcd_Send_Data[1] = 0x00;
003AAE E4                CLR     A
003AAF 904D28            MOV     DPTR,#CS_Lcd_Send_Data
003AB2 F0                MOVX    @DPTR,A
  302: 	CS_Lcd_Send_Data[2] = 0x00;
003AB3 A3                INC     DPTR
003AB4 F0                MOVX    @DPTR,A
  303: 	CS_Lcd_Send_Data[3] = 0x00;
003AB5 A3                INC     DPTR
003AB6 F0                MOVX    @DPTR,A
  304: 	CS_Lcd_Send_Data[4] = 0x00;
003AB7 A3                INC     DPTR
003AB8 F0                MOVX    @DPTR,A
  305: }
003AB9 A3                INC     DPTR
003ABA F0                MOVX    @DPTR,A
  306: 
003ABB 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdShowNull (END) -------


----- FUNCTION CS_ScaleDisplay_LcdShowAll (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  316: void CS_ScaleDisplay_LcdShowAll(void)
  317: {
  318: 	CS_Lcd_Send_Data[0] = 0xFF;
  319: 	CS_Lcd_Send_Data[1] = 0xFF;
003ABC 904D28            MOV     DPTR,#CS_Lcd_Send_Data
003ABF 74FF              MOV     A,#0FFH
003AC1 F0                MOVX    @DPTR,A
  320: 	CS_Lcd_Send_Data[2] = 0xFF;
003AC2 A3                INC     DPTR
003AC3 F0                MOVX    @DPTR,A
  321: 	CS_Lcd_Send_Data[3] = 0xFF;
003AC4 A3                INC     DPTR
003AC5 F0                MOVX    @DPTR,A
  322: 	CS_Lcd_Send_Data[4] = 0xFF;
003AC6 A3                INC     DPTR
003AC7 F0                MOVX    @DPTR,A
  323: }
003AC8 A3                INC     DPTR
003AC9 F0                MOVX    @DPTR,A
  324: 
003ACA 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdShowAll (END) -------


----- FUNCTION CS_ScaleDisplay_LcdBackup (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  326: void CS_ScaleDisplay_LcdBackup(void)
  327: {
  328: 	CS_Lcd_Send_Data_BAK[0] = CS_Lcd_Send_Data[0];
  329: 	CS_Lcd_Send_Data_BAK[1] = CS_Lcd_Send_Data[1];
003ACB 904D28            MOV     DPTR,#CS_Lcd_Send_Data
003ACE E0                MOVX    A,@DPTR
003ACF 904D1D            MOV     DPTR,#CS_Lcd_Send_Data_BAK
003AD2 F0                MOVX    @DPTR,A
  330: 	CS_Lcd_Send_Data_BAK[2] = CS_Lcd_Send_Data[2];
003AD3 904D29            MOV     DPTR,#CS_Lcd_Send_Data+01H
003AD6 E0                MOVX    A,@DPTR
003AD7 904D1E            MOV     DPTR,#CS_Lcd_Send_Data_BAK+01H
003ADA F0                MOVX    @DPTR,A
  331: 	CS_Lcd_Send_Data_BAK[3] = CS_Lcd_Send_Data[3];
003ADB 904D2A            MOV     DPTR,#CS_Lcd_Send_Data+02H
003ADE E0                MOVX    A,@DPTR
003ADF 904D1F            MOV     DPTR,#CS_Lcd_Send_Data_BAK+02H
003AE2 F0                MOVX    @DPTR,A
  332: 	CS_Lcd_Send_Data_BAK[4] = CS_Lcd_Send_Data[4];	
003AE3 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
003AE6 E0                MOVX    A,@DPTR
003AE7 904D20            MOV     DPTR,#CS_Lcd_Send_Data_BAK+03H
003AEA F0                MOVX    @DPTR,A
  333: }
003AEB 904D2C            MOV     DPTR,#CS_Lcd_Send_Data+04H
003AEE E0                MOVX    A,@DPTR
003AEF 904D21            MOV     DPTR,#CS_Lcd_Send_Data_BAK+04H
003AF2 F0                MOVX    @DPTR,A
  334: 
003AF3 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdBackup (END) -------


----- FUNCTION sendHistoryData (BEGIN) -----
 FILE: 'lxProtocol.c'
  383: static void sendHistoryData(void)
  384: {
  385: 	static u8_t total_len = 0;
  386: 	UserMeasureData *temp = NULL;
003AF4 904DC2            MOV     DPTR,#temp
003AF7 E4                CLR     A
003AF8 F0                MOVX    @DPTR,A
003AF9 A3                INC     DPTR
003AFA F0                MOVX    @DPTR,A
003AFB A3                INC     DPTR
003AFC F0                MOVX    @DPTR,A
  387: 	u32_t crc32;
  388: 	u8_t i=0;
003AFD 904DC9            MOV     DPTR,#i
003B00 F0                MOVX    @DPTR,A
  389: 	u8_t pkgCnt; 
  390: 	u8_t size;
  391: 	/*
  392: 	UserMeasureData temp1;
  393: 	temp1.UTCTime[0] = 0x12;
  394: 	temp1.UTCTime[0] = 0x34;
  395: 	temp1.UTCTime[0] = 0x56;
  396: 	temp1.UTCTime[0] = 0x78;
  397: 	temp1.weight = 0xabba;
  398: 	QueuePush(&temp1);
  399: 	QueuePush(&temp1);
  400: 	*/
  401: 	
  402: 	size = historyUserData.size;
003B01 904C12            MOV     DPTR,#historyUserData+02H
003B04 E0                MOVX    A,@DPTR
003B05 904DCB            MOV     DPTR,#size
003B08 F0                MOVX    @DPTR,A
  403: 	pkgCnt = (8 + historyUserData.size * 6 + 4)/18 + (((8 + historyUserData.size * 6 + 4)%18)>0?1:0);
003B09 75F006            MOV     B,#06H
003B0C A4                MUL     AB
003B0D 240C              ADD     A,#0CH
003B0F FF                MOV     R7,A
003B10 E4                CLR     A
003B11 35F0              ADDC    A,B
003B13 FE                MOV     R6,A
003B14 7C00              MOV     R4,#00H
003B16 7D12              MOV     R5,#012H
003B18 120173            LCALL   ?C?UIDIV
003B1B ED                MOV     A,R5
003B1C D3                SETB    C
003B1D 9400              SUBB    A,#00H
003B1F 4006              JC      ?C0068?LXPROTOCOL
003B21 7F01              MOV     R7,#01H
003B23 7B01              MOV     R3,#01H
003B25 8004              SJMP    ?C0069?LXPROTOCOL
003B27         ?C0068?LXPROTOCOL:
003B27 7F00              MOV     R7,#00H
003B29 7B00              MOV     R3,#00H
003B2B         ?C0069?LXPROTOCOL:
003B2B 904C12            MOV     DPTR,#historyUserData+02H
003B2E E0                MOVX    A,@DPTR
003B2F FA                MOV     R2,A
003B30 75F006            MOV     B,#06H
003B33 A4                MUL     AB
003B34 240C              ADD     A,#0CH
003B36 FF                MOV     R7,A
003B37 E4                CLR     A
003B38 35F0              ADDC    A,B
003B3A FE                MOV     R6,A
003B3B 7C00              MOV     R4,#00H
003B3D 7D12              MOV     R5,#012H
003B3F 120173            LCALL   ?C?UIDIV
003B42 EB                MOV     A,R3
003B43 2F                ADD     A,R7
003B44 904DCA            MOV     DPTR,#pkgCnt
003B47 F0                MOVX    @DPTR,A
  404: 	total_len = 8 + historyUserData.size * 6 + 4;
003B48 EA                MOV     A,R2
003B49 75F006            MOV     B,#06H
003B4C A4                MUL     AB
003B4D 240C              ADD     A,#0CH
003B4F 904E5E            MOV     DPTR,#total_len
003B52 F0                MOVX    @DPTR,A
  405: 	
  406: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
003B53 904C64            MOV     DPTR,#btCmdBuf+01H
003B56 7430              MOV     A,#030H
003B58 F0                MOVX    @DPTR,A
  407: 	btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
003B59 A3                INC     DPTR
003B5A 741C              MOV     A,#01CH
003B5C F0                MOVX    @DPTR,A
  408: 	btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
003B5D E4                CLR     A
003B5E A3                INC     DPTR
003B5F F0                MOVX    @DPTR,A
  409: 
  410: 	*(LX_SEND_BUF+0) = LO_UINT16(CMD_SYNC_DATA_RSP);
003B60 9048D2            MOV     DPTR,#048D2H
003B63 7402              MOV     A,#02H
003B65 F0                MOVX    @DPTR,A
  411: 	*(LX_SEND_BUF+1) = HI_UINT16(CMD_SYNC_DATA_RSP);
003B66 A3                INC     DPTR
003B67 7448              MOV     A,#048H
003B69 F0                MOVX    @DPTR,A
  412: 	*(LX_SEND_BUF+2) = pkgCnt - 1;
003B6A 904DCA            MOV     DPTR,#pkgCnt
003B6D E0                MOVX    A,@DPTR
003B6E FF                MOV     R7,A
003B6F 14                DEC     A
003B70 9048D4            MOV     DPTR,#048D4H
003B73 F0                MOVX    @DPTR,A
  413: 	*(LX_SEND_BUF+3) = 0;
003B74 A3                INC     DPTR
003B75 E4                CLR     A
003B76 F0                MOVX    @DPTR,A
  414: 	*(LX_SEND_BUF+4) = WEIGHT_UTC_FLAG;
003B77 A3                INC     DPTR
003B78 7405              MOV     A,#05H
003B7A F0                MOVX    @DPTR,A
  415: 	*(LX_SEND_BUF+5) = 0;
003B7B A3                INC     DPTR
003B7C E4                CLR     A
003B7D F0                MOVX    @DPTR,A
  416: 	*(LX_SEND_BUF+6) = 0;
003B7E A3                INC     DPTR
003B7F F0                MOVX    @DPTR,A
  417: 	*(LX_SEND_BUF+7) = 0;
003B80 A3                INC     DPTR
003B81 F0                MOVX    @DPTR,A
  418: 	if(pkgCnt > 1)
003B82 EF                MOV     A,R7
003B83 D3                SETB    C
003B84 9401              SUBB    A,#01H
003B86 5002              JNC     $ + 4H
003B88 81D3              AJMP    ?C0070?LXPROTOCOL
  419: 	{
  420: 		for(i=0;i<size;i++)
003B8A E4                CLR     A
003B8B 904DC9            MOV     DPTR,#i
003B8E F0                MOVX    @DPTR,A
003B8F         ?C0071?LXPROTOCOL:
003B8F 904DCB            MOV     DPTR,#size
003B92 E0                MOVX    A,@DPTR
003B93 FF                MOV     R7,A
003B94 904DC9            MOV     DPTR,#i
003B97 E0                MOVX    A,@DPTR
003B98 C3                CLR     C
003B99 9F                SUBB    A,R7
003B9A 5047              JNC     ?C0072?LXPROTOCOL
  421: 		{
  422: 			temp = QueuePop();
003B9C B14E              ACALL   QueuePop
003B9E 904DC2            MOV     DPTR,#temp
003BA1 EB                MOV     A,R3
003BA2 F0                MOVX    @DPTR,A
003BA3 A3                INC     DPTR
003BA4 EA                MOV     A,R2
003BA5 F0                MOVX    @DPTR,A
003BA6 A3                INC     DPTR
003BA7 E9                MOV     A,R1
003BA8 F0                MOVX    @DPTR,A
  423: 			dmemcpy(LX_SEND_BUF + (sizeof(UserMeasureData) * i) + 8, (u8_t *)temp, sizeof(UserMeasureData));
003BA9 904DC9            MOV     DPTR,#i
003BAC E0                MOVX    A,@DPTR
003BAD 75F006            MOV     B,#06H
003BB0 A4                MUL     AB
003BB1 24DA              ADD     A,#0DAH
003BB3 FF                MOV     R7,A
003BB4 E5F0              MOV     A,B
003BB6 3448              ADDC    A,#048H
003BB8 FA                MOV     R2,A
003BB9 A907              MOV     R1,AR7
003BBB 7B01              MOV     R3,#01H
003BBD C003              PUSH    AR3
003BBF C002              PUSH    AR2
003BC1 904DC2            MOV     DPTR,#temp
003BC4 E0                MOVX    A,@DPTR
003BC5 FB                MOV     R3,A
003BC6 A3                INC     DPTR
003BC7 E0                MOVX    A,@DPTR
003BC8 FA                MOV     R2,A
003BC9 A3                INC     DPTR
003BCA E0                MOVX    A,@DPTR
003BCB 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
003BCD 8A14              MOV     ?_dmemcpy?BYTE+04H,R2
003BCF F515              MOV     ?_dmemcpy?BYTE+05H,A
003BD1 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
003BD4 D002              POP     AR2
003BD6 D003              POP     AR3
003BD8 121F21            LCALL   _dmemcpy
  424: 		}
003BDB 904DC9            MOV     DPTR,#i
003BDE E0                MOVX    A,@DPTR
003BDF 04                INC     A
003BE0 F0                MOVX    @DPTR,A
003BE1 80AC              SJMP    ?C0071?LXPROTOCOL
003BE3         ?C0072?LXPROTOCOL:
  425: 		crc32 = cal_crc32_multiple(0, LX_SEND_BUF, total_len - 4);
003BE3 7B01              MOV     R3,#01H
003BE5 7A48              MOV     R2,#048H
003BE7 79D2              MOV     R1,#0D2H
003BE9 904E5E            MOV     DPTR,#total_len
003BEC E0                MOVX    A,@DPTR
003BED 24FC              ADD     A,#0FCH
003BEF FF                MOV     R7,A
003BF0 E4                CLR     A
003BF1 34FF              ADDC    A,#0FFH
003BF3 FE                MOV     R6,A
003BF4 E4                CLR     A
003BF5 FC                MOV     R4,A
003BF6 FD                MOV     R5,A
003BF7 904D98            MOV     DPTR,#?_cal_crc32_multiple?BYTE+07H
003BFA 120332            LCALL   ?C?LSTXDATA
003BFD 7F00              MOV     R7,#00H
003BFF 7E00              MOV     R6,#00H
003C01 7D00              MOV     R5,#00H
003C03 7C00              MOV     R4,#00H
003C05 D106              ACALL   _cal_crc32_multiple
003C07 904DC5            MOV     DPTR,#crc32
003C0A 120332            LCALL   ?C?LSTXDATA
  426: 		dmemcpy(LX_SEND_BUF + (sizeof(UserMeasureData) * i) + 8, (u8_t *)&crc32, sizeof(crc32));
003C0D 904DC9            MOV     DPTR,#i
003C10 E0                MOVX    A,@DPTR
003C11 75F006            MOV     B,#06H
003C14 A4                MUL     AB
003C15 24DA              ADD     A,#0DAH
003C17 FF                MOV     R7,A
003C18 E5F0              MOV     A,B
003C1A 3448              ADDC    A,#048H
003C1C FA                MOV     R2,A
003C1D A907              MOV     R1,AR7
003C1F 7B01              MOV     R3,#01H
003C21 C003              PUSH    AR3
003C23 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
003C25 75144D            MOV     ?_dmemcpy?BYTE+04H,#HIGH crc32
003C28 7515C5            MOV     ?_dmemcpy?BYTE+05H,#LOW crc32
003C2B 751604            MOV     ?_dmemcpy?BYTE+06H,#04H
003C2E D003              POP     AR3
003C30 121F21            LCALL   _dmemcpy
  427: 		bigLittleEndianSwap(LX_SEND_BUF, total_len);
003C33 7B01              MOV     R3,#01H
003C35 7A48              MOV     R2,#048H
003C37 79D2              MOV     R1,#0D2H
003C39 904E5E            MOV     DPTR,#total_len
003C3C E0                MOVX    A,@DPTR
003C3D FD                MOV     R5,A
003C3E 7C00              MOV     R4,#00H
003C40 1219EF            LCALL   _bigLittleEndianSwap
  428: 		
  429: 		for(i=0;i<pkgCnt;i++)
003C43 E4                CLR     A
003C44 904DC9            MOV     DPTR,#i
003C47 F0                MOVX    @DPTR,A
003C48         ?C0074?LXPROTOCOL:
003C48 904DCA            MOV     DPTR,#pkgCnt
003C4B E0                MOVX    A,@DPTR
003C4C FF                MOV     R7,A
003C4D 904DC9            MOV     DPTR,#i
003C50 E0                MOVX    A,@DPTR
003C51 FE                MOV     R6,A
003C52 C3                CLR     C
003C53 9F                SUBB    A,R7
003C54 4002              JC      $ + 4H
003C56 A14D              AJMP    ?C0082?LXPROTOCOL
  430: 		{
  431: 			btCmdBuf.DATA[3] = (pkgCnt << 4) + i;
003C58 A3                INC     DPTR
003C59 E0                MOVX    A,@DPTR
003C5A FD                MOV     R5,A
003C5B C4                SWAP    A
003C5C 54F0              ANL     A,#0F0H
003C5E FF                MOV     R7,A
003C5F EE                MOV     A,R6
003C60 2F                ADD     A,R7
003C61 904C67            MOV     DPTR,#btCmdBuf+04H
003C64 F0                MOVX    @DPTR,A
  432: 			if(i == pkgCnt -1)
003C65 ED                MOV     A,R5
003C66 14                DEC     A
003C67 B5060A            CJNE    A,AR6,?C0077?LXPROTOCOL
  433: 			{
  434: 				btCmdBuf.DATA[4] = total_len;
003C6A 904E5E            MOV     DPTR,#total_len
003C6D E0                MOVX    A,@DPTR
003C6E 904C68            MOV     DPTR,#btCmdBuf+05H
003C71 F0                MOVX    @DPTR,A
  435: 			}
003C72 800D              SJMP    ?C0078?LXPROTOCOL
003C74         ?C0077?LXPROTOCOL:
  436: 			else
  437: 			{
  438: 				btCmdBuf.DATA[4] = 20 - 2;
003C74 904C68            MOV     DPTR,#btCmdBuf+05H
003C77 7412              MOV     A,#012H
003C79 F0                MOVX    @DPTR,A
  439: 				total_len -= 18;
003C7A 904E5E            MOV     DPTR,#total_len
003C7D E0                MOVX    A,@DPTR
003C7E 24EE              ADD     A,#0EEH
003C80 F0                MOVX    @DPTR,A
  440: 				
  441: 			}
003C81         ?C0078?LXPROTOCOL:
  442: 			btCmdBuf.DATA[7] = pkgCnt - i - 1;
003C81 904DC9            MOV     DPTR,#i
003C84 E0                MOVX    A,@DPTR
003C85 FD                MOV     R5,A
003C86 A3                INC     DPTR
003C87 E0                MOVX    A,@DPTR
003C88 C3                CLR     C
003C89 9D                SUBB    A,R5
003C8A 14                DEC     A
003C8B 904C6B            MOV     DPTR,#btCmdBuf+08H
003C8E F0                MOVX    @DPTR,A
  443: 			btCmdBuf.len = 3 + 2 + btCmdBuf.DATA[4] ;
003C8F 904C68            MOV     DPTR,#btCmdBuf+05H
003C92 E0                MOVX    A,@DPTR
003C93 2405              ADD     A,#05H
003C95 904C63            MOV     DPTR,#btCmdBuf
003C98 F0                MOVX    @DPTR,A
  444: 			dmemcpy(&btCmdBuf.DATA[5], (u8_t *)(LX_SEND_BUF+i*18), btCmdBuf.DATA[4] );
003C99 ED                MOV     A,R5
003C9A 75F012            MOV     B,#012H
003C9D A4                MUL     AB
003C9E 24D2              ADD     A,#0D2H
003CA0 FF                MOV     R7,A
003CA1 E5F0              MOV     A,B
003CA3 3448              ADDC    A,#048H
003CA5 A907              MOV     R1,AR7
003CA7 751301            MOV     ?_dmemcpy?BYTE+03H,#01H
003CAA F514              MOV     ?_dmemcpy?BYTE+04H,A
003CAC 8915              MOV     ?_dmemcpy?BYTE+05H,R1
003CAE 904C68            MOV     DPTR,#btCmdBuf+05H
003CB1 E0                MOVX    A,@DPTR
003CB2 F516              MOV     ?_dmemcpy?BYTE+06H,A
003CB4 7B01              MOV     R3,#01H
003CB6 7A4C              MOV     R2,#HIGH btCmdBuf+06H
003CB8 7969              MOV     R1,#LOW btCmdBuf+06H
003CBA 121F21            LCALL   _dmemcpy
  445: 			BT_CmdFifoIn(&btCmdBuf);
003CBD 7B01              MOV     R3,#01H
003CBF 7A4C              MOV     R2,#HIGH btCmdBuf
003CC1 7963              MOV     R1,#LOW btCmdBuf
003CC3 121E00            LCALL   _BT_CmdFifoIn
  446: 			YC_Delay10ms(12);
003CC6 7F0C              MOV     R7,#0CH
003CC8 121DE8            LCALL   _YC_Delay10ms
  447: 		}
003CCB 904DC9            MOV     DPTR,#i
003CCE E0                MOVX    A,@DPTR
003CCF 04                INC     A
003CD0 F0                MOVX    @DPTR,A
003CD1 8148              AJMP    ?C0074?LXPROTOCOL
  448: 	}
003CD3         ?C0070?LXPROTOCOL:
  449: 	else
  450: 	{
  451: 		btCmdBuf.len = 3 + 2 + SYNC_DATA_HDR_LEN + sizeof(UserMeasureData);
003CD3 904C63            MOV     DPTR,#btCmdBuf
003CD6 7413              MOV     A,#013H
003CD8 F0                MOVX    @DPTR,A
  452: 		btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
003CD9 904C67            MOV     DPTR,#btCmdBuf+04H
003CDC 7410              MOV     A,#010H
003CDE F0                MOVX    @DPTR,A
  453: 		btCmdBuf.DATA[4] = SYNC_DATA_HDR_LEN + sizeof(UserMeasureData);
003CDF A3                INC     DPTR
003CE0 740E              MOV     A,#0EH
003CE2 F0                MOVX    @DPTR,A
  454: 		temp = QueuePop();
003CE3 B14E              ACALL   QueuePop
003CE5 904DC2            MOV     DPTR,#temp
003CE8 EB                MOV     A,R3
003CE9 F0                MOVX    @DPTR,A
003CEA A3                INC     DPTR
003CEB EA                MOV     A,R2
003CEC F0                MOVX    @DPTR,A
003CED A3                INC     DPTR
003CEE E9                MOV     A,R1
003CEF F0                MOVX    @DPTR,A
  455: 		if(temp != NULL)
003CF0 4A                ORL     A,R2
003CF1 601E              JZ      ?C0080?LXPROTOCOL
  456: 		{
  457: 			dmemcpy(LX_SEND_BUF + 8, (u8_t *)temp, sizeof(UserMeasureData));
003CF3 904DC2            MOV     DPTR,#temp
003CF6 E0                MOVX    A,@DPTR
003CF7 FB                MOV     R3,A
003CF8 A3                INC     DPTR
003CF9 E0                MOVX    A,@DPTR
003CFA FA                MOV     R2,A
003CFB A3                INC     DPTR
003CFC E0                MOVX    A,@DPTR
003CFD 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
003CFF 8A14              MOV     ?_dmemcpy?BYTE+04H,R2
003D01 F515              MOV     ?_dmemcpy?BYTE+05H,A
003D03 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
003D06 7B01              MOV     R3,#01H
003D08 7A48              MOV     R2,#048H
003D0A 79DA              MOV     R1,#0DAH
003D0C 121F21            LCALL   _dmemcpy
  458: 		}
003D0F 800B              SJMP    ?C0081?LXPROTOCOL
003D11         ?C0080?LXPROTOCOL:
  459: 		else
  460: 		{
  461: 			xmemset(LX_SEND_BUF, 0, sizeof(UserMeasureData));
003D11 7B06              MOV     R3,#06H
003D13 E4                CLR     A
003D14 FD                MOV     R5,A
003D15 7FD2              MOV     R7,#0D2H
003D17 7E48              MOV     R6,#048H
003D19 121F99            LCALL   _xmemset
  462: 		}
003D1C         ?C0081?LXPROTOCOL:
  463: 		dmemcpy(&(btCmdBuf.DATA[5]), LX_SEND_BUF, btCmdBuf.DATA[4]);
003D1C 751301            MOV     ?_dmemcpy?BYTE+03H,#01H
003D1F 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
003D22 7515D2            MOV     ?_dmemcpy?BYTE+05H,#0D2H
003D25 904C68            MOV     DPTR,#btCmdBuf+05H
003D28 E0                MOVX    A,@DPTR
003D29 F516              MOV     ?_dmemcpy?BYTE+06H,A
003D2B 7B01              MOV     R3,#01H
003D2D 7A4C              MOV     R2,#HIGH btCmdBuf+06H
003D2F 7969              MOV     R1,#LOW btCmdBuf+06H
003D31 121F21            LCALL   _dmemcpy
  464: 		bigLittleEndianSwap(&(btCmdBuf.DATA[5]), btCmdBuf.DATA[4]);
003D34 7B01              MOV     R3,#01H
003D36 7A4C              MOV     R2,#HIGH btCmdBuf+06H
003D38 7969              MOV     R1,#LOW btCmdBuf+06H
003D3A 904C68            MOV     DPTR,#btCmdBuf+05H
003D3D E0                MOVX    A,@DPTR
003D3E FD                MOV     R5,A
003D3F 7C00              MOV     R4,#00H
003D41 1219EF            LCALL   _bigLittleEndianSwap
  465: 		BT_CmdFifoIn(&btCmdBuf);
003D44 7B01              MOV     R3,#01H
003D46 7A4C              MOV     R2,#HIGH btCmdBuf
003D48 7963              MOV     R1,#LOW btCmdBuf
003D4A 121E00            LCALL   _BT_CmdFifoIn
  466: 	}
  467: }
003D4D         ?C0082?LXPROTOCOL:
003D4D 22                RET     
----- FUNCTION sendHistoryData (END) -------


----- FUNCTION QueuePop (BEGIN) -----
 FILE: 'lxProtocol.c'
  503: static UserMeasureData* QueuePop(void)
  504: {
  505: 	UserMeasureData *temp = NULL;
  506: 	
003D4E 904E51            MOV     DPTR,#temp
003D51 E4                CLR     A
003D52 F0                MOVX    @DPTR,A
003D53 A3                INC     DPTR
003D54 F0                MOVX    @DPTR,A
003D55 A3                INC     DPTR
003D56 F0                MOVX    @DPTR,A
  507: 	if(QUEUE_IS_EMPTY)
003D57 904C12            MOV     DPTR,#historyUserData+02H
003D5A E0                MOVX    A,@DPTR
003D5B D3                SETB    C
003D5C 9400              SUBB    A,#00H
003D5E 5007              JNC     ?C0088?LXPROTOCOL
  508: 		return NULL;
003D60 7B00              MOV     R3,#00H
003D62 7A00              MOV     R2,#00H
003D64 7900              MOV     R1,#00H
003D66 22                RET     
003D67         ?C0088?LXPROTOCOL:
  509: 
  510: 	temp = &(historyUserData.measureData[historyUserData.head]);
003D67 904C10            MOV     DPTR,#historyUserData
003D6A E0                MOVX    A,@DPTR
003D6B 75F006            MOV     B,#06H
003D6E A4                MUL     AB
003D6F 2413              ADD     A,#LOW historyUserData+03H
003D71 F9                MOV     R1,A
003D72 744C              MOV     A,#HIGH historyUserData+03H
003D74 35F0              ADDC    A,B
003D76 FA                MOV     R2,A
003D77 904E51            MOV     DPTR,#temp
003D7A 7401              MOV     A,#01H
003D7C F0                MOVX    @DPTR,A
003D7D A3                INC     DPTR
003D7E EA                MOV     A,R2
003D7F F0                MOVX    @DPTR,A
003D80 A3                INC     DPTR
003D81 E9                MOV     A,R1
003D82 F0                MOVX    @DPTR,A
  511: 	historyUserData.head = (historyUserData.head + 1)%MAX_SIZE;
003D83 904C10            MOV     DPTR,#historyUserData
003D86 E0                MOVX    A,@DPTR
003D87 2401              ADD     A,#01H
003D89 FF                MOV     R7,A
003D8A E4                CLR     A
003D8B 33                RLC     A
003D8C FE                MOV     R6,A
003D8D 7C00              MOV     R4,#00H
003D8F 7D0A              MOV     R5,#0AH
003D91 120173            LCALL   ?C?UIDIV
003D94 ED                MOV     A,R5
003D95 F0                MOVX    @DPTR,A
  512: 	historyUserData.size--;
003D96 904C12            MOV     DPTR,#historyUserData+02H
003D99 E0                MOVX    A,@DPTR
003D9A 14                DEC     A
003D9B F0                MOVX    @DPTR,A
  513: 
  514: 	return temp;
003D9C 904E51            MOV     DPTR,#temp
003D9F E0                MOVX    A,@DPTR
003DA0 FB                MOV     R3,A
003DA1 A3                INC     DPTR
003DA2 E0                MOVX    A,@DPTR
003DA3 FA                MOV     R2,A
003DA4 A3                INC     DPTR
003DA5 E0                MOVX    A,@DPTR
003DA6 F9                MOV     R1,A
  515: }
003DA7 22                RET     
----- FUNCTION QueuePop (END) -------


----- FUNCTION _QueuePush (BEGIN) -----
 FILE: 'lxProtocol.c'
  517: void QueuePush(UserMeasureData *userData)
  518: {
003DA8 904E54            MOV     DPTR,#userData
003DAB EB                MOV     A,R3
003DAC F0                MOVX    @DPTR,A
003DAD A3                INC     DPTR
003DAE EA                MOV     A,R2
003DAF F0                MOVX    @DPTR,A
003DB0 A3                INC     DPTR
003DB1 E9                MOV     A,R1
003DB2 F0                MOVX    @DPTR,A
  519: 	if(QUEUE_IS_FULL)
  520: 		QueuePop();
003DB3 904C12            MOV     DPTR,#historyUserData+02H
003DB6 E0                MOVX    A,@DPTR
003DB7 C3                CLR     C
003DB8 940A              SUBB    A,#0AH
003DBA 4002              JC      ?C0090?LXPROTOCOL
  521: 	
003DBC B14E              ACALL   QueuePop
003DBE         ?C0090?LXPROTOCOL:
  522: 	dmemcpy((u8_t *)&(historyUserData.measureData[historyUserData.tail]), (u8_t *)userData, sizeof(UserMeasureData))
>> ;
003DBE 904C11            MOV     DPTR,#historyUserData+01H
003DC1 E0                MOVX    A,@DPTR
003DC2 75F006            MOV     B,#06H
003DC5 A4                MUL     AB
003DC6 2413              ADD     A,#LOW historyUserData+03H
003DC8 F9                MOV     R1,A
003DC9 744C              MOV     A,#HIGH historyUserData+03H
003DCB 35F0              ADDC    A,B
003DCD FA                MOV     R2,A
003DCE 7B01              MOV     R3,#01H
003DD0 C003              PUSH    AR3
003DD2 C002              PUSH    AR2
003DD4 904E54            MOV     DPTR,#userData
003DD7 E0                MOVX    A,@DPTR
003DD8 FB                MOV     R3,A
003DD9 A3                INC     DPTR
003DDA E0                MOVX    A,@DPTR
003DDB FA                MOV     R2,A
003DDC A3                INC     DPTR
003DDD E0                MOVX    A,@DPTR
003DDE 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
003DE0 8A14              MOV     ?_dmemcpy?BYTE+04H,R2
003DE2 F515              MOV     ?_dmemcpy?BYTE+05H,A
003DE4 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
003DE7 D002              POP     AR2
003DE9 D003              POP     AR3
003DEB 121F21            LCALL   _dmemcpy
  523: 	historyUserData.tail = (historyUserData.tail + 1)%MAX_SIZE;
003DEE 904C11            MOV     DPTR,#historyUserData+01H
003DF1 E0                MOVX    A,@DPTR
003DF2 2401              ADD     A,#01H
003DF4 FF                MOV     R7,A
003DF5 E4                CLR     A
003DF6 33                RLC     A
003DF7 FE                MOV     R6,A
003DF8 7C00              MOV     R4,#00H
003DFA 7D0A              MOV     R5,#0AH
003DFC 120173            LCALL   ?C?UIDIV
003DFF ED                MOV     A,R5
003E00 F0                MOVX    @DPTR,A
  524: 	historyUserData.size++;
003E01 A3                INC     DPTR
003E02 E0                MOVX    A,@DPTR
003E03 04                INC     A
003E04 F0                MOVX    @DPTR,A
  525: }
003E05 22                RET     
----- FUNCTION _QueuePush (END) -------


----- FUNCTION _cal_crc32_multiple (BEGIN) -----
 FILE: 'Crc32.c'
   80: u32_t cal_crc32_multiple(u32_t crc, u8_t *buffer, u32_t size)
   81: {
003E06 904D91            MOV     DPTR,#crc
003E09 120332            LCALL   ?C?LSTXDATA
003E0C 904D95            MOV     DPTR,#buffer
003E0F EB                MOV     A,R3
003E10 F0                MOVX    @DPTR,A
003E11 A3                INC     DPTR
003E12 EA                MOV     A,R2
003E13 F0                MOVX    @DPTR,A
003E14 A3                INC     DPTR
003E15 E9                MOV     A,R1
003E16 F0                MOVX    @DPTR,A
   82:     u32_t i;
   83:     for (i = 0; i < size; ++i)
003E17 904D9C            MOV     DPTR,#i
003E1A 12033E            LCALL   ?C?LSTKXDATA
003E1D 00                DB      00H
003E1E 00                DB      00H
003E1F 00                DB      00H
003E20 00                DB      00H
003E21         ?C0001?CRC32:
003E21 904D98            MOV     DPTR,#size
003E24 E0                MOVX    A,@DPTR
003E25 FC                MOV     R4,A
003E26 A3                INC     DPTR
003E27 E0                MOVX    A,@DPTR
003E28 FD                MOV     R5,A
003E29 A3                INC     DPTR
003E2A E0                MOVX    A,@DPTR
003E2B FE                MOV     R6,A
003E2C A3                INC     DPTR
003E2D E0                MOVX    A,@DPTR
003E2E FF                MOV     R7,A
003E2F A3                INC     DPTR
003E30 E0                MOVX    A,@DPTR
003E31 F8                MOV     R0,A
003E32 A3                INC     DPTR
003E33 E0                MOVX    A,@DPTR
003E34 F9                MOV     R1,A
003E35 A3                INC     DPTR
003E36 E0                MOVX    A,@DPTR
003E37 FA                MOV     R2,A
003E38 A3                INC     DPTR
003E39 E0                MOVX    A,@DPTR
003E3A FB                MOV     R3,A
003E3B C3                CLR     C
003E3C 1202FB            LCALL   ?C?ULCMP
003E3F 4002              JC      $ + 4H
003E41 C1F3              AJMP    ?C0002?CRC32
   84:     {
   85:     	SPIFlashRead((u8_t *)&crc_table, CRC32_ADDR + (((crc ^ buffer[i]) & 0xff)*4), sizeof(crc_table));
003E43 904D9C            MOV     DPTR,#i
003E46 E0                MOVX    A,@DPTR
003E47 A3                INC     DPTR
003E48 E0                MOVX    A,@DPTR
003E49 A3                INC     DPTR
003E4A E0                MOVX    A,@DPTR
003E4B FE                MOV     R6,A
003E4C A3                INC     DPTR
003E4D E0                MOVX    A,@DPTR
003E4E FF                MOV     R7,A
003E4F 904D95            MOV     DPTR,#buffer
003E52 E0                MOVX    A,@DPTR
003E53 FB                MOV     R3,A
003E54 A3                INC     DPTR
003E55 E0                MOVX    A,@DPTR
003E56 FA                MOV     R2,A
003E57 A3                INC     DPTR
003E58 E0                MOVX    A,@DPTR
003E59 F9                MOV     R1,A
003E5A 8F82              MOV     DPL,R7
003E5C 8E83              MOV     DPH,R6
003E5E 120112            LCALL   ?C?CLDOPTR
003E61 FF                MOV     R7,A
003E62 E4                CLR     A
003E63 904D91            MOV     DPTR,#crc
003E66 E0                MOVX    A,@DPTR
003E67 F8                MOV     R0,A
003E68 A3                INC     DPTR
003E69 E0                MOVX    A,@DPTR
003E6A F9                MOV     R1,A
003E6B A3                INC     DPTR
003E6C E0                MOVX    A,@DPTR
003E6D FA                MOV     R2,A
003E6E A3                INC     DPTR
003E6F E0                MOVX    A,@DPTR
003E70 6F                XRL     A,R7
003E71 FF                MOV     R7,A
003E72 EA                MOV     A,R2
003E73 FE                MOV     R6,A
003E74 E9                MOV     A,R1
003E75 FD                MOV     R5,A
003E76 E8                MOV     A,R0
003E77 FC                MOV     R4,A
003E78 EF                MOV     A,R7
003E79 E4                CLR     A
003E7A FE                MOV     R6,A
003E7B FD                MOV     R5,A
003E7C FC                MOV     R4,A
003E7D 7B04              MOV     R3,#04H
003E7F FA                MOV     R2,A
003E80 F9                MOV     R1,A
003E81 F8                MOV     R0,A
003E82 1201DE            LCALL   ?C?LMUL
003E85 E4                CLR     A
003E86 2F                ADD     A,R7
003E87 FF                MOV     R7,A
003E88 EE                MOV     A,R6
003E89 3480              ADDC    A,#080H
003E8B FE                MOV     R6,A
003E8C E4                CLR     A
003E8D 3D                ADDC    A,R5
003E8E FD                MOV     R5,A
003E8F E4                CLR     A
003E90 3C                ADDC    A,R4
003E91 FC                MOV     R4,A
003E92 904DEC            MOV     DPTR,#?_SPIFlashRead?BYTE+07H
003E95 7404              MOV     A,#04H
003E97 F0                MOVX    @DPTR,A
003E98 7B01              MOV     R3,#01H
003E9A 7A4E              MOV     R2,#HIGH crc_table
003E9C 793B              MOV     R1,#LOW crc_table
003E9E 1227CF            LCALL   _SPIFlashRead
   86:         crc = crc_table ^ (crc >> 8);
003EA1 904D91            MOV     DPTR,#crc
003EA4 E0                MOVX    A,@DPTR
003EA5 FC                MOV     R4,A
003EA6 A3                INC     DPTR
003EA7 E0                MOVX    A,@DPTR
003EA8 FD                MOV     R5,A
003EA9 A3                INC     DPTR
003EAA E0                MOVX    A,@DPTR
003EAB FE                MOV     R6,A
003EAC A3                INC     DPTR
003EAD E0                MOVX    A,@DPTR
003EAE FF                MOV     R7,A
003EAF 7808              MOV     R0,#08H
003EB1 12030C            LCALL   ?C?ULSHR
003EB4 904E3B            MOV     DPTR,#crc_table
003EB7 E0                MOVX    A,@DPTR
003EB8 F8                MOV     R0,A
003EB9 A3                INC     DPTR
003EBA E0                MOVX    A,@DPTR
003EBB F9                MOV     R1,A
003EBC A3                INC     DPTR
003EBD E0                MOVX    A,@DPTR
003EBE FA                MOV     R2,A
003EBF A3                INC     DPTR
003EC0 E0                MOVX    A,@DPTR
003EC1 6F                XRL     A,R7
003EC2 FF                MOV     R7,A
003EC3 EA                MOV     A,R2
003EC4 6E                XRL     A,R6
003EC5 FE                MOV     R6,A
003EC6 E9                MOV     A,R1
003EC7 6D                XRL     A,R5
003EC8 FD                MOV     R5,A
003EC9 E8                MOV     A,R0
003ECA 6C                XRL     A,R4
003ECB FC                MOV     R4,A
003ECC 904D91            MOV     DPTR,#crc
003ECF 120332            LCALL   ?C?LSTXDATA
   87:     }
003ED2 904D9C            MOV     DPTR,#i
003ED5 E0                MOVX    A,@DPTR
003ED6 FC                MOV     R4,A
003ED7 A3                INC     DPTR
003ED8 E0                MOVX    A,@DPTR
003ED9 FD                MOV     R5,A
003EDA A3                INC     DPTR
003EDB E0                MOVX    A,@DPTR
003EDC FE                MOV     R6,A
003EDD A3                INC     DPTR
003EDE E0                MOVX    A,@DPTR
003EDF 2401              ADD     A,#01H
003EE1 FF                MOV     R7,A
003EE2 E4                CLR     A
003EE3 3E                ADDC    A,R6
003EE4 FE                MOV     R6,A
003EE5 E4                CLR     A
003EE6 3D                ADDC    A,R5
003EE7 FD                MOV     R5,A
003EE8 E4                CLR     A
003EE9 3C                ADDC    A,R4
003EEA FC                MOV     R4,A
003EEB 904D9C            MOV     DPTR,#i
003EEE 120332            LCALL   ?C?LSTXDATA
003EF1 C121              AJMP    ?C0001?CRC32
003EF3         ?C0002?CRC32:
   88: 
   89:     return crc;
003EF3 904D91            MOV     DPTR,#crc
003EF6 E0                MOVX    A,@DPTR
003EF7 FC                MOV     R4,A
003EF8 A3                INC     DPTR
003EF9 E0                MOVX    A,@DPTR
003EFA FD                MOV     R5,A
003EFB A3                INC     DPTR
003EFC E0                MOVX    A,@DPTR
003EFD FE                MOV     R6,A
003EFE A3                INC     DPTR
003EFF E0                MOVX    A,@DPTR
003F00 FF                MOV     R7,A
   90: }
003F01 22                RET     
----- FUNCTION _cal_crc32_multiple (END) -------


----- FUNCTION QueueInit (BEGIN) -----
 FILE: 'lxProtocol.c'
  496: void QueueInit(void)
  497: {
  498: 	historyUserData.head = 0;
  499: 	historyUserData.tail = 0;
003F02 E4                CLR     A
003F03 904C10            MOV     DPTR,#historyUserData
003F06 F0                MOVX    @DPTR,A
  500: 	historyUserData.size = 0;
003F07 A3                INC     DPTR
003F08 F0                MOVX    @DPTR,A
  501: }
003F09 A3                INC     DPTR
003F0A F0                MOVX    @DPTR,A
  502: 
003F0B 22                RET     
----- FUNCTION QueueInit (END) -------


