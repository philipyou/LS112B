LX51 LINKER/LOCATER V4.41                                                               04/18/2017  16:09:40  PAGE 1





ASSEMBLER CODE PACKING OF MODULE:  OUT\FW (MAIN)


----- FUNCTION main (BEGIN) -----
 FILE: 'main.c'
   20: void main()
   21: {
   22: 	R_Test++;
   23: 	systemInit();
0004C2 904C62            MOV     DPTR,#R_Test
0004C5 E0                MOVX    A,@DPTR
0004C6 04                INC     A
0004C7 F0                MOVX    @DPTR,A
   24: 	while(1) {
0004C8 120FFA            LCALL   systemInit
0004CB         ?C0001?MAIN:
   25: 		BTControlProcess();
   26: 		lxOptProcess();
0004CB 121FDA            LCALL   BTControlProcess
   27: 		//WechatProcess();
0004CE 123ABB            LCALL   lxOptProcess
   28: 		SysStatusProcess();
0004D1 B1A2              ACALL   SysStatusProcess
   29: 		if(sys_state == SYS_ST_RUN) {
0004D3 904E5B            MOV     DPTR,#sys_state
0004D6 E0                MOVX    A,@DPTR
0004D7 B402F1            CJNE    A,#02H,?C0001?MAIN
   30: 			YC_UtilTimerProcess();		
0004DA 1220B9            LCALL   YC_UtilTimerProcess
   31: 			CS_Scale_1186Com();		//1186通信处理
0004DD 91E5              ACALL   CS_Scale_1186Com
   32: 			CS_Scale_Proc();
0004DF 120F9C            LCALL   CS_Scale_Proc
   33: 		}
   34: 	}
0004E2 80E7              SJMP    ?C0001?MAIN
0004E4 22                RET     
----- FUNCTION main (END) -------


----- FUNCTION CS_Scale_1186Com (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   31: void CS_Scale_1186Com(void)
   32: {	
   33: 	
   34: 	if(uartTimeoutCnt < CS_CommTo1186_TimeOut)	 
0004E5 904D68            MOV     DPTR,#uartTimeoutCnt
0004E8 E0                MOVX    A,@DPTR
0004E9 C3                CLR     C
0004EA 9415              SUBB    A,#015H
0004EC 502B              JNC     ?C0003?CS_COMMTO1186
   35: 		{
   36: 		
   37: 			switch(R_Scale_state)
0004EE 904CC5            MOV     DPTR,#R_Scale_state
0004F1 E0                MOVX    A,@DPTR
0004F2 24FE              ADD     A,#0FEH
0004F4 6014              JZ      ?C0006?CS_COMMTO1186
0004F6 04                INC     A
0004F7 24FC              ADD     A,#0FCH
0004F9 5016              JNC     ?C0009?CS_COMMTO1186
0004FB 2405              ADD     A,#05H
0004FD 702D              JNZ     ?C0013?CS_COMMTO1186
   38: 			{
   39: 			case CS_Scale_state_init:
0004FF         ?C0005?CS_COMMTO1186:
   40: 				CS_1186Com_Reset_Proc();			
0004FF F101              ACALL   CS_1186Com_Reset_Proc
   41: 				CS_1186Com_ReadMacAdress_Proc();
000501 12187A            LCALL   CS_1186Com_ReadMacAdress_Proc
   42: 				CS_1186Com_ReadTime_Proc();
000504 B1E2              ACALL   CS_1186Com_ReadTime_Proc
   43: 				CS_1186Com_SetOpenWeight_Proc();
000506 F11B              ACALL   CS_1186Com_SetOpenWeight_Proc
   44: 				CS_1186Com_SetLcd_Proc();
000508 8023              SJMP    CS_1186Com_SetLcd_Proc
   45: 				break;			
   46: 			case CS_Scale_state_standby:
00050A         ?C0006?CS_COMMTO1186:
   47: 				CS_1186Com_SetSleepMode_Proc();
00050A D16D              ACALL   CS_1186Com_SetSleepMode_Proc
   48: 				CS_1186Com_ReadAdZero_Proc();
00050C 1237B5            LCALL   CS_1186Com_ReadAdZero_Proc
   49: 				CS_1186Com_SetLcd_Proc();
00050F 801C              SJMP    CS_1186Com_SetLcd_Proc
   50: 				break;
   51: 			case CS_Scale_state_weighting:
   52: 			case CS_Scale_state_caling:
   53: 			case CS_Scale_state_locking:
000511         ?C0009?CS_COMMTO1186:
   54: 				CS_1186Com_ReadTime_Proc();
000511 B1E2              ACALL   CS_1186Com_ReadTime_Proc
   55: 				CS_1186Com_ReadAdc_Proc();
000513 1236E0            LCALL   CS_1186Com_ReadAdc_Proc
   56: 				CS_1186Com_SetLcd_Proc();
000516 8015              SJMP    CS_1186Com_SetLcd_Proc
   57: 
   58: 				/*
   59: 				if(B_Weight_AdOk == true)
   60: 					{
   61: 					R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplay;
   62: 					B_Weight_LcdOk =false;
   63: 					}
   64: 				if(B_Weight_LcdOk == true)
   65: 					{
   66: 					R_Weight_Com_Coo.now = CS_CommTo1186_ReadAd;	
   67: 					}
   68: 				*/
   69: 				break;
   70: 			default:
   71: 				break;			
   72: 			}		
   73: 		}
000518 22                RET     
000519         ?C0003?CS_COMMTO1186:
   74: 	else
   75: 		{
   76: 		YC_UARTClearBuffer();	// fresh rec buffer
000519 B192              ACALL   YC_UARTClearBuffer
   77: 		uartTimeoutCnt=0;
00051B E4                CLR     A
00051C 904D68            MOV     DPTR,#uartTimeoutCnt
00051F F0                MOVX    @DPTR,A
   78: 		if(R_Weight_Com_Coo.now !=CS_CommTo1186_Null)
000520 904D55            MOV     DPTR,#R_Weight_Com_Coo
000523 E0                MOVX    A,@DPTR
000524 6006              JZ      ?C0013?CS_COMMTO1186
   79: 		R_Weight_Com_Coo.now = R_Weight_Com_Coo.pre;	//re send
000526 A3                INC     DPTR
000527 E0                MOVX    A,@DPTR
000528 904D55            MOV     DPTR,#R_Weight_Com_Coo
00052B F0                MOVX    @DPTR,A
   80: 		}
   81: 
   82: }
00052C         ?C0013?CS_COMMTO1186:
00052C 22                RET     
----- FUNCTION CS_Scale_1186Com (END) -------


----- FUNCTION CS_1186Com_SetLcd_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  191: void CS_1186Com_SetLcd_Proc(void)
  192: {
  193: 
  194: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_LcdDisplay)
00052D 904D55            MOV     DPTR,#R_Weight_Com_Coo
000530 E0                MOVX    A,@DPTR
000531 B4E01E            CJNE    A,#0E0H,?C0029?CS_COMMTO1186
  195: 		{
  196: 		CS_CommTo1186_SendCmd(CS_CommTo1186_LcdDisplay,CS_Lcd_Send_Data);
000534 7B01              MOV     R3,#01H
000536 7A4D              MOV     R2,#HIGH CS_Lcd_Send_Data
000538 7928              MOV     R1,#LOW CS_Lcd_Send_Data
00053A 7FE0              MOV     R7,#0E0H
00053C 12192C            LCALL   _CS_CommTo1186_SendCmd
  197: 		R_Weight_Com_Coo.pre = CS_CommTo1186_LcdDisplay;
00053F 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
000542 74E0              MOV     A,#0E0H
000544 F0                MOVX    @DPTR,A
  198: 		R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplayStandby;
000545 904D55            MOV     DPTR,#R_Weight_Com_Coo
000548 740B              MOV     A,#0BH
00054A F0                MOVX    @DPTR,A
  199: 		uartTimeoutCnt=0;
00054B E4                CLR     A
00054C 904D68            MOV     DPTR,#uartTimeoutCnt
00054F F0                MOVX    @DPTR,A
  200: 		YC_UARTClearBuffer();
000550 B192              ACALL   YC_UARTClearBuffer
  201: 		}
000552         ?C0029?CS_COMMTO1186:
  202: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_LcdDisplayStandby)
000552 904D55            MOV     DPTR,#R_Weight_Com_Coo
000555 E0                MOVX    A,@DPTR
000556 640B              XRL     A,#0BH
000558 7037              JNZ     ?C0036?CS_COMMTO1186
  203: 		{
  204: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 5)==5)
00055A 7B01              MOV     R3,#01H
00055C 7A4D              MOV     R2,#HIGH uartRcvBuf
00055E 7945              MOV     R1,#LOW uartRcvBuf
000560 7D05              MOV     R5,#05H
000562 FC                MOV     R4,A
000563 F1A8              ACALL   _YC_UARTReciveDataExpected
000565 EF                MOV     A,R7
000566 6405              XRL     A,#05H
000568 4E                ORL     A,R6
000569 7026              JNZ     ?C0036?CS_COMMTO1186
  205: 			{
  206: 			if(uartRcvBuf[3] == CS_CommTo1186_LcdDisplay)    
00056B 904D48            MOV     DPTR,#uartRcvBuf+03H
00056E E0                MOVX    A,@DPTR
00056F B4E019            CJNE    A,#0E0H,?C0032?CS_COMMTO1186
  207: 				{
  208: 				if(R_Scale_state==CS_Scale_state_init)
000572 904CC5            MOV     DPTR,#R_Scale_state
000575 E0                MOVX    A,@DPTR
000576 7006              JNZ     ?C0033?CS_COMMTO1186
  209: 					R_Weight_Com_Coo.now = CS_CommTo1186_Null;
000578 904D55            MOV     DPTR,#R_Weight_Com_Coo
00057B F0                MOVX    @DPTR,A
00057C 8006              SJMP    ?C0034?CS_COMMTO1186
00057E         ?C0033?CS_COMMTO1186:
  210: 				else
  211: 					R_Weight_Com_Coo.now = CS_CommTo1186_ReadAd;
00057E 904D55            MOV     DPTR,#R_Weight_Com_Coo
000581 7480              MOV     A,#080H
000583 F0                MOVX    @DPTR,A
000584         ?C0034?CS_COMMTO1186:
  212: 				R_Weight_Com_Coo.sucess=true;		
000584 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
000587 7401              MOV     A,#01H
000589 F0                MOVX    @DPTR,A
  213: 				}
00058A 22                RET     
00058B         ?C0032?CS_COMMTO1186:
  214: 			else
  215: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
00058B 904D68            MOV     DPTR,#uartTimeoutCnt
00058E 7415              MOV     A,#015H
000590 F0                MOVX    @DPTR,A
  216: 			}	
  217: 		}
  218: }
000591         ?C0036?CS_COMMTO1186:
000591 22                RET     
----- FUNCTION CS_1186Com_SetLcd_Proc (END) -------


----- FUNCTION YC_UARTClearBuffer (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  409: void YC_UARTClearBuffer(void)
  410: {
  411: 	REG_UART_RX_PTR_R = REG_UART_RX_PTR_W;
  412: 	//REG_UART_TX_PTR_W = REG_UART_TX_PTR_R;
000592 908116            MOV     DPTR,#08116H
000595 E0                MOVX    A,@DPTR
000596 FF                MOV     R7,A
000597 A3                INC     DPTR
000598 E0                MOVX    A,@DPTR
000599 908058            MOV     DPTR,#08058H
00059C CF                XCH     A,R7
00059D F0                MOVX    @DPTR,A
00059E A3                INC     DPTR
00059F EF                MOV     A,R7
0005A0 F0                MOVX    @DPTR,A
  413: }
0005A1 22                RET     
----- FUNCTION YC_UARTClearBuffer (END) -------


----- FUNCTION SysStatusProcess (BEGIN) -----
 FILE: 'system.c'
  174: void SysStatusProcess(void) 
  175: {
  176: 	if( sys_state == SYS_ST_IDLE) {	//can enter LPM
  177: 		if(bleConnStatus ==BLE_STATUS_DISCONN)
0005A2 904E5B            MOV     DPTR,#sys_state
0005A5 E0                MOVX    A,@DPTR
0005A6 B40121            CJNE    A,#01H,?C0029?SYSTEM
  178: 		{
0005A9 904C5B            MOV     DPTR,#bleConnStatus
0005AC E0                MOVX    A,@DPTR
0005AD 7032              JNZ     ?C0034?SYSTEM
  179: 			YC_UARTWaitSendData();
  180: 			YC_UARTClearBuffer();
0005AF D15B              ACALL   YC_UARTWaitSendData
  181: 		    	LPM_ENABLE();
0005B1 B192              ACALL   YC_UARTClearBuffer
  182: 
0005B3 9049FE            MOV     DPTR,#049FEH
0005B6 7401              MOV     A,#01H
0005B8 F0                MOVX    @DPTR,A
  183: 			btCmdBuf.len = 0x01;
0005B9 904C63            MOV     DPTR,#btCmdBuf
0005BC F0                MOVX    @DPTR,A
  184: 			btCmdBuf.DATA[0] = CS_CMD_SLEEP_REQ;
0005BD A3                INC     DPTR
0005BE 7420              MOV     A,#020H
0005C0 F0                MOVX    @DPTR,A
  185: 			BT_CmdFifoIn(&btCmdBuf);
0005C1 7B01              MOV     R3,#01H
0005C3 7A4C              MOV     R2,#HIGH btCmdBuf
0005C5 7963              MOV     R1,#LOW btCmdBuf
0005C7 0227F2            LJMP    _BT_CmdFifoIn
  186: 
  187: 				
  188: 		}
  189: 	}
0005CA         ?C0029?SYSTEM:
  190: 	else if( sys_state == SYS_ST_SLEEP) {//can enter LPM
0005CA 904E5B            MOV     DPTR,#sys_state
0005CD E0                MOVX    A,@DPTR
0005CE B4030B            CJNE    A,#03H,?C0032?SYSTEM
  191: 		YC_UARTWaitSendData();
0005D1 D15B              ACALL   YC_UARTWaitSendData
  192: 		YC_UARTClearBuffer();
0005D3 B192              ACALL   YC_UARTClearBuffer
  193: 	    	LPM_ENABLE();
0005D5 9049FE            MOV     DPTR,#049FEH
0005D8 7401              MOV     A,#01H
0005DA F0                MOVX    @DPTR,A
  194: 	} 
0005DB 22                RET     
0005DC         ?C0032?SYSTEM:
  195: 	else {
  196: 		LPM_DISABLE();
0005DC 9049FE            MOV     DPTR,#049FEH
0005DF E4                CLR     A
0005E0 F0                MOVX    @DPTR,A
  197: 	}
  198: }
0005E1         ?C0034?SYSTEM:
0005E1 22                RET     
----- FUNCTION SysStatusProcess (END) -------


----- FUNCTION CS_1186Com_ReadTime_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  222: void CS_1186Com_ReadTime_Proc(void)
  223: {
  224: 	//static u8_t xdata temp=0;
  225: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadTime)
0005E2 904D55            MOV     DPTR,#R_Weight_Com_Coo
0005E5 E0                MOVX    A,@DPTR
0005E6 B4821E            CJNE    A,#082H,?C0037?CS_COMMTO1186
  226: 		{
  227: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadTime,0);
0005E9 7B00              MOV     R3,#00H
0005EB 7A00              MOV     R2,#00H
0005ED 7900              MOV     R1,#00H
0005EF 7F82              MOV     R7,#082H
0005F1 12192C            LCALL   _CS_CommTo1186_SendCmd
  228: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadTime;
0005F4 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
0005F7 7482              MOV     A,#082H
0005F9 F0                MOVX    @DPTR,A
  229: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadTimeStandby;
0005FA 904D55            MOV     DPTR,#R_Weight_Com_Coo
0005FD 7403              MOV     A,#03H
0005FF F0                MOVX    @DPTR,A
  230: 		uartTimeoutCnt=0;
000600 E4                CLR     A
000601 904D68            MOV     DPTR,#uartTimeoutCnt
000604 F0                MOVX    @DPTR,A
  231: 		YC_UARTClearBuffer();
000605 B192              ACALL   YC_UARTClearBuffer
  232: 		}
000607         ?C0037?CS_COMMTO1186:
  233: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadTimeStandby)
000607 904D55            MOV     DPTR,#R_Weight_Com_Coo
00060A E0                MOVX    A,@DPTR
00060B 6403              XRL     A,#03H
00060D 704B              JNZ     ?C0042?CS_COMMTO1186
  234: 		{
  235: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 9)==9)
00060F 7B01              MOV     R3,#01H
000611 7A4D              MOV     R2,#HIGH uartRcvBuf
000613 7945              MOV     R1,#LOW uartRcvBuf
000615 7D09              MOV     R5,#09H
000617 FC                MOV     R4,A
000618 F1A8              ACALL   _YC_UARTReciveDataExpected
00061A EF                MOV     A,R7
00061B 6409              XRL     A,#09H
00061D 4E                ORL     A,R6
00061E 703A              JNZ     ?C0042?CS_COMMTO1186
  236: 			{
  237: 			if(uartRcvBuf[3] == CS_CommTo1186_ReadTime)    
000620 904D48            MOV     DPTR,#uartRcvBuf+03H
000623 E0                MOVX    A,@DPTR
000624 B4822D            CJNE    A,#082H,?C0040?CS_COMMTO1186
  238: 				{			
  239: 				//读到时间的操作
  240: 				R_1186_RTC[3] = uartRcvBuf[4];
000627 A3                INC     DPTR
000628 E0                MOVX    A,@DPTR
000629 904CD6            MOV     DPTR,#R_1186_RTC+03H
00062C F0                MOVX    @DPTR,A
  241: 				R_1186_RTC[2] = uartRcvBuf[5];
00062D 904D4A            MOV     DPTR,#uartRcvBuf+05H
000630 E0                MOVX    A,@DPTR
000631 904CD5            MOV     DPTR,#R_1186_RTC+02H
000634 F0                MOVX    @DPTR,A
  242: 				R_1186_RTC[1] = uartRcvBuf[6];
000635 904D4B            MOV     DPTR,#uartRcvBuf+06H
000638 E0                MOVX    A,@DPTR
000639 904CD4            MOV     DPTR,#R_1186_RTC+01H
00063C F0                MOVX    @DPTR,A
  243: 				R_1186_RTC[0] = uartRcvBuf[7];
00063D 904D4C            MOV     DPTR,#uartRcvBuf+07H
000640 E0                MOVX    A,@DPTR
000641 904CD3            MOV     DPTR,#R_1186_RTC
000644 F0                MOVX    @DPTR,A
  244: 
  245: 			
  246: 				/*
  247: 				R_Debug_temp=R_1186RTC.R_32;
  248: 				CS_ScaleDisplay_Debug();
  249: 				while(temp==2);
  250: 				temp=2;
  251: 				*/
  252: 				/*
  253: 				R_1186RTC.R_BYTE[3]=  uartRcvBuf[4];
  254: 				R_1186RTC.R_BYTE[2] = uartRcvBuf[5];
  255: 				R_1186RTC.R_BYTE[1] = uartRcvBuf[6];
  256: 				R_1186RTC.R_BYTE[0] = uartRcvBuf[7];
  257: 				/*
  258: 				R_1186_RTC = uartRcvBuf[4];
  259: 				R_1186_RTC = R_1186_RTC<<8;
  260: 				R_1186_RTC |= uartRcvBuf[5];
  261: 				R_1186_RTC = R_1186_RTC<<8;
  262: 				R_1186_RTC |= uartRcvBuf[6];
  263: 				R_1186_RTC = R_1186_RTC<<8;
  264: 				R_1186_RTC |= uartRcvBuf[7];
  265: 				*/
  266: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
000645 E4                CLR     A
000646 904D55            MOV     DPTR,#R_Weight_Com_Coo
000649 F0                MOVX    @DPTR,A
  267: 				R_Weight_Com_Coo.sucess=true;
00064A 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
00064D 04                INC     A
00064E F0                MOVX    @DPTR,A
  268: 				B_Weight_AdOk = true;
00064F 904CD7            MOV     DPTR,#B_Weight_AdOk
000652 F0                MOVX    @DPTR,A
  269: 						
  270: 				}
000653 22                RET     
000654         ?C0040?CS_COMMTO1186:
  271: 			else
  272: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
000654 904D68            MOV     DPTR,#uartTimeoutCnt
000657 7415              MOV     A,#015H
000659 F0                MOVX    @DPTR,A
  273: 			}	
  274: 		}
  275: }
00065A         ?C0042?CS_COMMTO1186:
00065A 22                RET     
----- FUNCTION CS_1186Com_ReadTime_Proc (END) -------


----- FUNCTION YC_UARTWaitSendData (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  373: void YC_UARTWaitSendData(void)
  374: {
  375: 	while(ESWAP(REG_UART_TX_ITEMS));
00065B         ?C0009?YC_PERIPHERAL:
  376: }
00065B 90810E            MOV     DPTR,#0810EH
00065E A3                INC     DPTR
00065F E0                MOVX    A,@DPTR
000660 FC                MOV     R4,A
000661 90810E            MOV     DPTR,#0810EH
000664 E0                MOVX    A,@DPTR
000665 FF                MOV     R7,A
000666 EC                MOV     A,R4
000667 FE                MOV     R6,A
000668 EF                MOV     A,R7
000669 4E                ORL     A,R6
00066A 70EF              JNZ     ?C0009?YC_PERIPHERAL
  377: 
00066C 22                RET     
----- FUNCTION YC_UARTWaitSendData (END) -------


----- FUNCTION CS_1186Com_SetSleepMode_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  279: void CS_1186Com_SetSleepMode_Proc(void)
  280: {
  281: 	u16_t	R_AD_Zero;
  282: 	
  283: 	R_AD_Zero = CS_Scale_ZeroProc(GetRunningZero,0);
00066D E4                CLR     A
00066E FD                MOV     R5,A
00066F FC                MOV     R4,A
000670 7F01              MOV     R7,#01H
000672 1212FB            LCALL   _CS_Scale_ZeroProc
;---- Variable 'R_AD_Zero' assigned to Register 'R4/R5' ----
000675 AD07              MOV     R5,AR7
000677 AC06              MOV     R4,AR6
  284: 		
  285: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetSleepMode)
000679 904D55            MOV     DPTR,#R_Weight_Com_Coo
00067C E0                MOVX    A,@DPTR
00067D 64A0              XRL     A,#0A0H
00067F 704E              JNZ     ?C0043?CS_COMMTO1186
  286: 		{
  287: 		
  288: 		uartTxBuf[0]= 0x91;
000681 904D58            MOV     DPTR,#uartTxBuf
000684 7491              MOV     A,#091H
000686 F0                MOVX    @DPTR,A
  289: 		uartTxBuf[1]= R_AD_Zero<<6;
000687 ED                MOV     A,R5
000688 7806              MOV     R0,#06H
00068A         ?C0082?CS_COMMTO1186:
00068A C3                CLR     C
00068B 33                RLC     A
00068C CE                XCH     A,R6
00068D 33                RLC     A
00068E CE                XCH     A,R6
00068F D8F9              DJNZ    R0,?C0082?CS_COMMTO1186
000691 904D59            MOV     DPTR,#uartTxBuf+01H
000694 F0                MOVX    @DPTR,A
  290: 		uartTxBuf[2]= R_AD_Zero>>2;
000695 ED                MOV     A,R5
000696 AE04              MOV     R6,AR4
000698 7802              MOV     R0,#02H
00069A         ?C0083?CS_COMMTO1186:
00069A CE                XCH     A,R6
00069B C3                CLR     C
00069C 13                RRC     A
00069D CE                XCH     A,R6
00069E 13                RRC     A
00069F D8F9              DJNZ    R0,?C0083?CS_COMMTO1186
0006A1 904D5A            MOV     DPTR,#uartTxBuf+02H
0006A4 F0                MOVX    @DPTR,A
  291: 		uartTxBuf[3]= R_AD_Zero>>10;
0006A5 EC                MOV     A,R4
0006A6 13                RRC     A
0006A7 13                RRC     A
0006A8 543F              ANL     A,#03FH
0006AA A3                INC     DPTR
0006AB F0                MOVX    @DPTR,A
  292: 		uartTxBuf[3]|= 0x80;
0006AC 4480              ORL     A,#080H
0006AE F0                MOVX    @DPTR,A
  293: 		CS_CommTo1186_SendCmd(CS_CommTo1186_SetSleepMode,uartTxBuf);
0006AF 7B01              MOV     R3,#01H
0006B1 7A4D              MOV     R2,#HIGH uartTxBuf
0006B3 7958              MOV     R1,#LOW uartTxBuf
0006B5 7FA0              MOV     R7,#0A0H
0006B7 12192C            LCALL   _CS_CommTo1186_SendCmd
  294: 		
  295: 		YC_UARTWaitSendData();
0006BA D15B              ACALL   YC_UARTWaitSendData
  296: 		
  297: 		R_Weight_Com_Coo.pre = CS_CommTo1186_SetSleepMode;
0006BC 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
0006BF 74A0              MOV     A,#0A0H
0006C1 F0                MOVX    @DPTR,A
  298: 		R_Weight_Com_Coo.now = CS_CommTo1186_SetSleepModeStandby;
0006C2 904D55            MOV     DPTR,#R_Weight_Com_Coo
0006C5 7407              MOV     A,#07H
0006C7 F0                MOVX    @DPTR,A
  299: 		uartTimeoutCnt=0;
0006C8 E4                CLR     A
0006C9 904D68            MOV     DPTR,#uartTimeoutCnt
0006CC F0                MOVX    @DPTR,A
  300: 		YC_UARTClearBuffer();
0006CD B192              ACALL   YC_UARTClearBuffer
  301: 		}
0006CF         ?C0043?CS_COMMTO1186:
  302: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetSleepModeStandby)
0006CF 904D55            MOV     DPTR,#R_Weight_Com_Coo
0006D2 E0                MOVX    A,@DPTR
0006D3 B4072A            CJNE    A,#07H,?C0048?CS_COMMTO1186
  303: 		{
  304: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 5)==5)
0006D6 7B01              MOV     R3,#01H
0006D8 7A4D              MOV     R2,#HIGH uartRcvBuf
0006DA 7945              MOV     R1,#LOW uartRcvBuf
0006DC 7D05              MOV     R5,#05H
0006DE 7C00              MOV     R4,#00H
0006E0 F1A8              ACALL   _YC_UARTReciveDataExpected
0006E2 EF                MOV     A,R7
0006E3 6405              XRL     A,#05H
0006E5 4E                ORL     A,R6
0006E6 7018              JNZ     ?C0048?CS_COMMTO1186
  305: 			{
  306: 			if(uartRcvBuf[3] == CS_CommTo1186_SetSleepMode)    
0006E8 904D48            MOV     DPTR,#uartRcvBuf+03H
0006EB E0                MOVX    A,@DPTR
0006EC B4A00B            CJNE    A,#0A0H,?C0046?CS_COMMTO1186
  307: 				{			
  308: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
0006EF E4                CLR     A
0006F0 904D55            MOV     DPTR,#R_Weight_Com_Coo
0006F3 F0                MOVX    @DPTR,A
  309: 				R_Weight_Com_Coo.sucess=true;	
0006F4 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
0006F7 04                INC     A
0006F8 F0                MOVX    @DPTR,A
  310: 				}
0006F9 22                RET     
0006FA         ?C0046?CS_COMMTO1186:
  311: 			else
  312: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
0006FA 904D68            MOV     DPTR,#uartTimeoutCnt
0006FD 7415              MOV     A,#015H
0006FF F0                MOVX    @DPTR,A
  313: 			}	
  314: 		}
  315: }
000700         ?C0048?CS_COMMTO1186:
000700 22                RET     
----- FUNCTION CS_1186Com_SetSleepMode_Proc (END) -------


----- FUNCTION CS_1186Com_Reset_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  396: void CS_1186Com_Reset_Proc(void)
  397: {
  398: 
  399: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_Reset)
000701 904D55            MOV     DPTR,#R_Weight_Com_Coo
000704 E0                MOVX    A,@DPTR
000705 B4C512            CJNE    A,#0C5H,?C0062?CS_COMMTO1186
  400: 		{
  401: 		CS_CommTo1186_SendCmd(CS_CommTo1186_Reset,0);
000708 7B00              MOV     R3,#00H
00070A 7A00              MOV     R2,#00H
00070C 7900              MOV     R1,#00H
00070E 7FC5              MOV     R7,#0C5H
000710 12192C            LCALL   _CS_CommTo1186_SendCmd
  402: 		YC_UARTClearBuffer();
000713 B192              ACALL   YC_UARTClearBuffer
  403: 		R_Weight_Com_Coo.now=CS_CommTo1186_Null;
000715 E4                CLR     A
000716 904D55            MOV     DPTR,#R_Weight_Com_Coo
000719 F0                MOVX    @DPTR,A
  404: 		
  405: 		}
  406: 													
  407: }
00071A         ?C0062?CS_COMMTO1186:
00071A 22                RET     
----- FUNCTION CS_1186Com_Reset_Proc (END) -------


----- FUNCTION CS_1186Com_SetOpenWeight_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  320: void CS_1186Com_SetOpenWeight_Proc(void)
  321: {
  322: 	u16_t	R_Open_Weight;
  323: 	R_Open_Weight = CS_Scale_CaliProc(CaliProcGetOpenWeight);	//获取开机重量值
00071B 7F07              MOV     R7,#07H
00071D 120A08            LCALL   _CS_Scale_CaliProc
;---- Variable 'R_Open_Weight' assigned to Register 'R4/R5' ----
000720 AD07              MOV     R5,AR7
000722 AC06              MOV     R4,AR6
  324: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetOpenWeight)
000724 904D55            MOV     DPTR,#R_Weight_Com_Coo
000727 E0                MOVX    A,@DPTR
000728 64A1              XRL     A,#0A1H
00072A 704A              JNZ     ?C0049?CS_COMMTO1186
  325: 		{
  326: 		uartTxBuf[0]= 0x20;
00072C 904D58            MOV     DPTR,#uartTxBuf
00072F 7420              MOV     A,#020H
000731 F0                MOVX    @DPTR,A
  327: 		uartTxBuf[1]= R_Open_Weight<<6;
000732 ED                MOV     A,R5
000733 7806              MOV     R0,#06H
000735         ?C0084?CS_COMMTO1186:
000735 C3                CLR     C
000736 33                RLC     A
000737 CE                XCH     A,R6
000738 33                RLC     A
000739 CE                XCH     A,R6
00073A D8F9              DJNZ    R0,?C0084?CS_COMMTO1186
00073C FB                MOV     R3,A
00073D 904D59            MOV     DPTR,#uartTxBuf+01H
000740 F0                MOVX    @DPTR,A
  328: 		uartTxBuf[2]= R_Open_Weight>>2;
000741 ED                MOV     A,R5
000742 AE04              MOV     R6,AR4
000744 7802              MOV     R0,#02H
000746         ?C0085?CS_COMMTO1186:
000746 CE                XCH     A,R6
000747 C3                CLR     C
000748 13                RRC     A
000749 CE                XCH     A,R6
00074A 13                RRC     A
00074B D8F9              DJNZ    R0,?C0085?CS_COMMTO1186
00074D FF                MOV     R7,A
00074E 904D5A            MOV     DPTR,#uartTxBuf+02H
000751 F0                MOVX    @DPTR,A
  329: 		uartTxBuf[3]= R_Open_Weight<<6;
000752 A3                INC     DPTR
000753 EB                MOV     A,R3
000754 F0                MOVX    @DPTR,A
  330: 		uartTxBuf[4]= R_Open_Weight>>2;	
000755 A3                INC     DPTR
000756 EF                MOV     A,R7
000757 F0                MOVX    @DPTR,A
  331: 		CS_CommTo1186_SendCmd(CS_CommTo1186_SetOpenWeight,uartTxBuf);
000758 7B01              MOV     R3,#01H
00075A 7A4D              MOV     R2,#HIGH uartTxBuf
00075C 7958              MOV     R1,#LOW uartTxBuf
00075E 7FA1              MOV     R7,#0A1H
000760 12192C            LCALL   _CS_CommTo1186_SendCmd
  332: 		R_Weight_Com_Coo.pre = CS_CommTo1186_SetOpenWeight;
000763 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
000766 74A1              MOV     A,#0A1H
000768 F0                MOVX    @DPTR,A
  333: 		R_Weight_Com_Coo.now = CS_CommTo1186_SetOpenWeightStandby;
000769 904D55            MOV     DPTR,#R_Weight_Com_Coo
00076C 7408              MOV     A,#08H
00076E F0                MOVX    @DPTR,A
  334: 		uartTimeoutCnt=0;
00076F E4                CLR     A
000770 904D68            MOV     DPTR,#uartTimeoutCnt
000773 F0                MOVX    @DPTR,A
  335: 		YC_UARTClearBuffer();
000774 B192              ACALL   YC_UARTClearBuffer
  336: 		}
000776         ?C0049?CS_COMMTO1186:
  337: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetOpenWeightStandby)
000776 904D55            MOV     DPTR,#R_Weight_Com_Coo
000779 E0                MOVX    A,@DPTR
00077A B4082A            CJNE    A,#08H,?C0054?CS_COMMTO1186
  338: 		{
  339: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 5)==5)
00077D 7B01              MOV     R3,#01H
00077F 7A4D              MOV     R2,#HIGH uartRcvBuf
000781 7945              MOV     R1,#LOW uartRcvBuf
000783 7D05              MOV     R5,#05H
000785 7C00              MOV     R4,#00H
000787 F1A8              ACALL   _YC_UARTReciveDataExpected
000789 EF                MOV     A,R7
00078A 6405              XRL     A,#05H
00078C 4E                ORL     A,R6
00078D 7018              JNZ     ?C0054?CS_COMMTO1186
  340: 			{
  341: 			if(uartRcvBuf[3] == CS_CommTo1186_SetOpenWeight)    
00078F 904D48            MOV     DPTR,#uartRcvBuf+03H
000792 E0                MOVX    A,@DPTR
000793 B4A10B            CJNE    A,#0A1H,?C0052?CS_COMMTO1186
  342: 				{			
  343: 				//读到时间的操作
  344: 				//R_Debug_temp=uartRcvBuf[5];
  345: 				
  346: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
000796 E4                CLR     A
000797 904D55            MOV     DPTR,#R_Weight_Com_Coo
00079A F0                MOVX    @DPTR,A
  347: 				R_Weight_Com_Coo.sucess=true;
00079B 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
00079E 04                INC     A
00079F F0                MOVX    @DPTR,A
  348: 				
  349: 						
  350: 				}
0007A0 22                RET     
0007A1         ?C0052?CS_COMMTO1186:
  351: 			else
  352: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
0007A1 904D68            MOV     DPTR,#uartTimeoutCnt
0007A4 7415              MOV     A,#015H
0007A6 F0                MOVX    @DPTR,A
  353: 			}	
  354: 		}
  355: }
0007A7         ?C0054?CS_COMMTO1186:
0007A7 22                RET     
----- FUNCTION CS_1186Com_SetOpenWeight_Proc (END) -------


----- FUNCTION _YC_UARTReciveDataExpected (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  378: u16_t YC_UARTReciveDataExpected(u8_t* pbuff, u16_t len)
  379: {
0007A8 904DCC            MOV     DPTR,#pbuff
0007AB EB                MOV     A,R3
0007AC F0                MOVX    @DPTR,A
0007AD A3                INC     DPTR
0007AE EA                MOV     A,R2
0007AF F0                MOVX    @DPTR,A
0007B0 A3                INC     DPTR
0007B1 E9                MOV     A,R1
0007B2 F0                MOVX    @DPTR,A
0007B3 A3                INC     DPTR
0007B4 EC                MOV     A,R4
0007B5 F0                MOVX    @DPTR,A
0007B6 A3                INC     DPTR
0007B7 ED                MOV     A,R5
0007B8 F0                MOVX    @DPTR,A
  380: 	int i = 0;
  381: 	u8_t xdata* rrptr = (u8_t *)ESWAP(REG_UART_RX_PTR_R);
0007B9 E4                CLR     A
0007BA A3                INC     DPTR
0007BB F0                MOVX    @DPTR,A
0007BC A3                INC     DPTR
0007BD F0                MOVX    @DPTR,A
  382: 
0007BE 908058            MOV     DPTR,#08058H
0007C1 A3                INC     DPTR
0007C2 E0                MOVX    A,@DPTR
0007C3 FC                MOV     R4,A
0007C4 908058            MOV     DPTR,#08058H
0007C7 E0                MOVX    A,@DPTR
0007C8 FF                MOV     R7,A
0007C9 EC                MOV     A,R4
0007CA FE                MOV     R6,A
0007CB EF                MOV     A,R7
0007CC 904DD3            MOV     DPTR,#rrptr
0007CF EE                MOV     A,R6
0007D0 F0                MOVX    @DPTR,A
0007D1 A3                INC     DPTR
0007D2 EF                MOV     A,R7
0007D3 F0                MOVX    @DPTR,A
  383: 	if(ESWAP(REG_UART_RX_ITEMS)<len)
0007D4 908112            MOV     DPTR,#08112H
0007D7 A3                INC     DPTR
0007D8 E0                MOVX    A,@DPTR
0007D9 FC                MOV     R4,A
0007DA 908112            MOV     DPTR,#08112H
0007DD E0                MOVX    A,@DPTR
0007DE FF                MOV     R7,A
0007DF EC                MOV     A,R4
0007E0 FE                MOV     R6,A
0007E1 EF                MOV     A,R7
0007E2 D3                SETB    C
0007E3 904DD0            MOV     DPTR,#len+01H
0007E6 E0                MOVX    A,@DPTR
0007E7 9F                SUBB    A,R7
0007E8 904DCF            MOV     DPTR,#len
0007EB E0                MOVX    A,@DPTR
0007EC 9E                SUBB    A,R6
0007ED 4004              JC      ?C0012?YC_PERIPHERAL
  384: 	{
  385: 		return false;
0007EF E4                CLR     A
0007F0 FE                MOV     R6,A
0007F1 FF                MOV     R7,A
0007F2 22                RET     
  386: 	}
0007F3         ?C0012?YC_PERIPHERAL:
  387: 
  388: 	for(i=0;i<len;i++)
0007F3 E4                CLR     A
0007F4 904DD1            MOV     DPTR,#i
0007F7 F0                MOVX    @DPTR,A
0007F8 A3                INC     DPTR
0007F9 F0                MOVX    @DPTR,A
0007FA         ?C0014?YC_PERIPHERAL:
0007FA 904DCF            MOV     DPTR,#len
0007FD E0                MOVX    A,@DPTR
0007FE FE                MOV     R6,A
0007FF A3                INC     DPTR
000800 E0                MOVX    A,@DPTR
000801 FF                MOV     R7,A
000802 C3                CLR     C
000803 904DD2            MOV     DPTR,#i+01H
000806 E0                MOVX    A,@DPTR
000807 9F                SUBB    A,R7
000808 904DD1            MOV     DPTR,#i
00080B E0                MOVX    A,@DPTR
00080C 9E                SUBB    A,R6
00080D 4002              JC      $ + 4H
00080F 01CD              AJMP    ?C0015?YC_PERIPHERAL
  389: 	{
  390: 		memcpy(pbuff++, rrptr++, 1);
000811 904DD3            MOV     DPTR,#rrptr
000814 E4                CLR     A
000815 75F001            MOV     B,#01H
000818 1201C8            LCALL   ?C?ILDIX
00081B FA                MOV     R2,A
00081C A9F0              MOV     R1,B
00081E 7B01              MOV     R3,#01H
000820 C003              PUSH    AR3
000822 904DCC            MOV     DPTR,#pbuff
000825 E0                MOVX    A,@DPTR
000826 FB                MOV     R3,A
000827 A3                INC     DPTR
000828 E4                CLR     A
000829 75F001            MOV     B,#01H
00082C 1201C8            LCALL   ?C?ILDIX
00082F A8F0              MOV     R0,B
000831 FC                MOV     R4,A
000832 AD03              MOV     R5,AR3
000834 D003              POP     AR3
000836 7E00              MOV     R6,#00H
000838 7F01              MOV     R7,#01H
00083A 1200D3            LCALL   ?C?COPY
  391: 
  392: 		if((short)rrptr == ESWAP(REG_UART_RX_ADDR_E) + 1)		//rrptr reach the end of buffer
00083D 908056            MOV     DPTR,#08056H
000840 A3                INC     DPTR
000841 E0                MOVX    A,@DPTR
000842 FC                MOV     R4,A
000843 908056            MOV     DPTR,#08056H
000846 E0                MOVX    A,@DPTR
000847 FF                MOV     R7,A
000848 EC                MOV     A,R4
000849 FE                MOV     R6,A
00084A EF                MOV     A,R7
00084B 2401              ADD     A,#01H
00084D FF                MOV     R7,A
00084E E4                CLR     A
00084F 3E                ADDC    A,R6
000850 FE                MOV     R6,A
000851 904DD3            MOV     DPTR,#rrptr
000854 E0                MOVX    A,@DPTR
000855 FC                MOV     R4,A
000856 A3                INC     DPTR
000857 E0                MOVX    A,@DPTR
000858 B5071A            CJNE    A,AR7,?C0017?YC_PERIPHERAL
00085B EE                MOV     A,R6
00085C B50416            CJNE    A,AR4,?C0017?YC_PERIPHERAL
  393: 		{
  394: 			rrptr = (u8_t *)ESWAP(REG_UART_RX_ADDR_S);
00085F 908054            MOV     DPTR,#08054H
000862 A3                INC     DPTR
000863 E0                MOVX    A,@DPTR
000864 FC                MOV     R4,A
000865 908054            MOV     DPTR,#08054H
000868 E0                MOVX    A,@DPTR
000869 FF                MOV     R7,A
00086A EC                MOV     A,R4
00086B FE                MOV     R6,A
00086C EF                MOV     A,R7
00086D 904DD3            MOV     DPTR,#rrptr
000870 EE                MOV     A,R6
000871 F0                MOVX    @DPTR,A
000872 A3                INC     DPTR
000873 EF                MOV     A,R7
000874 F0                MOVX    @DPTR,A
  395: 		}
000875         ?C0017?YC_PERIPHERAL:
  396: 
  397: 		if((short)rrptr == ESWAP(REG_UART_RX_PTR_W) )	//read all data already
000875 908116            MOV     DPTR,#08116H
000878 A3                INC     DPTR
000879 E0                MOVX    A,@DPTR
00087A FC                MOV     R4,A
00087B 908116            MOV     DPTR,#08116H
00087E E0                MOVX    A,@DPTR
00087F FF                MOV     R7,A
000880 EC                MOV     A,R4
000881 FE                MOV     R6,A
000882 EF                MOV     A,R7
000883 904DD3            MOV     DPTR,#rrptr
000886 E0                MOVX    A,@DPTR
000887 FC                MOV     R4,A
000888 A3                INC     DPTR
000889 E0                MOVX    A,@DPTR
00088A FD                MOV     R5,A
00088B EF                MOV     A,R7
00088C 6D                XRL     A,R5
00088D 7002              JNZ     ?C0025?YC_PERIPHERAL
00088F EE                MOV     A,R6
000890 6C                XRL     A,R4
000891         ?C0025?YC_PERIPHERAL:
000891 7029              JNZ     ?C0016?YC_PERIPHERAL
  398: 		{
  399: 			REG_UART_RX_PTR_R = ESWAP((short)rrptr);
000893 904DD3            MOV     DPTR,#rrptr
000896 E0                MOVX    A,@DPTR
000897 FE                MOV     R6,A
000898 A3                INC     DPTR
000899 E0                MOVX    A,@DPTR
00089A FF                MOV     R7,A
00089B EC                MOV     A,R4
00089C FF                MOV     R7,A
00089D 33                RLC     A
00089E 95E0              SUBB    A,ACC
0008A0 AB07              MOV     R3,AR7
0008A2 ED                MOV     A,R5
0008A3 FF                MOV     R7,A
0008A4 EB                MOV     A,R3
0008A5 908058            MOV     DPTR,#08058H
0008A8 CF                XCH     A,R7
0008A9 F0                MOVX    @DPTR,A
0008AA A3                INC     DPTR
0008AB EF                MOV     A,R7
0008AC F0                MOVX    @DPTR,A
  400: 			return (i+1);
0008AD 904DD2            MOV     DPTR,#i+01H
0008B0 E0                MOVX    A,@DPTR
0008B1 2401              ADD     A,#01H
0008B3 FF                MOV     R7,A
0008B4 904DD1            MOV     DPTR,#i
0008B7 E0                MOVX    A,@DPTR
0008B8 3400              ADDC    A,#00H
0008BA FE                MOV     R6,A
0008BB 22                RET     
  401: 		}
  402: 	}
0008BC         ?C0016?YC_PERIPHERAL:
0008BC 904DD2            MOV     DPTR,#i+01H
0008BF E0                MOVX    A,@DPTR
0008C0 04                INC     A
0008C1 F0                MOVX    @DPTR,A
0008C2 7006              JNZ     ?C0026?YC_PERIPHERAL
0008C4 904DD1            MOV     DPTR,#i
0008C7 E0                MOVX    A,@DPTR
0008C8 04                INC     A
0008C9 F0                MOVX    @DPTR,A
0008CA         ?C0026?YC_PERIPHERAL:
0008CA 0207FA            LJMP    ?C0014?YC_PERIPHERAL
0008CD         ?C0015?YC_PERIPHERAL:
  403: 
  404: 	REG_UART_RX_PTR_R = ESWAP((short)rrptr);
0008CD 904DD3            MOV     DPTR,#rrptr
0008D0 E0                MOVX    A,@DPTR
0008D1 FE                MOV     R6,A
0008D2 A3                INC     DPTR
0008D3 E0                MOVX    A,@DPTR
0008D4 FF                MOV     R7,A
0008D5 FD                MOV     R5,A
0008D6 AC06              MOV     R4,AR6
0008D8 EC                MOV     A,R4
0008D9 FF                MOV     R7,A
0008DA 33                RLC     A
0008DB 95E0              SUBB    A,ACC
0008DD AB07              MOV     R3,AR7
0008DF ED                MOV     A,R5
0008E0 FF                MOV     R7,A
0008E1 EB                MOV     A,R3
0008E2 908058            MOV     DPTR,#08058H
0008E5 CF                XCH     A,R7
0008E6 F0                MOVX    @DPTR,A
0008E7 A3                INC     DPTR
0008E8 EF                MOV     A,R7
0008E9 F0                MOVX    @DPTR,A
  405: 	
  406: 	return len;
0008EA 904DCF            MOV     DPTR,#len
0008ED E0                MOVX    A,@DPTR
0008EE FE                MOV     R6,A
0008EF A3                INC     DPTR
0008F0 E0                MOVX    A,@DPTR
0008F1 FF                MOV     R7,A
  407: }
0008F2 22                RET     
----- FUNCTION _YC_UARTReciveDataExpected (END) -------


----- FUNCTION SoftTimer_10mSCallback (BEGIN) -----
 FILE: 'system.c'
   44: void SoftTimer_10mSCallback(void)
   45: {
   46: 	static u8_t count;
   47: 	YC_UtilTimerStartMs(10, SoftTimer_10mSCallback, &SoftTimer_10msTimerID);
0008F3 7BFF              MOV     R3,#0FFH
0008F5 7A08              MOV     R2,#HIGH SoftTimer_10mSCallback
0008F7 79F3              MOV     R1,#LOW SoftTimer_10mSCallback
0008F9 904DDA            MOV     DPTR,#?_YC_UtilTimerStartMs?BYTE+05H
0008FC 744E              MOV     A,#HIGH SoftTimer_10msTimerID
0008FE F0                MOVX    @DPTR,A
0008FF A3                INC     DPTR
000900 7440              MOV     A,#LOW SoftTimer_10msTimerID
000902 F0                MOVX    @DPTR,A
000903 7F0A              MOV     R7,#0AH
000905 7E00              MOV     R6,#00H
000907 121189            LCALL   _YC_UtilTimerStartMs
   48: 	//add user function
   49: 	if(uartTimeoutCnt<255) {
00090A 904D68            MOV     DPTR,#uartTimeoutCnt
00090D E0                MOVX    A,@DPTR
00090E C3                CLR     C
00090F 94FF              SUBB    A,#0FFH
000911 5003              JNC     ?C0001?SYSTEM
   50: 		uartTimeoutCnt++;
000913 E0                MOVX    A,@DPTR
000914 04                INC     A
000915 F0                MOVX    @DPTR,A
   51: 	}
000916         ?C0001?SYSTEM:
   52: 
   53: 
   54: 	if(count<100)
000916 904E3E            MOV     DPTR,#count
000919 E0                MOVX    A,@DPTR
00091A C3                CLR     C
00091B 9464              SUBB    A,#064H
00091D 5005              JNC     ?C0002?SYSTEM
   55: 		count++;
00091F E0                MOVX    A,@DPTR
000920 04                INC     A
000921 F0                MOVX    @DPTR,A
000922 800F              SJMP    ?C0003?SYSTEM
000924         ?C0002?SYSTEM:
   56: 	else
   57: 		{
   58: 		count=0;
000924 E4                CLR     A
000925 904E3E            MOV     DPTR,#count
000928 F0                MOVX    @DPTR,A
   59: 		CS_Scale_TimeOutProc(CS_SetTimeBase1S);
000929 7F07              MOV     R7,#07H
00092B 123587            LCALL   _CS_Scale_TimeOutProc
   60: 		CS_MemoryWeightClear_Timer(MemWeightTimerInc);
00092E 7F02              MOV     R7,#02H
000930 1236AA            LCALL   _CS_MemoryWeightClear_Timer
   61: 		}
000933         ?C0003?SYSTEM:
   62: 		
   63: 	CS_SoftTimer(SoftTimerInc);
000933 E4                CLR     A
000934 FF                MOV     R7,A
000935 D1E5              ACALL   _CS_SoftTimer
;----                  JMP     CS_KeyScan
   64: 
   65: 	CS_KeyScan();
   66: 
----- FUNCTION SoftTimer_10mSCallback (END) -------


----- FUNCTION CS_KeyScan (BEGIN) -----
 FILE: 'CS_ScaleKey.c'
   17: void CS_KeyScan(void)
   18: {
   19: 	u8_t  keyState;
   20: 	static u8_t xdata keyState_prev=1;
   21: 	static u8_t xdata keyStateCnt;
   22: 	static u8_t xdata KeyPressDeal=0;
   23: 	static u8_t xdata KeyLongPressDeal=0;
   24: 	static u8_t xdata ShortPressCount=0;
   25: 	static u8_t xdata PressTimesCount=0;
   26: 	static u8_t xdata Press;
   27: 	
   28: 	
   29: 	keyState = YC_GPIOGetInputStatus(5);	//GPIO5	
000937 7F05              MOV     R7,#05H
000939 121091            LCALL   _YC_GPIOGetInputStatus
00093C E4                CLR     A
00093D 33                RLC     A
00093E FF                MOV     R7,A
;---- Variable 'keyState' assigned to Register 'R7' ----
   30: 
   31: 	if(ShortPressCount<255)		//短按计时
00093F 904E0F            MOV     DPTR,#ShortPressCount
000942 E0                MOVX    A,@DPTR
000943 C3                CLR     C
000944 94FF              SUBB    A,#0FFH
000946 5003              JNC     ?C0001?CS_SCALEKEY
   32: 		ShortPressCount++;
000948 E0                MOVX    A,@DPTR
000949 04                INC     A
00094A F0                MOVX    @DPTR,A
00094B         ?C0001?CS_SCALEKEY:
   33: 	
   34: 	if(keyState ==KEY_UP)
00094B EF                MOV     A,R7
00094C 6401              XRL     A,#01H
00094E 7043              JNZ     ?C0002?CS_SCALEKEY
   35: 		{
   36: 		keyState_prev = KEY_UP;	
000950 904E0B            MOV     DPTR,#keyState_prev
000953 04                INC     A
000954 F0                MOVX    @DPTR,A
   37: 		keyStateCnt = 0; 
000955 E4                CLR     A
000956 A3                INC     DPTR
000957 F0                MOVX    @DPTR,A
   38: 
   39: 		if(KeyLongPressDeal==1)
000958 904E0E            MOV     DPTR,#KeyLongPressDeal
00095B E0                MOVX    A,@DPTR
00095C B40105            CJNE    A,#01H,?C0003?CS_SCALEKEY
   40: 			Press = false;
00095F E4                CLR     A
000960 904E11            MOV     DPTR,#Press
000963 F0                MOVX    @DPTR,A
000964         ?C0003?CS_SCALEKEY:
   41: 		
   42: 		KeyPressDeal=0;
000964 E4                CLR     A
000965 904E0D            MOV     DPTR,#KeyPressDeal
000968 F0                MOVX    @DPTR,A
   43: 		KeyLongPressDeal=0;
000969 A3                INC     DPTR
00096A F0                MOVX    @DPTR,A
   44: 		
   45: 		if(Press == true)
00096B 904E11            MOV     DPTR,#Press
00096E E0                MOVX    A,@DPTR
00096F 6401              XRL     A,#01H
000971 6002              JZ      $ + 4H
000973 4107              AJMP    ?C0017?CS_SCALEKEY
   46: 			{
   47: 			Press = false;
000975 F0                MOVX    @DPTR,A
   48: 						
   49: 			//短按弹起处理
   50: 			if(ShortPressCount <KEY_SHORT_PRESS_TIME)
000976 904E0F            MOV     DPTR,#ShortPressCount
000979 E0                MOVX    A,@DPTR
00097A C3                CLR     C
00097B 940F              SUBB    A,#0FH
00097D 5006              JNC     ?C0005?CS_SCALEKEY
   51: 				PressTimesCount++;
00097F A3                INC     DPTR
000980 E0                MOVX    A,@DPTR
000981 04                INC     A
000982 F0                MOVX    @DPTR,A
000983 8008              SJMP    ?C0006?CS_SCALEKEY
000985         ?C0005?CS_SCALEKEY:
   52: 			else
   53: 				{
   54: 				PressTimesCount = 0;
000985 E4                CLR     A
000986 904E10            MOV     DPTR,#PressTimesCount
000989 F0                MOVX    @DPTR,A
   55: 				CS_Scale_ChangeUnit();	
00098A 1234ED            LCALL   CS_Scale_ChangeUnit
   56: 				}
00098D         ?C0006?CS_SCALEKEY:
   57: 			ShortPressCount =0;	
00098D E4                CLR     A
00098E 904E0F            MOV     DPTR,#ShortPressCount
000991 F0                MOVX    @DPTR,A
   58: 			}
   59: 		}
000992 22                RET     
000993         ?C0002?CS_SCALEKEY:
   60: 	else
   61: 		{
   62: 		if(keyState_prev == KEY_DOWN)
000993 904E0B            MOV     DPTR,#keyState_prev
000996 E0                MOVX    A,@DPTR
000997 7065              JNZ     ?C0008?CS_SCALEKEY
   63: 			{	
   64: 			if(keyStateCnt<255)
000999 A3                INC     DPTR
00099A E0                MOVX    A,@DPTR
00099B C3                CLR     C
00099C 94FF              SUBB    A,#0FFH
00099E 5003              JNC     ?C0009?CS_SCALEKEY
   65: 				keyStateCnt++;
0009A0 E0                MOVX    A,@DPTR
0009A1 04                INC     A
0009A2 F0                MOVX    @DPTR,A
0009A3         ?C0009?CS_SCALEKEY:
   66: 			 if(keyStateCnt > KEY_SHORT_PUSH_CNT)
0009A3 904E0C            MOV     DPTR,#keyStateCnt
0009A6 E0                MOVX    A,@DPTR
0009A7 FF                MOV     R7,A
0009A8 D3                SETB    C
0009A9 9403              SUBB    A,#03H
0009AB 401F              JC      ?C0010?CS_SCALEKEY
   67: 			 	{
   68: 			 	Press =true;
0009AD 904E11            MOV     DPTR,#Press
0009B0 7401              MOV     A,#01H
0009B2 F0                MOVX    @DPTR,A
   69: 				if(KeyPressDeal==0)
0009B3 904E0D            MOV     DPTR,#KeyPressDeal
0009B6 E0                MOVX    A,@DPTR
0009B7 7013              JNZ     ?C0010?CS_SCALEKEY
   70: 					{
   71: 					KeyPressDeal=1;
0009B9 04                INC     A
0009BA F0                MOVX    @DPTR,A
   72: 					//按键刚按下的处理
   73: 					if(ShortPressCount > KEY_SHORT_PRESS_TIME)
0009BB 904E0F            MOV     DPTR,#ShortPressCount
0009BE E0                MOVX    A,@DPTR
0009BF D3                SETB    C
0009C0 940F              SUBB    A,#0FH
0009C2 4003              JC      ?C0012?CS_SCALEKEY
   74: 						PressTimesCount = 0;
0009C4 E4                CLR     A
0009C5 A3                INC     DPTR
0009C6 F0                MOVX    @DPTR,A
0009C7         ?C0012?CS_SCALEKEY:
   75: 					ShortPressCount=0;
0009C7 E4                CLR     A
0009C8 904E0F            MOV     DPTR,#ShortPressCount
0009CB F0                MOVX    @DPTR,A
   76: 					}
   77: 			 	}
0009CC         ?C0010?CS_SCALEKEY:
   78: 			 if(keyStateCnt > KEY_LONG_PUSH_CNT)
0009CC EF                MOV     A,R7
0009CD D3                SETB    C
0009CE 9432              SUBB    A,#032H
0009D0 4035              JC      ?C0017?CS_SCALEKEY
   79: 			 	{
   80: 				if(KeyLongPressDeal==0)
0009D2 904E0E            MOV     DPTR,#KeyLongPressDeal
0009D5 E0                MOVX    A,@DPTR
0009D6 702F              JNZ     ?C0017?CS_SCALEKEY
   81: 					{
   82: 					//按键刚长按下的处理	
   83: 					KeyLongPressDeal=1;					
0009D8 04                INC     A
0009D9 F0                MOVX    @DPTR,A
   84: 					if(PressTimesCount==3)
0009DA 904E10            MOV     DPTR,#PressTimesCount
0009DD E0                MOVX    A,@DPTR
0009DE B40313            CJNE    A,#03H,?C0015?CS_SCALEKEY
   85: 						{
   86: 						R_Scale_state = CS_Scale_state_caling;	
0009E1 904CC5            MOV     DPTR,#R_Scale_state
0009E4 7403              MOV     A,#03H
0009E6 F0                MOVX    @DPTR,A
   87: 						CS_Scale_CaliProc(CaliProcReset);
0009E7 7F05              MOV     R7,#05H
0009E9 5108              ACALL   _CS_Scale_CaliProc
   88: 						Press = false;
0009EB E4                CLR     A
0009EC 904E11            MOV     DPTR,#Press
0009EF F0                MOVX    @DPTR,A
   89: 						keyStateCnt=0;
0009F0 904E0C            MOV     DPTR,#keyStateCnt
0009F3 F0                MOVX    @DPTR,A
   90: 						}
0009F4         ?C0015?CS_SCALEKEY:
   91: 					PressTimesCount = 0;
0009F4 E4                CLR     A
0009F5 904E10            MOV     DPTR,#PressTimesCount
0009F8 F0                MOVX    @DPTR,A
   92: 					ShortPressCount =0;
0009F9 904E0F            MOV     DPTR,#ShortPressCount
0009FC F0                MOVX    @DPTR,A
   93: 					}
   94: 			 	}
   95: 			}
0009FD 22                RET     
0009FE         ?C0008?CS_SCALEKEY:
   96: 		else
   97: 			{
   98: 			keyState_prev = KEY_DOWN;
0009FE E4                CLR     A
0009FF 904E0B            MOV     DPTR,#keyState_prev
000A02 F0                MOVX    @DPTR,A
   99: 			Press = false;
000A03 904E11            MOV     DPTR,#Press
000A06 F0                MOVX    @DPTR,A
  100: 			}
  101: 		}
  102: }
000A07         ?C0017?CS_SCALEKEY:
000A07 22                RET     
----- FUNCTION CS_KeyScan (END) -------


----- FUNCTION _CS_Scale_CaliProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  928: u16_t CS_Scale_CaliProc(u8_t option)
  929: {
;---- Variable 'option' assigned to Register 'R5' ----
000A08 AD07              MOV     R5,AR7
  930: 	static	u16_t xdata R_AD_CaliDot1;		//第一个标定点AD值
  931: 	static	u16_t xdata R_AD_CaliDot2;		//第二个标定点AD值
  932: 	static	u16_t xdata R_AD_CaliDot3;		//第三个标定点AD值
  933: 	static	u8_t	  xdata R_CaliState;			//标定状态
  934: 	static	u16_t xdata R_OpenWeight_Ad;	//开机重量AD值
  935: 	
  936: 	u16_t	R_AdFilTimes;	
  937: 	u16_t	weight_temp;
  938: 	u16_t	R_AD_BUF;
  939: 	u16_t	R_AD_PowerOnZero;
  940: 
  941: 	if(option==CaliProcReset)
000A0A ED                MOV     A,R5
000A0B B40508            CJNE    A,#05H,?C0130?CS_SCALE_PROC
  942: 		{
  943: 		R_CaliState=CS_CaliState_GetZero;
000A0E E4                CLR     A
000A0F 904CB1            MOV     DPTR,#R_CaliState
000A12 F0                MOVX    @DPTR,A
  944: 		return	0;
000A13 FE                MOV     R6,A
000A14 FF                MOV     R7,A
000A15 22                RET     
  945: 		}
000A16         ?C0130?CS_SCALE_PROC:
  946: 	if(option==CaliProcSetCali)
000A16 ED                MOV     A,R5
000A17 6401              XRL     A,#01H
000A19 6002              JZ      $ + 4H
000A1B 41FA              AJMP    ?C0132?CS_SCALE_PROC
  947: 		{
  948: /*
  949: 		*(mem_sensor_buf )= 12;
  950: 		*(mem_sensor_buf+1) = 12;
  951: 		*(mem_sensor_buf+2 )= 12;
  952: 		*(mem_sensor_buf+3) = 12;
  953: 		*(mem_sensor_buf+4 )= 12;
  954: 		*(mem_sensor_buf+5) = 12;
  955: 		SpiFlashOperator(CS_CMD_WRITE_FLASH);
  956: 		//YC_Delay10ms(10);
  957: 		
  958: 		*(mem_sensor_buf )= 0;
  959: 		*(mem_sensor_buf+1) = 0;
  960: 		*(mem_sensor_buf+2 )= 0;
  961: 		*(mem_sensor_buf+3) = 0;
  962: 		*(mem_sensor_buf+4 )= 0;
  963: 		*(mem_sensor_buf+5) = 0;
  964: 		
  965: 		
  966: 		SpiFlashOperator( CS_CMD_READ_FLASH);
  967: 		
  968: 		
  969: 		
  970: 		R_Debug_temp=(u16_t) *(mem_sensor_buf+2 ) ;
  971: 		CS_ScaleDisplay_Debug();
  972: 		while(1);
  973: 		*/
  974: 		//YC_Delay1S(1);
  975: 		
  976: 		R_AD_BUF = *(mem_sensor_buf );
000A1D 904C08            MOV     DPTR,#04C08H
000A20 E0                MOVX    A,@DPTR
000A21 FF                MOV     R7,A
000A22 904DF9            MOV     DPTR,#R_AD_BUF
000A25 E4                CLR     A
000A26 F0                MOVX    @DPTR,A
000A27 A3                INC     DPTR
000A28 EF                MOV     A,R7
000A29 F0                MOVX    @DPTR,A
  977: 		R_AD_CaliDot1 =R_AD_BUF<<8 |  (*(mem_sensor_buf+1));
000A2A E0                MOVX    A,@DPTR
000A2B FE                MOV     R6,A
000A2C 904C09            MOV     DPTR,#04C09H
000A2F E0                MOVX    A,@DPTR
000A30 FB                MOV     R3,A
000A31 EE                MOV     A,R6
000A32 EB                MOV     A,R3
000A33 FF                MOV     R7,A
000A34 904CAB            MOV     DPTR,#R_AD_CaliDot1
000A37 EE                MOV     A,R6
000A38 F0                MOVX    @DPTR,A
000A39 A3                INC     DPTR
000A3A EF                MOV     A,R7
000A3B F0                MOVX    @DPTR,A
  978: 		R_AD_BUF = *(mem_sensor_buf+2 );
000A3C 904C0A            MOV     DPTR,#04C0AH
000A3F E0                MOVX    A,@DPTR
000A40 FF                MOV     R7,A
000A41 904DF9            MOV     DPTR,#R_AD_BUF
000A44 E4                CLR     A
000A45 F0                MOVX    @DPTR,A
000A46 A3                INC     DPTR
000A47 EF                MOV     A,R7
000A48 F0                MOVX    @DPTR,A
  979: 		R_AD_CaliDot2 =R_AD_BUF<<8 |  (*(mem_sensor_buf+3));
000A49 E0                MOVX    A,@DPTR
000A4A FE                MOV     R6,A
000A4B 904C0B            MOV     DPTR,#04C0BH
000A4E E0                MOVX    A,@DPTR
000A4F FB                MOV     R3,A
000A50 EE                MOV     A,R6
000A51 EB                MOV     A,R3
000A52 FF                MOV     R7,A
000A53 904CAD            MOV     DPTR,#R_AD_CaliDot2
000A56 EE                MOV     A,R6
000A57 F0                MOVX    @DPTR,A
000A58 A3                INC     DPTR
000A59 EF                MOV     A,R7
000A5A F0                MOVX    @DPTR,A
  980: 		R_AD_BUF = *(mem_sensor_buf+4 );
000A5B 904C0C            MOV     DPTR,#04C0CH
000A5E E0                MOVX    A,@DPTR
000A5F FF                MOV     R7,A
000A60 904DF9            MOV     DPTR,#R_AD_BUF
000A63 E4                CLR     A
000A64 F0                MOVX    @DPTR,A
000A65 A3                INC     DPTR
000A66 EF                MOV     A,R7
000A67 F0                MOVX    @DPTR,A
  981: 		R_AD_CaliDot3 =R_AD_BUF<<8 |  (*(mem_sensor_buf+5));	
000A68 E0                MOVX    A,@DPTR
000A69 FE                MOV     R6,A
000A6A 904C0D            MOV     DPTR,#04C0DH
000A6D E0                MOVX    A,@DPTR
000A6E FB                MOV     R3,A
000A6F EE                MOV     A,R6
000A70 EB                MOV     A,R3
000A71 FF                MOV     R7,A
000A72 904CAF            MOV     DPTR,#R_AD_CaliDot3
000A75 EE                MOV     A,R6
000A76 F0                MOVX    @DPTR,A
000A77 A3                INC     DPTR
000A78 EF                MOV     A,R7
000A79 F0                MOVX    @DPTR,A
  982: 
  983: 		
  984: 
  985: 		if(R_AD_CaliDot1<CS_CaliStateData_Down || R_AD_CaliDot1>CS_CaliStateData_Up)
000A7A 904CAB            MOV     DPTR,#R_AD_CaliDot1
000A7D E0                MOVX    A,@DPTR
000A7E FE                MOV     R6,A
000A7F A3                INC     DPTR
000A80 E0                MOVX    A,@DPTR
000A81 FF                MOV     R7,A
000A82 C3                CLR     C
000A83 94E8              SUBB    A,#0E8H
000A85 EE                MOV     A,R6
000A86 9403              SUBB    A,#03H
000A88 4009              JC      ?C0134?CS_SCALE_PROC
000A8A D3                SETB    C
000A8B EF                MOV     A,R7
000A8C 9470              SUBB    A,#070H
000A8E EE                MOV     A,R6
000A8F 9417              SUBB    A,#017H
000A91 404C              JC      ?C0133?CS_SCALE_PROC
000A93         ?C0134?CS_SCALE_PROC:
  986: 			if(R_AD_CaliDot2<CS_CaliStateData_Down||R_AD_CaliDot2>CS_CaliStateData_Up)
000A93 904CAD            MOV     DPTR,#R_AD_CaliDot2
000A96 E0                MOVX    A,@DPTR
000A97 FE                MOV     R6,A
000A98 A3                INC     DPTR
000A99 E0                MOVX    A,@DPTR
000A9A FF                MOV     R7,A
000A9B C3                CLR     C
000A9C 94E8              SUBB    A,#0E8H
000A9E EE                MOV     A,R6
000A9F 9403              SUBB    A,#03H
000AA1 4009              JC      ?C0136?CS_SCALE_PROC
000AA3 D3                SETB    C
000AA4 EF                MOV     A,R7
000AA5 9470              SUBB    A,#070H
000AA7 EE                MOV     A,R6
000AA8 9417              SUBB    A,#017H
000AAA 4033              JC      ?C0133?CS_SCALE_PROC
000AAC         ?C0136?CS_SCALE_PROC:
  987: 				if(R_AD_CaliDot3<CS_CaliStateData_Down||R_AD_CaliDot3>CS_CaliStateData_Up)
000AAC 904CAF            MOV     DPTR,#R_AD_CaliDot3
000AAF E0                MOVX    A,@DPTR
000AB0 FE                MOV     R6,A
000AB1 A3                INC     DPTR
000AB2 E0                MOVX    A,@DPTR
000AB3 FF                MOV     R7,A
000AB4 C3                CLR     C
000AB5 94E8              SUBB    A,#0E8H
000AB7 EE                MOV     A,R6
000AB8 9403              SUBB    A,#03H
000ABA 4009              JC      ?C0138?CS_SCALE_PROC
000ABC D3                SETB    C
000ABD EF                MOV     A,R7
000ABE 9470              SUBB    A,#070H
000AC0 EE                MOV     A,R6
000AC1 9417              SUBB    A,#017H
000AC3 401A              JC      ?C0133?CS_SCALE_PROC
000AC5         ?C0138?CS_SCALE_PROC:
  988: 					{
  989: 					R_AD_CaliDot1	= 6000;
000AC5 904CAB            MOV     DPTR,#R_AD_CaliDot1
000AC8 7417              MOV     A,#017H
000ACA F0                MOVX    @DPTR,A
000ACB A3                INC     DPTR
000ACC 7470              MOV     A,#070H
000ACE F0                MOVX    @DPTR,A
  990: 					R_AD_CaliDot2	= 5000;
000ACF A3                INC     DPTR
000AD0 7413              MOV     A,#013H
000AD2 F0                MOVX    @DPTR,A
000AD3 A3                INC     DPTR
000AD4 7488              MOV     A,#088H
000AD6 F0                MOVX    @DPTR,A
  991: 					R_AD_CaliDot3	= 4000;	
000AD7 A3                INC     DPTR
000AD8 740F              MOV     A,#0FH
000ADA F0                MOVX    @DPTR,A
000ADB A3                INC     DPTR
000ADC 74A0              MOV     A,#0A0H
000ADE F0                MOVX    @DPTR,A
  992: 					}	
000ADF         ?C0133?CS_SCALE_PROC:
  993: 		
  994: 		
  995: 		R_OpenWeight_Ad	= R_AD_CaliDot1/10;
000ADF 904CAB            MOV     DPTR,#R_AD_CaliDot1
000AE2 E0                MOVX    A,@DPTR
000AE3 FE                MOV     R6,A
000AE4 A3                INC     DPTR
000AE5 E0                MOVX    A,@DPTR
000AE6 FF                MOV     R7,A
000AE7 7C00              MOV     R4,#00H
000AE9 7D0A              MOV     R5,#0AH
000AEB 120173            LCALL   ?C?UIDIV
000AEE 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000AF1 EE                MOV     A,R6
000AF2 F0                MOVX    @DPTR,A
000AF3 A3                INC     DPTR
000AF4 EF                MOV     A,R7
000AF5 F0                MOVX    @DPTR,A
  996: 		return	0;		
000AF6 E4                CLR     A
000AF7 FE                MOV     R6,A
000AF8 FF                MOV     R7,A
000AF9 22                RET     
  997: 		}
000AFA         ?C0132?CS_SCALE_PROC:
  998: 	if(option==CaliProcSetOpenWeight)
000AFA ED                MOV     A,R5
000AFB B4061B            CJNE    A,#06H,?C0139?CS_SCALE_PROC
  999: 		{
 1000: 		R_OpenWeight_Ad	= R_AD_CaliDot1/10;
000AFE 904CAB            MOV     DPTR,#R_AD_CaliDot1
000B01 E0                MOVX    A,@DPTR
000B02 FE                MOV     R6,A
000B03 A3                INC     DPTR
000B04 E0                MOVX    A,@DPTR
000B05 FF                MOV     R7,A
000B06 7C00              MOV     R4,#00H
000B08 7D0A              MOV     R5,#0AH
000B0A 120173            LCALL   ?C?UIDIV
000B0D 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000B10 EE                MOV     A,R6
000B11 F0                MOVX    @DPTR,A
000B12 A3                INC     DPTR
000B13 EF                MOV     A,R7
000B14 F0                MOVX    @DPTR,A
 1001: 		return	0;
000B15 E4                CLR     A
000B16 FE                MOV     R6,A
000B17 FF                MOV     R7,A
000B18 22                RET     
 1002: 		}
000B19         ?C0139?CS_SCALE_PROC:
 1003: 	
 1004: 	if(option==CaliProcGetOpenWeight)
000B19 ED                MOV     A,R5
000B1A B40709            CJNE    A,#07H,?C0140?CS_SCALE_PROC
 1005: 		return R_OpenWeight_Ad;
000B1D 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000B20 E0                MOVX    A,@DPTR
000B21 FE                MOV     R6,A
000B22 A3                INC     DPTR
000B23 E0                MOVX    A,@DPTR
000B24 FF                MOV     R7,A
000B25 22                RET     
000B26         ?C0140?CS_SCALE_PROC:
 1006: 	if(option==CaliProcGetCaliDot1)
000B26 ED                MOV     A,R5
000B27 B40209            CJNE    A,#02H,?C0141?CS_SCALE_PROC
 1007: 		return R_AD_CaliDot1;
000B2A 904CAB            MOV     DPTR,#R_AD_CaliDot1
000B2D E0                MOVX    A,@DPTR
000B2E FE                MOV     R6,A
000B2F A3                INC     DPTR
000B30 E0                MOVX    A,@DPTR
000B31 FF                MOV     R7,A
000B32 22                RET     
000B33         ?C0141?CS_SCALE_PROC:
 1008: 	if(option==CaliProcGetCaliDot2)
000B33 ED                MOV     A,R5
000B34 B40309            CJNE    A,#03H,?C0142?CS_SCALE_PROC
 1009: 		return R_AD_CaliDot2;
000B37 904CAD            MOV     DPTR,#R_AD_CaliDot2
000B3A E0                MOVX    A,@DPTR
000B3B FE                MOV     R6,A
000B3C A3                INC     DPTR
000B3D E0                MOVX    A,@DPTR
000B3E FF                MOV     R7,A
000B3F 22                RET     
000B40         ?C0142?CS_SCALE_PROC:
 1010: 	if(option==CaliProcGetCaliDot3)
000B40 ED                MOV     A,R5
000B41 B40409            CJNE    A,#04H,?C0143?CS_SCALE_PROC
 1011: 		return R_AD_CaliDot3;
000B44 904CAF            MOV     DPTR,#R_AD_CaliDot3
000B47 E0                MOVX    A,@DPTR
000B48 FE                MOV     R6,A
000B49 A3                INC     DPTR
000B4A E0                MOVX    A,@DPTR
000B4B FF                MOV     R7,A
000B4C 22                RET     
000B4D         ?C0143?CS_SCALE_PROC:
 1012: 	
 1013: 	R_AD_BUF = R_AD_Original;
000B4D 904CD8            MOV     DPTR,#R_AD_Original
000B50 E0                MOVX    A,@DPTR
000B51 FE                MOV     R6,A
000B52 A3                INC     DPTR
000B53 E0                MOVX    A,@DPTR
000B54 FF                MOV     R7,A
000B55 904DF9            MOV     DPTR,#R_AD_BUF
000B58 EE                MOV     A,R6
000B59 F0                MOVX    @DPTR,A
000B5A FC                MOV     R4,A
000B5B A3                INC     DPTR
000B5C EF                MOV     A,R7
000B5D F0                MOVX    @DPTR,A
000B5E FD                MOV     R5,A
 1014: 	R_AD_BUF=CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
000B5F E4                CLR     A
000B60 FF                MOV     R7,A
000B61 12313D            LCALL   _CS_Scale_AdcFilter
000B64 904DF9            MOV     DPTR,#R_AD_BUF
000B67 EE                MOV     A,R6
000B68 F0                MOVX    @DPTR,A
000B69 FC                MOV     R4,A
000B6A A3                INC     DPTR
000B6B EF                MOV     A,R7
000B6C F0                MOVX    @DPTR,A
000B6D FD                MOV     R5,A
 1015: 	R_AdFilTimes = CS_Scale_AdcFilter(ScaleAdcFilterGetFilTimes,R_AD_BUF);
000B6E 7F02              MOV     R7,#02H
000B70 12313D            LCALL   _CS_Scale_AdcFilter
000B73 904DF5            MOV     DPTR,#R_AdFilTimes
000B76 EE                MOV     A,R6
000B77 F0                MOVX    @DPTR,A
000B78 A3                INC     DPTR
000B79 EF                MOV     A,R7
000B7A F0                MOVX    @DPTR,A
 1016: 	
 1017: 	
 1018: 
 1019: 	//数据稳定才处理
 1020: 		
 1021: 	if(R_CaliState==CS_CaliState_GetZero) 
000B7B 904CB1            MOV     DPTR,#R_CaliState
000B7E E0                MOVX    A,@DPTR
000B7F 7048              JNZ     ?C0144?CS_SCALE_PROC
 1022: 		{	
 1023: 
 1024: 			R_AD_CaliDot1 = R_AD_BUF;	//暂存零点用于显示
000B81 904DF9            MOV     DPTR,#R_AD_BUF
000B84 E0                MOVX    A,@DPTR
000B85 FC                MOV     R4,A
000B86 A3                INC     DPTR
000B87 E0                MOVX    A,@DPTR
000B88 FD                MOV     R5,A
000B89 904CAB            MOV     DPTR,#R_AD_CaliDot1
000B8C EC                MOV     A,R4
000B8D F0                MOVX    @DPTR,A
000B8E A3                INC     DPTR
000B8F ED                MOV     A,R5
000B90 F0                MOVX    @DPTR,A
 1025: 			if(R_AdFilTimes>=CS_Cali_Steadytimes)
000B91 C3                CLR     C
000B92 904DF6            MOV     DPTR,#R_AdFilTimes+01H
000B95 E0                MOVX    A,@DPTR
000B96 940F              SUBB    A,#0FH
000B98 904DF5            MOV     DPTR,#R_AdFilTimes
000B9B E0                MOVX    A,@DPTR
000B9C 9400              SUBB    A,#00H
000B9E 401C              JC      ?C0145?CS_SCALE_PROC
 1026: 				{
 1027: 			CS_Scale_ZeroProc(SetPowerOnZero,R_AD_BUF);	
000BA0 7F05              MOV     R7,#05H
000BA2 1212FB            LCALL   _CS_Scale_ZeroProc
 1028: 			CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000BA5 904DF9            MOV     DPTR,#R_AD_BUF
000BA8 E0                MOVX    A,@DPTR
000BA9 FC                MOV     R4,A
000BAA A3                INC     DPTR
000BAB E0                MOVX    A,@DPTR
000BAC FD                MOV     R5,A
000BAD 7F01              MOV     R7,#01H
000BAF 12313D            LCALL   _CS_Scale_AdcFilter
 1029: 			CS_SoftTimer(ResetSoftTimer);
000BB2 7F02              MOV     R7,#02H
000BB4 D1E5              ACALL   _CS_SoftTimer
 1030: 			R_CaliState = CS_CaliState_ShowCal1;
000BB6 904CB1            MOV     DPTR,#R_CaliState
000BB9 7401              MOV     A,#01H
000BBB F0                MOVX    @DPTR,A
 1031: 				}
000BBC         ?C0145?CS_SCALE_PROC:
 1032: 		CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_BUF);
000BBC 904DF9            MOV     DPTR,#R_AD_BUF
000BBF E0                MOVX    A,@DPTR
000BC0 FC                MOV     R4,A
000BC1 A3                INC     DPTR
000BC2 E0                MOVX    A,@DPTR
000BC3 FD                MOV     R5,A
000BC4 7F21              MOV     R7,#021H
000BC6 121603            LCALL   _CS_ScaleDisplay_FreshBuf
 1033: 		}
000BC9         ?C0144?CS_SCALE_PROC:
 1034: 	
 1035: 	if(R_CaliState == CS_CaliState_ShowCal1)
000BC9 904CB1            MOV     DPTR,#R_CaliState
000BCC E0                MOVX    A,@DPTR
000BCD B40118            CJNE    A,#01H,?C0146?CS_SCALE_PROC
 1036: 		{
 1037: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 	
000BD0 7F01              MOV     R7,#01H
000BD2 D1E5              ACALL   _CS_SoftTimer
000BD4 EF                MOV     A,R7
000BD5 D3                SETB    C
000BD6 94C8              SUBB    A,#0C8H
000BD8 4006              JC      ?C0147?CS_SCALE_PROC
 1038: 			R_CaliState = CS_CaliState_GetCal1;
000BDA 904CB1            MOV     DPTR,#R_CaliState
000BDD 7402              MOV     A,#02H
000BDF F0                MOVX    @DPTR,A
000BE0         ?C0147?CS_SCALE_PROC:
 1039: 		CS_ScaleDisplay_FreshBuf(DisplayCal1,0);
000BE0 E4                CLR     A
000BE1 FD                MOV     R5,A
000BE2 FC                MOV     R4,A
000BE3 7F81              MOV     R7,#081H
000BE5 121603            LCALL   _CS_ScaleDisplay_FreshBuf
 1040: 		}
000BE8         ?C0146?CS_SCALE_PROC:
 1041: 
 1042: 	if(R_CaliState==CS_CaliState_GetCal1)
000BE8 904CB1            MOV     DPTR,#R_CaliState
000BEB E0                MOVX    A,@DPTR
000BEC 6402              XRL     A,#02H
000BEE 6002              JZ      $ + 4H
000BF0 81A9              AJMP    ?C0148?CS_SCALE_PROC
 1043: 		{	
 1044: 			R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);	
000BF2 FD                MOV     R5,A
000BF3 FC                MOV     R4,A
000BF4 FF                MOV     R7,A
000BF5 1212FB            LCALL   _CS_Scale_ZeroProc
000BF8 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000BFB EE                MOV     A,R6
000BFC F0                MOVX    @DPTR,A
000BFD A3                INC     DPTR
000BFE EF                MOV     A,R7
000BFF F0                MOVX    @DPTR,A
 1045: 			R_AD_CaliDot1 = R_AD_BUF - R_AD_PowerOnZero;
000C00 C3                CLR     C
000C01 904DFA            MOV     DPTR,#R_AD_BUF+01H
000C04 E0                MOVX    A,@DPTR
000C05 9F                SUBB    A,R7
000C06 FF                MOV     R7,A
000C07 904DF9            MOV     DPTR,#R_AD_BUF
000C0A E0                MOVX    A,@DPTR
000C0B 9E                SUBB    A,R6
000C0C FE                MOV     R6,A
000C0D 904CAB            MOV     DPTR,#R_AD_CaliDot1
000C10 F0                MOVX    @DPTR,A
000C11 A3                INC     DPTR
000C12 EF                MOV     A,R7
000C13 F0                MOVX    @DPTR,A
 1046: 				
 1047: 			if((R_AD_CaliDot1 < R_OpenWeight_Ad)||(R_AD_BUF < R_AD_PowerOnZero))
000C14 D3                SETB    C
000C15 904CB3            MOV     DPTR,#R_OpenWeight_Ad+01H
000C18 E0                MOVX    A,@DPTR
000C19 9F                SUBB    A,R7
000C1A 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000C1D E0                MOVX    A,@DPTR
000C1E 9E                SUBB    A,R6
000C1F 5015              JNC     ?C0150?CS_SCALE_PROC
000C21 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000C24 E0                MOVX    A,@DPTR
000C25 FE                MOV     R6,A
000C26 A3                INC     DPTR
000C27 E0                MOVX    A,@DPTR
000C28 FF                MOV     R7,A
000C29 C3                CLR     C
000C2A 904DFA            MOV     DPTR,#R_AD_BUF+01H
000C2D E0                MOVX    A,@DPTR
000C2E 9F                SUBB    A,R7
000C2F 904DF9            MOV     DPTR,#R_AD_BUF
000C32 E0                MOVX    A,@DPTR
000C33 9E                SUBB    A,R6
000C34 5032              JNC     ?C0149?CS_SCALE_PROC
000C36         ?C0150?CS_SCALE_PROC:
 1048: 				{
 1049: 				if(R_AdFilTimes>=CS_Cali_Steadytimes)
000C36 C3                CLR     C
000C37 904DF6            MOV     DPTR,#R_AdFilTimes+01H
000C3A E0                MOVX    A,@DPTR
000C3B 940F              SUBB    A,#0FH
000C3D 904DF5            MOV     DPTR,#R_AdFilTimes
000C40 E0                MOVX    A,@DPTR
000C41 9400              SUBB    A,#00H
000C43 401A              JC      ?C0151?CS_SCALE_PROC
 1050: 					{
 1051: 					CS_Scale_ZeroProc(SetPowerOnZero,R_AD_BUF);	
000C45 904DF9            MOV     DPTR,#R_AD_BUF
000C48 E0                MOVX    A,@DPTR
000C49 FC                MOV     R4,A
000C4A A3                INC     DPTR
000C4B E0                MOVX    A,@DPTR
000C4C FD                MOV     R5,A
000C4D 7F05              MOV     R7,#05H
000C4F 1212FB            LCALL   _CS_Scale_ZeroProc
 1052: 					CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000C52 904DF9            MOV     DPTR,#R_AD_BUF
000C55 E0                MOVX    A,@DPTR
000C56 FC                MOV     R4,A
000C57 A3                INC     DPTR
000C58 E0                MOVX    A,@DPTR
000C59 FD                MOV     R5,A
000C5A 7F01              MOV     R7,#01H
000C5C 12313D            LCALL   _CS_Scale_AdcFilter
 1053: 					}
000C5F         ?C0151?CS_SCALE_PROC:
 1054: 				R_AD_CaliDot1 = 0;
000C5F E4                CLR     A
000C60 904CAB            MOV     DPTR,#R_AD_CaliDot1
000C63 F0                MOVX    @DPTR,A
000C64 A3                INC     DPTR
000C65 F0                MOVX    @DPTR,A
 1055: 				}
000C66 8034              SJMP    ?C0152?CS_SCALE_PROC
000C68         ?C0149?CS_SCALE_PROC:
 1056: 			else
 1057: 				{
 1058: 				if((R_AD_CaliDot1> 750)&&(R_AdFilTimes>=60))
000C68 D3                SETB    C
000C69 904CAC            MOV     DPTR,#R_AD_CaliDot1+01H
000C6C E0                MOVX    A,@DPTR
000C6D 94EE              SUBB    A,#0EEH
000C6F 904CAB            MOV     DPTR,#R_AD_CaliDot1
000C72 E0                MOVX    A,@DPTR
000C73 9402              SUBB    A,#02H
000C75 4025              JC      ?C0152?CS_SCALE_PROC
000C77 904DF6            MOV     DPTR,#R_AdFilTimes+01H
000C7A E0                MOVX    A,@DPTR
000C7B 943C              SUBB    A,#03CH
000C7D 904DF5            MOV     DPTR,#R_AdFilTimes
000C80 E0                MOVX    A,@DPTR
000C81 9400              SUBB    A,#00H
000C83 4017              JC      ?C0152?CS_SCALE_PROC
 1059: 					{				
 1060: 					CS_SoftTimer(ResetSoftTimer);
000C85 7F02              MOV     R7,#02H
000C87 D1E5              ACALL   _CS_SoftTimer
 1061: 					CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000C89 904DF9            MOV     DPTR,#R_AD_BUF
000C8C E0                MOVX    A,@DPTR
000C8D FC                MOV     R4,A
000C8E A3                INC     DPTR
000C8F E0                MOVX    A,@DPTR
000C90 FD                MOV     R5,A
000C91 7F01              MOV     R7,#01H
000C93 12313D            LCALL   _CS_Scale_AdcFilter
 1062: 					R_CaliState = CS_CaliState_ShowCal2;
000C96 904CB1            MOV     DPTR,#R_CaliState
000C99 7403              MOV     A,#03H
000C9B F0                MOVX    @DPTR,A
 1063: 					}
 1064: 				}
000C9C         ?C0152?CS_SCALE_PROC:
 1065: 			CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_CaliDot1);
000C9C 904CAB            MOV     DPTR,#R_AD_CaliDot1
000C9F E0                MOVX    A,@DPTR
000CA0 FC                MOV     R4,A
000CA1 A3                INC     DPTR
000CA2 E0                MOVX    A,@DPTR
000CA3 FD                MOV     R5,A
000CA4 7F21              MOV     R7,#021H
000CA6 121603            LCALL   _CS_ScaleDisplay_FreshBuf
 1066: 			
 1067: 		}
000CA9         ?C0148?CS_SCALE_PROC:
 1068: 
 1069: 	if(R_CaliState == CS_CaliState_ShowCal2)
000CA9 904CB1            MOV     DPTR,#R_CaliState
000CAC E0                MOVX    A,@DPTR
000CAD B40318            CJNE    A,#03H,?C0154?CS_SCALE_PROC
 1070: 		{
 1071: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 	
000CB0 7F01              MOV     R7,#01H
000CB2 D1E5              ACALL   _CS_SoftTimer
000CB4 EF                MOV     A,R7
000CB5 D3                SETB    C
000CB6 94C8              SUBB    A,#0C8H
000CB8 4006              JC      ?C0155?CS_SCALE_PROC
 1072: 			R_CaliState = CS_CaliState_GetCal2;
000CBA 904CB1            MOV     DPTR,#R_CaliState
000CBD 7404              MOV     A,#04H
000CBF F0                MOVX    @DPTR,A
000CC0         ?C0155?CS_SCALE_PROC:
 1073: 		CS_ScaleDisplay_FreshBuf(DisplayCal2,0);
000CC0 E4                CLR     A
000CC1 FD                MOV     R5,A
000CC2 FC                MOV     R4,A
000CC3 7F82              MOV     R7,#082H
000CC5 121603            LCALL   _CS_ScaleDisplay_FreshBuf
 1074: 		}
000CC8         ?C0154?CS_SCALE_PROC:
 1075: 	
 1076: 	if(R_CaliState==CS_CaliState_GetCal2)
000CC8 904CB1            MOV     DPTR,#R_CaliState
000CCB E0                MOVX    A,@DPTR
000CCC 6404              XRL     A,#04H
000CCE 6002              JZ      $ + 4H
000CD0 A16E              AJMP    ?C0156?CS_SCALE_PROC
 1077: 		{		
 1078: 			R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);		
000CD2 FD                MOV     R5,A
000CD3 FC                MOV     R4,A
000CD4 FF                MOV     R7,A
000CD5 1212FB            LCALL   _CS_Scale_ZeroProc
000CD8 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000CDB EE                MOV     A,R6
000CDC F0                MOVX    @DPTR,A
000CDD A3                INC     DPTR
000CDE EF                MOV     A,R7
000CDF F0                MOVX    @DPTR,A
 1079: 			weight_temp = R_AD_BUF - R_AD_PowerOnZero;
000CE0 C3                CLR     C
000CE1 904DFA            MOV     DPTR,#R_AD_BUF+01H
000CE4 E0                MOVX    A,@DPTR
000CE5 9F                SUBB    A,R7
000CE6 FF                MOV     R7,A
000CE7 904DF9            MOV     DPTR,#R_AD_BUF
000CEA E0                MOVX    A,@DPTR
000CEB 9E                SUBB    A,R6
000CEC FE                MOV     R6,A
000CED 904DF7            MOV     DPTR,#weight_temp
000CF0 F0                MOVX    @DPTR,A
000CF1 A3                INC     DPTR
000CF2 EF                MOV     A,R7
000CF3 F0                MOVX    @DPTR,A
 1080: 					
 1081: 			if((weight_temp < R_AD_CaliDot1)||(R_AD_BUF < R_AD_PowerOnZero))
000CF4 904CAB            MOV     DPTR,#R_AD_CaliDot1
000CF7 E0                MOVX    A,@DPTR
000CF8 FC                MOV     R4,A
000CF9 A3                INC     DPTR
000CFA E0                MOVX    A,@DPTR
000CFB FD                MOV     R5,A
000CFC D3                SETB    C
000CFD 9F                SUBB    A,R7
000CFE EC                MOV     A,R4
000CFF 9E                SUBB    A,R6
000D00 5015              JNC     ?C0158?CS_SCALE_PROC
000D02 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000D05 E0                MOVX    A,@DPTR
000D06 FE                MOV     R6,A
000D07 A3                INC     DPTR
000D08 E0                MOVX    A,@DPTR
000D09 FF                MOV     R7,A
000D0A C3                CLR     C
000D0B 904DFA            MOV     DPTR,#R_AD_BUF+01H
000D0E E0                MOVX    A,@DPTR
000D0F 9F                SUBB    A,R7
000D10 904DF9            MOV     DPTR,#R_AD_BUF
000D13 E0                MOVX    A,@DPTR
000D14 9E                SUBB    A,R6
000D15 5009              JNC     ?C0157?CS_SCALE_PROC
000D17         ?C0158?CS_SCALE_PROC:
 1082: 				{
 1083: 				R_AD_CaliDot2 = 0;
000D17 E4                CLR     A
000D18 904CAD            MOV     DPTR,#R_AD_CaliDot2
000D1B F0                MOVX    @DPTR,A
000D1C A3                INC     DPTR
000D1D F0                MOVX    @DPTR,A
 1084: 				}
000D1E 8041              SJMP    ?C0159?CS_SCALE_PROC
000D20         ?C0157?CS_SCALE_PROC:
 1085: 			else
 1086: 				{
 1087: 				R_AD_CaliDot2 = weight_temp -R_AD_CaliDot1;
000D20 C3                CLR     C
000D21 904DF8            MOV     DPTR,#weight_temp+01H
000D24 E0                MOVX    A,@DPTR
000D25 9D                SUBB    A,R5
000D26 FF                MOV     R7,A
000D27 904DF7            MOV     DPTR,#weight_temp
000D2A E0                MOVX    A,@DPTR
000D2B 9C                SUBB    A,R4
000D2C FE                MOV     R6,A
000D2D 904CAD            MOV     DPTR,#R_AD_CaliDot2
000D30 F0                MOVX    @DPTR,A
000D31 A3                INC     DPTR
000D32 EF                MOV     A,R7
000D33 F0                MOVX    @DPTR,A
 1088: 			
 1089: 				if((R_AD_CaliDot2> 750)&& (R_AdFilTimes>=CS_Cali_Steadytimes))
000D34 D3                SETB    C
000D35 94EE              SUBB    A,#0EEH
000D37 EE                MOV     A,R6
000D38 9402              SUBB    A,#02H
000D3A 4025              JC      ?C0159?CS_SCALE_PROC
000D3C 904DF6            MOV     DPTR,#R_AdFilTimes+01H
000D3F E0                MOVX    A,@DPTR
000D40 940F              SUBB    A,#0FH
000D42 904DF5            MOV     DPTR,#R_AdFilTimes
000D45 E0                MOVX    A,@DPTR
000D46 9400              SUBB    A,#00H
000D48 4017              JC      ?C0159?CS_SCALE_PROC
 1090: 					{
 1091: 					CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000D4A 904DF9            MOV     DPTR,#R_AD_BUF
000D4D E0                MOVX    A,@DPTR
000D4E FC                MOV     R4,A
000D4F A3                INC     DPTR
000D50 E0                MOVX    A,@DPTR
000D51 FD                MOV     R5,A
000D52 7F01              MOV     R7,#01H
000D54 12313D            LCALL   _CS_Scale_AdcFilter
 1092: 					CS_SoftTimer(ResetSoftTimer);
000D57 7F02              MOV     R7,#02H
000D59 D1E5              ACALL   _CS_SoftTimer
 1093: 					R_CaliState = CS_CaliState_ShowCal3;
000D5B 904CB1            MOV     DPTR,#R_CaliState
000D5E 7405              MOV     A,#05H
000D60 F0                MOVX    @DPTR,A
 1094: 					}
 1095: 				}
000D61         ?C0159?CS_SCALE_PROC:
 1096: 			CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_CaliDot2);
000D61 904CAD            MOV     DPTR,#R_AD_CaliDot2
000D64 E0                MOVX    A,@DPTR
000D65 FC                MOV     R4,A
000D66 A3                INC     DPTR
000D67 E0                MOVX    A,@DPTR
000D68 FD                MOV     R5,A
000D69 7F21              MOV     R7,#021H
000D6B 121603            LCALL   _CS_ScaleDisplay_FreshBuf
 1097: 		}
000D6E         ?C0156?CS_SCALE_PROC:
 1098: 
 1099: 	if(R_CaliState == CS_CaliState_ShowCal3)
000D6E 904CB1            MOV     DPTR,#R_CaliState
000D71 E0                MOVX    A,@DPTR
000D72 B40518            CJNE    A,#05H,?C0161?CS_SCALE_PROC
 1100: 		{
 1101: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 	
000D75 7F01              MOV     R7,#01H
000D77 D1E5              ACALL   _CS_SoftTimer
000D79 EF                MOV     A,R7
000D7A D3                SETB    C
000D7B 94C8              SUBB    A,#0C8H
000D7D 4006              JC      ?C0162?CS_SCALE_PROC
 1102: 			R_CaliState = CS_CaliState_GetCal3;
000D7F 904CB1            MOV     DPTR,#R_CaliState
000D82 7406              MOV     A,#06H
000D84 F0                MOVX    @DPTR,A
000D85         ?C0162?CS_SCALE_PROC:
 1103: 		CS_ScaleDisplay_FreshBuf(DisplayCal3,0);
000D85 E4                CLR     A
000D86 FD                MOV     R5,A
000D87 FC                MOV     R4,A
000D88 7F83              MOV     R7,#083H
000D8A 121603            LCALL   _CS_ScaleDisplay_FreshBuf
 1104: 		}
000D8D         ?C0161?CS_SCALE_PROC:
 1105: 	
 1106: 	if(R_CaliState==CS_CaliState_GetCal3)
000D8D 904CB1            MOV     DPTR,#R_CaliState
000D90 E0                MOVX    A,@DPTR
000D91 6406              XRL     A,#06H
000D93 6002              JZ      $ + 4H
000D95 C14C              AJMP    ?C0163?CS_SCALE_PROC
 1107: 		{		
 1108: 			R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);		
000D97 FD                MOV     R5,A
000D98 FC                MOV     R4,A
000D99 FF                MOV     R7,A
000D9A 1212FB            LCALL   _CS_Scale_ZeroProc
000D9D 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000DA0 EE                MOV     A,R6
000DA1 F0                MOVX    @DPTR,A
000DA2 A3                INC     DPTR
000DA3 EF                MOV     A,R7
000DA4 F0                MOVX    @DPTR,A
 1109: 			weight_temp = R_AD_BUF - R_AD_PowerOnZero;
000DA5 C3                CLR     C
000DA6 904DFA            MOV     DPTR,#R_AD_BUF+01H
000DA9 E0                MOVX    A,@DPTR
000DAA 9F                SUBB    A,R7
000DAB FF                MOV     R7,A
000DAC 904DF9            MOV     DPTR,#R_AD_BUF
000DAF E0                MOVX    A,@DPTR
000DB0 9E                SUBB    A,R6
000DB1 FE                MOV     R6,A
000DB2 904DF7            MOV     DPTR,#weight_temp
000DB5 F0                MOVX    @DPTR,A
000DB6 A3                INC     DPTR
000DB7 EF                MOV     A,R7
000DB8 F0                MOVX    @DPTR,A
 1110: 					
 1111: 			if((weight_temp < R_AD_CaliDot1)||(R_AD_BUF < R_AD_PowerOnZero))
000DB9 904CAB            MOV     DPTR,#R_AD_CaliDot1
000DBC E0                MOVX    A,@DPTR
000DBD FC                MOV     R4,A
000DBE A3                INC     DPTR
000DBF E0                MOVX    A,@DPTR
000DC0 FD                MOV     R5,A
000DC1 D3                SETB    C
000DC2 9F                SUBB    A,R7
000DC3 EC                MOV     A,R4
000DC4 9E                SUBB    A,R6
000DC5 5015              JNC     ?C0165?CS_SCALE_PROC
000DC7 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000DCA E0                MOVX    A,@DPTR
000DCB FE                MOV     R6,A
000DCC A3                INC     DPTR
000DCD E0                MOVX    A,@DPTR
000DCE FF                MOV     R7,A
000DCF C3                CLR     C
000DD0 904DFA            MOV     DPTR,#R_AD_BUF+01H
000DD3 E0                MOVX    A,@DPTR
000DD4 9F                SUBB    A,R7
000DD5 904DF9            MOV     DPTR,#R_AD_BUF
000DD8 E0                MOVX    A,@DPTR
000DD9 9E                SUBB    A,R6
000DDA 5009              JNC     ?C0164?CS_SCALE_PROC
000DDC         ?C0165?CS_SCALE_PROC:
 1112: 				{
 1113: 				R_AD_CaliDot3 = 0;
000DDC E4                CLR     A
000DDD 904CAF            MOV     DPTR,#R_AD_CaliDot3
000DE0 F0                MOVX    @DPTR,A
000DE1 A3                INC     DPTR
000DE2 F0                MOVX    @DPTR,A
 1114: 				}
000DE3 805A              SJMP    ?C0166?CS_SCALE_PROC
000DE5         ?C0164?CS_SCALE_PROC:
 1115: 			else
 1116: 				{
 1117: 				weight_temp = weight_temp -R_AD_CaliDot1;
000DE5 C3                CLR     C
000DE6 904DF8            MOV     DPTR,#weight_temp+01H
000DE9 E0                MOVX    A,@DPTR
000DEA 9D                SUBB    A,R5
000DEB FF                MOV     R7,A
000DEC 904DF7            MOV     DPTR,#weight_temp
000DEF E0                MOVX    A,@DPTR
000DF0 9C                SUBB    A,R4
000DF1 FE                MOV     R6,A
000DF2 F0                MOVX    @DPTR,A
000DF3 A3                INC     DPTR
000DF4 EF                MOV     A,R7
000DF5 F0                MOVX    @DPTR,A
 1118: 
 1119: 				if(weight_temp < R_AD_CaliDot2)
000DF6 904CAD            MOV     DPTR,#R_AD_CaliDot2
000DF9 E0                MOVX    A,@DPTR
000DFA FC                MOV     R4,A
000DFB A3                INC     DPTR
000DFC E0                MOVX    A,@DPTR
000DFD FD                MOV     R5,A
000DFE D3                SETB    C
000DFF 9F                SUBB    A,R7
000E00 EC                MOV     A,R4
000E01 9E                SUBB    A,R6
000E02 4007              JC      ?C0167?CS_SCALE_PROC
 1120: 					{
 1121: 					R_AD_CaliDot3 = 0;
000E04 E4                CLR     A
000E05 A3                INC     DPTR
000E06 F0                MOVX    @DPTR,A
000E07 A3                INC     DPTR
000E08 F0                MOVX    @DPTR,A
 1122: 					
 1123: 					}
000E09 8034              SJMP    ?C0166?CS_SCALE_PROC
000E0B         ?C0167?CS_SCALE_PROC:
 1124: 				else
 1125: 					{
 1126: 				R_AD_CaliDot3 = weight_temp -R_AD_CaliDot2;
000E0B C3                CLR     C
000E0C 904DF8            MOV     DPTR,#weight_temp+01H
000E0F E0                MOVX    A,@DPTR
000E10 9D                SUBB    A,R5
000E11 FF                MOV     R7,A
000E12 904DF7            MOV     DPTR,#weight_temp
000E15 E0                MOVX    A,@DPTR
000E16 9C                SUBB    A,R4
000E17 FE                MOV     R6,A
000E18 904CAF            MOV     DPTR,#R_AD_CaliDot3
000E1B F0                MOVX    @DPTR,A
000E1C A3                INC     DPTR
000E1D EF                MOV     A,R7
000E1E F0                MOVX    @DPTR,A
 1127: 			
 1128: 				if((R_AD_CaliDot3> 750)&& (R_AdFilTimes>=CS_Cali_Steadytimes))
000E1F D3                SETB    C
000E20 94EE              SUBB    A,#0EEH
000E22 EE                MOV     A,R6
000E23 9402              SUBB    A,#02H
000E25 4018              JC      ?C0166?CS_SCALE_PROC
000E27 904DF6            MOV     DPTR,#R_AdFilTimes+01H
000E2A E0                MOVX    A,@DPTR
000E2B 940F              SUBB    A,#0FH
000E2D 904DF5            MOV     DPTR,#R_AdFilTimes
000E30 E0                MOVX    A,@DPTR
000E31 9400              SUBB    A,#00H
000E33 400A              JC      ?C0166?CS_SCALE_PROC
 1129: 					{
 1130: 					CS_SoftTimer(ResetSoftTimer);
000E35 7F02              MOV     R7,#02H
000E37 D1E5              ACALL   _CS_SoftTimer
 1131: 					R_CaliState = CS_CaliState_ShowCal4;
000E39 904CB1            MOV     DPTR,#R_CaliState
000E3C 7407              MOV     A,#07H
000E3E F0                MOVX    @DPTR,A
 1132: 					}
 1133: 					}
 1134: 				}
000E3F         ?C0166?CS_SCALE_PROC:
 1135: 			CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_CaliDot3);
000E3F 904CAF            MOV     DPTR,#R_AD_CaliDot3
000E42 E0                MOVX    A,@DPTR
000E43 FC                MOV     R4,A
000E44 A3                INC     DPTR
000E45 E0                MOVX    A,@DPTR
000E46 FD                MOV     R5,A
000E47 7F21              MOV     R7,#021H
000E49 121603            LCALL   _CS_ScaleDisplay_FreshBuf
 1136: 		}
000E4C         ?C0163?CS_SCALE_PROC:
 1137: 	
 1138: 	if(R_CaliState == CS_CaliState_ShowCal4)
000E4C 904CB1            MOV     DPTR,#R_CaliState
000E4F E0                MOVX    A,@DPTR
000E50 B40718            CJNE    A,#07H,?C0170?CS_SCALE_PROC
 1139: 		{
 1140: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 
000E53 7F01              MOV     R7,#01H
000E55 D1E5              ACALL   _CS_SoftTimer
000E57 EF                MOV     A,R7
000E58 D3                SETB    C
000E59 94C8              SUBB    A,#0C8H
000E5B 4006              JC      ?C0171?CS_SCALE_PROC
 1141: 			R_CaliState = CS_CaliState_SaveData;
000E5D 904CB1            MOV     DPTR,#R_CaliState
000E60 7408              MOV     A,#08H
000E62 F0                MOVX    @DPTR,A
000E63         ?C0171?CS_SCALE_PROC:
 1142: 		CS_ScaleDisplay_FreshBuf(DisplayCal4,0);
000E63 E4                CLR     A
000E64 FD                MOV     R5,A
000E65 FC                MOV     R4,A
000E66 7F84              MOV     R7,#084H
000E68 121603            LCALL   _CS_ScaleDisplay_FreshBuf
 1143: 		}
000E6B         ?C0170?CS_SCALE_PROC:
 1144: 	
 1145: 	if(R_CaliState==CS_CaliState_SaveData)
000E6B 904CB1            MOV     DPTR,#R_CaliState
000E6E E0                MOVX    A,@DPTR
000E6F 6408              XRL     A,#08H
000E71 706E              JNZ     ?C0172?CS_SCALE_PROC
 1146: 		{
 1147: 		
 1148: 		R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);
000E73 FD                MOV     R5,A
000E74 FC                MOV     R4,A
000E75 FF                MOV     R7,A
000E76 1212FB            LCALL   _CS_Scale_ZeroProc
000E79 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000E7C EE                MOV     A,R6
000E7D F0                MOVX    @DPTR,A
000E7E A3                INC     DPTR
000E7F EF                MOV     A,R7
000E80 F0                MOVX    @DPTR,A
 1149: 		CS_Scale_ZeroProc(SetRunningZero,R_AD_PowerOnZero);
000E81 904DFB            MOV     DPTR,#R_AD_PowerOnZero
000E84 E0                MOVX    A,@DPTR
000E85 FC                MOV     R4,A
000E86 A3                INC     DPTR
000E87 E0                MOVX    A,@DPTR
000E88 FD                MOV     R5,A
000E89 7F06              MOV     R7,#06H
000E8B 1212FB            LCALL   _CS_Scale_ZeroProc
 1150: 		R_Scale_state = CS_Scale_state_weighting;
000E8E 904CC5            MOV     DPTR,#R_Scale_state
000E91 7401              MOV     A,#01H
000E93 F0                MOVX    @DPTR,A
 1151: 		R_OpenWeight_Ad	=  R_AD_CaliDot1/10;
000E94 904CAB            MOV     DPTR,#R_AD_CaliDot1
000E97 E0                MOVX    A,@DPTR
000E98 FA                MOV     R2,A
000E99 A3                INC     DPTR
000E9A E0                MOVX    A,@DPTR
000E9B 7C00              MOV     R4,#00H
000E9D 7D0A              MOV     R5,#0AH
000E9F FF                MOV     R7,A
000EA0 AE02              MOV     R6,AR2
000EA2 120173            LCALL   ?C?UIDIV
000EA5 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000EA8 EE                MOV     A,R6
000EA9 F0                MOVX    @DPTR,A
000EAA A3                INC     DPTR
000EAB EF                MOV     A,R7
000EAC F0                MOVX    @DPTR,A
 1152: 
 1153: 		/*
 1154: 		R_Debug_temp=R_AD_CaliDot2;
 1155: 		CS_ScaleDisplay_Debug();
 1156: 		while(1);
 1157: 		*/
 1158: 		
 1159: 		*(mem_sensor_buf )= HI_UINT16(R_AD_CaliDot1);
000EAD EA                MOV     A,R2
000EAE 904C08            MOV     DPTR,#04C08H
000EB1 F0                MOVX    @DPTR,A
 1160: 		*(mem_sensor_buf+1) = LO_UINT16(R_AD_CaliDot1);
000EB2 904CAB            MOV     DPTR,#R_AD_CaliDot1
000EB5 E0                MOVX    A,@DPTR
000EB6 A3                INC     DPTR
000EB7 E0                MOVX    A,@DPTR
000EB8 904C09            MOV     DPTR,#04C09H
000EBB F0                MOVX    @DPTR,A
 1161: 		*(mem_sensor_buf+2 )= HI_UINT16(R_AD_CaliDot2);
000EBC 904CAD            MOV     DPTR,#R_AD_CaliDot2
000EBF E0                MOVX    A,@DPTR
000EC0 FC                MOV     R4,A
000EC1 A3                INC     DPTR
000EC2 E0                MOVX    A,@DPTR
000EC3 FD                MOV     R5,A
000EC4 EC                MOV     A,R4
000EC5 904C0A            MOV     DPTR,#04C0AH
000EC8 F0                MOVX    @DPTR,A
 1162: 		*(mem_sensor_buf+3) = LO_UINT16(R_AD_CaliDot2);
000EC9 ED                MOV     A,R5
000ECA A3                INC     DPTR
000ECB F0                MOVX    @DPTR,A
 1163: 		*(mem_sensor_buf+4 )= HI_UINT16(R_AD_CaliDot3);
000ECC 904CAF            MOV     DPTR,#R_AD_CaliDot3
000ECF E0                MOVX    A,@DPTR
000ED0 FC                MOV     R4,A
000ED1 A3                INC     DPTR
000ED2 E0                MOVX    A,@DPTR
000ED3 FD                MOV     R5,A
000ED4 EC                MOV     A,R4
000ED5 904C0C            MOV     DPTR,#04C0CH
000ED8 F0                MOVX    @DPTR,A
 1164: 		*(mem_sensor_buf+5) = LO_UINT16(R_AD_CaliDot3);
000ED9 ED                MOV     A,R5
000EDA A3                INC     DPTR
000EDB F0                MOVX    @DPTR,A
 1165: 		SpiFlashOperator(CS_CMD_WRITE_FLASH);
000EDC 7F41              MOV     R7,#041H
000EDE 121F3B            LCALL   _SpiFlashOperator
 1166: 
 1167: 		
 1168: 
 1169: 		}
000EE1         ?C0172?CS_SCALE_PROC:
 1170: 	return 0;
000EE1 E4                CLR     A
000EE2 FE                MOV     R6,A
000EE3 FF                MOV     R7,A
 1171: 	
 1172: }
000EE4 22                RET     
----- FUNCTION _CS_Scale_CaliProc (END) -------


----- FUNCTION _CS_SoftTimer (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1389: u8_t CS_SoftTimer(u8_t option)
 1390: {
;---- Variable 'option' assigned to Register 'R7' ----
 1391: 	static u8_t xdata timecount; 				//计时变量
 1392: 	static u8_t xdata B_Timeout;
 1393: 
 1394: 	if(option==ResetSoftTimer)
000EE5 EF                MOV     A,R7
000EE6 B40207            CJNE    A,#02H,?C0204?CS_SCALE_PROC
 1395: 		{
 1396: 		timecount=0;
000EE9 E4                CLR     A
000EEA 904CB8            MOV     DPTR,#timecount
000EED F0                MOVX    @DPTR,A
 1397: 		B_Timeout = false;
000EEE A3                INC     DPTR
000EEF F0                MOVX    @DPTR,A
 1398: 		}
000EF0         ?C0204?CS_SCALE_PROC:
 1399: 
 1400: 	if(option==GetSoftTimerTime)
000EF0 EF                MOV     A,R7
000EF1 B40106            CJNE    A,#01H,?C0205?CS_SCALE_PROC
 1401: 		return	timecount;
000EF4 904CB8            MOV     DPTR,#timecount
000EF7 E0                MOVX    A,@DPTR
000EF8 FF                MOV     R7,A
000EF9 22                RET     
000EFA         ?C0205?CS_SCALE_PROC:
 1402: 
 1403: 	if(option==SoftTimerInc)
000EFA EF                MOV     A,R7
000EFB 700C              JNZ     ?C0207?CS_SCALE_PROC
 1404: 		{
 1405: 		if(timecount<255 ) 
000EFD 904CB8            MOV     DPTR,#timecount
000F00 E0                MOVX    A,@DPTR
000F01 C3                CLR     C
000F02 94FF              SUBB    A,#0FFH
000F04 5003              JNC     ?C0207?CS_SCALE_PROC
 1406: 		timecount++;
000F06 E0                MOVX    A,@DPTR
000F07 04                INC     A
000F08 F0                MOVX    @DPTR,A
 1407: 		}
000F09         ?C0207?CS_SCALE_PROC:
 1408: 	
 1409: 	
 1410: 	if(timecount>SoftTimerTimeOut)
000F09 904CB8            MOV     DPTR,#timecount
000F0C E0                MOVX    A,@DPTR
000F0D D3                SETB    C
000F0E 9496              SUBB    A,#096H
000F10 4004              JC      ?C0209?CS_SCALE_PROC
 1411: 		B_Timeout = true;
000F12 A3                INC     DPTR
000F13 7401              MOV     A,#01H
000F15 F0                MOVX    @DPTR,A
000F16         ?C0209?CS_SCALE_PROC:
 1412: 
 1413: 	if(option==GetIfTimeOut)
000F16 EF                MOV     A,R7
000F17 B40306            CJNE    A,#03H,?C0210?CS_SCALE_PROC
 1414: 		return	B_Timeout;
000F1A 904CB9            MOV     DPTR,#B_Timeout
000F1D E0                MOVX    A,@DPTR
000F1E FF                MOV     R7,A
000F1F 22                RET     
000F20         ?C0210?CS_SCALE_PROC:
 1415: 	
 1416: 	return 0;
000F20 7F00              MOV     R7,#00H
 1417: 
 1418: }
000F22 22                RET     
----- FUNCTION _CS_SoftTimer (END) -------


----- FUNCTION CS_ScaleDisplay_SteadyFlash (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  345: void CS_ScaleDisplay_SteadyFlash(void)
  346: {	 
  347: 
  348: 	u8_t xdata R_Weight_FlashTime;
  349: 
  350: 	
  351: 	if(CS_SoftTimer(GetIfTimeOut) == false)
000F23 7F03              MOV     R7,#03H
000F25 D1E5              ACALL   _CS_SoftTimer
000F27 EF                MOV     A,R7
000F28 702D              JNZ     ?C0057?CS_SCALEDISPLAY
  352: 		{
  353: 		R_Weight_FlashTime = CS_SoftTimer(GetSoftTimerTime);
000F2A 7F01              MOV     R7,#01H
000F2C D1E5              ACALL   _CS_SoftTimer
;---- Variable 'R_Weight_FlashTime' assigned to Register 'R7' ----
  354: 		   if(R_Weight_FlashTime<30) 
000F2E EF                MOV     A,R7
000F2F C3                CLR     C
000F30 941E              SUBB    A,#01EH
000F32 5003              JNC     ?C0048?CS_SCALEDISPLAY
  355: 		   	CS_ScaleDisplay_LcdBackup();
000F34 0239D7            LJMP    CS_ScaleDisplay_LcdBackup
000F37         ?C0048?CS_SCALEDISPLAY:
  356: 		    else if(R_Weight_FlashTime<60) 
000F37 EF                MOV     A,R7
000F38 C3                CLR     C
000F39 943C              SUBB    A,#03CH
000F3B 5002              JNC     ?C0050?CS_SCALEDISPLAY
  357: 				CS_ScaleDisplay_LcdShowNoDigit();
000F3D 8019              SJMP    CS_ScaleDisplay_LcdShowNoDigit
000F3F         ?C0050?CS_SCALEDISPLAY:
  358: 		    		else if(R_Weight_FlashTime<90)
000F3F EF                MOV     A,R7
000F40 C3                CLR     C
000F41 945A              SUBB    A,#05AH
000F43 5002              JNC     ?C0052?CS_SCALEDISPLAY
  359: 					CS_ScaleDisplay_LcdRestore();
000F45 802C              SJMP    CS_ScaleDisplay_LcdRestore
000F47         ?C0052?CS_SCALEDISPLAY:
  360: 		     			else if(R_Weight_FlashTime<120) 
000F47 EF                MOV     A,R7
000F48 C3                CLR     C
000F49 9478              SUBB    A,#078H
000F4B 5002              JNC     ?C0054?CS_SCALEDISPLAY
  361: 						CS_ScaleDisplay_LcdShowNoDigit();
000F4D 8009              SJMP    CS_ScaleDisplay_LcdShowNoDigit
000F4F         ?C0054?CS_SCALEDISPLAY:
  362: 		   			 	else if(R_Weight_FlashTime<150)
000F4F EF                MOV     A,R7
000F50 C3                CLR     C
000F51 9496              SUBB    A,#096H
000F53 5002              JNC     ?C0057?CS_SCALEDISPLAY
  363: 							CS_ScaleDisplay_LcdRestore();		
000F55 F173              ACALL   CS_ScaleDisplay_LcdRestore
  364: 		}
  365: }
000F57         ?C0057?CS_SCALEDISPLAY:
000F57 22                RET     
----- FUNCTION CS_ScaleDisplay_SteadyFlash (END) -------


----- FUNCTION CS_ScaleDisplay_LcdShowNoDigit (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  306: void CS_ScaleDisplay_LcdShowNoDigit(void)
  307: {
  308: 	CS_Lcd_Send_Data[0] &= 0x0f;
  309: 	CS_Lcd_Send_Data[1] &= 0x00;
000F58 904D28            MOV     DPTR,#CS_Lcd_Send_Data
000F5B E0                MOVX    A,@DPTR
000F5C 540F              ANL     A,#0FH
000F5E F0                MOVX    @DPTR,A
  310: 	CS_Lcd_Send_Data[2] &= 0x08;
000F5F A3                INC     DPTR
000F60 E0                MOVX    A,@DPTR
000F61 E4                CLR     A
000F62 F0                MOVX    @DPTR,A
  311: 	CS_Lcd_Send_Data[3] &= 0x08;
000F63 A3                INC     DPTR
000F64 E0                MOVX    A,@DPTR
000F65 5408              ANL     A,#08H
000F67 F0                MOVX    @DPTR,A
  312: 	CS_Lcd_Send_Data[4] &= 0xf0;
000F68 A3                INC     DPTR
000F69 E0                MOVX    A,@DPTR
000F6A 5408              ANL     A,#08H
000F6C F0                MOVX    @DPTR,A
  313: }
000F6D A3                INC     DPTR
000F6E E0                MOVX    A,@DPTR
000F6F 54F0              ANL     A,#0F0H
000F71 F0                MOVX    @DPTR,A
  314: 
000F72 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdShowNoDigit (END) -------


----- FUNCTION CS_ScaleDisplay_LcdRestore (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  335: void CS_ScaleDisplay_LcdRestore(void)
  336: {
  337: 	CS_Lcd_Send_Data[0] = CS_Lcd_Send_Data_BAK[0];
  338: 	CS_Lcd_Send_Data[1] = CS_Lcd_Send_Data_BAK[1];
000F73 904D1D            MOV     DPTR,#CS_Lcd_Send_Data_BAK
000F76 E0                MOVX    A,@DPTR
000F77 904D28            MOV     DPTR,#CS_Lcd_Send_Data
000F7A F0                MOVX    @DPTR,A
  339: 	CS_Lcd_Send_Data[2] = CS_Lcd_Send_Data_BAK[2];
000F7B 904D1E            MOV     DPTR,#CS_Lcd_Send_Data_BAK+01H
000F7E E0                MOVX    A,@DPTR
000F7F 904D29            MOV     DPTR,#CS_Lcd_Send_Data+01H
000F82 F0                MOVX    @DPTR,A
  340: 	CS_Lcd_Send_Data[3] = CS_Lcd_Send_Data_BAK[3];
000F83 904D1F            MOV     DPTR,#CS_Lcd_Send_Data_BAK+02H
000F86 E0                MOVX    A,@DPTR
000F87 904D2A            MOV     DPTR,#CS_Lcd_Send_Data+02H
000F8A F0                MOVX    @DPTR,A
  341: 	CS_Lcd_Send_Data[4] = CS_Lcd_Send_Data_BAK[4];
000F8B 904D20            MOV     DPTR,#CS_Lcd_Send_Data_BAK+03H
000F8E E0                MOVX    A,@DPTR
000F8F 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
000F92 F0                MOVX    @DPTR,A
  342: }
000F93 904D21            MOV     DPTR,#CS_Lcd_Send_Data_BAK+04H
000F96 E0                MOVX    A,@DPTR
000F97 904D2C            MOV     DPTR,#CS_Lcd_Send_Data+04H
000F9A F0                MOVX    @DPTR,A
  343: 
000F9B 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdRestore (END) -------


----- FUNCTION CS_Scale_Proc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  121: void CS_Scale_Proc(void)
  122: {
  123: 	if(R_Scale_state == CS_Scale_state_init)
  124: 		{	
000F9C 904CC5            MOV     DPTR,#R_Scale_state
000F9F E0                MOVX    A,@DPTR
000FA0 7005              JNZ     ?C0001?CS_SCALE_PROC
  125: 		CS_Scale_PowerOnProc(0);
  126: 		}
000FA2 C200              CLR     ?CS_Scale_PowerOnProc?BIT
000FA4 122DA4            LCALL   CS_Scale_PowerOnProc
  127: 	if(R_Scale_state == CS_Scale_state_standby)
000FA7         ?C0001?CS_SCALE_PROC:
  128: 		{
000FA7 904CC5            MOV     DPTR,#R_Scale_state
000FAA E0                MOVX    A,@DPTR
000FAB B40205            CJNE    A,#02H,?C0002?CS_SCALE_PROC
  129: 		CS_Scale_StandbyProc(0);		
  130: 		}
000FAE E4                CLR     A
000FAF FF                MOV     R7,A
000FB0 122E8D            LCALL   _CS_Scale_StandbyProc
  131: 		
000FB3         ?C0002?CS_SCALE_PROC:
  132: 	if(B_Weight_AdOk == true)
000FB3 904CD7            MOV     DPTR,#B_Weight_AdOk
000FB6 E0                MOVX    A,@DPTR
000FB7 6401              XRL     A,#01H
000FB9 703E              JNZ     ?C0009?CS_SCALE_PROC
  133: 		{		
  134: 		B_Weight_AdOk = false;	
000FBB F0                MOVX    @DPTR,A
  135: 		
  136: 		if(CS_Scale_ZeroProc(GetPowerOnZeroState,0)== false)	//还没上电取零点先取零点
000FBC FD                MOV     R5,A
000FBD FC                MOV     R4,A
000FBE 7F02              MOV     R7,#02H
000FC0 1212FB            LCALL   _CS_Scale_ZeroProc
000FC3 EF                MOV     A,R7
000FC4 4E                ORL     A,R6
000FC5 7007              JNZ     ?C0004?CS_SCALE_PROC
  137: 			{
  138: 			CS_Scale_ZeroProc(FindPowerOnZero,0);
000FC7 FD                MOV     R5,A
000FC8 FC                MOV     R4,A
000FC9 7F0A              MOV     R7,#0AH
000FCB 0212FB            LJMP    _CS_Scale_ZeroProc
  139: 			}
000FCE         ?C0004?CS_SCALE_PROC:
  140: 		else
  141: 			{
  142: 				
  143: 			if(R_Scale_state == CS_Scale_state_weighting)
000FCE 904CC5            MOV     DPTR,#R_Scale_state
000FD1 E0                MOVX    A,@DPTR
000FD2 B40106            CJNE    A,#01H,?C0006?CS_SCALE_PROC
  144: 				{
  145: 				CS_Scale_WeightProc();
000FD5 122B69            LCALL   CS_Scale_WeightProc
  146: 				CS_ScaleDisplay();
000FD8 121543            LCALL   CS_ScaleDisplay
  147: 				}
000FDB         ?C0006?CS_SCALE_PROC:
  148: 			if(R_Scale_state == CS_Scale_state_locking)
000FDB 904CC5            MOV     DPTR,#R_Scale_state
000FDE E0                MOVX    A,@DPTR
000FDF B40407            CJNE    A,#04H,?C0007?CS_SCALE_PROC
  149: 				{					
  150: 				CS_ScaleDisplay_SteadyFlash();
000FE2 F123              ACALL   CS_ScaleDisplay_SteadyFlash
  151: 				CS_Scale_SteadyProc(SteadyProcRun);
000FE4 7F01              MOV     R7,#01H
000FE6 122CF5            LCALL   _CS_Scale_SteadyProc
  152: 				}
000FE9         ?C0007?CS_SCALE_PROC:
  153: 			if(R_Scale_state == CS_Scale_state_caling)
000FE9 904CC5            MOV     DPTR,#R_Scale_state
000FEC E0                MOVX    A,@DPTR
000FED B40304            CJNE    A,#03H,?C0008?CS_SCALE_PROC
  154: 				{
  155: 				CS_Scale_CaliProc(CaliProcRun);
000FF0 E4                CLR     A
000FF1 FF                MOV     R7,A
000FF2 5108              ACALL   _CS_Scale_CaliProc
  156: 				}	
000FF4         ?C0008?CS_SCALE_PROC:
  157: 			
  158: 			CS_Scale_TimeOutProc(0);
000FF4 E4                CLR     A
000FF5 FF                MOV     R7,A
000FF6 123587            LCALL   _CS_Scale_TimeOutProc
  159: 			}
  160: 		}
  161: }	
000FF9         ?C0009?CS_SCALE_PROC:
000FF9 22                RET     
----- FUNCTION CS_Scale_Proc (END) -------


----- FUNCTION systemInit (BEGIN) -----
 FILE: 'system.c'
   69: void systemInit(void)
   70: {
   71: 	LPM_DISABLE();
   72: 	if(*mem_poweron_flag == CS_POWERON_FLAG		//poweron or reset
000FFA 9049FE            MOV     DPTR,#049FEH
000FFD E4                CLR     A
000FFE F0                MOVX    @DPTR,A
   73: 	/*|| *mem_poweron_flag == CS_IOWAKE_FLAG*/) {		//iowake from sleep
000FFF 9049FC            MOV     DPTR,#049FCH
001002 E0                MOVX    A,@DPTR
001003 6410              XRL     A,#010H
001005 704E              JNZ     ?C0005?SYSTEM
   74: 		sys_state = SYS_ST_RUN;
   75: 		R_Scale_state = CS_Scale_state_init;
001007 904E5B            MOV     DPTR,#sys_state
00100A 7402              MOV     A,#02H
00100C F0                MOVX    @DPTR,A
   76: 
00100D E4                CLR     A
00100E 904CC5            MOV     DPTR,#R_Scale_state
001011 F0                MOVX    @DPTR,A
   77: 		QueueInit();
001012 F1E5              ACALL   QueueInit
   78: 		//read spiflash data,save to buffer
   79: 		SpiFlashOperator(CS_CMD_READ_FLASH);
001014 7F40              MOV     R7,#040H
001016 121F3B            LCALL   _SpiFlashOperator
   80: 		bleConnStatus = BLE_STATUS_DISCONN;
001019 E4                CLR     A
00101A 904C5B            MOV     DPTR,#bleConnStatus
00101D F0                MOVX    @DPTR,A
   81: 		if(deviceInfo.registerFlag != DEVICE_REGISTERED)
00101E 904C06            MOV     DPTR,#deviceInfo
001021 E0                MOVX    A,@DPTR
001022 6401              XRL     A,#01H
001024 600B              JZ      ?C0006?SYSTEM
   82: 		{
   83: 			xmemset(mem_register_buf, 0, sizeof(deviceInfo));
001026 7B0A              MOV     R3,#0AH
001028 E4                CLR     A
001029 FD                MOV     R5,A
00102A 7F0E              MOV     R7,#0EH
00102C 7E4C              MOV     R6,#04CH
00102E 121F9C            LCALL   _xmemset
   84: 		}
001031         ?C0006?SYSTEM:
   85: 		*(mem_le_adv_data + 13) = deviceInfo.registerFlag;
001031 904C06            MOV     DPTR,#deviceInfo
001034 E0                MOVX    A,@DPTR
001035 9043E7            MOV     DPTR,#043E7H
001038 F0                MOVX    @DPTR,A
   86: 			
   87: 		YC_UtilTimerInit();
001039 11C6              ACALL   YC_UtilTimerInit
   88: 		//YC_UtilTimerStart(1, SoftTimer_1SCallback, &SoftTimer_1STimerID);
   89: 		YC_UtilTimerStartMs(10, SoftTimer_10mSCallback, &SoftTimer_10msTimerID);
00103B 7BFF              MOV     R3,#0FFH
00103D 7A08              MOV     R2,#HIGH SoftTimer_10mSCallback
00103F 79F3              MOV     R1,#LOW SoftTimer_10mSCallback
001041 904DDA            MOV     DPTR,#?_YC_UtilTimerStartMs?BYTE+05H
001044 744E              MOV     A,#HIGH SoftTimer_10msTimerID
001046 F0                MOVX    @DPTR,A
001047 A3                INC     DPTR
001048 7440              MOV     A,#LOW SoftTimer_10msTimerID
00104A F0                MOVX    @DPTR,A
00104B 7F0A              MOV     R7,#0AH
00104D 7E00              MOV     R6,#00H
00104F 3189              ACALL   _YC_UtilTimerStartMs
   90: 		CS_Scale_PowerOn();	
001051 51C8              ACALL   CS_Scale_PowerOn
   91: 		
   92: 	}
001053 8036              SJMP    ?C0007?SYSTEM
001055         ?C0005?SYSTEM:
   93: 	else {	//wake from LPM mode
   94: 		if(YC_GPIOGetInputStatus(5) == 0 ||	//GPIO5, key is  down	
001055 7F05              MOV     R7,#05H
001057 1191              ACALL   _YC_GPIOGetInputStatus
001059 5006              JNC     ?C0009?SYSTEM
00105B 7F1B              MOV     R7,#01BH
00105D 1191              ACALL   _YC_GPIOGetInputStatus
00105F 4024              JC      ?C0008?SYSTEM
001061         ?C0009?SYSTEM:
   95: 		YC_GPIOGetInputStatus(27) == 0) {	//GPIO27, scale wakeup
   96: 			sys_state = SYS_ST_RUN;
001061 904E5B            MOV     DPTR,#sys_state
001064 7402              MOV     A,#02H
001066 F0                MOVX    @DPTR,A
   97: 			R_Scale_state = CS_Scale_state_standby;
001067 904CC5            MOV     DPTR,#R_Scale_state
00106A F0                MOVX    @DPTR,A
   98: 			YC_UtilTimerInit();
00106B 11C6              ACALL   YC_UtilTimerInit
   99: 			//YC_UtilTimerStart(1, SoftTimer_1SCallback, &SoftTimer_1STimerID);
  100: 			YC_UtilTimerStartMs(10, SoftTimer_10mSCallback, &SoftTimer_10msTimerID);
00106D 7BFF              MOV     R3,#0FFH
00106F 7A08              MOV     R2,#HIGH SoftTimer_10mSCallback
001071 79F3              MOV     R1,#LOW SoftTimer_10mSCallback
001073 904DDA            MOV     DPTR,#?_YC_UtilTimerStartMs?BYTE+05H
001076 744E              MOV     A,#HIGH SoftTimer_10msTimerID
001078 F0                MOVX    @DPTR,A
001079 A3                INC     DPTR
00107A 7440              MOV     A,#LOW SoftTimer_10msTimerID
00107C F0                MOVX    @DPTR,A
00107D 7F0A              MOV     R7,#0AH
00107F 7E00              MOV     R6,#00H
001081 3189              ACALL   _YC_UtilTimerStartMs
  101: 			//CS_Scale_PowerOn();	
  102: 
  103: 			//R_Debug_temp=R_Scale_state;
  104: 			//CS_ScaleDisplay_Debug();
  105: 			//while(1);
  106: 		}
001083 8006              SJMP    ?C0007?SYSTEM
001085         ?C0008?SYSTEM:
  107: 		else {	//remote bluetooth wakeup
  108: 			sys_state = SYS_ST_IDLE;
001085 904E5B            MOV     DPTR,#sys_state
001088 7401              MOV     A,#01H
00108A F0                MOVX    @DPTR,A
  109: 		}
  110: 	}
00108B         ?C0007?SYSTEM:
  111: 	*mem_poweron_flag = CS_NULL_FLAG;
00108B 9049FC            MOV     DPTR,#049FCH
00108E E4                CLR     A
00108F F0                MOVX    @DPTR,A
  112: }
001090 22                RET     
----- FUNCTION systemInit (END) -------


----- FUNCTION _YC_GPIOGetInputStatus (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  140: bool YC_GPIOGetInputStatus(u8_t gpio_num)
  141: {
;---- Variable 'gpio_num' assigned to Register 'R7' ----
  142: 	u8_t queue, group;
  143: 
  144: 	queue = (gpio_num & 7);
001091 EF                MOV     A,R7
001092 5407              ANL     A,#07H
001094 FE                MOV     R6,A
;---- Variable 'queue' assigned to Register 'R6' ----
  145: 	group = (gpio_num>>3 & 3);
001095 EF                MOV     A,R7
001096 13                RRC     A
001097 13                RRC     A
001098 13                RRC     A
001099 5403              ANL     A,#03H
00109B FF                MOV     R7,A
;---- Variable 'group' assigned to Register 'R7' ----
  146: 
  147: 	return (REG_GPIO_IN(group) & (1<<queue));
00109C 241C              ADD     A,#01CH
00109E FD                MOV     R5,A
00109F E4                CLR     A
0010A0 3481              ADDC    A,#081H
0010A2 8D82              MOV     DPL,R5
0010A4 F583              MOV     DPH,A
0010A6 E0                MOVX    A,@DPTR
0010A7 FD                MOV     R5,A
0010A8 7C00              MOV     R4,#00H
0010AA AF06              MOV     R7,AR6
0010AC 7401              MOV     A,#01H
0010AE 7E00              MOV     R6,#00H
0010B0 A807              MOV     R0,AR7
0010B2 08                INC     R0
0010B3 8005              SJMP    ?C0021?YC_PERIPHERAL
0010B5         ?C0020?YC_PERIPHERAL:
0010B5 C3                CLR     C
0010B6 33                RLC     A
0010B7 CE                XCH     A,R6
0010B8 33                RLC     A
0010B9 CE                XCH     A,R6
0010BA         ?C0021?YC_PERIPHERAL:
0010BA D8F9              DJNZ    R0,?C0020?YC_PERIPHERAL
0010BC FF                MOV     R7,A
0010BD EE                MOV     A,R6
0010BE 5C                ANL     A,R4
0010BF FE                MOV     R6,A
0010C0 EF                MOV     A,R7
0010C1 5D                ANL     A,R5
0010C2 4E                ORL     A,R6
0010C3 24FF              ADD     A,#0FFH
  148: }
0010C5 22                RET     
----- FUNCTION _YC_GPIOGetInputStatus (END) -------


----- FUNCTION YC_UtilTimerInit (BEGIN) -----
 FILE: 'YC_Sys.c'
    8: void YC_UtilTimerInit(void)
    9: {
   10: 	u8_t i;
   11: 	
   12: 	YC_UtilTimer.timer_flages = 0;
0010C6 E4                CLR     A
0010C7 904CDB            MOV     DPTR,#YC_UtilTimer
0010CA F0                MOVX    @DPTR,A
   13: 	YC_UtilTimer.last_timer = YC_CLK_N;
0010CB 908101            MOV     DPTR,#08101H
0010CE E0                MOVX    A,@DPTR
0010CF FF                MOV     R7,A
0010D0 E4                CLR     A
0010D1 FC                MOV     R4,A
0010D2 FD                MOV     R5,A
0010D3 FE                MOV     R6,A
0010D4 7808              MOV     R0,#08H
0010D6 12031F            LCALL   ?C?LSHL
0010D9 A804              MOV     R0,AR4
0010DB A905              MOV     R1,AR5
0010DD AA06              MOV     R2,AR6
0010DF AB07              MOV     R3,AR7
0010E1 908100            MOV     DPTR,#08100H
0010E4 E0                MOVX    A,@DPTR
0010E5 FF                MOV     R7,A
0010E6 E4                CLR     A
0010E7 EB                MOV     A,R3
0010E8 4F                ORL     A,R7
0010E9 FF                MOV     R7,A
0010EA EA                MOV     A,R2
0010EB FE                MOV     R6,A
0010EC E9                MOV     A,R1
0010ED FD                MOV     R5,A
0010EE E8                MOV     A,R0
0010EF FC                MOV     R4,A
0010F0 C004              PUSH    AR4
0010F2 C005              PUSH    AR5
0010F4 C006              PUSH    AR6
0010F6 C007              PUSH    AR7
0010F8 908102            MOV     DPTR,#08102H
0010FB E0                MOVX    A,@DPTR
0010FC FF                MOV     R7,A
0010FD E4                CLR     A
0010FE FC                MOV     R4,A
0010FF FD                MOV     R5,A
001100 FE                MOV     R6,A
001101 7810              MOV     R0,#010H
001103 12031F            LCALL   ?C?LSHL
001106 D003              POP     AR3
001108 D002              POP     AR2
00110A D001              POP     AR1
00110C D000              POP     AR0
00110E EF                MOV     A,R7
00110F 4B                ORL     A,R3
001110 FF                MOV     R7,A
001111 EE                MOV     A,R6
001112 4A                ORL     A,R2
001113 FE                MOV     R6,A
001114 ED                MOV     A,R5
001115 49                ORL     A,R1
001116 FD                MOV     R5,A
001117 EC                MOV     A,R4
001118 48                ORL     A,R0
001119 FC                MOV     R4,A
00111A C004              PUSH    AR4
00111C C005              PUSH    AR5
00111E C006              PUSH    AR6
001120 C007              PUSH    AR7
001122 A3                INC     DPTR
001123 E0                MOVX    A,@DPTR
001124 FF                MOV     R7,A
001125 E4                CLR     A
001126 FC                MOV     R4,A
001127 FD                MOV     R5,A
001128 FE                MOV     R6,A
001129 7818              MOV     R0,#018H
00112B 12031F            LCALL   ?C?LSHL
00112E D003              POP     AR3
001130 D002              POP     AR2
001132 D001              POP     AR1
001134 D000              POP     AR0
001136 EF                MOV     A,R7
001137 4B                ORL     A,R3
001138 FF                MOV     R7,A
001139 EE                MOV     A,R6
00113A 4A                ORL     A,R2
00113B FE                MOV     R6,A
00113C ED                MOV     A,R5
00113D 49                ORL     A,R1
00113E FD                MOV     R5,A
00113F EC                MOV     A,R4
001140 48                ORL     A,R0
001141 FC                MOV     R4,A
001142 904D14            MOV     DPTR,#YC_UtilTimer+039H
001145 120332            LCALL   ?C?LSTXDATA
   14: 	for(i = 0; i < YC_UTIL_TIMER_NUM; i++){
001148 E4                CLR     A
001149 904E58            MOV     DPTR,#i
00114C F0                MOVX    @DPTR,A
00114D         ?C0001?YC_SYS:
00114D 904E58            MOV     DPTR,#i
001150 E0                MOVX    A,@DPTR
001151 FF                MOV     R7,A
001152 C3                CLR     C
001153 9408              SUBB    A,#08H
001155 5031              JNC     ?C0004?YC_SYS
   15: 		YC_UtilTimer.callback[i] = 0;
001157 EF                MOV     A,R7
001158 75F003            MOV     B,#03H
00115B A4                MUL     AB
00115C 24DC              ADD     A,#LOW YC_UtilTimer+01H
00115E F582              MOV     DPL,A
001160 E4                CLR     A
001161 344C              ADDC    A,#HIGH YC_UtilTimer+01H
001163 F583              MOV     DPH,A
001165 E4                CLR     A
001166 F0                MOVX    @DPTR,A
001167 A3                INC     DPTR
001168 F0                MOVX    @DPTR,A
001169 A3                INC     DPTR
00116A F0                MOVX    @DPTR,A
   16: 		YC_UtilTimer.timer_end[i] = 0;
00116B EF                MOV     A,R7
00116C 25E0              ADD     A,ACC
00116E 25E0              ADD     A,ACC
001170 24F4              ADD     A,#LOW YC_UtilTimer+019H
001172 F582              MOV     DPL,A
001174 E4                CLR     A
001175 344C              ADDC    A,#HIGH YC_UtilTimer+019H
001177 F583              MOV     DPH,A
001179 12033E            LCALL   ?C?LSTKXDATA
00117C 00                DB      00H
00117D 00                DB      00H
00117E 00                DB      00H
00117F 00                DB      00H
   17: 	}
001180 904E58            MOV     DPTR,#i
001183 E0                MOVX    A,@DPTR
001184 04                INC     A
001185 F0                MOVX    @DPTR,A
001186 80C5              SJMP    ?C0001?YC_SYS
   18: 	return;
   19: }
001188         ?C0004?YC_SYS:
001188 22                RET     
----- FUNCTION YC_UtilTimerInit (END) -------


----- FUNCTION _YC_UtilTimerStartMs (BEGIN) -----
 FILE: 'YC_Sys.c'
   44: bool YC_UtilTimerStartMs(u16_t time_in_ms, p_TimerCallback callback, pxbyte timer_id)
   45: {
001189 904DD5            MOV     DPTR,#time_in_ms
00118C EE                MOV     A,R6
00118D F0                MOVX    @DPTR,A
00118E A3                INC     DPTR
00118F EF                MOV     A,R7
001190 F0                MOVX    @DPTR,A
;---- Variable 'callback' assigned to Register 'R1/R2/R3' ----
   46: 	u8_t i = 0;
   47: 	
001191 E4                CLR     A
001192 904DDC            MOV     DPTR,#i
001195 F0                MOVX    @DPTR,A
   48: 	//do we have enough timers?
   49: 	if(YC_UtilTimer.timer_flages == 0xff){
001196 904CDB            MOV     DPTR,#YC_UtilTimer
001199 E0                MOVX    A,@DPTR
00119A B4FF02            CJNE    A,#0FFH,?C0007?YC_SYS
   50: 		return false;
00119D C3                CLR     C
00119E 22                RET     
   51: 	}
00119F         ?C0007?YC_SYS:
   52: 	while(i < YC_UTIL_TIMER_NUM){
00119F 904DDC            MOV     DPTR,#i
0011A2 E0                MOVX    A,@DPTR
0011A3 FF                MOV     R7,A
0011A4 C3                CLR     C
0011A5 9408              SUBB    A,#08H
0011A7 502D              JNC     ?C0008?YC_SYS
   53: 		if(!((YC_UtilTimer.timer_flages >> i) & 1)){
0011A9 904CDB            MOV     DPTR,#YC_UtilTimer
0011AC E0                MOVX    A,@DPTR
0011AD FE                MOV     R6,A
0011AE A807              MOV     R0,AR7
0011B0 08                INC     R0
0011B1 8002              SJMP    ?C0022?YC_SYS
0011B3         ?C0021?YC_SYS:
0011B3 C3                CLR     C
0011B4 13                RRC     A
0011B5         ?C0022?YC_SYS:
0011B5 D8FC              DJNZ    R0,?C0021?YC_SYS
0011B7 20E014            JB      ACC.0,?C0009?YC_SYS
   54: 			if(timer_id)
0011BA 904DDA            MOV     DPTR,#timer_id
0011BD E0                MOVX    A,@DPTR
0011BE FE                MOV     R6,A
0011BF A3                INC     DPTR
0011C0 E0                MOVX    A,@DPTR
0011C1 FF                MOV     R7,A
0011C2 4E                ORL     A,R6
0011C3 6011              JZ      ?C0008?YC_SYS
   55: 				*timer_id = i;
0011C5 A3                INC     DPTR
0011C6 E0                MOVX    A,@DPTR
0011C7 8F82              MOV     DPL,R7
0011C9 8E83              MOV     DPH,R6
0011CB F0                MOVX    @DPTR,A
   56: 			break;
0011CC 8008              SJMP    ?C0008?YC_SYS
   57: 		}
0011CE         ?C0009?YC_SYS:
   58: 		++i;
0011CE 904DDC            MOV     DPTR,#i
0011D1 E0                MOVX    A,@DPTR
0011D2 04                INC     A
0011D3 F0                MOVX    @DPTR,A
   59: 	}
0011D4 80C9              SJMP    ?C0007?YC_SYS
0011D6         ?C0008?YC_SYS:
   60: 	YC_UtilTimer.timer_flages |= 1 << i;
0011D6 904CDB            MOV     DPTR,#YC_UtilTimer
0011D9 E0                MOVX    A,@DPTR
0011DA FF                MOV     R7,A
0011DB 904DDC            MOV     DPTR,#i
0011DE E0                MOVX    A,@DPTR
0011DF FE                MOV     R6,A
0011E0 7401              MOV     A,#01H
0011E2 A806              MOV     R0,AR6
0011E4 08                INC     R0
0011E5 8002              SJMP    ?C0024?YC_SYS
0011E7         ?C0023?YC_SYS:
0011E7 C3                CLR     C
0011E8 33                RLC     A
0011E9         ?C0024?YC_SYS:
0011E9 D8FC              DJNZ    R0,?C0023?YC_SYS
0011EB 4F                ORL     A,R7
0011EC 904CDB            MOV     DPTR,#YC_UtilTimer
0011EF F0                MOVX    @DPTR,A
   61: 	YC_UtilTimer.callback[i] = callback;
0011F0 EE                MOV     A,R6
0011F1 75F003            MOV     B,#03H
0011F4 A4                MUL     AB
0011F5 24DC              ADD     A,#LOW YC_UtilTimer+01H
0011F7 F582              MOV     DPL,A
0011F9 E4                CLR     A
0011FA 344C              ADDC    A,#HIGH YC_UtilTimer+01H
0011FC F583              MOV     DPH,A
0011FE EB                MOV     A,R3
0011FF F0                MOVX    @DPTR,A
001200 A3                INC     DPTR
001201 EA                MOV     A,R2
001202 F0                MOVX    @DPTR,A
001203 A3                INC     DPTR
001204 E9                MOV     A,R1
001205 F0                MOVX    @DPTR,A
   62: 	YC_UtilTimer.timer_end[i] = YC_CLK_N + ((u32_t)time_in_ms << 4)/5;
001206 908101            MOV     DPTR,#08101H
001209 E0                MOVX    A,@DPTR
00120A FF                MOV     R7,A
00120B E4                CLR     A
00120C FC                MOV     R4,A
00120D FD                MOV     R5,A
00120E FE                MOV     R6,A
00120F 7808              MOV     R0,#08H
001211 12031F            LCALL   ?C?LSHL
001214 A804              MOV     R0,AR4
001216 A905              MOV     R1,AR5
001218 AA06              MOV     R2,AR6
00121A AB07              MOV     R3,AR7
00121C 908100            MOV     DPTR,#08100H
00121F E0                MOVX    A,@DPTR
001220 FF                MOV     R7,A
001221 E4                CLR     A
001222 EB                MOV     A,R3
001223 4F                ORL     A,R7
001224 FF                MOV     R7,A
001225 EA                MOV     A,R2
001226 FE                MOV     R6,A
001227 E9                MOV     A,R1
001228 FD                MOV     R5,A
001229 E8                MOV     A,R0
00122A FC                MOV     R4,A
00122B C004              PUSH    AR4
00122D C005              PUSH    AR5
00122F C006              PUSH    AR6
001231 C007              PUSH    AR7
001233 908102            MOV     DPTR,#08102H
001236 E0                MOVX    A,@DPTR
001237 FF                MOV     R7,A
001238 E4                CLR     A
001239 FC                MOV     R4,A
00123A FD                MOV     R5,A
00123B FE                MOV     R6,A
00123C 7810              MOV     R0,#010H
00123E 12031F            LCALL   ?C?LSHL
001241 D003              POP     AR3
001243 D002              POP     AR2
001245 D001              POP     AR1
001247 D000              POP     AR0
001249 EF                MOV     A,R7
00124A 4B                ORL     A,R3
00124B FF                MOV     R7,A
00124C EE                MOV     A,R6
00124D 4A                ORL     A,R2
00124E FE                MOV     R6,A
00124F ED                MOV     A,R5
001250 49                ORL     A,R1
001251 FD                MOV     R5,A
001252 EC                MOV     A,R4
001253 48                ORL     A,R0
001254 FC                MOV     R4,A
001255 C004              PUSH    AR4
001257 C005              PUSH    AR5
001259 C006              PUSH    AR6
00125B C007              PUSH    AR7
00125D A3                INC     DPTR
00125E E0                MOVX    A,@DPTR
00125F FF                MOV     R7,A
001260 E4                CLR     A
001261 FC                MOV     R4,A
001262 FD                MOV     R5,A
001263 FE                MOV     R6,A
001264 7818              MOV     R0,#018H
001266 12031F            LCALL   ?C?LSHL
001269 D003              POP     AR3
00126B D002              POP     AR2
00126D D001              POP     AR1
00126F D000              POP     AR0
001271 EF                MOV     A,R7
001272 4B                ORL     A,R3
001273 FF                MOV     R7,A
001274 EE                MOV     A,R6
001275 4A                ORL     A,R2
001276 FE                MOV     R6,A
001277 ED                MOV     A,R5
001278 49                ORL     A,R1
001279 FD                MOV     R5,A
00127A EC                MOV     A,R4
00127B 48                ORL     A,R0
00127C FC                MOV     R4,A
00127D C004              PUSH    AR4
00127F C005              PUSH    AR5
001281 C006              PUSH    AR6
001283 C007              PUSH    AR7
001285 904DD5            MOV     DPTR,#time_in_ms
001288 E0                MOVX    A,@DPTR
001289 FE                MOV     R6,A
00128A A3                INC     DPTR
00128B E0                MOVX    A,@DPTR
00128C FF                MOV     R7,A
00128D E4                CLR     A
00128E FC                MOV     R4,A
00128F FD                MOV     R5,A
001290 7804              MOV     R0,#04H
001292 12031F            LCALL   ?C?LSHL
001295 E4                CLR     A
001296 7B05              MOV     R3,#05H
001298 FA                MOV     R2,A
001299 F9                MOV     R1,A
00129A F8                MOV     R0,A
00129B 120269            LCALL   ?C?ULDIV
00129E D003              POP     AR3
0012A0 D002              POP     AR2
0012A2 D001              POP     AR1
0012A4 D000              POP     AR0
0012A6 EF                MOV     A,R7
0012A7 2B                ADD     A,R3
0012A8 FF                MOV     R7,A
0012A9 EE                MOV     A,R6
0012AA 3A                ADDC    A,R2
0012AB FE                MOV     R6,A
0012AC ED                MOV     A,R5
0012AD 39                ADDC    A,R1
0012AE FD                MOV     R5,A
0012AF EC                MOV     A,R4
0012B0 38                ADDC    A,R0
0012B1 FC                MOV     R4,A
0012B2 904DDC            MOV     DPTR,#i
0012B5 E0                MOVX    A,@DPTR
0012B6 25E0              ADD     A,ACC
0012B8 25E0              ADD     A,ACC
0012BA 24F4              ADD     A,#LOW YC_UtilTimer+019H
0012BC F582              MOV     DPL,A
0012BE E4                CLR     A
0012BF 344C              ADDC    A,#HIGH YC_UtilTimer+019H
0012C1 F583              MOV     DPH,A
0012C3 120332            LCALL   ?C?LSTXDATA
   63: 	return true;
0012C6 D3                SETB    C
   64: }
0012C7 22                RET     
----- FUNCTION _YC_UtilTimerStartMs (END) -------


----- FUNCTION CS_Scale_PowerOn (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  169: void CS_Scale_PowerOn(void)
  170: {
  171: 	
  172: 	if(R_Scale_state == CS_Scale_state_init)
0012C8 904CC5            MOV     DPTR,#R_Scale_state
0012CB E0                MOVX    A,@DPTR
0012CC 702C              JNZ     ?C0011?CS_SCALE_PROC
  173: 		{
  174: 		B_Weight_AdOk = false;
0012CE 904CD7            MOV     DPTR,#B_Weight_AdOk
0012D1 F0                MOVX    @DPTR,A
  175: 		R_Weight_Com_Coo.pre =CS_CommTo1186_Null;	
0012D2 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
0012D5 F0                MOVX    @DPTR,A
  176: 		R_Weight_Com_Coo.now = CS_CommTo1186_Null;	
0012D6 904D55            MOV     DPTR,#R_Weight_Com_Coo
0012D9 F0                MOVX    @DPTR,A
  177: 		//R_Scale_state =	CS_Scale_state_weighting;
  178: 		R_Selet_Unit = CS_ScaleDisplay_L_kg;
0012DA 904CC6            MOV     DPTR,#R_Selet_Unit
0012DD F0                MOVX    @DPTR,A
  179: 
  180: 		R_Debug_temp = 0;
0012DE A3                INC     DPTR
0012DF F0                MOVX    @DPTR,A
0012E0 A3                INC     DPTR
0012E1 F0                MOVX    @DPTR,A
  181: 		B_Debug_Test =false;
0012E2 C201              CLR     B_Debug_Test
  182: 		
  183: 		CS_Scale_CaliProc(CaliProcSetCali);		
0012E4 7F01              MOV     R7,#01H
0012E6 120A08            LCALL   _CS_Scale_CaliProc
  184: 		CS_Scale_ZeroProc(ZeroProcReset,0);	
0012E9 E4                CLR     A
0012EA FD                MOV     R5,A
0012EB FC                MOV     R4,A
0012EC 7F04              MOV     R7,#04H
0012EE 51FB              ACALL   _CS_Scale_ZeroProc
  185: 		
  186: 		CS_Scale_TimeOutProc(CS_Reset_AllTime);
0012F0 7F06              MOV     R7,#06H
0012F2 123587            LCALL   _CS_Scale_TimeOutProc
  187: 		CS_Scale_PowerOnProc(1);
0012F5 D200              SETB    ?CS_Scale_PowerOnProc?BIT
0012F7 122DA4            LCALL   CS_Scale_PowerOnProc
  188: 		}
  189: }
0012FA         ?C0011?CS_SCALE_PROC:
0012FA 22                RET     
----- FUNCTION CS_Scale_PowerOn (END) -------


----- FUNCTION _CS_Scale_ZeroProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  391: u16_t  CS_Scale_ZeroProc(u8_t option,u16_t setdata)
  392: {
;---- Variable 'setdata' assigned to Register 'R4/R5' ----
0012FB 904DED            MOV     DPTR,#option
0012FE EF                MOV     A,R7
0012FF F0                MOVX    @DPTR,A
  393: 	static	u8_t	   xdata R_Weight_GetZeroTimeOut = 0;	
  394: 	static	u16_t  xdata R_AD_PowerOnZero;	//上电零点AD值
  395: 	static	u16_t  xdata R_AD_Zero;			//零点AD值
  396: 	static	u8_t    xdata B_Weight_Zero;		//处于零点标志
  397: 	static	u8_t    xdata B_Weight_ZeroOk;	//上电获取完零点标志
  398: 	static	u8_t	   xdata B_LockDownCheck;	//下秤后第一次稳定追零
  399: 	static	u8_t	   xdata B_WeightZeroErr;		//零点错误标志
  400: 	
  401: 	u16_t	R_AdFilTimes;
  402: 	u16_t	R_AD_BUF;
  403: 	u16_t	weight_temp;
  404: 	u16_t	R_Open_Weight;
  405: 	u8_t		B_Weight_Pos;
  406: 
  407: 	
  408: 	
  409: 	if(option==ZeroProcReset)
001300 BF0408            CJNE    R7,#04H,?C0044?CS_SCALE_PROC
  410: 		{
  411: 		B_Weight_ZeroOk = 0;
001303 E4                CLR     A
001304 904C9B            MOV     DPTR,#B_Weight_ZeroOk
001307 F0                MOVX    @DPTR,A
  412: 		return 0;		
001308 FE                MOV     R6,A
001309 FF                MOV     R7,A
00130A 22                RET     
  413: 		}
00130B         ?C0044?CS_SCALE_PROC:
  414: 	if(option==SetPowerOnZero)
00130B 904DED            MOV     DPTR,#option
00130E E0                MOVX    A,@DPTR
00130F FB                MOV     R3,A
001310 B4050C            CJNE    A,#05H,?C0046?CS_SCALE_PROC
  415: 		{
  416: 		R_AD_PowerOnZero = setdata;
001313 904C96            MOV     DPTR,#R_AD_PowerOnZero
001316 EC                MOV     A,R4
001317 F0                MOVX    @DPTR,A
001318 A3                INC     DPTR
001319 ED                MOV     A,R5
00131A F0                MOVX    @DPTR,A
  417: 		return 0;		
00131B E4                CLR     A
00131C FE                MOV     R6,A
00131D FF                MOV     R7,A
00131E 22                RET     
  418: 		}
00131F         ?C0046?CS_SCALE_PROC:
  419: 	if(option==SetRunningZero)
00131F EB                MOV     A,R3
001320 B4060E            CJNE    A,#06H,?C0047?CS_SCALE_PROC
  420: 		{
  421: 		R_AD_Zero = setdata;
001323 AF05              MOV     R7,AR5
001325 904C98            MOV     DPTR,#R_AD_Zero
001328 EC                MOV     A,R4
001329 F0                MOVX    @DPTR,A
00132A A3                INC     DPTR
00132B EF                MOV     A,R7
00132C F0                MOVX    @DPTR,A
  422: 		return 0;		
00132D E4                CLR     A
00132E FE                MOV     R6,A
00132F FF                MOV     R7,A
001330 22                RET     
  423: 		}
001331         ?C0047?CS_SCALE_PROC:
  424: 	if(option==ClrLockDownCheckFlag)
001331 904DED            MOV     DPTR,#option
001334 E0                MOVX    A,@DPTR
001335 FD                MOV     R5,A
001336 B40808            CJNE    A,#08H,?C0048?CS_SCALE_PROC
  425: 		{
  426: 		B_LockDownCheck=false;
001339 E4                CLR     A
00133A 904C9C            MOV     DPTR,#B_LockDownCheck
00133D F0                MOVX    @DPTR,A
  427: 		return 0;
00133E FE                MOV     R6,A
00133F FF                MOV     R7,A
001340 22                RET     
  428: 		}
001341         ?C0048?CS_SCALE_PROC:
  429: 	
  430: 	if(option==FindPowerOnZero)
001341 ED                MOV     A,R5
001342 640A              XRL     A,#0AH
001344 7075              JNZ     ?C0049?CS_SCALE_PROC
  431: 	{
  432: 		
  433: 	
  434: 		if(R_Weight_GetZeroTimeOut <60)
001346 904C95            MOV     DPTR,#R_Weight_GetZeroTimeOut
001349 E0                MOVX    A,@DPTR
00134A C3                CLR     C
00134B 943C              SUBB    A,#03CH
00134D 5052              JNC     ?C0050?CS_SCALE_PROC
  435: 		{
  436: 		R_Weight_GetZeroTimeOut ++;
00134F E0                MOVX    A,@DPTR
001350 04                INC     A
001351 F0                MOVX    @DPTR,A
  437: 		
  438: 		R_AD_BUF = R_AD_Original;
001352 904CD8            MOV     DPTR,#R_AD_Original
001355 E0                MOVX    A,@DPTR
001356 FE                MOV     R6,A
001357 A3                INC     DPTR
001358 E0                MOVX    A,@DPTR
001359 FF                MOV     R7,A
00135A 904DEE            MOV     DPTR,#R_AD_BUF
00135D EE                MOV     A,R6
00135E F0                MOVX    @DPTR,A
00135F FC                MOV     R4,A
001360 A3                INC     DPTR
001361 EF                MOV     A,R7
001362 F0                MOVX    @DPTR,A
001363 FD                MOV     R5,A
  439: 		R_AD_BUF=CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
001364 E4                CLR     A
001365 FF                MOV     R7,A
001366 12313D            LCALL   _CS_Scale_AdcFilter
001369 904DEE            MOV     DPTR,#R_AD_BUF
00136C EE                MOV     A,R6
00136D F0                MOVX    @DPTR,A
00136E FC                MOV     R4,A
00136F A3                INC     DPTR
001370 EF                MOV     A,R7
001371 F0                MOVX    @DPTR,A
001372 FD                MOV     R5,A
  440: 		R_AdFilTimes = CS_Scale_AdcFilter(ScaleAdcFilterGetFilTimes,R_AD_BUF);
001373 7F02              MOV     R7,#02H
001375 12313D            LCALL   _CS_Scale_AdcFilter
;---- Variable 'R_AdFilTimes' assigned to Register 'R6/R7' ----
  441: 		
  442: 			if(R_AdFilTimes >=CS_PowerOnAD_Steadytimes)
001378 C3                CLR     C
001379 EF                MOV     A,R7
00137A 940A              SUBB    A,#0AH
00137C EE                MOV     A,R6
00137D 9400              SUBB    A,#00H
00137F 403A              JC      ?C0049?CS_SCALE_PROC
  443: 				{
  444: 				R_AD_Zero	= R_AD_BUF;
001381 904DEE            MOV     DPTR,#R_AD_BUF
001384 E0                MOVX    A,@DPTR
001385 FE                MOV     R6,A
001386 A3                INC     DPTR
001387 E0                MOVX    A,@DPTR
001388 FF                MOV     R7,A
001389 904C98            MOV     DPTR,#R_AD_Zero
00138C EE                MOV     A,R6
00138D F0                MOVX    @DPTR,A
00138E A3                INC     DPTR
00138F EF                MOV     A,R7
001390 F0                MOVX    @DPTR,A
  445: 				R_AD_PowerOnZero = R_AD_BUF;
001391 904C96            MOV     DPTR,#R_AD_PowerOnZero
001394 EE                MOV     A,R6
001395 F0                MOVX    @DPTR,A
001396 A3                INC     DPTR
001397 EF                MOV     A,R7
001398 F0                MOVX    @DPTR,A
  446: 				B_Weight_ZeroOk = true;
001399 904C9B            MOV     DPTR,#B_Weight_ZeroOk
00139C 7401              MOV     A,#01H
00139E F0                MOVX    @DPTR,A
  447: 				}
  448: 		}
00139F 801A              SJMP    ?C0049?CS_SCALE_PROC
0013A1         ?C0050?CS_SCALE_PROC:
  449: 		else
  450: 		{
  451: 		R_AD_Zero	= 4000;
0013A1 904C98            MOV     DPTR,#R_AD_Zero
0013A4 740F              MOV     A,#0FH
0013A6 F0                MOVX    @DPTR,A
0013A7 A3                INC     DPTR
0013A8 74A0              MOV     A,#0A0H
0013AA F0                MOVX    @DPTR,A
  452: 		R_AD_PowerOnZero = 4000;
0013AB 904C96            MOV     DPTR,#R_AD_PowerOnZero
0013AE 740F              MOV     A,#0FH
0013B0 F0                MOVX    @DPTR,A
0013B1 A3                INC     DPTR
0013B2 74A0              MOV     A,#0A0H
0013B4 F0                MOVX    @DPTR,A
  453: 		B_Weight_ZeroOk = true;
0013B5 904C9B            MOV     DPTR,#B_Weight_ZeroOk
0013B8 7401              MOV     A,#01H
0013BA F0                MOVX    @DPTR,A
  454: 		}
  455: 
  456: 	}
0013BB         ?C0049?CS_SCALE_PROC:
  457: 
  458: 	if(option==RunningZero)
0013BB 904DED            MOV     DPTR,#option
0013BE E0                MOVX    A,@DPTR
0013BF 6407              XRL     A,#07H
0013C1 6002              JZ      $ + 4H
0013C3 81F7              AJMP    ?C0053?CS_SCALE_PROC
  459: 	{
  460: 	B_Weight_Zero = false;		
0013C5 904C9A            MOV     DPTR,#B_Weight_Zero
0013C8 F0                MOVX    @DPTR,A
  461: 	//3kg以下才追零包括负重量
  462: 	B_Weight_Pos = CS_Scale_GetDeltaAD(GetADDirection);		//获取AD方向
0013C9 7F01              MOV     R7,#01H
0013CB F1EF              ACALL   _CS_Scale_GetDeltaAD
0013CD 904DF4            MOV     DPTR,#B_Weight_Pos
0013D0 EF                MOV     A,R7
0013D1 F0                MOVX    @DPTR,A
  463: 	R_Open_Weight = CS_Scale_CaliProc(CaliProcGetOpenWeight);	//获取开机重量值
0013D2 7F07              MOV     R7,#07H
0013D4 120A08            LCALL   _CS_Scale_CaliProc
0013D7 904DF2            MOV     DPTR,#R_Open_Weight
0013DA EE                MOV     A,R6
0013DB F0                MOVX    @DPTR,A
0013DC A3                INC     DPTR
0013DD EF                MOV     A,R7
0013DE F0                MOVX    @DPTR,A
  464: 	
  465: 	if(R_UnitWeight.origin <= 300 ||B_Weight_Pos ==false)	
0013DF 904CC9            MOV     DPTR,#R_UnitWeight
0013E2 E0                MOVX    A,@DPTR
0013E3 FE                MOV     R6,A
0013E4 A3                INC     DPTR
0013E5 E0                MOVX    A,@DPTR
0013E6 FF                MOV     R7,A
0013E7 D3                SETB    C
0013E8 942C              SUBB    A,#02CH
0013EA EE                MOV     A,R6
0013EB 9401              SUBB    A,#01H
0013ED 4006              JC      ?C0055?CS_SCALE_PROC
0013EF 904DF4            MOV     DPTR,#B_Weight_Pos
0013F2 E0                MOVX    A,@DPTR
0013F3 7006              JNZ     ?C0054?CS_SCALE_PROC
0013F5         ?C0055?CS_SCALE_PROC:
  466: 		B_Weight_Zero = true;
0013F5 904C9A            MOV     DPTR,#B_Weight_Zero
0013F8 7401              MOV     A,#01H
0013FA F0                MOVX    @DPTR,A
0013FB         ?C0054?CS_SCALE_PROC:
  467: 
  468: 		if(R_UnitWeight.origin <= 200 || B_Weight_Pos==false)
0013FB D3                SETB    C
0013FC EF                MOV     A,R7
0013FD 94C8              SUBB    A,#0C8H
0013FF EE                MOV     A,R6
001400 9400              SUBB    A,#00H
001402 4008              JC      ?C0057?CS_SCALE_PROC
001404 904DF4            MOV     DPTR,#B_Weight_Pos
001407 E0                MOVX    A,@DPTR
001408 6002              JZ      $ + 4H
00140A 81F3              AJMP    ?C0056?CS_SCALE_PROC
00140C         ?C0057?CS_SCALE_PROC:
  469: 			{		
  470: 				if(CS_Scale_JudgeSteady(GetIfSmallSteady)==true)
00140C 7F02              MOV     R7,#02H
00140E 122B8F            LCALL   _CS_Scale_JudgeSteady
001411 EF                MOV     A,R7
001412 6401              XRL     A,#01H
001414 6002              JZ      $ + 4H
001416 81F3              AJMP    ?C0056?CS_SCALE_PROC
  471: 					{
  472: 
  473: 					CS_Scale_JudgeSteady(ResetSteady);
001418 7F01              MOV     R7,#01H
00141A 122B8F            LCALL   _CS_Scale_JudgeSteady
  474: 					
  475: 					//非锁定状态正常追零
  476: 					if(CS_Scale_LockProc(GetIfLock)==false)	
00141D 7F02              MOV     R7,#02H
00141F 122F6C            LCALL   _CS_Scale_LockProc
001422 EF                MOV     A,R7
001423 7054              JNZ     ?C0059?CS_SCALE_PROC
  477: 						{
  478: 						if(R_AD_Original >= R_AD_PowerOnZero)
001425 904C96            MOV     DPTR,#R_AD_PowerOnZero
001428 E0                MOVX    A,@DPTR
001429 FE                MOV     R6,A
00142A A3                INC     DPTR
00142B E0                MOVX    A,@DPTR
00142C FF                MOV     R7,A
00142D 904CD8            MOV     DPTR,#R_AD_Original
001430 E0                MOVX    A,@DPTR
001431 FC                MOV     R4,A
001432 A3                INC     DPTR
001433 E0                MOVX    A,@DPTR
001434 FD                MOV     R5,A
001435 C3                CLR     C
001436 9F                SUBB    A,R7
001437 EC                MOV     A,R4
001438 9E                SUBB    A,R6
001439 402D              JC      ?C0060?CS_SCALE_PROC
  479: 							{
  480: 							weight_temp = R_AD_Original - R_AD_PowerOnZero;
00143B ED                MOV     A,R5
00143C 9F                SUBB    A,R7
00143D FF                MOV     R7,A
00143E EC                MOV     A,R4
00143F 9E                SUBB    A,R6
001440 FE                MOV     R6,A
001441 904DF0            MOV     DPTR,#weight_temp
001444 F0                MOVX    @DPTR,A
001445 A3                INC     DPTR
001446 EF                MOV     A,R7
001447 F0                MOVX    @DPTR,A
  481: 							if(weight_temp < R_Open_Weight)
001448 D3                SETB    C
001449 904DF3            MOV     DPTR,#R_Open_Weight+01H
00144C E0                MOVX    A,@DPTR
00144D 9F                SUBB    A,R7
00144E 904DF2            MOV     DPTR,#R_Open_Weight
001451 E0                MOVX    A,@DPTR
001452 9E                SUBB    A,R6
001453 5002              JNC     $ + 4H
001455 81F3              AJMP    ?C0056?CS_SCALE_PROC
  482: 								R_AD_Zero = R_AD_Original;
001457 904CD8            MOV     DPTR,#R_AD_Original
00145A E0                MOVX    A,@DPTR
00145B FF                MOV     R7,A
00145C A3                INC     DPTR
00145D E0                MOVX    A,@DPTR
00145E 904C98            MOV     DPTR,#R_AD_Zero
001461 CF                XCH     A,R7
001462 F0                MOVX    @DPTR,A
001463 A3                INC     DPTR
001464 EF                MOV     A,R7
001465 F0                MOVX    @DPTR,A
  483: 							}
001466 81F3              AJMP    ?C0056?CS_SCALE_PROC
001468         ?C0060?CS_SCALE_PROC:
  484: 						else
  485: 							R_AD_Zero = R_AD_Original;
001468 904CD8            MOV     DPTR,#R_AD_Original
00146B E0                MOVX    A,@DPTR
00146C FF                MOV     R7,A
00146D A3                INC     DPTR
00146E E0                MOVX    A,@DPTR
00146F 904C98            MOV     DPTR,#R_AD_Zero
001472 CF                XCH     A,R7
001473 F0                MOVX    @DPTR,A
001474 A3                INC     DPTR
001475 EF                MOV     A,R7
001476 F0                MOVX    @DPTR,A
  486: 						}
001477 807A              SJMP    ?C0056?CS_SCALE_PROC
001479         ?C0059?CS_SCALE_PROC:
  487: 					//锁定状态下秤第一次追零做防提起处理
  488: 					else			
  489: 						{
  490: 						if(B_LockDownCheck==false)
001479 904C9C            MOV     DPTR,#B_LockDownCheck
00147C E0                MOVX    A,@DPTR
00147D 7074              JNZ     ?C0056?CS_SCALE_PROC
  491: 							{
  492: 							if(R_AD_Original>R_AD_Zero)
00147F 904C98            MOV     DPTR,#R_AD_Zero
001482 E0                MOVX    A,@DPTR
001483 FE                MOV     R6,A
001484 A3                INC     DPTR
001485 E0                MOVX    A,@DPTR
001486 FF                MOV     R7,A
001487 904CD8            MOV     DPTR,#R_AD_Original
00148A E0                MOVX    A,@DPTR
00148B FC                MOV     R4,A
00148C A3                INC     DPTR
00148D E0                MOVX    A,@DPTR
00148E FD                MOV     R5,A
00148F D3                SETB    C
001490 9F                SUBB    A,R7
001491 EC                MOV     A,R4
001492 9E                SUBB    A,R6
001493 400E              JC      ?C0065?CS_SCALE_PROC
  493: 								weight_temp = R_AD_Original - R_AD_Zero;
001495 ED                MOV     A,R5
001496 9F                SUBB    A,R7
001497 FF                MOV     R7,A
001498 EC                MOV     A,R4
001499 9E                SUBB    A,R6
00149A 904DF0            MOV     DPTR,#weight_temp
00149D F0                MOVX    @DPTR,A
00149E A3                INC     DPTR
00149F EF                MOV     A,R7
0014A0 F0                MOVX    @DPTR,A
0014A1 801B              SJMP    ?C0066?CS_SCALE_PROC
0014A3         ?C0065?CS_SCALE_PROC:
  494: 							else
  495: 								weight_temp = R_AD_Zero - R_AD_Original;
0014A3 904CD8            MOV     DPTR,#R_AD_Original
0014A6 E0                MOVX    A,@DPTR
0014A7 FE                MOV     R6,A
0014A8 A3                INC     DPTR
0014A9 E0                MOVX    A,@DPTR
0014AA FF                MOV     R7,A
0014AB C3                CLR     C
0014AC 904C99            MOV     DPTR,#R_AD_Zero+01H
0014AF E0                MOVX    A,@DPTR
0014B0 9F                SUBB    A,R7
0014B1 FF                MOV     R7,A
0014B2 904C98            MOV     DPTR,#R_AD_Zero
0014B5 E0                MOVX    A,@DPTR
0014B6 9E                SUBB    A,R6
0014B7 904DF0            MOV     DPTR,#weight_temp
0014BA F0                MOVX    @DPTR,A
0014BB A3                INC     DPTR
0014BC EF                MOV     A,R7
0014BD F0                MOVX    @DPTR,A
0014BE         ?C0066?CS_SCALE_PROC:
  496: 
  497: 							//跟锁定前的零点做比较不等于一个秤体重量的处理
  498: 							//if(weight_temp<ScaleWeightMin&&weight_temp>ScaleWeightMax)
  499: 								//{
  500: 								R_AD_Zero = R_AD_Original;	//更新零点
0014BE 904CD8            MOV     DPTR,#R_AD_Original
0014C1 E0                MOVX    A,@DPTR
0014C2 FF                MOV     R7,A
0014C3 A3                INC     DPTR
0014C4 E0                MOVX    A,@DPTR
0014C5 904C98            MOV     DPTR,#R_AD_Zero
0014C8 CF                XCH     A,R7
0014C9 F0                MOVX    @DPTR,A
0014CA A3                INC     DPTR
0014CB EF                MOV     A,R7
0014CC F0                MOVX    @DPTR,A
  501: 								if(weight_temp>SameZeroRange)
0014CD D3                SETB    C
0014CE 904DF1            MOV     DPTR,#weight_temp+01H
0014D1 E0                MOVX    A,@DPTR
0014D2 940A              SUBB    A,#0AH
0014D4 904DF0            MOV     DPTR,#weight_temp
0014D7 E0                MOVX    A,@DPTR
0014D8 9400              SUBB    A,#00H
0014DA 4011              JC      ?C0067?CS_SCALE_PROC
  502: 									{
  503: 									//跟称重前不是一个零点报零点错并解锁
  504: 									B_WeightZeroErr=true;
0014DC 904C9D            MOV     DPTR,#B_WeightZeroErr
0014DF 7401              MOV     A,#01H
0014E1 F0                MOVX    @DPTR,A
  505: 									R_Display_Err=CS_ScaleDisplay_L_err;
0014E2 904CC2            MOV     DPTR,#R_Display_Err
0014E5 7404              MOV     A,#04H
0014E7 F0                MOVX    @DPTR,A
  506: 									CS_Scale_LockProc(LockProcUnLock);
0014E8 7F03              MOV     R7,#03H
0014EA 122F6C            LCALL   _CS_Scale_LockProc
  507: 									}
0014ED         ?C0067?CS_SCALE_PROC:
  508: 								B_LockDownCheck=true;
0014ED 904C9C            MOV     DPTR,#B_LockDownCheck
0014F0 7401              MOV     A,#01H
0014F2 F0                MOVX    @DPTR,A
  509: 								//}
  510: 
  511: 							}						
  512: 						}
  513: 					
  514: 					}
  515: 			}
0014F3         ?C0056?CS_SCALE_PROC:
  516: 	return	0;		
0014F3 E4                CLR     A
0014F4 FE                MOV     R6,A
0014F5 FF                MOV     R7,A
0014F6 22                RET     
  517: 	}
0014F7         ?C0053?CS_SCALE_PROC:
  518: 
  519: 	if(option==GetPowerOnZero)
0014F7 904DED            MOV     DPTR,#option
0014FA E0                MOVX    A,@DPTR
0014FB FD                MOV     R5,A
0014FC 7009              JNZ     ?C0068?CS_SCALE_PROC
  520: 		return	R_AD_PowerOnZero;
0014FE 904C96            MOV     DPTR,#R_AD_PowerOnZero
001501 E0                MOVX    A,@DPTR
001502 FE                MOV     R6,A
001503 A3                INC     DPTR
001504 E0                MOVX    A,@DPTR
001505 FF                MOV     R7,A
001506 22                RET     
001507         ?C0068?CS_SCALE_PROC:
  521: 	if(option==GetPowerOnZeroState)
001507 ED                MOV     A,R5
001508 B40208            CJNE    A,#02H,?C0069?CS_SCALE_PROC
  522: 		return	B_Weight_ZeroOk;
00150B 904C9B            MOV     DPTR,#B_Weight_ZeroOk
00150E E0                MOVX    A,@DPTR
00150F FF                MOV     R7,A
001510 7E00              MOV     R6,#00H
001512 22                RET     
001513         ?C0069?CS_SCALE_PROC:
  523: 	if(option==GetRunningZero)
001513 904DED            MOV     DPTR,#option
001516 E0                MOVX    A,@DPTR
001517 FD                MOV     R5,A
001518 B40109            CJNE    A,#01H,?C0070?CS_SCALE_PROC
  524: 		return	R_AD_Zero;
00151B 904C98            MOV     DPTR,#R_AD_Zero
00151E E0                MOVX    A,@DPTR
00151F FE                MOV     R6,A
001520 A3                INC     DPTR
001521 E0                MOVX    A,@DPTR
001522 FF                MOV     R7,A
001523 22                RET     
001524         ?C0070?CS_SCALE_PROC:
  525: 	if(option==GetZeroState)
001524 ED                MOV     A,R5
001525 B40308            CJNE    A,#03H,?C0071?CS_SCALE_PROC
  526: 		return	B_Weight_Zero;
001528 904C9A            MOV     DPTR,#B_Weight_Zero
00152B E0                MOVX    A,@DPTR
00152C FF                MOV     R7,A
00152D 7E00              MOV     R6,#00H
00152F 22                RET     
001530         ?C0071?CS_SCALE_PROC:
  527: 	if(option==GetIfZeroErr)
001530 904DED            MOV     DPTR,#option
001533 E0                MOVX    A,@DPTR
001534 B40908            CJNE    A,#09H,?C0072?CS_SCALE_PROC
  528: 		return   B_WeightZeroErr;
001537 904C9D            MOV     DPTR,#B_WeightZeroErr
00153A E0                MOVX    A,@DPTR
00153B FF                MOV     R7,A
00153C 7E00              MOV     R6,#00H
00153E 22                RET     
00153F         ?C0072?CS_SCALE_PROC:
  529: 	
  530: 	return 0;	
00153F E4                CLR     A
001540 FE                MOV     R6,A
001541 FF                MOV     R7,A
  531: }
001542 22                RET     
----- FUNCTION _CS_Scale_ZeroProc (END) -------


----- FUNCTION CS_ScaleDisplay (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
   14: void CS_ScaleDisplay()
   15: {
   16: 	u32_t weight_temp;
   17: 	
   18: 	if(R_Display_Err==CS_ScaleDisplay_L_err)	//提示信息显示
001543 904CC2            MOV     DPTR,#R_Display_Err
001546 E0                MOVX    A,@DPTR
001547 6404              XRL     A,#04H
001549 7033              JNZ     ?C0001?CS_SCALEDISPLAY
   19: 		{
   20: 		if(CS_Scale_JudgeOverLoad(GetIfOverLoad)== true)	
00154B 7F01              MOV     R7,#01H
00154D 122F21            LCALL   _CS_Scale_JudgeOverLoad
001550 BF0107            CJNE    R7,#01H,?C0002?CS_SCALEDISPLAY
   21: 			CS_ScaleDisplay_FreshBuf(DisplayOverLoad,0);			
001553 E4                CLR     A
001554 FD                MOV     R5,A
001555 FC                MOV     R4,A
001556 7F85              MOV     R7,#085H
001558 D103              ACALL   _CS_ScaleDisplay_FreshBuf
00155A         ?C0002?CS_SCALEDISPLAY:
   22: 		if(CS_Scale_JudgeLowBat(GetIfLowBat)== true)
00155A 7F01              MOV     R7,#01H
00155C 122FDA            LCALL   _CS_Scale_JudgeLowBat
00155F BF0107            CJNE    R7,#01H,?C0003?CS_SCALEDISPLAY
   23: 			CS_ScaleDisplay_FreshBuf(DisplayLowBat,0);	
001562 E4                CLR     A
001563 FD                MOV     R5,A
001564 FC                MOV     R4,A
001565 7F86              MOV     R7,#086H
001567 D103              ACALL   _CS_ScaleDisplay_FreshBuf
001569         ?C0003?CS_SCALEDISPLAY:
   24: 		if(CS_Scale_ZeroProc(GetIfZeroErr,0)==true)
001569 E4                CLR     A
00156A FD                MOV     R5,A
00156B FC                MOV     R4,A
00156C 7F09              MOV     R7,#09H
00156E 51FB              ACALL   _CS_Scale_ZeroProc
001570 EF                MOV     A,R7
001571 6401              XRL     A,#01H
001573 4E                ORL     A,R6
001574 6002              JZ      $ + 4H
001576 C102              AJMP    ?C0005?CS_SCALEDISPLAY
   25: 			CS_ScaleDisplay_FreshBuf(DisplayZeroErr,0);
001578 FD                MOV     R5,A
001579 FC                MOV     R4,A
00157A 7F87              MOV     R7,#087H
00157C C103              AJMP    _CS_ScaleDisplay_FreshBuf
   26: 		return;
   27: 		}
00157E         ?C0001?CS_SCALEDISPLAY:
   28: 	if(R_Selet_Unit == CS_ScaleDisplay_L_kg)
00157E 904CC6            MOV     DPTR,#R_Selet_Unit
001581 E0                MOVX    A,@DPTR
001582 7014              JNZ     ?C0006?CS_SCALEDISPLAY
   29: 		{
   30: 		R_UnitWeight.kg = R_UnitWeight.origin;
001584 904CC9            MOV     DPTR,#R_UnitWeight
001587 E0                MOVX    A,@DPTR
001588 FE                MOV     R6,A
001589 A3                INC     DPTR
00158A E0                MOVX    A,@DPTR
00158B FF                MOV     R7,A
00158C A3                INC     DPTR
00158D EE                MOV     A,R6
00158E F0                MOVX    @DPTR,A
00158F FC                MOV     R4,A
001590 A3                INC     DPTR
001591 EF                MOV     A,R7
001592 F0                MOVX    @DPTR,A
001593 FD                MOV     R5,A
   31: 		CS_ScaleDisplay_FreshBuf(Displaykg,R_UnitWeight.kg);
001594 7F41              MOV     R7,#041H
001596 D103              ACALL   _CS_ScaleDisplay_FreshBuf
   32: 		}
001598         ?C0006?CS_SCALEDISPLAY:
   33: 	if(R_Selet_Unit == CS_ScaleDisplay_L_gongjin)
001598 904CC6            MOV     DPTR,#R_Selet_Unit
00159B E0                MOVX    A,@DPTR
00159C B40214            CJNE    A,#02H,?C0007?CS_SCALEDISPLAY
   34: 		{
   35: 		R_UnitWeight.kg = R_UnitWeight.origin;
00159F 904CC9            MOV     DPTR,#R_UnitWeight
0015A2 E0                MOVX    A,@DPTR
0015A3 FE                MOV     R6,A
0015A4 A3                INC     DPTR
0015A5 E0                MOVX    A,@DPTR
0015A6 FF                MOV     R7,A
0015A7 A3                INC     DPTR
0015A8 EE                MOV     A,R6
0015A9 F0                MOVX    @DPTR,A
0015AA FC                MOV     R4,A
0015AB A3                INC     DPTR
0015AC EF                MOV     A,R7
0015AD F0                MOVX    @DPTR,A
0015AE FD                MOV     R5,A
   36: 		CS_ScaleDisplay_FreshBuf(Displaygongjin,R_UnitWeight.kg);
0015AF 7F44              MOV     R7,#044H
0015B1 D103              ACALL   _CS_ScaleDisplay_FreshBuf
   37: 		}
0015B3         ?C0007?CS_SCALEDISPLAY:
   38: 	if(R_Selet_Unit == CS_ScaleDisplay_L_jin)
0015B3 904CC6            MOV     DPTR,#R_Selet_Unit
0015B6 E0                MOVX    A,@DPTR
0015B7 B4031A            CJNE    A,#03H,?C0008?CS_SCALEDISPLAY
   39: 		{
   40: 		R_UnitWeight.jin = R_UnitWeight.origin *2;
0015BA 904CCA            MOV     DPTR,#R_UnitWeight+01H
0015BD E0                MOVX    A,@DPTR
0015BE 25E0              ADD     A,ACC
0015C0 FF                MOV     R7,A
0015C1 904CC9            MOV     DPTR,#R_UnitWeight
0015C4 E0                MOVX    A,@DPTR
0015C5 33                RLC     A
0015C6 FE                MOV     R6,A
0015C7 904CD1            MOV     DPTR,#R_UnitWeight+08H
0015CA F0                MOVX    @DPTR,A
0015CB FC                MOV     R4,A
0015CC A3                INC     DPTR
0015CD EF                MOV     A,R7
0015CE F0                MOVX    @DPTR,A
0015CF FD                MOV     R5,A
   41: 		CS_ScaleDisplay_FreshBuf(Displayjin,R_UnitWeight.jin);
0015D0 7F43              MOV     R7,#043H
0015D2 D103              ACALL   _CS_ScaleDisplay_FreshBuf
   42: 		}				
0015D4         ?C0008?CS_SCALEDISPLAY:
   43:        if(R_Selet_Unit == CS_ScaleDisplay_L_lb )
0015D4 904CC6            MOV     DPTR,#R_Selet_Unit
0015D7 E0                MOVX    A,@DPTR
0015D8 B40127            CJNE    A,#01H,?C0005?CS_SCALEDISPLAY
   44:        	{
   45: 		weight_temp   = (u32_t) R_UnitWeight.origin *22046;
0015DB 904CC9            MOV     DPTR,#R_UnitWeight
0015DE E0                MOVX    A,@DPTR
0015DF FE                MOV     R6,A
0015E0 A3                INC     DPTR
0015E1 E0                MOVX    A,@DPTR
0015E2 FF                MOV     R7,A
0015E3 7C56              MOV     R4,#056H
0015E5 7D1E              MOV     R5,#01EH
0015E7 1203C8            LCALL   ?C?LIMUL
;---- Variable 'weight_temp' assigned to Register 'R4/R5/R6/R7' ----
   46: 		R_UnitWeight.lb = weight_temp / 10000;
0015EA E4                CLR     A
0015EB 7B10              MOV     R3,#010H
0015ED 7A27              MOV     R2,#027H
0015EF F9                MOV     R1,A
0015F0 F8                MOV     R0,A
0015F1 120269            LCALL   ?C?ULDIV
0015F4 904CCD            MOV     DPTR,#R_UnitWeight+04H
0015F7 EE                MOV     A,R6
0015F8 F0                MOVX    @DPTR,A
0015F9 FC                MOV     R4,A
0015FA A3                INC     DPTR
0015FB EF                MOV     A,R7
0015FC F0                MOVX    @DPTR,A
0015FD FD                MOV     R5,A
   47: 		CS_ScaleDisplay_FreshBuf(Displaylb,R_UnitWeight.lb);
0015FE 7F42              MOV     R7,#042H
001600 D103              ACALL   _CS_ScaleDisplay_FreshBuf
   48:        	}		
   49: }
001602         ?C0005?CS_SCALEDISPLAY:
001602 22                RET     
----- FUNCTION CS_ScaleDisplay (END) -------


----- FUNCTION _CS_ScaleDisplay_FreshBuf (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
   73: void CS_ScaleDisplay_FreshBuf(u8_t option,u16_t showdata)
   74: {
;---- Variable 'showdata' assigned to Register 'R4/R5' ----
001603 904E5A            MOV     DPTR,#option
001606 EF                MOV     A,R7
001607 F0                MOVX    @DPTR,A
   75: 	static	u8_t	data_buf[5];
   76: 
   77: 	//////////////////////////////////////////
   78: 	//数字部分赋值
   79: 	if(option==DisplayOverLoad)
001608 BF850F            CJNE    R7,#085H,?C0011?CS_SCALEDISPLAY
   80: 	{
   81: 	data_buf[0]=Lcdnull_Num;
00160B 904D18            MOV     DPTR,#data_buf
00160E 7415              MOV     A,#015H
001610 F0                MOVX    @DPTR,A
   82: 	data_buf[1]=Lcdup_Num;
001611 A3                INC     DPTR
001612 04                INC     A
001613 F0                MOVX    @DPTR,A
   83: 	data_buf[2]=Lcdup_Num;
001614 A3                INC     DPTR
001615 F0                MOVX    @DPTR,A
   84: 	data_buf[3]=Lcdup_Num;
001616 A3                INC     DPTR
001617 F0                MOVX    @DPTR,A
   85: 	data_buf[4]=Lcdup_Num;
001618 A3                INC     DPTR
001619 F0                MOVX    @DPTR,A
   86: 	}
00161A         ?C0011?CS_SCALEDISPLAY:
   87: 
   88: 	if(option==DisplayLowBat)
00161A 904E5A            MOV     DPTR,#option
00161D E0                MOVX    A,@DPTR
00161E FF                MOV     R7,A
00161F B48614            CJNE    A,#086H,?C0012?CS_SCALEDISPLAY
   89: 	{
   90: 	data_buf[0]=0;
001622 E4                CLR     A
001623 904D18            MOV     DPTR,#data_buf
001626 F0                MOVX    @DPTR,A
   91: 	data_buf[1]=Lcdnull_Num;
001627 A3                INC     DPTR
001628 7415              MOV     A,#015H
00162A F0                MOVX    @DPTR,A
   92: 	data_buf[2]=LcdchL_Num;
00162B A3                INC     DPTR
00162C 7410              MOV     A,#010H
00162E F0                MOVX    @DPTR,A
   93: 	data_buf[3]=Lcdcho_Num;
00162F A3                INC     DPTR
001630 04                INC     A
001631 F0                MOVX    @DPTR,A
   94: 	data_buf[4]=Lcdnull_Num;
001632 A3                INC     DPTR
001633 7415              MOV     A,#015H
001635 F0                MOVX    @DPTR,A
   95: 	}
001636         ?C0012?CS_SCALEDISPLAY:
   96: 
   97: 	if(option==DisplayZeroErr)
001636 EF                MOV     A,R7
001637 B48712            CJNE    A,#087H,?C0013?CS_SCALEDISPLAY
   98: 	{
   99: 	data_buf[0]=Lcdnull_Num;
00163A 904D18            MOV     DPTR,#data_buf
00163D 7415              MOV     A,#015H
00163F F0                MOVX    @DPTR,A
  100: 	data_buf[1]=Lcdnull_Num;
001640 A3                INC     DPTR
001641 F0                MOVX    @DPTR,A
  101: 	data_buf[2]=LcdchC_Num;
001642 A3                INC     DPTR
001643 740C              MOV     A,#0CH
001645 F0                MOVX    @DPTR,A
  102: 	data_buf[3]=Lcdnull_Num;
001646 A3                INC     DPTR
001647 7415              MOV     A,#015H
001649 F0                MOVX    @DPTR,A
  103: 	data_buf[4]=Lcdnull_Num;
00164A A3                INC     DPTR
00164B F0                MOVX    @DPTR,A
  104: 	}
00164C         ?C0013?CS_SCALEDISPLAY:
  105: 	
  106: 	if(option==DisplayCal1||option==DisplayCal2||option==DisplayCal3||option==DisplayCal4)
00164C EF                MOV     A,R7
00164D 6481              XRL     A,#081H
00164F 600F              JZ      ?C0015?CS_SCALEDISPLAY
001651 EF                MOV     A,R7
001652 6482              XRL     A,#082H
001654 600A              JZ      ?C0015?CS_SCALEDISPLAY
001656 EF                MOV     A,R7
001657 6483              XRL     A,#083H
001659 6005              JZ      ?C0015?CS_SCALEDISPLAY
00165B EF                MOV     A,R7
00165C 6484              XRL     A,#084H
00165E 703E              JNZ     ?C0014?CS_SCALEDISPLAY
001660         ?C0015?CS_SCALEDISPLAY:
  107: 	{
  108: 	data_buf[0]=0;
001660 E4                CLR     A
001661 904D18            MOV     DPTR,#data_buf
001664 F0                MOVX    @DPTR,A
  109: 	data_buf[1]=LcdchC_Num;
001665 A3                INC     DPTR
001666 740C              MOV     A,#0CH
001668 F0                MOVX    @DPTR,A
  110: 	data_buf[2]=LcdchA_Num;
001669 A3                INC     DPTR
00166A 740A              MOV     A,#0AH
00166C F0                MOVX    @DPTR,A
  111: 	data_buf[3]=LcdchL_Num;
00166D A3                INC     DPTR
00166E 7410              MOV     A,#010H
001670 F0                MOVX    @DPTR,A
  112: 		if(option==DisplayCal1)
001671 EF                MOV     A,R7
001672 B48104            CJNE    A,#081H,?C0016?CS_SCALEDISPLAY
  113: 			data_buf[4]=1;
001675 A3                INC     DPTR
001676 7401              MOV     A,#01H
001678 F0                MOVX    @DPTR,A
001679         ?C0016?CS_SCALEDISPLAY:
  114: 		if(option==DisplayCal2)
001679 904E5A            MOV     DPTR,#option
00167C E0                MOVX    A,@DPTR
00167D B48206            CJNE    A,#082H,?C0017?CS_SCALEDISPLAY
  115: 			data_buf[4]=2;
001680 904D1C            MOV     DPTR,#data_buf+04H
001683 7402              MOV     A,#02H
001685 F0                MOVX    @DPTR,A
001686         ?C0017?CS_SCALEDISPLAY:
  116: 		if(option==DisplayCal3)
001686 904E5A            MOV     DPTR,#option
001689 E0                MOVX    A,@DPTR
00168A FF                MOV     R7,A
00168B B48306            CJNE    A,#083H,?C0018?CS_SCALEDISPLAY
  117: 			data_buf[4]=3;
00168E 904D1C            MOV     DPTR,#data_buf+04H
001691 7403              MOV     A,#03H
001693 F0                MOVX    @DPTR,A
001694         ?C0018?CS_SCALEDISPLAY:
  118: 		if(option==DisplayCal4)
001694 EF                MOV     A,R7
001695 B48406            CJNE    A,#084H,?C0014?CS_SCALEDISPLAY
  119: 			data_buf[4]=4;
001698 904D1C            MOV     DPTR,#data_buf+04H
00169B 7404              MOV     A,#04H
00169D F0                MOVX    @DPTR,A
  120: 	}
00169E         ?C0014?CS_SCALEDISPLAY:
  121: 
  122: 	if(option==DisplayData||option==Displaykg||option==Displaylb||option==Displayjin||option==Displaygongjin)
00169E 904E5A            MOV     DPTR,#option
0016A1 E0                MOVX    A,@DPTR
0016A2 FF                MOV     R7,A
0016A3 6421              XRL     A,#021H
0016A5 6014              JZ      ?C0021?CS_SCALEDISPLAY
0016A7 EF                MOV     A,R7
0016A8 6441              XRL     A,#041H
0016AA 600F              JZ      ?C0021?CS_SCALEDISPLAY
0016AC EF                MOV     A,R7
0016AD 6442              XRL     A,#042H
0016AF 600A              JZ      ?C0021?CS_SCALEDISPLAY
0016B1 EF                MOV     A,R7
0016B2 6443              XRL     A,#043H
0016B4 6005              JZ      ?C0021?CS_SCALEDISPLAY
0016B6 EF                MOV     A,R7
0016B7 6444              XRL     A,#044H
0016B9 705F              JNZ     ?C0020?CS_SCALEDISPLAY
0016BB         ?C0021?CS_SCALEDISPLAY:
  123: 	{
  124: 	CS_ScaleDisplay_HexToBcd(showdata,data_buf);
0016BB AE04              MOV     R6,AR4
0016BD AF05              MOV     R7,AR5
0016BF 7B01              MOV     R3,#01H
0016C1 7A4D              MOV     R2,#HIGH data_buf
0016C3 7918              MOV     R1,#LOW data_buf
0016C5 1238B8            LCALL   _CS_ScaleDisplay_HexToBcd
  125: 	
  126: 	if(option&showhigh4)		//显示高4位
0016C8 904E5A            MOV     DPTR,#option
0016CB E0                MOVX    A,@DPTR
0016CC FF                MOV     R7,A
0016CD 30E61D            JNB     ACC.6,?C0022?CS_SCALEDISPLAY
  127: 		{
  128: 		data_buf[4]=data_buf[3];
0016D0 904D1B            MOV     DPTR,#data_buf+03H
0016D3 E0                MOVX    A,@DPTR
0016D4 A3                INC     DPTR
0016D5 F0                MOVX    @DPTR,A
  129: 		data_buf[3]=data_buf[2];
0016D6 904D1A            MOV     DPTR,#data_buf+02H
0016D9 E0                MOVX    A,@DPTR
0016DA A3                INC     DPTR
0016DB F0                MOVX    @DPTR,A
  130: 		data_buf[2]=data_buf[1];
0016DC 904D19            MOV     DPTR,#data_buf+01H
0016DF E0                MOVX    A,@DPTR
0016E0 A3                INC     DPTR
0016E1 F0                MOVX    @DPTR,A
  131: 		data_buf[1]=data_buf[0];
0016E2 904D18            MOV     DPTR,#data_buf
0016E5 E0                MOVX    A,@DPTR
0016E6 A3                INC     DPTR
0016E7 F0                MOVX    @DPTR,A
  132: 		data_buf[0]=0;
0016E8 E4                CLR     A
0016E9 904D18            MOV     DPTR,#data_buf
0016EC F0                MOVX    @DPTR,A
  133: 		}
0016ED         ?C0022?CS_SCALEDISPLAY:
  134: 
  135: 		if(data_buf[0]==0 && data_buf[1]==0 )	
0016ED 904D18            MOV     DPTR,#data_buf
0016F0 E0                MOVX    A,@DPTR
0016F1 7007              JNZ     ?C0023?CS_SCALEDISPLAY
0016F3 A3                INC     DPTR
0016F4 E0                MOVX    A,@DPTR
0016F5 7003              JNZ     ?C0023?CS_SCALEDISPLAY
  136: 			data_buf[1]=Lcdnull_Num;
0016F7 7415              MOV     A,#015H
0016F9 F0                MOVX    @DPTR,A
0016FA         ?C0023?CS_SCALEDISPLAY:
  137: 		if(data_buf[1]==Lcdnull_Num && data_buf[2]==0 )	
0016FA 904D19            MOV     DPTR,#data_buf+01H
0016FD E0                MOVX    A,@DPTR
0016FE B41507            CJNE    A,#015H,?C0024?CS_SCALEDISPLAY
001701 A3                INC     DPTR
001702 E0                MOVX    A,@DPTR
001703 7003              JNZ     ?C0024?CS_SCALEDISPLAY
  138: 			data_buf[2]=Lcdnull_Num;
001705 7415              MOV     A,#015H
001707 F0                MOVX    @DPTR,A
001708         ?C0024?CS_SCALEDISPLAY:
  139: 
  140: 		if(option&ShowNoDot)	//没有小数点还要判断多一位数字为0时是否不显示
001708 EF                MOV     A,R7
001709 30E50E            JNB     ACC.5,?C0020?CS_SCALEDISPLAY
  141: 			{
  142: 			if(data_buf[2]==Lcdnull_Num && data_buf[3]==0 )	
00170C 904D1A            MOV     DPTR,#data_buf+02H
00170F E0                MOVX    A,@DPTR
001710 B41507            CJNE    A,#015H,?C0020?CS_SCALEDISPLAY
001713 A3                INC     DPTR
001714 E0                MOVX    A,@DPTR
001715 7003              JNZ     ?C0020?CS_SCALEDISPLAY
  143: 				data_buf[3]=Lcdnull_Num;
001717 7415              MOV     A,#015H
001719 F0                MOVX    @DPTR,A
  144: 			}
  145: 	}
00171A         ?C0020?CS_SCALEDISPLAY:
  146: 	
  147: 	CS_lcd_showbuf[0] = CS_ScaleDisplay_LookUpTable(data_buf[1]);
00171A 904D19            MOV     DPTR,#data_buf+01H
00171D E0                MOVX    A,@DPTR
00171E FF                MOV     R7,A
00171F F1D5              ACALL   _CS_ScaleDisplay_LookUpTable
001721 904D23            MOV     DPTR,#CS_lcd_showbuf
001724 EF                MOV     A,R7
001725 F0                MOVX    @DPTR,A
  148: 	CS_lcd_showbuf[1] = CS_ScaleDisplay_LookUpTable(data_buf[2]);
001726 904D1A            MOV     DPTR,#data_buf+02H
001729 E0                MOVX    A,@DPTR
00172A FF                MOV     R7,A
00172B F1D5              ACALL   _CS_ScaleDisplay_LookUpTable
00172D 904D24            MOV     DPTR,#CS_lcd_showbuf+01H
001730 EF                MOV     A,R7
001731 F0                MOVX    @DPTR,A
  149: 	CS_lcd_showbuf[2] = CS_ScaleDisplay_LookUpTable(data_buf[3]);
001732 904D1B            MOV     DPTR,#data_buf+03H
001735 E0                MOVX    A,@DPTR
001736 FF                MOV     R7,A
001737 F1D5              ACALL   _CS_ScaleDisplay_LookUpTable
001739 904D25            MOV     DPTR,#CS_lcd_showbuf+02H
00173C EF                MOV     A,R7
00173D F0                MOVX    @DPTR,A
  150: 	CS_lcd_showbuf[3] = CS_ScaleDisplay_LookUpTable(data_buf[4]);
00173E 904D1C            MOV     DPTR,#data_buf+04H
001741 E0                MOVX    A,@DPTR
001742 FF                MOV     R7,A
001743 F1D5              ACALL   _CS_ScaleDisplay_LookUpTable
001745 904D26            MOV     DPTR,#CS_lcd_showbuf+03H
001748 EF                MOV     A,R7
001749 F0                MOVX    @DPTR,A
  151: 			
  152: 	CS_ScaleDisplay_LcdBuf_rShift4();	//显示缓存跟实际液晶的逻辑对应有出入还要微调
00174A 123923            LCALL   CS_ScaleDisplay_LcdBuf_rShift4
  153: 
  154: 										//显示缓存数字还有符号部分的位置
  155: 
  156: 	//////////////////////////////////////////
  157: 	//符号部分赋值
  158: 	CS_Lcd_Send_Data[4] &=0x0f;			//清单位符号缓存	
00174D 904D2C            MOV     DPTR,#CS_Lcd_Send_Data+04H
001750 E0                MOVX    A,@DPTR
001751 540F              ANL     A,#0FH
001753 F0                MOVX    @DPTR,A
  159: 	CS_Lcd_Buf_DOT2	 &= ~S_DOT;			//清显示小数点
001754 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
001757 E0                MOVX    A,@DPTR
001758 54F7              ANL     A,#0F7H
00175A F0                MOVX    @DPTR,A
  160: 
  161: 	
  162: 	if(option==DisplayData)				//最高位用蓝牙标志辅助显示
00175B 904E5A            MOV     DPTR,#option
00175E E0                MOVX    A,@DPTR
00175F FD                MOV     R5,A
001760 B42114            CJNE    A,#021H,?C0027?CS_SCALEDISPLAY
  163: 		{	
  164: 		CS_Lcd_Buf_SIGN &=~S_BLE;
001763 904D28            MOV     DPTR,#CS_Lcd_Send_Data
001766 E0                MOVX    A,@DPTR
001767 54FD              ANL     A,#0FDH
001769 F0                MOVX    @DPTR,A
  165: 		if(data_buf[0]!=0)
00176A 904D18            MOV     DPTR,#data_buf
00176D E0                MOVX    A,@DPTR
00176E 6007              JZ      ?C0027?CS_SCALEDISPLAY
  166: 		CS_Lcd_Buf_SIGN |=S_BLE;
001770 904D28            MOV     DPTR,#CS_Lcd_Send_Data
001773 E0                MOVX    A,@DPTR
001774 4402              ORL     A,#02H
001776 F0                MOVX    @DPTR,A
  167: 		}	
001777         ?C0027?CS_SCALEDISPLAY:
  168: 	
  169: 	if(option==Displaykg)
001777 ED                MOV     A,R5
001778 B4410C            CJNE    A,#041H,?C0029?CS_SCALEDISPLAY
  170: 		{
  171: 		CS_Lcd_Buf_DOT2	|= S_DOT;
00177B 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
00177E E0                MOVX    A,@DPTR
00177F 4408              ORL     A,#08H
001781 F0                MOVX    @DPTR,A
  172: 		CS_Lcd_Buf_Unit	|= S_KG;							
001782 A3                INC     DPTR
001783 E0                MOVX    A,@DPTR
001784 4410              ORL     A,#010H
001786 F0                MOVX    @DPTR,A
  173: 		}	
001787         ?C0029?CS_SCALEDISPLAY:
  174: 
  175: 	if(option==Displaylb)
001787 904E5A            MOV     DPTR,#option
00178A E0                MOVX    A,@DPTR
00178B B4420C            CJNE    A,#042H,?C0030?CS_SCALEDISPLAY
  176: 		{
  177: 		CS_Lcd_Buf_DOT2	|= S_DOT;
00178E 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
001791 E0                MOVX    A,@DPTR
001792 4408              ORL     A,#08H
001794 F0                MOVX    @DPTR,A
  178: 		CS_Lcd_Buf_Unit	|= S_LB;							
001795 A3                INC     DPTR
001796 E0                MOVX    A,@DPTR
001797 4420              ORL     A,#020H
001799 F0                MOVX    @DPTR,A
  179: 		}
00179A         ?C0030?CS_SCALEDISPLAY:
  180: 	if(option==Displayjin)
00179A 904E5A            MOV     DPTR,#option
00179D E0                MOVX    A,@DPTR
00179E FD                MOV     R5,A
00179F B4430C            CJNE    A,#043H,?C0031?CS_SCALEDISPLAY
  181: 		{
  182: 		CS_Lcd_Buf_DOT2	|= S_DOT;
0017A2 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
0017A5 E0                MOVX    A,@DPTR
0017A6 4408              ORL     A,#08H
0017A8 F0                MOVX    @DPTR,A
  183: 		CS_Lcd_Buf_Unit	|= S_JIN;							
0017A9 A3                INC     DPTR
0017AA E0                MOVX    A,@DPTR
0017AB 4480              ORL     A,#080H
0017AD F0                MOVX    @DPTR,A
  184: 		}
0017AE         ?C0031?CS_SCALEDISPLAY:
  185: 	
  186: 	if(option==Displaygongjin)
0017AE ED                MOV     A,R5
0017AF B4440C            CJNE    A,#044H,?C0032?CS_SCALEDISPLAY
  187: 		{
  188: 		CS_Lcd_Buf_DOT2	|= S_DOT;
0017B2 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
0017B5 E0                MOVX    A,@DPTR
0017B6 4408              ORL     A,#08H
0017B8 F0                MOVX    @DPTR,A
  189: 		CS_Lcd_Buf_Unit	|= S_GONG | S_JIN;							
0017B9 A3                INC     DPTR
0017BA E0                MOVX    A,@DPTR
0017BB 44C0              ORL     A,#0C0H
0017BD F0                MOVX    @DPTR,A
  190: 		}
0017BE         ?C0032?CS_SCALEDISPLAY:
  191: 
  192: 	/*
  193: 	if( xxxStatus==xxxx)
  194: 		CS_Lcd_Buf_SIGN |=S_DAT;
  195: 	else
  196: 		CS_Lcd_Buf_SIGN &=~S_DAT;
  197: 	*/
  198: 	
  199: 	if(bleConnStatus==BLE_STATUS_CONN)
0017BE 904C5B            MOV     DPTR,#bleConnStatus
0017C1 E0                MOVX    A,@DPTR
0017C2 B40108            CJNE    A,#01H,?C0033?CS_SCALEDISPLAY
  200: 		CS_Lcd_Buf_SIGN |=S_BLE;
0017C5 904D28            MOV     DPTR,#CS_Lcd_Send_Data
0017C8 E0                MOVX    A,@DPTR
0017C9 4402              ORL     A,#02H
0017CB F0                MOVX    @DPTR,A
0017CC 22                RET     
0017CD         ?C0033?CS_SCALEDISPLAY:
  201: 	else
  202: 		CS_Lcd_Buf_SIGN &=~S_BLE;
0017CD 904D28            MOV     DPTR,#CS_Lcd_Send_Data
0017D0 E0                MOVX    A,@DPTR
0017D1 54FD              ANL     A,#0FDH
0017D3 F0                MOVX    @DPTR,A
  203: 	
  204: }
0017D4 22                RET     
----- FUNCTION _CS_ScaleDisplay_FreshBuf (END) -------


----- FUNCTION _CS_ScaleDisplay_LookUpTable (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  287: u8_t CS_ScaleDisplay_LookUpTable(u8_t NumData)
  288: {
;---- Variable 'NumData' assigned to Register 'R7' ----
  289: 	u8_t	 * data_ptr;
  290: 	data_ptr = CS_Lcd_Table;
0017D5 7B01              MOV     R3,#01H
0017D7 7A4D              MOV     R2,#HIGH CS_Lcd_Table
0017D9 792E              MOV     R1,#LOW CS_Lcd_Table
;---- Variable 'data_ptr' assigned to Register 'R1/R2/R3' ----
  291: 	return 	*(data_ptr + NumData);
0017DB 8F82              MOV     DPL,R7
0017DD 758300            MOV     DPH,#00H
0017E0 120112            LCALL   ?C?CLDOPTR
0017E3 FF                MOV     R7,A
  292: }
0017E4 22                RET     
----- FUNCTION _CS_ScaleDisplay_LookUpTable (END) -------


----- FUNCTION QueueInit (BEGIN) -----
 FILE: 'lxProtocol.c'
  496: void QueueInit(void)
  497: {
  498: 	historyUserData.head = 0;
  499: 	historyUserData.tail = 0;
0017E5 E4                CLR     A
0017E6 904C10            MOV     DPTR,#historyUserData
0017E9 F0                MOVX    @DPTR,A
  500: 	historyUserData.size = 0;
0017EA A3                INC     DPTR
0017EB F0                MOVX    @DPTR,A
  501: }
0017EC A3                INC     DPTR
0017ED F0                MOVX    @DPTR,A
  502: 
0017EE 22                RET     
----- FUNCTION QueueInit (END) -------


----- FUNCTION _CS_Scale_GetDeltaAD (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  215: u16_t CS_Scale_GetDeltaAD(u8_t option)
  216: {
0017EF 904E47            MOV     DPTR,#option
0017F2 EF                MOV     A,R7
0017F3 F0                MOVX    @DPTR,A
  217: 	static       u8_t xdata B_Weight_Pos;				//正负AD变化标志
  218: 	u16_t	ad_temp;
  219: 	u16_t      R_AD_Zero;
  220: 	R_AD_Zero = CS_Scale_ZeroProc(GetRunningZero,0);
0017F4 E4                CLR     A
0017F5 FD                MOV     R5,A
0017F6 FC                MOV     R4,A
0017F7 7F01              MOV     R7,#01H
0017F9 51FB              ACALL   _CS_Scale_ZeroProc
;---- Variable 'R_AD_Zero' assigned to Register 'R6/R7' ----
  221: 	if(R_AD_Original>R_AD_Zero)
0017FB 904CD8            MOV     DPTR,#R_AD_Original
0017FE E0                MOVX    A,@DPTR
0017FF FC                MOV     R4,A
001800 A3                INC     DPTR
001801 E0                MOVX    A,@DPTR
001802 FD                MOV     R5,A
001803 D3                SETB    C
001804 9F                SUBB    A,R7
001805 EC                MOV     A,R4
001806 9E                SUBB    A,R6
001807 4014              JC      ?C0013?CS_SCALE_PROC
  222: 		{
  223: 		ad_temp = R_AD_Original - R_AD_Zero;
001809 ED                MOV     A,R5
00180A 9F                SUBB    A,R7
00180B FF                MOV     R7,A
00180C EC                MOV     A,R4
00180D 9E                SUBB    A,R6
00180E 904E48            MOV     DPTR,#ad_temp
001811 F0                MOVX    @DPTR,A
001812 A3                INC     DPTR
001813 EF                MOV     A,R7
001814 F0                MOVX    @DPTR,A
  224: 		B_Weight_Pos = true;
001815 904C80            MOV     DPTR,#B_Weight_Pos
001818 7401              MOV     A,#01H
00181A F0                MOVX    @DPTR,A
  225: 
  226: 		}
00181B 801A              SJMP    ?C0014?CS_SCALE_PROC
00181D         ?C0013?CS_SCALE_PROC:
  227: 	else
  228: 		{
  229: 		ad_temp = R_AD_Zero - R_AD_Original;
00181D 904CD8            MOV     DPTR,#R_AD_Original
001820 E0                MOVX    A,@DPTR
001821 FC                MOV     R4,A
001822 A3                INC     DPTR
001823 E0                MOVX    A,@DPTR
001824 FD                MOV     R5,A
001825 C3                CLR     C
001826 EF                MOV     A,R7
001827 9D                SUBB    A,R5
001828 FF                MOV     R7,A
001829 EE                MOV     A,R6
00182A 9C                SUBB    A,R4
00182B 904E48            MOV     DPTR,#ad_temp
00182E F0                MOVX    @DPTR,A
00182F A3                INC     DPTR
001830 EF                MOV     A,R7
001831 F0                MOVX    @DPTR,A
  230: 		B_Weight_Pos = false;		
001832 E4                CLR     A
001833 904C80            MOV     DPTR,#B_Weight_Pos
001836 F0                MOVX    @DPTR,A
  231: 		}
001837         ?C0014?CS_SCALE_PROC:
  232: 
  233: 	
  234: 	if(option == GetADDirection)
001837 904E47            MOV     DPTR,#option
00183A E0                MOVX    A,@DPTR
00183B B40108            CJNE    A,#01H,?C0015?CS_SCALE_PROC
  235: 		{
  236: 		return	B_Weight_Pos;
00183E 904C80            MOV     DPTR,#B_Weight_Pos
001841 E0                MOVX    A,@DPTR
001842 FF                MOV     R7,A
001843 7E00              MOV     R6,#00H
001845 22                RET     
  237: 		}	
001846         ?C0015?CS_SCALE_PROC:
  238: 	return ad_temp;
001846 904E48            MOV     DPTR,#ad_temp
001849 E0                MOVX    A,@DPTR
00184A FE                MOV     R6,A
00184B A3                INC     DPTR
00184C E0                MOVX    A,@DPTR
00184D FF                MOV     R7,A
  239: }
00184E 22                RET     
----- FUNCTION _CS_Scale_GetDeltaAD (END) -------


----- FUNCTION _generateChecksum (BEGIN) -----
 FILE: 'system.c'
  114: u8_t generateChecksum(u8_t *buf,u8_t len)
  115: {
00184F 904E41            MOV     DPTR,#buf
001852 EB                MOV     A,R3
001853 F0                MOVX    @DPTR,A
001854 A3                INC     DPTR
001855 EA                MOV     A,R2
001856 F0                MOVX    @DPTR,A
001857 A3                INC     DPTR
001858 E9                MOV     A,R1
001859 F0                MOVX    @DPTR,A
;---- Variable 'len' assigned to Register 'R5' ----
  116: 	u8_t result;
  117: 	result = 0;
;---- Variable 'result' assigned to Register 'R7' ----
00185A E4                CLR     A
00185B FF                MOV     R7,A
00185C         ?C0012?SYSTEM:
  118: 	while(len--) {
00185C AE05              MOV     R6,AR5
00185E 1D                DEC     R5
00185F EE                MOV     A,R6
001860 6017              JZ      ?C0013?SYSTEM
  119: 		result^=*buf++;
001862 904E41            MOV     DPTR,#buf
001865 E0                MOVX    A,@DPTR
001866 FB                MOV     R3,A
001867 A3                INC     DPTR
001868 E4                CLR     A
001869 75F001            MOV     B,#01H
00186C 1201C8            LCALL   ?C?ILDIX
00186F A9F0              MOV     R1,B
001871 FA                MOV     R2,A
001872 1200F9            LCALL   ?C?CLDPTR
001875 6F                XRL     A,R7
001876 FF                MOV     R7,A
  120: 	}
001877 80E3              SJMP    ?C0012?SYSTEM
001879         ?C0013?SYSTEM:
  121: 	return result;
  122: }
001879 22                RET     
----- FUNCTION _generateChecksum (END) -------


----- FUNCTION CS_1186Com_ReadMacAdress_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   86: void CS_1186Com_ReadMacAdress_Proc(void)
   87: {
   88: 	u8_t i;
   89: 	u8_t xdata * ptr;
   90: 
   91: 	i=0;
00187A E4                CLR     A
00187B 904E4A            MOV     DPTR,#i
00187E F0                MOVX    @DPTR,A
   92: 	ptr =&i;
00187F A3                INC     DPTR
001880 744E              MOV     A,#HIGH i
001882 F0                MOVX    @DPTR,A
001883 A3                INC     DPTR
001884 744A              MOV     A,#LOW i
001886 F0                MOVX    @DPTR,A
   93: 	
   94: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadOtp)
001887 904D55            MOV     DPTR,#R_Weight_Com_Coo
00188A E0                MOVX    A,@DPTR
00188B B4842C            CJNE    A,#084H,?C0014?CS_COMMTO1186
   95: 		{
   96: 		uartTxBuf[0]=6;		//read 6 byte MacAdress
00188E 904D58            MOV     DPTR,#uartTxBuf
001891 7406              MOV     A,#06H
001893 F0                MOVX    @DPTR,A
   97: 		uartTxBuf[1]=0xF7;	//OTP  adress low 8bits
001894 A3                INC     DPTR
001895 74F7              MOV     A,#0F7H
001897 F0                MOVX    @DPTR,A
   98: 		uartTxBuf[2]=0x0F;	//OTP  adress high 8bits
001898 A3                INC     DPTR
001899 740F              MOV     A,#0FH
00189B F0                MOVX    @DPTR,A
   99: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadOtp,uartTxBuf);
00189C 7B01              MOV     R3,#01H
00189E 7A4D              MOV     R2,#HIGH uartTxBuf
0018A0 7958              MOV     R1,#LOW uartTxBuf
0018A2 7F84              MOV     R7,#084H
0018A4 312C              ACALL   _CS_CommTo1186_SendCmd
  100: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadOtp;
0018A6 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
0018A9 7484              MOV     A,#084H
0018AB F0                MOVX    @DPTR,A
  101: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadOtpStandby;
0018AC 904D55            MOV     DPTR,#R_Weight_Com_Coo
0018AF 7405              MOV     A,#05H
0018B1 F0                MOVX    @DPTR,A
  102: 		uartTimeoutCnt=0;
0018B2 E4                CLR     A
0018B3 904D68            MOV     DPTR,#uartTimeoutCnt
0018B6 F0                MOVX    @DPTR,A
  103: 		YC_UARTClearBuffer();
0018B7 120592            LCALL   YC_UARTClearBuffer
  104: 		}
0018BA         ?C0014?CS_COMMTO1186:
  105: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadOtpStandby)
0018BA 904D55            MOV     DPTR,#R_Weight_Com_Coo
0018BD E0                MOVX    A,@DPTR
0018BE 6405              XRL     A,#05H
0018C0 7069              JNZ     ?C0019?CS_COMMTO1186
  106: 		{
  107: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 11) == 11)
0018C2 7B01              MOV     R3,#01H
0018C4 7A4D              MOV     R2,#HIGH uartRcvBuf
0018C6 7945              MOV     R1,#LOW uartRcvBuf
0018C8 7D0B              MOV     R5,#0BH
0018CA FC                MOV     R4,A
0018CB 1207A8            LCALL   _YC_UARTReciveDataExpected
0018CE EF                MOV     A,R7
0018CF 640B              XRL     A,#0BH
0018D1 4E                ORL     A,R6
0018D2 7057              JNZ     ?C0019?CS_COMMTO1186
  108: 			{
  109: 			if(generateChecksum(uartRcvBuf,10) == uartRcvBuf[10] &&
0018D4 7B01              MOV     R3,#01H
0018D6 7A4D              MOV     R2,#HIGH uartRcvBuf
0018D8 7945              MOV     R1,#LOW uartRcvBuf
0018DA 7D0A              MOV     R5,#0AH
0018DC 114F              ACALL   _generateChecksum
0018DE 904D4F            MOV     DPTR,#uartRcvBuf+0AH
0018E1 E0                MOVX    A,@DPTR
0018E2 6F                XRL     A,R7
0018E3 7040              JNZ     ?C0017?CS_COMMTO1186
0018E5 904D47            MOV     DPTR,#uartRcvBuf+02H
0018E8 E0                MOVX    A,@DPTR
0018E9 6410              XRL     A,#010H
0018EB 7038              JNZ     ?C0017?CS_COMMTO1186
0018ED A3                INC     DPTR
0018EE E0                MOVX    A,@DPTR
0018EF B48433            CJNE    A,#084H,?C0017?CS_COMMTO1186
  110: 			uartRcvBuf[2] == UART_EVENT_OK &&
  111: 			uartRcvBuf[3] == CS_CommTo1186_ReadOtp)
  112: 				{	
  113: 				//slave_state = SLAVE_ST_SET_PARAM;
  114: 				//R_Debug_temp= uartRcvBuf[5];	//测试用
  115: 
  116: 				//数据放错地址，部分数据手动赋值
  117: 				uartRcvBuf[9]= uartRcvBuf[6];
0018F2 904D4B            MOV     DPTR,#uartRcvBuf+06H
0018F5 E0                MOVX    A,@DPTR
0018F6 904D4E            MOV     DPTR,#uartRcvBuf+09H
0018F9 F0                MOVX    @DPTR,A
  118: 				uartRcvBuf[8]=0x55;
0018FA 904D4D            MOV     DPTR,#uartRcvBuf+08H
0018FD 7455              MOV     A,#055H
0018FF F0                MOVX    @DPTR,A
  119: 				uartRcvBuf[7]=uartRcvBuf[5];
001900 904D4A            MOV     DPTR,#uartRcvBuf+05H
001903 E0                MOVX    A,@DPTR
001904 904D4C            MOV     DPTR,#uartRcvBuf+07H
001907 F0                MOVX    @DPTR,A
  120: 				uartRcvBuf[6]=0xbe;
001908 904D4B            MOV     DPTR,#uartRcvBuf+06H
00190B 74BE              MOV     A,#0BEH
00190D F0                MOVX    @DPTR,A
  121: 				uartRcvBuf[5]=uartRcvBuf[4];
00190E 904D49            MOV     DPTR,#uartRcvBuf+04H
001911 E0                MOVX    A,@DPTR
001912 A3                INC     DPTR
001913 F0                MOVX    @DPTR,A
  122: 				uartRcvBuf[4]=0x08;
001914 904D49            MOV     DPTR,#uartRcvBuf+04H
001917 7408              MOV     A,#08H
001919 F0                MOVX    @DPTR,A
  123: 
  124: 				/*
  125: 				xmemcpy(mem_le_lap,&uartRcvBuf[4],6);
  126: 				if((*mem_adv_lap_ptr) != 0) 
  127: 					{
  128: 					for(i=0;i<6;i++) 
  129: 						{
  130: 						ptr = (u8_t xdata *)(ESWAP(*mem_adv_lap_ptr)+i);
  131: 						*ptr= uartRcvBuf[9-i];
  132: 						}
  133: 					}
  134: 				*/
  135: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
00191A E4                CLR     A
00191B 904D55            MOV     DPTR,#R_Weight_Com_Coo
00191E F0                MOVX    @DPTR,A
  136: 				R_Weight_Com_Coo.sucess=true;
00191F 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
001922 04                INC     A
001923 F0                MOVX    @DPTR,A
  137: 				}
001924 22                RET     
001925         ?C0017?CS_COMMTO1186:
  138: 			else
  139: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
001925 904D68            MOV     DPTR,#uartTimeoutCnt
001928 7415              MOV     A,#015H
00192A F0                MOVX    @DPTR,A
  140: 			}
  141: 		}
  142: }
00192B         ?C0019?CS_COMMTO1186:
00192B 22                RET     
----- FUNCTION CS_1186Com_ReadMacAdress_Proc (END) -------


----- FUNCTION _CS_CommTo1186_SendCmd (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  421: void CS_CommTo1186_SendCmd(u8_t cmd_code ,u8_t * databuf)
  422: {
00192C 904D82            MOV     DPTR,#cmd_code
00192F EF                MOV     A,R7
001930 F0                MOVX    @DPTR,A
001931 A3                INC     DPTR
001932 EB                MOV     A,R3
001933 F0                MOVX    @DPTR,A
001934 A3                INC     DPTR
001935 EA                MOV     A,R2
001936 F0                MOVX    @DPTR,A
001937 A3                INC     DPTR
001938 E9                MOV     A,R1
001939 F0                MOVX    @DPTR,A
  423: 	u8_t buf[10] = {0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,0x00,0x00};
  424:        u8_t len;
00193A 7886              MOV     R0,#LOW buf
00193C 7C4D              MOV     R4,#HIGH buf
00193E 7D01              MOV     R5,#01H
001940 7BFF              MOV     R3,#0FFH
001942 7A04              MOV     R2,#HIGH _?ix1000
001944 79B8              MOV     R1,#LOW _?ix1000
001946 7E00              MOV     R6,#00H
001948 7F0A              MOV     R7,#0AH
00194A 1200D3            LCALL   ?C?COPY
  425: 
  426: 	 buf[0] = 0xc5;							//包头数据
00194D 904D86            MOV     DPTR,#buf
001950 74C5              MOV     A,#0C5H
001952 F0                MOVX    @DPTR,A
  427: 	switch(cmd_code)
001953 904D82            MOV     DPTR,#cmd_code
001956 E0                MOVX    A,@DPTR
001957 12036F            LCALL   ?C?CCASE
00195A 1993              DW      ?C0069?CS_COMMTO1186
00195C 80                DB      080H
00195D 19A9              DW      ?C0070?CS_COMMTO1186
00195F 81                DB      081H
001960 19BF              DW      ?C0071?CS_COMMTO1186
001962 82                DB      082H
001963 19D5              DW      ?C0072?CS_COMMTO1186
001965 83                DB      083H
001966 1A12              DW      ?C0073?CS_COMMTO1186
001968 84                DB      084H
001969 1A59              DW      ?C0074?CS_COMMTO1186
00196B 85                DB      085H
00196C 1A6F              DW      ?C0075?CS_COMMTO1186
00196E A0                DB      0A0H
00196F 1AC0              DW      ?C0076?CS_COMMTO1186
001971 A1                DB      0A1H
001972 1B1B              DW      ?C0077?CS_COMMTO1186
001974 A2                DB      0A2H
001975 1B6C              DW      ?C0078?CS_COMMTO1186
001977 A3                DB      0A3H
001978 1982              DW      ?C0068?CS_COMMTO1186
00197A C5                DB      0C5H
00197B 1BB3              DW      ?C0079?CS_COMMTO1186
00197D E0                DB      0E0H
00197E 0000              DW      00H
001980 1C16              DW      ?C0080?CS_COMMTO1186
  428: 		{
  429: 		case CS_CommTo1186_Reset:			//0
001982         ?C0068?CS_COMMTO1186:
  430: 			buf[0] = 0x00;
001982 E4                CLR     A
001983 904D86            MOV     DPTR,#buf
001986 F0                MOVX    @DPTR,A
  431: 			buf[1] = 0x00;
001987 A3                INC     DPTR
001988 F0                MOVX    @DPTR,A
  432: 			buf[2] = 0x00;
001989 A3                INC     DPTR
00198A F0                MOVX    @DPTR,A
  433: 			len  =  3;
00198B 904D90            MOV     DPTR,#len
00198E 7403              MOV     A,#03H
001990 F0                MOVX    @DPTR,A
  434: 			break;
001991 8121              AJMP    ?C0067?CS_COMMTO1186
  435: 		case CS_CommTo1186_ReadAd:		 	// 1 
001993         ?C0069?CS_COMMTO1186:
  436: 			buf[1] = 0x01;
001993 904D87            MOV     DPTR,#buf+01H
001996 7401              MOV     A,#01H
001998 F0                MOVX    @DPTR,A
  437: 			buf[2] = 0x80;
001999 A3                INC     DPTR
00199A 7480              MOV     A,#080H
00199C F0                MOVX    @DPTR,A
  438: 			buf[3] = 0x44;
00199D A3                INC     DPTR
00199E 7444              MOV     A,#044H
0019A0 F0                MOVX    @DPTR,A
  439: 			len  =  4;
0019A1 904D90            MOV     DPTR,#len
0019A4 7404              MOV     A,#04H
0019A6 F0                MOVX    @DPTR,A
  440: 			break;			
0019A7 8121              AJMP    ?C0067?CS_COMMTO1186
  441: 		case CS_CommTo1186_ReadVersion:		 // 2 
0019A9         ?C0070?CS_COMMTO1186:
  442: 			buf[1] = 0x01;
0019A9 904D87            MOV     DPTR,#buf+01H
0019AC 7401              MOV     A,#01H
0019AE F0                MOVX    @DPTR,A
  443: 			buf[2] = 0x81;
0019AF A3                INC     DPTR
0019B0 7481              MOV     A,#081H
0019B2 F0                MOVX    @DPTR,A
  444: 			buf[3] = 0x45;
0019B3 A3                INC     DPTR
0019B4 7445              MOV     A,#045H
0019B6 F0                MOVX    @DPTR,A
  445: 			len  =  4;
0019B7 904D90            MOV     DPTR,#len
0019BA 7404              MOV     A,#04H
0019BC F0                MOVX    @DPTR,A
  446: 			break;
0019BD 8121              AJMP    ?C0067?CS_COMMTO1186
  447: 		case CS_CommTo1186_ReadTime:		 // 3 
0019BF         ?C0071?CS_COMMTO1186:
  448: 			buf[1] = 0x01;
0019BF 904D87            MOV     DPTR,#buf+01H
0019C2 7401              MOV     A,#01H
0019C4 F0                MOVX    @DPTR,A
  449: 			buf[2] = 0x82;
0019C5 A3                INC     DPTR
0019C6 7482              MOV     A,#082H
0019C8 F0                MOVX    @DPTR,A
  450: 			buf[3] = 0x46;
0019C9 A3                INC     DPTR
0019CA 7446              MOV     A,#046H
0019CC F0                MOVX    @DPTR,A
  451: 			len  =  4;
0019CD 904D90            MOV     DPTR,#len
0019D0 7404              MOV     A,#04H
0019D2 F0                MOVX    @DPTR,A
  452: 			break;
0019D3 8121              AJMP    ?C0067?CS_COMMTO1186
  453: 		case CS_CommTo1186_ReadRam:		 // 4 
0019D5         ?C0072?CS_COMMTO1186:
  454: 			buf[1] = 0x03;
0019D5 904D87            MOV     DPTR,#buf+01H
0019D8 7403              MOV     A,#03H
0019DA F0                MOVX    @DPTR,A
  455: 			buf[2] = 0x83;
0019DB A3                INC     DPTR
0019DC 7483              MOV     A,#083H
0019DE F0                MOVX    @DPTR,A
  456: 			buf[3] = databuf[1];
0019DF 904D83            MOV     DPTR,#databuf
0019E2 E0                MOVX    A,@DPTR
0019E3 FB                MOV     R3,A
0019E4 A3                INC     DPTR
0019E5 E0                MOVX    A,@DPTR
0019E6 FA                MOV     R2,A
0019E7 A3                INC     DPTR
0019E8 E0                MOVX    A,@DPTR
0019E9 F9                MOV     R1,A
0019EA 900001            MOV     DPTR,#01H
0019ED 120112            LCALL   ?C?CLDOPTR
0019F0 904D89            MOV     DPTR,#buf+03H
0019F3 F0                MOVX    @DPTR,A
  457: 			buf[4] = databuf[0];	 
0019F4 1200F9            LCALL   ?C?CLDPTR
0019F7 904D8A            MOV     DPTR,#buf+04H
0019FA F0                MOVX    @DPTR,A
  458: 			buf[5] =  CS_CommTo1186_Xor(buf,5);
0019FB 7B01              MOV     R3,#01H
0019FD 7A4D              MOV     R2,#HIGH buf
0019FF 7986              MOV     R1,#LOW buf
001A01 7D05              MOV     R5,#05H
001A03 B12C              ACALL   _CS_CommTo1186_Xor
001A05 904D8B            MOV     DPTR,#buf+05H
001A08 EF                MOV     A,R7
001A09 F0                MOVX    @DPTR,A
  459: 			len  =  6;
001A0A 904D90            MOV     DPTR,#len
001A0D 7406              MOV     A,#06H
001A0F F0                MOVX    @DPTR,A
  460: 			break;
001A10 8121              AJMP    ?C0067?CS_COMMTO1186
  461: 		case CS_CommTo1186_ReadOtp:		 // 5 
001A12         ?C0073?CS_COMMTO1186:
  462: 			buf[1] = 0x04;
001A12 904D87            MOV     DPTR,#buf+01H
001A15 7404              MOV     A,#04H
001A17 F0                MOVX    @DPTR,A
  463: 			buf[2] = 0x84;
001A18 A3                INC     DPTR
001A19 7484              MOV     A,#084H
001A1B F0                MOVX    @DPTR,A
  464: 			buf[3] = databuf[2];
001A1C 904D83            MOV     DPTR,#databuf
001A1F E0                MOVX    A,@DPTR
001A20 FB                MOV     R3,A
001A21 A3                INC     DPTR
001A22 E0                MOVX    A,@DPTR
001A23 FA                MOV     R2,A
001A24 A3                INC     DPTR
001A25 E0                MOVX    A,@DPTR
001A26 F9                MOV     R1,A
001A27 900002            MOV     DPTR,#02H
001A2A 120112            LCALL   ?C?CLDOPTR
001A2D 904D89            MOV     DPTR,#buf+03H
001A30 F0                MOVX    @DPTR,A
  465: 			buf[4] = databuf[1];	
001A31 900001            MOV     DPTR,#01H
001A34 120112            LCALL   ?C?CLDOPTR
001A37 904D8A            MOV     DPTR,#buf+04H
001A3A F0                MOVX    @DPTR,A
  466: 			buf[5] = databuf[0]; 
001A3B 1200F9            LCALL   ?C?CLDPTR
001A3E 904D8B            MOV     DPTR,#buf+05H
001A41 F0                MOVX    @DPTR,A
  467: 			buf[6] = CS_CommTo1186_Xor(buf,6);
001A42 7B01              MOV     R3,#01H
001A44 7A4D              MOV     R2,#HIGH buf
001A46 7986              MOV     R1,#LOW buf
001A48 7D06              MOV     R5,#06H
001A4A B12C              ACALL   _CS_CommTo1186_Xor
001A4C 904D8C            MOV     DPTR,#buf+06H
001A4F EF                MOV     A,R7
001A50 F0                MOVX    @DPTR,A
  468: 			len  =  7;
001A51 904D90            MOV     DPTR,#len
001A54 7407              MOV     A,#07H
001A56 F0                MOVX    @DPTR,A
  469: 			break;
001A57 8121              AJMP    ?C0067?CS_COMMTO1186
  470: 		case CS_CommTo1186_ReadAdZero:		 // 6 
001A59         ?C0074?CS_COMMTO1186:
  471: 			buf[1] = 0x01;
001A59 904D87            MOV     DPTR,#buf+01H
001A5C 7401              MOV     A,#01H
001A5E F0                MOVX    @DPTR,A
  472: 			buf[2] = 0x85;
001A5F A3                INC     DPTR
001A60 7485              MOV     A,#085H
001A62 F0                MOVX    @DPTR,A
  473: 			buf[3] = 0x41;
001A63 A3                INC     DPTR
001A64 7441              MOV     A,#041H
001A66 F0                MOVX    @DPTR,A
  474: 			len  =  4;
001A67 904D90            MOV     DPTR,#len
001A6A 7404              MOV     A,#04H
001A6C F0                MOVX    @DPTR,A
  475: 			break;
001A6D 8121              AJMP    ?C0067?CS_COMMTO1186
  476: 		case CS_CommTo1186_SetSleepMode:	 // 7 
001A6F         ?C0075?CS_COMMTO1186:
  477: 			buf[1] = 0x05;
001A6F 904D87            MOV     DPTR,#buf+01H
001A72 7405              MOV     A,#05H
001A74 F0                MOVX    @DPTR,A
  478: 			buf[2] = 0xA0;
001A75 A3                INC     DPTR
001A76 74A0              MOV     A,#0A0H
001A78 F0                MOVX    @DPTR,A
  479: 			buf[3] = databuf[3];
001A79 904D83            MOV     DPTR,#databuf
001A7C E0                MOVX    A,@DPTR
001A7D FB                MOV     R3,A
001A7E A3                INC     DPTR
001A7F E0                MOVX    A,@DPTR
001A80 FA                MOV     R2,A
001A81 A3                INC     DPTR
001A82 E0                MOVX    A,@DPTR
001A83 F9                MOV     R1,A
001A84 900003            MOV     DPTR,#03H
001A87 120112            LCALL   ?C?CLDOPTR
001A8A 904D89            MOV     DPTR,#buf+03H
001A8D F0                MOVX    @DPTR,A
  480: 			buf[4] = databuf[2];	
001A8E 900002            MOV     DPTR,#02H
001A91 120112            LCALL   ?C?CLDOPTR
001A94 904D8A            MOV     DPTR,#buf+04H
001A97 F0                MOVX    @DPTR,A
  481: 			buf[5] = databuf[1];
001A98 900001            MOV     DPTR,#01H
001A9B 120112            LCALL   ?C?CLDOPTR
001A9E 904D8B            MOV     DPTR,#buf+05H
001AA1 F0                MOVX    @DPTR,A
  482: 			buf[6] = databuf[0]; 
001AA2 1200F9            LCALL   ?C?CLDPTR
001AA5 904D8C            MOV     DPTR,#buf+06H
001AA8 F0                MOVX    @DPTR,A
  483: 			buf[7] = CS_CommTo1186_Xor(buf,7);
001AA9 7B01              MOV     R3,#01H
001AAB 7A4D              MOV     R2,#HIGH buf
001AAD 7986              MOV     R1,#LOW buf
001AAF 7D07              MOV     R5,#07H
001AB1 B12C              ACALL   _CS_CommTo1186_Xor
001AB3 904D8D            MOV     DPTR,#buf+07H
001AB6 EF                MOV     A,R7
001AB7 F0                MOVX    @DPTR,A
  484: 			len  =  8;
001AB8 904D90            MOV     DPTR,#len
001ABB 7408              MOV     A,#08H
001ABD F0                MOVX    @DPTR,A
  485: 			break;
001ABE 8121              AJMP    ?C0067?CS_COMMTO1186
  486: 		case CS_CommTo1186_SetOpenWeight:	 // 8 
001AC0         ?C0076?CS_COMMTO1186:
  487: 			buf[1] = 0x06;
001AC0 904D87            MOV     DPTR,#buf+01H
001AC3 7406              MOV     A,#06H
001AC5 F0                MOVX    @DPTR,A
  488: 			buf[2] = 0xA1;
001AC6 A3                INC     DPTR
001AC7 74A1              MOV     A,#0A1H
001AC9 F0                MOVX    @DPTR,A
  489: 			buf[3] = databuf[4];
001ACA 904D83            MOV     DPTR,#databuf
001ACD E0                MOVX    A,@DPTR
001ACE FB                MOV     R3,A
001ACF A3                INC     DPTR
001AD0 E0                MOVX    A,@DPTR
001AD1 FA                MOV     R2,A
001AD2 A3                INC     DPTR
001AD3 E0                MOVX    A,@DPTR
001AD4 F9                MOV     R1,A
001AD5 900004            MOV     DPTR,#04H
001AD8 120112            LCALL   ?C?CLDOPTR
001ADB 904D89            MOV     DPTR,#buf+03H
001ADE F0                MOVX    @DPTR,A
  490: 			buf[4] = databuf[3];	
001ADF 900003            MOV     DPTR,#03H
001AE2 120112            LCALL   ?C?CLDOPTR
001AE5 904D8A            MOV     DPTR,#buf+04H
001AE8 F0                MOVX    @DPTR,A
  491: 			buf[5] = databuf[2];
001AE9 900002            MOV     DPTR,#02H
001AEC 120112            LCALL   ?C?CLDOPTR
001AEF 904D8B            MOV     DPTR,#buf+05H
001AF2 F0                MOVX    @DPTR,A
  492: 			buf[6] = databuf[1];
001AF3 900001            MOV     DPTR,#01H
001AF6 120112            LCALL   ?C?CLDOPTR
001AF9 904D8C            MOV     DPTR,#buf+06H
001AFC F0                MOVX    @DPTR,A
  493: 			buf[7] = databuf[0]; 
001AFD 1200F9            LCALL   ?C?CLDPTR
001B00 904D8D            MOV     DPTR,#buf+07H
001B03 F0                MOVX    @DPTR,A
  494: 			buf[8] = CS_CommTo1186_Xor(buf,8);
001B04 7B01              MOV     R3,#01H
001B06 7A4D              MOV     R2,#HIGH buf
001B08 7986              MOV     R1,#LOW buf
001B0A 7D08              MOV     R5,#08H
001B0C B12C              ACALL   _CS_CommTo1186_Xor
001B0E 904D8E            MOV     DPTR,#buf+08H
001B11 EF                MOV     A,R7
001B12 F0                MOVX    @DPTR,A
  495: 			len  =  9;
001B13 904D90            MOV     DPTR,#len
001B16 7409              MOV     A,#09H
001B18 F0                MOVX    @DPTR,A
  496: 			break;
001B19 8121              AJMP    ?C0067?CS_COMMTO1186
  497: 		case CS_CommTo1186_SetTime:		 // 9 
001B1B         ?C0077?CS_COMMTO1186:
  498: 			buf[1] = 0x05;
001B1B 904D87            MOV     DPTR,#buf+01H
001B1E 7405              MOV     A,#05H
001B20 F0                MOVX    @DPTR,A
  499: 			buf[2] = 0xA2;
001B21 A3                INC     DPTR
001B22 74A2              MOV     A,#0A2H
001B24 F0                MOVX    @DPTR,A
  500: 			buf[3] = databuf[3];
001B25 904D83            MOV     DPTR,#databuf
001B28 E0                MOVX    A,@DPTR
001B29 FB                MOV     R3,A
001B2A A3                INC     DPTR
001B2B E0                MOVX    A,@DPTR
001B2C FA                MOV     R2,A
001B2D A3                INC     DPTR
001B2E E0                MOVX    A,@DPTR
001B2F F9                MOV     R1,A
001B30 900003            MOV     DPTR,#03H
001B33 120112            LCALL   ?C?CLDOPTR
001B36 904D89            MOV     DPTR,#buf+03H
001B39 F0                MOVX    @DPTR,A
  501: 			buf[4] = databuf[2];	
001B3A 900002            MOV     DPTR,#02H
001B3D 120112            LCALL   ?C?CLDOPTR
001B40 904D8A            MOV     DPTR,#buf+04H
001B43 F0                MOVX    @DPTR,A
  502: 			buf[5] = databuf[1];
001B44 900001            MOV     DPTR,#01H
001B47 120112            LCALL   ?C?CLDOPTR
001B4A 904D8B            MOV     DPTR,#buf+05H
001B4D F0                MOVX    @DPTR,A
  503: 			buf[6] = databuf[0]; 
001B4E 1200F9            LCALL   ?C?CLDPTR
001B51 904D8C            MOV     DPTR,#buf+06H
001B54 F0                MOVX    @DPTR,A
  504: 			buf[7] = CS_CommTo1186_Xor(buf,7);
001B55 7B01              MOV     R3,#01H
001B57 7A4D              MOV     R2,#HIGH buf
001B59 7986              MOV     R1,#LOW buf
001B5B 7D07              MOV     R5,#07H
001B5D B12C              ACALL   _CS_CommTo1186_Xor
001B5F 904D8D            MOV     DPTR,#buf+07H
001B62 EF                MOV     A,R7
001B63 F0                MOVX    @DPTR,A
  505: 			len  =  8;	
001B64 904D90            MOV     DPTR,#len
001B67 7408              MOV     A,#08H
001B69 F0                MOVX    @DPTR,A
  506: 			break;
001B6A 8121              AJMP    ?C0067?CS_COMMTO1186
  507: 		case CS_CommTo1186_SetRam:		 	// 10 
001B6C         ?C0078?CS_COMMTO1186:
  508: 			buf[1] = 0x04;
001B6C 904D87            MOV     DPTR,#buf+01H
001B6F 7404              MOV     A,#04H
001B71 F0                MOVX    @DPTR,A
  509: 			buf[2] = 0xA3;
001B72 A3                INC     DPTR
001B73 74A3              MOV     A,#0A3H
001B75 F0                MOVX    @DPTR,A
  510: 			buf[3] = databuf[2];
001B76 904D83            MOV     DPTR,#databuf
001B79 E0                MOVX    A,@DPTR
001B7A FB                MOV     R3,A
001B7B A3                INC     DPTR
001B7C E0                MOVX    A,@DPTR
001B7D FA                MOV     R2,A
001B7E A3                INC     DPTR
001B7F E0                MOVX    A,@DPTR
001B80 F9                MOV     R1,A
001B81 900002            MOV     DPTR,#02H
001B84 120112            LCALL   ?C?CLDOPTR
001B87 904D89            MOV     DPTR,#buf+03H
001B8A F0                MOVX    @DPTR,A
  511: 			buf[4] = databuf[1];	
001B8B 900001            MOV     DPTR,#01H
001B8E 120112            LCALL   ?C?CLDOPTR
001B91 904D8A            MOV     DPTR,#buf+04H
001B94 F0                MOVX    @DPTR,A
  512: 			buf[5] = databuf[0]; 
001B95 1200F9            LCALL   ?C?CLDPTR
001B98 904D8B            MOV     DPTR,#buf+05H
001B9B F0                MOVX    @DPTR,A
  513: 			buf[6] = CS_CommTo1186_Xor(buf,6);
001B9C 7B01              MOV     R3,#01H
001B9E 7A4D              MOV     R2,#HIGH buf
001BA0 7986              MOV     R1,#LOW buf
001BA2 7D06              MOV     R5,#06H
001BA4 B12C              ACALL   _CS_CommTo1186_Xor
001BA6 904D8C            MOV     DPTR,#buf+06H
001BA9 EF                MOV     A,R7
001BAA F0                MOVX    @DPTR,A
  514: 			len  =  7;			
001BAB 904D90            MOV     DPTR,#len
001BAE 7407              MOV     A,#07H
001BB0 F0                MOVX    @DPTR,A
  515: 			break;
001BB1 806E              SJMP    ?C0067?CS_COMMTO1186
  516: 		case CS_CommTo1186_LcdDisplay:		// 11 
001BB3         ?C0079?CS_COMMTO1186:
  517: 			buf[1] = 0x07;
001BB3 904D87            MOV     DPTR,#buf+01H
001BB6 7407              MOV     A,#07H
001BB8 F0                MOVX    @DPTR,A
  518: 			buf[2] = 0xe0;
001BB9 A3                INC     DPTR
001BBA 74E0              MOV     A,#0E0H
001BBC F0                MOVX    @DPTR,A
  519: 			buf[3] = databuf[5];
001BBD 904D83            MOV     DPTR,#databuf
001BC0 E0                MOVX    A,@DPTR
001BC1 FB                MOV     R3,A
001BC2 A3                INC     DPTR
001BC3 E0                MOVX    A,@DPTR
001BC4 FA                MOV     R2,A
001BC5 A3                INC     DPTR
001BC6 E0                MOVX    A,@DPTR
001BC7 F9                MOV     R1,A
001BC8 900005            MOV     DPTR,#05H
001BCB 120112            LCALL   ?C?CLDOPTR
001BCE 904D89            MOV     DPTR,#buf+03H
001BD1 F0                MOVX    @DPTR,A
  520: 			buf[4] = databuf[4];
001BD2 900004            MOV     DPTR,#04H
001BD5 120112            LCALL   ?C?CLDOPTR
001BD8 904D8A            MOV     DPTR,#buf+04H
001BDB F0                MOVX    @DPTR,A
  521: 			buf[5] = databuf[3];
001BDC 900003            MOV     DPTR,#03H
001BDF 120112            LCALL   ?C?CLDOPTR
001BE2 904D8B            MOV     DPTR,#buf+05H
001BE5 F0                MOVX    @DPTR,A
  522: 			buf[6] = databuf[2];
001BE6 900002            MOV     DPTR,#02H
001BE9 120112            LCALL   ?C?CLDOPTR
001BEC 904D8C            MOV     DPTR,#buf+06H
001BEF F0                MOVX    @DPTR,A
  523: 			buf[7] = databuf[1];
001BF0 900001            MOV     DPTR,#01H
001BF3 120112            LCALL   ?C?CLDOPTR
001BF6 904D8D            MOV     DPTR,#buf+07H
001BF9 F0                MOVX    @DPTR,A
  524: 			buf[8] = databuf[0];		 
001BFA 1200F9            LCALL   ?C?CLDPTR
001BFD 904D8E            MOV     DPTR,#buf+08H
001C00 F0                MOVX    @DPTR,A
  525: 			buf[9] = CS_CommTo1186_Xor(buf,9);
001C01 7B01              MOV     R3,#01H
001C03 7A4D              MOV     R2,#HIGH buf
001C05 7986              MOV     R1,#LOW buf
001C07 7D09              MOV     R5,#09H
001C09 B12C              ACALL   _CS_CommTo1186_Xor
001C0B 904D8F            MOV     DPTR,#buf+09H
001C0E EF                MOV     A,R7
001C0F F0                MOVX    @DPTR,A
  526: 			len  =  10;
001C10 A3                INC     DPTR
001C11 740A              MOV     A,#0AH
001C13 F0                MOVX    @DPTR,A
  527: 			break;
001C14 800B              SJMP    ?C0067?CS_COMMTO1186
  528: 		default:		
001C16         ?C0080?CS_COMMTO1186:
  529: 			buf[1] = 0x00;
001C16 E4                CLR     A
001C17 904D87            MOV     DPTR,#buf+01H
001C1A F0                MOVX    @DPTR,A
  530: 			len   = 2;
001C1B 904D90            MOV     DPTR,#len
001C1E 7402              MOV     A,#02H
001C20 F0                MOVX    @DPTR,A
  531: 			break;
  532: 		}
001C21         ?C0067?CS_COMMTO1186:
  533: 	YC_UARTSendData(buf, len);
001C21 7B01              MOV     R3,#01H
001C23 7A4D              MOV     R2,#HIGH buf
001C25 7986              MOV     R1,#LOW buf
001C27 904D90            MOV     DPTR,#len
001C2A E0                MOVX    A,@DPTR
001C2B FD                MOV     R5,A
001C2C 7C00              MOV     R4,#00H
;----                  JMP     _YC_UARTSendData
  534: }
----- FUNCTION _CS_CommTo1186_SendCmd (END) -------


----- FUNCTION _YC_UARTSendData (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  351: void YC_UARTSendData(u8_t* pbuff, u16_t len)
  352: {
001C2E 904DAE            MOV     DPTR,#pbuff
001C31 EB                MOV     A,R3
001C32 F0                MOVX    @DPTR,A
001C33 A3                INC     DPTR
001C34 EA                MOV     A,R2
001C35 F0                MOVX    @DPTR,A
001C36 A3                INC     DPTR
001C37 E9                MOV     A,R1
001C38 F0                MOVX    @DPTR,A
001C39 A3                INC     DPTR
001C3A EC                MOV     A,R4
001C3B F0                MOVX    @DPTR,A
001C3C A3                INC     DPTR
001C3D ED                MOV     A,R5
001C3E F0                MOVX    @DPTR,A
  353: 	int i;
  354: 	u8_t *twptr = (u8_t *)ESWAP(REG_UART_TX_PTR_W);
001C3F 90805E            MOV     DPTR,#0805EH
001C42 A3                INC     DPTR
001C43 E0                MOVX    A,@DPTR
001C44 FC                MOV     R4,A
001C45 90805E            MOV     DPTR,#0805EH
001C48 E0                MOVX    A,@DPTR
001C49 FF                MOV     R7,A
001C4A EC                MOV     A,R4
001C4B FE                MOV     R6,A
001C4C EF                MOV     A,R7
001C4D AA06              MOV     R2,AR6
001C4F F9                MOV     R1,A
001C50 904DB5            MOV     DPTR,#twptr
001C53 E4                CLR     A
001C54 F0                MOVX    @DPTR,A
001C55 A3                INC     DPTR
001C56 EA                MOV     A,R2
001C57 F0                MOVX    @DPTR,A
001C58 A3                INC     DPTR
001C59 E9                MOV     A,R1
001C5A F0                MOVX    @DPTR,A
  355: 
  356: 	for(i=0;i<len;i++)
001C5B E4                CLR     A
001C5C 904DB3            MOV     DPTR,#i
001C5F F0                MOVX    @DPTR,A
001C60 A3                INC     DPTR
001C61 F0                MOVX    @DPTR,A
001C62         ?C0002?YC_PERIPHERAL:
001C62 904DB1            MOV     DPTR,#len
001C65 E0                MOVX    A,@DPTR
001C66 FE                MOV     R6,A
001C67 A3                INC     DPTR
001C68 E0                MOVX    A,@DPTR
001C69 FF                MOV     R7,A
001C6A C3                CLR     C
001C6B 904DB4            MOV     DPTR,#i+01H
001C6E E0                MOVX    A,@DPTR
001C6F 9F                SUBB    A,R7
001C70 904DB3            MOV     DPTR,#i
001C73 E0                MOVX    A,@DPTR
001C74 9E                SUBB    A,R6
001C75 4002              JC      $ + 4H
001C77 A10D              AJMP    ?C0003?YC_PERIPHERAL
  357: 	{
  358: 		xmemcpy(twptr++, pbuff++, 1);
001C79 904DB5            MOV     DPTR,#twptr
001C7C E0                MOVX    A,@DPTR
001C7D A3                INC     DPTR
001C7E E4                CLR     A
001C7F 75F001            MOV     B,#01H
001C82 1201C8            LCALL   ?C?ILDIX
001C85 FE                MOV     R6,A
001C86 AFF0              MOV     R7,B
001C88 904DAE            MOV     DPTR,#pbuff
001C8B E0                MOVX    A,@DPTR
001C8C FB                MOV     R3,A
001C8D A3                INC     DPTR
001C8E E4                CLR     A
001C8F 75F001            MOV     B,#01H
001C92 1201C8            LCALL   ?C?ILDIX
001C95 A9F0              MOV     R1,B
001C97 FA                MOV     R2,A
001C98 751C01            MOV     ?_xmemcpy?BYTE+05H,#01H
001C9B B186              ACALL   _xmemcpy
  359: 
  360: 		if(((short)twptr-1)==ESWAP(REG_UART_TX_ADDR_E))	//twptr reach the end of buffer
001C9D 90805C            MOV     DPTR,#0805CH
001CA0 A3                INC     DPTR
001CA1 E0                MOVX    A,@DPTR
001CA2 FC                MOV     R4,A
001CA3 90805C            MOV     DPTR,#0805CH
001CA6 E0                MOVX    A,@DPTR
001CA7 FF                MOV     R7,A
001CA8 EC                MOV     A,R4
001CA9 FE                MOV     R6,A
001CAA EF                MOV     A,R7
001CAB 904DB5            MOV     DPTR,#twptr
001CAE E0                MOVX    A,@DPTR
001CAF A3                INC     DPTR
001CB0 E0                MOVX    A,@DPTR
001CB1 FA                MOV     R2,A
001CB2 A3                INC     DPTR
001CB3 E0                MOVX    A,@DPTR
001CB4 24FF              ADD     A,#0FFH
001CB6 FD                MOV     R5,A
001CB7 EA                MOV     A,R2
001CB8 34FF              ADDC    A,#0FFH
001CBA FC                MOV     R4,A
001CBB EF                MOV     A,R7
001CBC 6D                XRL     A,R5
001CBD 7002              JNZ     ?C0022?YC_PERIPHERAL
001CBF EE                MOV     A,R6
001CC0 6C                XRL     A,R4
001CC1         ?C0022?YC_PERIPHERAL:
001CC1 703A              JNZ     ?C0004?YC_PERIPHERAL
  361: 		{
  362: 			REG_UART_TX_PTR_W = REG_UART_TX_ADDR_E;
001CC3 90805C            MOV     DPTR,#0805CH
001CC6 E0                MOVX    A,@DPTR
001CC7 FF                MOV     R7,A
001CC8 A3                INC     DPTR
001CC9 E0                MOVX    A,@DPTR
001CCA A3                INC     DPTR
001CCB CF                XCH     A,R7
001CCC F0                MOVX    @DPTR,A
001CCD A3                INC     DPTR
001CCE EF                MOV     A,R7
001CCF F0                MOVX    @DPTR,A
001CD0         ?C0006?YC_PERIPHERAL:
  363: 			while(ESWAP(REG_UART_TX_ITEMS));
001CD0 90810E            MOV     DPTR,#0810EH
001CD3 A3                INC     DPTR
001CD4 E0                MOVX    A,@DPTR
001CD5 FC                MOV     R4,A
001CD6 90810E            MOV     DPTR,#0810EH
001CD9 E0                MOVX    A,@DPTR
001CDA FF                MOV     R7,A
001CDB EC                MOV     A,R4
001CDC FE                MOV     R6,A
001CDD EF                MOV     A,R7
001CDE 4E                ORL     A,R6
001CDF 70EF              JNZ     ?C0006?YC_PERIPHERAL
001CE1         ?C0007?YC_PERIPHERAL:
  364: 			
  365: 			twptr = (u8_t *)ESWAP(REG_UART_TX_ADDR_S);	//reset twptr
001CE1 90805A            MOV     DPTR,#0805AH
001CE4 A3                INC     DPTR
001CE5 E0                MOVX    A,@DPTR
001CE6 FC                MOV     R4,A
001CE7 90805A            MOV     DPTR,#0805AH
001CEA E0                MOVX    A,@DPTR
001CEB FF                MOV     R7,A
001CEC EC                MOV     A,R4
001CED FE                MOV     R6,A
001CEE EF                MOV     A,R7
001CEF AA06              MOV     R2,AR6
001CF1 F9                MOV     R1,A
001CF2 904DB5            MOV     DPTR,#twptr
001CF5 E4                CLR     A
001CF6 F0                MOVX    @DPTR,A
001CF7 A3                INC     DPTR
001CF8 EA                MOV     A,R2
001CF9 F0                MOVX    @DPTR,A
001CFA A3                INC     DPTR
001CFB E9                MOV     A,R1
001CFC F0                MOVX    @DPTR,A
  366: 		}	
  367: 	}	
001CFD         ?C0004?YC_PERIPHERAL:
001CFD 904DB4            MOV     DPTR,#i+01H
001D00 E0                MOVX    A,@DPTR
001D01 04                INC     A
001D02 F0                MOVX    @DPTR,A
001D03 7006              JNZ     ?C0023?YC_PERIPHERAL
001D05 904DB3            MOV     DPTR,#i
001D08 E0                MOVX    A,@DPTR
001D09 04                INC     A
001D0A F0                MOVX    @DPTR,A
001D0B         ?C0023?YC_PERIPHERAL:
001D0B 8162              AJMP    ?C0002?YC_PERIPHERAL
001D0D         ?C0003?YC_PERIPHERAL:
  368: 
  369: 	REG_UART_TX_PTR_W = ESWAP((short)twptr);
001D0D 904DB5            MOV     DPTR,#twptr
001D10 E0                MOVX    A,@DPTR
001D11 A3                INC     DPTR
001D12 E0                MOVX    A,@DPTR
001D13 FA                MOV     R2,A
001D14 A3                INC     DPTR
001D15 E0                MOVX    A,@DPTR
001D16 AC02              MOV     R4,AR2
001D18 FD                MOV     R5,A
001D19 EC                MOV     A,R4
001D1A FF                MOV     R7,A
001D1B 33                RLC     A
001D1C 95E0              SUBB    A,ACC
001D1E AB07              MOV     R3,AR7
001D20 ED                MOV     A,R5
001D21 FF                MOV     R7,A
001D22 EB                MOV     A,R3
001D23 90805E            MOV     DPTR,#0805EH
001D26 CF                XCH     A,R7
001D27 F0                MOVX    @DPTR,A
001D28 A3                INC     DPTR
001D29 EF                MOV     A,R7
001D2A F0                MOVX    @DPTR,A
  370: 	//YC_UARTWaitSendData();
  371: }
001D2B 22                RET     
----- FUNCTION _YC_UARTSendData (END) -------


----- FUNCTION _CS_CommTo1186_Xor (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  411: u8_t CS_CommTo1186_Xor(u8_t * buf,u8_t len)
  412: {
001D2C 904E4D            MOV     DPTR,#buf
001D2F EB                MOV     A,R3
001D30 F0                MOVX    @DPTR,A
001D31 A3                INC     DPTR
001D32 EA                MOV     A,R2
001D33 F0                MOVX    @DPTR,A
001D34 A3                INC     DPTR
001D35 E9                MOV     A,R1
001D36 F0                MOVX    @DPTR,A
;---- Variable 'len' assigned to Register 'R5' ----
  413: 	u8_t	i;
  414: 	for(i=0;i<len;i++)
;---- Variable 'i' assigned to Register 'R7' ----
001D37 E4                CLR     A
001D38 FF                MOV     R7,A
001D39         ?C0063?CS_COMMTO1186:
001D39 EF                MOV     A,R7
001D3A C3                CLR     C
001D3B 9D                SUBB    A,R5
001D3C 5035              JNC     ?C0064?CS_COMMTO1186
  415: 		{
  416: 		*(buf+9) = *(buf+9) ^	*(buf+i);
001D3E 904E4D            MOV     DPTR,#buf
001D41 E0                MOVX    A,@DPTR
001D42 FB                MOV     R3,A
001D43 A3                INC     DPTR
001D44 E0                MOVX    A,@DPTR
001D45 FA                MOV     R2,A
001D46 A3                INC     DPTR
001D47 E0                MOVX    A,@DPTR
001D48 2409              ADD     A,#09H
001D4A F9                MOV     R1,A
001D4B E4                CLR     A
001D4C 3A                ADDC    A,R2
001D4D FA                MOV     R2,A
001D4E C002              PUSH    AR2
001D50 C001              PUSH    AR1
001D52 1200F9            LCALL   ?C?CLDPTR
001D55 FE                MOV     R6,A
001D56 904E4D            MOV     DPTR,#buf
001D59 E0                MOVX    A,@DPTR
001D5A A3                INC     DPTR
001D5B E0                MOVX    A,@DPTR
001D5C FA                MOV     R2,A
001D5D A3                INC     DPTR
001D5E E0                MOVX    A,@DPTR
001D5F F9                MOV     R1,A
001D60 8F82              MOV     DPL,R7
001D62 758300            MOV     DPH,#00H
001D65 120112            LCALL   ?C?CLDOPTR
001D68 6E                XRL     A,R6
001D69 D001              POP     AR1
001D6B D002              POP     AR2
001D6D 12013F            LCALL   ?C?CSTPTR
  417: 		}
001D70 0F                INC     R7
001D71 80C6              SJMP    ?C0063?CS_COMMTO1186
001D73         ?C0064?CS_COMMTO1186:
  418: 	return *(buf+9);
001D73 904E4D            MOV     DPTR,#buf
001D76 E0                MOVX    A,@DPTR
001D77 FB                MOV     R3,A
001D78 A3                INC     DPTR
001D79 E0                MOVX    A,@DPTR
001D7A FA                MOV     R2,A
001D7B A3                INC     DPTR
001D7C E0                MOVX    A,@DPTR
001D7D F9                MOV     R1,A
001D7E 900009            MOV     DPTR,#09H
001D81 120112            LCALL   ?C?CLDOPTR
001D84 FF                MOV     R7,A
  419: }
001D85 22                RET     
----- FUNCTION _CS_CommTo1186_Xor (END) -------


----- FUNCTION _xmemcpy (BEGIN) -----
 FILE: 'YC_Utilities.c'
   16: void xmemcpy(pxbyte dest, u8_t* src, u8_t len) small
   17: {
001D86 8E17              MOV     dest,R6
001D88 8F18              MOV     dest+01H,R7
001D8A 8B19              MOV     src,R3
001D8C 8A1A              MOV     src+01H,R2
001D8E 891B              MOV     src+02H,R1
001D90         ?C0005?YC_UTILITIES:
   18: 	while(len--)
001D90 AF1C              MOV     R7,len
001D92 151C              DEC     len
001D94 EF                MOV     A,R7
001D95 6025              JZ      ?C0007?YC_UTILITIES
   19: 		*dest++ = *src++;
001D97 AB19              MOV     R3,src
001D99 051B              INC     src+02H
001D9B E51B              MOV     A,src+02H
001D9D AA1A              MOV     R2,src+01H
001D9F 7002              JNZ     ?C0045?YC_UTILITIES
001DA1 051A              INC     src+01H
001DA3         ?C0045?YC_UTILITIES:
001DA3 14                DEC     A
001DA4 F9                MOV     R1,A
001DA5 1200F9            LCALL   ?C?CLDPTR
001DA8 FF                MOV     R7,A
001DA9 0518              INC     dest+01H
001DAB E518              MOV     A,dest+01H
001DAD AC17              MOV     R4,dest
001DAF 7002              JNZ     ?C0046?YC_UTILITIES
001DB1 0517              INC     dest
001DB3         ?C0046?YC_UTILITIES:
001DB3 14                DEC     A
001DB4 F582              MOV     DPL,A
001DB6 8C83              MOV     DPH,R4
001DB8 EF                MOV     A,R7
001DB9 F0                MOVX    @DPTR,A
001DBA 80D4              SJMP    ?C0005?YC_UTILITIES
   20: 	return;
   21: }
001DBC         ?C0007?YC_UTILITIES:
001DBC 22                RET     
----- FUNCTION _xmemcpy (END) -------


----- FUNCTION _lxRecvDataFromApp (BEGIN) -----
 FILE: 'lxProtocol.c'
   50: void lxRecvDataFromApp(BT_EVENTFIFO_t *event)
   51: {
001DBD 904E1E            MOV     DPTR,#event
001DC0 EB                MOV     A,R3
001DC1 F0                MOVX    @DPTR,A
001DC2 A3                INC     DPTR
001DC3 EA                MOV     A,R2
001DC4 F0                MOVX    @DPTR,A
001DC5 A3                INC     DPTR
001DC6 E9                MOV     A,R1
001DC7 F0                MOVX    @DPTR,A
   52: 	//data[0]:total length, data[1~2]:handle
   53: 	//data[3]:frame control,data[4]:length,data[5~N]:content
   54: 	u8_t frameControl = event->DATA[3];
001DC8 904E1E            MOV     DPTR,#event
001DCB E0                MOVX    A,@DPTR
001DCC FB                MOV     R3,A
001DCD A3                INC     DPTR
001DCE E0                MOVX    A,@DPTR
001DCF FA                MOV     R2,A
001DD0 A3                INC     DPTR
001DD1 E0                MOVX    A,@DPTR
001DD2 F9                MOV     R1,A
001DD3 900004            MOV     DPTR,#04H
001DD6 120112            LCALL   ?C?CLDOPTR
001DD9 904E21            MOV     DPTR,#frameControl
001DDC F0                MOVX    @DPTR,A
   55: 	u16_t cmd;
   56: 	
   57: 	bigLittleEndianSwap(&(event->DATA[5]), event->DATA[4]);
001DDD E9                MOV     A,R1
001DDE 2406              ADD     A,#06H
001DE0 F9                MOV     R1,A
001DE1 E4                CLR     A
001DE2 3A                ADDC    A,R2
001DE3 FA                MOV     R2,A
001DE4 C002              PUSH    AR2
001DE6 C001              PUSH    AR1
001DE8 904E1E            MOV     DPTR,#event
001DEB E0                MOVX    A,@DPTR
001DEC A3                INC     DPTR
001DED E0                MOVX    A,@DPTR
001DEE FA                MOV     R2,A
001DEF A3                INC     DPTR
001DF0 E0                MOVX    A,@DPTR
001DF1 F9                MOV     R1,A
001DF2 900005            MOV     DPTR,#05H
001DF5 120112            LCALL   ?C?CLDOPTR
001DF8 FD                MOV     R5,A
001DF9 7C00              MOV     R4,#00H
001DFB D001              POP     AR1
001DFD D002              POP     AR2
001DFF 123A00            LCALL   _bigLittleEndianSwap
   58: 	cmd = event->DATA[5] | (event->DATA[6] << 8);
001E02 904E1E            MOV     DPTR,#event
001E05 E0                MOVX    A,@DPTR
001E06 FB                MOV     R3,A
001E07 A3                INC     DPTR
001E08 E0                MOVX    A,@DPTR
001E09 FA                MOV     R2,A
001E0A A3                INC     DPTR
001E0B E0                MOVX    A,@DPTR
001E0C F9                MOV     R1,A
001E0D 900007            MOV     DPTR,#07H
001E10 120112            LCALL   ?C?CLDOPTR
001E13 FE                MOV     R6,A
001E14 900006            MOV     DPTR,#06H
001E17 120112            LCALL   ?C?CLDOPTR
001E1A FD                MOV     R5,A
001E1B EE                MOV     A,R6
001E1C ED                MOV     A,R5
001E1D FF                MOV     R7,A
001E1E 904E22            MOV     DPTR,#cmd
001E21 EE                MOV     A,R6
001E22 F0                MOVX    @DPTR,A
001E23 A3                INC     DPTR
001E24 EF                MOV     A,R7
001E25 F0                MOVX    @DPTR,A
   59: 	
   60: 	//numTotalFrames == 1
   61: 	if(frameControl == FRAME_CONTROL_SINGLE)
001E26 904E21            MOV     DPTR,#frameControl
001E29 E0                MOVX    A,@DPTR
001E2A 6410              XRL     A,#010H
001E2C 6002              JZ      $ + 4H
001E2E C1B8              AJMP    ?C0007?LXPROTOCOL
   62: 	{
   63: 		//send ack
   64: 		lxSendRecvDataACK(HANDLE_UUIDA625_NOTIFY, RECV_ACK_SUCCESS);
001E30 7D01              MOV     R5,#01H
001E32 7F25              MOV     R7,#025H
001E34 FE                MOV     R6,A
001E35 F108              ACALL   _lxSendRecvDataACK
   65: 
   66: 		//copy data
   67: 		xmemcpy(LX_RECV_BUF, &(event->DATA[5]), event->DATA[4]);
001E37 904E1E            MOV     DPTR,#event
001E3A E0                MOVX    A,@DPTR
001E3B FB                MOV     R3,A
001E3C A3                INC     DPTR
001E3D E0                MOVX    A,@DPTR
001E3E FA                MOV     R2,A
001E3F A3                INC     DPTR
001E40 E0                MOVX    A,@DPTR
001E41 2406              ADD     A,#06H
001E43 F9                MOV     R1,A
001E44 E4                CLR     A
001E45 3A                ADDC    A,R2
001E46 FA                MOV     R2,A
001E47 C002              PUSH    AR2
001E49 C001              PUSH    AR1
001E4B 904E1E            MOV     DPTR,#event
001E4E E0                MOVX    A,@DPTR
001E4F A3                INC     DPTR
001E50 E0                MOVX    A,@DPTR
001E51 FA                MOV     R2,A
001E52 A3                INC     DPTR
001E53 E0                MOVX    A,@DPTR
001E54 F9                MOV     R1,A
001E55 900005            MOV     DPTR,#05H
001E58 120112            LCALL   ?C?CLDOPTR
001E5B F51C              MOV     ?_xmemcpy?BYTE+05H,A
001E5D D001              POP     AR1
001E5F D002              POP     AR2
001E61 7FA0              MOV     R7,#0A0H
001E63 7E48              MOV     R6,#048H
001E65 B186              ACALL   _xmemcpy
   68: 		
   69: 		switch(cmd)
001E67 904E22            MOV     DPTR,#cmd
001E6A E0                MOVX    A,@DPTR
001E6B FE                MOV     R6,A
001E6C A3                INC     DPTR
001E6D E0                MOVX    A,@DPTR
001E6E 8EF0              MOV     B,R6
001E70 120395            LCALL   ?C?ICASE
001E73 1E97              DW      ?C0009?LXPROTOCOL
001E75 0001              DW      01H
001E77 1E9B              DW      ?C0010?LXPROTOCOL
001E79 0003              DW      03H
001E7B 1E9F              DW      ?C0011?LXPROTOCOL
001E7D 0008              DW      08H
001E7F 1EA3              DW      ?C0012?LXPROTOCOL
001E81 000A              DW      0AH
001E83 1EA7              DW      ?C0013?LXPROTOCOL
001E85 1002              DW      01002H
001E87 1EAB              DW      ?C0014?LXPROTOCOL
001E89 1004              DW      01004H
001E8B 1EAF              DW      ?C0015?LXPROTOCOL
001E8D 1005              DW      01005H
001E8F 1EB3              DW      ?C0016?LXPROTOCOL
001E91 4801              DW      04801H
001E93 0000              DW      00H
001E95 1EFE              DW      ?C0023?LXPROTOCOL
   70: 		{
   71: 			case CMD_REGISTRATION_REQ:
001E97         ?C0009?LXPROTOCOL:
   72: 				changeLxOptStatus(OPT_REGISTER_REQ);
001E97 7F10              MOV     R7,#010H
001E99 8064              SJMP    _changeLxOptStatus
   73: 				break;
   74: 			case CMD_BIND_REQ:
001E9B         ?C0010?LXPROTOCOL:
   75: 				changeLxOptStatus(OPT_BIND_REQ);
001E9B 7F13              MOV     R7,#013H
001E9D 8060              SJMP    _changeLxOptStatus
   76: 				break;
   77: 			case CMD_LOGIN_RSP:
001E9F         ?C0011?LXPROTOCOL:
   78: 				changeLxOptStatus(OPT_LOGIN_RSP);
001E9F 7F18              MOV     R7,#018H
001EA1 805C              SJMP    _changeLxOptStatus
   79: 				break;
   80: 			case CMD_INIT_RSP:
001EA3         ?C0012?LXPROTOCOL:
   81: 				changeLxOptStatus(OPT_INIT_RSP);
001EA3 7F22              MOV     R7,#022H
001EA5 8058              SJMP    _changeLxOptStatus
   82: 				break;
   83: 				
   84: 			case CMD_TIME_SETTING_REQ:
001EA7         ?C0013?LXPROTOCOL:
   85: 				changeLxOptStatus(OPT_TIME_SETTING_REQ);
001EA7 7F25              MOV     R7,#025H
001EA9 8054              SJMP    _changeLxOptStatus
   86: 				break;
   87: 			case CMD_UNIT_SETTING_REQ:
001EAB         ?C0014?LXPROTOCOL:
   88: 				changeLxOptStatus(OPT_UNIT_SETTING_REQ);
001EAB 7F28              MOV     R7,#028H
001EAD 8050              SJMP    _changeLxOptStatus
   89: 				break;
   90: 			case CMD_DATA_CLEAR_SETTING_REQ:
001EAF         ?C0015?LXPROTOCOL:
   91: 				changeLxOptStatus(OPT_DATA_DEL_SETTING_REQ);
001EAF 7F31              MOV     R7,#031H
001EB1 804C              SJMP    _changeLxOptStatus
   92: 				break;
   93: 				
   94: 			case CMD_SYNC_DATA_REQ:
001EB3         ?C0016?LXPROTOCOL:
   95: 				changeLxOptStatus(OPT_SYNC_DATA_REQ);
001EB3 7F35              MOV     R7,#035H
001EB5 8048              SJMP    _changeLxOptStatus
   96: 				break;
   97: 		}
   98: 		
   99: 	}
001EB7 22                RET     
001EB8         ?C0007?LXPROTOCOL:
  100: 	//ACK:numTotalFrames == 0
  101: 	else if(frameControl == FRAME_CONTROL_ACK)
001EB8 904E21            MOV     DPTR,#frameControl
001EBB E0                MOVX    A,@DPTR
001EBC 7040              JNZ     ?C0023?LXPROTOCOL
  102: 	{
  103: 		if(event->DATA[5] == RECV_ACK_SUCCESS)
001EBE 904E1E            MOV     DPTR,#event
001EC1 E0                MOVX    A,@DPTR
001EC2 FB                MOV     R3,A
001EC3 A3                INC     DPTR
001EC4 E0                MOVX    A,@DPTR
001EC5 FA                MOV     R2,A
001EC6 A3                INC     DPTR
001EC7 E0                MOVX    A,@DPTR
001EC8 F9                MOV     R1,A
001EC9 900006            MOV     DPTR,#06H
001ECC 120112            LCALL   ?C?CLDOPTR
001ECF B40111            CJNE    A,#01H,?C0019?LXPROTOCOL
  104: 		{
  105: 			if(lxOptStatus == OPT_REGISTER_RSP_WAIT_ACK)
001ED2 904C5C            MOV     DPTR,#lxOptStatus
001ED5 E0                MOVX    A,@DPTR
001ED6 B41104            CJNE    A,#011H,?C0020?LXPROTOCOL
  106: 			{
  107: 				SpiFlashOperator(CS_CMD_WRITE_FLASH);
001ED9 7F41              MOV     R7,#041H
001EDB F13B              ACALL   _SpiFlashOperator
  108: 			}
001EDD         ?C0020?LXPROTOCOL:
  109: 			
  110: 			lxOptStatus = OPT_IDLE;
001EDD E4                CLR     A
001EDE 904C5C            MOV     DPTR,#lxOptStatus
001EE1 F0                MOVX    @DPTR,A
  111: 		}
001EE2 22                RET     
001EE3         ?C0019?LXPROTOCOL:
  112: 		else
  113: 		{
  114: 			if(lxOptStatus == OPT_REGISTER_RSP_WAIT_ACK)
001EE3 904C5C            MOV     DPTR,#lxOptStatus
001EE6 E0                MOVX    A,@DPTR
001EE7 B4110F            CJNE    A,#011H,?C0022?LXPROTOCOL
  115: 			{
  116: 				xmemset(mem_register_buf , 0, 10);
001EEA 7B0A              MOV     R3,#0AH
001EEC E4                CLR     A
001EED FD                MOV     R5,A
001EEE 7F0E              MOV     R7,#0EH
001EF0 7E4C              MOV     R6,#04CH
001EF2 F19C              ACALL   _xmemset
  117: 				//update adv flag
  118: 				*(mem_le_adv_data + 13) = 0;
001EF4 9043E7            MOV     DPTR,#043E7H
001EF7 E4                CLR     A
001EF8 F0                MOVX    @DPTR,A
  119: 			}
001EF9         ?C0022?LXPROTOCOL:
  120: 			lxOptStatus = OPT_IDLE;
001EF9 E4                CLR     A
001EFA 904C5C            MOV     DPTR,#lxOptStatus
001EFD F0                MOVX    @DPTR,A
  121: 		}
  122: 	}
  123: }
001EFE         ?C0023?LXPROTOCOL:
001EFE 22                RET     
----- FUNCTION _lxRecvDataFromApp (END) -------


----- FUNCTION _changeLxOptStatus (BEGIN) -----
 FILE: 'lxProtocol.c'
  125: void changeLxOptStatus(u8_t opt)
  126: {
;---- Variable 'opt' assigned to Register 'R7' ----
  127: 	if(lxOptStatus == OPT_IDLE)
  128: 	{
001EFF 904C5C            MOV     DPTR,#lxOptStatus
001F02 E0                MOVX    A,@DPTR
001F03 7002              JNZ     ?C0025?LXPROTOCOL
  129: 		lxOptStatus = opt;
  130: 	}
001F05 EF                MOV     A,R7
001F06 F0                MOVX    @DPTR,A
  131: }
  132: 
001F07         ?C0025?LXPROTOCOL:
001F07 22                RET     
----- FUNCTION _changeLxOptStatus (END) -------


----- FUNCTION _lxSendRecvDataACK (BEGIN) -----
 FILE: 'lxProtocol.c'
   31: static void lxSendRecvDataACK(u16_t handle, u8_t state)
   32: {
;---- Variable 'handle' assigned to Register 'R2/R3' ----
001F08 AB07              MOV     R3,AR7
001F0A AA06              MOV     R2,AR6
;---- Variable 'state' assigned to Register 'R5' ----
   33: 	if(notifyValueUUIDA625 != NOTIFY_ENABLE)
   34: 	{
001F0C 904C5A            MOV     DPTR,#notifyValueUUIDA625
001F0F E0                MOVX    A,@DPTR
001F10 6401              XRL     A,#01H
001F12 7026              JNZ     ?C0006?LXPROTOCOL
   35: 		return;
   36: 	}
001F14         ?C0005?LXPROTOCOL:
   37: 
   38: 	btCmdBuf.len = 0x06;
001F14 904C63            MOV     DPTR,#btCmdBuf
001F17 7406              MOV     A,#06H
001F19 F0                MOVX    @DPTR,A
   39: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
001F1A A3                INC     DPTR
001F1B 7430              MOV     A,#030H
001F1D F0                MOVX    @DPTR,A
   40: 	btCmdBuf.DATA[1] = LO_UINT16(handle);
001F1E EB                MOV     A,R3
001F1F A3                INC     DPTR
001F20 F0                MOVX    @DPTR,A
   41: 	btCmdBuf.DATA[2] = HI_UINT16(handle);
001F21 EA                MOV     A,R2
001F22 A3                INC     DPTR
001F23 F0                MOVX    @DPTR,A
   42: 	btCmdBuf.DATA[3] = ACK_FRAME;
001F24 E4                CLR     A
001F25 A3                INC     DPTR
001F26 F0                MOVX    @DPTR,A
   43: 	btCmdBuf.DATA[4] = RECV_ACK_FRAME_LEN;
001F27 A3                INC     DPTR
001F28 04                INC     A
001F29 F0                MOVX    @DPTR,A
   44: 	btCmdBuf.DATA[5] = state;
001F2A A3                INC     DPTR
001F2B ED                MOV     A,R5
001F2C F0                MOVX    @DPTR,A
   45: 	
   46: 	BT_CmdFifoIn(&btCmdBuf);
001F2D 7B01              MOV     R3,#01H
001F2F 7A4C              MOV     R2,#HIGH btCmdBuf
001F31 7963              MOV     R1,#LOW btCmdBuf
001F33 1227F2            LCALL   _BT_CmdFifoIn
   47: 	YC_Delay10ms(10);
001F36 7F0A              MOV     R7,#0AH
001F38 F184              ACALL   _YC_Delay10ms
   48: }
001F3A         ?C0006?LXPROTOCOL:
001F3A 22                RET     
----- FUNCTION _lxSendRecvDataACK (END) -------


----- FUNCTION _SpiFlashOperator (BEGIN) -----
 FILE: 'lxProtocol.c'
  469: void SpiFlashOperator(u8_t opt)
  470: {
001F3B 904E5E            MOV     DPTR,#opt
001F3E EF                MOV     A,R7
001F3F F0                MOVX    @DPTR,A
  471: #if 1
  472: 	if(CS_CMD_READ_FLASH == opt)
001F40 BF4017            CJNE    R7,#040H,?C0083?LXPROTOCOL
  473: 	{
  474: 		SPIFlashRead(mem_spiflash_buf, SPIFLASH_DATA_ADDR, SPIFLASH_READ_LENGTH);
001F43 7B01              MOV     R3,#01H
001F45 7A4C              MOV     R2,#04CH
001F47 7900              MOV     R1,#00H
001F49 904DEC            MOV     DPTR,#?_SPIFlashRead?BYTE+07H
001F4C 744C              MOV     A,#04CH
001F4E F0                MOVX    @DPTR,A
001F4F 7F00              MOV     R7,#00H
001F51 7EA0              MOV     R6,#0A0H
001F53 7D00              MOV     R5,#00H
001F55 7C00              MOV     R4,#00H
001F57 0223D3            LJMP    _SPIFlashRead
  475: 	}
001F5A         ?C0083?LXPROTOCOL:
  476: 	else if(CS_CMD_WRITE_FLASH == opt)
001F5A 904E5E            MOV     DPTR,#opt
001F5D E0                MOVX    A,@DPTR
001F5E B44122            CJNE    A,#041H,?C0086?LXPROTOCOL
  477: 	{
  478: 		SPIFlashEraseSector(SPIFLASH_DATA_ADDR);
001F61 7F00              MOV     R7,#00H
001F63 7EA0              MOV     R6,#0A0H
001F65 7D00              MOV     R5,#00H
001F67 7C00              MOV     R4,#00H
001F69 122258            LCALL   _SPIFlashEraseSector
  479: 		SPIFlashWrite(mem_spiflash_buf, SPIFLASH_DATA_ADDR, SPIFLASH_READ_LENGTH);
001F6C 7B01              MOV     R3,#01H
001F6E 7A4C              MOV     R2,#04CH
001F70 7900              MOV     R1,#00H
001F72 904DE4            MOV     DPTR,#?_SPIFlashWrite?BYTE+07H
001F75 744C              MOV     A,#04CH
001F77 F0                MOVX    @DPTR,A
001F78 7F00              MOV     R7,#00H
001F7A 7EA0              MOV     R6,#0A0H
001F7C 7D00              MOV     R5,#00H
001F7E 7C00              MOV     R4,#00H
001F80 1222CE            LCALL   _SPIFlashWrite
  480: 	}
  481: #else
  482: 	btCmdBuf.len = 1;
  483: 	btCmdBuf.DATA[0] = opt;
  484: 	BT_CmdFifoIn(&btCmdBuf);
  485: 	YC_Delay10ms(10);
  486: #endif
  487: }
001F83         ?C0086?LXPROTOCOL:
001F83 22                RET     
----- FUNCTION _SpiFlashOperator (END) -------


----- FUNCTION _YC_Delay10ms (BEGIN) -----
 FILE: 'YC_Utilities.c'
   60: void YC_Delay10ms(u8_t Time)
   61: {
;---- Variable 'Time' assigned to Register 'R7' ----
   62: 	u16_t j; 
   63: 	for(;Time>0;Time--)
001F84         ?C0027?YC_UTILITIES:
001F84 EF                MOV     A,R7
001F85 D3                SETB    C
001F86 9400              SUBB    A,#00H
001F88 4011              JC      ?C0033?YC_UTILITIES
   64: 	{
   65: 		for(j=0;j<11900;j++);
;---- Variable 'j' assigned to Register 'R4/R5' ----
001F8A E4                CLR     A
001F8B FD                MOV     R5,A
001F8C FC                MOV     R4,A
001F8D         ?C0030?YC_UTILITIES:
001F8D 0D                INC     R5
001F8E BD0001            CJNE    R5,#00H,?C0054?YC_UTILITIES
001F91 0C                INC     R4
001F92         ?C0054?YC_UTILITIES:
001F92 BC2EF8            CJNE    R4,#02EH,?C0030?YC_UTILITIES
001F95 BD7CF5            CJNE    R5,#07CH,?C0030?YC_UTILITIES
   66: 	}
001F98         ?C0029?YC_UTILITIES:
001F98 1F                DEC     R7
001F99 80E9              SJMP    ?C0027?YC_UTILITIES
   67: }
001F9B         ?C0033?YC_UTILITIES:
001F9B 22                RET     
----- FUNCTION _YC_Delay10ms (END) -------


----- FUNCTION _xmemset (BEGIN) -----
 FILE: 'YC_Utilities.c'
   10: void xmemset(pxbyte addr, u8_t value, u8_t len) small
   11: {
001F9C 8E1D              MOV     addr,R6
001F9E 8F1E              MOV     addr+01H,R7
;---- Variable 'len' assigned to Register 'R3' ----
;---- Variable 'value' assigned to Register 'R5' ----
001FA0         ?C0002?YC_UTILITIES:
   12: 	while(len--)
001FA0 AF03              MOV     R7,AR3
001FA2 1B                DEC     R3
001FA3 EF                MOV     A,R7
001FA4 6013              JZ      ?C0004?YC_UTILITIES
   13: 		*addr++ = value;
001FA6 051E              INC     addr+01H
001FA8 E51E              MOV     A,addr+01H
001FAA AE1D              MOV     R6,addr
001FAC 7002              JNZ     ?C0044?YC_UTILITIES
001FAE 051D              INC     addr
001FB0         ?C0044?YC_UTILITIES:
001FB0 14                DEC     A
001FB1 F582              MOV     DPL,A
001FB3 8E83              MOV     DPH,R6
001FB5 ED                MOV     A,R5
001FB6 F0                MOVX    @DPTR,A
001FB7 80E7              SJMP    ?C0002?YC_UTILITIES
   14: 	return;
   15: }
001FB9         ?C0004?YC_UTILITIES:
001FB9 22                RET     
----- FUNCTION _xmemset (END) -------


----- FUNCTION delUserData (BEGIN) -----
 FILE: 'lxProtocol.c'
  370: static void delUserData(void)
  371: {
  372: 	//(mem_register_buf) = DEVICE_UNREGISTERED;
  373: 	//*(mem_le_adv_data + 13) = *(mem_register_buf);
  374: 	xmemset((u8_t *)&deviceInfo, 0, sizeof(DeviceInfo_t));
001FBA 7E4C              MOV     R6,#HIGH deviceInfo
001FBC 7F06              MOV     R7,#LOW deviceInfo
001FBE 7B0A              MOV     R3,#0AH
001FC0 E4                CLR     A
001FC1 FD                MOV     R5,A
001FC2 F19C              ACALL   _xmemset
  375: 	QueueInit();
001FC4 1217E5            LCALL   QueueInit
  376: 	*(mem_le_adv_data + 13) = DEVICE_UNREGISTERED;
001FC7 9043E7            MOV     DPTR,#043E7H
001FCA E4                CLR     A
001FCB F0                MOVX    @DPTR,A
  377: 	UTCTime = 0;
001FCC 904C5E            MOV     DPTR,#UTCTime
001FCF 12033E            LCALL   ?C?LSTKXDATA
001FD2 00                DB      00H
001FD3 00                DB      00H
001FD4 00                DB      00H
001FD5 00                DB      00H
  378: 	SpiFlashOperator(CS_CMD_WRITE_FLASH);
001FD6 7F41              MOV     R7,#041H
001FD8 E13B              AJMP    _SpiFlashOperator
  379: }
----- FUNCTION delUserData (END) -------


----- FUNCTION BTControlProcess (BEGIN) -----
 FILE: 'system.c'
  124: void BTControlProcess(void)
  125: {
  126: 	BT_EVENTFIFO_t event;
  127: 	//normal process
  128: 	BT_EventFifoOut(&event);
001FDA 7B01              MOV     R3,#01H
001FDC 7A4D              MOV     R2,#HIGH event
001FDE 7969              MOV     R1,#LOW event
001FE0 12297E            LCALL   _BT_EventFifoOut
  129: 	if(event.len != 0)
001FE3 904D69            MOV     DPTR,#event
001FE6 E0                MOVX    A,@DPTR
001FE7 6076              JZ      ?C0028?SYSTEM
  130: 	{
  131: 		//YC_UARTSendData(event.DATA, event.len);
  132: 		switch(event.DATA[0]) {
001FE9 A3                INC     DPTR
001FEA E0                MOVX    A,@DPTR
001FEB 24EE              ADD     A,#0EEH
001FED 601C              JZ      ?C0019?SYSTEM
001FEF 14                DEC     A
001FF0 6024              JZ      ?C0020?SYSTEM
001FF2 14                DEC     A
001FF3 602A              JZ      ?C0021?SYSTEM
001FF5 24FC              ADD     A,#0FCH
001FF7 6060              JZ      ?C0027?SYSTEM
001FF9 2407              ADD     A,#07H
001FFB 7062              JNZ     ?C0028?SYSTEM
  133: 			case CS_NOTIFY_POWERON:
  134: 				break;
  135: 			case CS_NOTIFY_DISC:		//bluetooth disconnect
001FFD         ?C0018?SYSTEM:
  136: 				notifyValueUUIDA621 = NOTIFY_INDICATE_DISABLE;
001FFD E4                CLR     A
001FFE 904C59            MOV     DPTR,#notifyValueUUIDA621
002001 F0                MOVX    @DPTR,A
  137: 				notifyValueUUIDA625 = NOTIFY_INDICATE_DISABLE;
002002 904C5A            MOV     DPTR,#notifyValueUUIDA625
002005 F0                MOVX    @DPTR,A
  138: 				bleConnStatus= BLE_STATUS_DISCONN;
002006 904C5B            MOV     DPTR,#bleConnStatus
002009 F0                MOVX    @DPTR,A
  139: 				break;
00200A 22                RET     
  140: 			case CS_NOTIFY_CONN:	//bluetooth connected
00200B         ?C0019?SYSTEM:
  141: 				lxOptStatus = OPT_IDLE;
00200B E4                CLR     A
00200C 904C5C            MOV     DPTR,#lxOptStatus
00200F F0                MOVX    @DPTR,A
  142: 				bleConnStatus= BLE_STATUS_CONN;
002010 904C5B            MOV     DPTR,#bleConnStatus
002013 04                INC     A
002014 F0                MOVX    @DPTR,A
  143: 				break;
002015 22                RET     
  144: 			case CS_NOTIFY_DATA:	//receive data
002016         ?C0020?SYSTEM:
  145: 				lxRecvDataFromApp(&event);
002016 7B01              MOV     R3,#01H
002018 7A4D              MOV     R2,#HIGH event
00201A 7969              MOV     R1,#LOW event
00201C 021DBD            LJMP    _lxRecvDataFromApp
  146: 				break; 
  147: 			case CS_NOTIFY_OPENHANDLE:
00201F         ?C0021?SYSTEM:
  148: 				if(event.DATA[1] == HANDLE_UUIDA621_NOTIFY)
00201F 904D6B            MOV     DPTR,#event+02H
002022 E0                MOVX    A,@DPTR
002023 FF                MOV     R7,A
002024 B41C0A            CJNE    A,#01CH,?C0022?SYSTEM
  149: 				{
  150: 					notifyValueUUIDA621 = event.DATA[3];
002027 904D6D            MOV     DPTR,#event+04H
00202A E0                MOVX    A,@DPTR
00202B 904C59            MOV     DPTR,#notifyValueUUIDA621
00202E F0                MOVX    @DPTR,A
  151: 				}
00202F 800C              SJMP    ?C0023?SYSTEM
002031         ?C0022?SYSTEM:
  152: 				else if(event.DATA[1] == HANDLE_UUIDA625_NOTIFY)
002031 EF                MOV     A,R7
002032 B42508            CJNE    A,#025H,?C0023?SYSTEM
  153: 				{
  154: 					notifyValueUUIDA625 = event.DATA[3];
002035 904D6D            MOV     DPTR,#event+04H
002038 E0                MOVX    A,@DPTR
002039 904C5A            MOV     DPTR,#notifyValueUUIDA625
00203C F0                MOVX    @DPTR,A
  155: 				}
00203D         ?C0023?SYSTEM:
  156: 
  157: 				if(*mem_register_buf == DEVICE_REGISTERED &&
00203D 904C0E            MOV     DPTR,#04C0EH
002040 E0                MOVX    A,@DPTR
002041 B4011B            CJNE    A,#01H,?C0028?SYSTEM
002044 904C59            MOV     DPTR,#notifyValueUUIDA621
002047 E0                MOVX    A,@DPTR
002048 B40114            CJNE    A,#01H,?C0028?SYSTEM
00204B 904C5A            MOV     DPTR,#notifyValueUUIDA625
00204E E0                MOVX    A,@DPTR
00204F B4010D            CJNE    A,#01H,?C0028?SYSTEM
  158: 					notifyValueUUIDA621 == NOTIFY_ENABLE &&
  159: 					notifyValueUUIDA625 == NOTIFY_ENABLE)
  160: 				{
  161: 					lxOptStatus = OPT_LOGIN_REQ;
002052 904C5C            MOV     DPTR,#lxOptStatus
002055 7416              MOV     A,#016H
002057 F0                MOVX    @DPTR,A
  162: 				}
  163: 				break;
002058 22                RET     
  164: 			case CS_NOTIFY_READ_REQ:
  165: 				break;
  166: 			case CS_NOTIFY_INDICATE_CONFIRM:
002059         ?C0027?SYSTEM:
  167: 				handleIndicationConfirm = 1;
002059 904C5D            MOV     DPTR,#handleIndicationConfirm
00205C 7401              MOV     A,#01H
00205E F0                MOVX    @DPTR,A
  168: 				break;
  169: 		}
  170: 	}
  171: }
00205F         ?C0028?SYSTEM:
00205F 22                RET     
----- FUNCTION BTControlProcess (END) -------


----- FUNCTION _YC_UtilTimerStop (BEGIN) -----
 FILE: 'YC_Sys.c'
   66: bool YC_UtilTimerStop( u8_t timer_id) large
   67: {
;---- Variable 'timer_id' assigned to Register 'R4' ----
002060 AC07              MOV     R4,AR7
   68: 	if((timer_id > 8) ||!((YC_UtilTimer.timer_flages >> timer_id) & 1))
002062 EF                MOV     A,R7
002063 D3                SETB    C
002064 9408              SUBB    A,#08H
002066 5011              JNC     ?C0012?YC_SYS
002068 904CDB            MOV     DPTR,#YC_UtilTimer
00206B E0                MOVX    A,@DPTR
00206C FE                MOV     R6,A
00206D A807              MOV     R0,AR7
00206F 08                INC     R0
002070 8002              SJMP    ?C0026?YC_SYS
002072         ?C0025?YC_SYS:
002072 C3                CLR     C
002073 13                RRC     A
002074         ?C0026?YC_SYS:
002074 D8FC              DJNZ    R0,?C0025?YC_SYS
002076 20E002            JB      ACC.0,?C0011?YC_SYS
002079         ?C0012?YC_SYS:
   69: 		return false;
002079 C3                CLR     C
00207A 22                RET     
00207B         ?C0011?YC_SYS:
   70: 	YC_UtilTimer.timer_flages &= ~( 1<< timer_id);
00207B AF04              MOV     R7,AR4
00207D 7401              MOV     A,#01H
00207F A807              MOV     R0,AR7
002081 08                INC     R0
002082 8002              SJMP    ?C0028?YC_SYS
002084         ?C0027?YC_SYS:
002084 C3                CLR     C
002085 33                RLC     A
002086         ?C0028?YC_SYS:
002086 D8FC              DJNZ    R0,?C0027?YC_SYS
002088 F4                CPL     A
002089 5E                ANL     A,R6
00208A 904CDB            MOV     DPTR,#YC_UtilTimer
00208D F0                MOVX    @DPTR,A
   71: 	YC_UtilTimer.callback[timer_id] = 0;
00208E EC                MOV     A,R4
00208F 75F003            MOV     B,#03H
002092 A4                MUL     AB
002093 24DC              ADD     A,#LOW YC_UtilTimer+01H
002095 F582              MOV     DPL,A
002097 E4                CLR     A
002098 344C              ADDC    A,#HIGH YC_UtilTimer+01H
00209A F583              MOV     DPH,A
00209C E4                CLR     A
00209D F0                MOVX    @DPTR,A
00209E A3                INC     DPTR
00209F F0                MOVX    @DPTR,A
0020A0 A3                INC     DPTR
0020A1 F0                MOVX    @DPTR,A
   72: 	YC_UtilTimer.timer_end[timer_id] = 0;
0020A2 EC                MOV     A,R4
0020A3 25E0              ADD     A,ACC
0020A5 25E0              ADD     A,ACC
0020A7 24F4              ADD     A,#LOW YC_UtilTimer+019H
0020A9 F582              MOV     DPL,A
0020AB E4                CLR     A
0020AC 344C              ADDC    A,#HIGH YC_UtilTimer+019H
0020AE F583              MOV     DPH,A
0020B0 12033E            LCALL   ?C?LSTKXDATA
0020B3 00                DB      00H
0020B4 00                DB      00H
0020B5 00                DB      00H
0020B6 00                DB      00H
   73: 	return true;
0020B7 D3                SETB    C
   74: }
0020B8 22                RET     
----- FUNCTION _YC_UtilTimerStop (END) -------


----- FUNCTION YC_UtilTimerProcess (BEGIN) -----
 FILE: 'YC_Sys.c'
   76: void YC_UtilTimerProcess(void) small
   77: {
   78: 	u8_t i;
   79: #if 0
   80: 	if(YC_UtilTimer.last_timer > (YC_CLK_N + 0x1000)){
   81: 		for(i = 0; i < YC_UTIL_TIMER_NUM; ++i){
   82: 			if((YC_UtilTimer.timer_flages >> i) & 1){
   83: 				YC_UtilTimer.timer_end[i] -= YC_UtilTimer.last_timer;
   84: 			}
   85: 		}
   86: 	}
   87: 	YC_UtilTimer.last_timer = YC_CLK_N;
   88: 	for(i = 0; i < YC_UTIL_TIMER_NUM; ++i){
   89: 		if((YC_UtilTimer.timer_flages >> i) & 1){
   90: 			if(YC_UtilTimer.timer_end[i] < YC_CLK_N){
   91: 				YC_UtilTimer.timer_flages &=~( 1<< i); // clear the flag
   92: 				YC_UtilTimer.callback[i](i);			
   93: 			}
   94: 		}
   95: 	}
   96: #else
   97: 	YC_UtilTimer.last_timer = YC_CLK_N;
0020B9 908101            MOV     DPTR,#08101H
0020BC E0                MOVX    A,@DPTR
0020BD FF                MOV     R7,A
0020BE E4                CLR     A
0020BF FC                MOV     R4,A
0020C0 FD                MOV     R5,A
0020C1 FE                MOV     R6,A
0020C2 7808              MOV     R0,#08H
0020C4 12031F            LCALL   ?C?LSHL
0020C7 A804              MOV     R0,AR4
0020C9 A905              MOV     R1,AR5
0020CB AA06              MOV     R2,AR6
0020CD AB07              MOV     R3,AR7
0020CF 908100            MOV     DPTR,#08100H
0020D2 E0                MOVX    A,@DPTR
0020D3 FF                MOV     R7,A
0020D4 E4                CLR     A
0020D5 EB                MOV     A,R3
0020D6 4F                ORL     A,R7
0020D7 FF                MOV     R7,A
0020D8 EA                MOV     A,R2
0020D9 FE                MOV     R6,A
0020DA E9                MOV     A,R1
0020DB FD                MOV     R5,A
0020DC E8                MOV     A,R0
0020DD FC                MOV     R4,A
0020DE C004              PUSH    AR4
0020E0 C005              PUSH    AR5
0020E2 C006              PUSH    AR6
0020E4 C007              PUSH    AR7
0020E6 908102            MOV     DPTR,#08102H
0020E9 E0                MOVX    A,@DPTR
0020EA FF                MOV     R7,A
0020EB E4                CLR     A
0020EC FC                MOV     R4,A
0020ED FD                MOV     R5,A
0020EE FE                MOV     R6,A
0020EF 7810              MOV     R0,#010H
0020F1 12031F            LCALL   ?C?LSHL
0020F4 D003              POP     AR3
0020F6 D002              POP     AR2
0020F8 D001              POP     AR1
0020FA D000              POP     AR0
0020FC EF                MOV     A,R7
0020FD 4B                ORL     A,R3
0020FE FF                MOV     R7,A
0020FF EE                MOV     A,R6
002100 4A                ORL     A,R2
002101 FE                MOV     R6,A
002102 ED                MOV     A,R5
002103 49                ORL     A,R1
002104 FD                MOV     R5,A
002105 EC                MOV     A,R4
002106 48                ORL     A,R0
002107 FC                MOV     R4,A
002108 C004              PUSH    AR4
00210A C005              PUSH    AR5
00210C C006              PUSH    AR6
00210E C007              PUSH    AR7
002110 A3                INC     DPTR
002111 E0                MOVX    A,@DPTR
002112 FF                MOV     R7,A
002113 E4                CLR     A
002114 FC                MOV     R4,A
002115 FD                MOV     R5,A
002116 FE                MOV     R6,A
002117 7818              MOV     R0,#018H
002119 12031F            LCALL   ?C?LSHL
00211C D003              POP     AR3
00211E D002              POP     AR2
002120 D001              POP     AR1
002122 D000              POP     AR0
002124 EF                MOV     A,R7
002125 4B                ORL     A,R3
002126 FF                MOV     R7,A
002127 EE                MOV     A,R6
002128 4A                ORL     A,R2
002129 FE                MOV     R6,A
00212A ED                MOV     A,R5
00212B 49                ORL     A,R1
00212C FD                MOV     R5,A
00212D EC                MOV     A,R4
00212E 48                ORL     A,R0
00212F FC                MOV     R4,A
002130 904D14            MOV     DPTR,#YC_UtilTimer+039H
002133 120332            LCALL   ?C?LSTXDATA
   98: 	for(i = 0; i < YC_UTIL_TIMER_NUM; ++i){
002136 E4                CLR     A
002137 F51F              MOV     i,A
002139         ?C0014?YC_SYS:
   99: 		if((YC_UtilTimer.timer_flages >> i) & 1){
002139 AF1F              MOV     R7,i
00213B 904CDB            MOV     DPTR,#YC_UtilTimer
00213E E0                MOVX    A,@DPTR
00213F FE                MOV     R6,A
002140 A807              MOV     R0,AR7
002142 08                INC     R0
002143 8002              SJMP    ?C0030?YC_SYS
002145         ?C0029?YC_SYS:
002145 C3                CLR     C
002146 13                RRC     A
002147         ?C0030?YC_SYS:
002147 D8FC              DJNZ    R0,?C0029?YC_SYS
002149 20E002            JB      ACC.0,$ + 5H
00214C 21F0              AJMP    ?C0016?YC_SYS
  100: 			if((YC_UtilTimer.timer_end[i] < YC_UtilTimer.last_timer) || 
00214E E51F              MOV     A,i
002150 25E0              ADD     A,ACC
002152 25E0              ADD     A,ACC
002154 24F4              ADD     A,#LOW YC_UtilTimer+019H
002156 F582              MOV     DPL,A
002158 E4                CLR     A
002159 344C              ADDC    A,#HIGH YC_UtilTimer+019H
00215B F583              MOV     DPH,A
00215D E0                MOVX    A,@DPTR
00215E FC                MOV     R4,A
00215F A3                INC     DPTR
002160 E0                MOVX    A,@DPTR
002161 FD                MOV     R5,A
002162 A3                INC     DPTR
002163 E0                MOVX    A,@DPTR
002164 FE                MOV     R6,A
002165 A3                INC     DPTR
002166 E0                MOVX    A,@DPTR
002167 FF                MOV     R7,A
002168 904D14            MOV     DPTR,#YC_UtilTimer+039H
00216B E0                MOVX    A,@DPTR
00216C F8                MOV     R0,A
00216D A3                INC     DPTR
00216E E0                MOVX    A,@DPTR
00216F F9                MOV     R1,A
002170 A3                INC     DPTR
002171 E0                MOVX    A,@DPTR
002172 FA                MOV     R2,A
002173 A3                INC     DPTR
002174 E0                MOVX    A,@DPTR
002175 FB                MOV     R3,A
002176 D3                SETB    C
002177 1202FB            LCALL   ?C?ULCMP
00217A 503E              JNC     ?C0019?YC_SYS
00217C E51F              MOV     A,i
00217E 25E0              ADD     A,ACC
002180 25E0              ADD     A,ACC
002182 24F4              ADD     A,#LOW YC_UtilTimer+019H
002184 F582              MOV     DPL,A
002186 E4                CLR     A
002187 344C              ADDC    A,#HIGH YC_UtilTimer+019H
002189 F583              MOV     DPH,A
00218B E0                MOVX    A,@DPTR
00218C FC                MOV     R4,A
00218D A3                INC     DPTR
00218E E0                MOVX    A,@DPTR
00218F FD                MOV     R5,A
002190 A3                INC     DPTR
002191 E0                MOVX    A,@DPTR
002192 FE                MOV     R6,A
002193 A3                INC     DPTR
002194 E0                MOVX    A,@DPTR
002195 FF                MOV     R7,A
002196 904D14            MOV     DPTR,#YC_UtilTimer+039H
002199 E0                MOVX    A,@DPTR
00219A F8                MOV     R0,A
00219B A3                INC     DPTR
00219C E0                MOVX    A,@DPTR
00219D A3                INC     DPTR
00219E E0                MOVX    A,@DPTR
00219F A3                INC     DPTR
0021A0 E0                MOVX    A,@DPTR
0021A1 C3                CLR     C
0021A2 EF                MOV     A,R7
0021A3 9B                SUBB    A,R3
0021A4 FF                MOV     R7,A
0021A5 EE                MOV     A,R6
0021A6 9A                SUBB    A,R2
0021A7 FE                MOV     R6,A
0021A8 ED                MOV     A,R5
0021A9 99                SUBB    A,R1
0021AA FD                MOV     R5,A
0021AB EC                MOV     A,R4
0021AC 98                SUBB    A,R0
0021AD FC                MOV     R4,A
0021AE E4                CLR     A
0021AF FB                MOV     R3,A
0021B0 7A10              MOV     R2,#010H
0021B2 F9                MOV     R1,A
0021B3 F8                MOV     R0,A
0021B4 C3                CLR     C
0021B5 1202FB            LCALL   ?C?ULCMP
0021B8 5036              JNC     ?C0016?YC_SYS
0021BA         ?C0019?YC_SYS:
  101: 			   (YC_UtilTimer.timer_end[i]  - YC_UtilTimer.last_timer > 0x1000)){
  102: 				YC_UtilTimer.timer_flages &=~( 1<< i); // clear the flag
0021BA 904CDB            MOV     DPTR,#YC_UtilTimer
0021BD E0                MOVX    A,@DPTR
0021BE FF                MOV     R7,A
0021BF AE1F              MOV     R6,i
0021C1 7401              MOV     A,#01H
0021C3 A806              MOV     R0,AR6
0021C5 08                INC     R0
0021C6 8002              SJMP    ?C0032?YC_SYS
0021C8         ?C0031?YC_SYS:
0021C8 C3                CLR     C
0021C9 33                RLC     A
0021CA         ?C0032?YC_SYS:
0021CA D8FC              DJNZ    R0,?C0031?YC_SYS
0021CC F4                CPL     A
0021CD 5F                ANL     A,R7
0021CE 904CDB            MOV     DPTR,#YC_UtilTimer
0021D1 F0                MOVX    @DPTR,A
  103: 				YC_UtilTimer.callback[i](i);			
0021D2 E51F              MOV     A,i
0021D4 75F003            MOV     B,#03H
0021D7 A4                MUL     AB
0021D8 24DC              ADD     A,#LOW YC_UtilTimer+01H
0021DA F582              MOV     DPL,A
0021DC E4                CLR     A
0021DD 344C              ADDC    A,#HIGH YC_UtilTimer+01H
0021DF F583              MOV     DPH,A
0021E1 E0                MOVX    A,@DPTR
0021E2 A3                INC     DPTR
0021E3 E0                MOVX    A,@DPTR
0021E4 FA                MOV     R2,A
0021E5 A3                INC     DPTR
0021E6 E0                MOVX    A,@DPTR
0021E7 F582              MOV     DPL,A
0021E9 8A83              MOV     DPH,R2
0021EB AF1F              MOV     R7,i
0021ED 1203C6            LCALL   ?C?ICALL2
  104: 			}
  105: 		}
  106: 	}
0021F0         ?C0016?YC_SYS:
0021F0 051F              INC     i
0021F2 E51F              MOV     A,i
0021F4 C3                CLR     C
0021F5 9408              SUBB    A,#08H
0021F7 5002              JNC     $ + 4H
0021F9 2139              AJMP    ?C0014?YC_SYS
  107: #endif
  108: 	return;
  109: }
0021FB 22                RET     
----- FUNCTION YC_UtilTimerProcess (END) -------


----- FUNCTION SPIFlashReadSR (BEGIN) -----
 FILE: 'spiflash.c'
   21: u8_t SPIFlashReadSR(void)
   22: {
   23: 	u8_t status;
   24: 	status = 0xff;
0021FC 904E59            MOV     DPTR,#status
0021FF 74FF              MOV     A,#0FFH
002201 F0                MOVX    @DPTR,A
   25: 	REG_SPID_RXLEN = ESWAP(1);
002202 90808E            MOV     DPTR,#0808EH
002205 7401              MOV     A,#01H
002207 F0                MOVX    @DPTR,A
002208 A3                INC     DPTR
002209 E4                CLR     A
00220A F0                MOVX    @DPTR,A
   26: 	REG_SPID_TXLEN = ESWAP(1);
00220B 908088            MOV     DPTR,#08088H
00220E 04                INC     A
00220F F0                MOVX    @DPTR,A
002210 A3                INC     DPTR
002211 E4                CLR     A
002212 F0                MOVX    @DPTR,A
   27: 	*SF_TX_BUF = SF_READ_STATUS_REG;
002213 9001BC            MOV     DPTR,#01BCH
002216 7405              MOV     A,#05H
002218 F0                MOVX    @DPTR,A
   28: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
002219 90808A            MOV     DPTR,#0808AH
00221C 74BC              MOV     A,#0BCH
00221E F0                MOVX    @DPTR,A
00221F A3                INC     DPTR
002220 7401              MOV     A,#01H
002222 F0                MOVX    @DPTR,A
   29: 	REG_SPID_RXADDR = ESWAP((u16_t)(&status));
002223 7D59              MOV     R5,#LOW status
002225 ED                MOV     A,R5
002226 FA                MOV     R2,A
002227 744E              MOV     A,#HIGH status
002229 FF                MOV     R7,A
00222A EA                MOV     A,R2
00222B FE                MOV     R6,A
00222C EF                MOV     A,R7
00222D A3                INC     DPTR
00222E EE                MOV     A,R6
00222F F0                MOVX    @DPTR,A
002230 A3                INC     DPTR
002231 EF                MOV     A,R7
002232 F0                MOVX    @DPTR,A
   30: 	REG_MISC_CTRL = SPID_START;
002233 908006            MOV     DPTR,#08006H
002236 7402              MOV     A,#02H
002238 F0                MOVX    @DPTR,A
002239         ?C0001?SPIFLASH:
   31: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
002239 90812C            MOV     DPTR,#0812CH
00223C E0                MOVX    A,@DPTR
00223D 30E3F9            JNB     ACC.3,?C0001?SPIFLASH
002240         ?C0002?SPIFLASH:
   32: 	//YC_UARTSendData(&status, 1);
   33: 	return status;
002240 904E59            MOV     DPTR,#status
002243 E0                MOVX    A,@DPTR
002244 FF                MOV     R7,A
   34: }
002245 22                RET     
----- FUNCTION SPIFlashReadSR (END) -------


----- FUNCTION ?L?COM0001 (BEGIN) -----
002246 120332            LCALL   ?C?LSTXDATA
002249 718F              ACALL   SPIFlashWriteEnable
----- FUNCTION SPIFlashWaitBusy (BEGIN) -----
 FILE: 'spiflash.c'
   44: void SPIFlashWaitBusy(void)
   45: {
   46: 	while((SPIFlashReadSR()&0x01) == 0x01) {	//wait for BUSY
00224B         ?C0007?SPIFLASH:
   47: 		YC_Delay1ms(1);
00224B 31FC              ACALL   SPIFlashReadSR
00224D EF                MOV     A,R7
00224E 30E006            JNB     ACC.0,?C0009?SPIFLASH
   48: 	}
002251 7F01              MOV     R7,#01H
002253 71BB              ACALL   _YC_Delay1ms
   49: }
002255 80F4              SJMP    ?C0007?SPIFLASH
   50: void SPIFlashEraseSector(u32_t addr)
002257         ?C0009?SPIFLASH:
002257 22                RET     
----- FUNCTION SPIFlashWaitBusy (END) -------


----- FUNCTION _SPIFlashEraseSector (BEGIN) -----
 FILE: 'spiflash.c'
   50: void SPIFlashEraseSector(u32_t addr)
   51: {
002258 904E2E            MOV     DPTR,#addr
00225B 5146              ACALL   ?L?COM0001
   52: 	SPIFlashWriteEnable();
   53: 	SPIFlashWaitBusy();
   54: 	*(SF_TX_BUF) = SF_SECTOR_ERASE;
00225D 9001BC            MOV     DPTR,#01BCH
002260 7420              MOV     A,#020H
002262 F0                MOVX    @DPTR,A
   55: 	*(SF_TX_BUF+1) = (addr>>16);
002263 904E2E            MOV     DPTR,#addr
002266 E0                MOVX    A,@DPTR
002267 FC                MOV     R4,A
002268 A3                INC     DPTR
002269 E0                MOVX    A,@DPTR
00226A FD                MOV     R5,A
00226B A3                INC     DPTR
00226C E0                MOVX    A,@DPTR
00226D FE                MOV     R6,A
00226E A3                INC     DPTR
00226F E0                MOVX    A,@DPTR
002270 FF                MOV     R7,A
002271 7810              MOV     R0,#010H
002273 12030C            LCALL   ?C?ULSHR
002276 9001BD            MOV     DPTR,#01BDH
002279 EF                MOV     A,R7
00227A F0                MOVX    @DPTR,A
   56: 	*(SF_TX_BUF+2) = (addr>>8);
00227B 904E2E            MOV     DPTR,#addr
00227E E0                MOVX    A,@DPTR
00227F FC                MOV     R4,A
002280 A3                INC     DPTR
002281 E0                MOVX    A,@DPTR
002282 FD                MOV     R5,A
002283 A3                INC     DPTR
002284 E0                MOVX    A,@DPTR
002285 FE                MOV     R6,A
002286 A3                INC     DPTR
002287 E0                MOVX    A,@DPTR
002288 FF                MOV     R7,A
002289 7808              MOV     R0,#08H
00228B 12030C            LCALL   ?C?ULSHR
00228E 9001BE            MOV     DPTR,#01BEH
002291 EF                MOV     A,R7
002292 F0                MOVX    @DPTR,A
   57: 	*(SF_TX_BUF+3) = (addr&0xff);
002293 904E2E            MOV     DPTR,#addr
002296 E0                MOVX    A,@DPTR
002297 FC                MOV     R4,A
002298 A3                INC     DPTR
002299 E0                MOVX    A,@DPTR
00229A FD                MOV     R5,A
00229B A3                INC     DPTR
00229C E0                MOVX    A,@DPTR
00229D FE                MOV     R6,A
00229E A3                INC     DPTR
00229F E0                MOVX    A,@DPTR
0022A0 FF                MOV     R7,A
0022A1 E4                CLR     A
0022A2 9001BF            MOV     DPTR,#01BFH
0022A5 EF                MOV     A,R7
0022A6 F0                MOVX    @DPTR,A
   58: 	REG_SPID_TXLEN = ESWAP(4);
0022A7 908088            MOV     DPTR,#08088H
0022AA 7404              MOV     A,#04H
0022AC F0                MOVX    @DPTR,A
0022AD A3                INC     DPTR
0022AE E4                CLR     A
0022AF F0                MOVX    @DPTR,A
   59: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
0022B0 A3                INC     DPTR
0022B1 74BC              MOV     A,#0BCH
0022B3 F0                MOVX    @DPTR,A
0022B4 A3                INC     DPTR
0022B5 7401              MOV     A,#01H
0022B7 F0                MOVX    @DPTR,A
   60: 	REG_SPID_RXLEN = ESWAP(0);
0022B8 90808E            MOV     DPTR,#0808EH
0022BB E4                CLR     A
0022BC F0                MOVX    @DPTR,A
0022BD A3                INC     DPTR
0022BE F0                MOVX    @DPTR,A
   61: 	REG_MISC_CTRL = SPID_START;
0022BF 908006            MOV     DPTR,#08006H
0022C2 7402              MOV     A,#02H
0022C4 F0                MOVX    @DPTR,A
0022C5         ?C0010?SPIFLASH:
   62: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
0022C5 90812C            MOV     DPTR,#0812CH
0022C8 E0                MOVX    A,@DPTR
0022C9 30E3F9            JNB     ACC.3,?C0010?SPIFLASH
0022CC         ?C0011?SPIFLASH:
   63: 	SPIFlashWaitBusy();
0022CC 414B              AJMP    SPIFlashWaitBusy
   64: }
----- FUNCTION _SPIFlashEraseSector (END) -------


----- FUNCTION _SPIFlashWrite (BEGIN) -----
 FILE: 'spiflash.c'
   65: void SPIFlashWrite(u8_t *buf, u32_t addr, u8_t len)
   66: {
0022CE 904DDD            MOV     DPTR,#buf
0022D1 EB                MOV     A,R3
0022D2 F0                MOVX    @DPTR,A
0022D3 A3                INC     DPTR
0022D4 EA                MOV     A,R2
0022D5 F0                MOVX    @DPTR,A
0022D6 A3                INC     DPTR
0022D7 E9                MOV     A,R1
0022D8 F0                MOVX    @DPTR,A
0022D9 A3                INC     DPTR
0022DA 5146              ACALL   ?L?COM0001
   67: 	u8_t i;
   68: 	SPIFlashWriteEnable();
   69: 	SPIFlashWaitBusy();
   70: 	for(i=0;i<len;i++) {
;---- Variable 'i' assigned to Register 'R7' ----
0022DC E4                CLR     A
0022DD FF                MOV     R7,A
0022DE         ?C0013?SPIFLASH:
0022DE 904DE4            MOV     DPTR,#len
0022E1 E0                MOVX    A,@DPTR
0022E2 FE                MOV     R6,A
0022E3 EF                MOV     A,R7
0022E4 C3                CLR     C
0022E5 9E                SUBB    A,R6
0022E6 5023              JNC     ?C0014?SPIFLASH
   71: 		*(SF_TX_BUF+4+i) = buf[i];
0022E8 904DDD            MOV     DPTR,#buf
0022EB E0                MOVX    A,@DPTR
0022EC FB                MOV     R3,A
0022ED A3                INC     DPTR
0022EE E0                MOVX    A,@DPTR
0022EF FA                MOV     R2,A
0022F0 A3                INC     DPTR
0022F1 E0                MOVX    A,@DPTR
0022F2 F9                MOV     R1,A
0022F3 8F82              MOV     DPL,R7
0022F5 758300            MOV     DPH,#00H
0022F8 120112            LCALL   ?C?CLDOPTR
0022FB FE                MOV     R6,A
0022FC 74C0              MOV     A,#0C0H
0022FE 2F                ADD     A,R7
0022FF F582              MOV     DPL,A
002301 E4                CLR     A
002302 3401              ADDC    A,#01H
002304 F583              MOV     DPH,A
002306 EE                MOV     A,R6
002307 F0                MOVX    @DPTR,A
   72: 	}
002308 0F                INC     R7
002309 80D3              SJMP    ?C0013?SPIFLASH
00230B         ?C0014?SPIFLASH:
   73: 	*(SF_TX_BUF) = SF_PAGE_PROGRAM;
00230B 9001BC            MOV     DPTR,#01BCH
00230E 7402              MOV     A,#02H
002310 F0                MOVX    @DPTR,A
   74: 	*(SF_TX_BUF+1) = (addr>>16);
002311 904DE0            MOV     DPTR,#addr
002314 E0                MOVX    A,@DPTR
002315 FC                MOV     R4,A
002316 A3                INC     DPTR
002317 E0                MOVX    A,@DPTR
002318 FD                MOV     R5,A
002319 A3                INC     DPTR
00231A E0                MOVX    A,@DPTR
00231B FE                MOV     R6,A
00231C A3                INC     DPTR
00231D E0                MOVX    A,@DPTR
00231E FF                MOV     R7,A
00231F 7810              MOV     R0,#010H
002321 12030C            LCALL   ?C?ULSHR
002324 9001BD            MOV     DPTR,#01BDH
002327 EF                MOV     A,R7
002328 F0                MOVX    @DPTR,A
   75: 	*(SF_TX_BUF+2) = (addr>>8);
002329 904DE0            MOV     DPTR,#addr
00232C E0                MOVX    A,@DPTR
00232D FC                MOV     R4,A
00232E A3                INC     DPTR
00232F E0                MOVX    A,@DPTR
002330 FD                MOV     R5,A
002331 A3                INC     DPTR
002332 E0                MOVX    A,@DPTR
002333 FE                MOV     R6,A
002334 A3                INC     DPTR
002335 E0                MOVX    A,@DPTR
002336 FF                MOV     R7,A
002337 7808              MOV     R0,#08H
002339 12030C            LCALL   ?C?ULSHR
00233C 9001BE            MOV     DPTR,#01BEH
00233F EF                MOV     A,R7
002340 F0                MOVX    @DPTR,A
   76: 	*(SF_TX_BUF+3) = (addr&0xff);
002341 904DE0            MOV     DPTR,#addr
002344 E0                MOVX    A,@DPTR
002345 FC                MOV     R4,A
002346 A3                INC     DPTR
002347 E0                MOVX    A,@DPTR
002348 FD                MOV     R5,A
002349 A3                INC     DPTR
00234A E0                MOVX    A,@DPTR
00234B FE                MOV     R6,A
00234C A3                INC     DPTR
00234D E0                MOVX    A,@DPTR
00234E FF                MOV     R7,A
00234F E4                CLR     A
002350 9001BF            MOV     DPTR,#01BFH
002353 EF                MOV     A,R7
002354 F0                MOVX    @DPTR,A
   77: 	REG_SPID_TXLEN = ESWAP(len+4);
002355 904DE4            MOV     DPTR,#len
002358 E0                MOVX    A,@DPTR
002359 2404              ADD     A,#04H
00235B FD                MOV     R5,A
00235C E4                CLR     A
00235D 33                RLC     A
00235E FC                MOV     R4,A
00235F ED                MOV     A,R5
002360 FA                MOV     R2,A
002361 EC                MOV     A,R4
002362 FF                MOV     R7,A
002363 33                RLC     A
002364 95E0              SUBB    A,ACC
002366 EA                MOV     A,R2
002367 FE                MOV     R6,A
002368 EF                MOV     A,R7
002369 908088            MOV     DPTR,#08088H
00236C EE                MOV     A,R6
00236D F0                MOVX    @DPTR,A
00236E A3                INC     DPTR
00236F EF                MOV     A,R7
002370 F0                MOVX    @DPTR,A
   78: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
002371 A3                INC     DPTR
002372 74BC              MOV     A,#0BCH
002374 F0                MOVX    @DPTR,A
002375 A3                INC     DPTR
002376 7401              MOV     A,#01H
002378 F0                MOVX    @DPTR,A
   79: 	REG_SPID_RXLEN = ESWAP(0);
002379 90808E            MOV     DPTR,#0808EH
00237C E4                CLR     A
00237D F0                MOVX    @DPTR,A
00237E A3                INC     DPTR
00237F F0                MOVX    @DPTR,A
   80: 	REG_MISC_CTRL = SPID_START;
002380 908006            MOV     DPTR,#08006H
002383 7402              MOV     A,#02H
002385 F0                MOVX    @DPTR,A
002386         ?C0016?SPIFLASH:
   81: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
002386 90812C            MOV     DPTR,#0812CH
002389 E0                MOVX    A,@DPTR
00238A 30E3F9            JNB     ACC.3,?C0016?SPIFLASH
00238D         ?C0017?SPIFLASH:
   82: 	SPIFlashWaitBusy();
00238D 414B              AJMP    SPIFlashWaitBusy
   83: }
----- FUNCTION _SPIFlashWrite (END) -------


----- FUNCTION SPIFlashWriteEnable (BEGIN) -----
 FILE: 'spiflash.c'
   35: void SPIFlashWriteEnable(void)
   36: {
   37: 	REG_SPID_RXLEN = ESWAP(0);
   38: 	REG_SPID_TXLEN = ESWAP(1);
00238F 90808E            MOV     DPTR,#0808EH
002392 E4                CLR     A
002393 F0                MOVX    @DPTR,A
002394 A3                INC     DPTR
002395 F0                MOVX    @DPTR,A
   39: 	*SF_TX_BUF = SF_WRITE_ENABLE;
002396 908088            MOV     DPTR,#08088H
002399 04                INC     A
00239A F0                MOVX    @DPTR,A
00239B A3                INC     DPTR
00239C E4                CLR     A
00239D F0                MOVX    @DPTR,A
   40: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
00239E 9001BC            MOV     DPTR,#01BCH
0023A1 7406              MOV     A,#06H
0023A3 F0                MOVX    @DPTR,A
   41: 	REG_MISC_CTRL = SPID_START;
0023A4 90808A            MOV     DPTR,#0808AH
0023A7 74BC              MOV     A,#0BCH
0023A9 F0                MOVX    @DPTR,A
0023AA A3                INC     DPTR
0023AB 7401              MOV     A,#01H
0023AD F0                MOVX    @DPTR,A
   42: 	while((REG_DMA_STATUS&(1<<3)) == 0);
0023AE 908006            MOV     DPTR,#08006H
0023B1 04                INC     A
0023B2 F0                MOVX    @DPTR,A
0023B3         ?C0004?SPIFLASH:
   43: }
0023B3 90812C            MOV     DPTR,#0812CH
0023B6 E0                MOVX    A,@DPTR
0023B7 30E3F9            JNB     ACC.3,?C0004?SPIFLASH
   44: void SPIFlashWaitBusy(void)
0023BA 22                RET     
----- FUNCTION SPIFlashWriteEnable (END) -------


----- FUNCTION _YC_Delay1ms (BEGIN) -----
 FILE: 'YC_Utilities.c'
   51: void YC_Delay1ms(u8_t Time)
   52: {
;---- Variable 'Time' assigned to Register 'R7' ----
   53: 	u16_t j; 
   54: 	for(;Time>0;Time--)
0023BB         ?C0020?YC_UTILITIES:
0023BB EF                MOV     A,R7
0023BC D3                SETB    C
0023BD 9400              SUBB    A,#00H
0023BF 4011              JC      ?C0026?YC_UTILITIES
   55: 	{
   56: 		for(j=0;j<1160;j++);
;---- Variable 'j' assigned to Register 'R4/R5' ----
0023C1 E4                CLR     A
0023C2 FD                MOV     R5,A
0023C3 FC                MOV     R4,A
0023C4         ?C0023?YC_UTILITIES:
0023C4 0D                INC     R5
0023C5 BD0001            CJNE    R5,#00H,?C0053?YC_UTILITIES
0023C8 0C                INC     R4
0023C9         ?C0053?YC_UTILITIES:
0023C9 BC04F8            CJNE    R4,#04H,?C0023?YC_UTILITIES
0023CC BD88F5            CJNE    R5,#088H,?C0023?YC_UTILITIES
   57: 	}
0023CF         ?C0022?YC_UTILITIES:
0023CF 1F                DEC     R7
0023D0 80E9              SJMP    ?C0020?YC_UTILITIES
   58: }
0023D2         ?C0026?YC_UTILITIES:
0023D2 22                RET     
----- FUNCTION _YC_Delay1ms (END) -------


----- FUNCTION _SPIFlashRead (BEGIN) -----
 FILE: 'spiflash.c'
   84: void SPIFlashRead(u8_t *buf, u32_t addr, u8_t len)
   85: {
0023D3 904DE8            MOV     DPTR,#addr
0023D6 120332            LCALL   ?C?LSTXDATA
;---- Variable 'buf' assigned to Register 'R1/R2/R3' ----
   86: 	REG_SPID_RXLEN = ESWAP(len);
   87: 	REG_SPID_TXLEN = ESWAP(4);
0023D9 904DEC            MOV     DPTR,#len
0023DC E0                MOVX    A,@DPTR
0023DD FD                MOV     R5,A
0023DE FE                MOV     R6,A
0023DF E4                CLR     A
0023E0 90808E            MOV     DPTR,#0808EH
0023E3 EE                MOV     A,R6
0023E4 F0                MOVX    @DPTR,A
0023E5 A3                INC     DPTR
0023E6 E4                CLR     A
0023E7 F0                MOVX    @DPTR,A
   88: 	*SF_TX_BUF = SF_READ_DATA;
0023E8 908088            MOV     DPTR,#08088H
0023EB 7404              MOV     A,#04H
0023ED F0                MOVX    @DPTR,A
0023EE A3                INC     DPTR
0023EF E4                CLR     A
0023F0 F0                MOVX    @DPTR,A
   89: 	*(SF_TX_BUF+1) = (addr>>16);
0023F1 9001BC            MOV     DPTR,#01BCH
0023F4 7403              MOV     A,#03H
0023F6 F0                MOVX    @DPTR,A
   90: 	*(SF_TX_BUF+2) = (addr>>8);
0023F7 904DE8            MOV     DPTR,#addr
0023FA E0                MOVX    A,@DPTR
0023FB FC                MOV     R4,A
0023FC A3                INC     DPTR
0023FD E0                MOVX    A,@DPTR
0023FE FD                MOV     R5,A
0023FF A3                INC     DPTR
002400 E0                MOVX    A,@DPTR
002401 FE                MOV     R6,A
002402 A3                INC     DPTR
002403 E0                MOVX    A,@DPTR
002404 FF                MOV     R7,A
002405 7810              MOV     R0,#010H
002407 12030C            LCALL   ?C?ULSHR
00240A 9001BD            MOV     DPTR,#01BDH
00240D EF                MOV     A,R7
00240E F0                MOVX    @DPTR,A
   91: 	*(SF_TX_BUF+3) = (addr&0xff);
00240F 904DE8            MOV     DPTR,#addr
002412 E0                MOVX    A,@DPTR
002413 FC                MOV     R4,A
002414 A3                INC     DPTR
002415 E0                MOVX    A,@DPTR
002416 FD                MOV     R5,A
002417 A3                INC     DPTR
002418 E0                MOVX    A,@DPTR
002419 FE                MOV     R6,A
00241A A3                INC     DPTR
00241B E0                MOVX    A,@DPTR
00241C FF                MOV     R7,A
00241D 7808              MOV     R0,#08H
00241F 12030C            LCALL   ?C?ULSHR
002422 9001BE            MOV     DPTR,#01BEH
002425 EF                MOV     A,R7
002426 F0                MOVX    @DPTR,A
   92: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
002427 904DE8            MOV     DPTR,#addr
00242A E0                MOVX    A,@DPTR
00242B FC                MOV     R4,A
00242C A3                INC     DPTR
00242D E0                MOVX    A,@DPTR
00242E FD                MOV     R5,A
00242F A3                INC     DPTR
002430 E0                MOVX    A,@DPTR
002431 FE                MOV     R6,A
002432 A3                INC     DPTR
002433 E0                MOVX    A,@DPTR
002434 FF                MOV     R7,A
002435 E4                CLR     A
002436 9001BF            MOV     DPTR,#01BFH
002439 EF                MOV     A,R7
00243A F0                MOVX    @DPTR,A
   93: 	REG_SPID_RXADDR = ESWAP((u16_t)buf);
00243B 90808A            MOV     DPTR,#0808AH
00243E 74BC              MOV     A,#0BCH
002440 F0                MOVX    @DPTR,A
002441 A3                INC     DPTR
002442 7401              MOV     A,#01H
002444 F0                MOVX    @DPTR,A
   94: 	REG_SPID_CTRL  |=  (1<<6);
002445 E9                MOV     A,R1
002446 FC                MOV     R4,A
002447 EA                MOV     A,R2
002448 FF                MOV     R7,A
002449 EC                MOV     A,R4
00244A FE                MOV     R6,A
00244B EF                MOV     A,R7
00244C A3                INC     DPTR
00244D EE                MOV     A,R6
00244E F0                MOVX    @DPTR,A
00244F A3                INC     DPTR
002450 EF                MOV     A,R7
002451 F0                MOVX    @DPTR,A
   95: 	REG_MISC_CTRL = SPID_START;
002452 908086            MOV     DPTR,#08086H
002455 E0                MOVX    A,@DPTR
002456 4440              ORL     A,#040H
002458 F0                MOVX    @DPTR,A
   96: 	//spi_read_flash_wait
002459 908006            MOV     DPTR,#08006H
00245C 7402              MOV     A,#02H
00245E F0                MOVX    @DPTR,A
00245F         ?C0019?SPIFLASH:
   97: 	while(REG_DMA_STATUS&(1<<7));	//waiting for spid write
00245F 90812C            MOV     DPTR,#0812CH
002462 E0                MOVX    A,@DPTR
002463 20E7F9            JB      ACC.7,?C0019?SPIFLASH
002466         ?C0020?SPIFLASH:
002466         ?C0021?SPIFLASH:
   98: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
002466 90812C            MOV     DPTR,#0812CH
002469 E0                MOVX    A,@DPTR
00246A 30E3F9            JNB     ACC.3,?C0021?SPIFLASH
   99: 	return;
  100: }
00246D 22                RET     
----- FUNCTION _SPIFlashRead (END) -------


----- FUNCTION _cal_crc32_multiple (BEGIN) -----
 FILE: 'Crc32.c'
   80: u32_t cal_crc32_multiple(u32_t crc, u8_t *buffer, u32_t size)
   81: {
00246E 904D91            MOV     DPTR,#crc
002471 120332            LCALL   ?C?LSTXDATA
002474 904D95            MOV     DPTR,#buffer
002477 EB                MOV     A,R3
002478 F0                MOVX    @DPTR,A
002479 A3                INC     DPTR
00247A EA                MOV     A,R2
00247B F0                MOVX    @DPTR,A
00247C A3                INC     DPTR
00247D E9                MOV     A,R1
00247E F0                MOVX    @DPTR,A
   82:     u32_t i;
   83:     for (i = 0; i < size; ++i)
00247F 904D9C            MOV     DPTR,#i
002482 12033E            LCALL   ?C?LSTKXDATA
002485 00                DB      00H
002486 00                DB      00H
002487 00                DB      00H
002488 00                DB      00H
002489         ?C0001?CRC32:
002489 904D98            MOV     DPTR,#size
00248C E0                MOVX    A,@DPTR
00248D FC                MOV     R4,A
00248E A3                INC     DPTR
00248F E0                MOVX    A,@DPTR
002490 FD                MOV     R5,A
002491 A3                INC     DPTR
002492 E0                MOVX    A,@DPTR
002493 FE                MOV     R6,A
002494 A3                INC     DPTR
002495 E0                MOVX    A,@DPTR
002496 FF                MOV     R7,A
002497 A3                INC     DPTR
002498 E0                MOVX    A,@DPTR
002499 F8                MOV     R0,A
00249A A3                INC     DPTR
00249B E0                MOVX    A,@DPTR
00249C F9                MOV     R1,A
00249D A3                INC     DPTR
00249E E0                MOVX    A,@DPTR
00249F FA                MOV     R2,A
0024A0 A3                INC     DPTR
0024A1 E0                MOVX    A,@DPTR
0024A2 FB                MOV     R3,A
0024A3 C3                CLR     C
0024A4 1202FB            LCALL   ?C?ULCMP
0024A7 4002              JC      $ + 4H
0024A9 A15A              AJMP    ?C0002?CRC32
   84:     {
   85:     	SPIFlashRead((u8_t *)&crc_table, CRC32_ADDR + (((crc ^ buffer[i]) & 0xff)*4), sizeof(crc_table));
0024AB 904D9C            MOV     DPTR,#i
0024AE E0                MOVX    A,@DPTR
0024AF A3                INC     DPTR
0024B0 E0                MOVX    A,@DPTR
0024B1 A3                INC     DPTR
0024B2 E0                MOVX    A,@DPTR
0024B3 FE                MOV     R6,A
0024B4 A3                INC     DPTR
0024B5 E0                MOVX    A,@DPTR
0024B6 FF                MOV     R7,A
0024B7 904D95            MOV     DPTR,#buffer
0024BA E0                MOVX    A,@DPTR
0024BB FB                MOV     R3,A
0024BC A3                INC     DPTR
0024BD E0                MOVX    A,@DPTR
0024BE FA                MOV     R2,A
0024BF A3                INC     DPTR
0024C0 E0                MOVX    A,@DPTR
0024C1 F9                MOV     R1,A
0024C2 8F82              MOV     DPL,R7
0024C4 8E83              MOV     DPH,R6
0024C6 120112            LCALL   ?C?CLDOPTR
0024C9 FF                MOV     R7,A
0024CA E4                CLR     A
0024CB 904D91            MOV     DPTR,#crc
0024CE E0                MOVX    A,@DPTR
0024CF F8                MOV     R0,A
0024D0 A3                INC     DPTR
0024D1 E0                MOVX    A,@DPTR
0024D2 F9                MOV     R1,A
0024D3 A3                INC     DPTR
0024D4 E0                MOVX    A,@DPTR
0024D5 FA                MOV     R2,A
0024D6 A3                INC     DPTR
0024D7 E0                MOVX    A,@DPTR
0024D8 6F                XRL     A,R7
0024D9 FF                MOV     R7,A
0024DA EA                MOV     A,R2
0024DB FE                MOV     R6,A
0024DC E9                MOV     A,R1
0024DD FD                MOV     R5,A
0024DE E8                MOV     A,R0
0024DF FC                MOV     R4,A
0024E0 EF                MOV     A,R7
0024E1 E4                CLR     A
0024E2 FE                MOV     R6,A
0024E3 FD                MOV     R5,A
0024E4 FC                MOV     R4,A
0024E5 7B04              MOV     R3,#04H
0024E7 FA                MOV     R2,A
0024E8 F9                MOV     R1,A
0024E9 F8                MOV     R0,A
0024EA 1201DE            LCALL   ?C?LMUL
0024ED E4                CLR     A
0024EE 2F                ADD     A,R7
0024EF FF                MOV     R7,A
0024F0 EE                MOV     A,R6
0024F1 3480              ADDC    A,#080H
0024F3 FE                MOV     R6,A
0024F4 E4                CLR     A
0024F5 3D                ADDC    A,R5
0024F6 FD                MOV     R5,A
0024F7 E4                CLR     A
0024F8 3C                ADDC    A,R4
0024F9 FC                MOV     R4,A
0024FA 904DEC            MOV     DPTR,#?_SPIFlashRead?BYTE+07H
0024FD 7404              MOV     A,#04H
0024FF F0                MOVX    @DPTR,A
002500 7B01              MOV     R3,#01H
002502 7A4E              MOV     R2,#HIGH crc_table
002504 793A              MOV     R1,#LOW crc_table
002506 71D3              ACALL   _SPIFlashRead
   86:         crc = crc_table ^ (crc >> 8);
002508 904D91            MOV     DPTR,#crc
00250B E0                MOVX    A,@DPTR
00250C FC                MOV     R4,A
00250D A3                INC     DPTR
00250E E0                MOVX    A,@DPTR
00250F FD                MOV     R5,A
002510 A3                INC     DPTR
002511 E0                MOVX    A,@DPTR
002512 FE                MOV     R6,A
002513 A3                INC     DPTR
002514 E0                MOVX    A,@DPTR
002515 FF                MOV     R7,A
002516 7808              MOV     R0,#08H
002518 12030C            LCALL   ?C?ULSHR
00251B 904E3A            MOV     DPTR,#crc_table
00251E E0                MOVX    A,@DPTR
00251F F8                MOV     R0,A
002520 A3                INC     DPTR
002521 E0                MOVX    A,@DPTR
002522 F9                MOV     R1,A
002523 A3                INC     DPTR
002524 E0                MOVX    A,@DPTR
002525 FA                MOV     R2,A
002526 A3                INC     DPTR
002527 E0                MOVX    A,@DPTR
002528 6F                XRL     A,R7
002529 FF                MOV     R7,A
00252A EA                MOV     A,R2
00252B 6E                XRL     A,R6
00252C FE                MOV     R6,A
00252D E9                MOV     A,R1
00252E 6D                XRL     A,R5
00252F FD                MOV     R5,A
002530 E8                MOV     A,R0
002531 6C                XRL     A,R4
002532 FC                MOV     R4,A
002533 904D91            MOV     DPTR,#crc
002536 120332            LCALL   ?C?LSTXDATA
   87:     }
002539 904D9C            MOV     DPTR,#i
00253C E0                MOVX    A,@DPTR
00253D FC                MOV     R4,A
00253E A3                INC     DPTR
00253F E0                MOVX    A,@DPTR
002540 FD                MOV     R5,A
002541 A3                INC     DPTR
002542 E0                MOVX    A,@DPTR
002543 FE                MOV     R6,A
002544 A3                INC     DPTR
002545 E0                MOVX    A,@DPTR
002546 2401              ADD     A,#01H
002548 FF                MOV     R7,A
002549 E4                CLR     A
00254A 3E                ADDC    A,R6
00254B FE                MOV     R6,A
00254C E4                CLR     A
00254D 3D                ADDC    A,R5
00254E FD                MOV     R5,A
00254F E4                CLR     A
002550 3C                ADDC    A,R4
002551 FC                MOV     R4,A
002552 904D9C            MOV     DPTR,#i
002555 120332            LCALL   ?C?LSTXDATA
002558 8189              AJMP    ?C0001?CRC32
00255A         ?C0002?CRC32:
   88: 
   89:     return crc;
00255A 904D91            MOV     DPTR,#crc
00255D E0                MOVX    A,@DPTR
00255E FC                MOV     R4,A
00255F A3                INC     DPTR
002560 E0                MOVX    A,@DPTR
002561 FD                MOV     R5,A
002562 A3                INC     DPTR
002563 E0                MOVX    A,@DPTR
002564 FE                MOV     R6,A
002565 A3                INC     DPTR
002566 E0                MOVX    A,@DPTR
002567 FF                MOV     R7,A
   90: }
002568 22                RET     
----- FUNCTION _cal_crc32_multiple (END) -------


----- FUNCTION sendHistoryData (BEGIN) -----
 FILE: 'lxProtocol.c'
  383: static void sendHistoryData(void)
  384: {
  385: 	static u8_t total_len = 0;
  386: 	UserMeasureData *temp = NULL;
002569 904DC2            MOV     DPTR,#temp
00256C E4                CLR     A
00256D F0                MOVX    @DPTR,A
00256E A3                INC     DPTR
00256F F0                MOVX    @DPTR,A
002570 A3                INC     DPTR
002571 F0                MOVX    @DPTR,A
  387: 	u32_t crc32;
  388: 	u8_t i=0;
002572 904DC9            MOV     DPTR,#i
002575 F0                MOVX    @DPTR,A
  389: 	u8_t pkgCnt; 
  390: 	u8_t size;
  391: 	/*
  392: 	UserMeasureData temp1;
  393: 	temp1.UTCTime[0] = 0x12;
  394: 	temp1.UTCTime[0] = 0x34;
  395: 	temp1.UTCTime[0] = 0x56;
  396: 	temp1.UTCTime[0] = 0x78;
  397: 	temp1.weight = 0xabba;
  398: 	QueuePush(&temp1);
  399: 	QueuePush(&temp1);
  400: 	*/
  401: 	
  402: 	size = historyUserData.size;
002576 904C12            MOV     DPTR,#historyUserData+02H
002579 E0                MOVX    A,@DPTR
00257A 904DCB            MOV     DPTR,#size
00257D F0                MOVX    @DPTR,A
  403: 	pkgCnt = (8 + historyUserData.size * 6 + 4)/18 + (((8 + historyUserData.size * 6 + 4)%18)>0?1:0);
00257E 75F006            MOV     B,#06H
002581 A4                MUL     AB
002582 240C              ADD     A,#0CH
002584 FF                MOV     R7,A
002585 E4                CLR     A
002586 35F0              ADDC    A,B
002588 FE                MOV     R6,A
002589 7C00              MOV     R4,#00H
00258B 7D12              MOV     R5,#012H
00258D 120173            LCALL   ?C?UIDIV
002590 ED                MOV     A,R5
002591 D3                SETB    C
002592 9400              SUBB    A,#00H
002594 4006              JC      ?C0068?LXPROTOCOL
002596 7F01              MOV     R7,#01H
002598 7B01              MOV     R3,#01H
00259A 8004              SJMP    ?C0069?LXPROTOCOL
00259C         ?C0068?LXPROTOCOL:
00259C 7F00              MOV     R7,#00H
00259E 7B00              MOV     R3,#00H
0025A0         ?C0069?LXPROTOCOL:
0025A0 904C12            MOV     DPTR,#historyUserData+02H
0025A3 E0                MOVX    A,@DPTR
0025A4 FA                MOV     R2,A
0025A5 75F006            MOV     B,#06H
0025A8 A4                MUL     AB
0025A9 240C              ADD     A,#0CH
0025AB FF                MOV     R7,A
0025AC E4                CLR     A
0025AD 35F0              ADDC    A,B
0025AF FE                MOV     R6,A
0025B0 7C00              MOV     R4,#00H
0025B2 7D12              MOV     R5,#012H
0025B4 120173            LCALL   ?C?UIDIV
0025B7 EB                MOV     A,R3
0025B8 2F                ADD     A,R7
0025B9 904DCA            MOV     DPTR,#pkgCnt
0025BC F0                MOVX    @DPTR,A
  404: 	total_len = 8 + historyUserData.size * 6 + 4;
0025BD EA                MOV     A,R2
0025BE 75F006            MOV     B,#06H
0025C1 A4                MUL     AB
0025C2 240C              ADD     A,#0CH
0025C4 904E5D            MOV     DPTR,#total_len
0025C7 F0                MOVX    @DPTR,A
  405: 	
  406: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
0025C8 904C64            MOV     DPTR,#btCmdBuf+01H
0025CB 7430              MOV     A,#030H
0025CD F0                MOVX    @DPTR,A
  407: 	btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
0025CE A3                INC     DPTR
0025CF 741C              MOV     A,#01CH
0025D1 F0                MOVX    @DPTR,A
  408: 	btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
0025D2 E4                CLR     A
0025D3 A3                INC     DPTR
0025D4 F0                MOVX    @DPTR,A
  409: 
  410: 	*(LX_SEND_BUF+0) = LO_UINT16(CMD_SYNC_DATA_RSP);
0025D5 9048D2            MOV     DPTR,#048D2H
0025D8 7402              MOV     A,#02H
0025DA F0                MOVX    @DPTR,A
  411: 	*(LX_SEND_BUF+1) = HI_UINT16(CMD_SYNC_DATA_RSP);
0025DB A3                INC     DPTR
0025DC 7448              MOV     A,#048H
0025DE F0                MOVX    @DPTR,A
  412: 	*(LX_SEND_BUF+2) = pkgCnt - 1;
0025DF 904DCA            MOV     DPTR,#pkgCnt
0025E2 E0                MOVX    A,@DPTR
0025E3 FF                MOV     R7,A
0025E4 14                DEC     A
0025E5 9048D4            MOV     DPTR,#048D4H
0025E8 F0                MOVX    @DPTR,A
  413: 	*(LX_SEND_BUF+3) = 0;
0025E9 A3                INC     DPTR
0025EA E4                CLR     A
0025EB F0                MOVX    @DPTR,A
  414: 	*(LX_SEND_BUF+4) = WEIGHT_UTC_FLAG;
0025EC A3                INC     DPTR
0025ED 7405              MOV     A,#05H
0025EF F0                MOVX    @DPTR,A
  415: 	*(LX_SEND_BUF+5) = 0;
0025F0 A3                INC     DPTR
0025F1 E4                CLR     A
0025F2 F0                MOVX    @DPTR,A
  416: 	*(LX_SEND_BUF+6) = 0;
0025F3 A3                INC     DPTR
0025F4 F0                MOVX    @DPTR,A
  417: 	*(LX_SEND_BUF+7) = 0;
0025F5 A3                INC     DPTR
0025F6 F0                MOVX    @DPTR,A
  418: 	if(pkgCnt > 1)
0025F7 EF                MOV     A,R7
0025F8 D3                SETB    C
0025F9 9401              SUBB    A,#01H
0025FB 5002              JNC     $ + 4H
0025FD E145              AJMP    ?C0070?LXPROTOCOL
  419: 	{
  420: 		for(i=0;i<size;i++)
0025FF E4                CLR     A
002600 904DC9            MOV     DPTR,#i
002603 F0                MOVX    @DPTR,A
002604         ?C0071?LXPROTOCOL:
002604 904DCB            MOV     DPTR,#size
002607 E0                MOVX    A,@DPTR
002608 FF                MOV     R7,A
002609 904DC9            MOV     DPTR,#i
00260C E0                MOVX    A,@DPTR
00260D C3                CLR     C
00260E 9F                SUBB    A,R7
00260F 5047              JNC     ?C0072?LXPROTOCOL
  421: 		{
  422: 			temp = QueuePop();
002611 123E08            LCALL   QueuePop
002614 904DC2            MOV     DPTR,#temp
002617 EB                MOV     A,R3
002618 F0                MOVX    @DPTR,A
002619 A3                INC     DPTR
00261A EA                MOV     A,R2
00261B F0                MOVX    @DPTR,A
00261C A3                INC     DPTR
00261D E9                MOV     A,R1
00261E F0                MOVX    @DPTR,A
  423: 			dmemcpy(LX_SEND_BUF + (sizeof(UserMeasureData) * i) + 8, (u8_t *)temp, sizeof(UserMeasureData));
00261F 904DC9            MOV     DPTR,#i
002622 E0                MOVX    A,@DPTR
002623 75F006            MOV     B,#06H
002626 A4                MUL     AB
002627 24DA              ADD     A,#0DAH
002629 FF                MOV     R7,A
00262A E5F0              MOV     A,B
00262C 3448              ADDC    A,#048H
00262E FA                MOV     R2,A
00262F A907              MOV     R1,AR7
002631 7B01              MOV     R3,#01H
002633 C003              PUSH    AR3
002635 C002              PUSH    AR2
002637 904DC2            MOV     DPTR,#temp
00263A E0                MOVX    A,@DPTR
00263B FB                MOV     R3,A
00263C A3                INC     DPTR
00263D E0                MOVX    A,@DPTR
00263E FA                MOV     R2,A
00263F A3                INC     DPTR
002640 E0                MOVX    A,@DPTR
002641 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
002643 8A14              MOV     ?_dmemcpy?BYTE+04H,R2
002645 F515              MOV     ?_dmemcpy?BYTE+05H,A
002647 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
00264A D002              POP     AR2
00264C D003              POP     AR3
00264E F1BE              ACALL   _dmemcpy
  424: 		}
002650 904DC9            MOV     DPTR,#i
002653 E0                MOVX    A,@DPTR
002654 04                INC     A
002655 F0                MOVX    @DPTR,A
002656 80AC              SJMP    ?C0071?LXPROTOCOL
002658         ?C0072?LXPROTOCOL:
  425: 		crc32 = cal_crc32_multiple(0, LX_SEND_BUF, total_len - 4);
002658 7B01              MOV     R3,#01H
00265A 7A48              MOV     R2,#048H
00265C 79D2              MOV     R1,#0D2H
00265E 904E5D            MOV     DPTR,#total_len
002661 E0                MOVX    A,@DPTR
002662 24FC              ADD     A,#0FCH
002664 FF                MOV     R7,A
002665 E4                CLR     A
002666 34FF              ADDC    A,#0FFH
002668 FE                MOV     R6,A
002669 E4                CLR     A
00266A FC                MOV     R4,A
00266B FD                MOV     R5,A
00266C 904D98            MOV     DPTR,#?_cal_crc32_multiple?BYTE+07H
00266F 120332            LCALL   ?C?LSTXDATA
002672 7F00              MOV     R7,#00H
002674 7E00              MOV     R6,#00H
002676 7D00              MOV     R5,#00H
002678 7C00              MOV     R4,#00H
00267A 916E              ACALL   _cal_crc32_multiple
00267C 904DC5            MOV     DPTR,#crc32
00267F 120332            LCALL   ?C?LSTXDATA
  426: 		dmemcpy(LX_SEND_BUF + (sizeof(UserMeasureData) * i) + 8, (u8_t *)&crc32, sizeof(crc32));
002682 904DC9            MOV     DPTR,#i
002685 E0                MOVX    A,@DPTR
002686 75F006            MOV     B,#06H
002689 A4                MUL     AB
00268A 24DA              ADD     A,#0DAH
00268C FF                MOV     R7,A
00268D E5F0              MOV     A,B
00268F 3448              ADDC    A,#048H
002691 FA                MOV     R2,A
002692 A907              MOV     R1,AR7
002694 7B01              MOV     R3,#01H
002696 C003              PUSH    AR3
002698 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
00269A 75144D            MOV     ?_dmemcpy?BYTE+04H,#HIGH crc32
00269D 7515C5            MOV     ?_dmemcpy?BYTE+05H,#LOW crc32
0026A0 751604            MOV     ?_dmemcpy?BYTE+06H,#04H
0026A3 D003              POP     AR3
0026A5 F1BE              ACALL   _dmemcpy
  427: 		bigLittleEndianSwap(LX_SEND_BUF, total_len);
0026A7 7B01              MOV     R3,#01H
0026A9 7A48              MOV     R2,#048H
0026AB 79D2              MOV     R1,#0D2H
0026AD 904E5D            MOV     DPTR,#total_len
0026B0 E0                MOVX    A,@DPTR
0026B1 FD                MOV     R5,A
0026B2 7C00              MOV     R4,#00H
0026B4 123A00            LCALL   _bigLittleEndianSwap
  428: 		
  429: 		for(i=0;i<pkgCnt;i++)
0026B7 E4                CLR     A
0026B8 904DC9            MOV     DPTR,#i
0026BB F0                MOVX    @DPTR,A
0026BC         ?C0074?LXPROTOCOL:
0026BC 904DCA            MOV     DPTR,#pkgCnt
0026BF E0                MOVX    A,@DPTR
0026C0 FF                MOV     R7,A
0026C1 904DC9            MOV     DPTR,#i
0026C4 E0                MOVX    A,@DPTR
0026C5 FE                MOV     R6,A
0026C6 C3                CLR     C
0026C7 9F                SUBB    A,R7
0026C8 4002              JC      $ + 4H
0026CA E1BD              AJMP    ?C0082?LXPROTOCOL
  430: 		{
  431: 			btCmdBuf.DATA[3] = (pkgCnt << 4) + i;
0026CC A3                INC     DPTR
0026CD E0                MOVX    A,@DPTR
0026CE FD                MOV     R5,A
0026CF C4                SWAP    A
0026D0 54F0              ANL     A,#0F0H
0026D2 FF                MOV     R7,A
0026D3 EE                MOV     A,R6
0026D4 2F                ADD     A,R7
0026D5 904C67            MOV     DPTR,#btCmdBuf+04H
0026D8 F0                MOVX    @DPTR,A
  432: 			if(i == pkgCnt -1)
0026D9 ED                MOV     A,R5
0026DA 14                DEC     A
0026DB B5060A            CJNE    A,AR6,?C0077?LXPROTOCOL
  433: 			{
  434: 				btCmdBuf.DATA[4] = total_len;
0026DE 904E5D            MOV     DPTR,#total_len
0026E1 E0                MOVX    A,@DPTR
0026E2 904C68            MOV     DPTR,#btCmdBuf+05H
0026E5 F0                MOVX    @DPTR,A
  435: 			}
0026E6 800D              SJMP    ?C0078?LXPROTOCOL
0026E8         ?C0077?LXPROTOCOL:
  436: 			else
  437: 			{
  438: 				btCmdBuf.DATA[4] = 20 - 2;
0026E8 904C68            MOV     DPTR,#btCmdBuf+05H
0026EB 7412              MOV     A,#012H
0026ED F0                MOVX    @DPTR,A
  439: 				total_len -= 18;
0026EE 904E5D            MOV     DPTR,#total_len
0026F1 E0                MOVX    A,@DPTR
0026F2 24EE              ADD     A,#0EEH
0026F4 F0                MOVX    @DPTR,A
  440: 				
  441: 			}
0026F5         ?C0078?LXPROTOCOL:
  442: 			btCmdBuf.DATA[7] = pkgCnt - i - 1;
0026F5 904DC9            MOV     DPTR,#i
0026F8 E0                MOVX    A,@DPTR
0026F9 FD                MOV     R5,A
0026FA A3                INC     DPTR
0026FB E0                MOVX    A,@DPTR
0026FC C3                CLR     C
0026FD 9D                SUBB    A,R5
0026FE 14                DEC     A
0026FF 904C6B            MOV     DPTR,#btCmdBuf+08H
002702 F0                MOVX    @DPTR,A
  443: 			btCmdBuf.len = 3 + 2 + btCmdBuf.DATA[4] ;
002703 904C68            MOV     DPTR,#btCmdBuf+05H
002706 E0                MOVX    A,@DPTR
002707 2405              ADD     A,#05H
002709 904C63            MOV     DPTR,#btCmdBuf
00270C F0                MOVX    @DPTR,A
  444: 			dmemcpy(&btCmdBuf.DATA[5], (u8_t *)(LX_SEND_BUF+i*18), btCmdBuf.DATA[4] );
00270D ED                MOV     A,R5
00270E 75F012            MOV     B,#012H
002711 A4                MUL     AB
002712 24D2              ADD     A,#0D2H
002714 FF                MOV     R7,A
002715 E5F0              MOV     A,B
002717 3448              ADDC    A,#048H
002719 A907              MOV     R1,AR7
00271B 751301            MOV     ?_dmemcpy?BYTE+03H,#01H
00271E F514              MOV     ?_dmemcpy?BYTE+04H,A
002720 8915              MOV     ?_dmemcpy?BYTE+05H,R1
002722 904C68            MOV     DPTR,#btCmdBuf+05H
002725 E0                MOVX    A,@DPTR
002726 F516              MOV     ?_dmemcpy?BYTE+06H,A
002728 7B01              MOV     R3,#01H
00272A 7A4C              MOV     R2,#HIGH btCmdBuf+06H
00272C 7969              MOV     R1,#LOW btCmdBuf+06H
00272E F1BE              ACALL   _dmemcpy
  445: 			BT_CmdFifoIn(&btCmdBuf);
002730 7B01              MOV     R3,#01H
002732 7A4C              MOV     R2,#HIGH btCmdBuf
002734 7963              MOV     R1,#LOW btCmdBuf
002736 F1F2              ACALL   _BT_CmdFifoIn
  446: 			YC_Delay10ms(12);
002738 7F0C              MOV     R7,#0CH
00273A 121F84            LCALL   _YC_Delay10ms
  447: 		}
00273D 904DC9            MOV     DPTR,#i
002740 E0                MOVX    A,@DPTR
002741 04                INC     A
002742 F0                MOVX    @DPTR,A
002743 C1BC              AJMP    ?C0074?LXPROTOCOL
  448: 	}
002745         ?C0070?LXPROTOCOL:
  449: 	else
  450: 	{
  451: 		btCmdBuf.len = 3 + 2 + SYNC_DATA_HDR_LEN + sizeof(UserMeasureData);
002745 904C63            MOV     DPTR,#btCmdBuf
002748 7413              MOV     A,#013H
00274A F0                MOVX    @DPTR,A
  452: 		btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
00274B 904C67            MOV     DPTR,#btCmdBuf+04H
00274E 7410              MOV     A,#010H
002750 F0                MOVX    @DPTR,A
  453: 		btCmdBuf.DATA[4] = SYNC_DATA_HDR_LEN + sizeof(UserMeasureData);
002751 A3                INC     DPTR
002752 740E              MOV     A,#0EH
002754 F0                MOVX    @DPTR,A
  454: 		temp = QueuePop();
002755 123E08            LCALL   QueuePop
002758 904DC2            MOV     DPTR,#temp
00275B EB                MOV     A,R3
00275C F0                MOVX    @DPTR,A
00275D A3                INC     DPTR
00275E EA                MOV     A,R2
00275F F0                MOVX    @DPTR,A
002760 A3                INC     DPTR
002761 E9                MOV     A,R1
002762 F0                MOVX    @DPTR,A
  455: 		if(temp != NULL)
002763 4A                ORL     A,R2
002764 601D              JZ      ?C0080?LXPROTOCOL
  456: 		{
  457: 			dmemcpy(LX_SEND_BUF + 8, (u8_t *)temp, sizeof(UserMeasureData));
002766 904DC2            MOV     DPTR,#temp
002769 E0                MOVX    A,@DPTR
00276A FB                MOV     R3,A
00276B A3                INC     DPTR
00276C E0                MOVX    A,@DPTR
00276D FA                MOV     R2,A
00276E A3                INC     DPTR
00276F E0                MOVX    A,@DPTR
002770 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
002772 8A14              MOV     ?_dmemcpy?BYTE+04H,R2
002774 F515              MOV     ?_dmemcpy?BYTE+05H,A
002776 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
002779 7B01              MOV     R3,#01H
00277B 7A48              MOV     R2,#048H
00277D 79DA              MOV     R1,#0DAH
00277F F1BE              ACALL   _dmemcpy
  458: 		}
002781 800B              SJMP    ?C0081?LXPROTOCOL
002783         ?C0080?LXPROTOCOL:
  459: 		else
  460: 		{
  461: 			xmemset(LX_SEND_BUF, 0, sizeof(UserMeasureData));
002783 7B06              MOV     R3,#06H
002785 E4                CLR     A
002786 FD                MOV     R5,A
002787 7FD2              MOV     R7,#0D2H
002789 7E48              MOV     R6,#048H
00278B 121F9C            LCALL   _xmemset
  462: 		}
00278E         ?C0081?LXPROTOCOL:
  463: 		dmemcpy(&(btCmdBuf.DATA[5]), LX_SEND_BUF, btCmdBuf.DATA[4]);
00278E 751301            MOV     ?_dmemcpy?BYTE+03H,#01H
002791 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
002794 7515D2            MOV     ?_dmemcpy?BYTE+05H,#0D2H
002797 904C68            MOV     DPTR,#btCmdBuf+05H
00279A E0                MOVX    A,@DPTR
00279B F516              MOV     ?_dmemcpy?BYTE+06H,A
00279D 7B01              MOV     R3,#01H
00279F 7A4C              MOV     R2,#HIGH btCmdBuf+06H
0027A1 7969              MOV     R1,#LOW btCmdBuf+06H
0027A3 F1BE              ACALL   _dmemcpy
  464: 		bigLittleEndianSwap(&(btCmdBuf.DATA[5]), btCmdBuf.DATA[4]);
0027A5 7B01              MOV     R3,#01H
0027A7 7A4C              MOV     R2,#HIGH btCmdBuf+06H
0027A9 7969              MOV     R1,#LOW btCmdBuf+06H
0027AB 904C68            MOV     DPTR,#btCmdBuf+05H
0027AE E0                MOVX    A,@DPTR
0027AF FD                MOV     R5,A
0027B0 7C00              MOV     R4,#00H
0027B2 123A00            LCALL   _bigLittleEndianSwap
  465: 		BT_CmdFifoIn(&btCmdBuf);
0027B5 7B01              MOV     R3,#01H
0027B7 7A4C              MOV     R2,#HIGH btCmdBuf
0027B9 7963              MOV     R1,#LOW btCmdBuf
0027BB F1F2              ACALL   _BT_CmdFifoIn
  466: 	}
  467: }
0027BD         ?C0082?LXPROTOCOL:
0027BD 22                RET     
----- FUNCTION sendHistoryData (END) -------


----- FUNCTION _dmemcpy (BEGIN) -----
 FILE: 'YC_Utilities.c'
   22: void dmemcpy(u8_t *dest, u8_t* src, u8_t len) small
   23: {
0027BE 8B10              MOV     dest,R3
0027C0 8A11              MOV     dest+01H,R2
0027C2 8912              MOV     dest+02H,R1
0027C4         ?C0008?YC_UTILITIES:
   24: 	while(len--)
0027C4 AF16              MOV     R7,len
0027C6 1516              DEC     len
0027C8 EF                MOV     A,R7
0027C9 6026              JZ      ?C0010?YC_UTILITIES
   25: 		*dest++ = *src++;
0027CB AB13              MOV     R3,src
0027CD 0515              INC     src+02H
0027CF E515              MOV     A,src+02H
0027D1 AA14              MOV     R2,src+01H
0027D3 7002              JNZ     ?C0047?YC_UTILITIES
0027D5 0514              INC     src+01H
0027D7         ?C0047?YC_UTILITIES:
0027D7 14                DEC     A
0027D8 F9                MOV     R1,A
0027D9 1200F9            LCALL   ?C?CLDPTR
0027DC FF                MOV     R7,A
0027DD AB10              MOV     R3,dest
0027DF 0512              INC     dest+02H
0027E1 E512              MOV     A,dest+02H
0027E3 AA11              MOV     R2,dest+01H
0027E5 7002              JNZ     ?C0048?YC_UTILITIES
0027E7 0511              INC     dest+01H
0027E9         ?C0048?YC_UTILITIES:
0027E9 14                DEC     A
0027EA F9                MOV     R1,A
0027EB EF                MOV     A,R7
0027EC 12013F            LCALL   ?C?CSTPTR
0027EF 80D3              SJMP    ?C0008?YC_UTILITIES
   26: 	return;
   27: }
0027F1         ?C0010?YC_UTILITIES:
0027F1 22                RET     
----- FUNCTION _dmemcpy (END) -------


----- FUNCTION _BT_CmdFifoIn (BEGIN) -----
 FILE: 'BT_IPC.c'
    7: bool BT_CmdFifoIn(BT_CMDFIFO_t *pFIFO)
    8: {
0027F2 904DFD            MOV     DPTR,#pFIFO
0027F5 EB                MOV     A,R3
0027F6 F0                MOVX    @DPTR,A
0027F7 A3                INC     DPTR
0027F8 EA                MOV     A,R2
0027F9 F0                MOVX    @DPTR,A
0027FA A3                INC     DPTR
0027FB E9                MOV     A,R1
0027FC F0                MOVX    @DPTR,A
    9: 	u16_t new_wprt,new_cmd_len,i;
   10: 	if( pFIFO->len ==0 )
0027FD 1200F9            LCALL   ?C?CLDPTR
002800 7002              JNZ     ?C0001?BT_IPC
   11: 		return false;
002802 C3                CLR     C
002803 22                RET     
002804         ?C0001?BT_IPC:
   12: 	new_cmd_len = BT_GetCmdFifoDepth()+pFIFO->len+2;
002804 3112              ACALL   BT_GetCmdFifoDepth
002806 904DFD            MOV     DPTR,#pFIFO
002809 E0                MOVX    A,@DPTR
00280A FB                MOV     R3,A
00280B A3                INC     DPTR
00280C E0                MOVX    A,@DPTR
00280D FA                MOV     R2,A
00280E A3                INC     DPTR
00280F E0                MOVX    A,@DPTR
002810 F9                MOV     R1,A
002811 1200F9            LCALL   ?C?CLDPTR
002814 FD                MOV     R5,A
002815 2F                ADD     A,R7
002816 FF                MOV     R7,A
002817 E4                CLR     A
002818 33                RLC     A
002819 CF                XCH     A,R7
00281A 2402              ADD     A,#02H
00281C CF                XCH     A,R7
00281D 3400              ADDC    A,#00H
00281F FE                MOV     R6,A
;---- Variable 'new_cmd_len' assigned to Register 'R6/R7' ----
   13: 	if(new_cmd_len<=BT_CMD_BUF_LEN)
002820 D3                SETB    C
002821 EF                MOV     A,R7
002822 9480              SUBB    A,#080H
002824 EE                MOV     A,R6
002825 9400              SUBB    A,#00H
002827 4002              JC      $ + 4H
002829 2110              AJMP    ?C0003?BT_IPC
   14: 	{
   15: 		new_wprt = ESWAP(BT_CmdWptr);
00282B 904A03            MOV     DPTR,#BT_CmdWptr+01H
00282E E0                MOVX    A,@DPTR
00282F FA                MOV     R2,A
002830 904A02            MOV     DPTR,#BT_CmdWptr
002833 E0                MOVX    A,@DPTR
002834 FF                MOV     R7,A
002835 EA                MOV     A,R2
002836 FE                MOV     R6,A
002837 EF                MOV     A,R7
002838 904E00            MOV     DPTR,#new_wprt
00283B EE                MOV     A,R6
00283C F0                MOVX    @DPTR,A
00283D A3                INC     DPTR
00283E EF                MOV     A,R7
00283F F0                MOVX    @DPTR,A
   16: 		HWRITE(new_wprt++,CS_PREFIX_CMD);
002840 904E00            MOV     DPTR,#new_wprt
002843 E4                CLR     A
002844 75F001            MOV     B,#01H
002847 1201C8            LCALL   ?C?ILDIX
00284A 85F082            MOV     DPL,B
00284D F583              MOV     DPH,A
00284F 74C5              MOV     A,#0C5H
002851 F0                MOVX    @DPTR,A
   17: 		if(new_wprt == (mem_cmd_buf_end + 1))
002852 904E00            MOV     DPTR,#new_wprt
002855 E0                MOVX    A,@DPTR
002856 B44F0E            CJNE    A,#04FH,?C0004?BT_IPC
002859 A3                INC     DPTR
00285A E0                MOVX    A,@DPTR
00285B B48009            CJNE    A,#080H,?C0004?BT_IPC
   18: 		{
   19: 			new_wprt = mem_cmd_buf;
00285E 904E00            MOV     DPTR,#new_wprt
002861 744F              MOV     A,#04FH
002863 F0                MOVX    @DPTR,A
002864 A3                INC     DPTR
002865 E4                CLR     A
002866 F0                MOVX    @DPTR,A
   20: 		}
002867         ?C0004?BT_IPC:
   21: 		HWRITE(new_wprt++,pFIFO->len);
002867 904E00            MOV     DPTR,#new_wprt
00286A E4                CLR     A
00286B 75F001            MOV     B,#01H
00286E 1201C8            LCALL   ?C?ILDIX
002871 85F082            MOV     DPL,B
002874 F583              MOV     DPH,A
002876 ED                MOV     A,R5
002877 F0                MOVX    @DPTR,A
   22: 		if(new_wprt == (mem_cmd_buf_end + 1))
002878 904E00            MOV     DPTR,#new_wprt
00287B E0                MOVX    A,@DPTR
00287C B44F0E            CJNE    A,#04FH,?C0005?BT_IPC
00287F A3                INC     DPTR
002880 E0                MOVX    A,@DPTR
002881 B48009            CJNE    A,#080H,?C0005?BT_IPC
   23: 		{
   24: 			new_wprt = mem_cmd_buf;
002884 904E00            MOV     DPTR,#new_wprt
002887 744F              MOV     A,#04FH
002889 F0                MOVX    @DPTR,A
00288A A3                INC     DPTR
00288B E4                CLR     A
00288C F0                MOVX    @DPTR,A
   25: 		}
00288D         ?C0005?BT_IPC:
   26: 		for(i=0;i<pFIFO->len;i++)
00288D E4                CLR     A
00288E 904E02            MOV     DPTR,#i
002891 F0                MOVX    @DPTR,A
002892 A3                INC     DPTR
002893 F0                MOVX    @DPTR,A
002894         ?C0006?BT_IPC:
002894 904DFD            MOV     DPTR,#pFIFO
002897 E0                MOVX    A,@DPTR
002898 FB                MOV     R3,A
002899 A3                INC     DPTR
00289A E0                MOVX    A,@DPTR
00289B FA                MOV     R2,A
00289C A3                INC     DPTR
00289D E0                MOVX    A,@DPTR
00289E F9                MOV     R1,A
00289F 1200F9            LCALL   ?C?CLDPTR
0028A2 FF                MOV     R7,A
0028A3 904E02            MOV     DPTR,#i
0028A6 E0                MOVX    A,@DPTR
0028A7 FC                MOV     R4,A
0028A8 A3                INC     DPTR
0028A9 E0                MOVX    A,@DPTR
0028AA FD                MOV     R5,A
0028AB C3                CLR     C
0028AC 9F                SUBB    A,R7
0028AD EC                MOV     A,R4
0028AE 9400              SUBB    A,#00H
0028B0 5047              JNC     ?C0007?BT_IPC
   27: 		{
   28: 			HWRITE(new_wprt++,pFIFO->DATA[i]);
0028B2 E9                MOV     A,R1
0028B3 2401              ADD     A,#01H
0028B5 F9                MOV     R1,A
0028B6 E4                CLR     A
0028B7 3A                ADDC    A,R2
0028B8 FA                MOV     R2,A
0028B9 E9                MOV     A,R1
0028BA 2D                ADD     A,R5
0028BB F9                MOV     R1,A
0028BC EA                MOV     A,R2
0028BD 3C                ADDC    A,R4
0028BE FA                MOV     R2,A
0028BF 1200F9            LCALL   ?C?CLDPTR
0028C2 FF                MOV     R7,A
0028C3 904E00            MOV     DPTR,#new_wprt
0028C6 E4                CLR     A
0028C7 75F001            MOV     B,#01H
0028CA 1201C8            LCALL   ?C?ILDIX
0028CD 85F082            MOV     DPL,B
0028D0 F583              MOV     DPH,A
0028D2 EF                MOV     A,R7
0028D3 F0                MOVX    @DPTR,A
   29: 			if(new_wprt == (mem_cmd_buf_end + 1))
0028D4 904E00            MOV     DPTR,#new_wprt
0028D7 E0                MOVX    A,@DPTR
0028D8 B44F0E            CJNE    A,#04FH,?C0008?BT_IPC
0028DB A3                INC     DPTR
0028DC E0                MOVX    A,@DPTR
0028DD B48009            CJNE    A,#080H,?C0008?BT_IPC
   30: 			{
   31: 				new_wprt = mem_cmd_buf;
0028E0 904E00            MOV     DPTR,#new_wprt
0028E3 744F              MOV     A,#04FH
0028E5 F0                MOVX    @DPTR,A
0028E6 A3                INC     DPTR
0028E7 E4                CLR     A
0028E8 F0                MOVX    @DPTR,A
   32: 			}
   33: 		}
0028E9         ?C0008?BT_IPC:
0028E9 904E03            MOV     DPTR,#i+01H
0028EC E0                MOVX    A,@DPTR
0028ED 04                INC     A
0028EE F0                MOVX    @DPTR,A
0028EF 7006              JNZ     ?C0030?BT_IPC
0028F1 904E02            MOV     DPTR,#i
0028F4 E0                MOVX    A,@DPTR
0028F5 04                INC     A
0028F6 F0                MOVX    @DPTR,A
0028F7         ?C0030?BT_IPC:
0028F7 809B              SJMP    ?C0006?BT_IPC
0028F9         ?C0007?BT_IPC:
   34: 		BT_CmdWptr = ESWAP(new_wprt);
0028F9 904E00            MOV     DPTR,#new_wprt
0028FC E0                MOVX    A,@DPTR
0028FD FC                MOV     R4,A
0028FE A3                INC     DPTR
0028FF E0                MOVX    A,@DPTR
002900 FA                MOV     R2,A
002901 EC                MOV     A,R4
002902 FF                MOV     R7,A
002903 EA                MOV     A,R2
002904 FE                MOV     R6,A
002905 EF                MOV     A,R7
002906 904A02            MOV     DPTR,#BT_CmdWptr
002909 EE                MOV     A,R6
00290A F0                MOVX    @DPTR,A
00290B A3                INC     DPTR
00290C EF                MOV     A,R7
00290D F0                MOVX    @DPTR,A
   35: 		return true;
00290E D3                SETB    C
00290F 22                RET     
   36: 	}
002910         ?C0003?BT_IPC:
   37: 	else
   38: 	{
   39: 		return false;
002910 C3                CLR     C
   40: 	}
   41: }
002911 22                RET     
----- FUNCTION _BT_CmdFifoIn (END) -------


----- FUNCTION BT_GetCmdFifoDepth (BEGIN) -----
 FILE: 'BT_IPC.c'
   78: u8_t BT_GetCmdFifoDepth(void)
   79: {
   80: 	u16_t wptr,rptr,len;
   81: 	wptr = ESWAP(BT_CmdWptr);
002912 904A03            MOV     DPTR,#BT_CmdWptr+01H
002915 E0                MOVX    A,@DPTR
002916 FC                MOV     R4,A
002917 904A02            MOV     DPTR,#BT_CmdWptr
00291A E0                MOVX    A,@DPTR
00291B FF                MOV     R7,A
00291C EC                MOV     A,R4
00291D EF                MOV     A,R7
;---- Variable 'wptr' assigned to Register 'R4/R5' ----
00291E FD                MOV     R5,A
   82: 	rptr = ESWAP(BT_CmdRptr);
00291F 904A01            MOV     DPTR,#BT_CmdRptr+01H
002922 E0                MOVX    A,@DPTR
002923 FA                MOV     R2,A
002924 904A00            MOV     DPTR,#BT_CmdRptr
002927 E0                MOVX    A,@DPTR
002928 FF                MOV     R7,A
002929 EA                MOV     A,R2
00292A FE                MOV     R6,A
00292B EF                MOV     A,R7
;---- Variable 'rptr' assigned to Register 'R6/R7' ----
   83: 	len = (wptr + BT_CMD_BUF_LEN - rptr)&(BT_CMD_BUF_LEN-1);
00292C ED                MOV     A,R5
00292D 2480              ADD     A,#080H
00292F FD                MOV     R5,A
002930 E4                CLR     A
002931 3C                ADDC    A,R4
002932 FC                MOV     R4,A
002933 C3                CLR     C
002934 ED                MOV     A,R5
002935 9F                SUBB    A,R7
002936 FF                MOV     R7,A
002937 EC                MOV     A,R4
002938 9E                SUBB    A,R6
002939 7E00              MOV     R6,#00H
00293B EF                MOV     A,R7
00293C 547F              ANL     A,#07FH
00293E FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R6/R7' ----
   84: 	return len&0xff;
   85: }
00293F 22                RET     
----- FUNCTION BT_GetCmdFifoDepth (END) -------


----- FUNCTION BT_CmdFifoEmpty (BEGIN) -----
 FILE: 'BT_IPC.c'
   96: bool BT_CmdFifoEmpty(void)
   97: {
   98: 	if(BT_GetCmdFifoDepth()==0)
   99: 	{
002940 3112              ACALL   BT_GetCmdFifoDepth
002942 EF                MOV     A,R7
002943 7002              JNZ     ?C0023?BT_IPC
  100: 		return true;
  101: 	}
002945 D3                SETB    C
002946 22                RET     
  102: 	return false;
002947         ?C0023?BT_IPC:
  103: }
002947 C3                CLR     C
  104: 
002948 22                RET     
----- FUNCTION BT_CmdFifoEmpty (END) -------


----- FUNCTION _BT_CmdFifoFull (BEGIN) -----
 FILE: 'BT_IPC.c'
  105: bool BT_CmdFifoFull(BT_CMDFIFO_t *pFIFO)
  106: {
002949 904E44            MOV     DPTR,#pFIFO
00294C EB                MOV     A,R3
00294D F0                MOVX    @DPTR,A
00294E A3                INC     DPTR
00294F EA                MOV     A,R2
002950 F0                MOVX    @DPTR,A
002951 A3                INC     DPTR
002952 E9                MOV     A,R1
002953 F0                MOVX    @DPTR,A
  107: 	if((BT_GetCmdFifoDepth()+pFIFO->len+1) > BT_CMD_BUF_LEN)
  108: 		return true;
002954 3112              ACALL   BT_GetCmdFifoDepth
002956 904E44            MOV     DPTR,#pFIFO
002959 E0                MOVX    A,@DPTR
00295A FB                MOV     R3,A
00295B A3                INC     DPTR
00295C E0                MOVX    A,@DPTR
00295D FA                MOV     R2,A
00295E A3                INC     DPTR
00295F E0                MOVX    A,@DPTR
002960 F9                MOV     R1,A
002961 1200F9            LCALL   ?C?CLDPTR
002964 2F                ADD     A,R7
002965 FF                MOV     R7,A
002966 E4                CLR     A
002967 33                RLC     A
002968 CF                XCH     A,R7
002969 2401              ADD     A,#01H
00296B CF                XCH     A,R7
00296C 3400              ADDC    A,#00H
00296E FE                MOV     R6,A
00296F D3                SETB    C
002970 EF                MOV     A,R7
002971 9480              SUBB    A,#080H
002973 EE                MOV     A,R6
002974 6480              XRL     A,#080H
002976 9480              SUBB    A,#080H
002978 4002              JC      ?C0025?BT_IPC
  109: 	return false;
00297A D3                SETB    C
00297B 22                RET     
00297C         ?C0025?BT_IPC:
  110: }
00297C C3                CLR     C
  110: 
00297D 22                RET     
----- FUNCTION _BT_CmdFifoFull (END) -------


----- FUNCTION _BT_EventFifoOut (BEGIN) -----
 FILE: 'BT_IPC.c'
   43: void BT_EventFifoOut(BT_EVENTFIFO_t * event)
   44: {
00297E 904E24            MOV     DPTR,#event
002981 EB                MOV     A,R3
002982 F0                MOVX    @DPTR,A
002983 A3                INC     DPTR
002984 EA                MOV     A,R2
002985 F0                MOVX    @DPTR,A
002986 A3                INC     DPTR
002987 E9                MOV     A,R1
002988 F0                MOVX    @DPTR,A
   45: 	u16_t new_rprt,i;
   46: 	u8_t event_prefix;
   47: 	if(BT_GetEvtFifoDepth()>2)
002989 5181              ACALL   BT_GetEvtFifoDepth
00298B EF                MOV     A,R7
00298C D3                SETB    C
00298D 9402              SUBB    A,#02H
00298F 5002              JNC     $ + 4H
002991 4172              AJMP    ?C0011?BT_IPC
   48: 	{//event is not empty
   49: 		new_rprt = ESWAP(BT_EventRptr);
002993 904A05            MOV     DPTR,#BT_EventRptr+01H
002996 E0                MOVX    A,@DPTR
002997 FC                MOV     R4,A
002998 904A04            MOV     DPTR,#BT_EventRptr
00299B E0                MOVX    A,@DPTR
00299C FF                MOV     R7,A
00299D EC                MOV     A,R4
00299E FE                MOV     R6,A
00299F EF                MOV     A,R7
0029A0 904E27            MOV     DPTR,#new_rprt
0029A3 EE                MOV     A,R6
0029A4 F0                MOVX    @DPTR,A
0029A5 A3                INC     DPTR
0029A6 EF                MOV     A,R7
0029A7 F0                MOVX    @DPTR,A
   50: 		event_prefix = HREAD(new_rprt++);
0029A8 904E27            MOV     DPTR,#new_rprt
0029AB E4                CLR     A
0029AC 75F001            MOV     B,#01H
0029AF 1201C8            LCALL   ?C?ILDIX
0029B2 85F082            MOV     DPL,B
0029B5 F583              MOV     DPH,A
0029B7 E0                MOVX    A,@DPTR
0029B8 FF                MOV     R7,A
;---- Variable 'event_prefix' assigned to Register 'R7' ----
   51: 		if(event_prefix == CS_PREFIX_EVENT) {
0029B9 64C6              XRL     A,#0C6H
0029BB 6002              JZ      $ + 4H
0029BD 414D              AJMP    ?C0012?BT_IPC
   52: 			event->len = HREAD(new_rprt++);
0029BF 904E27            MOV     DPTR,#new_rprt
0029C2 75F001            MOV     B,#01H
0029C5 1201C8            LCALL   ?C?ILDIX
0029C8 85F082            MOV     DPL,B
0029CB F583              MOV     DPH,A
0029CD E0                MOVX    A,@DPTR
0029CE FF                MOV     R7,A
0029CF 904E24            MOV     DPTR,#event
0029D2 E0                MOVX    A,@DPTR
0029D3 FB                MOV     R3,A
0029D4 A3                INC     DPTR
0029D5 E0                MOVX    A,@DPTR
0029D6 FA                MOV     R2,A
0029D7 A3                INC     DPTR
0029D8 E0                MOVX    A,@DPTR
0029D9 F9                MOV     R1,A
0029DA EF                MOV     A,R7
0029DB 12013F            LCALL   ?C?CSTPTR
   53: 			if( new_rprt == (mem_event_buf_end+1) )
0029DE 904E27            MOV     DPTR,#new_rprt
0029E1 E0                MOVX    A,@DPTR
0029E2 B4500F            CJNE    A,#050H,?C0013?BT_IPC
0029E5 A3                INC     DPTR
0029E6 E0                MOVX    A,@DPTR
0029E7 B4000A            CJNE    A,#00H,?C0013?BT_IPC
   54: 			{
   55: 				new_rprt = mem_event_buf;
0029EA 904E27            MOV     DPTR,#new_rprt
0029ED 744F              MOV     A,#04FH
0029EF F0                MOVX    @DPTR,A
0029F0 A3                INC     DPTR
0029F1 7480              MOV     A,#080H
0029F3 F0                MOVX    @DPTR,A
   56: 			}
0029F4         ?C0013?BT_IPC:
   57: 			for(i=0;i<event->len;i++)
;---- Variable 'i' assigned to Register 'R6/R7' ----
0029F4 E4                CLR     A
0029F5 FF                MOV     R7,A
0029F6 FE                MOV     R6,A
0029F7         ?C0014?BT_IPC:
0029F7 904E24            MOV     DPTR,#event
0029FA E0                MOVX    A,@DPTR
0029FB FB                MOV     R3,A
0029FC A3                INC     DPTR
0029FD E0                MOVX    A,@DPTR
0029FE FA                MOV     R2,A
0029FF A3                INC     DPTR
002A00 E0                MOVX    A,@DPTR
002A01 F9                MOV     R1,A
002A02 1200F9            LCALL   ?C?CLDPTR
002A05 FD                MOV     R5,A
002A06 C3                CLR     C
002A07 EF                MOV     A,R7
002A08 9D                SUBB    A,R5
002A09 EE                MOV     A,R6
002A0A 9400              SUBB    A,#00H
002A0C 504E              JNC     ?C0018?BT_IPC
   58: 			{
   59: 				event->DATA[i] = HREAD(new_rprt++);
002A0E 904E27            MOV     DPTR,#new_rprt
002A11 E4                CLR     A
002A12 75F001            MOV     B,#01H
002A15 1201C8            LCALL   ?C?ILDIX
002A18 85F082            MOV     DPL,B
002A1B F583              MOV     DPH,A
002A1D E0                MOVX    A,@DPTR
002A1E FD                MOV     R5,A
002A1F E9                MOV     A,R1
002A20 2401              ADD     A,#01H
002A22 F9                MOV     R1,A
002A23 E4                CLR     A
002A24 3A                ADDC    A,R2
002A25 FA                MOV     R2,A
002A26 E9                MOV     A,R1
002A27 2F                ADD     A,R7
002A28 F9                MOV     R1,A
002A29 EA                MOV     A,R2
002A2A 3E                ADDC    A,R6
002A2B FA                MOV     R2,A
002A2C ED                MOV     A,R5
002A2D 12013F            LCALL   ?C?CSTPTR
   60: 				if( new_rprt == (mem_event_buf_end+1) )
002A30 904E27            MOV     DPTR,#new_rprt
002A33 E0                MOVX    A,@DPTR
002A34 B4500F            CJNE    A,#050H,?C0016?BT_IPC
002A37 A3                INC     DPTR
002A38 E0                MOVX    A,@DPTR
002A39 B4000A            CJNE    A,#00H,?C0016?BT_IPC
   61: 				{
   62: 					new_rprt = mem_event_buf;
002A3C 904E27            MOV     DPTR,#new_rprt
002A3F 744F              MOV     A,#04FH
002A41 F0                MOVX    @DPTR,A
002A42 A3                INC     DPTR
002A43 7480              MOV     A,#080H
002A45 F0                MOVX    @DPTR,A
   63: 				}
   64: 			}
002A46         ?C0016?BT_IPC:
002A46 0F                INC     R7
002A47 BF0001            CJNE    R7,#00H,?C0033?BT_IPC
002A4A 0E                INC     R6
002A4B         ?C0033?BT_IPC:
002A4B 80AA              SJMP    ?C0014?BT_IPC
   65: 		}
002A4D         ?C0012?BT_IPC:
   66: 		else {
   67: 			event->len = 0;
002A4D 904E24            MOV     DPTR,#event
002A50 E0                MOVX    A,@DPTR
002A51 FB                MOV     R3,A
002A52 A3                INC     DPTR
002A53 E0                MOVX    A,@DPTR
002A54 FA                MOV     R2,A
002A55 A3                INC     DPTR
002A56 E0                MOVX    A,@DPTR
002A57 F9                MOV     R1,A
002A58 E4                CLR     A
002A59 12013F            LCALL   ?C?CSTPTR
   68: 		}
002A5C         ?C0018?BT_IPC:
   69: 		BT_EventRptr = ESWAP(new_rprt);
002A5C 904E27            MOV     DPTR,#new_rprt
002A5F E0                MOVX    A,@DPTR
002A60 FC                MOV     R4,A
002A61 A3                INC     DPTR
002A62 E0                MOVX    A,@DPTR
002A63 FA                MOV     R2,A
002A64 EC                MOV     A,R4
002A65 FF                MOV     R7,A
002A66 EA                MOV     A,R2
002A67 FE                MOV     R6,A
002A68 EF                MOV     A,R7
002A69 904A04            MOV     DPTR,#BT_EventRptr
002A6C EE                MOV     A,R6
002A6D F0                MOVX    @DPTR,A
002A6E A3                INC     DPTR
002A6F EF                MOV     A,R7
002A70 F0                MOVX    @DPTR,A
   70: 	}
002A71 22                RET     
002A72         ?C0011?BT_IPC:
   71: 	else
   72: 	{
   73: 		event->len = 0;
002A72 904E24            MOV     DPTR,#event
002A75 E0                MOVX    A,@DPTR
002A76 FB                MOV     R3,A
002A77 A3                INC     DPTR
002A78 E0                MOVX    A,@DPTR
002A79 FA                MOV     R2,A
002A7A A3                INC     DPTR
002A7B E0                MOVX    A,@DPTR
002A7C F9                MOV     R1,A
002A7D E4                CLR     A
002A7E 02013F            LJMP    ?C?CSTPTR
   74: 	}
----- FUNCTION _BT_EventFifoOut (END) -------


----- FUNCTION BT_GetEvtFifoDepth (BEGIN) -----
 FILE: 'BT_IPC.c'
   87: u8_t BT_GetEvtFifoDepth(void)
   88: {
   89: 	u16_t wptr,rptr,len;
   90: 	wptr = ESWAP(BT_EventWptr);
002A81 904A07            MOV     DPTR,#BT_EventWptr+01H
002A84 E0                MOVX    A,@DPTR
002A85 FC                MOV     R4,A
002A86 904A06            MOV     DPTR,#BT_EventWptr
002A89 E0                MOVX    A,@DPTR
002A8A FF                MOV     R7,A
002A8B EC                MOV     A,R4
002A8C EF                MOV     A,R7
;---- Variable 'wptr' assigned to Register 'R4/R5' ----
002A8D FD                MOV     R5,A
   91: 	rptr = ESWAP(BT_EventRptr);
002A8E 904A05            MOV     DPTR,#BT_EventRptr+01H
002A91 E0                MOVX    A,@DPTR
002A92 FA                MOV     R2,A
002A93 904A04            MOV     DPTR,#BT_EventRptr
002A96 E0                MOVX    A,@DPTR
002A97 FF                MOV     R7,A
002A98 EA                MOV     A,R2
002A99 FE                MOV     R6,A
002A9A EF                MOV     A,R7
;---- Variable 'rptr' assigned to Register 'R6/R7' ----
   92: 	len = (wptr + BT_EVT_BUF_LEN - rptr)&(BT_EVT_BUF_LEN-1);
002A9B ED                MOV     A,R5
002A9C 2480              ADD     A,#080H
002A9E FD                MOV     R5,A
002A9F E4                CLR     A
002AA0 3C                ADDC    A,R4
002AA1 FC                MOV     R4,A
002AA2 C3                CLR     C
002AA3 ED                MOV     A,R5
002AA4 9F                SUBB    A,R7
002AA5 FF                MOV     R7,A
002AA6 EC                MOV     A,R4
002AA7 9E                SUBB    A,R6
002AA8 7E00              MOV     R6,#00H
002AAA EF                MOV     A,R7
002AAB 547F              ANL     A,#07FH
002AAD FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R6/R7' ----
   93: 	return len&0xff;
   94: }
002AAE 22                RET     
----- FUNCTION BT_GetEvtFifoDepth (END) -------


----- FUNCTION YC_Ice_break (BEGIN) -----
 FILE: 'YC_Utilities.c'
    4: void YC_Ice_break()
    5: {
    6: 	CPUB_ICE_CTRL = 1;
    7: 	return;
002AAF 908280            MOV     DPTR,#08280H
002AB2 7401              MOV     A,#01H
002AB4 F0                MOVX    @DPTR,A
    8: }
002AB5 22                RET     
----- FUNCTION YC_Ice_break (END) -------


----- FUNCTION _cmemcpy (BEGIN) -----
 FILE: 'YC_Utilities.c'
   28: void cmemcpy(pxbyte dest, const u8_t* src, u8_t len) small
   29: {
002AB6 8E21              MOV     dest,R6
002AB8 8F22              MOV     dest+01H,R7
002ABA 8B23              MOV     src,R3
002ABC 8A24              MOV     src+01H,R2
002ABE 8925              MOV     src+02H,R1
002AC0         ?C0011?YC_UTILITIES:
   30: 	while(len--)
002AC0 AF26              MOV     R7,len
002AC2 1526              DEC     len
002AC4 EF                MOV     A,R7
002AC5 6025              JZ      ?C0013?YC_UTILITIES
   31: 		*dest++ = (u8_t)(*src++);
002AC7 AB23              MOV     R3,src
002AC9 0525              INC     src+02H
002ACB E525              MOV     A,src+02H
002ACD AA24              MOV     R2,src+01H
002ACF 7002              JNZ     ?C0049?YC_UTILITIES
002AD1 0524              INC     src+01H
002AD3         ?C0049?YC_UTILITIES:
002AD3 14                DEC     A
002AD4 F9                MOV     R1,A
002AD5 1200F9            LCALL   ?C?CLDPTR
002AD8 FF                MOV     R7,A
002AD9 0522              INC     dest+01H
002ADB E522              MOV     A,dest+01H
002ADD AC21              MOV     R4,dest
002ADF 7002              JNZ     ?C0050?YC_UTILITIES
002AE1 0521              INC     dest
002AE3         ?C0050?YC_UTILITIES:
002AE3 14                DEC     A
002AE4 F582              MOV     DPL,A
002AE6 8C83              MOV     DPH,R4
002AE8 EF                MOV     A,R7
002AE9 F0                MOVX    @DPTR,A
002AEA 80D4              SJMP    ?C0011?YC_UTILITIES
   32: 	return;
   33: }
002AEC         ?C0013?YC_UTILITIES:
002AEC 22                RET     
----- FUNCTION _cmemcpy (END) -------


----- FUNCTION _YC_MemCheckEmpty (BEGIN) -----
 FILE: 'YC_Utilities.c'
   34: bool YC_MemCheckEmpty(u8_t *mem, u8_t len)
   35: {
002AED 904E32            MOV     DPTR,#mem
002AF0 EB                MOV     A,R3
002AF1 F0                MOVX    @DPTR,A
002AF2 A3                INC     DPTR
002AF3 EA                MOV     A,R2
002AF4 F0                MOVX    @DPTR,A
002AF5 A3                INC     DPTR
002AF6 E9                MOV     A,R1
002AF7 F0                MOVX    @DPTR,A
002AF8 A3                INC     DPTR
002AF9 ED                MOV     A,R5
002AFA F0                MOVX    @DPTR,A
   36: 	int i;
   37: 	for(i=0;i<len;i++)
;---- Variable 'i' assigned to Register 'R6/R7' ----
002AFB E4                CLR     A
002AFC FF                MOV     R7,A
002AFD FE                MOV     R6,A
002AFE         ?C0014?YC_UTILITIES:
002AFE 904E35            MOV     DPTR,#len
002B01 E0                MOVX    A,@DPTR
002B02 FD                MOV     R5,A
002B03 C3                CLR     C
002B04 EF                MOV     A,R7
002B05 9D                SUBB    A,R5
002B06 7480              MOV     A,#080H
002B08 F8                MOV     R0,A
002B09 6E                XRL     A,R6
002B0A 98                SUBB    A,R0
002B0B 5034              JNC     ?C0015?YC_UTILITIES
   38: 	{
   39: 		if(mem[i])
002B0D 904E32            MOV     DPTR,#mem
002B10 E0                MOVX    A,@DPTR
002B11 FB                MOV     R3,A
002B12 A3                INC     DPTR
002B13 E0                MOVX    A,@DPTR
002B14 FA                MOV     R2,A
002B15 A3                INC     DPTR
002B16 E0                MOVX    A,@DPTR
002B17 F9                MOV     R1,A
002B18 8F82              MOV     DPL,R7
002B1A 8E83              MOV     DPH,R6
002B1C 120112            LCALL   ?C?CLDOPTR
002B1F FD                MOV     R5,A
002B20 701F              JNZ     ?C0015?YC_UTILITIES
   40: 		{
   41: 			break;
   42: 		}
002B22         ?C0017?YC_UTILITIES:
   43: 		if(i==(len-1)&&mem[i]==0)
002B22 904E35            MOV     DPTR,#len
002B25 E0                MOVX    A,@DPTR
002B26 24FF              ADD     A,#0FFH
002B28 FB                MOV     R3,A
002B29 E4                CLR     A
002B2A 34FF              ADDC    A,#0FFH
002B2C FA                MOV     R2,A
002B2D EB                MOV     A,R3
002B2E B50709            CJNE    A,AR7,?C0016?YC_UTILITIES
002B31 EA                MOV     A,R2
002B32 B50605            CJNE    A,AR6,?C0016?YC_UTILITIES
002B35 ED                MOV     A,R5
002B36 7002              JNZ     ?C0016?YC_UTILITIES
   44: 		{
   45: 			return 0;
002B38 C3                CLR     C
002B39 22                RET     
   46: 		}
   47: 	}
002B3A         ?C0016?YC_UTILITIES:
002B3A 0F                INC     R7
002B3B BF0001            CJNE    R7,#00H,?C0052?YC_UTILITIES
002B3E 0E                INC     R6
002B3F         ?C0052?YC_UTILITIES:
002B3F 80BD              SJMP    ?C0014?YC_UTILITIES
002B41         ?C0015?YC_UTILITIES:
   48: 	return 1;
002B41 D3                SETB    C
   49: }
002B42 22                RET     
----- FUNCTION _YC_MemCheckEmpty (END) -------


----- FUNCTION _YC_Delay1S (BEGIN) -----
 FILE: 'YC_Utilities.c'
   69: void YC_Delay1S(u8_t Time)
   70: {
;---- Variable 'Time' assigned to Register 'R7' ----
   71: 	u16_t j,k;
   72: 	for(;Time>0;Time--)
002B43         ?C0034?YC_UTILITIES:
002B43 EF                MOV     A,R7
002B44 D3                SETB    C
002B45 9400              SUBB    A,#00H
002B47 401F              JC      ?C0043?YC_UTILITIES
   73: 	{
   74: 		for(j=0;j<1000;j++)
;---- Variable 'j' assigned to Register 'R4/R5' ----
002B49 E4                CLR     A
002B4A FD                MOV     R5,A
002B4B FC                MOV     R4,A
002B4C         ?C0037?YC_UTILITIES:
   75: 		{
   76: 			for(k=0;k<1150;k++);
;---- Variable 'k' assigned to Register 'R2/R3' ----
002B4C E4                CLR     A
002B4D FB                MOV     R3,A
002B4E FA                MOV     R2,A
002B4F         ?C0040?YC_UTILITIES:
002B4F 0B                INC     R3
002B50 BB0001            CJNE    R3,#00H,?C0055?YC_UTILITIES
002B53 0A                INC     R2
002B54         ?C0055?YC_UTILITIES:
002B54 BA04F8            CJNE    R2,#04H,?C0040?YC_UTILITIES
002B57 BB7EF5            CJNE    R3,#07EH,?C0040?YC_UTILITIES
   77: 		}
002B5A         ?C0039?YC_UTILITIES:
002B5A 0D                INC     R5
002B5B BD0001            CJNE    R5,#00H,?C0056?YC_UTILITIES
002B5E 0C                INC     R4
002B5F         ?C0056?YC_UTILITIES:
002B5F BC03EA            CJNE    R4,#03H,?C0037?YC_UTILITIES
002B62 BDE8E7            CJNE    R5,#0E8H,?C0037?YC_UTILITIES
   78: 	}
002B65         ?C0036?YC_UTILITIES:
002B65 1F                DEC     R7
002B66 80DB              SJMP    ?C0034?YC_UTILITIES
   79: }
002B68         ?C0043?YC_UTILITIES:
002B68 22                RET     
----- FUNCTION _YC_Delay1S (END) -------


----- FUNCTION CS_Scale_WeightProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  198: void CS_Scale_WeightProc(void)
  199: {
  200: 	u16_t	R_AD_BUF;
  201: 	
  202: 	R_AD_BUF = CS_Scale_GetDeltaAD(GetDeltaAD);
002B69 E4                CLR     A
002B6A FF                MOV     R7,A
002B6B 1217EF            LCALL   _CS_Scale_GetDeltaAD
;---- Variable 'R_AD_BUF' assigned to Register 'R6/R7' ----
  203: 	R_AD_BUF = CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
002B6E AD07              MOV     R5,AR7
002B70 AC06              MOV     R4,AR6
002B72 E4                CLR     A
002B73 FF                MOV     R7,A
002B74 12313D            LCALL   _CS_Scale_AdcFilter
  204: 	CS_Scale_GetWeight(R_AD_BUF);
002B77 F1EC              ACALL   _CS_Scale_GetWeight
  205: 	CS_Scale_ZeroProc(RunningZero,0);
002B79 E4                CLR     A
002B7A FD                MOV     R5,A
002B7B FC                MOV     R4,A
002B7C 7F07              MOV     R7,#07H
002B7E 1212FB            LCALL   _CS_Scale_ZeroProc
  206: 	CS_Scale_LockProc(LockProcRun);
002B81 E4                CLR     A
002B82 FF                MOV     R7,A
002B83 F16C              ACALL   _CS_Scale_LockProc
  207: 	CS_Scale_JudgeOverLoad(0);
002B85 E4                CLR     A
002B86 FF                MOV     R7,A
002B87 F121              ACALL   _CS_Scale_JudgeOverLoad
  208: 	CS_Scale_JudgeLowBat(0);
002B89 E4                CLR     A
002B8A FF                MOV     R7,A
002B8B F1DA              ACALL   _CS_Scale_JudgeLowBat
  209: 	CS_Scale_JudgeSteady(JudgeSteadyRun);
002B8D E4                CLR     A
002B8E FF                MOV     R7,A
;----                  JMP     _CS_Scale_JudgeSteady
  210: 	
----- FUNCTION CS_Scale_WeightProc (END) -------


----- FUNCTION _CS_Scale_JudgeSteady (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  672: u8_t CS_Scale_JudgeSteady(u8_t option)
  673: {
;---- Variable 'option' assigned to Register 'R7' ----
  674: 
  675: 	u16_t	weight_temp;
  676: 	u16_t	R_Weight_Temp;
  677: 	static	u16_t xdata R_Weight_kg_old;
  678: 	static	u8_t	  xdata R_Weight_SameTimes;
  679: 	static	u8_t xdata B_Weight_SmallSteady;		//小重量稳定标志
  680: 	static	u8_t xdata B_Weight_HeavySteady;	//大重量稳定标志
  681: 	
  682: 	if(option==ResetSteady)
002B8F EF                MOV     A,R7
002B90 B4010B            CJNE    A,#01H,?C0092?CS_SCALE_PROC
  683: 		{
  684: 		R_Weight_SameTimes = 0;
002B93 E4                CLR     A
002B94 904CA4            MOV     DPTR,#R_Weight_SameTimes
002B97 F0                MOVX    @DPTR,A
  685: 		B_Weight_SmallSteady = false;
002B98 A3                INC     DPTR
002B99 F0                MOVX    @DPTR,A
  686: 		B_Weight_HeavySteady = false;
002B9A A3                INC     DPTR
002B9B F0                MOVX    @DPTR,A
  687: 		return 0;
002B9C FF                MOV     R7,A
002B9D 22                RET     
  688: 		}	
002B9E         ?C0092?CS_SCALE_PROC:
  689: 
  690: 	if(option==GetIfSmallSteady)
002B9E EF                MOV     A,R7
002B9F B40206            CJNE    A,#02H,?C0094?CS_SCALE_PROC
  691: 		return B_Weight_SmallSteady;
002BA2 904CA5            MOV     DPTR,#B_Weight_SmallSteady
002BA5 E0                MOVX    A,@DPTR
002BA6 FF                MOV     R7,A
002BA7 22                RET     
002BA8         ?C0094?CS_SCALE_PROC:
  692: 
  693: 	if(option==GetIfHeavySteady)
002BA8 EF                MOV     A,R7
002BA9 B40306            CJNE    A,#03H,?C0095?CS_SCALE_PROC
  694: 		return B_Weight_HeavySteady;
002BAC 904CA6            MOV     DPTR,#B_Weight_HeavySteady
002BAF E0                MOVX    A,@DPTR
002BB0 FF                MOV     R7,A
002BB1 22                RET     
002BB2         ?C0095?CS_SCALE_PROC:
  695: 	
  696: 	if(CS_Scale_LockProc(GetIfLock)==false)
002BB2 7F02              MOV     R7,#02H
002BB4 F16C              ACALL   _CS_Scale_LockProc
002BB6 EF                MOV     A,R7
002BB7 6002              JZ      $ + 4H
002BB9 81F2              AJMP    ?C0096?CS_SCALE_PROC
  697: 		{
  698: 	
  699: 		if(R_UnitWeight.origin > R_Weight_kg_old)
002BBB 904CA2            MOV     DPTR,#R_Weight_kg_old
002BBE E0                MOVX    A,@DPTR
002BBF FE                MOV     R6,A
002BC0 A3                INC     DPTR
002BC1 E0                MOVX    A,@DPTR
002BC2 FF                MOV     R7,A
002BC3 904CC9            MOV     DPTR,#R_UnitWeight
002BC6 E0                MOVX    A,@DPTR
002BC7 FC                MOV     R4,A
002BC8 A3                INC     DPTR
002BC9 E0                MOVX    A,@DPTR
002BCA FD                MOV     R5,A
002BCB D3                SETB    C
002BCC 9F                SUBB    A,R7
002BCD EC                MOV     A,R4
002BCE 9E                SUBB    A,R6
002BCF 400E              JC      ?C0097?CS_SCALE_PROC
  700: 			weight_temp = R_UnitWeight.origin -R_Weight_kg_old;
002BD1 ED                MOV     A,R5
002BD2 9F                SUBB    A,R7
002BD3 FF                MOV     R7,A
002BD4 EC                MOV     A,R4
002BD5 9E                SUBB    A,R6
002BD6 904E36            MOV     DPTR,#weight_temp
002BD9 F0                MOVX    @DPTR,A
002BDA A3                INC     DPTR
002BDB EF                MOV     A,R7
002BDC F0                MOVX    @DPTR,A
002BDD 801B              SJMP    ?C0098?CS_SCALE_PROC
002BDF         ?C0097?CS_SCALE_PROC:
  701: 		else
  702: 			weight_temp = R_Weight_kg_old -R_UnitWeight.origin;
002BDF 904CC9            MOV     DPTR,#R_UnitWeight
002BE2 E0                MOVX    A,@DPTR
002BE3 FE                MOV     R6,A
002BE4 A3                INC     DPTR
002BE5 E0                MOVX    A,@DPTR
002BE6 FF                MOV     R7,A
002BE7 C3                CLR     C
002BE8 904CA3            MOV     DPTR,#R_Weight_kg_old+01H
002BEB E0                MOVX    A,@DPTR
002BEC 9F                SUBB    A,R7
002BED FF                MOV     R7,A
002BEE 904CA2            MOV     DPTR,#R_Weight_kg_old
002BF1 E0                MOVX    A,@DPTR
002BF2 9E                SUBB    A,R6
002BF3 904E36            MOV     DPTR,#weight_temp
002BF6 F0                MOVX    @DPTR,A
002BF7 A3                INC     DPTR
002BF8 EF                MOV     A,R7
002BF9 F0                MOVX    @DPTR,A
002BFA         ?C0098?CS_SCALE_PROC:
  703: 		
  704: 		if(weight_temp <  CS_Scale_SameWeightRange)
002BFA C3                CLR     C
002BFB 904E37            MOV     DPTR,#weight_temp+01H
002BFE E0                MOVX    A,@DPTR
002BFF 9414              SUBB    A,#014H
002C01 904E36            MOV     DPTR,#weight_temp
002C04 E0                MOVX    A,@DPTR
002C05 9400              SUBB    A,#00H
002C07 500E              JNC     ?C0099?CS_SCALE_PROC
  705: 			{
  706: 			if(R_Weight_SameTimes<255)
002C09 904CA4            MOV     DPTR,#R_Weight_SameTimes
002C0C E0                MOVX    A,@DPTR
002C0D C3                CLR     C
002C0E 94FF              SUBB    A,#0FFH
002C10 500A              JNC     ?C0101?CS_SCALE_PROC
  707: 				R_Weight_SameTimes++;
002C12 E0                MOVX    A,@DPTR
002C13 04                INC     A
002C14 F0                MOVX    @DPTR,A
  708: 			}
002C15 8005              SJMP    ?C0101?CS_SCALE_PROC
002C17         ?C0099?CS_SCALE_PROC:
  709: 		else
  710: 			R_Weight_SameTimes = 0;
002C17 E4                CLR     A
002C18 904CA4            MOV     DPTR,#R_Weight_SameTimes
002C1B F0                MOVX    @DPTR,A
002C1C         ?C0101?CS_SCALE_PROC:
  711: 	
  712: 		
  713: 		R_Weight_kg_old = R_UnitWeight.origin;
002C1C 904CC9            MOV     DPTR,#R_UnitWeight
002C1F E0                MOVX    A,@DPTR
002C20 FE                MOV     R6,A
002C21 A3                INC     DPTR
002C22 E0                MOVX    A,@DPTR
002C23 FF                MOV     R7,A
002C24 904CA2            MOV     DPTR,#R_Weight_kg_old
002C27 EE                MOV     A,R6
002C28 F0                MOVX    @DPTR,A
002C29 A3                INC     DPTR
002C2A EF                MOV     A,R7
002C2B F0                MOVX    @DPTR,A
  714: 
  715: 		B_Weight_SmallSteady = false;
002C2C E4                CLR     A
002C2D 904CA5            MOV     DPTR,#B_Weight_SmallSteady
002C30 F0                MOVX    @DPTR,A
  716: 		B_Weight_HeavySteady = false;
002C31 A3                INC     DPTR
002C32 F0                MOVX    @DPTR,A
  717: 		
  718: 		if(R_UnitWeight.origin < CS_Scale_MinLockWeight)
002C33 C3                CLR     C
002C34 EF                MOV     A,R7
002C35 94FA              SUBB    A,#0FAH
002C37 EE                MOV     A,R6
002C38 9400              SUBB    A,#00H
002C3A 5010              JNC     ?C0102?CS_SCALE_PROC
  719: 			{
  720: 			if(R_Weight_SameTimes>CS_SmallWeight_Steadytimes)
002C3C 904CA4            MOV     DPTR,#R_Weight_SameTimes
002C3F E0                MOVX    A,@DPTR
002C40 9406              SUBB    A,#06H
002C42 5002              JNC     $ + 4H
002C44 81F2              AJMP    ?C0096?CS_SCALE_PROC
  721: 				B_Weight_SmallSteady = true;		
002C46 A3                INC     DPTR
002C47 7401              MOV     A,#01H
002C49 F0                MOVX    @DPTR,A
  722: 			}
002C4A 81F2              AJMP    ?C0096?CS_SCALE_PROC
002C4C         ?C0102?CS_SCALE_PROC:
  723: 		else
  724: 			{			
  725: 			if(R_Weight_SameTimes>CS_BigWeight_Steadytimes)
002C4C 904CA4            MOV     DPTR,#R_Weight_SameTimes
002C4F E0                MOVX    A,@DPTR
002C50 D3                SETB    C
002C51 9406              SUBB    A,#06H
002C53 5002              JNC     $ + 4H
002C55 81F2              AJMP    ?C0096?CS_SCALE_PROC
  726: 				{
  727: 				B_Weight_HeavySteady = true;	
002C57 904CA6            MOV     DPTR,#B_Weight_HeavySteady
002C5A 7401              MOV     A,#01H
002C5C F0                MOVX    @DPTR,A
  728: 
  729: 				if(R_UnitWeight.origin>R_Weight_Mem)
002C5D 904CC3            MOV     DPTR,#R_Weight_Mem
002C60 E0                MOVX    A,@DPTR
002C61 FE                MOV     R6,A
002C62 A3                INC     DPTR
002C63 E0                MOVX    A,@DPTR
002C64 FF                MOV     R7,A
002C65 904CC9            MOV     DPTR,#R_UnitWeight
002C68 E0                MOVX    A,@DPTR
002C69 FC                MOV     R4,A
002C6A A3                INC     DPTR
002C6B E0                MOVX    A,@DPTR
002C6C FD                MOV     R5,A
002C6D D3                SETB    C
002C6E 9F                SUBB    A,R7
002C6F EC                MOV     A,R4
002C70 9E                SUBB    A,R6
002C71 400E              JC      ?C0106?CS_SCALE_PROC
  730: 				R_Weight_Temp = R_UnitWeight.origin -R_Weight_Mem;
002C73 ED                MOV     A,R5
002C74 9F                SUBB    A,R7
002C75 FF                MOV     R7,A
002C76 EC                MOV     A,R4
002C77 9E                SUBB    A,R6
002C78 904E38            MOV     DPTR,#R_Weight_Temp
002C7B F0                MOVX    @DPTR,A
002C7C A3                INC     DPTR
002C7D EF                MOV     A,R7
002C7E F0                MOVX    @DPTR,A
002C7F 801B              SJMP    ?C0107?CS_SCALE_PROC
002C81         ?C0106?CS_SCALE_PROC:
  731: 				else
  732: 				R_Weight_Temp = R_Weight_Mem - R_UnitWeight.origin;
002C81 904CC9            MOV     DPTR,#R_UnitWeight
002C84 E0                MOVX    A,@DPTR
002C85 FE                MOV     R6,A
002C86 A3                INC     DPTR
002C87 E0                MOVX    A,@DPTR
002C88 FF                MOV     R7,A
002C89 C3                CLR     C
002C8A 904CC4            MOV     DPTR,#R_Weight_Mem+01H
002C8D E0                MOVX    A,@DPTR
002C8E 9F                SUBB    A,R7
002C8F FF                MOV     R7,A
002C90 904CC3            MOV     DPTR,#R_Weight_Mem
002C93 E0                MOVX    A,@DPTR
002C94 9E                SUBB    A,R6
002C95 904E38            MOV     DPTR,#R_Weight_Temp
002C98 F0                MOVX    @DPTR,A
002C99 A3                INC     DPTR
002C9A EF                MOV     A,R7
002C9B F0                MOVX    @DPTR,A
002C9C         ?C0107?CS_SCALE_PROC:
  733: 
  734: 				//在记忆范围内记忆
  735: 				if(R_UnitWeight.origin > ScaleStartMemoryWeight)
002C9C D3                SETB    C
002C9D 904CCA            MOV     DPTR,#R_UnitWeight+01H
002CA0 E0                MOVX    A,@DPTR
002CA1 9458              SUBB    A,#058H
002CA3 904CC9            MOV     DPTR,#R_UnitWeight
002CA6 E0                MOVX    A,@DPTR
002CA7 9402              SUBB    A,#02H
002CA9 401D              JC      ?C0108?CS_SCALE_PROC
  736: 					{
  737: 					if(R_Weight_Temp<CS_MemoryRange)
002CAB 904E39            MOV     DPTR,#R_Weight_Temp+01H
002CAE E0                MOVX    A,@DPTR
002CAF 9419              SUBB    A,#019H
002CB1 904E38            MOV     DPTR,#R_Weight_Temp
002CB4 E0                MOVX    A,@DPTR
002CB5 9400              SUBB    A,#00H
002CB7 500F              JNC     ?C0108?CS_SCALE_PROC
  738: 					R_UnitWeight.origin = R_Weight_Mem;
002CB9 904CC3            MOV     DPTR,#R_Weight_Mem
002CBC E0                MOVX    A,@DPTR
002CBD FF                MOV     R7,A
002CBE A3                INC     DPTR
002CBF E0                MOVX    A,@DPTR
002CC0 904CC9            MOV     DPTR,#R_UnitWeight
002CC3 CF                XCH     A,R7
002CC4 F0                MOVX    @DPTR,A
002CC5 A3                INC     DPTR
002CC6 EF                MOV     A,R7
002CC7 F0                MOVX    @DPTR,A
  739: 					}
002CC8         ?C0108?CS_SCALE_PROC:
  740: 			
  741: 				R_Weight_Lock = R_UnitWeight.origin;
002CC8 904CC9            MOV     DPTR,#R_UnitWeight
002CCB E0                MOVX    A,@DPTR
002CCC FE                MOV     R6,A
002CCD A3                INC     DPTR
002CCE E0                MOVX    A,@DPTR
002CCF FF                MOV     R7,A
002CD0 904CC0            MOV     DPTR,#R_Weight_Lock
002CD3 EE                MOV     A,R6
002CD4 F0                MOVX    @DPTR,A
002CD5 A3                INC     DPTR
002CD6 EF                MOV     A,R7
002CD7 F0                MOVX    @DPTR,A
  742: 				R_Weight_Mem = R_UnitWeight.origin;
002CD8 904CC3            MOV     DPTR,#R_Weight_Mem
002CDB EE                MOV     A,R6
002CDC F0                MOVX    @DPTR,A
002CDD A3                INC     DPTR
002CDE EF                MOV     A,R7
002CDF F0                MOVX    @DPTR,A
  743: 				
  744: 				R_Scale_state = CS_Scale_state_locking;
002CE0 A3                INC     DPTR
002CE1 7404              MOV     A,#04H
002CE3 F0                MOVX    @DPTR,A
  745: 				CS_SoftTimer(ResetSoftTimer);		//软件定时器开始用于锁定闪显示计时
002CE4 7F02              MOV     R7,#02H
002CE6 120EE5            LCALL   _CS_SoftTimer
  746: 				CS_Scale_SteadyProc(SteadyProcReset);
002CE9 E4                CLR     A
002CEA FF                MOV     R7,A
002CEB 91F5              ACALL   _CS_Scale_SteadyProc
  747: 				CS_Scale_TimeOutProc(CS_Reset_AllTime);
002CED 7F06              MOV     R7,#06H
002CEF 123587            LCALL   _CS_Scale_TimeOutProc
  748: 				}
  749: 			}
  750: 		}
002CF2         ?C0096?CS_SCALE_PROC:
  751: 	return 0;
002CF2 7F00              MOV     R7,#00H
  752: }
002CF4 22                RET     
----- FUNCTION _CS_Scale_JudgeSteady (END) -------


----- FUNCTION _CS_Scale_SteadyProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  761: void CS_Scale_SteadyProc(u8_t option)
  762: {
;---- Variable 'option' assigned to Register 'R7' ----
  763: 	u16_t	R_AD_BUF;	
  764: 
  765: 	static	u8_t xdata B_Debug_Send;	
  766: 	static 	u8_t xdata ReadUTC;
  767: 	UserMeasureData SendData;
  768: 
  769: 	if(option==SteadyProcReset)
002CF5 EF                MOV     A,R7
002CF6 7005              JNZ     ?C0110?CS_SCALE_PROC
  770: 		{
  771: 		B_Debug_Send=false;
002CF8 904CA7            MOV     DPTR,#B_Debug_Send
002CFB F0                MOVX    @DPTR,A
002CFC 22                RET     
  772: 		return;
  773: 		}
002CFD         ?C0110?CS_SCALE_PROC:
  774: 	
  775: 	if(CS_SoftTimer(GetIfTimeOut) == true)	//锁定闪现时间到
002CFD 7F03              MOV     R7,#03H
002CFF 120EE5            LCALL   _CS_SoftTimer
002D02 EF                MOV     A,R7
002D03 6401              XRL     A,#01H
002D05 6002              JZ      $ + 4H
002D07 A198              AJMP    ?C0111?CS_SCALE_PROC
  776: 		{
  777: 		if(CS_Scale_JudgeSteady(GetIfHeavySteady) == true)
002D09 7F03              MOV     R7,#03H
002D0B 718F              ACALL   _CS_Scale_JudgeSteady
002D0D BF0112            CJNE    R7,#01H,?C0113?CS_SCALE_PROC
  778: 			{
  779: 			
  780: 			CS_Scale_JudgeSteady(ResetSteady);
002D10 7F01              MOV     R7,#01H
002D12 718F              ACALL   _CS_Scale_JudgeSteady
  781: 		
  782: 			CS_Scale_ZeroProc(ClrLockDownCheckFlag,0);
002D14 E4                CLR     A
002D15 FD                MOV     R5,A
002D16 FC                MOV     R4,A
002D17 7F08              MOV     R7,#08H
002D19 1212FB            LCALL   _CS_Scale_ZeroProc
  783: 			ReadUTC = false;	//初始化读ADC
002D1C E4                CLR     A
002D1D 904CA8            MOV     DPTR,#ReadUTC
002D20 F0                MOVX    @DPTR,A
  784: 			}
002D21 22                RET     
002D22         ?C0113?CS_SCALE_PROC:
  785: 		else
  786: 			{
  787: 			
  788: 			/*
  789: 			if(wechatStatus == WECHAT_ST_OK&&B_Debug_Send==false)
  790: 				{
  791: 				sendMeasureData();
  792: 				B_Debug_Send=true;
  793: 				}
  794: 			*/		
  795: 			if(B_Debug_Send==false)
002D22 904CA7            MOV     DPTR,#B_Debug_Send
002D25 E0                MOVX    A,@DPTR
002D26 705D              JNZ     ?C0115?CS_SCALE_PROC
  796: 				{
  797: 				
  798: 				if(ReadUTC==false)
002D28 A3                INC     DPTR
002D29 E0                MOVX    A,@DPTR
002D2A 7006              JNZ     ?C0116?CS_SCALE_PROC
  799: 					{
  800: 					ReadUTC=true;
002D2C 04                INC     A
002D2D F0                MOVX    @DPTR,A
  801: 					CS_Scale_1186ComSend(CS_CommTo1186_ReadTime);	
002D2E 7F82              MOV     R7,#082H
002D30 B199              ACALL   _CS_Scale_1186ComSend
  802: 					}
002D32         ?C0116?CS_SCALE_PROC:
  803: 				
  804: 				if(CS_If1186ComSucess()==true)
002D32 D187              ACALL   CS_If1186ComSucess
002D34 EF                MOV     A,R7
002D35 6401              XRL     A,#01H
002D37 705F              JNZ     ?C0111?CS_SCALE_PROC
  805: 					{
  806: 					
  807: 					
  808: 					ReadUTC=false;
002D39 904CA8            MOV     DPTR,#ReadUTC
002D3C F0                MOVX    @DPTR,A
  809: 					
  810: 					SendData.UTCTime[0]=R_1186_RTC[0];
002D3D 904CD3            MOV     DPTR,#R_1186_RTC
002D40 E0                MOVX    A,@DPTR
002D41 904E14            MOV     DPTR,#SendData+02H
002D44 F0                MOVX    @DPTR,A
  811: 					SendData.UTCTime[1]=R_1186_RTC[1];	
002D45 904CD4            MOV     DPTR,#R_1186_RTC+01H
002D48 E0                MOVX    A,@DPTR
002D49 904E15            MOV     DPTR,#SendData+03H
002D4C F0                MOVX    @DPTR,A
  812: 					SendData.UTCTime[2]=R_1186_RTC[2];	
002D4D 904CD5            MOV     DPTR,#R_1186_RTC+02H
002D50 E0                MOVX    A,@DPTR
002D51 904E16            MOV     DPTR,#SendData+04H
002D54 F0                MOVX    @DPTR,A
  813: 					SendData.UTCTime[3]=R_1186_RTC[3];	
002D55 904CD6            MOV     DPTR,#R_1186_RTC+03H
002D58 E0                MOVX    A,@DPTR
002D59 904E17            MOV     DPTR,#SendData+05H
002D5C F0                MOVX    @DPTR,A
  814: 					SendData.weight=ESWAP(R_UnitWeight.origin);
002D5D 904CC9            MOV     DPTR,#R_UnitWeight
002D60 E0                MOVX    A,@DPTR
002D61 FC                MOV     R4,A
002D62 A3                INC     DPTR
002D63 E0                MOVX    A,@DPTR
002D64 FA                MOV     R2,A
002D65 EC                MOV     A,R4
002D66 FF                MOV     R7,A
002D67 EA                MOV     A,R2
002D68 FE                MOV     R6,A
002D69 EF                MOV     A,R7
002D6A 904E12            MOV     DPTR,#SendData
002D6D EE                MOV     A,R6
002D6E F0                MOVX    @DPTR,A
002D6F A3                INC     DPTR
002D70 EF                MOV     A,R7
002D71 F0                MOVX    @DPTR,A
  815: 					QueuePush(&SendData);
002D72 7B01              MOV     R3,#01H
002D74 7A4E              MOV     R2,#HIGH SendData
002D76 7912              MOV     R1,#LOW SendData
002D78 123E62            LCALL   _QueuePush
  816: 					B_Debug_Send=true;
002D7B 904CA7            MOV     DPTR,#B_Debug_Send
002D7E 7401              MOV     A,#01H
002D80 F0                MOVX    @DPTR,A
  817: 
  818: 					CS_Scale_1186ComSend(CS_CommTo1186_ReadAd);
002D81 7F80              MOV     R7,#080H
002D83 8014              SJMP    _CS_Scale_1186ComSend
  819: 			
  820: 					//CS_SoftTimer(ResetSoftTimer);	
  821: 					
  822: 					}
  823: 				
  824: 				}
002D85         ?C0115?CS_SCALE_PROC:
  825: 			else
  826: 				{
  827: 				R_AD_BUF = CS_Scale_GetDeltaAD(GetDeltaAD);
002D85 E4                CLR     A
002D86 FF                MOV     R7,A
002D87 1217EF            LCALL   _CS_Scale_GetDeltaAD
;---- Variable 'R_AD_BUF' assigned to Register 'R6/R7' ----
  828: 				R_AD_BUF = CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
002D8A AD07              MOV     R5,AR7
002D8C AC06              MOV     R4,AR6
002D8E E4                CLR     A
002D8F FF                MOV     R7,A
002D90 12313D            LCALL   _CS_Scale_AdcFilter
  829: 				CS_Scale_GetWeight(R_AD_BUF);				
002D93 F1EC              ACALL   _CS_Scale_GetWeight
  830: 				CS_Scale_ReturnLock();
002D95 12351F            LCALL   CS_Scale_ReturnLock
  831: 				}
  832: 			}
  833: 		}
  834: 
  835: 			/*
  836: 			if(CS_SoftTimer(GetSoftTimerTime)<200)
  837: 				{
  838: 			R_Debug_temp=SendData.UTCTime;
  839: 			CS_ScaleDisplay_Debug();			
  840: 			return;
  841: 				}
  842: 			*/	
  843: 			/* B_Debug_Test =true;
  844: 			if(B_Debug_Test)
  845: 				{
  846: 				R_Debug_temp=888;
  847: 				CS_ScaleDisplay_Debug();
  848: 				while(1);
  849: 				}
  850: 			*/
  851: }
002D98         ?C0111?CS_SCALE_PROC:
002D98 22                RET     
----- FUNCTION _CS_Scale_SteadyProc (END) -------


----- FUNCTION _CS_Scale_1186ComSend (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   18: void CS_Scale_1186ComSend(u8_t com_comand)
   19: {
;---- Variable 'com_comand' assigned to Register 'R7' ----
   20: R_Weight_Com_Coo.sucess=false;
   21: R_Weight_Com_Coo.now = com_comand;
002D99 E4                CLR     A
002D9A 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
002D9D F0                MOVX    @DPTR,A
   22: }
002D9E 904D55            MOV     DPTR,#R_Weight_Com_Coo
002DA1 EF                MOV     A,R7
002DA2 F0                MOVX    @DPTR,A
   23: 
002DA3 22                RET     
----- FUNCTION _CS_Scale_1186ComSend (END) -------


----- FUNCTION CS_Scale_PowerOnProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1283: void CS_Scale_PowerOnProc(bool B_Reset)
 1284: {
 1285: 	static u8_t xdata comm_doing;
 1286: 	static u8_t xdata PowerOnState;
 1287: 	
 1288: 	
 1289: 	if(B_Reset)
002DA4 30000A            JNB     B_Reset,?C0184?CS_SCALE_PROC
 1290: 		{
 1291: 		PowerOnState=CS_PowerOn_State1_Reset;
002DA7 E4                CLR     A
002DA8 904CB7            MOV     DPTR,#PowerOnState
002DAB F0                MOVX    @DPTR,A
 1292: 		comm_doing=false;
002DAC 904CB6            MOV     DPTR,#comm_doing
002DAF F0                MOVX    @DPTR,A
002DB0 22                RET     
 1293: 		return;
 1294: 		}
002DB1         ?C0184?CS_SCALE_PROC:
 1295: 	
 1296: 	//-----------S1
 1297: 	if(PowerOnState==CS_PowerOn_State1_Reset)
002DB1 904CB7            MOV     DPTR,#PowerOnState
002DB4 E0                MOVX    A,@DPTR
002DB5 7016              JNZ     ?C0186?CS_SCALE_PROC
 1298: 		{
 1299: 		if(comm_doing==false)
002DB7 904CB6            MOV     DPTR,#comm_doing
002DBA E0                MOVX    A,@DPTR
002DBB 7008              JNZ     ?C0187?CS_SCALE_PROC
 1300: 			{
 1301: 			comm_doing=true;
002DBD 04                INC     A
002DBE F0                MOVX    @DPTR,A
 1302: 			CS_Scale_1186ComSend(CS_CommTo1186_Reset);
002DBF 7FC5              MOV     R7,#0C5H
002DC1 B199              ACALL   _CS_Scale_1186ComSend
 1303: 			}
002DC3 8008              SJMP    ?C0186?CS_SCALE_PROC
002DC5         ?C0187?CS_SCALE_PROC:
 1304: 		else
 1305: 			{
 1306: 			comm_doing=false;
002DC5 E4                CLR     A
002DC6 904CB6            MOV     DPTR,#comm_doing
002DC9 F0                MOVX    @DPTR,A
 1307: 			PowerOnState	= CS_PowerOn_State2_ReadOtp;
002DCA A3                INC     DPTR
002DCB 04                INC     A
002DCC F0                MOVX    @DPTR,A
 1308: 			}		
 1309: 		}
002DCD         ?C0186?CS_SCALE_PROC:
 1310: 	//-----------S2
 1311: 	if(PowerOnState==CS_PowerOn_State2_ReadOtp)
002DCD 904CB7            MOV     DPTR,#PowerOnState
002DD0 E0                MOVX    A,@DPTR
002DD1 B4011A            CJNE    A,#01H,?C0189?CS_SCALE_PROC
 1312: 		{
 1313: 		if(comm_doing==false)
002DD4 904CB6            MOV     DPTR,#comm_doing
002DD7 E0                MOVX    A,@DPTR
002DD8 7006              JNZ     ?C0190?CS_SCALE_PROC
 1314: 			{
 1315: 			comm_doing=true;
002DDA 04                INC     A
002DDB F0                MOVX    @DPTR,A
 1316: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadOtp);
002DDC 7F84              MOV     R7,#084H
002DDE B199              ACALL   _CS_Scale_1186ComSend
 1317: 			
 1318: 			}
002DE0         ?C0190?CS_SCALE_PROC:
 1319: 		if(CS_If1186ComSucess()==true)
002DE0 D187              ACALL   CS_If1186ComSucess
002DE2 BF0109            CJNE    R7,#01H,?C0189?CS_SCALE_PROC
 1320: 			{
 1321: 			comm_doing=false;
002DE5 E4                CLR     A
002DE6 904CB6            MOV     DPTR,#comm_doing
002DE9 F0                MOVX    @DPTR,A
 1322: 			PowerOnState =  CS_PowerOn_State3_ReadVersion;
002DEA A3                INC     DPTR
002DEB 7402              MOV     A,#02H
002DED F0                MOVX    @DPTR,A
 1323: 			}
 1324: 		}
002DEE         ?C0189?CS_SCALE_PROC:
 1325: 	//-----------S3
 1326: 	if(PowerOnState==CS_PowerOn_State3_ReadVersion)
002DEE 904CB7            MOV     DPTR,#PowerOnState
002DF1 E0                MOVX    A,@DPTR
002DF2 B40203            CJNE    A,#02H,?C0192?CS_SCALE_PROC
 1327: 		{
 1328: 		PowerOnState =  CS_PowerOn_State4_ReadTime;		
002DF5 7403              MOV     A,#03H
002DF7 F0                MOVX    @DPTR,A
 1329: 		}
002DF8         ?C0192?CS_SCALE_PROC:
 1330: 	//-----------S4
 1331: 	if(PowerOnState==CS_PowerOn_State4_ReadTime)
002DF8 904CB7            MOV     DPTR,#PowerOnState
002DFB E0                MOVX    A,@DPTR
002DFC B4031A            CJNE    A,#03H,?C0193?CS_SCALE_PROC
 1332: 		{
 1333: 		if(comm_doing==false)
002DFF 904CB6            MOV     DPTR,#comm_doing
002E02 E0                MOVX    A,@DPTR
002E03 7006              JNZ     ?C0194?CS_SCALE_PROC
 1334: 			{
 1335: 			comm_doing=true;
002E05 04                INC     A
002E06 F0                MOVX    @DPTR,A
 1336: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadTime);
002E07 7F82              MOV     R7,#082H
002E09 B199              ACALL   _CS_Scale_1186ComSend
 1337: 			}
002E0B         ?C0194?CS_SCALE_PROC:
 1338: 		if(CS_If1186ComSucess()==true)
002E0B D187              ACALL   CS_If1186ComSucess
002E0D BF0109            CJNE    R7,#01H,?C0193?CS_SCALE_PROC
 1339: 			{
 1340: 			comm_doing=false;
002E10 E4                CLR     A
002E11 904CB6            MOV     DPTR,#comm_doing
002E14 F0                MOVX    @DPTR,A
 1341: 			PowerOnState =  CS_PowerOn_State5_SetOpenWeight;	
002E15 A3                INC     DPTR
002E16 7404              MOV     A,#04H
002E18 F0                MOVX    @DPTR,A
 1342: 			}
 1343: 		}
002E19         ?C0193?CS_SCALE_PROC:
 1344: 	//-----------S5
 1345: 	if(PowerOnState==CS_PowerOn_State5_SetOpenWeight)
002E19 904CB7            MOV     DPTR,#PowerOnState
002E1C E0                MOVX    A,@DPTR
002E1D B4041A            CJNE    A,#04H,?C0196?CS_SCALE_PROC
 1346: 		{
 1347: 		if(comm_doing==false)
002E20 904CB6            MOV     DPTR,#comm_doing
002E23 E0                MOVX    A,@DPTR
002E24 7006              JNZ     ?C0197?CS_SCALE_PROC
 1348: 			{
 1349: 			comm_doing=true;
002E26 04                INC     A
002E27 F0                MOVX    @DPTR,A
 1350: 			CS_Scale_1186ComSend(CS_CommTo1186_SetOpenWeight);
002E28 7FA1              MOV     R7,#0A1H
002E2A B199              ACALL   _CS_Scale_1186ComSend
 1351: 			}
002E2C         ?C0197?CS_SCALE_PROC:
 1352: 		if(CS_If1186ComSucess()==true)
002E2C D187              ACALL   CS_If1186ComSucess
002E2E BF0109            CJNE    R7,#01H,?C0196?CS_SCALE_PROC
 1353: 			{
 1354: 			comm_doing=false;
002E31 E4                CLR     A
002E32 904CB6            MOV     DPTR,#comm_doing
002E35 F0                MOVX    @DPTR,A
 1355: 			PowerOnState =  CS_PowerOn_State6_ShowOpenPic;
002E36 A3                INC     DPTR
002E37 7405              MOV     A,#05H
002E39 F0                MOVX    @DPTR,A
 1356: 			}
 1357: 		}
002E3A         ?C0196?CS_SCALE_PROC:
 1358: 	//-----------S6
 1359: 	if(PowerOnState==CS_PowerOn_State6_ShowOpenPic)
002E3A 904CB7            MOV     DPTR,#PowerOnState
002E3D E0                MOVX    A,@DPTR
002E3E 6405              XRL     A,#05H
002E40 7028              JNZ     ?C0199?CS_SCALE_PROC
 1360: 		{
 1361: 		if(comm_doing==false)
002E42 904CB6            MOV     DPTR,#comm_doing
002E45 E0                MOVX    A,@DPTR
002E46 700F              JNZ     ?C0200?CS_SCALE_PROC
 1362: 			{
 1363: 			comm_doing=true;	
002E48 04                INC     A
002E49 F0                MOVX    @DPTR,A
 1364: 			CS_ScaleDisplay_FreshBuf(DisplayData,8888);
002E4A 7DB8              MOV     R5,#0B8H
002E4C 7C22              MOV     R4,#022H
002E4E 7F21              MOV     R7,#021H
002E50 121603            LCALL   _CS_ScaleDisplay_FreshBuf
 1365: 			CS_Scale_1186ComSend(CS_CommTo1186_LcdDisplay);
002E53 7FE0              MOV     R7,#0E0H
002E55 B199              ACALL   _CS_Scale_1186ComSend
 1366: 			}
002E57         ?C0200?CS_SCALE_PROC:
 1367: 		if(CS_If1186ComSucess()==true)
002E57 D187              ACALL   CS_If1186ComSucess
002E59 BF010E            CJNE    R7,#01H,?C0199?CS_SCALE_PROC
 1368: 			{	
 1369: 			comm_doing=false;
002E5C E4                CLR     A
002E5D 904CB6            MOV     DPTR,#comm_doing
002E60 F0                MOVX    @DPTR,A
 1370: 			PowerOnState =	CS_PowerOn_State7_ShowOpenPicWait;
002E61 A3                INC     DPTR
002E62 7406              MOV     A,#06H
002E64 F0                MOVX    @DPTR,A
 1371: 			CS_SoftTimer(ResetSoftTimer);
002E65 7F02              MOV     R7,#02H
002E67 120EE5            LCALL   _CS_SoftTimer
 1372: 			}		
 1373: 		}
002E6A         ?C0199?CS_SCALE_PROC:
 1374: 	//-----------S7
 1375: 	if(PowerOnState==CS_PowerOn_State7_ShowOpenPicWait)
002E6A 904CB7            MOV     DPTR,#PowerOnState
002E6D E0                MOVX    A,@DPTR
002E6E B40615            CJNE    A,#06H,?C0185?CS_SCALE_PROC
 1376: 		{
 1377: 		if(CS_SoftTimer(GetSoftTimerTime)>200)
002E71 7F01              MOV     R7,#01H
002E73 120EE5            LCALL   _CS_SoftTimer
002E76 EF                MOV     A,R7
002E77 D3                SETB    C
002E78 94C8              SUBB    A,#0C8H
002E7A 400A              JC      ?C0185?CS_SCALE_PROC
 1378: 			{
 1379: 			R_Scale_state = CS_Scale_state_weighting;
002E7C 904CC5            MOV     DPTR,#R_Scale_state
002E7F 7401              MOV     A,#01H
002E81 F0                MOVX    @DPTR,A
 1380: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadAd);
002E82 7F80              MOV     R7,#080H
002E84 B199              ACALL   _CS_Scale_1186ComSend
 1381: 			}
 1382: 		}
 1383: 
 1384: }
002E86         ?C0185?CS_SCALE_PROC:
002E86 22                RET     
----- FUNCTION CS_Scale_PowerOnProc (END) -------


----- FUNCTION CS_If1186ComSucess (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   25: u8_t CS_If1186ComSucess(void)
   26: {
   27: return R_Weight_Com_Coo.sucess;
   28: }
002E87 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
002E8A E0                MOVX    A,@DPTR
002E8B FF                MOV     R7,A
   29: 
002E8C 22                RET     
----- FUNCTION CS_If1186ComSucess (END) -------


----- FUNCTION _CS_Scale_StandbyProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1184: void CS_Scale_StandbyProc(u8_t B_Reset)
 1185: {
;---- Variable 'B_Reset' assigned to Register 'R7' ----
 1186: 	static u8_t xdata comm_doing;
 1187: 	static u8_t xdata StandbyState;
 1188: 
 1189: 	if(B_Reset==1)
002E8D EF                MOV     A,R7
002E8E B4010A            CJNE    A,#01H,?C0173?CS_SCALE_PROC
 1190: 		{
 1191: 		StandbyState=CS_Standby_S1_ToSleep;
002E91 E4                CLR     A
002E92 904CB5            MOV     DPTR,#StandbyState
002E95 F0                MOVX    @DPTR,A
 1192: 		comm_doing=false;
002E96 904CB4            MOV     DPTR,#comm_doing
002E99 F0                MOVX    @DPTR,A
002E9A 22                RET     
 1193: 		return;
 1194: 		}
002E9B         ?C0173?CS_SCALE_PROC:
 1195: 
 1196: 	if(B_Reset==2)
002E9B EF                MOV     A,R7
002E9C B4020C            CJNE    A,#02H,?C0175?CS_SCALE_PROC
 1197: 		{
 1198: 		StandbyState=CS_Standby_S2_WakeUp;
002E9F 904CB5            MOV     DPTR,#StandbyState
002EA2 7401              MOV     A,#01H
002EA4 F0                MOVX    @DPTR,A
 1199: 		comm_doing=false;
002EA5 E4                CLR     A
002EA6 904CB4            MOV     DPTR,#comm_doing
002EA9 F0                MOVX    @DPTR,A
002EAA 22                RET     
 1200: 		return;
 1201: 		}
002EAB         ?C0175?CS_SCALE_PROC:
 1202: 	
 1203: 	switch(StandbyState)
002EAB 904CB5            MOV     DPTR,#StandbyState
002EAE E0                MOVX    A,@DPTR
002EAF 14                DEC     A
002EB0 6035              JZ      ?C0180?CS_SCALE_PROC
002EB2 04                INC     A
002EB3 7066              JNZ     ?C0183?CS_SCALE_PROC
 1204: 	{
 1205: 	case CS_Standby_S1_ToSleep:
002EB5         ?C0177?CS_SCALE_PROC:
 1206: 		if(comm_doing==false)
002EB5 904CB4            MOV     DPTR,#comm_doing
002EB8 E0                MOVX    A,@DPTR
002EB9 7006              JNZ     ?C0178?CS_SCALE_PROC
 1207: 			{
 1208: 			comm_doing=true;
002EBB 04                INC     A
002EBC F0                MOVX    @DPTR,A
 1209: 
 1210: 			CS_Scale_1186ComSend(CS_CommTo1186_SetSleepMode);
002EBD 7FA0              MOV     R7,#0A0H
002EBF B199              ACALL   _CS_Scale_1186ComSend
 1211: 			//sys_state = SYS_ST_IDLE;			//系统进入睡眠
 1212: 			}
002EC1         ?C0178?CS_SCALE_PROC:
 1213: 		if(CS_If1186ComSucess()==true)
002EC1 D187              ACALL   CS_If1186ComSucess
002EC3 EF                MOV     A,R7
002EC4 6401              XRL     A,#01H
002EC6 7058              JNZ     ?C0174?CS_SCALE_PROC
 1214: 			{
 1215: 			comm_doing=false;
002EC8 904CB4            MOV     DPTR,#comm_doing
002ECB F0                MOVX    @DPTR,A
 1216: 			StandbyState =  CS_Standby_S2_WakeUp;
002ECC A3                INC     DPTR
002ECD 04                INC     A
002ECE F0                MOVX    @DPTR,A
 1217: 
 1218: 			btCmdBuf.len = 0x01;
002ECF 904C63            MOV     DPTR,#btCmdBuf
002ED2 F0                MOVX    @DPTR,A
 1219: 			btCmdBuf.DATA[0] = CS_CMD_SLEEP_REQ;
002ED3 A3                INC     DPTR
002ED4 7420              MOV     A,#020H
002ED6 F0                MOVX    @DPTR,A
 1220: 			BT_CmdFifoIn(&btCmdBuf);
002ED7 7B01              MOV     R3,#01H
002ED9 7A4C              MOV     R2,#HIGH btCmdBuf
002EDB 7963              MOV     R1,#LOW btCmdBuf
002EDD 1227F2            LCALL   _BT_CmdFifoIn
 1221: 
 1222: 			//btCmdBuf.len = 2;
 1223: 			//btCmdBuf.DATA[0] = 0x20;
 1224: 			//btCmdBuf.DATA[1] = 0;
 1225: 			//BT_CmdFifoIn(&btCmdBuf);
 1226: 			
 1227: 			 
 1228: 			sys_state = SYS_ST_IDLE;  //SYS_ST_SLEEP;			//系统进入睡眠
002EE0 904E5B            MOV     DPTR,#sys_state
002EE3 7401              MOV     A,#01H
002EE5 F0                MOVX    @DPTR,A
 1229: 					
 1230: 			}	
 1231: 		break;
002EE6 22                RET     
 1232: 	case CS_Standby_S2_WakeUp:
002EE7         ?C0180?CS_SCALE_PROC:
 1233: 		if(comm_doing==false)
002EE7 904CB4            MOV     DPTR,#comm_doing
002EEA E0                MOVX    A,@DPTR
002EEB 7006              JNZ     ?C0181?CS_SCALE_PROC
 1234: 			{
 1235: 			comm_doing=true;
002EED 04                INC     A
002EEE F0                MOVX    @DPTR,A
 1236: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadAdZero);
002EEF 7F85              MOV     R7,#085H
002EF1 B199              ACALL   _CS_Scale_1186ComSend
 1237: 			}
002EF3         ?C0181?CS_SCALE_PROC:
 1238: 		if(CS_If1186ComSucess()==true)
002EF3 D187              ACALL   CS_If1186ComSucess
002EF5 BF0128            CJNE    R7,#01H,?C0174?CS_SCALE_PROC
 1239: 			{
 1240: 			comm_doing=false;
002EF8 E4                CLR     A
002EF9 904CB4            MOV     DPTR,#comm_doing
002EFC F0                MOVX    @DPTR,A
 1241: 			StandbyState =  CS_Standby_S1_ToSleep;	
002EFD A3                INC     DPTR
002EFE F0                MOVX    @DPTR,A
 1242: 			sys_state = SYS_ST_RUN;
002EFF 904E5B            MOV     DPTR,#sys_state
002F02 7402              MOV     A,#02H
002F04 F0                MOVX    @DPTR,A
 1243: 
 1244: 			/*
 1245: 			while(1)
 1246: 			{
 1247: 			R_Debug_temp = R_AD_Zero;
 1248: 			CS_ScaleDisplay_Debug();
 1249: 			}
 1250: 			*/
 1251: 			//清除异常状态
 1252: 			CS_Scale_JudgeOverLoad(ResetOverLoad);
002F05 FF                MOV     R7,A
002F06 F121              ACALL   _CS_Scale_JudgeOverLoad
 1253: 			CS_Scale_TimeOutProc(CS_Reset_AllTime);
002F08 7F06              MOV     R7,#06H
002F0A 123587            LCALL   _CS_Scale_TimeOutProc
 1254: 			R_Display_Err = 0;
002F0D E4                CLR     A
002F0E 904CC2            MOV     DPTR,#R_Display_Err
002F11 F0                MOVX    @DPTR,A
 1255: 			
 1256: 			R_Scale_state = CS_Scale_state_weighting;
002F12 904CC5            MOV     DPTR,#R_Scale_state
002F15 04                INC     A
002F16 F0                MOVX    @DPTR,A
 1257: 
 1258: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadAd);
002F17 7F80              MOV     R7,#080H
002F19 A199              AJMP    _CS_Scale_1186ComSend
 1259: 			
 1260: 			}
 1261: 		break;
 1262: 	default:
002F1B         ?C0183?CS_SCALE_PROC:
 1263: 		StandbyState = CS_Standby_S1_ToSleep;
002F1B E4                CLR     A
002F1C 904CB5            MOV     DPTR,#StandbyState
002F1F F0                MOVX    @DPTR,A
 1264: 		break;
 1265: 	}
 1266: 	
 1267: 	//R_Debug_temp = 456;
 1268: 
 1269: }
002F20         ?C0174?CS_SCALE_PROC:
002F20 22                RET     
----- FUNCTION _CS_Scale_StandbyProc (END) -------


----- FUNCTION _CS_Scale_JudgeOverLoad (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  640: u8_t CS_Scale_JudgeOverLoad(u8_t option)
  641: {
;---- Variable 'option' assigned to Register 'R7' ----
  642: 
  643: 	static	u8_t	  xdata R_Weight_OverLoadTimes;
  644: 	static	u8_t  xdata  B_Weight_OverLoad;			//超载标志
  645: 	if(option==ResetOverLoad)
002F21 EF                MOV     A,R7
002F22 B40209            CJNE    A,#02H,?C0086?CS_SCALE_PROC
  646: 		{
  647: 		R_Weight_OverLoadTimes = 0;
002F25 E4                CLR     A
002F26 904CA0            MOV     DPTR,#R_Weight_OverLoadTimes
002F29 F0                MOVX    @DPTR,A
  648: 		B_Weight_OverLoad = false;
002F2A A3                INC     DPTR
002F2B F0                MOVX    @DPTR,A
  649: 		return 0;
002F2C FF                MOV     R7,A
002F2D 22                RET     
  650: 		}
002F2E         ?C0086?CS_SCALE_PROC:
  651: 	
  652: 	if(R_UnitWeight.origin > CS_Scale_MaxWeight)
002F2E D3                SETB    C
002F2F 904CCA            MOV     DPTR,#R_UnitWeight+01H
002F32 E0                MOVX    A,@DPTR
002F33 94C4              SUBB    A,#0C4H
002F35 904CC9            MOV     DPTR,#R_UnitWeight
002F38 E0                MOVX    A,@DPTR
002F39 943B              SUBB    A,#03BH
002F3B 4006              JC      ?C0088?CS_SCALE_PROC
  653: 		R_Weight_OverLoadTimes++;
002F3D 904CA0            MOV     DPTR,#R_Weight_OverLoadTimes
002F40 E0                MOVX    A,@DPTR
002F41 04                INC     A
002F42 F0                MOVX    @DPTR,A
002F43         ?C0088?CS_SCALE_PROC:
  654: 	if(R_Weight_OverLoadTimes >=2)
002F43 904CA0            MOV     DPTR,#R_Weight_OverLoadTimes
002F46 E0                MOVX    A,@DPTR
002F47 C3                CLR     C
002F48 9402              SUBB    A,#02H
002F4A 400E              JC      ?C0089?CS_SCALE_PROC
  655: 		{
  656: 		R_Weight_OverLoadTimes = 2;
002F4C 7402              MOV     A,#02H
002F4E F0                MOVX    @DPTR,A
  657: 		B_Weight_OverLoad = true;
002F4F A3                INC     DPTR
002F50 14                DEC     A
002F51 F0                MOVX    @DPTR,A
  658: 		R_Display_Err=CS_ScaleDisplay_L_err;
002F52 904CC2            MOV     DPTR,#R_Display_Err
002F55 7404              MOV     A,#04H
002F57 F0                MOVX    @DPTR,A
  659: 		}
002F58 8005              SJMP    ?C0090?CS_SCALE_PROC
002F5A         ?C0089?CS_SCALE_PROC:
  660: 	else
  661: 		B_Weight_OverLoad = false;
002F5A E4                CLR     A
002F5B 904CA1            MOV     DPTR,#B_Weight_OverLoad
002F5E F0                MOVX    @DPTR,A
002F5F         ?C0090?CS_SCALE_PROC:
  662: 
  663: 	if(option==GetIfOverLoad)
002F5F EF                MOV     A,R7
002F60 B40106            CJNE    A,#01H,?C0091?CS_SCALE_PROC
  664: 		return B_Weight_OverLoad;
002F63 904CA1            MOV     DPTR,#B_Weight_OverLoad
002F66 E0                MOVX    A,@DPTR
002F67 FF                MOV     R7,A
002F68 22                RET     
002F69         ?C0091?CS_SCALE_PROC:
  665: 	
  666: 		return 0;
002F69 7F00              MOV     R7,#00H
  667: }
002F6B 22                RET     
----- FUNCTION _CS_Scale_JudgeOverLoad (END) -------


----- FUNCTION _CS_Scale_LockProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  542: u8_t CS_Scale_LockProc(u8_t option)
  543: {
;---- Variable 'option' assigned to Register 'R7' ----
  544: 	static u8_t xdata B_Weight_Downing_Lock;		//下秤过程有重物在上面锁住
  545: 	
  546: 	if(option==SetDowningLock)
002F6C EF                MOV     A,R7
002F6D B40109            CJNE    A,#01H,?C0073?CS_SCALE_PROC
  547: 		{
  548: 		B_Weight_Downing_Lock =LockProcLock;
002F70 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
002F73 7403              MOV     A,#03H
002F75 F0                MOVX    @DPTR,A
  549: 		return 0;
002F76 7F00              MOV     R7,#00H
002F78 22                RET     
  550: 		}
002F79         ?C0073?CS_SCALE_PROC:
  551: 
  552: 	if(option==GetIfLock)
002F79 EF                MOV     A,R7
002F7A B40206            CJNE    A,#02H,?C0075?CS_SCALE_PROC
  553: 		{
  554: 		return B_Weight_Downing_Lock;
002F7D 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
002F80 E0                MOVX    A,@DPTR
002F81 FF                MOV     R7,A
002F82 22                RET     
  555: 		}
002F83         ?C0075?CS_SCALE_PROC:
  556: 	if(option==LockProcUnLock)
002F83 EF                MOV     A,R7
002F84 B40307            CJNE    A,#03H,?C0076?CS_SCALE_PROC
  557: 		{
  558: 		B_Weight_Downing_Lock =false;
002F87 E4                CLR     A
002F88 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
002F8B F0                MOVX    @DPTR,A
  559: 		return 0;
002F8C FF                MOV     R7,A
002F8D 22                RET     
  560: 		}
002F8E         ?C0076?CS_SCALE_PROC:
  561: 	
  562: 	if(CS_Scale_ZeroProc(GetZeroState,0)==true)		//处于零位
002F8E E4                CLR     A
002F8F FD                MOV     R5,A
002F90 FC                MOV     R4,A
002F91 7F03              MOV     R7,#03H
002F93 1212FB            LCALL   _CS_Scale_ZeroProc
002F96 EF                MOV     A,R7
002F97 6401              XRL     A,#01H
002F99 4E                ORL     A,R6
002F9A 701B              JNZ     ?C0077?CS_SCALE_PROC
  563: 		{
  564: 		B_Weight_Downing_Lock &=LockProcDownUnLock ;
002F9C 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
002F9F E0                MOVX    A,@DPTR
002FA0 54FD              ANL     A,#0FDH
002FA2 F0                MOVX    @DPTR,A
  565: 		
  566: 		if(B_Weight_Downing_Lock&LockProcZeroLock)
002FA3 30E031            JNB     ACC.0,?C0079?CS_SCALE_PROC
  567: 		R_UnitWeight.origin = R_Weight_Lock;
002FA6 904CC0            MOV     DPTR,#R_Weight_Lock
002FA9 E0                MOVX    A,@DPTR
002FAA FF                MOV     R7,A
002FAB A3                INC     DPTR
002FAC E0                MOVX    A,@DPTR
002FAD 904CC9            MOV     DPTR,#R_UnitWeight
002FB0 CF                XCH     A,R7
002FB1 F0                MOVX    @DPTR,A
002FB2 A3                INC     DPTR
002FB3 EF                MOV     A,R7
002FB4 F0                MOVX    @DPTR,A
  568: 		}
002FB5 8020              SJMP    ?C0079?CS_SCALE_PROC
002FB7         ?C0077?CS_SCALE_PROC:
  569: 	else
  570: 		{
  571: 		if(B_Weight_Downing_Lock&LockProcDownLock)
002FB7 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
002FBA E0                MOVX    A,@DPTR
002FBB FF                MOV     R7,A
002FBC 30E111            JNB     ACC.1,?C0080?CS_SCALE_PROC
  572: 			R_UnitWeight.origin = R_Weight_Lock;
002FBF 904CC0            MOV     DPTR,#R_Weight_Lock
002FC2 E0                MOVX    A,@DPTR
002FC3 FD                MOV     R5,A
002FC4 A3                INC     DPTR
002FC5 E0                MOVX    A,@DPTR
002FC6 904CC9            MOV     DPTR,#R_UnitWeight
002FC9 CD                XCH     A,R5
002FCA F0                MOVX    @DPTR,A
002FCB A3                INC     DPTR
002FCC ED                MOV     A,R5
002FCD F0                MOVX    @DPTR,A
002FCE 8007              SJMP    ?C0079?CS_SCALE_PROC
002FD0         ?C0080?CS_SCALE_PROC:
  573: 		else
  574: 			B_Weight_Downing_Lock &= LockProcZeroUnLock;
002FD0 EF                MOV     A,R7
002FD1 54FE              ANL     A,#0FEH
002FD3 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
002FD6 F0                MOVX    @DPTR,A
  575: 		}
002FD7         ?C0079?CS_SCALE_PROC:
  576: 
  577: 	return 0;
002FD7 7F00              MOV     R7,#00H
  578: }
002FD9 22                RET     
----- FUNCTION _CS_Scale_LockProc (END) -------


----- FUNCTION _CS_Scale_JudgeLowBat (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  621: u8_t CS_Scale_JudgeLowBat(u8_t option)
  622: {
;---- Variable 'option' assigned to Register 'R7' ----
  623: 	static	u8_t xdata B_Weight_LowBat;			//低电标志
  624: 	
  625: 	if(R_1186sys_state&CS_Scale_LowBatBit==true)
  626: 		{
  627: 		B_Weight_LowBat = true;
  628: 		R_Display_Err=CS_ScaleDisplay_L_err;
  629: 		}
002FDA         ?C0082?CS_SCALE_PROC:
  630: 	else
  631: 		B_Weight_LowBat = false;
002FDA E4                CLR     A
002FDB 904C9F            MOV     DPTR,#B_Weight_LowBat
002FDE F0                MOVX    @DPTR,A
002FDF         ?C0083?CS_SCALE_PROC:
  632: 
  633: 	if(option==GetIfLowBat)
002FDF EF                MOV     A,R7
002FE0 B40106            CJNE    A,#01H,?C0084?CS_SCALE_PROC
  634: 		return B_Weight_LowBat;
002FE3 904C9F            MOV     DPTR,#B_Weight_LowBat
002FE6 E0                MOVX    A,@DPTR
002FE7 FF                MOV     R7,A
002FE8 22                RET     
002FE9         ?C0084?CS_SCALE_PROC:
  635: 	
  636: 		return 0;	
002FE9 7F00              MOV     R7,#00H
  637: }
002FEB 22                RET     
----- FUNCTION _CS_Scale_JudgeLowBat (END) -------


----- FUNCTION _CS_Scale_GetWeight (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  334: void CS_Scale_GetWeight(u16_t R_AD_BUF)
  335: {
002FEC 904DA0            MOV     DPTR,#R_AD_BUF
002FEF EE                MOV     A,R6
002FF0 F0                MOVX    @DPTR,A
002FF1 A3                INC     DPTR
002FF2 EF                MOV     A,R7
002FF3 F0                MOVX    @DPTR,A
  336: 	u32_t	ad_temp;
  337: 	u16_t	ad_cal;
  338: 	u16_t	CaliDot1,CaliDot2,CaliDot3;
  339: 	
  340: 	CaliDot1 =CS_Scale_CaliProc(CaliProcGetCaliDot1);
002FF4 7F02              MOV     R7,#02H
002FF6 120A08            LCALL   _CS_Scale_CaliProc
002FF9 904DA8            MOV     DPTR,#CaliDot1
002FFC EE                MOV     A,R6
002FFD F0                MOVX    @DPTR,A
002FFE A3                INC     DPTR
002FFF EF                MOV     A,R7
003000 F0                MOVX    @DPTR,A
  341: 	CaliDot2 =CS_Scale_CaliProc(CaliProcGetCaliDot2);
003001 7F03              MOV     R7,#03H
003003 120A08            LCALL   _CS_Scale_CaliProc
003006 904DAA            MOV     DPTR,#CaliDot2
003009 EE                MOV     A,R6
00300A F0                MOVX    @DPTR,A
00300B A3                INC     DPTR
00300C EF                MOV     A,R7
00300D F0                MOVX    @DPTR,A
  342: 	CaliDot3 =CS_Scale_CaliProc(CaliProcGetCaliDot3);
00300E 7F04              MOV     R7,#04H
003010 120A08            LCALL   _CS_Scale_CaliProc
003013 904DAC            MOV     DPTR,#CaliDot3
003016 EE                MOV     A,R6
003017 F0                MOVX    @DPTR,A
003018 A3                INC     DPTR
003019 EF                MOV     A,R7
00301A F0                MOVX    @DPTR,A
  343: 	
  344: 	if(R_AD_BUF <= CaliDot1 )
00301B 904DA8            MOV     DPTR,#CaliDot1
00301E E0                MOVX    A,@DPTR
00301F FE                MOV     R6,A
003020 A3                INC     DPTR
003021 E0                MOVX    A,@DPTR
003022 FF                MOV     R7,A
003023 904DA0            MOV     DPTR,#R_AD_BUF
003026 E0                MOVX    A,@DPTR
003027 FC                MOV     R4,A
003028 A3                INC     DPTR
003029 E0                MOVX    A,@DPTR
00302A FD                MOV     R5,A
00302B D3                SETB    C
00302C 9F                SUBB    A,R7
00302D EC                MOV     A,R4
00302E 9E                SUBB    A,R6
00302F 5033              JNC     ?C0034?CS_SCALE_PROC
  345: 		{
  346: 		ad_temp = (u32_t)R_AD_BUF  * 5000;	
003031 7E13              MOV     R6,#013H
003033 7F88              MOV     R7,#088H
003035 1203C8            LCALL   ?C?LIMUL
003038 A3                INC     DPTR
003039 120332            LCALL   ?C?LSTXDATA
  347: 		R_UnitWeight.origin = ad_temp / CaliDot1;
00303C 904DA8            MOV     DPTR,#CaliDot1
00303F E0                MOVX    A,@DPTR
003040 FE                MOV     R6,A
003041 A3                INC     DPTR
003042 E0                MOVX    A,@DPTR
003043 FF                MOV     R7,A
003044 FB                MOV     R3,A
003045 AA06              MOV     R2,AR6
003047 E4                CLR     A
003048 F9                MOV     R1,A
003049 F8                MOV     R0,A
00304A 904DA2            MOV     DPTR,#ad_temp
00304D E0                MOVX    A,@DPTR
00304E FC                MOV     R4,A
00304F A3                INC     DPTR
003050 E0                MOVX    A,@DPTR
003051 FD                MOV     R5,A
003052 A3                INC     DPTR
003053 E0                MOVX    A,@DPTR
003054 FE                MOV     R6,A
003055 A3                INC     DPTR
003056 E0                MOVX    A,@DPTR
003057 FF                MOV     R7,A
003058 120269            LCALL   ?C?ULDIV
00305B 904CC9            MOV     DPTR,#R_UnitWeight
00305E EE                MOV     A,R6
00305F F0                MOVX    @DPTR,A
003060 A3                INC     DPTR
003061 EF                MOV     A,R7
003062 F0                MOVX    @DPTR,A
003063 22                RET     
  348: 		return;
  349: 		}
003064         ?C0034?CS_SCALE_PROC:
  350: 	ad_cal = R_AD_BUF - CaliDot1;
003064 904DA8            MOV     DPTR,#CaliDot1
003067 E0                MOVX    A,@DPTR
003068 FE                MOV     R6,A
003069 A3                INC     DPTR
00306A E0                MOVX    A,@DPTR
00306B FF                MOV     R7,A
00306C C3                CLR     C
00306D 904DA1            MOV     DPTR,#R_AD_BUF+01H
003070 E0                MOVX    A,@DPTR
003071 9F                SUBB    A,R7
003072 FF                MOV     R7,A
003073 904DA0            MOV     DPTR,#R_AD_BUF
003076 E0                MOVX    A,@DPTR
003077 9E                SUBB    A,R6
003078 FE                MOV     R6,A
003079 904DA6            MOV     DPTR,#ad_cal
00307C F0                MOVX    @DPTR,A
00307D A3                INC     DPTR
00307E EF                MOV     A,R7
00307F F0                MOVX    @DPTR,A
  351: 
  352: 	if(ad_cal <=CaliDot2)
003080 C3                CLR     C
003081 904DAB            MOV     DPTR,#CaliDot2+01H
003084 E0                MOVX    A,@DPTR
003085 9F                SUBB    A,R7
003086 904DAA            MOV     DPTR,#CaliDot2
003089 E0                MOVX    A,@DPTR
00308A 9E                SUBB    A,R6
00308B 4043              JC      ?C0036?CS_SCALE_PROC
  353: 		{
  354: 		ad_temp = (u32_t)ad_cal  * 5000;	
00308D 904DA6            MOV     DPTR,#ad_cal
003090 E0                MOVX    A,@DPTR
003091 FE                MOV     R6,A
003092 A3                INC     DPTR
003093 E0                MOVX    A,@DPTR
003094 FF                MOV     R7,A
003095 7C13              MOV     R4,#013H
003097 7D88              MOV     R5,#088H
003099 1203C8            LCALL   ?C?LIMUL
00309C 904DA2            MOV     DPTR,#ad_temp
00309F 120332            LCALL   ?C?LSTXDATA
  355: 		R_UnitWeight.origin = ad_temp / CaliDot2 +5000 ;
0030A2 904DAA            MOV     DPTR,#CaliDot2
0030A5 E0                MOVX    A,@DPTR
0030A6 FE                MOV     R6,A
0030A7 A3                INC     DPTR
0030A8 E0                MOVX    A,@DPTR
0030A9 FF                MOV     R7,A
0030AA FB                MOV     R3,A
0030AB AA06              MOV     R2,AR6
0030AD E4                CLR     A
0030AE F9                MOV     R1,A
0030AF F8                MOV     R0,A
0030B0 904DA2            MOV     DPTR,#ad_temp
0030B3 E0                MOVX    A,@DPTR
0030B4 FC                MOV     R4,A
0030B5 A3                INC     DPTR
0030B6 E0                MOVX    A,@DPTR
0030B7 FD                MOV     R5,A
0030B8 A3                INC     DPTR
0030B9 E0                MOVX    A,@DPTR
0030BA FE                MOV     R6,A
0030BB A3                INC     DPTR
0030BC E0                MOVX    A,@DPTR
0030BD FF                MOV     R7,A
0030BE 120269            LCALL   ?C?ULDIV
0030C1 EF                MOV     A,R7
0030C2 2488              ADD     A,#088H
0030C4 FF                MOV     R7,A
0030C5 EE                MOV     A,R6
0030C6 3413              ADDC    A,#013H
0030C8 904CC9            MOV     DPTR,#R_UnitWeight
0030CB F0                MOVX    @DPTR,A
0030CC A3                INC     DPTR
0030CD EF                MOV     A,R7
0030CE F0                MOVX    @DPTR,A
0030CF 22                RET     
  356: 		return;
  357: 		}
0030D0         ?C0036?CS_SCALE_PROC:
  358: 	
  359: 	ad_cal  = R_AD_BUF - CaliDot1 - CaliDot2 ;	
0030D0 904DA8            MOV     DPTR,#CaliDot1
0030D3 E0                MOVX    A,@DPTR
0030D4 FE                MOV     R6,A
0030D5 A3                INC     DPTR
0030D6 E0                MOVX    A,@DPTR
0030D7 FF                MOV     R7,A
0030D8 C3                CLR     C
0030D9 904DA1            MOV     DPTR,#R_AD_BUF+01H
0030DC E0                MOVX    A,@DPTR
0030DD 9F                SUBB    A,R7
0030DE FF                MOV     R7,A
0030DF 904DA0            MOV     DPTR,#R_AD_BUF
0030E2 E0                MOVX    A,@DPTR
0030E3 9E                SUBB    A,R6
0030E4 FE                MOV     R6,A
0030E5 904DAA            MOV     DPTR,#CaliDot2
0030E8 E0                MOVX    A,@DPTR
0030E9 FC                MOV     R4,A
0030EA A3                INC     DPTR
0030EB E0                MOVX    A,@DPTR
0030EC FD                MOV     R5,A
0030ED C3                CLR     C
0030EE EF                MOV     A,R7
0030EF 9D                SUBB    A,R5
0030F0 FF                MOV     R7,A
0030F1 EE                MOV     A,R6
0030F2 9C                SUBB    A,R4
0030F3 904DA6            MOV     DPTR,#ad_cal
0030F6 F0                MOVX    @DPTR,A
0030F7 A3                INC     DPTR
0030F8 EF                MOV     A,R7
0030F9 F0                MOVX    @DPTR,A
  360: 	ad_temp = (u32_t)ad_cal  * 5000;	
0030FA 904DA6            MOV     DPTR,#ad_cal
0030FD E0                MOVX    A,@DPTR
0030FE FE                MOV     R6,A
0030FF A3                INC     DPTR
003100 E0                MOVX    A,@DPTR
003101 FF                MOV     R7,A
003102 7C13              MOV     R4,#013H
003104 7D88              MOV     R5,#088H
003106 1203C8            LCALL   ?C?LIMUL
003109 904DA2            MOV     DPTR,#ad_temp
00310C 120332            LCALL   ?C?LSTXDATA
  361: 	R_UnitWeight.origin = ad_temp /CaliDot3 +10000 ;
00310F 904DAC            MOV     DPTR,#CaliDot3
003112 E0                MOVX    A,@DPTR
003113 FE                MOV     R6,A
003114 A3                INC     DPTR
003115 E0                MOVX    A,@DPTR
003116 FF                MOV     R7,A
003117 FB                MOV     R3,A
003118 AA06              MOV     R2,AR6
00311A E4                CLR     A
00311B F9                MOV     R1,A
00311C F8                MOV     R0,A
00311D 904DA2            MOV     DPTR,#ad_temp
003120 E0                MOVX    A,@DPTR
003121 FC                MOV     R4,A
003122 A3                INC     DPTR
003123 E0                MOVX    A,@DPTR
003124 FD                MOV     R5,A
003125 A3                INC     DPTR
003126 E0                MOVX    A,@DPTR
003127 FE                MOV     R6,A
003128 A3                INC     DPTR
003129 E0                MOVX    A,@DPTR
00312A FF                MOV     R7,A
00312B 120269            LCALL   ?C?ULDIV
00312E EF                MOV     A,R7
00312F 2410              ADD     A,#010H
003131 FF                MOV     R7,A
003132 EE                MOV     A,R6
003133 3427              ADDC    A,#027H
003135 904CC9            MOV     DPTR,#R_UnitWeight
003138 F0                MOVX    @DPTR,A
003139 A3                INC     DPTR
00313A EF                MOV     A,R7
00313B F0                MOVX    @DPTR,A
  362: 
  363: 	
  364: }
00313C 22                RET     
----- FUNCTION _CS_Scale_GetWeight (END) -------


----- FUNCTION _CS_Scale_AdcFilter (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  244: u16_t CS_Scale_AdcFilter(u8_t option,u16_t R_AD_BUF)
  245: {
00313D 904E05            MOV     DPTR,#R_AD_BUF
003140 EC                MOV     A,R4
003141 F0                MOVX    @DPTR,A
003142 A3                INC     DPTR
003143 ED                MOV     A,R5
003144 F0                MOVX    @DPTR,A
003145 904E04            MOV     DPTR,#option
003148 EF                MOV     A,R7
003149 F0                MOVX    @DPTR,A
  246: 	u32_t	ad_temp;
  247: 	static	u16_t xdata R_AD_FilTimes;
  248: 	static	u16_t xdata R_AD_BUF_OLD;
  249: 	static	u16_t xdata R_AD_F1;
  250: 	static	u16_t xdata R_AD_F2;
  251: 	static	u16_t xdata R_AD_F3;
  252: 	static	u16_t xdata R_AD_F4;
  253: 	static	u16_t xdata R_AD_F5;
  254: 	static	u16_t xdata R_AD_F6;
  255: 	static	u16_t xdata R_AD_F7;
  256: 	static	u16_t xdata R_AD_F8;	
  257: 		
  258: 	if(option==ScaleAdcFilterGetFilTimes)
00314A BF0209            CJNE    R7,#02H,?C0017?CS_SCALE_PROC
  259: 		{
  260: 		return  R_AD_FilTimes;
00314D 904C81            MOV     DPTR,#R_AD_FilTimes
003150 E0                MOVX    A,@DPTR
003151 FE                MOV     R6,A
003152 A3                INC     DPTR
003153 E0                MOVX    A,@DPTR
003154 FF                MOV     R7,A
003155 22                RET     
  261: 		}
003156         ?C0017?CS_SCALE_PROC:
  262: 	
  263: 	
  264: 	if(R_AD_BUF >R_AD_BUF_OLD)
003156 904C83            MOV     DPTR,#R_AD_BUF_OLD
003159 E0                MOVX    A,@DPTR
00315A FE                MOV     R6,A
00315B A3                INC     DPTR
00315C E0                MOVX    A,@DPTR
00315D FF                MOV     R7,A
00315E 904E05            MOV     DPTR,#R_AD_BUF
003161 E0                MOVX    A,@DPTR
003162 FC                MOV     R4,A
003163 A3                INC     DPTR
003164 E0                MOVX    A,@DPTR
003165 FD                MOV     R5,A
003166 D3                SETB    C
003167 9F                SUBB    A,R7
003168 EC                MOV     A,R4
003169 9E                SUBB    A,R6
00316A 4017              JC      ?C0019?CS_SCALE_PROC
  265: 		ad_temp = R_AD_BUF - R_AD_BUF_OLD;
00316C 904C83            MOV     DPTR,#R_AD_BUF_OLD
00316F E0                MOVX    A,@DPTR
003170 A3                INC     DPTR
003171 E0                MOVX    A,@DPTR
003172 ED                MOV     A,R5
003173 9F                SUBB    A,R7
003174 FF                MOV     R7,A
003175 EC                MOV     A,R4
003176 9E                SUBB    A,R6
003177 FE                MOV     R6,A
003178 E4                CLR     A
003179 FC                MOV     R4,A
00317A FD                MOV     R5,A
00317B 904E07            MOV     DPTR,#ad_temp
00317E 120332            LCALL   ?C?LSTXDATA
003181 801E              SJMP    ?C0020?CS_SCALE_PROC
003183         ?C0019?CS_SCALE_PROC:
  266: 	else
  267: 		ad_temp = R_AD_BUF_OLD - R_AD_BUF;
003183 904E05            MOV     DPTR,#R_AD_BUF
003186 E0                MOVX    A,@DPTR
003187 FE                MOV     R6,A
003188 A3                INC     DPTR
003189 E0                MOVX    A,@DPTR
00318A FF                MOV     R7,A
00318B C3                CLR     C
00318C 904C84            MOV     DPTR,#R_AD_BUF_OLD+01H
00318F E0                MOVX    A,@DPTR
003190 9F                SUBB    A,R7
003191 FF                MOV     R7,A
003192 904C83            MOV     DPTR,#R_AD_BUF_OLD
003195 E0                MOVX    A,@DPTR
003196 9E                SUBB    A,R6
003197 FE                MOV     R6,A
003198 E4                CLR     A
003199 FC                MOV     R4,A
00319A FD                MOV     R5,A
00319B 904E07            MOV     DPTR,#ad_temp
00319E 120332            LCALL   ?C?LSTXDATA
0031A1         ?C0020?CS_SCALE_PROC:
  268: 
  269: 	R_AD_BUF_OLD	=	R_AD_BUF;
0031A1 904E05            MOV     DPTR,#R_AD_BUF
0031A4 E0                MOVX    A,@DPTR
0031A5 FF                MOV     R7,A
0031A6 A3                INC     DPTR
0031A7 E0                MOVX    A,@DPTR
0031A8 904C83            MOV     DPTR,#R_AD_BUF_OLD
0031AB CF                XCH     A,R7
0031AC F0                MOVX    @DPTR,A
0031AD A3                INC     DPTR
0031AE EF                MOV     A,R7
0031AF F0                MOVX    @DPTR,A
  270: 	
  271: 	if((ad_temp > CS_Scale_FiterX) ||(option==ScaleAdcFilterReset))	
0031B0 E4                CLR     A
0031B1 7F05              MOV     R7,#05H
0031B3 FE                MOV     R6,A
0031B4 FD                MOV     R5,A
0031B5 FC                MOV     R4,A
0031B6 904E07            MOV     DPTR,#ad_temp
0031B9 E0                MOVX    A,@DPTR
0031BA F8                MOV     R0,A
0031BB A3                INC     DPTR
0031BC E0                MOVX    A,@DPTR
0031BD F9                MOV     R1,A
0031BE A3                INC     DPTR
0031BF E0                MOVX    A,@DPTR
0031C0 FA                MOV     R2,A
0031C1 A3                INC     DPTR
0031C2 E0                MOVX    A,@DPTR
0031C3 FB                MOV     R3,A
0031C4 D3                SETB    C
0031C5 1202FB            LCALL   ?C?ULCMP
0031C8 5007              JNC     ?C0022?CS_SCALE_PROC
0031CA 904E04            MOV     DPTR,#option
0031CD E0                MOVX    A,@DPTR
0031CE B4012B            CJNE    A,#01H,?C0021?CS_SCALE_PROC
0031D1         ?C0022?CS_SCALE_PROC:
  272: 		{						
  273: 		R_AD_FilTimes = 0;
0031D1 E4                CLR     A
0031D2 904C81            MOV     DPTR,#R_AD_FilTimes
0031D5 F0                MOVX    @DPTR,A
0031D6 A3                INC     DPTR
0031D7 F0                MOVX    @DPTR,A
  274: 		R_AD_F1 	    = 0;
0031D8 904C85            MOV     DPTR,#R_AD_F1
0031DB F0                MOVX    @DPTR,A
0031DC A3                INC     DPTR
0031DD F0                MOVX    @DPTR,A
  275: 		R_AD_F2 	    = 0;
0031DE A3                INC     DPTR
0031DF F0                MOVX    @DPTR,A
0031E0 A3                INC     DPTR
0031E1 F0                MOVX    @DPTR,A
  276: 		R_AD_F3 	    = 0;
0031E2 A3                INC     DPTR
0031E3 F0                MOVX    @DPTR,A
0031E4 A3                INC     DPTR
0031E5 F0                MOVX    @DPTR,A
  277: 		R_AD_F4 	    = 0;
0031E6 A3                INC     DPTR
0031E7 F0                MOVX    @DPTR,A
0031E8 A3                INC     DPTR
0031E9 F0                MOVX    @DPTR,A
  278: 		R_AD_F5 	    = 0;
0031EA A3                INC     DPTR
0031EB F0                MOVX    @DPTR,A
0031EC A3                INC     DPTR
0031ED F0                MOVX    @DPTR,A
  279: 		R_AD_F6 	    = 0;
0031EE A3                INC     DPTR
0031EF F0                MOVX    @DPTR,A
0031F0 A3                INC     DPTR
0031F1 F0                MOVX    @DPTR,A
  280: 		R_AD_F7 	    = 0;
0031F2 A3                INC     DPTR
0031F3 F0                MOVX    @DPTR,A
0031F4 A3                INC     DPTR
0031F5 F0                MOVX    @DPTR,A
  281: 		R_AD_F8 	    = 0;
0031F6 A3                INC     DPTR
0031F7 F0                MOVX    @DPTR,A
0031F8 A3                INC     DPTR
0031F9 F0                MOVX    @DPTR,A
  282: 		}
0031FA 81E4              AJMP    ?C0023?CS_SCALE_PROC
0031FC         ?C0021?CS_SCALE_PROC:
  283: 	else
  284: 		{
  285: 		if(R_AD_FilTimes < 200 )
0031FC C3                CLR     C
0031FD 904C82            MOV     DPTR,#R_AD_FilTimes+01H
003200 E0                MOVX    A,@DPTR
003201 94C8              SUBB    A,#0C8H
003203 904C81            MOV     DPTR,#R_AD_FilTimes
003206 E0                MOVX    A,@DPTR
003207 9400              SUBB    A,#00H
003209 500C              JNC     ?C0024?CS_SCALE_PROC
  286: 		R_AD_FilTimes ++;	
00320B A3                INC     DPTR
00320C E0                MOVX    A,@DPTR
00320D 04                INC     A
00320E F0                MOVX    @DPTR,A
00320F 7006              JNZ     ?C0232?CS_SCALE_PROC
003211 904C81            MOV     DPTR,#R_AD_FilTimes
003214 E0                MOVX    A,@DPTR
003215 04                INC     A
003216 F0                MOVX    @DPTR,A
003217         ?C0232?CS_SCALE_PROC:
003217         ?C0024?CS_SCALE_PROC:
  287: 
  288: 			if(R_AD_FilTimes<=1)
003217 904C81            MOV     DPTR,#R_AD_FilTimes
00321A E0                MOVX    A,@DPTR
00321B FE                MOV     R6,A
00321C A3                INC     DPTR
00321D E0                MOVX    A,@DPTR
00321E FF                MOV     R7,A
00321F D3                SETB    C
003220 9401              SUBB    A,#01H
003222 EE                MOV     A,R6
003223 9400              SUBB    A,#00H
003225 500F              JNC     ?C0025?CS_SCALE_PROC
  289: 				R_AD_F1 = R_AD_BUF;	
003227 904E05            MOV     DPTR,#R_AD_BUF
00322A E0                MOVX    A,@DPTR
00322B FD                MOV     R5,A
00322C A3                INC     DPTR
00322D E0                MOVX    A,@DPTR
00322E 904C85            MOV     DPTR,#R_AD_F1
003231 CD                XCH     A,R5
003232 F0                MOVX    @DPTR,A
003233 A3                INC     DPTR
003234 ED                MOV     A,R5
003235 F0                MOVX    @DPTR,A
003236         ?C0025?CS_SCALE_PROC:
  290: 			if(R_AD_FilTimes<=2)
003236 D3                SETB    C
003237 EF                MOV     A,R7
003238 9402              SUBB    A,#02H
00323A EE                MOV     A,R6
00323B 9400              SUBB    A,#00H
00323D 500F              JNC     ?C0026?CS_SCALE_PROC
  291: 				R_AD_F2 = R_AD_BUF;
00323F 904E05            MOV     DPTR,#R_AD_BUF
003242 E0                MOVX    A,@DPTR
003243 FF                MOV     R7,A
003244 A3                INC     DPTR
003245 E0                MOVX    A,@DPTR
003246 904C87            MOV     DPTR,#R_AD_F2
003249 CF                XCH     A,R7
00324A F0                MOVX    @DPTR,A
00324B A3                INC     DPTR
00324C EF                MOV     A,R7
00324D F0                MOVX    @DPTR,A
00324E         ?C0026?CS_SCALE_PROC:
  292: 			if(R_AD_FilTimes<=3)
00324E D3                SETB    C
00324F 904C82            MOV     DPTR,#R_AD_FilTimes+01H
003252 E0                MOVX    A,@DPTR
003253 9403              SUBB    A,#03H
003255 904C81            MOV     DPTR,#R_AD_FilTimes
003258 E0                MOVX    A,@DPTR
003259 9400              SUBB    A,#00H
00325B 500F              JNC     ?C0027?CS_SCALE_PROC
  293: 				R_AD_F3 = R_AD_BUF;
00325D 904E05            MOV     DPTR,#R_AD_BUF
003260 E0                MOVX    A,@DPTR
003261 FF                MOV     R7,A
003262 A3                INC     DPTR
003263 E0                MOVX    A,@DPTR
003264 904C89            MOV     DPTR,#R_AD_F3
003267 CF                XCH     A,R7
003268 F0                MOVX    @DPTR,A
003269 A3                INC     DPTR
00326A EF                MOV     A,R7
00326B F0                MOVX    @DPTR,A
00326C         ?C0027?CS_SCALE_PROC:
  294: 			if(R_AD_FilTimes<=4)
00326C 904C81            MOV     DPTR,#R_AD_FilTimes
00326F E0                MOVX    A,@DPTR
003270 FE                MOV     R6,A
003271 A3                INC     DPTR
003272 E0                MOVX    A,@DPTR
003273 FF                MOV     R7,A
003274 D3                SETB    C
003275 9404              SUBB    A,#04H
003277 EE                MOV     A,R6
003278 9400              SUBB    A,#00H
00327A 500F              JNC     ?C0028?CS_SCALE_PROC
  295: 				R_AD_F4 = R_AD_BUF;
00327C 904E05            MOV     DPTR,#R_AD_BUF
00327F E0                MOVX    A,@DPTR
003280 FD                MOV     R5,A
003281 A3                INC     DPTR
003282 E0                MOVX    A,@DPTR
003283 904C8B            MOV     DPTR,#R_AD_F4
003286 CD                XCH     A,R5
003287 F0                MOVX    @DPTR,A
003288 A3                INC     DPTR
003289 ED                MOV     A,R5
00328A F0                MOVX    @DPTR,A
00328B         ?C0028?CS_SCALE_PROC:
  296: 			if(R_AD_FilTimes<=5)
00328B D3                SETB    C
00328C EF                MOV     A,R7
00328D 9405              SUBB    A,#05H
00328F EE                MOV     A,R6
003290 9400              SUBB    A,#00H
003292 500F              JNC     ?C0029?CS_SCALE_PROC
  297: 				R_AD_F5 = R_AD_BUF;
003294 904E05            MOV     DPTR,#R_AD_BUF
003297 E0                MOVX    A,@DPTR
003298 FF                MOV     R7,A
003299 A3                INC     DPTR
00329A E0                MOVX    A,@DPTR
00329B 904C8D            MOV     DPTR,#R_AD_F5
00329E CF                XCH     A,R7
00329F F0                MOVX    @DPTR,A
0032A0 A3                INC     DPTR
0032A1 EF                MOV     A,R7
0032A2 F0                MOVX    @DPTR,A
0032A3         ?C0029?CS_SCALE_PROC:
  298: 			if(R_AD_FilTimes<=6)
0032A3 D3                SETB    C
0032A4 904C82            MOV     DPTR,#R_AD_FilTimes+01H
0032A7 E0                MOVX    A,@DPTR
0032A8 9406              SUBB    A,#06H
0032AA 904C81            MOV     DPTR,#R_AD_FilTimes
0032AD E0                MOVX    A,@DPTR
0032AE 9400              SUBB    A,#00H
0032B0 500F              JNC     ?C0030?CS_SCALE_PROC
  299: 				R_AD_F6 = R_AD_BUF;
0032B2 904E05            MOV     DPTR,#R_AD_BUF
0032B5 E0                MOVX    A,@DPTR
0032B6 FF                MOV     R7,A
0032B7 A3                INC     DPTR
0032B8 E0                MOVX    A,@DPTR
0032B9 904C8F            MOV     DPTR,#R_AD_F6
0032BC CF                XCH     A,R7
0032BD F0                MOVX    @DPTR,A
0032BE A3                INC     DPTR
0032BF EF                MOV     A,R7
0032C0 F0                MOVX    @DPTR,A
0032C1         ?C0030?CS_SCALE_PROC:
  300: 			if(R_AD_FilTimes<=7)
0032C1 904C81            MOV     DPTR,#R_AD_FilTimes
0032C4 E0                MOVX    A,@DPTR
0032C5 FE                MOV     R6,A
0032C6 A3                INC     DPTR
0032C7 E0                MOVX    A,@DPTR
0032C8 FF                MOV     R7,A
0032C9 D3                SETB    C
0032CA 9407              SUBB    A,#07H
0032CC EE                MOV     A,R6
0032CD 9400              SUBB    A,#00H
0032CF 500F              JNC     ?C0031?CS_SCALE_PROC
  301: 				R_AD_F7 = R_AD_BUF;
0032D1 904E05            MOV     DPTR,#R_AD_BUF
0032D4 E0                MOVX    A,@DPTR
0032D5 FD                MOV     R5,A
0032D6 A3                INC     DPTR
0032D7 E0                MOVX    A,@DPTR
0032D8 904C91            MOV     DPTR,#R_AD_F7
0032DB CD                XCH     A,R5
0032DC F0                MOVX    @DPTR,A
0032DD A3                INC     DPTR
0032DE ED                MOV     A,R5
0032DF F0                MOVX    @DPTR,A
0032E0         ?C0031?CS_SCALE_PROC:
  302: 			if(R_AD_FilTimes<=8)
0032E0 D3                SETB    C
0032E1 EF                MOV     A,R7
0032E2 9408              SUBB    A,#08H
0032E4 EE                MOV     A,R6
0032E5 9400              SUBB    A,#00H
0032E7 500F              JNC     ?C0032?CS_SCALE_PROC
  303: 				R_AD_F8 = R_AD_BUF;
0032E9 904E05            MOV     DPTR,#R_AD_BUF
0032EC E0                MOVX    A,@DPTR
0032ED FF                MOV     R7,A
0032EE A3                INC     DPTR
0032EF E0                MOVX    A,@DPTR
0032F0 904C93            MOV     DPTR,#R_AD_F8
0032F3 CF                XCH     A,R7
0032F4 F0                MOVX    @DPTR,A
0032F5 A3                INC     DPTR
0032F6 EF                MOV     A,R7
0032F7 F0                MOVX    @DPTR,A
0032F8         ?C0032?CS_SCALE_PROC:
  304: 			if(R_AD_FilTimes>8)
0032F8 D3                SETB    C
0032F9 904C82            MOV     DPTR,#R_AD_FilTimes+01H
0032FC E0                MOVX    A,@DPTR
0032FD 9408              SUBB    A,#08H
0032FF 904C81            MOV     DPTR,#R_AD_FilTimes
003302 E0                MOVX    A,@DPTR
003303 9400              SUBB    A,#00H
003305 4078              JC      ?C0033?CS_SCALE_PROC
  305: 				{
  306: 				R_AD_F1 = R_AD_F2;
003307 904C87            MOV     DPTR,#R_AD_F2
00330A E0                MOVX    A,@DPTR
00330B FF                MOV     R7,A
00330C A3                INC     DPTR
00330D E0                MOVX    A,@DPTR
00330E 904C85            MOV     DPTR,#R_AD_F1
003311 CF                XCH     A,R7
003312 F0                MOVX    @DPTR,A
003313 A3                INC     DPTR
003314 EF                MOV     A,R7
003315 F0                MOVX    @DPTR,A
  307: 				R_AD_F2 = R_AD_F3;
003316 904C89            MOV     DPTR,#R_AD_F3
003319 E0                MOVX    A,@DPTR
00331A FF                MOV     R7,A
00331B A3                INC     DPTR
00331C E0                MOVX    A,@DPTR
00331D 904C87            MOV     DPTR,#R_AD_F2
003320 CF                XCH     A,R7
003321 F0                MOVX    @DPTR,A
003322 A3                INC     DPTR
003323 EF                MOV     A,R7
003324 F0                MOVX    @DPTR,A
  308: 				R_AD_F3 = R_AD_F4;
003325 904C8B            MOV     DPTR,#R_AD_F4
003328 E0                MOVX    A,@DPTR
003329 FF                MOV     R7,A
00332A A3                INC     DPTR
00332B E0                MOVX    A,@DPTR
00332C 904C89            MOV     DPTR,#R_AD_F3
00332F CF                XCH     A,R7
003330 F0                MOVX    @DPTR,A
003331 A3                INC     DPTR
003332 EF                MOV     A,R7
003333 F0                MOVX    @DPTR,A
  309: 				R_AD_F4 = R_AD_F5;
003334 904C8D            MOV     DPTR,#R_AD_F5
003337 E0                MOVX    A,@DPTR
003338 FF                MOV     R7,A
003339 A3                INC     DPTR
00333A E0                MOVX    A,@DPTR
00333B 904C8B            MOV     DPTR,#R_AD_F4
00333E CF                XCH     A,R7
00333F F0                MOVX    @DPTR,A
003340 A3                INC     DPTR
003341 EF                MOV     A,R7
003342 F0                MOVX    @DPTR,A
  310: 				R_AD_F5 = R_AD_F6;
003343 904C8F            MOV     DPTR,#R_AD_F6
003346 E0                MOVX    A,@DPTR
003347 FF                MOV     R7,A
003348 A3                INC     DPTR
003349 E0                MOVX    A,@DPTR
00334A 904C8D            MOV     DPTR,#R_AD_F5
00334D CF                XCH     A,R7
00334E F0                MOVX    @DPTR,A
00334F A3                INC     DPTR
003350 EF                MOV     A,R7
003351 F0                MOVX    @DPTR,A
  311: 				R_AD_F6 = R_AD_F7;
003352 904C91            MOV     DPTR,#R_AD_F7
003355 E0                MOVX    A,@DPTR
003356 FF                MOV     R7,A
003357 A3                INC     DPTR
003358 E0                MOVX    A,@DPTR
003359 904C8F            MOV     DPTR,#R_AD_F6
00335C CF                XCH     A,R7
00335D F0                MOVX    @DPTR,A
00335E A3                INC     DPTR
00335F EF                MOV     A,R7
003360 F0                MOVX    @DPTR,A
  312: 				R_AD_F7 = R_AD_F8;
003361 904C93            MOV     DPTR,#R_AD_F8
003364 E0                MOVX    A,@DPTR
003365 FF                MOV     R7,A
003366 A3                INC     DPTR
003367 E0                MOVX    A,@DPTR
003368 904C91            MOV     DPTR,#R_AD_F7
00336B CF                XCH     A,R7
00336C F0                MOVX    @DPTR,A
00336D A3                INC     DPTR
00336E EF                MOV     A,R7
00336F F0                MOVX    @DPTR,A
  313: 				R_AD_F8 = R_AD_BUF;
003370 904E05            MOV     DPTR,#R_AD_BUF
003373 E0                MOVX    A,@DPTR
003374 FF                MOV     R7,A
003375 A3                INC     DPTR
003376 E0                MOVX    A,@DPTR
003377 904C93            MOV     DPTR,#R_AD_F8
00337A CF                XCH     A,R7
00337B F0                MOVX    @DPTR,A
00337C A3                INC     DPTR
00337D EF                MOV     A,R7
00337E F0                MOVX    @DPTR,A
  314: 				}
00337F         ?C0033?CS_SCALE_PROC:
  315: 
  316: 		ad_temp	= R_AD_F1;
00337F 904C85            MOV     DPTR,#R_AD_F1
003382 E0                MOVX    A,@DPTR
003383 FE                MOV     R6,A
003384 A3                INC     DPTR
003385 E0                MOVX    A,@DPTR
003386 FF                MOV     R7,A
003387 E4                CLR     A
003388 FC                MOV     R4,A
003389 FD                MOV     R5,A
00338A 904E07            MOV     DPTR,#ad_temp
00338D 120332            LCALL   ?C?LSTXDATA
  317: 		ad_temp	+= R_AD_F2;
003390 904E07            MOV     DPTR,#ad_temp
003393 E0                MOVX    A,@DPTR
003394 F8                MOV     R0,A
003395 A3                INC     DPTR
003396 E0                MOVX    A,@DPTR
003397 F9                MOV     R1,A
003398 A3                INC     DPTR
003399 E0                MOVX    A,@DPTR
00339A FA                MOV     R2,A
00339B A3                INC     DPTR
00339C E0                MOVX    A,@DPTR
00339D FB                MOV     R3,A
00339E 904C87            MOV     DPTR,#R_AD_F2
0033A1 E0                MOVX    A,@DPTR
0033A2 FE                MOV     R6,A
0033A3 A3                INC     DPTR
0033A4 E0                MOVX    A,@DPTR
0033A5 FF                MOV     R7,A
0033A6 E4                CLR     A
0033A7 FC                MOV     R4,A
0033A8 FD                MOV     R5,A
0033A9 EB                MOV     A,R3
0033AA 2F                ADD     A,R7
0033AB FF                MOV     R7,A
0033AC EA                MOV     A,R2
0033AD 3E                ADDC    A,R6
0033AE FE                MOV     R6,A
0033AF ED                MOV     A,R5
0033B0 39                ADDC    A,R1
0033B1 FD                MOV     R5,A
0033B2 EC                MOV     A,R4
0033B3 38                ADDC    A,R0
0033B4 FC                MOV     R4,A
0033B5 904E07            MOV     DPTR,#ad_temp
0033B8 120332            LCALL   ?C?LSTXDATA
  318: 		ad_temp	+= R_AD_F3;
0033BB 904E07            MOV     DPTR,#ad_temp
0033BE E0                MOVX    A,@DPTR
0033BF F8                MOV     R0,A
0033C0 A3                INC     DPTR
0033C1 E0                MOVX    A,@DPTR
0033C2 F9                MOV     R1,A
0033C3 A3                INC     DPTR
0033C4 E0                MOVX    A,@DPTR
0033C5 FA                MOV     R2,A
0033C6 A3                INC     DPTR
0033C7 E0                MOVX    A,@DPTR
0033C8 FB                MOV     R3,A
0033C9 904C89            MOV     DPTR,#R_AD_F3
0033CC E0                MOVX    A,@DPTR
0033CD FE                MOV     R6,A
0033CE A3                INC     DPTR
0033CF E0                MOVX    A,@DPTR
0033D0 FF                MOV     R7,A
0033D1 E4                CLR     A
0033D2 FC                MOV     R4,A
0033D3 FD                MOV     R5,A
0033D4 EB                MOV     A,R3
0033D5 2F                ADD     A,R7
0033D6 FF                MOV     R7,A
0033D7 EA                MOV     A,R2
0033D8 3E                ADDC    A,R6
0033D9 FE                MOV     R6,A
0033DA ED                MOV     A,R5
0033DB 39                ADDC    A,R1
0033DC FD                MOV     R5,A
0033DD EC                MOV     A,R4
0033DE 38                ADDC    A,R0
0033DF FC                MOV     R4,A
0033E0 904E07            MOV     DPTR,#ad_temp
0033E3 120332            LCALL   ?C?LSTXDATA
  319: 		ad_temp	+= R_AD_F4;
0033E6 904E07            MOV     DPTR,#ad_temp
0033E9 E0                MOVX    A,@DPTR
0033EA F8                MOV     R0,A
0033EB A3                INC     DPTR
0033EC E0                MOVX    A,@DPTR
0033ED F9                MOV     R1,A
0033EE A3                INC     DPTR
0033EF E0                MOVX    A,@DPTR
0033F0 FA                MOV     R2,A
0033F1 A3                INC     DPTR
0033F2 E0                MOVX    A,@DPTR
0033F3 FB                MOV     R3,A
0033F4 904C8B            MOV     DPTR,#R_AD_F4
0033F7 E0                MOVX    A,@DPTR
0033F8 FE                MOV     R6,A
0033F9 A3                INC     DPTR
0033FA E0                MOVX    A,@DPTR
0033FB FF                MOV     R7,A
0033FC E4                CLR     A
0033FD FC                MOV     R4,A
0033FE FD                MOV     R5,A
0033FF EB                MOV     A,R3
003400 2F                ADD     A,R7
003401 FF                MOV     R7,A
003402 EA                MOV     A,R2
003403 3E                ADDC    A,R6
003404 FE                MOV     R6,A
003405 ED                MOV     A,R5
003406 39                ADDC    A,R1
003407 FD                MOV     R5,A
003408 EC                MOV     A,R4
003409 38                ADDC    A,R0
00340A FC                MOV     R4,A
00340B 904E07            MOV     DPTR,#ad_temp
00340E 120332            LCALL   ?C?LSTXDATA
  320: 		ad_temp	+= R_AD_F5;
003411 904E07            MOV     DPTR,#ad_temp
003414 E0                MOVX    A,@DPTR
003415 F8                MOV     R0,A
003416 A3                INC     DPTR
003417 E0                MOVX    A,@DPTR
003418 F9                MOV     R1,A
003419 A3                INC     DPTR
00341A E0                MOVX    A,@DPTR
00341B FA                MOV     R2,A
00341C A3                INC     DPTR
00341D E0                MOVX    A,@DPTR
00341E FB                MOV     R3,A
00341F 904C8D            MOV     DPTR,#R_AD_F5
003422 E0                MOVX    A,@DPTR
003423 FE                MOV     R6,A
003424 A3                INC     DPTR
003425 E0                MOVX    A,@DPTR
003426 FF                MOV     R7,A
003427 E4                CLR     A
003428 FC                MOV     R4,A
003429 FD                MOV     R5,A
00342A EB                MOV     A,R3
00342B 2F                ADD     A,R7
00342C FF                MOV     R7,A
00342D EA                MOV     A,R2
00342E 3E                ADDC    A,R6
00342F FE                MOV     R6,A
003430 ED                MOV     A,R5
003431 39                ADDC    A,R1
003432 FD                MOV     R5,A
003433 EC                MOV     A,R4
003434 38                ADDC    A,R0
003435 FC                MOV     R4,A
003436 904E07            MOV     DPTR,#ad_temp
003439 120332            LCALL   ?C?LSTXDATA
  321: 		ad_temp	+= R_AD_F6;
00343C 904E07            MOV     DPTR,#ad_temp
00343F E0                MOVX    A,@DPTR
003440 F8                MOV     R0,A
003441 A3                INC     DPTR
003442 E0                MOVX    A,@DPTR
003443 F9                MOV     R1,A
003444 A3                INC     DPTR
003445 E0                MOVX    A,@DPTR
003446 FA                MOV     R2,A
003447 A3                INC     DPTR
003448 E0                MOVX    A,@DPTR
003449 FB                MOV     R3,A
00344A 904C8F            MOV     DPTR,#R_AD_F6
00344D E0                MOVX    A,@DPTR
00344E FE                MOV     R6,A
00344F A3                INC     DPTR
003450 E0                MOVX    A,@DPTR
003451 FF                MOV     R7,A
003452 E4                CLR     A
003453 FC                MOV     R4,A
003454 FD                MOV     R5,A
003455 EB                MOV     A,R3
003456 2F                ADD     A,R7
003457 FF                MOV     R7,A
003458 EA                MOV     A,R2
003459 3E                ADDC    A,R6
00345A FE                MOV     R6,A
00345B ED                MOV     A,R5
00345C 39                ADDC    A,R1
00345D FD                MOV     R5,A
00345E EC                MOV     A,R4
00345F 38                ADDC    A,R0
003460 FC                MOV     R4,A
003461 904E07            MOV     DPTR,#ad_temp
003464 120332            LCALL   ?C?LSTXDATA
  322: 		ad_temp	+= R_AD_F7;
003467 904E07            MOV     DPTR,#ad_temp
00346A E0                MOVX    A,@DPTR
00346B F8                MOV     R0,A
00346C A3                INC     DPTR
00346D E0                MOVX    A,@DPTR
00346E F9                MOV     R1,A
00346F A3                INC     DPTR
003470 E0                MOVX    A,@DPTR
003471 FA                MOV     R2,A
003472 A3                INC     DPTR
003473 E0                MOVX    A,@DPTR
003474 FB                MOV     R3,A
003475 904C91            MOV     DPTR,#R_AD_F7
003478 E0                MOVX    A,@DPTR
003479 FE                MOV     R6,A
00347A A3                INC     DPTR
00347B E0                MOVX    A,@DPTR
00347C FF                MOV     R7,A
00347D E4                CLR     A
00347E FC                MOV     R4,A
00347F FD                MOV     R5,A
003480 EB                MOV     A,R3
003481 2F                ADD     A,R7
003482 FF                MOV     R7,A
003483 EA                MOV     A,R2
003484 3E                ADDC    A,R6
003485 FE                MOV     R6,A
003486 ED                MOV     A,R5
003487 39                ADDC    A,R1
003488 FD                MOV     R5,A
003489 EC                MOV     A,R4
00348A 38                ADDC    A,R0
00348B FC                MOV     R4,A
00348C 904E07            MOV     DPTR,#ad_temp
00348F 120332            LCALL   ?C?LSTXDATA
  323: 		ad_temp	+= R_AD_F8;
003492 904E07            MOV     DPTR,#ad_temp
003495 E0                MOVX    A,@DPTR
003496 F8                MOV     R0,A
003497 A3                INC     DPTR
003498 E0                MOVX    A,@DPTR
003499 F9                MOV     R1,A
00349A A3                INC     DPTR
00349B E0                MOVX    A,@DPTR
00349C FA                MOV     R2,A
00349D A3                INC     DPTR
00349E E0                MOVX    A,@DPTR
00349F FB                MOV     R3,A
0034A0 904C93            MOV     DPTR,#R_AD_F8
0034A3 E0                MOVX    A,@DPTR
0034A4 FE                MOV     R6,A
0034A5 A3                INC     DPTR
0034A6 E0                MOVX    A,@DPTR
0034A7 FF                MOV     R7,A
0034A8 E4                CLR     A
0034A9 FC                MOV     R4,A
0034AA FD                MOV     R5,A
0034AB EB                MOV     A,R3
0034AC 2F                ADD     A,R7
0034AD FF                MOV     R7,A
0034AE EA                MOV     A,R2
0034AF 3E                ADDC    A,R6
0034B0 FE                MOV     R6,A
0034B1 ED                MOV     A,R5
0034B2 39                ADDC    A,R1
0034B3 FD                MOV     R5,A
0034B4 EC                MOV     A,R4
0034B5 38                ADDC    A,R0
0034B6 FC                MOV     R4,A
0034B7 904E07            MOV     DPTR,#ad_temp
0034BA 120332            LCALL   ?C?LSTXDATA
  324: 
  325: 		R_AD_BUF = ad_temp / 8 ;
0034BD E4                CLR     A
0034BE 7B08              MOV     R3,#08H
0034C0 FA                MOV     R2,A
0034C1 F9                MOV     R1,A
0034C2 F8                MOV     R0,A
0034C3 904E07            MOV     DPTR,#ad_temp
0034C6 E0                MOVX    A,@DPTR
0034C7 FC                MOV     R4,A
0034C8 A3                INC     DPTR
0034C9 E0                MOVX    A,@DPTR
0034CA FD                MOV     R5,A
0034CB A3                INC     DPTR
0034CC E0                MOVX    A,@DPTR
0034CD FE                MOV     R6,A
0034CE A3                INC     DPTR
0034CF E0                MOVX    A,@DPTR
0034D0 FF                MOV     R7,A
0034D1 120269            LCALL   ?C?ULDIV
0034D4 904E05            MOV     DPTR,#R_AD_BUF
0034D7 EE                MOV     A,R6
0034D8 F0                MOVX    @DPTR,A
0034D9 A3                INC     DPTR
0034DA EF                MOV     A,R7
0034DB F0                MOVX    @DPTR,A
  326: 		R_AD_BUF_OLD	=	R_AD_BUF;
0034DC 904C83            MOV     DPTR,#R_AD_BUF_OLD
0034DF EE                MOV     A,R6
0034E0 F0                MOVX    @DPTR,A
0034E1 A3                INC     DPTR
0034E2 EF                MOV     A,R7
0034E3 F0                MOVX    @DPTR,A
  327: 		}
0034E4         ?C0023?CS_SCALE_PROC:
  328: 	return	R_AD_BUF;
0034E4 904E05            MOV     DPTR,#R_AD_BUF
0034E7 E0                MOVX    A,@DPTR
0034E8 FE                MOV     R6,A
0034E9 A3                INC     DPTR
0034EA E0                MOVX    A,@DPTR
0034EB FF                MOV     R7,A
  329: }
0034EC 22                RET     
----- FUNCTION _CS_Scale_AdcFilter (END) -------


----- FUNCTION CS_Scale_ChangeUnit (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  367: void CS_Scale_ChangeUnit()
  368: {
  369: 	switch(R_Selet_Unit)
  370: 		{
0034ED 904CC6            MOV     DPTR,#R_Selet_Unit
0034F0 E0                MOVX    A,@DPTR
0034F1 14                DEC     A
0034F2 6011              JZ      ?C0039?CS_SCALE_PROC
0034F4 14                DEC     A
0034F5 601C              JZ      ?C0041?CS_SCALE_PROC
0034F7 14                DEC     A
0034F8 6012              JZ      ?C0040?CS_SCALE_PROC
0034FA 2403              ADD     A,#03H
0034FC 701B              JNZ     ?C0042?CS_SCALE_PROC
  371: 		case CS_ScaleDisplay_L_kg:
  372: 			R_Selet_Unit=CS_ScaleDisplay_L_lb;
0034FE         ?C0038?CS_SCALE_PROC:
  373: 			break;
0034FE 904CC6            MOV     DPTR,#R_Selet_Unit
003501 7401              MOV     A,#01H
003503 F0                MOVX    @DPTR,A
  374: 		case CS_ScaleDisplay_L_lb:
003504 22                RET     
  375: 			R_Selet_Unit=CS_ScaleDisplay_L_jin;
003505         ?C0039?CS_SCALE_PROC:
  376: 			break;
003505 904CC6            MOV     DPTR,#R_Selet_Unit
003508 7403              MOV     A,#03H
00350A F0                MOVX    @DPTR,A
  377: 		case CS_ScaleDisplay_L_jin:
00350B 22                RET     
  378: 			R_Selet_Unit=CS_ScaleDisplay_L_gongjin;
00350C         ?C0040?CS_SCALE_PROC:
  379: 			break;
00350C 904CC6            MOV     DPTR,#R_Selet_Unit
00350F 7402              MOV     A,#02H
003511 F0                MOVX    @DPTR,A
  380: 		case CS_ScaleDisplay_L_gongjin:
003512 22                RET     
  381: 			R_Selet_Unit=CS_ScaleDisplay_L_kg;
003513         ?C0041?CS_SCALE_PROC:
  382: 			break;
003513 E4                CLR     A
003514 904CC6            MOV     DPTR,#R_Selet_Unit
003517 F0                MOVX    @DPTR,A
  383: 		default :
003518 22                RET     
  384: 			R_Selet_Unit=CS_ScaleDisplay_L_kg;
003519         ?C0042?CS_SCALE_PROC:
  385: 			break;
003519 E4                CLR     A
00351A 904CC6            MOV     DPTR,#R_Selet_Unit
00351D F0                MOVX    @DPTR,A
  386: 		}
  387: }
  388: 
00351E 22                RET     
----- FUNCTION CS_Scale_ChangeUnit (END) -------


----- FUNCTION CS_Scale_ReturnLock (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  855: void CS_Scale_ReturnLock(void)
  856: {
  857: 	u16_t	weight_temp;
  858: 	
  859: 	if( R_UnitWeight.origin > R_Weight_Lock)
00351F 904CC0            MOV     DPTR,#R_Weight_Lock
003522 E0                MOVX    A,@DPTR
003523 FE                MOV     R6,A
003524 A3                INC     DPTR
003525 E0                MOVX    A,@DPTR
003526 FF                MOV     R7,A
003527 904CC9            MOV     DPTR,#R_UnitWeight
00352A E0                MOVX    A,@DPTR
00352B FC                MOV     R4,A
00352C A3                INC     DPTR
00352D E0                MOVX    A,@DPTR
00352E FD                MOV     R5,A
00352F D3                SETB    C
003530 9F                SUBB    A,R7
003531 EC                MOV     A,R4
003532 9E                SUBB    A,R6
003533 401F              JC      ?C0119?CS_SCALE_PROC
  860: 		{
  861: 		weight_temp = R_UnitWeight.origin -R_Weight_Lock;
003535 ED                MOV     A,R5
003536 9F                SUBB    A,R7
003537 FF                MOV     R7,A
003538 EC                MOV     A,R4
003539 9E                SUBB    A,R6
00353A FE                MOV     R6,A
00353B 904E56            MOV     DPTR,#weight_temp
00353E F0                MOVX    @DPTR,A
00353F A3                INC     DPTR
003540 EF                MOV     A,R7
003541 F0                MOVX    @DPTR,A
  862: 		if(weight_temp >= CS_Scale_RetLockWeightInc)
003542 C3                CLR     C
003543 94E8              SUBB    A,#0E8H
003545 EE                MOV     A,R6
003546 9403              SUBB    A,#03H
003548 403C              JC      ?C0123?CS_SCALE_PROC
  863: 			{
  864: 			R_Scale_state = CS_Scale_state_weighting;
00354A 904CC5            MOV     DPTR,#R_Scale_state
00354D 7401              MOV     A,#01H
00354F F0                MOVX    @DPTR,A
  865: 			CS_Scale_TimeOutProc(CS_Reset_AllTime);
003550 7F06              MOV     R7,#06H
003552 8033              SJMP    _CS_Scale_TimeOutProc
  866: 			}
  867: 		}
003554         ?C0119?CS_SCALE_PROC:
  868: 	else
  869: 		{
  870: 		weight_temp = R_Weight_Lock -R_UnitWeight.origin;
003554 904CC9            MOV     DPTR,#R_UnitWeight
003557 E0                MOVX    A,@DPTR
003558 FE                MOV     R6,A
003559 A3                INC     DPTR
00355A E0                MOVX    A,@DPTR
00355B FF                MOV     R7,A
00355C C3                CLR     C
00355D 904CC1            MOV     DPTR,#R_Weight_Lock+01H
003560 E0                MOVX    A,@DPTR
003561 9F                SUBB    A,R7
003562 FF                MOV     R7,A
003563 904CC0            MOV     DPTR,#R_Weight_Lock
003566 E0                MOVX    A,@DPTR
003567 9E                SUBB    A,R6
003568 FE                MOV     R6,A
003569 904E56            MOV     DPTR,#weight_temp
00356C F0                MOVX    @DPTR,A
00356D A3                INC     DPTR
00356E EF                MOV     A,R7
00356F F0                MOVX    @DPTR,A
  871: 		if(weight_temp >= CS_Scale_RetLockWeightDec)
003570 C3                CLR     C
003571 942C              SUBB    A,#02CH
003573 EE                MOV     A,R6
003574 9401              SUBB    A,#01H
003576 400E              JC      ?C0123?CS_SCALE_PROC
  872: 			{
  873: 			
  874: 			R_Scale_state = CS_Scale_state_weighting;
003578 904CC5            MOV     DPTR,#R_Scale_state
00357B 7401              MOV     A,#01H
00357D F0                MOVX    @DPTR,A
  875: 			CS_Scale_LockProc(SetDowningLock);
00357E FF                MOV     R7,A
00357F 122F6C            LCALL   _CS_Scale_LockProc
  876: 			CS_Scale_TimeOutProc(CS_Reset_AllTime);
003582 7F06              MOV     R7,#06H
003584 B187              ACALL   _CS_Scale_TimeOutProc
  877: 			
  878: 			}
  879: 		}
  880: 
  881: }
003586         ?C0123?CS_SCALE_PROC:
003586 22                RET     
----- FUNCTION CS_Scale_ReturnLock (END) -------


----- FUNCTION _CS_Scale_TimeOutProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1437: void CS_Scale_TimeOutProc(u8_t option)
 1438: {
;---- Variable 'option' assigned to Register 'R7' ----
 1439: 	static	CS_TimeOut_T xdata R_TimeOut;
 1440: 	static	u8_t xdata B_TimeBase_1s;		//1s时基
 1441: 
 1442: 	if(option==CS_SetTimeBase1S)
003587 EF                MOV     A,R7
003588 B40707            CJNE    A,#07H,?C0211?CS_SCALE_PROC
 1443: 		{
 1444: 		B_TimeBase_1s = true;
00358B 904CBF            MOV     DPTR,#B_TimeBase_1s
00358E 7401              MOV     A,#01H
003590 F0                MOVX    @DPTR,A
003591 22                RET     
 1445: 		return;
 1446: 		}
003592         ?C0211?CS_SCALE_PROC:
 1447: 	//超时计数器复位
 1448: 	if(option)
003592 EF                MOV     A,R7
003593 6040              JZ      ?C0213?CS_SCALE_PROC
 1449: 	{
 1450: 	if(option==CS_Reset_ZeroTime)
003595 B40105            CJNE    A,#01H,?C0214?CS_SCALE_PROC
 1451: 		R_TimeOut.zero=0;
003598 E4                CLR     A
003599 904CBA            MOV     DPTR,#R_TimeOut
00359C F0                MOVX    @DPTR,A
00359D         ?C0214?CS_SCALE_PROC:
 1452: 	if(option==CS_Reset_LockTime)
00359D EF                MOV     A,R7
00359E B40205            CJNE    A,#02H,?C0215?CS_SCALE_PROC
 1453: 		R_TimeOut.lock=0;
0035A1 E4                CLR     A
0035A2 904CBB            MOV     DPTR,#R_TimeOut+01H
0035A5 F0                MOVX    @DPTR,A
0035A6         ?C0215?CS_SCALE_PROC:
 1454: 	if(option==CS_Reset_UnstableTime)
0035A6 EF                MOV     A,R7
0035A7 B40305            CJNE    A,#03H,?C0216?CS_SCALE_PROC
 1455: 		R_TimeOut.unstable=0;
0035AA E4                CLR     A
0035AB 904CBC            MOV     DPTR,#R_TimeOut+02H
0035AE F0                MOVX    @DPTR,A
0035AF         ?C0216?CS_SCALE_PROC:
 1456: 	if(option==CS_Reset_OverLoadTime)
0035AF EF                MOV     A,R7
0035B0 B40405            CJNE    A,#04H,?C0217?CS_SCALE_PROC
 1457: 		R_TimeOut.overload=0;
0035B3 E4                CLR     A
0035B4 904CBD            MOV     DPTR,#R_TimeOut+03H
0035B7 F0                MOVX    @DPTR,A
0035B8         ?C0217?CS_SCALE_PROC:
 1458: 	if(option==CS_Reset_LowBatTime)
0035B8 EF                MOV     A,R7
0035B9 B40505            CJNE    A,#05H,?C0218?CS_SCALE_PROC
 1459: 		R_TimeOut.lowbat=0;
0035BC E4                CLR     A
0035BD 904CBE            MOV     DPTR,#R_TimeOut+04H
0035C0 F0                MOVX    @DPTR,A
0035C1         ?C0218?CS_SCALE_PROC:
 1460: 	if(option==CS_Reset_AllTime)
0035C1 EF                MOV     A,R7
0035C2 6406              XRL     A,#06H
0035C4 6002              JZ      $ + 4H
0035C6 C1A9              AJMP    ?C0212?CS_SCALE_PROC
 1461: 		{
 1462: 		R_TimeOut.zero=0;
0035C8 904CBA            MOV     DPTR,#R_TimeOut
0035CB F0                MOVX    @DPTR,A
 1463: 		R_TimeOut.lock=0;
0035CC A3                INC     DPTR
0035CD F0                MOVX    @DPTR,A
 1464: 		R_TimeOut.unstable=0;
0035CE A3                INC     DPTR
0035CF F0                MOVX    @DPTR,A
 1465: 		R_TimeOut.overload=0;
0035D0 A3                INC     DPTR
0035D1 F0                MOVX    @DPTR,A
 1466: 		R_TimeOut.lowbat=0;
0035D2 A3                INC     DPTR
0035D3 F0                MOVX    @DPTR,A
 1467: 		}
0035D4 22                RET     
 1468: 	return;
 1469: 	}
0035D5         ?C0213?CS_SCALE_PROC:
 1470: 		
 1471: 	if(B_TimeBase_1s == true)
0035D5 904CBF            MOV     DPTR,#B_TimeBase_1s
0035D8 E0                MOVX    A,@DPTR
0035D9 6401              XRL     A,#01H
0035DB 6002              JZ      $ + 4H
0035DD C1A9              AJMP    ?C0212?CS_SCALE_PROC
 1472: 	{
 1473: 		B_TimeBase_1s = false;
0035DF F0                MOVX    @DPTR,A
 1474: 
 1475: 		//低电超时处理
 1476: 		if(CS_Scale_JudgeLowBat(GetIfLowBat) == true)
0035E0 7F01              MOV     R7,#01H
0035E2 122FDA            LCALL   _CS_Scale_JudgeLowBat
0035E5 BF011F            CJNE    R7,#01H,?C0221?CS_SCALE_PROC
 1477: 		{
 1478: 			R_TimeOut.lowbat++;
0035E8 904CBE            MOV     DPTR,#R_TimeOut+04H
0035EB E0                MOVX    A,@DPTR
0035EC 04                INC     A
0035ED F0                MOVX    @DPTR,A
 1479: 
 1480: 			if(R_TimeOut.lowbat>=CS_Scale_TimeOut_LowBat)
0035EE E0                MOVX    A,@DPTR
0035EF C3                CLR     C
0035F0 9403              SUBB    A,#03H
0035F2 5002              JNC     $ + 4H
0035F4 C1A9              AJMP    ?C0212?CS_SCALE_PROC
 1481: 			{
 1482: 				R_Scale_state = CS_Scale_state_standby;
0035F6 904CC5            MOV     DPTR,#R_Scale_state
0035F9 7402              MOV     A,#02H
0035FB F0                MOVX    @DPTR,A
 1483: 				CS_Scale_StandbyProc(1);
0035FC 7F01              MOV     R7,#01H
0035FE 122E8D            LCALL   _CS_Scale_StandbyProc
 1484: 				R_TimeOut.lowbat=0;
003601 E4                CLR     A
003602 904CBE            MOV     DPTR,#R_TimeOut+04H
003605 F0                MOVX    @DPTR,A
 1485: 			}
003606 22                RET     
 1486: 		return;			
 1487: 		}
003607         ?C0221?CS_SCALE_PROC:
 1488: 
 1489: 		//超载超时处理
 1490: 		if(CS_Scale_JudgeOverLoad(GetIfOverLoad)== true)
003607 7F01              MOV     R7,#01H
003609 122F21            LCALL   _CS_Scale_JudgeOverLoad
00360C BF011F            CJNE    R7,#01H,?C0223?CS_SCALE_PROC
 1491: 		{
 1492: 			R_TimeOut.overload++;
00360F 904CBD            MOV     DPTR,#R_TimeOut+03H
003612 E0                MOVX    A,@DPTR
003613 04                INC     A
003614 F0                MOVX    @DPTR,A
 1493: 
 1494: 			if(R_TimeOut.overload>=CS_Scale_TimeOut_OverLoad)
003615 E0                MOVX    A,@DPTR
003616 C3                CLR     C
003617 9403              SUBB    A,#03H
003619 5002              JNC     $ + 4H
00361B C1A9              AJMP    ?C0212?CS_SCALE_PROC
 1495: 			{
 1496: 				R_Scale_state = CS_Scale_state_standby;
00361D 904CC5            MOV     DPTR,#R_Scale_state
003620 7402              MOV     A,#02H
003622 F0                MOVX    @DPTR,A
 1497: 				CS_Scale_StandbyProc(1);
003623 7F01              MOV     R7,#01H
003625 122E8D            LCALL   _CS_Scale_StandbyProc
 1498: 				R_TimeOut.overload=0;
003628 E4                CLR     A
003629 904CBD            MOV     DPTR,#R_TimeOut+03H
00362C F0                MOVX    @DPTR,A
 1499: 			}
00362D 22                RET     
 1500: 		return;	
 1501: 
 1502: 		}
00362E         ?C0223?CS_SCALE_PROC:
 1503: 		
 1504: 		
 1505: 		//称重模式下的超时处理
 1506: 		if(R_Scale_state == CS_Scale_state_weighting)
00362E 904CC5            MOV     DPTR,#R_Scale_state
003631 E0                MOVX    A,@DPTR
003632 6401              XRL     A,#01H
003634 704B              JNZ     ?C0225?CS_SCALE_PROC
 1507: 		{
 1508: 		
 1509: 		if(CS_Scale_ZeroProc(GetZeroState,0) == true)
003636 FD                MOV     R5,A
003637 FC                MOV     R4,A
003638 7F03              MOV     R7,#03H
00363A 1212FB            LCALL   _CS_Scale_ZeroProc
00363D EF                MOV     A,R7
00363E 6401              XRL     A,#01H
003640 4E                ORL     A,R6
003641 700C              JNZ     ?C0226?CS_SCALE_PROC
 1510: 			{
 1511: 			R_TimeOut.unstable=0;
003643 904CBC            MOV     DPTR,#R_TimeOut+02H
003646 F0                MOVX    @DPTR,A
 1512: 			R_TimeOut.zero++;
003647 904CBA            MOV     DPTR,#R_TimeOut
00364A E0                MOVX    A,@DPTR
00364B 04                INC     A
00364C F0                MOVX    @DPTR,A
 1513: 			}
00364D 800B              SJMP    ?C0227?CS_SCALE_PROC
00364F         ?C0226?CS_SCALE_PROC:
 1514: 		else
 1515: 			{
 1516: 			R_TimeOut.zero=0;
00364F E4                CLR     A
003650 904CBA            MOV     DPTR,#R_TimeOut
003653 F0                MOVX    @DPTR,A
 1517: 			R_TimeOut.unstable++;
003654 904CBC            MOV     DPTR,#R_TimeOut+02H
003657 E0                MOVX    A,@DPTR
003658 04                INC     A
003659 F0                MOVX    @DPTR,A
 1518: 			}
00365A         ?C0227?CS_SCALE_PROC:
 1519: 
 1520: 		if(R_TimeOut.zero >=CS_Scale_TimeOut_Zero||R_TimeOut.unstable>=CS_Scale_TimeOut_Unstable)
00365A 904CBA            MOV     DPTR,#R_TimeOut
00365D E0                MOVX    A,@DPTR
00365E C3                CLR     C
00365F 940F              SUBB    A,#0FH
003661 5009              JNC     ?C0229?CS_SCALE_PROC
003663 904CBC            MOV     DPTR,#R_TimeOut+02H
003666 E0                MOVX    A,@DPTR
003667 C3                CLR     C
003668 940F              SUBB    A,#0FH
00366A 403D              JC      ?C0212?CS_SCALE_PROC
00366C         ?C0229?CS_SCALE_PROC:
 1521: 			{
 1522: 				//R_Debug_temp=R_TimeOut.unstable;
 1523: 				//CS_ScaleDisplay_Debug();
 1524: 				//while(1);
 1525: 				
 1526: 				R_Scale_state = CS_Scale_state_standby;
00366C 904CC5            MOV     DPTR,#R_Scale_state
00366F 7402              MOV     A,#02H
003671 F0                MOVX    @DPTR,A
 1527: 				CS_Scale_StandbyProc(1);
003672 7F01              MOV     R7,#01H
003674 122E8D            LCALL   _CS_Scale_StandbyProc
 1528: 				R_TimeOut.zero=0;
003677 E4                CLR     A
003678 904CBA            MOV     DPTR,#R_TimeOut
00367B F0                MOVX    @DPTR,A
 1529: 				R_TimeOut.unstable=0;
00367C 904CBC            MOV     DPTR,#R_TimeOut+02H
00367F F0                MOVX    @DPTR,A
 1530: 			}
003680 22                RET     
 1531: 		return;
 1532: 
 1533: 		}
003681         ?C0225?CS_SCALE_PROC:
 1534: 		
 1535: 
 1536: 		//锁定模式下的超时处理
 1537: 		if(R_Scale_state == CS_Scale_state_locking)
003681 904CC5            MOV     DPTR,#R_Scale_state
003684 E0                MOVX    A,@DPTR
003685 B40421            CJNE    A,#04H,?C0212?CS_SCALE_PROC
 1538: 		{
 1539: 			R_TimeOut.unstable=0;
003688 E4                CLR     A
003689 904CBC            MOV     DPTR,#R_TimeOut+02H
00368C F0                MOVX    @DPTR,A
 1540: 			R_TimeOut.lock++;
00368D 904CBB            MOV     DPTR,#R_TimeOut+01H
003690 E0                MOVX    A,@DPTR
003691 04                INC     A
003692 F0                MOVX    @DPTR,A
 1541: 			
 1542: 			if(R_TimeOut.lock>=CS_Scale_TimeOut_Lock)
003693 E0                MOVX    A,@DPTR
003694 C3                CLR     C
003695 940F              SUBB    A,#0FH
003697 4010              JC      ?C0212?CS_SCALE_PROC
 1543: 			{
 1544: 				
 1545: 				R_Scale_state = CS_Scale_state_standby;
003699 904CC5            MOV     DPTR,#R_Scale_state
00369C 7402              MOV     A,#02H
00369E F0                MOVX    @DPTR,A
 1546: 				CS_Scale_StandbyProc(1);
00369F 7F01              MOV     R7,#01H
0036A1 122E8D            LCALL   _CS_Scale_StandbyProc
 1547: 				R_TimeOut.lock=0;
0036A4 E4                CLR     A
0036A5 904CBB            MOV     DPTR,#R_TimeOut+01H
0036A8 F0                MOVX    @DPTR,A
 1548: 			}
 1549: 		return;
 1550: 		}		
 1551: 		
 1552: 
 1553: 	}
 1554: 
 1555: }
0036A9         ?C0212?CS_SCALE_PROC:
0036A9 22                RET     
----- FUNCTION _CS_Scale_TimeOutProc (END) -------


----- FUNCTION _CS_MemoryWeightClear_Timer (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  887: void CS_MemoryWeightClear_Timer(u8_t option)
  888: {
;---- Variable 'option' assigned to Register 'R7' ----
  889: 	static u8_t xdata timecount; 				//计时变量
  890: 	static u8_t xdata B_Timeout;
  891: 
  892: 	if(option==StartClearMemWeightTimer)
0036AA EF                MOV     A,R7
0036AB B40107            CJNE    A,#01H,?C0124?CS_SCALE_PROC
  893: 		{
  894: 		timecount=0;
0036AE E4                CLR     A
0036AF 904CA9            MOV     DPTR,#timecount
0036B2 F0                MOVX    @DPTR,A
  895: 		B_Timeout = false;
0036B3 A3                INC     DPTR
0036B4 F0                MOVX    @DPTR,A
  896: 		}
0036B5         ?C0124?CS_SCALE_PROC:
  897: 
  898: 	if(option==MemWeightTimerInc)
0036B5 EF                MOV     A,R7
0036B6 B4020C            CJNE    A,#02H,?C0125?CS_SCALE_PROC
  899: 		{
  900: 		if(timecount<255 ) 
0036B9 904CA9            MOV     DPTR,#timecount
0036BC E0                MOVX    A,@DPTR
0036BD C3                CLR     C
0036BE 94FF              SUBB    A,#0FFH
0036C0 5003              JNC     ?C0125?CS_SCALE_PROC
  901: 		timecount++;
0036C2 E0                MOVX    A,@DPTR
0036C3 04                INC     A
0036C4 F0                MOVX    @DPTR,A
  902: 		}
0036C5         ?C0125?CS_SCALE_PROC:
  903: 	
  904: 	if(B_Timeout == false)
0036C5 904CAA            MOV     DPTR,#B_Timeout
0036C8 E0                MOVX    A,@DPTR
0036C9 7014              JNZ     ?C0129?CS_SCALE_PROC
  905: 		{
  906: 		if(timecount>SoftTimerTimeOut)
0036CB 904CA9            MOV     DPTR,#timecount
0036CE E0                MOVX    A,@DPTR
0036CF D3                SETB    C
0036D0 9496              SUBB    A,#096H
0036D2 400B              JC      ?C0129?CS_SCALE_PROC
  907: 			{
  908: 			B_Timeout = true;
0036D4 A3                INC     DPTR
0036D5 7401              MOV     A,#01H
0036D7 F0                MOVX    @DPTR,A
  909: 			R_Weight_Mem = 0;	//时间到清记忆重量
0036D8 E4                CLR     A
0036D9 904CC3            MOV     DPTR,#R_Weight_Mem
0036DC F0                MOVX    @DPTR,A
0036DD A3                INC     DPTR
0036DE F0                MOVX    @DPTR,A
  910: 			}
  911: 		}
  912: }
0036DF         ?C0129?CS_SCALE_PROC:
0036DF 22                RET     
----- FUNCTION _CS_MemoryWeightClear_Timer (END) -------


----- FUNCTION CS_1186Com_ReadAdc_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  145: void CS_1186Com_ReadAdc_Proc(void)
  146: {
  147: 	u32_t	data_rec;
  148: 	
  149: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAd)
0036E0 904D55            MOV     DPTR,#R_Weight_Com_Coo
0036E3 E0                MOVX    A,@DPTR
0036E4 B4801F            CJNE    A,#080H,?C0020?CS_COMMTO1186
  150: 		{
  151: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadAd,0);
0036E7 7B00              MOV     R3,#00H
0036E9 7A00              MOV     R2,#00H
0036EB 7900              MOV     R1,#00H
0036ED 7F80              MOV     R7,#080H
0036EF 12192C            LCALL   _CS_CommTo1186_SendCmd
  152: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadAd;
0036F2 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
0036F5 7480              MOV     A,#080H
0036F7 F0                MOVX    @DPTR,A
  153: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadAdStandby;
0036F8 904D55            MOV     DPTR,#R_Weight_Com_Coo
0036FB 7401              MOV     A,#01H
0036FD F0                MOVX    @DPTR,A
  154: 		uartTimeoutCnt=0;
0036FE E4                CLR     A
0036FF 904D68            MOV     DPTR,#uartTimeoutCnt
003702 F0                MOVX    @DPTR,A
  155: 		YC_UARTClearBuffer();
003703 120592            LCALL   YC_UARTClearBuffer
  156: 		}
003706         ?C0020?CS_COMMTO1186:
  157: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAdStandby)
003706 904D55            MOV     DPTR,#R_Weight_Com_Coo
003709 E0                MOVX    A,@DPTR
00370A 6401              XRL     A,#01H
00370C 6002              JZ      $ + 4H
00370E E1B4              AJMP    ?C0028?CS_COMMTO1186
  158: 		{						
  159: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 9)==9)
003710 7B01              MOV     R3,#01H
003712 7A4D              MOV     R2,#HIGH uartRcvBuf
003714 7945              MOV     R1,#LOW uartRcvBuf
003716 7D09              MOV     R5,#09H
003718 FC                MOV     R4,A
003719 1207A8            LCALL   _YC_UARTReciveDataExpected
00371C EF                MOV     A,R7
00371D 6409              XRL     A,#09H
00371F 4E                ORL     A,R6
003720 6002              JZ      $ + 4H
003722 E1B4              AJMP    ?C0028?CS_COMMTO1186
  160: 			{						
  161: 			if(uartRcvBuf[3] == CS_CommTo1186_ReadAd)   
003724 904D48            MOV     DPTR,#uartRcvBuf+03H
003727 E0                MOVX    A,@DPTR
003728 6480              XRL     A,#080H
00372A 6002              JZ      $ + 4H
00372C E1AE              AJMP    ?C0023?CS_COMMTO1186
  162: 				{
  163: 				
  164: 				
  165: 				R_1186sys_state = uartRcvBuf[7];
00372E 904D4C            MOV     DPTR,#uartRcvBuf+07H
003731 E0                MOVX    A,@DPTR
003732 904CDA            MOV     DPTR,#R_1186sys_state
003735 F0                MOVX    @DPTR,A
  166: 
  167: 				if(R_1186sys_state&0x08)			//AD数据更新标志
003736 30E35C            JNB     ACC.3,?C0024?CS_COMMTO1186
  168: 					{
  169: 					B_Weight_AdOk = true;
003739 904CD7            MOV     DPTR,#B_Weight_AdOk
00373C 7401              MOV     A,#01H
00373E F0                MOVX    @DPTR,A
  170: 					data_rec = uartRcvBuf[4];
00373F 904D49            MOV     DPTR,#uartRcvBuf+04H
003742 E0                MOVX    A,@DPTR
003743 FF                MOV     R7,A
003744 E4                CLR     A
003745 FC                MOV     R4,A
003746 FD                MOV     R5,A
003747 FE                MOV     R6,A
;---- Variable 'data_rec' assigned to Register 'R4/R5/R6/R7' ----
  171: 					data_rec = (data_rec<<8) + uartRcvBuf[5];
003748 7808              MOV     R0,#08H
00374A 12031F            LCALL   ?C?LSHL
00374D A804              MOV     R0,AR4
00374F A905              MOV     R1,AR5
003751 AA06              MOV     R2,AR6
003753 AB07              MOV     R3,AR7
003755 A3                INC     DPTR
003756 E0                MOVX    A,@DPTR
003757 FF                MOV     R7,A
003758 E4                CLR     A
003759 FC                MOV     R4,A
00375A FD                MOV     R5,A
00375B FE                MOV     R6,A
00375C EB                MOV     A,R3
00375D 2F                ADD     A,R7
00375E FF                MOV     R7,A
00375F EE                MOV     A,R6
003760 3A                ADDC    A,R2
003761 FE                MOV     R6,A
003762 ED                MOV     A,R5
003763 39                ADDC    A,R1
003764 FD                MOV     R5,A
003765 EC                MOV     A,R4
003766 38                ADDC    A,R0
003767 FC                MOV     R4,A
  172: 					data_rec = (data_rec<<8) + uartRcvBuf[6];
003768 7808              MOV     R0,#08H
00376A 12031F            LCALL   ?C?LSHL
00376D A804              MOV     R0,AR4
00376F A905              MOV     R1,AR5
003771 AA06              MOV     R2,AR6
003773 AB07              MOV     R3,AR7
003775 A3                INC     DPTR
003776 E0                MOVX    A,@DPTR
003777 FF                MOV     R7,A
003778 E4                CLR     A
003779 FC                MOV     R4,A
00377A FD                MOV     R5,A
00377B FE                MOV     R6,A
00377C EB                MOV     A,R3
00377D 2F                ADD     A,R7
00377E FF                MOV     R7,A
00377F EE                MOV     A,R6
003780 3A                ADDC    A,R2
003781 FE                MOV     R6,A
003782 ED                MOV     A,R5
003783 39                ADDC    A,R1
003784 FD                MOV     R5,A
003785 EC                MOV     A,R4
003786 38                ADDC    A,R0
003787 FC                MOV     R4,A
  173: 					R_AD_Original =data_rec >> 6;	
003788 7806              MOV     R0,#06H
00378A 12030C            LCALL   ?C?ULSHR
00378D 904CD8            MOV     DPTR,#R_AD_Original
003790 EE                MOV     A,R6
003791 F0                MOVX    @DPTR,A
003792 A3                INC     DPTR
003793 EF                MOV     A,R7
003794 F0                MOVX    @DPTR,A
  174: 					}
003795         ?C0024?CS_COMMTO1186:
  175: 				
  176: 				if(R_Scale_state==CS_Scale_state_init)
003795 904CC5            MOV     DPTR,#R_Scale_state
003798 E0                MOVX    A,@DPTR
003799 7006              JNZ     ?C0025?CS_COMMTO1186
  177: 					R_Weight_Com_Coo.now = CS_CommTo1186_Null;
00379B 904D55            MOV     DPTR,#R_Weight_Com_Coo
00379E F0                MOVX    @DPTR,A
00379F 8006              SJMP    ?C0026?CS_COMMTO1186
0037A1         ?C0025?CS_COMMTO1186:
  178: 				else
  179: 					R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplay;
0037A1 904D55            MOV     DPTR,#R_Weight_Com_Coo
0037A4 74E0              MOV     A,#0E0H
0037A6 F0                MOVX    @DPTR,A
0037A7         ?C0026?CS_COMMTO1186:
  180: 				R_Weight_Com_Coo.sucess=true;
0037A7 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
0037AA 7401              MOV     A,#01H
0037AC F0                MOVX    @DPTR,A
  181: 				
  182: 				}
0037AD 22                RET     
0037AE         ?C0023?CS_COMMTO1186:
  183: 			else
  184: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
0037AE 904D68            MOV     DPTR,#uartTimeoutCnt
0037B1 7415              MOV     A,#015H
0037B3 F0                MOVX    @DPTR,A
  185: 			}
  186: 		}
  187: }
0037B4         ?C0028?CS_COMMTO1186:
0037B4 22                RET     
----- FUNCTION CS_1186Com_ReadAdc_Proc (END) -------


----- FUNCTION CS_1186Com_ReadAdZero_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  359: void CS_1186Com_ReadAdZero_Proc(void)
  360: {
  361: 	u32_t	data_rec;
  362: 	u16_t	R_AD_Zero;
  363: 	
  364: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAdZero)
0037B5 904D55            MOV     DPTR,#R_Weight_Com_Coo
0037B8 E0                MOVX    A,@DPTR
0037B9 B4851F            CJNE    A,#085H,?C0055?CS_COMMTO1186
  365: 		{
  366: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadAdZero,0);
0037BC 7B00              MOV     R3,#00H
0037BE 7A00              MOV     R2,#00H
0037C0 7900              MOV     R1,#00H
0037C2 7F85              MOV     R7,#085H
0037C4 12192C            LCALL   _CS_CommTo1186_SendCmd
  367: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadAdZero;
0037C7 904D56            MOV     DPTR,#R_Weight_Com_Coo+01H
0037CA 7485              MOV     A,#085H
0037CC F0                MOVX    @DPTR,A
  368: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadAdZeroStandby;
0037CD 904D55            MOV     DPTR,#R_Weight_Com_Coo
0037D0 7406              MOV     A,#06H
0037D2 F0                MOVX    @DPTR,A
  369: 		uartTimeoutCnt=0;
0037D3 E4                CLR     A
0037D4 904D68            MOV     DPTR,#uartTimeoutCnt
0037D7 F0                MOVX    @DPTR,A
  370: 		YC_UARTClearBuffer();
0037D8 120592            LCALL   YC_UARTClearBuffer
  371: 		}
0037DB         ?C0055?CS_COMMTO1186:
  372: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAdZeroStandby)
0037DB 904D55            MOV     DPTR,#R_Weight_Com_Coo
0037DE E0                MOVX    A,@DPTR
0037DF 6406              XRL     A,#06H
0037E1 6003              JZ      $ + 5H
0037E3 023866            LJMP    ?C0060?CS_COMMTO1186
  373: 		{						
  374: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 8)==8)
0037E6 7B01              MOV     R3,#01H
0037E8 7A4D              MOV     R2,#HIGH uartRcvBuf
0037EA 7945              MOV     R1,#LOW uartRcvBuf
0037EC 7D08              MOV     R5,#08H
0037EE FC                MOV     R4,A
0037EF 1207A8            LCALL   _YC_UARTReciveDataExpected
0037F2 EF                MOV     A,R7
0037F3 6408              XRL     A,#08H
0037F5 4E                ORL     A,R6
0037F6 706E              JNZ     ?C0060?CS_COMMTO1186
  375: 			{						
  376: 			if(uartRcvBuf[3] == CS_CommTo1186_ReadAdZero)   
0037F8 904D48            MOV     DPTR,#uartRcvBuf+03H
0037FB E0                MOVX    A,@DPTR
0037FC 6485              XRL     A,#085H
0037FE 7060              JNZ     ?C0058?CS_COMMTO1186
  377: 				{
  378: 				data_rec = uartRcvBuf[4];
003800 A3                INC     DPTR
003801 E0                MOVX    A,@DPTR
003802 FF                MOV     R7,A
003803 E4                CLR     A
003804 FC                MOV     R4,A
003805 FD                MOV     R5,A
003806 FE                MOV     R6,A
;---- Variable 'data_rec' assigned to Register 'R4/R5/R6/R7' ----
  379: 				data_rec = (data_rec<<8) + uartRcvBuf[5];
003807 7808              MOV     R0,#08H
003809 12031F            LCALL   ?C?LSHL
00380C A804              MOV     R0,AR4
00380E A905              MOV     R1,AR5
003810 AA06              MOV     R2,AR6
003812 AB07              MOV     R3,AR7
003814 A3                INC     DPTR
003815 E0                MOVX    A,@DPTR
003816 FF                MOV     R7,A
003817 E4                CLR     A
003818 FC                MOV     R4,A
003819 FD                MOV     R5,A
00381A FE                MOV     R6,A
00381B EB                MOV     A,R3
00381C 2F                ADD     A,R7
00381D FF                MOV     R7,A
00381E EE                MOV     A,R6
00381F 3A                ADDC    A,R2
003820 FE                MOV     R6,A
003821 ED                MOV     A,R5
003822 39                ADDC    A,R1
003823 FD                MOV     R5,A
003824 EC                MOV     A,R4
003825 38                ADDC    A,R0
003826 FC                MOV     R4,A
  380: 				data_rec = (data_rec<<8) + uartRcvBuf[6];
003827 7808              MOV     R0,#08H
003829 12031F            LCALL   ?C?LSHL
00382C A804              MOV     R0,AR4
00382E A905              MOV     R1,AR5
003830 AA06              MOV     R2,AR6
003832 AB07              MOV     R3,AR7
003834 A3                INC     DPTR
003835 E0                MOVX    A,@DPTR
003836 FF                MOV     R7,A
003837 E4                CLR     A
003838 FC                MOV     R4,A
003839 FD                MOV     R5,A
00383A FE                MOV     R6,A
00383B EB                MOV     A,R3
00383C 2F                ADD     A,R7
00383D FF                MOV     R7,A
00383E EE                MOV     A,R6
00383F 3A                ADDC    A,R2
003840 FE                MOV     R6,A
003841 ED                MOV     A,R5
003842 39                ADDC    A,R1
003843 FD                MOV     R5,A
003844 EC                MOV     A,R4
003845 38                ADDC    A,R0
003846 FC                MOV     R4,A
  381: 				R_AD_Zero =data_rec >> 6;	
003847 7806              MOV     R0,#06H
003849 12030C            LCALL   ?C?ULSHR
;---- Variable 'R_AD_Zero' assigned to Register 'R6/R7' ----
  382: 				CS_Scale_ZeroProc(SetRunningZero,R_AD_Zero);
00384C AD07              MOV     R5,AR7
00384E AC06              MOV     R4,AR6
003850 7F06              MOV     R7,#06H
003852 1212FB            LCALL   _CS_Scale_ZeroProc
  383: 				
  384: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
003855 E4                CLR     A
003856 904D55            MOV     DPTR,#R_Weight_Com_Coo
003859 F0                MOVX    @DPTR,A
  385: 				R_Weight_Com_Coo.sucess=true;
00385A 904D57            MOV     DPTR,#R_Weight_Com_Coo+02H
00385D 04                INC     A
00385E F0                MOVX    @DPTR,A
  386: 				
  387: 				}
00385F 22                RET     
003860         ?C0058?CS_COMMTO1186:
  388: 			else
  389: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
003860 904D68            MOV     DPTR,#uartTimeoutCnt
003863 7415              MOV     A,#015H
003865 F0                MOVX    @DPTR,A
  390: 			}
  391: 		}
  392: }
003866         ?C0060?CS_COMMTO1186:
003866 22                RET     
----- FUNCTION CS_1186Com_ReadAdZero_Proc (END) -------


----- FUNCTION CS_ScaleDisplay_Debug (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
   55: void CS_ScaleDisplay_Debug()
   56: {
   57: 	u8_t buf[5];
   58: 	CS_ScaleDisplay_HexToBcd(R_Debug_temp,buf);
003867 904CC7            MOV     DPTR,#R_Debug_temp
00386A E0                MOVX    A,@DPTR
00386B FE                MOV     R6,A
00386C A3                INC     DPTR
00386D E0                MOVX    A,@DPTR
00386E FF                MOV     R7,A
00386F 7B01              MOV     R3,#01H
003871 7A4E              MOV     R2,#HIGH buf
003873 7929              MOV     R1,#LOW buf
003875 11B8              ACALL   _CS_ScaleDisplay_HexToBcd
   59: 		
   60: 	CS_lcd_showbuf[0] = CS_ScaleDisplay_LookUpTable(buf[1]);
003877 904E2A            MOV     DPTR,#buf+01H
00387A E0                MOVX    A,@DPTR
00387B FF                MOV     R7,A
00387C 1217D5            LCALL   _CS_ScaleDisplay_LookUpTable
00387F 904D23            MOV     DPTR,#CS_lcd_showbuf
003882 EF                MOV     A,R7
003883 F0                MOVX    @DPTR,A
   61: 	CS_lcd_showbuf[1] = CS_ScaleDisplay_LookUpTable(buf[2]);
003884 904E2B            MOV     DPTR,#buf+02H
003887 E0                MOVX    A,@DPTR
003888 FF                MOV     R7,A
003889 1217D5            LCALL   _CS_ScaleDisplay_LookUpTable
00388C 904D24            MOV     DPTR,#CS_lcd_showbuf+01H
00388F EF                MOV     A,R7
003890 F0                MOVX    @DPTR,A
   62: 	CS_lcd_showbuf[2] = CS_ScaleDisplay_LookUpTable(buf[3]);
003891 904E2C            MOV     DPTR,#buf+03H
003894 E0                MOVX    A,@DPTR
003895 FF                MOV     R7,A
003896 1217D5            LCALL   _CS_ScaleDisplay_LookUpTable
003899 904D25            MOV     DPTR,#CS_lcd_showbuf+02H
00389C EF                MOV     A,R7
00389D F0                MOVX    @DPTR,A
   63: 	CS_lcd_showbuf[3] = CS_ScaleDisplay_LookUpTable(buf[4]);	
00389E 904E2D            MOV     DPTR,#buf+04H
0038A1 E0                MOVX    A,@DPTR
0038A2 FF                MOV     R7,A
0038A3 1217D5            LCALL   _CS_ScaleDisplay_LookUpTable
0038A6 904D26            MOV     DPTR,#CS_lcd_showbuf+03H
0038A9 EF                MOV     A,R7
0038AA F0                MOVX    @DPTR,A
   64: 		
   65: 	CS_ScaleDisplay_LcdBuf_rShift4();
0038AB 3123              ACALL   CS_ScaleDisplay_LcdBuf_rShift4
   66: 
   67: 	CS_CommTo1186_SendCmd(CS_CommTo1186_LcdDisplay,CS_Lcd_Send_Data);
0038AD 7B01              MOV     R3,#01H
0038AF 7A4D              MOV     R2,#HIGH CS_Lcd_Send_Data
0038B1 7928              MOV     R1,#LOW CS_Lcd_Send_Data
0038B3 7FE0              MOV     R7,#0E0H
0038B5 02192C            LJMP    _CS_CommTo1186_SendCmd
   68: 
----- FUNCTION CS_ScaleDisplay_Debug (END) -------


----- FUNCTION _CS_ScaleDisplay_HexToBcd (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  267: void CS_ScaleDisplay_HexToBcd(u16_t HexData,u8_t* buf)
  268: {
0038B8 904E18            MOV     DPTR,#HexData
0038BB EE                MOV     A,R6
0038BC F0                MOVX    @DPTR,A
0038BD A3                INC     DPTR
0038BE EF                MOV     A,R7
0038BF F0                MOVX    @DPTR,A
0038C0 A3                INC     DPTR
0038C1 EB                MOV     A,R3
0038C2 F0                MOVX    @DPTR,A
0038C3 A3                INC     DPTR
0038C4 EA                MOV     A,R2
0038C5 F0                MOVX    @DPTR,A
0038C6 A3                INC     DPTR
0038C7 E9                MOV     A,R1
0038C8 F0                MOVX    @DPTR,A
  269: 	u8_t  i;
  270: 	for(i=0;i<5;i++)
0038C9 E4                CLR     A
0038CA A3                INC     DPTR
0038CB F0                MOVX    @DPTR,A
0038CC         ?C0037?CS_SCALEDISPLAY:
0038CC 904E1D            MOV     DPTR,#i
0038CF E0                MOVX    A,@DPTR
0038D0 FB                MOV     R3,A
0038D1 C3                CLR     C
0038D2 9405              SUBB    A,#05H
0038D4 504C              JNC     ?C0040?CS_SCALEDISPLAY
  271: 		{
  272: 		buf[4-i] =  HexData%10;
0038D6 904E18            MOV     DPTR,#HexData
0038D9 E0                MOVX    A,@DPTR
0038DA FE                MOV     R6,A
0038DB A3                INC     DPTR
0038DC E0                MOVX    A,@DPTR
0038DD FF                MOV     R7,A
0038DE 7C00              MOV     R4,#00H
0038E0 7D0A              MOV     R5,#0AH
0038E2 120173            LCALL   ?C?UIDIV
0038E5 AF05              MOV     R7,AR5
0038E7 EB                MOV     A,R3
0038E8 FD                MOV     R5,A
0038E9 C3                CLR     C
0038EA 7404              MOV     A,#04H
0038EC 9D                SUBB    A,R5
0038ED FD                MOV     R5,A
0038EE E4                CLR     A
0038EF 9400              SUBB    A,#00H
0038F1 FC                MOV     R4,A
0038F2 A3                INC     DPTR
0038F3 E0                MOVX    A,@DPTR
0038F4 FB                MOV     R3,A
0038F5 A3                INC     DPTR
0038F6 E0                MOVX    A,@DPTR
0038F7 FA                MOV     R2,A
0038F8 A3                INC     DPTR
0038F9 E0                MOVX    A,@DPTR
0038FA F9                MOV     R1,A
0038FB 8D82              MOV     DPL,R5
0038FD 8C83              MOV     DPH,R4
0038FF EF                MOV     A,R7
003900 120151            LCALL   ?C?CSTOPTR
  273: 		HexData = HexData /10;
003903 904E18            MOV     DPTR,#HexData
003906 E0                MOVX    A,@DPTR
003907 FE                MOV     R6,A
003908 A3                INC     DPTR
003909 E0                MOVX    A,@DPTR
00390A FF                MOV     R7,A
00390B 7C00              MOV     R4,#00H
00390D 7D0A              MOV     R5,#0AH
00390F 120173            LCALL   ?C?UIDIV
003912 904E18            MOV     DPTR,#HexData
003915 EE                MOV     A,R6
003916 F0                MOVX    @DPTR,A
003917 A3                INC     DPTR
003918 EF                MOV     A,R7
003919 F0                MOVX    @DPTR,A
  274: 		}	
00391A 904E1D            MOV     DPTR,#i
00391D E0                MOVX    A,@DPTR
00391E 04                INC     A
00391F F0                MOVX    @DPTR,A
003920 80AA              SJMP    ?C0037?CS_SCALEDISPLAY
  275: }
003922         ?C0040?CS_SCALEDISPLAY:
003922 22                RET     
----- FUNCTION _CS_ScaleDisplay_HexToBcd (END) -------


----- FUNCTION CS_ScaleDisplay_LcdBuf_rShift4 (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  242: void CS_ScaleDisplay_LcdBuf_rShift4()
  243: {
  244: 	CS_lcd_showbuf[4] = (CS_lcd_showbuf[4] & 0xf0) | (CS_lcd_showbuf[3] & 0x0f);
  245: 	CS_lcd_showbuf[3] = (CS_lcd_showbuf[3] & 0xf0) | (CS_lcd_showbuf[2] & 0x0f);
003923 904D26            MOV     DPTR,#CS_lcd_showbuf+03H
003926 E0                MOVX    A,@DPTR
003927 540F              ANL     A,#0FH
003929 FF                MOV     R7,A
00392A A3                INC     DPTR
00392B E0                MOVX    A,@DPTR
00392C 54F0              ANL     A,#0F0H
00392E 4F                ORL     A,R7
00392F F0                MOVX    @DPTR,A
  246: 	CS_lcd_showbuf[2] = (CS_lcd_showbuf[2] & 0xf0) | (CS_lcd_showbuf[1] & 0x0f);
003930 904D25            MOV     DPTR,#CS_lcd_showbuf+02H
003933 E0                MOVX    A,@DPTR
003934 540F              ANL     A,#0FH
003936 FF                MOV     R7,A
003937 A3                INC     DPTR
003938 E0                MOVX    A,@DPTR
003939 54F0              ANL     A,#0F0H
00393B 4F                ORL     A,R7
00393C F0                MOVX    @DPTR,A
  247: 	CS_lcd_showbuf[1] = (CS_lcd_showbuf[1] & 0xf0) | (CS_lcd_showbuf[0] & 0x0f);
00393D 904D24            MOV     DPTR,#CS_lcd_showbuf+01H
003940 E0                MOVX    A,@DPTR
003941 540F              ANL     A,#0FH
003943 FF                MOV     R7,A
003944 A3                INC     DPTR
003945 E0                MOVX    A,@DPTR
003946 54F0              ANL     A,#0F0H
003948 4F                ORL     A,R7
003949 F0                MOVX    @DPTR,A
  248: 	CS_lcd_showbuf[0] = CS_lcd_showbuf[0] & 0xf0;
00394A 904D23            MOV     DPTR,#CS_lcd_showbuf
00394D E0                MOVX    A,@DPTR
00394E 540F              ANL     A,#0FH
003950 FF                MOV     R7,A
003951 A3                INC     DPTR
003952 E0                MOVX    A,@DPTR
003953 54F0              ANL     A,#0F0H
003955 4F                ORL     A,R7
003956 F0                MOVX    @DPTR,A
  249: 
003957 904D23            MOV     DPTR,#CS_lcd_showbuf
00395A E0                MOVX    A,@DPTR
00395B 54F0              ANL     A,#0F0H
00395D FF                MOV     R7,A
00395E F0                MOVX    @DPTR,A
00395F FD                MOV     R5,A
  250: 	//清显示缓存数字部分
  251: 	CS_Lcd_Send_Data[0]  &= 0x0f;
003960 904D28            MOV     DPTR,#CS_Lcd_Send_Data
003963 E0                MOVX    A,@DPTR
003964 540F              ANL     A,#0FH
003966 F0                MOVX    @DPTR,A
  252: 	CS_Lcd_Send_Data[1]  &= 0x08;
003967 A3                INC     DPTR
003968 E0                MOVX    A,@DPTR
003969 5408              ANL     A,#08H
00396B F0                MOVX    @DPTR,A
  253: 	CS_Lcd_Send_Data[2]  &= 0x08;
00396C A3                INC     DPTR
00396D E0                MOVX    A,@DPTR
00396E 5408              ANL     A,#08H
003970 F0                MOVX    @DPTR,A
  254: 	CS_Lcd_Send_Data[3]  &= 0x08;
003971 A3                INC     DPTR
003972 E0                MOVX    A,@DPTR
003973 5408              ANL     A,#08H
003975 F0                MOVX    @DPTR,A
  255: 	CS_Lcd_Send_Data[4]  &= 0xf8;
003976 A3                INC     DPTR
003977 E0                MOVX    A,@DPTR
003978 54F8              ANL     A,#0F8H
00397A F0                MOVX    @DPTR,A
  256: 
  257: 	//显示缓存数字部分重新赋值
  258: 	CS_Lcd_Send_Data[0]  |= CS_lcd_showbuf[0];
00397B 904D28            MOV     DPTR,#CS_Lcd_Send_Data
00397E E0                MOVX    A,@DPTR
00397F 4D                ORL     A,R5
003980 F0                MOVX    @DPTR,A
  259: 	CS_Lcd_Send_Data[1]  |= CS_lcd_showbuf[1];
003981 A3                INC     DPTR
003982 E0                MOVX    A,@DPTR
003983 FF                MOV     R7,A
003984 904D24            MOV     DPTR,#CS_lcd_showbuf+01H
003987 E0                MOVX    A,@DPTR
003988 FE                MOV     R6,A
003989 EF                MOV     A,R7
00398A 4E                ORL     A,R6
00398B 904D29            MOV     DPTR,#CS_Lcd_Send_Data+01H
00398E F0                MOVX    @DPTR,A
  260: 	CS_Lcd_Send_Data[2]  |= CS_lcd_showbuf[2];
00398F A3                INC     DPTR
003990 E0                MOVX    A,@DPTR
003991 FF                MOV     R7,A
003992 904D25            MOV     DPTR,#CS_lcd_showbuf+02H
003995 E0                MOVX    A,@DPTR
003996 FE                MOV     R6,A
003997 EF                MOV     A,R7
003998 4E                ORL     A,R6
003999 904D2A            MOV     DPTR,#CS_Lcd_Send_Data+02H
00399C F0                MOVX    @DPTR,A
  261: 	CS_Lcd_Send_Data[3]  |= CS_lcd_showbuf[3];
00399D A3                INC     DPTR
00399E E0                MOVX    A,@DPTR
00399F FF                MOV     R7,A
0039A0 904D26            MOV     DPTR,#CS_lcd_showbuf+03H
0039A3 E0                MOVX    A,@DPTR
0039A4 FE                MOV     R6,A
0039A5 EF                MOV     A,R7
0039A6 4E                ORL     A,R6
0039A7 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
0039AA F0                MOVX    @DPTR,A
  262: 	CS_Lcd_Send_Data[4]  |= CS_lcd_showbuf[4];
0039AB A3                INC     DPTR
0039AC E0                MOVX    A,@DPTR
0039AD FF                MOV     R7,A
0039AE 904D27            MOV     DPTR,#CS_lcd_showbuf+04H
0039B1 E0                MOVX    A,@DPTR
0039B2 FE                MOV     R6,A
0039B3 EF                MOV     A,R7
0039B4 4E                ORL     A,R6
0039B5 904D2C            MOV     DPTR,#CS_Lcd_Send_Data+04H
0039B8 F0                MOVX    @DPTR,A
  263: 		
  264: }
0039B9 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdBuf_rShift4 (END) -------


----- FUNCTION CS_ScaleDisplay_LcdShowNull (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  297: void CS_ScaleDisplay_LcdShowNull(void)
  298: {
  299: 	CS_Lcd_Send_Data[0] = 0x00;
  300: 	CS_Lcd_Send_Data[1] = 0x00;
0039BA E4                CLR     A
0039BB 904D28            MOV     DPTR,#CS_Lcd_Send_Data
0039BE F0                MOVX    @DPTR,A
  301: 	CS_Lcd_Send_Data[2] = 0x00;
0039BF A3                INC     DPTR
0039C0 F0                MOVX    @DPTR,A
  302: 	CS_Lcd_Send_Data[3] = 0x00;
0039C1 A3                INC     DPTR
0039C2 F0                MOVX    @DPTR,A
  303: 	CS_Lcd_Send_Data[4] = 0x00;
0039C3 A3                INC     DPTR
0039C4 F0                MOVX    @DPTR,A
  304: }
0039C5 A3                INC     DPTR
0039C6 F0                MOVX    @DPTR,A
  305: 
0039C7 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdShowNull (END) -------


----- FUNCTION CS_ScaleDisplay_LcdShowAll (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  315: void CS_ScaleDisplay_LcdShowAll(void)
  316: {
  317: 	CS_Lcd_Send_Data[0] = 0xFF;
  318: 	CS_Lcd_Send_Data[1] = 0xFF;
0039C8 904D28            MOV     DPTR,#CS_Lcd_Send_Data
0039CB 74FF              MOV     A,#0FFH
0039CD F0                MOVX    @DPTR,A
  319: 	CS_Lcd_Send_Data[2] = 0xFF;
0039CE A3                INC     DPTR
0039CF F0                MOVX    @DPTR,A
  320: 	CS_Lcd_Send_Data[3] = 0xFF;
0039D0 A3                INC     DPTR
0039D1 F0                MOVX    @DPTR,A
  321: 	CS_Lcd_Send_Data[4] = 0xFF;
0039D2 A3                INC     DPTR
0039D3 F0                MOVX    @DPTR,A
  322: }
0039D4 A3                INC     DPTR
0039D5 F0                MOVX    @DPTR,A
  323: 
0039D6 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdShowAll (END) -------


----- FUNCTION CS_ScaleDisplay_LcdBackup (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  325: void CS_ScaleDisplay_LcdBackup(void)
  326: {
  327: 	CS_Lcd_Send_Data_BAK[0] = CS_Lcd_Send_Data[0];
  328: 	CS_Lcd_Send_Data_BAK[1] = CS_Lcd_Send_Data[1];
0039D7 904D28            MOV     DPTR,#CS_Lcd_Send_Data
0039DA E0                MOVX    A,@DPTR
0039DB 904D1D            MOV     DPTR,#CS_Lcd_Send_Data_BAK
0039DE F0                MOVX    @DPTR,A
  329: 	CS_Lcd_Send_Data_BAK[2] = CS_Lcd_Send_Data[2];
0039DF 904D29            MOV     DPTR,#CS_Lcd_Send_Data+01H
0039E2 E0                MOVX    A,@DPTR
0039E3 904D1E            MOV     DPTR,#CS_Lcd_Send_Data_BAK+01H
0039E6 F0                MOVX    @DPTR,A
  330: 	CS_Lcd_Send_Data_BAK[3] = CS_Lcd_Send_Data[3];
0039E7 904D2A            MOV     DPTR,#CS_Lcd_Send_Data+02H
0039EA E0                MOVX    A,@DPTR
0039EB 904D1F            MOV     DPTR,#CS_Lcd_Send_Data_BAK+02H
0039EE F0                MOVX    @DPTR,A
  331: 	CS_Lcd_Send_Data_BAK[4] = CS_Lcd_Send_Data[4];	
0039EF 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+03H
0039F2 E0                MOVX    A,@DPTR
0039F3 904D20            MOV     DPTR,#CS_Lcd_Send_Data_BAK+03H
0039F6 F0                MOVX    @DPTR,A
  332: }
0039F7 904D2C            MOV     DPTR,#CS_Lcd_Send_Data+04H
0039FA E0                MOVX    A,@DPTR
0039FB 904D21            MOV     DPTR,#CS_Lcd_Send_Data_BAK+04H
0039FE F0                MOVX    @DPTR,A
  333: 
0039FF 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdBackup (END) -------


----- FUNCTION _bigLittleEndianSwap (BEGIN) -----
 FILE: 'lxProtocol.c'
   17: static void bigLittleEndianSwap(u8_t *buf, u16_t len)
   18: {
003A00 904DB8            MOV     DPTR,#buf
003A03 EB                MOV     A,R3
003A04 F0                MOVX    @DPTR,A
003A05 A3                INC     DPTR
003A06 EA                MOV     A,R2
003A07 F0                MOVX    @DPTR,A
003A08 A3                INC     DPTR
003A09 E9                MOV     A,R1
003A0A F0                MOVX    @DPTR,A
003A0B A3                INC     DPTR
003A0C EC                MOV     A,R4
003A0D F0                MOVX    @DPTR,A
003A0E A3                INC     DPTR
003A0F ED                MOV     A,R5
003A10 F0                MOVX    @DPTR,A
   19: 	u16_t i, size;
   20: 	u8_t temp;
   21: 	
   22: 	size = len -1;
003A11 24FF              ADD     A,#0FFH
003A13 FE                MOV     R6,A
003A14 EC                MOV     A,R4
003A15 34FF              ADDC    A,#0FFH
003A17 904DBF            MOV     DPTR,#size
003A1A F0                MOVX    @DPTR,A
003A1B A3                INC     DPTR
003A1C CE                XCH     A,R6
003A1D F0                MOVX    @DPTR,A
   23: 	for(i=0; i<len/2; i++)
003A1E E4                CLR     A
003A1F 904DBD            MOV     DPTR,#i
003A22 F0                MOVX    @DPTR,A
003A23 A3                INC     DPTR
003A24 F0                MOVX    @DPTR,A
003A25         ?C0001?LXPROTOCOL:
003A25 904DBB            MOV     DPTR,#len
003A28 E0                MOVX    A,@DPTR
003A29 C3                CLR     C
003A2A 13                RRC     A
003A2B FE                MOV     R6,A
003A2C A3                INC     DPTR
003A2D E0                MOVX    A,@DPTR
003A2E 13                RRC     A
003A2F FF                MOV     R7,A
003A30 C3                CLR     C
003A31 904DBE            MOV     DPTR,#i+01H
003A34 E0                MOVX    A,@DPTR
003A35 9F                SUBB    A,R7
003A36 904DBD            MOV     DPTR,#i
003A39 E0                MOVX    A,@DPTR
003A3A 9E                SUBB    A,R6
003A3B 507D              JNC     ?C0004?LXPROTOCOL
   24: 	{
   25: 		temp = buf[i];
003A3D 904DB8            MOV     DPTR,#buf
003A40 E0                MOVX    A,@DPTR
003A41 FB                MOV     R3,A
003A42 A3                INC     DPTR
003A43 E0                MOVX    A,@DPTR
003A44 FA                MOV     R2,A
003A45 A3                INC     DPTR
003A46 E0                MOVX    A,@DPTR
003A47 F9                MOV     R1,A
003A48 904DBD            MOV     DPTR,#i
003A4B E0                MOVX    A,@DPTR
003A4C FE                MOV     R6,A
003A4D A3                INC     DPTR
003A4E E0                MOVX    A,@DPTR
003A4F F582              MOV     DPL,A
003A51 8E83              MOV     DPH,R6
003A53 120112            LCALL   ?C?CLDOPTR
003A56 904DC1            MOV     DPTR,#temp
003A59 F0                MOVX    @DPTR,A
   26: 		buf[i] = buf[size -i];
003A5A 904DBD            MOV     DPTR,#i
003A5D E0                MOVX    A,@DPTR
003A5E A3                INC     DPTR
003A5F E0                MOVX    A,@DPTR
003A60 FF                MOV     R7,A
003A61 C3                CLR     C
003A62 904DC0            MOV     DPTR,#size+01H
003A65 E0                MOVX    A,@DPTR
003A66 9F                SUBB    A,R7
003A67 FF                MOV     R7,A
003A68 904DBF            MOV     DPTR,#size
003A6B E0                MOVX    A,@DPTR
003A6C 9E                SUBB    A,R6
003A6D 8F82              MOV     DPL,R7
003A6F F583              MOV     DPH,A
003A71 120112            LCALL   ?C?CLDOPTR
003A74 FF                MOV     R7,A
003A75 904DBD            MOV     DPTR,#i
003A78 E0                MOVX    A,@DPTR
003A79 FC                MOV     R4,A
003A7A A3                INC     DPTR
003A7B E0                MOVX    A,@DPTR
003A7C FD                MOV     R5,A
003A7D F582              MOV     DPL,A
003A7F 8C83              MOV     DPH,R4
003A81 EF                MOV     A,R7
003A82 120151            LCALL   ?C?CSTOPTR
   27: 		buf[size -i] = temp;
003A85 904DC1            MOV     DPTR,#temp
003A88 E0                MOVX    A,@DPTR
003A89 FF                MOV     R7,A
003A8A C3                CLR     C
003A8B 904DC0            MOV     DPTR,#size+01H
003A8E E0                MOVX    A,@DPTR
003A8F 9D                SUBB    A,R5
003A90 FD                MOV     R5,A
003A91 904DBF            MOV     DPTR,#size
003A94 E0                MOVX    A,@DPTR
003A95 9C                SUBB    A,R4
003A96 FC                MOV     R4,A
003A97 904DB8            MOV     DPTR,#buf
003A9A E0                MOVX    A,@DPTR
003A9B FB                MOV     R3,A
003A9C A3                INC     DPTR
003A9D E0                MOVX    A,@DPTR
003A9E FA                MOV     R2,A
003A9F A3                INC     DPTR
003AA0 E0                MOVX    A,@DPTR
003AA1 F9                MOV     R1,A
003AA2 8D82              MOV     DPL,R5
003AA4 8C83              MOV     DPH,R4
003AA6 EF                MOV     A,R7
003AA7 120151            LCALL   ?C?CSTOPTR
   28: 	}
003AAA 904DBE            MOV     DPTR,#i+01H
003AAD E0                MOVX    A,@DPTR
003AAE 04                INC     A
003AAF F0                MOVX    @DPTR,A
003AB0 7006              JNZ     ?C0092?LXPROTOCOL
003AB2 904DBD            MOV     DPTR,#i
003AB5 E0                MOVX    A,@DPTR
003AB6 04                INC     A
003AB7 F0                MOVX    @DPTR,A
003AB8         ?C0092?LXPROTOCOL:
003AB8 4125              AJMP    ?C0001?LXPROTOCOL
   29: }
003ABA         ?C0004?LXPROTOCOL:
003ABA 22                RET     
----- FUNCTION _bigLittleEndianSwap (END) -------


----- FUNCTION lxOptProcess (BEGIN) -----
 FILE: 'lxProtocol.c'
  133: void lxOptProcess(void)
  134: {
  135: 	u8_t i;
  136: 
  137: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
003ABB 904C64            MOV     DPTR,#btCmdBuf+01H
003ABE 7430              MOV     A,#030H
003AC0 F0                MOVX    @DPTR,A
  138: 	btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
003AC1 A3                INC     DPTR
003AC2 741C              MOV     A,#01CH
003AC4 F0                MOVX    @DPTR,A
  139: 	btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
003AC5 E4                CLR     A
003AC6 A3                INC     DPTR
003AC7 F0                MOVX    @DPTR,A
  140: 	switch(lxOptStatus)
003AC8 904C5C            MOV     DPTR,#lxOptStatus
003ACB E0                MOVX    A,@DPTR
003ACC 12036F            LCALL   ?C?CCASE
003ACF 3AF4              DW      ?C0027?LXPROTOCOL
003AD1 10                DB      010H
003AD2 3B60              DW      ?C0031?LXPROTOCOL
003AD4 13                DB      013H
003AD5 3BCD              DW      ?C0034?LXPROTOCOL
003AD7 16                DB      016H
003AD8 3C5E              DW      ?C0040?LXPROTOCOL
003ADA 18                DB      018H
003ADB 3CD2              DW      ?C0050?LXPROTOCOL
003ADD 20                DB      020H
003ADE 3D12              DW      ?C0051?LXPROTOCOL
003AE0 22                DB      022H
003AE1 3D37              DW      ?C0053?LXPROTOCOL
003AE3 25                DB      025H
003AE4 3D65              DW      ?C0055?LXPROTOCOL
003AE6 28                DB      028H
003AE7 3D8C              DW      ?C0058?LXPROTOCOL
003AE9 31                DB      031H
003AEA 3DA5              DW      ?C0062?LXPROTOCOL
003AEC 35                DB      035H
003AED 3DB7              DW      ?C0065?LXPROTOCOL
003AEF 36                DB      036H
003AF0 0000              DW      00H
003AF2 3DC0              DW      ?C0049?LXPROTOCOL
  141: 	{
  142: #if 1
  143: 		case OPT_REGISTER_REQ:
003AF4         ?C0027?LXPROTOCOL:
  144: 			if(*(LX_RECV_BUF + 8) == DEVICE_ID_UNREGISTERED ||
  145: 				*(LX_RECV_BUF + 8) == DEVICE_ID_REGISTERED)
003AF4 9048A8            MOV     DPTR,#048A8H
003AF7 E0                MOVX    A,@DPTR
003AF8 6401              XRL     A,#01H
003AFA 6004              JZ      ?C0029?LXPROTOCOL
003AFC E0                MOVX    A,@DPTR
003AFD B40221            CJNE    A,#02H,?C0028?LXPROTOCOL
003B00         ?C0029?LXPROTOCOL:
  146: 			{
  147: 				//save deviceID
  148: 				dmemcpy(deviceInfo.deviceID, LX_RECV_BUF + 2, DEVICE_ID_LENGTH);
003B00 751301            MOV     ?_dmemcpy?BYTE+03H,#01H
003B03 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
003B06 7515A2            MOV     ?_dmemcpy?BYTE+05H,#0A2H
003B09 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
003B0C 7B01              MOV     R3,#01H
003B0E 7A4C              MOV     R2,#HIGH deviceInfo+04H
003B10 790A              MOV     R1,#LOW deviceInfo+04H
003B12 1227BE            LCALL   _dmemcpy
  149: 				//register success
  150: 				deviceInfo.registerFlag = DEVICE_REGISTERED;
003B15 904C06            MOV     DPTR,#deviceInfo
003B18 7401              MOV     A,#01H
003B1A F0                MOVX    @DPTR,A
  151: 				//update adv flag
  152: 				*(mem_le_adv_data + 13) = DEVICE_REGISTERED;
003B1B 9043E7            MOV     DPTR,#043E7H
003B1E F0                MOVX    @DPTR,A
  153: 			}
003B1F 8005              SJMP    ?C0030?LXPROTOCOL
003B21         ?C0028?LXPROTOCOL:
  154: 			else// if(*(LX_RECV_BUF + 8) == DEVICE_ID_ILLEGALED)
  155: 			{
  156: 				deviceInfo.registerFlag = DEVICE_UNREGISTERED;
003B21 E4                CLR     A
003B22 904C06            MOV     DPTR,#deviceInfo
003B25 F0                MOVX    @DPTR,A
  157: 			}
003B26         ?C0030?LXPROTOCOL:
  158: 			
  159: 			btCmdBuf.len = 0x08;
003B26 904C63            MOV     DPTR,#btCmdBuf
003B29 7408              MOV     A,#08H
003B2B F0                MOVX    @DPTR,A
  160: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
003B2C 904C67            MOV     DPTR,#btCmdBuf+04H
003B2F 7410              MOV     A,#010H
003B31 F0                MOVX    @DPTR,A
  161: 			btCmdBuf.DATA[4] = REGISTER_RSP_DATA_LEN;
003B32 A3                INC     DPTR
003B33 7403              MOV     A,#03H
003B35 F0                MOVX    @DPTR,A
  162: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_REGISTER_RSP);
003B36 A3                INC     DPTR
003B37 14                DEC     A
003B38 F0                MOVX    @DPTR,A
  163: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_REGISTER_RSP);
003B39 E4                CLR     A
003B3A A3                INC     DPTR
003B3B F0                MOVX    @DPTR,A
  164: 			btCmdBuf.DATA[7] = deviceInfo.registerFlag;
003B3C 904C06            MOV     DPTR,#deviceInfo
003B3F E0                MOVX    A,@DPTR
003B40 904C6B            MOV     DPTR,#btCmdBuf+08H
003B43 F0                MOVX    @DPTR,A
  165: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), REGISTER_RSP_DATA_LEN);
003B44 7B01              MOV     R3,#01H
003B46 7A4C              MOV     R2,#HIGH btCmdBuf+06H
003B48 7969              MOV     R1,#LOW btCmdBuf+06H
003B4A 7D03              MOV     R5,#03H
003B4C 7C00              MOV     R4,#00H
003B4E 5100              ACALL   _bigLittleEndianSwap
  166: 			BT_CmdFifoIn(&btCmdBuf);
003B50 7B01              MOV     R3,#01H
003B52 7A4C              MOV     R2,#HIGH btCmdBuf
003B54 7963              MOV     R1,#LOW btCmdBuf
003B56 1227F2            LCALL   _BT_CmdFifoIn
  167: 			lxOptStatus = OPT_REGISTER_RSP_WAIT_ACK;
003B59 904C5C            MOV     DPTR,#lxOptStatus
003B5C 7411              MOV     A,#011H
003B5E F0                MOVX    @DPTR,A
  168: 			break;
003B5F 22                RET     
  169: 			
  170: 		case OPT_BIND_REQ:
003B60         ?C0031?LXPROTOCOL:
  171: 			//bind success
  172: 			if(*(LX_RECV_BUF + 2) >= 1 && *(LX_RECV_BUF + 2) <= 4 && *(LX_RECV_BUF + 3) == 1)
003B60 9048A2            MOV     DPTR,#048A2H
003B63 E0                MOVX    A,@DPTR
003B64 C3                CLR     C
003B65 9401              SUBB    A,#01H
003B67 401B              JC      ?C0032?LXPROTOCOL
003B69 E0                MOVX    A,@DPTR
003B6A D3                SETB    C
003B6B 9404              SUBB    A,#04H
003B6D 5015              JNC     ?C0032?LXPROTOCOL
003B6F A3                INC     DPTR
003B70 E0                MOVX    A,@DPTR
003B71 B40110            CJNE    A,#01H,?C0032?LXPROTOCOL
  173: 			{
  174: 				//save user number
  175: 				deviceInfo.userNum = *(LX_RECV_BUF + 2);
003B74 9048A2            MOV     DPTR,#048A2H
003B77 E0                MOVX    A,@DPTR
003B78 904C09            MOV     DPTR,#deviceInfo+03H
003B7B F0                MOVX    @DPTR,A
  176: 				//lcd display result
  177: 				deviceInfo.bindFlag = BIND_SUCCESS;
003B7C 904C07            MOV     DPTR,#deviceInfo+01H
003B7F 7401              MOV     A,#01H
003B81 F0                MOVX    @DPTR,A
  178: 			}
003B82 8006              SJMP    ?C0033?LXPROTOCOL
003B84         ?C0032?LXPROTOCOL:
  179: 			else
  180: 			{
  181: 				deviceInfo.bindFlag =  BIND_FAIL;
003B84 904C07            MOV     DPTR,#deviceInfo+01H
003B87 7402              MOV     A,#02H
003B89 F0                MOVX    @DPTR,A
  182: 			}
003B8A         ?C0033?LXPROTOCOL:
  183: 			
  184: 			btCmdBuf.len = 0x08;
003B8A 904C63            MOV     DPTR,#btCmdBuf
003B8D 7408              MOV     A,#08H
003B8F F0                MOVX    @DPTR,A
  185: 			btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
003B90 A3                INC     DPTR
003B91 7430              MOV     A,#030H
003B93 F0                MOVX    @DPTR,A
  186: 			btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
003B94 A3                INC     DPTR
003B95 741C              MOV     A,#01CH
003B97 F0                MOVX    @DPTR,A
  187: 			btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
003B98 E4                CLR     A
003B99 A3                INC     DPTR
003B9A F0                MOVX    @DPTR,A
  188: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
003B9B A3                INC     DPTR
003B9C 7410              MOV     A,#010H
003B9E F0                MOVX    @DPTR,A
  189: 			btCmdBuf.DATA[4] = BIND_RSP_DATA_LEN;
003B9F A3                INC     DPTR
003BA0 7403              MOV     A,#03H
003BA2 F0                MOVX    @DPTR,A
  190: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_BIND_RSP);
003BA3 A3                INC     DPTR
003BA4 04                INC     A
003BA5 F0                MOVX    @DPTR,A
  191: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_BIND_RSP);
003BA6 E4                CLR     A
003BA7 A3                INC     DPTR
003BA8 F0                MOVX    @DPTR,A
  192: 			btCmdBuf.DATA[7] = deviceInfo.bindFlag;
003BA9 904C07            MOV     DPTR,#deviceInfo+01H
003BAC E0                MOVX    A,@DPTR
003BAD 904C6B            MOV     DPTR,#btCmdBuf+08H
003BB0 F0                MOVX    @DPTR,A
  193: 
  194: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), BIND_RSP_DATA_LEN);
003BB1 7B01              MOV     R3,#01H
003BB3 7A4C              MOV     R2,#HIGH btCmdBuf+06H
003BB5 7969              MOV     R1,#LOW btCmdBuf+06H
003BB7 7D03              MOV     R5,#03H
003BB9 7C00              MOV     R4,#00H
003BBB 5100              ACALL   _bigLittleEndianSwap
  195: 			BT_CmdFifoIn(&btCmdBuf);
003BBD 7B01              MOV     R3,#01H
003BBF 7A4C              MOV     R2,#HIGH btCmdBuf
003BC1 7963              MOV     R1,#LOW btCmdBuf
003BC3 1227F2            LCALL   _BT_CmdFifoIn
  196: 			lxOptStatus = OPT_BIND_RSP_WAIT_ACK;
003BC6 904C5C            MOV     DPTR,#lxOptStatus
003BC9 7414              MOV     A,#014H
003BCB F0                MOVX    @DPTR,A
  197: 			break;
003BCC 22                RET     
  198: 		
  199: 		case OPT_LOGIN_REQ:
003BCD         ?C0034?LXPROTOCOL:
  200: 			btCmdBuf.len = 0x0f;
003BCD 904C63            MOV     DPTR,#btCmdBuf
003BD0 740F              MOV     A,#0FH
003BD2 F0                MOVX    @DPTR,A
  201: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
003BD3 904C67            MOV     DPTR,#btCmdBuf+04H
003BD6 04                INC     A
003BD7 F0                MOVX    @DPTR,A
  202: 			btCmdBuf.DATA[4] = LOGIN_REQ_DATA_LEN;
003BD8 A3                INC     DPTR
003BD9 740A              MOV     A,#0AH
003BDB F0                MOVX    @DPTR,A
  203: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_LOGIN_REQ);
003BDC A3                INC     DPTR
003BDD 7407              MOV     A,#07H
003BDF F0                MOVX    @DPTR,A
  204: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_LOGIN_REQ);
003BE0 E4                CLR     A
003BE1 A3                INC     DPTR
003BE2 F0                MOVX    @DPTR,A
  205: 			//Verification code:6bytes deviceID XOR MAC
  206: 			for(i=0;i<6;i++)
003BE3 904E5C            MOV     DPTR,#i
003BE6 F0                MOVX    @DPTR,A
003BE7         ?C0035?LXPROTOCOL:
003BE7 904E5C            MOV     DPTR,#i
003BEA E0                MOVX    A,@DPTR
003BEB FF                MOV     R7,A
003BEC C3                CLR     C
003BED 9406              SUBB    A,#06H
003BEF 502E              JNC     ?C0036?LXPROTOCOL
  207: 			{
  208: 				btCmdBuf.DATA[7+i] = deviceInfo.deviceID[i] ^ (*(mem_le_mac+i));
003BF1 E0                MOVX    A,@DPTR
003BF2 FE                MOV     R6,A
003BF3 24E8              ADD     A,#0E8H
003BF5 F582              MOV     DPL,A
003BF7 E4                CLR     A
003BF8 3443              ADDC    A,#043H
003BFA F583              MOV     DPH,A
003BFC E0                MOVX    A,@DPTR
003BFD FD                MOV     R5,A
003BFE 740A              MOV     A,#LOW deviceInfo+04H
003C00 2E                ADD     A,R6
003C01 F582              MOV     DPL,A
003C03 E4                CLR     A
003C04 344C              ADDC    A,#HIGH deviceInfo+04H
003C06 F583              MOV     DPH,A
003C08 E0                MOVX    A,@DPTR
003C09 6D                XRL     A,R5
003C0A FE                MOV     R6,A
003C0B 746B              MOV     A,#LOW btCmdBuf+08H
003C0D 2F                ADD     A,R7
003C0E F582              MOV     DPL,A
003C10 E4                CLR     A
003C11 344C              ADDC    A,#HIGH btCmdBuf+08H
003C13 F583              MOV     DPH,A
003C15 EE                MOV     A,R6
003C16 F0                MOVX    @DPTR,A
  209: 			}
003C17 904E5C            MOV     DPTR,#i
003C1A E0                MOVX    A,@DPTR
003C1B 04                INC     A
003C1C F0                MOVX    @DPTR,A
003C1D 80C8              SJMP    ?C0035?LXPROTOCOL
003C1F         ?C0036?LXPROTOCOL:
  210: 			
  211: 			//user number:1bytes
  212: 			btCmdBuf.DATA[13] = deviceInfo.userNum;
003C1F 904C09            MOV     DPTR,#deviceInfo+03H
003C22 E0                MOVX    A,@DPTR
003C23 904C71            MOV     DPTR,#btCmdBuf+0EH
003C26 F0                MOVX    @DPTR,A
  213: 			//battery:1bytes
  214: 			if(CS_Scale_JudgeLowBat(GetIfLowBat) == true)
003C27 7F01              MOV     R7,#01H
003C29 122FDA            LCALL   _CS_Scale_JudgeLowBat
003C2C BF0108            CJNE    R7,#01H,?C0038?LXPROTOCOL
  215: 				btCmdBuf.DATA[14] = 10;
003C2F 904C72            MOV     DPTR,#btCmdBuf+0FH
003C32 740A              MOV     A,#0AH
003C34 F0                MOVX    @DPTR,A
003C35 8006              SJMP    ?C0039?LXPROTOCOL
003C37         ?C0038?LXPROTOCOL:
  216: 			else
  217: 				btCmdBuf.DATA[14] = 100;
003C37 904C72            MOV     DPTR,#btCmdBuf+0FH
003C3A 7464              MOV     A,#064H
003C3C F0                MOVX    @DPTR,A
003C3D         ?C0039?LXPROTOCOL:
  218: 
  219: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), LOGIN_REQ_DATA_LEN);
003C3D 7B01              MOV     R3,#01H
003C3F 7A4C              MOV     R2,#HIGH btCmdBuf+06H
003C41 7969              MOV     R1,#LOW btCmdBuf+06H
003C43 7D0A              MOV     R5,#0AH
003C45 7C00              MOV     R4,#00H
003C47 5100              ACALL   _bigLittleEndianSwap
  220: 			BT_CmdFifoIn(&btCmdBuf);
003C49 7B01              MOV     R3,#01H
003C4B 7A4C              MOV     R2,#HIGH btCmdBuf
003C4D 7963              MOV     R1,#LOW btCmdBuf
003C4F 1227F2            LCALL   _BT_CmdFifoIn
  221: 			YC_Delay10ms(10);
003C52 7F0A              MOV     R7,#0AH
003C54 121F84            LCALL   _YC_Delay10ms
  222: 			lxOptStatus = OPT_LOGIN_REQ_WAIT_ACK;
003C57 904C5C            MOV     DPTR,#lxOptStatus
003C5A 7417              MOV     A,#017H
003C5C F0                MOVX    @DPTR,A
  223: 			break;
003C5D 22                RET     
  224: 		case OPT_LOGIN_RSP:
003C5E         ?C0040?LXPROTOCOL:
  225: 			*(mem_register_buf + 2) = *(LX_RECV_BUF + 2);
003C5E 9048A2            MOV     DPTR,#048A2H
003C61 E0                MOVX    A,@DPTR
003C62 904C10            MOV     DPTR,#04C10H
003C65 F0                MOVX    @DPTR,A
  226: 			if(*(mem_register_buf + 2) == LOGIN_SUCCESS)
003C66 E0                MOVX    A,@DPTR
003C67 6401              XRL     A,#01H
003C69 7050              JNZ     ?C0041?LXPROTOCOL
  227: 			{
  228: 				//Verification code:6bytes deviceID XOR MAC
  229: 				for(i=0;i<6;i++)
003C6B 904E5C            MOV     DPTR,#i
003C6E F0                MOVX    @DPTR,A
003C6F         ?C0042?LXPROTOCOL:
  230: 				{
  231: 					if(*(LX_RECV_BUF + 3+i) != *(mem_register_buf + 4 + i) ^ (*(mem_le_mac+i)))
003C6F 904E5C            MOV     DPTR,#i
003C72 E0                MOVX    A,@DPTR
003C73 FF                MOV     R7,A
003C74 2412              ADD     A,#012H
003C76 F582              MOV     DPL,A
003C78 E4                CLR     A
003C79 344C              ADDC    A,#04CH
003C7B F583              MOV     DPH,A
003C7D E0                MOVX    A,@DPTR
003C7E FE                MOV     R6,A
003C7F 74A3              MOV     A,#0A3H
003C81 2F                ADD     A,R7
003C82 F582              MOV     DPL,A
003C84 E4                CLR     A
003C85 3448              ADDC    A,#048H
003C87 F583              MOV     DPH,A
003C89 E0                MOVX    A,@DPTR
003C8A 6E                XRL     A,R6
003C8B 6004              JZ      ?C0046?LXPROTOCOL
003C8D 7F01              MOV     R7,#01H
003C8F 8002              SJMP    ?C0047?LXPROTOCOL
003C91         ?C0046?LXPROTOCOL:
003C91 7F00              MOV     R7,#00H
003C93         ?C0047?LXPROTOCOL:
003C93 904E5C            MOV     DPTR,#i
003C96 E0                MOVX    A,@DPTR
003C97 24E8              ADD     A,#0E8H
003C99 F582              MOV     DPL,A
003C9B E4                CLR     A
003C9C 3443              ADDC    A,#043H
003C9E F583              MOV     DPH,A
003CA0 E0                MOVX    A,@DPTR
003CA1 6F                XRL     A,R7
003CA2 6006              JZ      ?C0044?LXPROTOCOL
  232: 					{
  233: 						//disconnected
  234: 						btCmdBuf.len = 0x01;
003CA4 904C63            MOV     DPTR,#btCmdBuf
003CA7 7401              MOV     A,#01H
003CA9 F0                MOVX    @DPTR,A
  235: 						//btCmdBuf.DATA[0] = CS_CMD_LE_DISC_REQ;
  236: 						//BT_CmdFifoIn(&btCmdBuf);
  237: 						//return;
  238: 					}
  239: 				}
003CAA         ?C0044?LXPROTOCOL:
003CAA 904E5C            MOV     DPTR,#i
003CAD E0                MOVX    A,@DPTR
003CAE 04                INC     A
003CAF F0                MOVX    @DPTR,A
003CB0 E0                MOVX    A,@DPTR
003CB1 B406BB            CJNE    A,#06H,?C0042?LXPROTOCOL
003CB4         ?C0043?LXPROTOCOL:
  240: 				//login success:sync time
  241: 				lxOptStatus = OPT_INIT_REQ;
003CB4 904C5C            MOV     DPTR,#lxOptStatus
003CB7 7420              MOV     A,#020H
003CB9 F0                MOVX    @DPTR,A
  242: 			}
003CBA 22                RET     
003CBB         ?C0041?LXPROTOCOL:
  243: 			else
  244: 			{
  245: 				lxOptStatus = OPT_IDLE;
003CBB E4                CLR     A
003CBC 904C5C            MOV     DPTR,#lxOptStatus
003CBF F0                MOVX    @DPTR,A
  246: 				//disconnected
  247: 				btCmdBuf.len = 0x01;
003CC0 904C63            MOV     DPTR,#btCmdBuf
003CC3 04                INC     A
003CC4 F0                MOVX    @DPTR,A
  248: 				btCmdBuf.DATA[0] = CS_CMD_LE_DISC_REQ;
003CC5 A3                INC     DPTR
003CC6 7429              MOV     A,#029H
003CC8 F0                MOVX    @DPTR,A
  249: 				BT_CmdFifoIn(&btCmdBuf);
003CC9 7B01              MOV     R3,#01H
003CCB 7A4C              MOV     R2,#HIGH btCmdBuf
003CCD 7963              MOV     R1,#LOW btCmdBuf
003CCF 0227F2            LJMP    _BT_CmdFifoIn
  250: 				return;
  251: 			}
  252: 			break;
  253: 			
  254: 		case OPT_INIT_REQ:
003CD2         ?C0050?LXPROTOCOL:
  255: 			btCmdBuf.len = 0x08;
003CD2 904C63            MOV     DPTR,#btCmdBuf
003CD5 7408              MOV     A,#08H
003CD7 F0                MOVX    @DPTR,A
  256: 			btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
003CD8 A3                INC     DPTR
003CD9 7430              MOV     A,#030H
003CDB F0                MOVX    @DPTR,A
  257: 			btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
003CDC A3                INC     DPTR
003CDD 741C              MOV     A,#01CH
003CDF F0                MOVX    @DPTR,A
  258: 			btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
003CE0 E4                CLR     A
003CE1 A3                INC     DPTR
003CE2 F0                MOVX    @DPTR,A
  259: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
003CE3 A3                INC     DPTR
003CE4 7410              MOV     A,#010H
003CE6 F0                MOVX    @DPTR,A
  260: 			btCmdBuf.DATA[4] = INIT_REQ_DATA_LEN;
003CE7 A3                INC     DPTR
003CE8 7403              MOV     A,#03H
003CEA F0                MOVX    @DPTR,A
  261: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_INIT_REQ);
003CEB A3                INC     DPTR
003CEC 7409              MOV     A,#09H
003CEE F0                MOVX    @DPTR,A
  262: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_INIT_REQ);
003CEF E4                CLR     A
003CF0 A3                INC     DPTR
003CF1 F0                MOVX    @DPTR,A
  263: 			btCmdBuf.DATA[7] = 0x08;
003CF2 A3                INC     DPTR
003CF3 7408              MOV     A,#08H
003CF5 F0                MOVX    @DPTR,A
  264: 			
  265: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), INIT_REQ_DATA_LEN);
003CF6 7B01              MOV     R3,#01H
003CF8 7A4C              MOV     R2,#HIGH btCmdBuf+06H
003CFA 7969              MOV     R1,#LOW btCmdBuf+06H
003CFC 7D03              MOV     R5,#03H
003CFE 7C00              MOV     R4,#00H
003D00 5100              ACALL   _bigLittleEndianSwap
  266: 			BT_CmdFifoIn(&btCmdBuf);
003D02 7B01              MOV     R3,#01H
003D04 7A4C              MOV     R2,#HIGH btCmdBuf
003D06 7963              MOV     R1,#LOW btCmdBuf
003D08 1227F2            LCALL   _BT_CmdFifoIn
  267: 			lxOptStatus = OPT_INIT_REQ_WAIT_ACK;
003D0B 904C5C            MOV     DPTR,#lxOptStatus
003D0E 7421              MOV     A,#021H
003D10 F0                MOVX    @DPTR,A
  268: 			break;
003D11 22                RET     
  269: 		case OPT_INIT_RSP:
003D12         ?C0051?LXPROTOCOL:
  270: 			if(*(LX_RECV_BUF + 2) == 0x08)
003D12 9048A2            MOV     DPTR,#048A2H
003D15 E0                MOVX    A,@DPTR
003D16 B40818            CJNE    A,#08H,?C0052?LXPROTOCOL
  271: 			{
  272: 				//save UTC time
  273: 				dmemcpy((pxbyte)&UTCTime, LX_RECV_BUF + 3, 4);
003D19 7A4C              MOV     R2,#HIGH UTCTime
003D1B 795E              MOV     R1,#LOW UTCTime
003D1D 7B01              MOV     R3,#01H
003D1F C003              PUSH    AR3
003D21 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
003D23 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
003D26 7515A3            MOV     ?_dmemcpy?BYTE+05H,#0A3H
003D29 751604            MOV     ?_dmemcpy?BYTE+06H,#04H
003D2C D003              POP     AR3
003D2E 1227BE            LCALL   _dmemcpy
  274: 			}
003D31         ?C0052?LXPROTOCOL:
  275: 			lxOptStatus = OPT_IDLE;
003D31 E4                CLR     A
003D32 904C5C            MOV     DPTR,#lxOptStatus
003D35 F0                MOVX    @DPTR,A
  276: 			break;
003D36 22                RET     
  277: 			
  278: 		case OPT_TIME_SETTING_REQ:
003D37         ?C0053?LXPROTOCOL:
  279: 			if(*(LX_RECV_BUF+2) &0x01 == 1)
003D37 9048A2            MOV     DPTR,#048A2H
003D3A E0                MOVX    A,@DPTR
003D3B 30E018            JNB     ACC.0,?C0054?LXPROTOCOL
  280: 			{
  281: 				dmemcpy((pxbyte)&UTCTime, LX_RECV_BUF + 3, 4);
003D3E 7A4C              MOV     R2,#HIGH UTCTime
003D40 795E              MOV     R1,#LOW UTCTime
003D42 7B01              MOV     R3,#01H
003D44 C003              PUSH    AR3
003D46 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
003D48 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
003D4B 7515A3            MOV     ?_dmemcpy?BYTE+05H,#0A3H
003D4E 751604            MOV     ?_dmemcpy?BYTE+06H,#04H
003D51 D003              POP     AR3
003D53 1227BE            LCALL   _dmemcpy
  282: 			}
003D56         ?C0054?LXPROTOCOL:
  283: 			/*
  284: 			if(*(LX_RECV_BUF+2) &0x02 == 1)
  285: 			{
  286: 
  287: 			}
  288: 			*/
  289: 			lxSettingDeviceRespone(CMD_TIME_SETTING_REQ, DEVICE_RSP_SUCCESS);
003D56 7D01              MOV     R5,#01H
003D58 7F02              MOV     R7,#02H
003D5A 7E10              MOV     R6,#010H
003D5C B1C1              ACALL   _lxSettingDeviceRespone
  290: 			lxOptStatus = OPT_TIME_SETTING_RSP_WAIT_ACK;
003D5E 904C5C            MOV     DPTR,#lxOptStatus
003D61 7426              MOV     A,#026H
003D63 F0                MOVX    @DPTR,A
  291: 			break;
003D64 22                RET     
  292: 		
  293: 		case OPT_UNIT_SETTING_REQ:
003D65         ?C0055?LXPROTOCOL:
  294: 			//save
  295: 			if(*(LX_RECV_BUF + 2) <= 3)
003D65 9048A2            MOV     DPTR,#048A2H
003D68 E0                MOVX    A,@DPTR
003D69 D3                SETB    C
003D6A 9403              SUBB    A,#03H
003D6C 500F              JNC     ?C0056?LXPROTOCOL
  296: 			{
  297: 				R_Selet_Unit = *(LX_RECV_BUF + 2);
003D6E E0                MOVX    A,@DPTR
003D6F 904CC6            MOV     DPTR,#R_Selet_Unit
003D72 F0                MOVX    @DPTR,A
  298: 				lxSettingDeviceRespone(CMD_UNIT_SETTING_REQ, DEVICE_RSP_SUCCESS);
003D73 7D01              MOV     R5,#01H
003D75 7F04              MOV     R7,#04H
003D77 7E10              MOV     R6,#010H
003D79 B1C1              ACALL   _lxSettingDeviceRespone
  299: 			}
003D7B 8008              SJMP    ?C0057?LXPROTOCOL
003D7D         ?C0056?LXPROTOCOL:
  300: 			else
  301: 			{
  302: 				lxSettingDeviceRespone(CMD_UNIT_SETTING_REQ, DEVICE_RSP_FAIL);
003D7D 7D02              MOV     R5,#02H
003D7F 7F04              MOV     R7,#04H
003D81 7E10              MOV     R6,#010H
003D83 B1C1              ACALL   _lxSettingDeviceRespone
  303: 			}
003D85         ?C0057?LXPROTOCOL:
  304: 			lxOptStatus = OPT_UNIT_SETTING_RSP_WAIT_ACK;
003D85 904C5C            MOV     DPTR,#lxOptStatus
003D88 7429              MOV     A,#029H
003D8A F0                MOVX    @DPTR,A
  305: 			break;
003D8B 22                RET     
  306: 
  307: 		case OPT_DATA_DEL_SETTING_REQ:
003D8C         ?C0058?LXPROTOCOL:
  308: 			if(*(LX_RECV_BUF + 3)&0x01 == 1)
003D8C 9048A3            MOV     DPTR,#048A3H
003D8F E0                MOVX    A,@DPTR
003D90 30E003            JNB     ACC.0,?C0061?LXPROTOCOL
  309: 			{
  310: 				delUserData();
003D93 121FBA            LCALL   delUserData
  311: 			}
  312: 			if(*(LX_RECV_BUF + 3)&0x04 == 1)
  313: 			{
  314: 				UTCTime = 0;
  315: 				R_Selet_Unit = CS_ScaleDisplay_L_kg;
  316: 			}
  317: 			if(*(LX_RECV_BUF + 3)&0x08 == 1)
  318: 			{
  319: 				QueueInit();
  320: 			}
003D96         ?C0061?LXPROTOCOL:
  321: 			
  322: 			lxSettingDeviceRespone(CMD_DATA_CLEAR_SETTING_REQ, DEVICE_RSP_SUCCESS);
003D96 7D01              MOV     R5,#01H
003D98 7F05              MOV     R7,#05H
003D9A 7E10              MOV     R6,#010H
003D9C B1C1              ACALL   _lxSettingDeviceRespone
  323: 			lxOptStatus = OPT_DATA_DEL_SETTING_RSP_WAIT_ACK;
003D9E 904C5C            MOV     DPTR,#lxOptStatus
003DA1 7432              MOV     A,#032H
003DA3 F0                MOVX    @DPTR,A
  324: 			break;
003DA4 22                RET     
  325: #endif
  326: 		case OPT_SYNC_DATA_REQ:
003DA5         ?C0062?LXPROTOCOL:
  327: 			//forbidden
  328: 			if(*(LX_RECV_BUF + 3) == 0)
003DA5 9048A3            MOV     DPTR,#048A3H
003DA8 E0                MOVX    A,@DPTR
003DA9 7005              JNZ     ?C0063?LXPROTOCOL
  329: 			{
  330: 				lxOptStatus = OPT_IDLE;
003DAB 904C5C            MOV     DPTR,#lxOptStatus
003DAE F0                MOVX    @DPTR,A
  331: 			}
003DAF 22                RET     
003DB0         ?C0063?LXPROTOCOL:
  332: 			else
  333: 			{
  334: 				lxOptStatus = OPT_SYNC_DATA_RSP;
003DB0 904C5C            MOV     DPTR,#lxOptStatus
003DB3 7436              MOV     A,#036H
003DB5 F0                MOVX    @DPTR,A
  335: 			}
  336: 			break;
003DB6 22                RET     
  337: 		case OPT_SYNC_DATA_RSP:
003DB7         ?C0065?LXPROTOCOL:
  338: 			//send measuredata
  339: 			sendHistoryData();
003DB7 122569            LCALL   sendHistoryData
  340: 			lxOptStatus = OPT_SYNC_DATA_RSP_WAIT_ACK;
003DBA 904C5C            MOV     DPTR,#lxOptStatus
003DBD 7437              MOV     A,#037H
003DBF F0                MOVX    @DPTR,A
  341: 			break;
  342: 		/*
  343: 		case LX_OPT_STATUS_RESEND:
  344: 			BT_CmdFifoIn(&btCmdBuf);
  345: 			lxOptStatus = OPT_IDLE;
  346: 			break;
  347: 			*/
  348: 	}
  349: }
003DC0         ?C0049?LXPROTOCOL:
003DC0 22                RET     
----- FUNCTION lxOptProcess (END) -------


----- FUNCTION _lxSettingDeviceRespone (BEGIN) -----
 FILE: 'lxProtocol.c'
  351: static void lxSettingDeviceRespone(u16_t cmd, u8_t state)
  352: {
;---- Variable 'cmd' assigned to Register 'R2/R3' ----
003DC1 AB07              MOV     R3,AR7
003DC3 AA06              MOV     R2,AR6
;---- Variable 'state' assigned to Register 'R5' ----
  353: 	btCmdBuf.len = DEVICE_RSP_DATA_LEN + 5;
  354: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
003DC5 904C63            MOV     DPTR,#btCmdBuf
003DC8 740A              MOV     A,#0AH
003DCA F0                MOVX    @DPTR,A
  355: 	btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
003DCB A3                INC     DPTR
003DCC 7430              MOV     A,#030H
003DCE F0                MOVX    @DPTR,A
  356: 	btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
003DCF A3                INC     DPTR
003DD0 741C              MOV     A,#01CH
003DD2 F0                MOVX    @DPTR,A
  357: 	btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
003DD3 E4                CLR     A
003DD4 A3                INC     DPTR
003DD5 F0                MOVX    @DPTR,A
  358: 	btCmdBuf.DATA[4] = DEVICE_RSP_DATA_LEN;
003DD6 A3                INC     DPTR
003DD7 7410              MOV     A,#010H
003DD9 F0                MOVX    @DPTR,A
  359: 	btCmdBuf.DATA[5] = LO_UINT16(CMD_DEVICE_RSP);
003DDA A3                INC     DPTR
003DDB 7405              MOV     A,#05H
003DDD F0                MOVX    @DPTR,A
  360: 	btCmdBuf.DATA[6] = HI_UINT16(CMD_DEVICE_RSP);
003DDE E4                CLR     A
003DDF A3                INC     DPTR
003DE0 F0                MOVX    @DPTR,A
  361: 	btCmdBuf.DATA[7] = LO_UINT16(cmd);
003DE1 A3                INC     DPTR
003DE2 7410              MOV     A,#010H
003DE4 F0                MOVX    @DPTR,A
  362: 	btCmdBuf.DATA[8] = HI_UINT16(cmd);
003DE5 EF                MOV     A,R7
003DE6 A3                INC     DPTR
003DE7 F0                MOVX    @DPTR,A
  363: 	btCmdBuf.DATA[9] = state;
003DE8 EE                MOV     A,R6
003DE9 A3                INC     DPTR
003DEA F0                MOVX    @DPTR,A
  364: 
003DEB A3                INC     DPTR
003DEC ED                MOV     A,R5
003DED F0                MOVX    @DPTR,A
  365: 	bigLittleEndianSwap(&(btCmdBuf.DATA[5]), DEVICE_RSP_DATA_LEN);
003DEE 7B01              MOV     R3,#01H
003DF0 7A4C              MOV     R2,#HIGH btCmdBuf+06H
003DF2 7969              MOV     R1,#LOW btCmdBuf+06H
003DF4 7D05              MOV     R5,#05H
003DF6 7C00              MOV     R4,#00H
003DF8 5100              ACALL   _bigLittleEndianSwap
  366: 	BT_CmdFifoIn(&btCmdBuf);
003DFA 7B01              MOV     R3,#01H
003DFC 7A4C              MOV     R2,#HIGH btCmdBuf
003DFE 7963              MOV     R1,#LOW btCmdBuf
003E00 1227F2            LCALL   _BT_CmdFifoIn
  367: 	YC_Delay10ms(10);
003E03 7F0A              MOV     R7,#0AH
003E05 021F84            LJMP    _YC_Delay10ms
  368: }
----- FUNCTION _lxSettingDeviceRespone (END) -------


----- FUNCTION QueuePop (BEGIN) -----
 FILE: 'lxProtocol.c'
  503: static UserMeasureData* QueuePop(void)
  504: {
  505: 	UserMeasureData *temp = NULL;
  506: 	
003E08 904E50            MOV     DPTR,#temp
003E0B E4                CLR     A
003E0C F0                MOVX    @DPTR,A
003E0D A3                INC     DPTR
003E0E F0                MOVX    @DPTR,A
003E0F A3                INC     DPTR
003E10 F0                MOVX    @DPTR,A
  507: 	if(QUEUE_IS_EMPTY)
003E11 904C12            MOV     DPTR,#historyUserData+02H
003E14 E0                MOVX    A,@DPTR
003E15 D3                SETB    C
003E16 9400              SUBB    A,#00H
003E18 5007              JNC     ?C0088?LXPROTOCOL
  508: 		return NULL;
003E1A 7B00              MOV     R3,#00H
003E1C 7A00              MOV     R2,#00H
003E1E 7900              MOV     R1,#00H
003E20 22                RET     
003E21         ?C0088?LXPROTOCOL:
  509: 
  510: 	temp = &(historyUserData.measureData[historyUserData.head]);
003E21 904C10            MOV     DPTR,#historyUserData
003E24 E0                MOVX    A,@DPTR
003E25 75F006            MOV     B,#06H
003E28 A4                MUL     AB
003E29 2413              ADD     A,#LOW historyUserData+03H
003E2B F9                MOV     R1,A
003E2C 744C              MOV     A,#HIGH historyUserData+03H
003E2E 35F0              ADDC    A,B
003E30 FA                MOV     R2,A
003E31 904E50            MOV     DPTR,#temp
003E34 7401              MOV     A,#01H
003E36 F0                MOVX    @DPTR,A
003E37 A3                INC     DPTR
003E38 EA                MOV     A,R2
003E39 F0                MOVX    @DPTR,A
003E3A A3                INC     DPTR
003E3B E9                MOV     A,R1
003E3C F0                MOVX    @DPTR,A
  511: 	historyUserData.head = (historyUserData.head + 1)%MAX_SIZE;
003E3D 904C10            MOV     DPTR,#historyUserData
003E40 E0                MOVX    A,@DPTR
003E41 2401              ADD     A,#01H
003E43 FF                MOV     R7,A
003E44 E4                CLR     A
003E45 33                RLC     A
003E46 FE                MOV     R6,A
003E47 7C00              MOV     R4,#00H
003E49 7D0A              MOV     R5,#0AH
003E4B 120173            LCALL   ?C?UIDIV
003E4E ED                MOV     A,R5
003E4F F0                MOVX    @DPTR,A
  512: 	historyUserData.size--;
003E50 904C12            MOV     DPTR,#historyUserData+02H
003E53 E0                MOVX    A,@DPTR
003E54 14                DEC     A
003E55 F0                MOVX    @DPTR,A
  513: 
  514: 	return temp;
003E56 904E50            MOV     DPTR,#temp
003E59 E0                MOVX    A,@DPTR
003E5A FB                MOV     R3,A
003E5B A3                INC     DPTR
003E5C E0                MOVX    A,@DPTR
003E5D FA                MOV     R2,A
003E5E A3                INC     DPTR
003E5F E0                MOVX    A,@DPTR
003E60 F9                MOV     R1,A
  515: }
003E61 22                RET     
----- FUNCTION QueuePop (END) -------


----- FUNCTION _QueuePush (BEGIN) -----
 FILE: 'lxProtocol.c'
  517: void QueuePush(UserMeasureData *userData)
  518: {
003E62 904E53            MOV     DPTR,#userData
003E65 EB                MOV     A,R3
003E66 F0                MOVX    @DPTR,A
003E67 A3                INC     DPTR
003E68 EA                MOV     A,R2
003E69 F0                MOVX    @DPTR,A
003E6A A3                INC     DPTR
003E6B E9                MOV     A,R1
003E6C F0                MOVX    @DPTR,A
  519: 	if(QUEUE_IS_FULL)
  520: 		QueuePop();
003E6D 904C12            MOV     DPTR,#historyUserData+02H
003E70 E0                MOVX    A,@DPTR
003E71 C3                CLR     C
003E72 940A              SUBB    A,#0AH
003E74 4002              JC      ?C0090?LXPROTOCOL
  521: 	
003E76 D108              ACALL   QueuePop
003E78         ?C0090?LXPROTOCOL:
  522: 	dmemcpy((u8_t *)&(historyUserData.measureData[historyUserData.tail]), (u8_t *)userData, sizeof(UserMeasureData))
>> ;
003E78 904C11            MOV     DPTR,#historyUserData+01H
003E7B E0                MOVX    A,@DPTR
003E7C 75F006            MOV     B,#06H
003E7F A4                MUL     AB
003E80 2413              ADD     A,#LOW historyUserData+03H
003E82 F9                MOV     R1,A
003E83 744C              MOV     A,#HIGH historyUserData+03H
003E85 35F0              ADDC    A,B
003E87 FA                MOV     R2,A
003E88 7B01              MOV     R3,#01H
003E8A C003              PUSH    AR3
003E8C C002              PUSH    AR2
003E8E 904E53            MOV     DPTR,#userData
003E91 E0                MOVX    A,@DPTR
003E92 FB                MOV     R3,A
003E93 A3                INC     DPTR
003E94 E0                MOVX    A,@DPTR
003E95 FA                MOV     R2,A
003E96 A3                INC     DPTR
003E97 E0                MOVX    A,@DPTR
003E98 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
003E9A 8A14              MOV     ?_dmemcpy?BYTE+04H,R2
003E9C F515              MOV     ?_dmemcpy?BYTE+05H,A
003E9E 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
003EA1 D002              POP     AR2
003EA3 D003              POP     AR3
003EA5 1227BE            LCALL   _dmemcpy
  523: 	historyUserData.tail = (historyUserData.tail + 1)%MAX_SIZE;
003EA8 904C11            MOV     DPTR,#historyUserData+01H
003EAB E0                MOVX    A,@DPTR
003EAC 2401              ADD     A,#01H
003EAE FF                MOV     R7,A
003EAF E4                CLR     A
003EB0 33                RLC     A
003EB1 FE                MOV     R6,A
003EB2 7C00              MOV     R4,#00H
003EB4 7D0A              MOV     R5,#0AH
003EB6 120173            LCALL   ?C?UIDIV
003EB9 ED                MOV     A,R5
003EBA F0                MOVX    @DPTR,A
  524: 	historyUserData.size++;
003EBB A3                INC     DPTR
003EBC E0                MOVX    A,@DPTR
003EBD 04                INC     A
003EBE F0                MOVX    @DPTR,A
  525: }
003EBF 22                RET     
----- FUNCTION _QueuePush (END) -------


