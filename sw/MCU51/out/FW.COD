LX51 LINKER/LOCATER V4.41                                                               04/20/2017  16:55:13  PAGE 1





ASSEMBLER CODE PACKING OF MODULE:  OUT\FW (MAIN)


----- FUNCTION main (BEGIN) -----
 FILE: 'main.c'
   20: void main()
   21: {
   22: 	R_Test++;
   23: 	systemInit();
0004C2 904C62            MOV     DPTR,#R_Test
0004C5 E0                MOVX    A,@DPTR
0004C6 04                INC     A
0004C7 F0                MOVX    @DPTR,A
   24: 	while(1) {
0004C8 120FEC            LCALL   systemInit
0004CB         ?C0001?MAIN:
   25: 		BTControlProcess();
   26: 		lxOptProcess();
0004CB 1227B1            LCALL   BTControlProcess
   27: 		//WechatProcess();
0004CE 123C0D            LCALL   lxOptProcess
   28: 		SysStatusProcess();
0004D1 B1A2              ACALL   SysStatusProcess
   29: 		if(sys_state == SYS_ST_RUN) {
0004D3 904E59            MOV     DPTR,#sys_state
0004D6 E0                MOVX    A,@DPTR
0004D7 B402F1            CJNE    A,#02H,?C0001?MAIN
   30: 			YC_UtilTimerProcess();		
0004DA 122890            LCALL   YC_UtilTimerProcess
   31: 			CS_Scale_1186Com();		//1186通信处理
0004DD 91E5              ACALL   CS_Scale_1186Com
   32: 			CS_Scale_Proc();
0004DF 121620            LCALL   CS_Scale_Proc
   33: 		}
   34: 	}
0004E2 80E7              SJMP    ?C0001?MAIN
0004E4 22                RET     
----- FUNCTION main (END) -------


----- FUNCTION CS_Scale_1186Com (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   31: void CS_Scale_1186Com(void)
   32: {	
   33: 	
   34: 	if(uartTimeoutCnt < CS_CommTo1186_TimeOut)	 
0004E5 904D67            MOV     DPTR,#uartTimeoutCnt
0004E8 E0                MOVX    A,@DPTR
0004E9 C3                CLR     C
0004EA 9415              SUBB    A,#015H
0004EC 502B              JNC     ?C0003?CS_COMMTO1186
   35: 		{
   36: 		
   37: 			switch(R_Scale_state)
0004EE 904CC4            MOV     DPTR,#R_Scale_state
0004F1 E0                MOVX    A,@DPTR
0004F2 24FE              ADD     A,#0FEH
0004F4 6014              JZ      ?C0006?CS_COMMTO1186
0004F6 04                INC     A
0004F7 24FC              ADD     A,#0FCH
0004F9 5016              JNC     ?C0009?CS_COMMTO1186
0004FB 2405              ADD     A,#05H
0004FD 702D              JNZ     ?C0013?CS_COMMTO1186
   38: 			{
   39: 			case CS_Scale_state_init:
0004FF         ?C0005?CS_COMMTO1186:
   40: 				CS_1186Com_Reset_Proc();			
0004FF F101              ACALL   CS_1186Com_Reset_Proc
   41: 				CS_1186Com_ReadMacAdress_Proc();
000501 1226FE            LCALL   CS_1186Com_ReadMacAdress_Proc
   42: 				CS_1186Com_ReadTime_Proc();
000504 B1E2              ACALL   CS_1186Com_ReadTime_Proc
   43: 				CS_1186Com_SetOpenWeight_Proc();
000506 F11B              ACALL   CS_1186Com_SetOpenWeight_Proc
   44: 				CS_1186Com_SetLcd_Proc();
000508 8023              SJMP    CS_1186Com_SetLcd_Proc
   45: 				break;			
   46: 			case CS_Scale_state_standby:
00050A         ?C0006?CS_COMMTO1186:
   47: 				CS_1186Com_SetSleepMode_Proc();
00050A D16D              ACALL   CS_1186Com_SetSleepMode_Proc
   48: 				CS_1186Com_ReadAdZero_Proc();
00050C 12393F            LCALL   CS_1186Com_ReadAdZero_Proc
   49: 				CS_1186Com_SetLcd_Proc();
00050F 801C              SJMP    CS_1186Com_SetLcd_Proc
   50: 				break;
   51: 			case CS_Scale_state_weighting:
   52: 			case CS_Scale_state_caling:
   53: 			case CS_Scale_state_locking:
000511         ?C0009?CS_COMMTO1186:
   54: 				CS_1186Com_ReadTime_Proc();
000511 B1E2              ACALL   CS_1186Com_ReadTime_Proc
   55: 				CS_1186Com_ReadAdc_Proc();
000513 12386A            LCALL   CS_1186Com_ReadAdc_Proc
   56: 				CS_1186Com_SetLcd_Proc();
000516 8015              SJMP    CS_1186Com_SetLcd_Proc
   57: 
   58: 				/*
   59: 				if(B_Weight_AdOk == true)
   60: 					{
   61: 					R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplay;
   62: 					B_Weight_LcdOk =false;
   63: 					}
   64: 				if(B_Weight_LcdOk == true)
   65: 					{
   66: 					R_Weight_Com_Coo.now = CS_CommTo1186_ReadAd;	
   67: 					}
   68: 				*/
   69: 				break;
   70: 			default:
   71: 				break;			
   72: 			}		
   73: 		}
000518 22                RET     
000519         ?C0003?CS_COMMTO1186:
   74: 	else
   75: 		{
   76: 		YC_UARTClearBuffer();	// fresh rec buffer
000519 B192              ACALL   YC_UARTClearBuffer
   77: 		uartTimeoutCnt=0;
00051B E4                CLR     A
00051C 904D67            MOV     DPTR,#uartTimeoutCnt
00051F F0                MOVX    @DPTR,A
   78: 		if(R_Weight_Com_Coo.now !=CS_CommTo1186_Null)
000520 904D54            MOV     DPTR,#R_Weight_Com_Coo
000523 E0                MOVX    A,@DPTR
000524 6006              JZ      ?C0013?CS_COMMTO1186
   79: 		R_Weight_Com_Coo.now = R_Weight_Com_Coo.pre;	//re send
000526 A3                INC     DPTR
000527 E0                MOVX    A,@DPTR
000528 904D54            MOV     DPTR,#R_Weight_Com_Coo
00052B F0                MOVX    @DPTR,A
   80: 		}
   81: 
   82: }
00052C         ?C0013?CS_COMMTO1186:
00052C 22                RET     
----- FUNCTION CS_Scale_1186Com (END) -------


----- FUNCTION CS_1186Com_SetLcd_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  191: void CS_1186Com_SetLcd_Proc(void)
  192: {
  193: 
  194: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_LcdDisplay)
00052D 904D54            MOV     DPTR,#R_Weight_Com_Coo
000530 E0                MOVX    A,@DPTR
000531 B4E01E            CJNE    A,#0E0H,?C0029?CS_COMMTO1186
  195: 		{
  196: 		CS_CommTo1186_SendCmd(CS_CommTo1186_LcdDisplay,CS_Lcd_Send_Data);
000534 7B01              MOV     R3,#01H
000536 7A4D              MOV     R2,#HIGH CS_Lcd_Send_Data
000538 7927              MOV     R1,#LOW CS_Lcd_Send_Data
00053A 7FE0              MOV     R7,#0E0H
00053C 122AD1            LCALL   _CS_CommTo1186_SendCmd
  197: 		R_Weight_Com_Coo.pre = CS_CommTo1186_LcdDisplay;
00053F 904D55            MOV     DPTR,#R_Weight_Com_Coo+01H
000542 74E0              MOV     A,#0E0H
000544 F0                MOVX    @DPTR,A
  198: 		R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplayStandby;
000545 904D54            MOV     DPTR,#R_Weight_Com_Coo
000548 740B              MOV     A,#0BH
00054A F0                MOVX    @DPTR,A
  199: 		uartTimeoutCnt=0;
00054B E4                CLR     A
00054C 904D67            MOV     DPTR,#uartTimeoutCnt
00054F F0                MOVX    @DPTR,A
  200: 		YC_UARTClearBuffer();
000550 B192              ACALL   YC_UARTClearBuffer
  201: 		}
000552         ?C0029?CS_COMMTO1186:
  202: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_LcdDisplayStandby)
000552 904D54            MOV     DPTR,#R_Weight_Com_Coo
000555 E0                MOVX    A,@DPTR
000556 640B              XRL     A,#0BH
000558 7037              JNZ     ?C0036?CS_COMMTO1186
  203: 		{
  204: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 5)==5)
00055A 7B01              MOV     R3,#01H
00055C 7A4D              MOV     R2,#HIGH uartRcvBuf
00055E 7944              MOV     R1,#LOW uartRcvBuf
000560 7D05              MOV     R5,#05H
000562 FC                MOV     R4,A
000563 F1A8              ACALL   _YC_UARTReciveDataExpected
000565 EF                MOV     A,R7
000566 6405              XRL     A,#05H
000568 4E                ORL     A,R6
000569 7026              JNZ     ?C0036?CS_COMMTO1186
  205: 			{
  206: 			if(uartRcvBuf[3] == CS_CommTo1186_LcdDisplay)    
00056B 904D47            MOV     DPTR,#uartRcvBuf+03H
00056E E0                MOVX    A,@DPTR
00056F B4E019            CJNE    A,#0E0H,?C0032?CS_COMMTO1186
  207: 				{
  208: 				if(R_Scale_state==CS_Scale_state_init)
000572 904CC4            MOV     DPTR,#R_Scale_state
000575 E0                MOVX    A,@DPTR
000576 7006              JNZ     ?C0033?CS_COMMTO1186
  209: 					R_Weight_Com_Coo.now = CS_CommTo1186_Null;
000578 904D54            MOV     DPTR,#R_Weight_Com_Coo
00057B F0                MOVX    @DPTR,A
00057C 8006              SJMP    ?C0034?CS_COMMTO1186
00057E         ?C0033?CS_COMMTO1186:
  210: 				else
  211: 					R_Weight_Com_Coo.now = CS_CommTo1186_ReadAd;
00057E 904D54            MOV     DPTR,#R_Weight_Com_Coo
000581 7480              MOV     A,#080H
000583 F0                MOVX    @DPTR,A
000584         ?C0034?CS_COMMTO1186:
  212: 				R_Weight_Com_Coo.sucess=true;		
000584 904D56            MOV     DPTR,#R_Weight_Com_Coo+02H
000587 7401              MOV     A,#01H
000589 F0                MOVX    @DPTR,A
  213: 				}
00058A 22                RET     
00058B         ?C0032?CS_COMMTO1186:
  214: 			else
  215: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
00058B 904D67            MOV     DPTR,#uartTimeoutCnt
00058E 7415              MOV     A,#015H
000590 F0                MOVX    @DPTR,A
  216: 			}	
  217: 		}
  218: }
000591         ?C0036?CS_COMMTO1186:
000591 22                RET     
----- FUNCTION CS_1186Com_SetLcd_Proc (END) -------


----- FUNCTION YC_UARTClearBuffer (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  409: void YC_UARTClearBuffer(void)
  410: {
  411: 	REG_UART_RX_PTR_R = REG_UART_RX_PTR_W;
  412: 	//REG_UART_TX_PTR_W = REG_UART_TX_PTR_R;
000592 908116            MOV     DPTR,#08116H
000595 E0                MOVX    A,@DPTR
000596 FF                MOV     R7,A
000597 A3                INC     DPTR
000598 E0                MOVX    A,@DPTR
000599 908058            MOV     DPTR,#08058H
00059C CF                XCH     A,R7
00059D F0                MOVX    @DPTR,A
00059E A3                INC     DPTR
00059F EF                MOV     A,R7
0005A0 F0                MOVX    @DPTR,A
  413: }
0005A1 22                RET     
----- FUNCTION YC_UARTClearBuffer (END) -------


----- FUNCTION SysStatusProcess (BEGIN) -----
 FILE: 'system.c'
  174: void SysStatusProcess(void) 
  175: {
  176: 	if( sys_state == SYS_ST_IDLE) {	//can enter LPM
  177: 		if(bleConnStatus ==BLE_STATUS_DISCONN)
0005A2 904E59            MOV     DPTR,#sys_state
0005A5 E0                MOVX    A,@DPTR
0005A6 B40121            CJNE    A,#01H,?C0029?SYSTEM
  178: 		{
0005A9 904C5B            MOV     DPTR,#bleConnStatus
0005AC E0                MOVX    A,@DPTR
0005AD 7032              JNZ     ?C0034?SYSTEM
  179: 			YC_UARTWaitSendData();
  180: 			YC_UARTClearBuffer();
0005AF D15B              ACALL   YC_UARTWaitSendData
  181: 		    	LPM_ENABLE();
0005B1 B192              ACALL   YC_UARTClearBuffer
  182: 
0005B3 9049FE            MOV     DPTR,#049FEH
0005B6 7401              MOV     A,#01H
0005B8 F0                MOVX    @DPTR,A
  183: 			btCmdBuf.len = 0x01;
0005B9 904C63            MOV     DPTR,#btCmdBuf
0005BC F0                MOVX    @DPTR,A
  184: 			btCmdBuf.DATA[0] = CS_CMD_SLEEP_REQ;
0005BD A3                INC     DPTR
0005BE 7420              MOV     A,#020H
0005C0 F0                MOVX    @DPTR,A
  185: 			BT_CmdFifoIn(&btCmdBuf);
0005C1 7B01              MOV     R3,#01H
0005C3 7A4C              MOV     R2,#HIGH btCmdBuf
0005C5 7963              MOV     R1,#LOW btCmdBuf
0005C7 021BEF            LJMP    _BT_CmdFifoIn
  186: 
  187: 				
  188: 		}
  189: 	}
0005CA         ?C0029?SYSTEM:
  190: 	else if( sys_state == SYS_ST_SLEEP) {//can enter LPM
0005CA 904E59            MOV     DPTR,#sys_state
0005CD E0                MOVX    A,@DPTR
0005CE B4030B            CJNE    A,#03H,?C0032?SYSTEM
  191: 		YC_UARTWaitSendData();
0005D1 D15B              ACALL   YC_UARTWaitSendData
  192: 		YC_UARTClearBuffer();
0005D3 B192              ACALL   YC_UARTClearBuffer
  193: 	    	LPM_ENABLE();
0005D5 9049FE            MOV     DPTR,#049FEH
0005D8 7401              MOV     A,#01H
0005DA F0                MOVX    @DPTR,A
  194: 	} 
0005DB 22                RET     
0005DC         ?C0032?SYSTEM:
  195: 	else {
  196: 		LPM_DISABLE();
0005DC 9049FE            MOV     DPTR,#049FEH
0005DF E4                CLR     A
0005E0 F0                MOVX    @DPTR,A
  197: 	}
  198: }
0005E1         ?C0034?SYSTEM:
0005E1 22                RET     
----- FUNCTION SysStatusProcess (END) -------


----- FUNCTION CS_1186Com_ReadTime_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  222: void CS_1186Com_ReadTime_Proc(void)
  223: {
  224: 	//static u8_t xdata temp=0;
  225: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadTime)
0005E2 904D54            MOV     DPTR,#R_Weight_Com_Coo
0005E5 E0                MOVX    A,@DPTR
0005E6 B4821E            CJNE    A,#082H,?C0037?CS_COMMTO1186
  226: 		{
  227: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadTime,0);
0005E9 7B00              MOV     R3,#00H
0005EB 7A00              MOV     R2,#00H
0005ED 7900              MOV     R1,#00H
0005EF 7F82              MOV     R7,#082H
0005F1 122AD1            LCALL   _CS_CommTo1186_SendCmd
  228: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadTime;
0005F4 904D55            MOV     DPTR,#R_Weight_Com_Coo+01H
0005F7 7482              MOV     A,#082H
0005F9 F0                MOVX    @DPTR,A
  229: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadTimeStandby;
0005FA 904D54            MOV     DPTR,#R_Weight_Com_Coo
0005FD 7403              MOV     A,#03H
0005FF F0                MOVX    @DPTR,A
  230: 		uartTimeoutCnt=0;
000600 E4                CLR     A
000601 904D67            MOV     DPTR,#uartTimeoutCnt
000604 F0                MOVX    @DPTR,A
  231: 		YC_UARTClearBuffer();
000605 B192              ACALL   YC_UARTClearBuffer
  232: 		}
000607         ?C0037?CS_COMMTO1186:
  233: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadTimeStandby)
000607 904D54            MOV     DPTR,#R_Weight_Com_Coo
00060A E0                MOVX    A,@DPTR
00060B 6403              XRL     A,#03H
00060D 704B              JNZ     ?C0042?CS_COMMTO1186
  234: 		{
  235: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 9)==9)
00060F 7B01              MOV     R3,#01H
000611 7A4D              MOV     R2,#HIGH uartRcvBuf
000613 7944              MOV     R1,#LOW uartRcvBuf
000615 7D09              MOV     R5,#09H
000617 FC                MOV     R4,A
000618 F1A8              ACALL   _YC_UARTReciveDataExpected
00061A EF                MOV     A,R7
00061B 6409              XRL     A,#09H
00061D 4E                ORL     A,R6
00061E 703A              JNZ     ?C0042?CS_COMMTO1186
  236: 			{
  237: 			if(uartRcvBuf[3] == CS_CommTo1186_ReadTime)    
000620 904D47            MOV     DPTR,#uartRcvBuf+03H
000623 E0                MOVX    A,@DPTR
000624 B4822D            CJNE    A,#082H,?C0040?CS_COMMTO1186
  238: 				{			
  239: 				//读到时间的操作
  240: 				R_1186_RTC[3] = uartRcvBuf[4];
000627 A3                INC     DPTR
000628 E0                MOVX    A,@DPTR
000629 904CD5            MOV     DPTR,#R_1186_RTC+03H
00062C F0                MOVX    @DPTR,A
  241: 				R_1186_RTC[2] = uartRcvBuf[5];
00062D 904D49            MOV     DPTR,#uartRcvBuf+05H
000630 E0                MOVX    A,@DPTR
000631 904CD4            MOV     DPTR,#R_1186_RTC+02H
000634 F0                MOVX    @DPTR,A
  242: 				R_1186_RTC[1] = uartRcvBuf[6];
000635 904D4A            MOV     DPTR,#uartRcvBuf+06H
000638 E0                MOVX    A,@DPTR
000639 904CD3            MOV     DPTR,#R_1186_RTC+01H
00063C F0                MOVX    @DPTR,A
  243: 				R_1186_RTC[0] = uartRcvBuf[7];
00063D 904D4B            MOV     DPTR,#uartRcvBuf+07H
000640 E0                MOVX    A,@DPTR
000641 904CD2            MOV     DPTR,#R_1186_RTC
000644 F0                MOVX    @DPTR,A
  244: 
  245: 			
  246: 				/*
  247: 				R_Debug_temp=R_1186RTC.R_32;
  248: 				CS_ScaleDisplay_Debug();
  249: 				while(temp==2);
  250: 				temp=2;
  251: 				*/
  252: 				/*
  253: 				R_1186RTC.R_BYTE[3]=  uartRcvBuf[4];
  254: 				R_1186RTC.R_BYTE[2] = uartRcvBuf[5];
  255: 				R_1186RTC.R_BYTE[1] = uartRcvBuf[6];
  256: 				R_1186RTC.R_BYTE[0] = uartRcvBuf[7];
  257: 				/*
  258: 				R_1186_RTC = uartRcvBuf[4];
  259: 				R_1186_RTC = R_1186_RTC<<8;
  260: 				R_1186_RTC |= uartRcvBuf[5];
  261: 				R_1186_RTC = R_1186_RTC<<8;
  262: 				R_1186_RTC |= uartRcvBuf[6];
  263: 				R_1186_RTC = R_1186_RTC<<8;
  264: 				R_1186_RTC |= uartRcvBuf[7];
  265: 				*/
  266: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
000645 E4                CLR     A
000646 904D54            MOV     DPTR,#R_Weight_Com_Coo
000649 F0                MOVX    @DPTR,A
  267: 				R_Weight_Com_Coo.sucess=true;
00064A 904D56            MOV     DPTR,#R_Weight_Com_Coo+02H
00064D 04                INC     A
00064E F0                MOVX    @DPTR,A
  268: 				B_Weight_AdOk = true;
00064F 904CD6            MOV     DPTR,#B_Weight_AdOk
000652 F0                MOVX    @DPTR,A
  269: 						
  270: 				}
000653 22                RET     
000654         ?C0040?CS_COMMTO1186:
  271: 			else
  272: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
000654 904D67            MOV     DPTR,#uartTimeoutCnt
000657 7415              MOV     A,#015H
000659 F0                MOVX    @DPTR,A
  273: 			}	
  274: 		}
  275: }
00065A         ?C0042?CS_COMMTO1186:
00065A 22                RET     
----- FUNCTION CS_1186Com_ReadTime_Proc (END) -------


----- FUNCTION YC_UARTWaitSendData (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  373: void YC_UARTWaitSendData(void)
  374: {
  375: 	while(ESWAP(REG_UART_TX_ITEMS));
00065B         ?C0009?YC_PERIPHERAL:
  376: }
00065B 90810E            MOV     DPTR,#0810EH
00065E A3                INC     DPTR
00065F E0                MOVX    A,@DPTR
000660 FC                MOV     R4,A
000661 90810E            MOV     DPTR,#0810EH
000664 E0                MOVX    A,@DPTR
000665 FF                MOV     R7,A
000666 EC                MOV     A,R4
000667 FE                MOV     R6,A
000668 EF                MOV     A,R7
000669 4E                ORL     A,R6
00066A 70EF              JNZ     ?C0009?YC_PERIPHERAL
  377: 
00066C 22                RET     
----- FUNCTION YC_UARTWaitSendData (END) -------


----- FUNCTION CS_1186Com_SetSleepMode_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  279: void CS_1186Com_SetSleepMode_Proc(void)
  280: {
  281: 	u16_t	R_AD_Zero;
  282: 	
  283: 	R_AD_Zero = CS_Scale_ZeroProc(GetRunningZero,0);
00066D E4                CLR     A
00066E FD                MOV     R5,A
00066F FC                MOV     R4,A
000670 7F01              MOV     R7,#01H
000672 1212F0            LCALL   _CS_Scale_ZeroProc
;---- Variable 'R_AD_Zero' assigned to Register 'R4/R5' ----
000675 AD07              MOV     R5,AR7
000677 AC06              MOV     R4,AR6
  284: 		
  285: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetSleepMode)
000679 904D54            MOV     DPTR,#R_Weight_Com_Coo
00067C E0                MOVX    A,@DPTR
00067D 64A0              XRL     A,#0A0H
00067F 704E              JNZ     ?C0043?CS_COMMTO1186
  286: 		{
  287: 		
  288: 		uartTxBuf[0]= 0x91;
000681 904D57            MOV     DPTR,#uartTxBuf
000684 7491              MOV     A,#091H
000686 F0                MOVX    @DPTR,A
  289: 		uartTxBuf[1]= R_AD_Zero<<6;
000687 ED                MOV     A,R5
000688 7806              MOV     R0,#06H
00068A         ?C0082?CS_COMMTO1186:
00068A C3                CLR     C
00068B 33                RLC     A
00068C CE                XCH     A,R6
00068D 33                RLC     A
00068E CE                XCH     A,R6
00068F D8F9              DJNZ    R0,?C0082?CS_COMMTO1186
000691 904D58            MOV     DPTR,#uartTxBuf+01H
000694 F0                MOVX    @DPTR,A
  290: 		uartTxBuf[2]= R_AD_Zero>>2;
000695 ED                MOV     A,R5
000696 AE04              MOV     R6,AR4
000698 7802              MOV     R0,#02H
00069A         ?C0083?CS_COMMTO1186:
00069A CE                XCH     A,R6
00069B C3                CLR     C
00069C 13                RRC     A
00069D CE                XCH     A,R6
00069E 13                RRC     A
00069F D8F9              DJNZ    R0,?C0083?CS_COMMTO1186
0006A1 904D59            MOV     DPTR,#uartTxBuf+02H
0006A4 F0                MOVX    @DPTR,A
  291: 		uartTxBuf[3]= R_AD_Zero>>10;
0006A5 EC                MOV     A,R4
0006A6 13                RRC     A
0006A7 13                RRC     A
0006A8 543F              ANL     A,#03FH
0006AA A3                INC     DPTR
0006AB F0                MOVX    @DPTR,A
  292: 		uartTxBuf[3]|= 0x80;
0006AC 4480              ORL     A,#080H
0006AE F0                MOVX    @DPTR,A
  293: 		CS_CommTo1186_SendCmd(CS_CommTo1186_SetSleepMode,uartTxBuf);
0006AF 7B01              MOV     R3,#01H
0006B1 7A4D              MOV     R2,#HIGH uartTxBuf
0006B3 7957              MOV     R1,#LOW uartTxBuf
0006B5 7FA0              MOV     R7,#0A0H
0006B7 122AD1            LCALL   _CS_CommTo1186_SendCmd
  294: 		
  295: 		YC_UARTWaitSendData();
0006BA D15B              ACALL   YC_UARTWaitSendData
  296: 		
  297: 		R_Weight_Com_Coo.pre = CS_CommTo1186_SetSleepMode;
0006BC 904D55            MOV     DPTR,#R_Weight_Com_Coo+01H
0006BF 74A0              MOV     A,#0A0H
0006C1 F0                MOVX    @DPTR,A
  298: 		R_Weight_Com_Coo.now = CS_CommTo1186_SetSleepModeStandby;
0006C2 904D54            MOV     DPTR,#R_Weight_Com_Coo
0006C5 7407              MOV     A,#07H
0006C7 F0                MOVX    @DPTR,A
  299: 		uartTimeoutCnt=0;
0006C8 E4                CLR     A
0006C9 904D67            MOV     DPTR,#uartTimeoutCnt
0006CC F0                MOVX    @DPTR,A
  300: 		YC_UARTClearBuffer();
0006CD B192              ACALL   YC_UARTClearBuffer
  301: 		}
0006CF         ?C0043?CS_COMMTO1186:
  302: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetSleepModeStandby)
0006CF 904D54            MOV     DPTR,#R_Weight_Com_Coo
0006D2 E0                MOVX    A,@DPTR
0006D3 B4072A            CJNE    A,#07H,?C0048?CS_COMMTO1186
  303: 		{
  304: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 5)==5)
0006D6 7B01              MOV     R3,#01H
0006D8 7A4D              MOV     R2,#HIGH uartRcvBuf
0006DA 7944              MOV     R1,#LOW uartRcvBuf
0006DC 7D05              MOV     R5,#05H
0006DE 7C00              MOV     R4,#00H
0006E0 F1A8              ACALL   _YC_UARTReciveDataExpected
0006E2 EF                MOV     A,R7
0006E3 6405              XRL     A,#05H
0006E5 4E                ORL     A,R6
0006E6 7018              JNZ     ?C0048?CS_COMMTO1186
  305: 			{
  306: 			if(uartRcvBuf[3] == CS_CommTo1186_SetSleepMode)    
0006E8 904D47            MOV     DPTR,#uartRcvBuf+03H
0006EB E0                MOVX    A,@DPTR
0006EC B4A00B            CJNE    A,#0A0H,?C0046?CS_COMMTO1186
  307: 				{			
  308: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
0006EF E4                CLR     A
0006F0 904D54            MOV     DPTR,#R_Weight_Com_Coo
0006F3 F0                MOVX    @DPTR,A
  309: 				R_Weight_Com_Coo.sucess=true;	
0006F4 904D56            MOV     DPTR,#R_Weight_Com_Coo+02H
0006F7 04                INC     A
0006F8 F0                MOVX    @DPTR,A
  310: 				}
0006F9 22                RET     
0006FA         ?C0046?CS_COMMTO1186:
  311: 			else
  312: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
0006FA 904D67            MOV     DPTR,#uartTimeoutCnt
0006FD 7415              MOV     A,#015H
0006FF F0                MOVX    @DPTR,A
  313: 			}	
  314: 		}
  315: }
000700         ?C0048?CS_COMMTO1186:
000700 22                RET     
----- FUNCTION CS_1186Com_SetSleepMode_Proc (END) -------


----- FUNCTION CS_1186Com_Reset_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  396: void CS_1186Com_Reset_Proc(void)
  397: {
  398: 
  399: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_Reset)
000701 904D54            MOV     DPTR,#R_Weight_Com_Coo
000704 E0                MOVX    A,@DPTR
000705 B4C512            CJNE    A,#0C5H,?C0062?CS_COMMTO1186
  400: 		{
  401: 		CS_CommTo1186_SendCmd(CS_CommTo1186_Reset,0);
000708 7B00              MOV     R3,#00H
00070A 7A00              MOV     R2,#00H
00070C 7900              MOV     R1,#00H
00070E 7FC5              MOV     R7,#0C5H
000710 122AD1            LCALL   _CS_CommTo1186_SendCmd
  402: 		YC_UARTClearBuffer();
000713 B192              ACALL   YC_UARTClearBuffer
  403: 		R_Weight_Com_Coo.now=CS_CommTo1186_Null;
000715 E4                CLR     A
000716 904D54            MOV     DPTR,#R_Weight_Com_Coo
000719 F0                MOVX    @DPTR,A
  404: 		
  405: 		}
  406: 													
  407: }
00071A         ?C0062?CS_COMMTO1186:
00071A 22                RET     
----- FUNCTION CS_1186Com_Reset_Proc (END) -------


----- FUNCTION CS_1186Com_SetOpenWeight_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  320: void CS_1186Com_SetOpenWeight_Proc(void)
  321: {
  322: 	u16_t	R_Open_Weight;
  323: 	R_Open_Weight = CS_Scale_CaliProc(CaliProcGetOpenWeight);	//获取开机重量值
00071B 7F07              MOV     R7,#07H
00071D 120A38            LCALL   _CS_Scale_CaliProc
;---- Variable 'R_Open_Weight' assigned to Register 'R4/R5' ----
000720 AD07              MOV     R5,AR7
000722 AC06              MOV     R4,AR6
  324: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetOpenWeight)
000724 904D54            MOV     DPTR,#R_Weight_Com_Coo
000727 E0                MOVX    A,@DPTR
000728 64A1              XRL     A,#0A1H
00072A 704A              JNZ     ?C0049?CS_COMMTO1186
  325: 		{
  326: 		uartTxBuf[0]= 0x20;
00072C 904D57            MOV     DPTR,#uartTxBuf
00072F 7420              MOV     A,#020H
000731 F0                MOVX    @DPTR,A
  327: 		uartTxBuf[1]= R_Open_Weight<<6;
000732 ED                MOV     A,R5
000733 7806              MOV     R0,#06H
000735         ?C0084?CS_COMMTO1186:
000735 C3                CLR     C
000736 33                RLC     A
000737 CE                XCH     A,R6
000738 33                RLC     A
000739 CE                XCH     A,R6
00073A D8F9              DJNZ    R0,?C0084?CS_COMMTO1186
00073C FB                MOV     R3,A
00073D 904D58            MOV     DPTR,#uartTxBuf+01H
000740 F0                MOVX    @DPTR,A
  328: 		uartTxBuf[2]= R_Open_Weight>>2;
000741 ED                MOV     A,R5
000742 AE04              MOV     R6,AR4
000744 7802              MOV     R0,#02H
000746         ?C0085?CS_COMMTO1186:
000746 CE                XCH     A,R6
000747 C3                CLR     C
000748 13                RRC     A
000749 CE                XCH     A,R6
00074A 13                RRC     A
00074B D8F9              DJNZ    R0,?C0085?CS_COMMTO1186
00074D FF                MOV     R7,A
00074E 904D59            MOV     DPTR,#uartTxBuf+02H
000751 F0                MOVX    @DPTR,A
  329: 		uartTxBuf[3]= R_Open_Weight<<6;
000752 A3                INC     DPTR
000753 EB                MOV     A,R3
000754 F0                MOVX    @DPTR,A
  330: 		uartTxBuf[4]= R_Open_Weight>>2;	
000755 A3                INC     DPTR
000756 EF                MOV     A,R7
000757 F0                MOVX    @DPTR,A
  331: 		CS_CommTo1186_SendCmd(CS_CommTo1186_SetOpenWeight,uartTxBuf);
000758 7B01              MOV     R3,#01H
00075A 7A4D              MOV     R2,#HIGH uartTxBuf
00075C 7957              MOV     R1,#LOW uartTxBuf
00075E 7FA1              MOV     R7,#0A1H
000760 122AD1            LCALL   _CS_CommTo1186_SendCmd
  332: 		R_Weight_Com_Coo.pre = CS_CommTo1186_SetOpenWeight;
000763 904D55            MOV     DPTR,#R_Weight_Com_Coo+01H
000766 74A1              MOV     A,#0A1H
000768 F0                MOVX    @DPTR,A
  333: 		R_Weight_Com_Coo.now = CS_CommTo1186_SetOpenWeightStandby;
000769 904D54            MOV     DPTR,#R_Weight_Com_Coo
00076C 7408              MOV     A,#08H
00076E F0                MOVX    @DPTR,A
  334: 		uartTimeoutCnt=0;
00076F E4                CLR     A
000770 904D67            MOV     DPTR,#uartTimeoutCnt
000773 F0                MOVX    @DPTR,A
  335: 		YC_UARTClearBuffer();
000774 B192              ACALL   YC_UARTClearBuffer
  336: 		}
000776         ?C0049?CS_COMMTO1186:
  337: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetOpenWeightStandby)
000776 904D54            MOV     DPTR,#R_Weight_Com_Coo
000779 E0                MOVX    A,@DPTR
00077A B4082A            CJNE    A,#08H,?C0054?CS_COMMTO1186
  338: 		{
  339: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 5)==5)
00077D 7B01              MOV     R3,#01H
00077F 7A4D              MOV     R2,#HIGH uartRcvBuf
000781 7944              MOV     R1,#LOW uartRcvBuf
000783 7D05              MOV     R5,#05H
000785 7C00              MOV     R4,#00H
000787 F1A8              ACALL   _YC_UARTReciveDataExpected
000789 EF                MOV     A,R7
00078A 6405              XRL     A,#05H
00078C 4E                ORL     A,R6
00078D 7018              JNZ     ?C0054?CS_COMMTO1186
  340: 			{
  341: 			if(uartRcvBuf[3] == CS_CommTo1186_SetOpenWeight)    
00078F 904D47            MOV     DPTR,#uartRcvBuf+03H
000792 E0                MOVX    A,@DPTR
000793 B4A10B            CJNE    A,#0A1H,?C0052?CS_COMMTO1186
  342: 				{			
  343: 				//读到时间的操作
  344: 				//R_Debug_temp=uartRcvBuf[5];
  345: 				
  346: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
000796 E4                CLR     A
000797 904D54            MOV     DPTR,#R_Weight_Com_Coo
00079A F0                MOVX    @DPTR,A
  347: 				R_Weight_Com_Coo.sucess=true;
00079B 904D56            MOV     DPTR,#R_Weight_Com_Coo+02H
00079E 04                INC     A
00079F F0                MOVX    @DPTR,A
  348: 				
  349: 						
  350: 				}
0007A0 22                RET     
0007A1         ?C0052?CS_COMMTO1186:
  351: 			else
  352: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
0007A1 904D67            MOV     DPTR,#uartTimeoutCnt
0007A4 7415              MOV     A,#015H
0007A6 F0                MOVX    @DPTR,A
  353: 			}	
  354: 		}
  355: }
0007A7         ?C0054?CS_COMMTO1186:
0007A7 22                RET     
----- FUNCTION CS_1186Com_SetOpenWeight_Proc (END) -------


----- FUNCTION _YC_UARTReciveDataExpected (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  378: u16_t YC_UARTReciveDataExpected(u8_t* pbuff, u16_t len)
  379: {
0007A8 904DCB            MOV     DPTR,#pbuff
0007AB EB                MOV     A,R3
0007AC F0                MOVX    @DPTR,A
0007AD A3                INC     DPTR
0007AE EA                MOV     A,R2
0007AF F0                MOVX    @DPTR,A
0007B0 A3                INC     DPTR
0007B1 E9                MOV     A,R1
0007B2 F0                MOVX    @DPTR,A
0007B3 A3                INC     DPTR
0007B4 EC                MOV     A,R4
0007B5 F0                MOVX    @DPTR,A
0007B6 A3                INC     DPTR
0007B7 ED                MOV     A,R5
0007B8 F0                MOVX    @DPTR,A
  380: 	int i = 0;
  381: 	u8_t xdata* rrptr = (u8_t *)ESWAP(REG_UART_RX_PTR_R);
0007B9 E4                CLR     A
0007BA A3                INC     DPTR
0007BB F0                MOVX    @DPTR,A
0007BC A3                INC     DPTR
0007BD F0                MOVX    @DPTR,A
  382: 
0007BE 908058            MOV     DPTR,#08058H
0007C1 A3                INC     DPTR
0007C2 E0                MOVX    A,@DPTR
0007C3 FC                MOV     R4,A
0007C4 908058            MOV     DPTR,#08058H
0007C7 E0                MOVX    A,@DPTR
0007C8 FF                MOV     R7,A
0007C9 EC                MOV     A,R4
0007CA FE                MOV     R6,A
0007CB EF                MOV     A,R7
0007CC 904DD2            MOV     DPTR,#rrptr
0007CF EE                MOV     A,R6
0007D0 F0                MOVX    @DPTR,A
0007D1 A3                INC     DPTR
0007D2 EF                MOV     A,R7
0007D3 F0                MOVX    @DPTR,A
  383: 	if(ESWAP(REG_UART_RX_ITEMS)<len)
0007D4 908112            MOV     DPTR,#08112H
0007D7 A3                INC     DPTR
0007D8 E0                MOVX    A,@DPTR
0007D9 FC                MOV     R4,A
0007DA 908112            MOV     DPTR,#08112H
0007DD E0                MOVX    A,@DPTR
0007DE FF                MOV     R7,A
0007DF EC                MOV     A,R4
0007E0 FE                MOV     R6,A
0007E1 EF                MOV     A,R7
0007E2 D3                SETB    C
0007E3 904DCF            MOV     DPTR,#len+01H
0007E6 E0                MOVX    A,@DPTR
0007E7 9F                SUBB    A,R7
0007E8 904DCE            MOV     DPTR,#len
0007EB E0                MOVX    A,@DPTR
0007EC 9E                SUBB    A,R6
0007ED 4004              JC      ?C0012?YC_PERIPHERAL
  384: 	{
  385: 		return false;
0007EF E4                CLR     A
0007F0 FE                MOV     R6,A
0007F1 FF                MOV     R7,A
0007F2 22                RET     
  386: 	}
0007F3         ?C0012?YC_PERIPHERAL:
  387: 
  388: 	for(i=0;i<len;i++)
0007F3 E4                CLR     A
0007F4 904DD0            MOV     DPTR,#i
0007F7 F0                MOVX    @DPTR,A
0007F8 A3                INC     DPTR
0007F9 F0                MOVX    @DPTR,A
0007FA         ?C0014?YC_PERIPHERAL:
0007FA 904DCE            MOV     DPTR,#len
0007FD E0                MOVX    A,@DPTR
0007FE FE                MOV     R6,A
0007FF A3                INC     DPTR
000800 E0                MOVX    A,@DPTR
000801 FF                MOV     R7,A
000802 C3                CLR     C
000803 904DD1            MOV     DPTR,#i+01H
000806 E0                MOVX    A,@DPTR
000807 9F                SUBB    A,R7
000808 904DD0            MOV     DPTR,#i
00080B E0                MOVX    A,@DPTR
00080C 9E                SUBB    A,R6
00080D 4002              JC      $ + 4H
00080F 01CD              AJMP    ?C0015?YC_PERIPHERAL
  389: 	{
  390: 		memcpy(pbuff++, rrptr++, 1);
000811 904DD2            MOV     DPTR,#rrptr
000814 E4                CLR     A
000815 75F001            MOV     B,#01H
000818 1201C8            LCALL   ?C?ILDIX
00081B FA                MOV     R2,A
00081C A9F0              MOV     R1,B
00081E 7B01              MOV     R3,#01H
000820 C003              PUSH    AR3
000822 904DCB            MOV     DPTR,#pbuff
000825 E0                MOVX    A,@DPTR
000826 FB                MOV     R3,A
000827 A3                INC     DPTR
000828 E4                CLR     A
000829 75F001            MOV     B,#01H
00082C 1201C8            LCALL   ?C?ILDIX
00082F A8F0              MOV     R0,B
000831 FC                MOV     R4,A
000832 AD03              MOV     R5,AR3
000834 D003              POP     AR3
000836 7E00              MOV     R6,#00H
000838 7F01              MOV     R7,#01H
00083A 1200D3            LCALL   ?C?COPY
  391: 
  392: 		if((short)rrptr == ESWAP(REG_UART_RX_ADDR_E) + 1)		//rrptr reach the end of buffer
00083D 908056            MOV     DPTR,#08056H
000840 A3                INC     DPTR
000841 E0                MOVX    A,@DPTR
000842 FC                MOV     R4,A
000843 908056            MOV     DPTR,#08056H
000846 E0                MOVX    A,@DPTR
000847 FF                MOV     R7,A
000848 EC                MOV     A,R4
000849 FE                MOV     R6,A
00084A EF                MOV     A,R7
00084B 2401              ADD     A,#01H
00084D FF                MOV     R7,A
00084E E4                CLR     A
00084F 3E                ADDC    A,R6
000850 FE                MOV     R6,A
000851 904DD2            MOV     DPTR,#rrptr
000854 E0                MOVX    A,@DPTR
000855 FC                MOV     R4,A
000856 A3                INC     DPTR
000857 E0                MOVX    A,@DPTR
000858 B5071A            CJNE    A,AR7,?C0017?YC_PERIPHERAL
00085B EE                MOV     A,R6
00085C B50416            CJNE    A,AR4,?C0017?YC_PERIPHERAL
  393: 		{
  394: 			rrptr = (u8_t *)ESWAP(REG_UART_RX_ADDR_S);
00085F 908054            MOV     DPTR,#08054H
000862 A3                INC     DPTR
000863 E0                MOVX    A,@DPTR
000864 FC                MOV     R4,A
000865 908054            MOV     DPTR,#08054H
000868 E0                MOVX    A,@DPTR
000869 FF                MOV     R7,A
00086A EC                MOV     A,R4
00086B FE                MOV     R6,A
00086C EF                MOV     A,R7
00086D 904DD2            MOV     DPTR,#rrptr
000870 EE                MOV     A,R6
000871 F0                MOVX    @DPTR,A
000872 A3                INC     DPTR
000873 EF                MOV     A,R7
000874 F0                MOVX    @DPTR,A
  395: 		}
000875         ?C0017?YC_PERIPHERAL:
  396: 
  397: 		if((short)rrptr == ESWAP(REG_UART_RX_PTR_W) )	//read all data already
000875 908116            MOV     DPTR,#08116H
000878 A3                INC     DPTR
000879 E0                MOVX    A,@DPTR
00087A FC                MOV     R4,A
00087B 908116            MOV     DPTR,#08116H
00087E E0                MOVX    A,@DPTR
00087F FF                MOV     R7,A
000880 EC                MOV     A,R4
000881 FE                MOV     R6,A
000882 EF                MOV     A,R7
000883 904DD2            MOV     DPTR,#rrptr
000886 E0                MOVX    A,@DPTR
000887 FC                MOV     R4,A
000888 A3                INC     DPTR
000889 E0                MOVX    A,@DPTR
00088A FD                MOV     R5,A
00088B EF                MOV     A,R7
00088C 6D                XRL     A,R5
00088D 7002              JNZ     ?C0025?YC_PERIPHERAL
00088F EE                MOV     A,R6
000890 6C                XRL     A,R4
000891         ?C0025?YC_PERIPHERAL:
000891 7029              JNZ     ?C0016?YC_PERIPHERAL
  398: 		{
  399: 			REG_UART_RX_PTR_R = ESWAP((short)rrptr);
000893 904DD2            MOV     DPTR,#rrptr
000896 E0                MOVX    A,@DPTR
000897 FE                MOV     R6,A
000898 A3                INC     DPTR
000899 E0                MOVX    A,@DPTR
00089A FF                MOV     R7,A
00089B EC                MOV     A,R4
00089C FF                MOV     R7,A
00089D 33                RLC     A
00089E 95E0              SUBB    A,ACC
0008A0 AB07              MOV     R3,AR7
0008A2 ED                MOV     A,R5
0008A3 FF                MOV     R7,A
0008A4 EB                MOV     A,R3
0008A5 908058            MOV     DPTR,#08058H
0008A8 CF                XCH     A,R7
0008A9 F0                MOVX    @DPTR,A
0008AA A3                INC     DPTR
0008AB EF                MOV     A,R7
0008AC F0                MOVX    @DPTR,A
  400: 			return (i+1);
0008AD 904DD1            MOV     DPTR,#i+01H
0008B0 E0                MOVX    A,@DPTR
0008B1 2401              ADD     A,#01H
0008B3 FF                MOV     R7,A
0008B4 904DD0            MOV     DPTR,#i
0008B7 E0                MOVX    A,@DPTR
0008B8 3400              ADDC    A,#00H
0008BA FE                MOV     R6,A
0008BB 22                RET     
  401: 		}
  402: 	}
0008BC         ?C0016?YC_PERIPHERAL:
0008BC 904DD1            MOV     DPTR,#i+01H
0008BF E0                MOVX    A,@DPTR
0008C0 04                INC     A
0008C1 F0                MOVX    @DPTR,A
0008C2 7006              JNZ     ?C0026?YC_PERIPHERAL
0008C4 904DD0            MOV     DPTR,#i
0008C7 E0                MOVX    A,@DPTR
0008C8 04                INC     A
0008C9 F0                MOVX    @DPTR,A
0008CA         ?C0026?YC_PERIPHERAL:
0008CA 0207FA            LJMP    ?C0014?YC_PERIPHERAL
0008CD         ?C0015?YC_PERIPHERAL:
  403: 
  404: 	REG_UART_RX_PTR_R = ESWAP((short)rrptr);
0008CD 904DD2            MOV     DPTR,#rrptr
0008D0 E0                MOVX    A,@DPTR
0008D1 FE                MOV     R6,A
0008D2 A3                INC     DPTR
0008D3 E0                MOVX    A,@DPTR
0008D4 FF                MOV     R7,A
0008D5 FD                MOV     R5,A
0008D6 AC06              MOV     R4,AR6
0008D8 EC                MOV     A,R4
0008D9 FF                MOV     R7,A
0008DA 33                RLC     A
0008DB 95E0              SUBB    A,ACC
0008DD AB07              MOV     R3,AR7
0008DF ED                MOV     A,R5
0008E0 FF                MOV     R7,A
0008E1 EB                MOV     A,R3
0008E2 908058            MOV     DPTR,#08058H
0008E5 CF                XCH     A,R7
0008E6 F0                MOVX    @DPTR,A
0008E7 A3                INC     DPTR
0008E8 EF                MOV     A,R7
0008E9 F0                MOVX    @DPTR,A
  405: 	
  406: 	return len;
0008EA 904DCE            MOV     DPTR,#len
0008ED E0                MOVX    A,@DPTR
0008EE FE                MOV     R6,A
0008EF A3                INC     DPTR
0008F0 E0                MOVX    A,@DPTR
0008F1 FF                MOV     R7,A
  407: }
0008F2 22                RET     
----- FUNCTION _YC_UARTReciveDataExpected (END) -------


----- FUNCTION SoftTimer_10mSCallback (BEGIN) -----
 FILE: 'system.c'
   44: void SoftTimer_10mSCallback(void)
   45: {
   46: 	static u8_t count;
   47: 	YC_UtilTimerStartMs(10, SoftTimer_10mSCallback, &SoftTimer_10msTimerID);
0008F3 7BFF              MOV     R3,#0FFH
0008F5 7A08              MOV     R2,#HIGH SoftTimer_10mSCallback
0008F7 79F3              MOV     R1,#LOW SoftTimer_10mSCallback
0008F9 904DD9            MOV     DPTR,#?_YC_UtilTimerStartMs?BYTE+05H
0008FC 744E              MOV     A,#HIGH SoftTimer_10msTimerID
0008FE F0                MOVX    @DPTR,A
0008FF A3                INC     DPTR
000900 743C              MOV     A,#LOW SoftTimer_10msTimerID
000902 F0                MOVX    @DPTR,A
000903 7F0A              MOV     R7,#0AH
000905 7E00              MOV     R6,#00H
000907 12117C            LCALL   _YC_UtilTimerStartMs
   48: 	//add user function
   49: 	if(uartTimeoutCnt<255) {
00090A 904D67            MOV     DPTR,#uartTimeoutCnt
00090D E0                MOVX    A,@DPTR
00090E C3                CLR     C
00090F 94FF              SUBB    A,#0FFH
000911 5003              JNC     ?C0001?SYSTEM
   50: 		uartTimeoutCnt++;
000913 E0                MOVX    A,@DPTR
000914 04                INC     A
000915 F0                MOVX    @DPTR,A
   51: 	}
000916         ?C0001?SYSTEM:
   52: 
   53: 
   54: 	if(count<100)
000916 904E3A            MOV     DPTR,#count
000919 E0                MOVX    A,@DPTR
00091A C3                CLR     C
00091B 9464              SUBB    A,#064H
00091D 5005              JNC     ?C0002?SYSTEM
   55: 		count++;
00091F E0                MOVX    A,@DPTR
000920 04                INC     A
000921 F0                MOVX    @DPTR,A
000922 800F              SJMP    ?C0003?SYSTEM
000924         ?C0002?SYSTEM:
   56: 	else
   57: 		{
   58: 		count=0;
000924 E4                CLR     A
000925 904E3A            MOV     DPTR,#count
000928 F0                MOVX    @DPTR,A
   59: 		CS_Scale_TimeOutProc(CS_SetTimeBase1S);
000929 7F07              MOV     R7,#07H
00092B 121685            LCALL   _CS_Scale_TimeOutProc
   60: 		CS_MemoryWeightClear_Timer(MemWeightTimerInc);
00092E 7F02              MOV     R7,#02H
000930 123834            LCALL   _CS_MemoryWeightClear_Timer
   61: 		}
000933         ?C0003?SYSTEM:
   62: 		
   63: 	CS_SoftTimer(SoftTimerInc);
000933 E4                CLR     A
000934 FF                MOV     R7,A
000935 F115              ACALL   _CS_SoftTimer
;----                  JMP     CS_KeyScan
   64: 
   65: 	CS_KeyScan();
   66: 
----- FUNCTION SoftTimer_10mSCallback (END) -------


----- FUNCTION CS_KeyScan (BEGIN) -----
 FILE: 'CS_ScaleKey.c'
   17: void CS_KeyScan(void)
   18: {
   19: 	u8_t  keyState;
   20: 	static u8_t xdata keyState_prev=1;
   21: 	static u8_t xdata keyStateCnt;
   22: 	static u8_t xdata KeyPressDeal=0;
   23: 	static u8_t xdata KeyLongPressDeal=0;
   24: 	static u8_t xdata ShortPressCount=0;
   25: 	static u8_t xdata PressTimesCount=0;
   26: 	static u8_t xdata Press;
   27: 	static u8_t xdata stanby;
   28: 	
   29: 	
   30: 	keyState = YC_GPIOGetInputStatus(5);	//GPIO5	
000937 7F05              MOV     R7,#05H
000939 121084            LCALL   _YC_GPIOGetInputStatus
00093C E4                CLR     A
00093D 33                RLC     A
00093E FF                MOV     R7,A
;---- Variable 'keyState' assigned to Register 'R7' ----
   31: 
   32: 	if(R_Scale_state == CS_Scale_state_standby)
00093F 904CC4            MOV     DPTR,#R_Scale_state
000942 E0                MOVX    A,@DPTR
000943 B40206            CJNE    A,#02H,?C0001?CS_SCALEKEY
   33: 		stanby=true;
000946 904E03            MOV     DPTR,#stanby
000949 7401              MOV     A,#01H
00094B F0                MOVX    @DPTR,A
00094C         ?C0001?CS_SCALEKEY:
   34: 
   35: 	if(ShortPressCount<255)		//短按计时
00094C 904E00            MOV     DPTR,#ShortPressCount
00094F E0                MOVX    A,@DPTR
000950 C3                CLR     C
000951 94FF              SUBB    A,#0FFH
000953 5003              JNC     ?C0002?CS_SCALEKEY
   36: 		ShortPressCount++;
000955 E0                MOVX    A,@DPTR
000956 04                INC     A
000957 F0                MOVX    @DPTR,A
000958         ?C0002?CS_SCALEKEY:
   37: 	
   38: 	if(keyState ==KEY_UP)
000958 EF                MOV     A,R7
000959 6401              XRL     A,#01H
00095B 7066              JNZ     ?C0003?CS_SCALEKEY
   39: 		{
   40: 		keyState_prev = KEY_UP;	
00095D 904DFC            MOV     DPTR,#keyState_prev
000960 04                INC     A
000961 F0                MOVX    @DPTR,A
   41: 		keyStateCnt = 0; 
000962 E4                CLR     A
000963 A3                INC     DPTR
000964 F0                MOVX    @DPTR,A
   42: 
   43: 		if(KeyLongPressDeal==1)
000965 904DFF            MOV     DPTR,#KeyLongPressDeal
000968 E0                MOVX    A,@DPTR
000969 B40105            CJNE    A,#01H,?C0004?CS_SCALEKEY
   44: 			Press = false;
00096C E4                CLR     A
00096D 904E02            MOV     DPTR,#Press
000970 F0                MOVX    @DPTR,A
000971         ?C0004?CS_SCALEKEY:
   45: 		
   46: 		KeyPressDeal=0;
000971 E4                CLR     A
000972 904DFE            MOV     DPTR,#KeyPressDeal
000975 F0                MOVX    @DPTR,A
   47: 		KeyLongPressDeal=0;
000976 A3                INC     DPTR
000977 F0                MOVX    @DPTR,A
   48: 
   49: 		if(ShortPressCount>=KEY_SHORT_PRESS_TIME&&PressTimesCount==1)
000978 A3                INC     DPTR
000979 E0                MOVX    A,@DPTR
00097A C3                CLR     C
00097B 9412              SUBB    A,#012H
00097D 400F              JC      ?C0005?CS_SCALEKEY
00097F A3                INC     DPTR
000980 E0                MOVX    A,@DPTR
000981 B4010A            CJNE    A,#01H,?C0005?CS_SCALEKEY
   50: 			{
   51: 			PressTimesCount = 0;
000984 E4                CLR     A
000985 F0                MOVX    @DPTR,A
   52: 			if(stanby==false)
000986 904E03            MOV     DPTR,#stanby
000989 E0                MOVX    A,@DPTR
00098A 7002              JNZ     ?C0005?CS_SCALEKEY
   53: 			CS_Scale_ChangeUnit();	
00098C F153              ACALL   CS_Scale_ChangeUnit
   54: 			}
00098E         ?C0005?CS_SCALEKEY:
   55: 		
   56: 		if(Press == true)
00098E 904E02            MOV     DPTR,#Press
000991 E0                MOVX    A,@DPTR
000992 B40124            CJNE    A,#01H,?C0007?CS_SCALEKEY
   57: 			{
   58: 			Press = false;
000995 E4                CLR     A
000996 F0                MOVX    @DPTR,A
   59: 						
   60: 			//短按弹起处理
   61: 			if(ShortPressCount <KEY_SHORT_PRESS_TIME)
000997 904E00            MOV     DPTR,#ShortPressCount
00099A E0                MOVX    A,@DPTR
00099B C3                CLR     C
00099C 9412              SUBB    A,#012H
00099E 5006              JNC     ?C0008?CS_SCALEKEY
   62: 				PressTimesCount++;
0009A0 A3                INC     DPTR
0009A1 E0                MOVX    A,@DPTR
0009A2 04                INC     A
0009A3 F0                MOVX    @DPTR,A
0009A4 800E              SJMP    ?C0009?CS_SCALEKEY
0009A6         ?C0008?CS_SCALEKEY:
   63: 			else
   64: 				{
   65: 				PressTimesCount = 0;
0009A6 E4                CLR     A
0009A7 904E01            MOV     DPTR,#PressTimesCount
0009AA F0                MOVX    @DPTR,A
   66: 				PressTimesCount = 0;
0009AB F0                MOVX    @DPTR,A
   67: 				if(stanby==false)
0009AC 904E03            MOV     DPTR,#stanby
0009AF E0                MOVX    A,@DPTR
0009B0 7002              JNZ     ?C0009?CS_SCALEKEY
   68: 				CS_Scale_ChangeUnit();	
0009B2 F153              ACALL   CS_Scale_ChangeUnit
   69: 				}
0009B4         ?C0009?CS_SCALEKEY:
   70: 			ShortPressCount =0;	
0009B4 E4                CLR     A
0009B5 904E00            MOV     DPTR,#ShortPressCount
0009B8 F0                MOVX    @DPTR,A
   71: 			}
0009B9         ?C0007?CS_SCALEKEY:
   72: 		
   73: 			if(stanby==true)				//待机起来第一次按键不处理
0009B9 904E03            MOV     DPTR,#stanby
0009BC E0                MOVX    A,@DPTR
0009BD 6401              XRL     A,#01H
0009BF 7076              JNZ     ?C0022?CS_SCALEKEY
   74: 			stanby=false;
0009C1 F0                MOVX    @DPTR,A
   75: 		}
0009C2 22                RET     
0009C3         ?C0003?CS_SCALEKEY:
   76: 	else
   77: 		{
   78: 		if(keyState_prev == KEY_DOWN)
0009C3 904DFC            MOV     DPTR,#keyState_prev
0009C6 E0                MOVX    A,@DPTR
0009C7 7065              JNZ     ?C0013?CS_SCALEKEY
   79: 			{	
   80: 			if(keyStateCnt<255)
0009C9 A3                INC     DPTR
0009CA E0                MOVX    A,@DPTR
0009CB C3                CLR     C
0009CC 94FF              SUBB    A,#0FFH
0009CE 5003              JNC     ?C0014?CS_SCALEKEY
   81: 				keyStateCnt++;
0009D0 E0                MOVX    A,@DPTR
0009D1 04                INC     A
0009D2 F0                MOVX    @DPTR,A
0009D3         ?C0014?CS_SCALEKEY:
   82: 			 if(keyStateCnt > KEY_SHORT_PUSH_CNT)
0009D3 904DFD            MOV     DPTR,#keyStateCnt
0009D6 E0                MOVX    A,@DPTR
0009D7 FF                MOV     R7,A
0009D8 D3                SETB    C
0009D9 9403              SUBB    A,#03H
0009DB 401F              JC      ?C0015?CS_SCALEKEY
   83: 			 	{
   84: 			 	Press =true;
0009DD 904E02            MOV     DPTR,#Press
0009E0 7401              MOV     A,#01H
0009E2 F0                MOVX    @DPTR,A
   85: 				if(KeyPressDeal==0)
0009E3 904DFE            MOV     DPTR,#KeyPressDeal
0009E6 E0                MOVX    A,@DPTR
0009E7 7013              JNZ     ?C0015?CS_SCALEKEY
   86: 					{
   87: 					KeyPressDeal=1;
0009E9 04                INC     A
0009EA F0                MOVX    @DPTR,A
   88: 					//按键刚按下的处理
   89: 					if(ShortPressCount > KEY_SHORT_PRESS_TIME)
0009EB 904E00            MOV     DPTR,#ShortPressCount
0009EE E0                MOVX    A,@DPTR
0009EF D3                SETB    C
0009F0 9412              SUBB    A,#012H
0009F2 4003              JC      ?C0017?CS_SCALEKEY
   90: 						PressTimesCount = 0;
0009F4 E4                CLR     A
0009F5 A3                INC     DPTR
0009F6 F0                MOVX    @DPTR,A
0009F7         ?C0017?CS_SCALEKEY:
   91: 					ShortPressCount=0;
0009F7 E4                CLR     A
0009F8 904E00            MOV     DPTR,#ShortPressCount
0009FB F0                MOVX    @DPTR,A
   92: 					}
   93: 			 	}
0009FC         ?C0015?CS_SCALEKEY:
   94: 			 if(keyStateCnt > KEY_LONG_PUSH_CNT)
0009FC EF                MOV     A,R7
0009FD D3                SETB    C
0009FE 9450              SUBB    A,#050H
000A00 4035              JC      ?C0022?CS_SCALEKEY
   95: 			 	{
   96: 				if(KeyLongPressDeal==0)
000A02 904DFF            MOV     DPTR,#KeyLongPressDeal
000A05 E0                MOVX    A,@DPTR
000A06 702F              JNZ     ?C0022?CS_SCALEKEY
   97: 					{
   98: 					//按键刚长按下的处理	
   99: 					KeyLongPressDeal=1;					
000A08 04                INC     A
000A09 F0                MOVX    @DPTR,A
  100: 					if(PressTimesCount==3)
000A0A 904E01            MOV     DPTR,#PressTimesCount
000A0D E0                MOVX    A,@DPTR
000A0E B40313            CJNE    A,#03H,?C0020?CS_SCALEKEY
  101: 						{
  102: 						R_Scale_state = CS_Scale_state_caling;	
000A11 904CC4            MOV     DPTR,#R_Scale_state
000A14 7403              MOV     A,#03H
000A16 F0                MOVX    @DPTR,A
  103: 						CS_Scale_CaliProc(CaliProcReset);
000A17 7F05              MOV     R7,#05H
000A19 5138              ACALL   _CS_Scale_CaliProc
  104: 						Press = false;
000A1B E4                CLR     A
000A1C 904E02            MOV     DPTR,#Press
000A1F F0                MOVX    @DPTR,A
  105: 						keyStateCnt=0;
000A20 904DFD            MOV     DPTR,#keyStateCnt
000A23 F0                MOVX    @DPTR,A
  106: 						}
000A24         ?C0020?CS_SCALEKEY:
  107: 					PressTimesCount = 0;
000A24 E4                CLR     A
000A25 904E01            MOV     DPTR,#PressTimesCount
000A28 F0                MOVX    @DPTR,A
  108: 					ShortPressCount =0;
000A29 904E00            MOV     DPTR,#ShortPressCount
000A2C F0                MOVX    @DPTR,A
  109: 					}
  110: 			 	}
  111: 			}
000A2D 22                RET     
000A2E         ?C0013?CS_SCALEKEY:
  112: 		else
  113: 			{
  114: 			keyState_prev = KEY_DOWN;
000A2E E4                CLR     A
000A2F 904DFC            MOV     DPTR,#keyState_prev
000A32 F0                MOVX    @DPTR,A
  115: 			Press = false;
000A33 904E02            MOV     DPTR,#Press
000A36 F0                MOVX    @DPTR,A
  116: 			}
  117: 		}
  118: }
000A37         ?C0022?CS_SCALEKEY:
000A37 22                RET     
----- FUNCTION CS_KeyScan (END) -------


----- FUNCTION _CS_Scale_CaliProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  966: u16_t CS_Scale_CaliProc(u8_t option)
  967: {
;---- Variable 'option' assigned to Register 'R5' ----
000A38 AD07              MOV     R5,AR7
  968: 	static	u16_t xdata R_AD_CaliDot1;		//第一个标定点AD值
  969: 	static	u16_t xdata R_AD_CaliDot2;		//第二个标定点AD值
  970: 	static	u16_t xdata R_AD_CaliDot3;		//第三个标定点AD值
  971: 	static	u8_t	  xdata R_CaliState;			//标定状态
  972: 	static	u16_t xdata R_OpenWeight_Ad;	//开机重量AD值
  973: 	
  974: 	u16_t	R_AdFilTimes;	
  975: 	u16_t	weight_temp;
  976: 	u16_t	R_AD_BUF;
  977: 	u16_t	R_AD_PowerOnZero;
  978: 
  979: 	if(option==CaliProcReset)
000A3A ED                MOV     A,R5
000A3B B40508            CJNE    A,#05H,?C0130?CS_SCALE_PROC
  980: 		{
  981: 		R_CaliState=CS_CaliState_GetZero;
000A3E E4                CLR     A
000A3F 904CB0            MOV     DPTR,#R_CaliState
000A42 F0                MOVX    @DPTR,A
  982: 		return	0;
000A43 FE                MOV     R6,A
000A44 FF                MOV     R7,A
000A45 22                RET     
  983: 		}
000A46         ?C0130?CS_SCALE_PROC:
  984: 	if(option==CaliProcSetCali)
000A46 ED                MOV     A,R5
000A47 6401              XRL     A,#01H
000A49 6002              JZ      $ + 4H
000A4B 612A              AJMP    ?C0132?CS_SCALE_PROC
  985: 		{
  986: /*
  987: 		*(mem_sensor_buf )= 12;
  988: 		*(mem_sensor_buf+1) = 12;
  989: 		*(mem_sensor_buf+2 )= 12;
  990: 		*(mem_sensor_buf+3) = 12;
  991: 		*(mem_sensor_buf+4 )= 12;
  992: 		*(mem_sensor_buf+5) = 12;
  993: 		SpiFlashOperator(CS_CMD_WRITE_FLASH);
  994: 		//YC_Delay10ms(10);
  995: 		
  996: 		*(mem_sensor_buf )= 0;
  997: 		*(mem_sensor_buf+1) = 0;
  998: 		*(mem_sensor_buf+2 )= 0;
  999: 		*(mem_sensor_buf+3) = 0;
 1000: 		*(mem_sensor_buf+4 )= 0;
 1001: 		*(mem_sensor_buf+5) = 0;
 1002: 		
 1003: 		
 1004: 		SpiFlashOperator( CS_CMD_READ_FLASH);
 1005: 		
 1006: 		
 1007: 		
 1008: 		R_Debug_temp=(u16_t) *(mem_sensor_buf+2 ) ;
 1009: 		CS_ScaleDisplay_Debug();
 1010: 		while(1);
 1011: 		*/
 1012: 		//YC_Delay1S(1);
 1013: 		
 1014: 		R_AD_BUF = *(mem_sensor_buf );
000A4D 904C08            MOV     DPTR,#04C08H
000A50 E0                MOVX    A,@DPTR
000A51 FF                MOV     R7,A
000A52 904DF8            MOV     DPTR,#R_AD_BUF
000A55 E4                CLR     A
000A56 F0                MOVX    @DPTR,A
000A57 A3                INC     DPTR
000A58 EF                MOV     A,R7
000A59 F0                MOVX    @DPTR,A
 1015: 		R_AD_CaliDot1 =R_AD_BUF<<8 |  (*(mem_sensor_buf+1));
000A5A E0                MOVX    A,@DPTR
000A5B FE                MOV     R6,A
000A5C 904C09            MOV     DPTR,#04C09H
000A5F E0                MOVX    A,@DPTR
000A60 FB                MOV     R3,A
000A61 EE                MOV     A,R6
000A62 EB                MOV     A,R3
000A63 FF                MOV     R7,A
000A64 904CAA            MOV     DPTR,#R_AD_CaliDot1
000A67 EE                MOV     A,R6
000A68 F0                MOVX    @DPTR,A
000A69 A3                INC     DPTR
000A6A EF                MOV     A,R7
000A6B F0                MOVX    @DPTR,A
 1016: 		R_AD_BUF = *(mem_sensor_buf+2 );
000A6C 904C0A            MOV     DPTR,#04C0AH
000A6F E0                MOVX    A,@DPTR
000A70 FF                MOV     R7,A
000A71 904DF8            MOV     DPTR,#R_AD_BUF
000A74 E4                CLR     A
000A75 F0                MOVX    @DPTR,A
000A76 A3                INC     DPTR
000A77 EF                MOV     A,R7
000A78 F0                MOVX    @DPTR,A
 1017: 		R_AD_CaliDot2 =R_AD_BUF<<8 |  (*(mem_sensor_buf+3));
000A79 E0                MOVX    A,@DPTR
000A7A FE                MOV     R6,A
000A7B 904C0B            MOV     DPTR,#04C0BH
000A7E E0                MOVX    A,@DPTR
000A7F FB                MOV     R3,A
000A80 EE                MOV     A,R6
000A81 EB                MOV     A,R3
000A82 FF                MOV     R7,A
000A83 904CAC            MOV     DPTR,#R_AD_CaliDot2
000A86 EE                MOV     A,R6
000A87 F0                MOVX    @DPTR,A
000A88 A3                INC     DPTR
000A89 EF                MOV     A,R7
000A8A F0                MOVX    @DPTR,A
 1018: 		R_AD_BUF = *(mem_sensor_buf+4 );
000A8B 904C0C            MOV     DPTR,#04C0CH
000A8E E0                MOVX    A,@DPTR
000A8F FF                MOV     R7,A
000A90 904DF8            MOV     DPTR,#R_AD_BUF
000A93 E4                CLR     A
000A94 F0                MOVX    @DPTR,A
000A95 A3                INC     DPTR
000A96 EF                MOV     A,R7
000A97 F0                MOVX    @DPTR,A
 1019: 		R_AD_CaliDot3 =R_AD_BUF<<8 |  (*(mem_sensor_buf+5));	
000A98 E0                MOVX    A,@DPTR
000A99 FE                MOV     R6,A
000A9A 904C0D            MOV     DPTR,#04C0DH
000A9D E0                MOVX    A,@DPTR
000A9E FB                MOV     R3,A
000A9F EE                MOV     A,R6
000AA0 EB                MOV     A,R3
000AA1 FF                MOV     R7,A
000AA2 904CAE            MOV     DPTR,#R_AD_CaliDot3
000AA5 EE                MOV     A,R6
000AA6 F0                MOVX    @DPTR,A
000AA7 A3                INC     DPTR
000AA8 EF                MOV     A,R7
000AA9 F0                MOVX    @DPTR,A
 1020: 
 1021: 		
 1022: 
 1023: 		if(R_AD_CaliDot1<CS_CaliStateData_Down || R_AD_CaliDot1>CS_CaliStateData_Up)
000AAA 904CAA            MOV     DPTR,#R_AD_CaliDot1
000AAD E0                MOVX    A,@DPTR
000AAE FE                MOV     R6,A
000AAF A3                INC     DPTR
000AB0 E0                MOVX    A,@DPTR
000AB1 FF                MOV     R7,A
000AB2 C3                CLR     C
000AB3 94E8              SUBB    A,#0E8H
000AB5 EE                MOV     A,R6
000AB6 9403              SUBB    A,#03H
000AB8 4009              JC      ?C0134?CS_SCALE_PROC
000ABA D3                SETB    C
000ABB EF                MOV     A,R7
000ABC 9470              SUBB    A,#070H
000ABE EE                MOV     A,R6
000ABF 9417              SUBB    A,#017H
000AC1 404C              JC      ?C0133?CS_SCALE_PROC
000AC3         ?C0134?CS_SCALE_PROC:
 1024: 			if(R_AD_CaliDot2<CS_CaliStateData_Down||R_AD_CaliDot2>CS_CaliStateData_Up)
000AC3 904CAC            MOV     DPTR,#R_AD_CaliDot2
000AC6 E0                MOVX    A,@DPTR
000AC7 FE                MOV     R6,A
000AC8 A3                INC     DPTR
000AC9 E0                MOVX    A,@DPTR
000ACA FF                MOV     R7,A
000ACB C3                CLR     C
000ACC 94E8              SUBB    A,#0E8H
000ACE EE                MOV     A,R6
000ACF 9403              SUBB    A,#03H
000AD1 4009              JC      ?C0136?CS_SCALE_PROC
000AD3 D3                SETB    C
000AD4 EF                MOV     A,R7
000AD5 9470              SUBB    A,#070H
000AD7 EE                MOV     A,R6
000AD8 9417              SUBB    A,#017H
000ADA 4033              JC      ?C0133?CS_SCALE_PROC
000ADC         ?C0136?CS_SCALE_PROC:
 1025: 				if(R_AD_CaliDot3<CS_CaliStateData_Down||R_AD_CaliDot3>CS_CaliStateData_Up)
000ADC 904CAE            MOV     DPTR,#R_AD_CaliDot3
000ADF E0                MOVX    A,@DPTR
000AE0 FE                MOV     R6,A
000AE1 A3                INC     DPTR
000AE2 E0                MOVX    A,@DPTR
000AE3 FF                MOV     R7,A
000AE4 C3                CLR     C
000AE5 94E8              SUBB    A,#0E8H
000AE7 EE                MOV     A,R6
000AE8 9403              SUBB    A,#03H
000AEA 4009              JC      ?C0138?CS_SCALE_PROC
000AEC D3                SETB    C
000AED EF                MOV     A,R7
000AEE 9470              SUBB    A,#070H
000AF0 EE                MOV     A,R6
000AF1 9417              SUBB    A,#017H
000AF3 401A              JC      ?C0133?CS_SCALE_PROC
000AF5         ?C0138?CS_SCALE_PROC:
 1026: 					{
 1027: 					R_AD_CaliDot1	= 6000;
000AF5 904CAA            MOV     DPTR,#R_AD_CaliDot1
000AF8 7417              MOV     A,#017H
000AFA F0                MOVX    @DPTR,A
000AFB A3                INC     DPTR
000AFC 7470              MOV     A,#070H
000AFE F0                MOVX    @DPTR,A
 1028: 					R_AD_CaliDot2	= 5000;
000AFF A3                INC     DPTR
000B00 7413              MOV     A,#013H
000B02 F0                MOVX    @DPTR,A
000B03 A3                INC     DPTR
000B04 7488              MOV     A,#088H
000B06 F0                MOVX    @DPTR,A
 1029: 					R_AD_CaliDot3	= 4000;	
000B07 A3                INC     DPTR
000B08 740F              MOV     A,#0FH
000B0A F0                MOVX    @DPTR,A
000B0B A3                INC     DPTR
000B0C 74A0              MOV     A,#0A0H
000B0E F0                MOVX    @DPTR,A
 1030: 					}	
000B0F         ?C0133?CS_SCALE_PROC:
 1031: 		
 1032: 		
 1033: 		R_OpenWeight_Ad	= R_AD_CaliDot1/10;
000B0F 904CAA            MOV     DPTR,#R_AD_CaliDot1
000B12 E0                MOVX    A,@DPTR
000B13 FE                MOV     R6,A
000B14 A3                INC     DPTR
000B15 E0                MOVX    A,@DPTR
000B16 FF                MOV     R7,A
000B17 7C00              MOV     R4,#00H
000B19 7D0A              MOV     R5,#0AH
000B1B 120173            LCALL   ?C?UIDIV
000B1E 904CB1            MOV     DPTR,#R_OpenWeight_Ad
000B21 EE                MOV     A,R6
000B22 F0                MOVX    @DPTR,A
000B23 A3                INC     DPTR
000B24 EF                MOV     A,R7
000B25 F0                MOVX    @DPTR,A
 1034: 		return	0;		
000B26 E4                CLR     A
000B27 FE                MOV     R6,A
000B28 FF                MOV     R7,A
000B29 22                RET     
 1035: 		}
000B2A         ?C0132?CS_SCALE_PROC:
 1036: 	if(option==CaliProcSetOpenWeight)
000B2A ED                MOV     A,R5
000B2B B4061B            CJNE    A,#06H,?C0139?CS_SCALE_PROC
 1037: 		{
 1038: 		R_OpenWeight_Ad	= R_AD_CaliDot1/10;
000B2E 904CAA            MOV     DPTR,#R_AD_CaliDot1
000B31 E0                MOVX    A,@DPTR
000B32 FE                MOV     R6,A
000B33 A3                INC     DPTR
000B34 E0                MOVX    A,@DPTR
000B35 FF                MOV     R7,A
000B36 7C00              MOV     R4,#00H
000B38 7D0A              MOV     R5,#0AH
000B3A 120173            LCALL   ?C?UIDIV
000B3D 904CB1            MOV     DPTR,#R_OpenWeight_Ad
000B40 EE                MOV     A,R6
000B41 F0                MOVX    @DPTR,A
000B42 A3                INC     DPTR
000B43 EF                MOV     A,R7
000B44 F0                MOVX    @DPTR,A
 1039: 		return	0;
000B45 E4                CLR     A
000B46 FE                MOV     R6,A
000B47 FF                MOV     R7,A
000B48 22                RET     
 1040: 		}
000B49         ?C0139?CS_SCALE_PROC:
 1041: 	
 1042: 	if(option==CaliProcGetOpenWeight)
000B49 ED                MOV     A,R5
000B4A B40709            CJNE    A,#07H,?C0140?CS_SCALE_PROC
 1043: 		return R_OpenWeight_Ad;
000B4D 904CB1            MOV     DPTR,#R_OpenWeight_Ad
000B50 E0                MOVX    A,@DPTR
000B51 FE                MOV     R6,A
000B52 A3                INC     DPTR
000B53 E0                MOVX    A,@DPTR
000B54 FF                MOV     R7,A
000B55 22                RET     
000B56         ?C0140?CS_SCALE_PROC:
 1044: 	if(option==CaliProcGetCaliDot1)
000B56 ED                MOV     A,R5
000B57 B40209            CJNE    A,#02H,?C0141?CS_SCALE_PROC
 1045: 		return R_AD_CaliDot1;
000B5A 904CAA            MOV     DPTR,#R_AD_CaliDot1
000B5D E0                MOVX    A,@DPTR
000B5E FE                MOV     R6,A
000B5F A3                INC     DPTR
000B60 E0                MOVX    A,@DPTR
000B61 FF                MOV     R7,A
000B62 22                RET     
000B63         ?C0141?CS_SCALE_PROC:
 1046: 	if(option==CaliProcGetCaliDot2)
000B63 ED                MOV     A,R5
000B64 B40309            CJNE    A,#03H,?C0142?CS_SCALE_PROC
 1047: 		return R_AD_CaliDot2;
000B67 904CAC            MOV     DPTR,#R_AD_CaliDot2
000B6A E0                MOVX    A,@DPTR
000B6B FE                MOV     R6,A
000B6C A3                INC     DPTR
000B6D E0                MOVX    A,@DPTR
000B6E FF                MOV     R7,A
000B6F 22                RET     
000B70         ?C0142?CS_SCALE_PROC:
 1048: 	if(option==CaliProcGetCaliDot3)
000B70 ED                MOV     A,R5
000B71 B40409            CJNE    A,#04H,?C0143?CS_SCALE_PROC
 1049: 		return R_AD_CaliDot3;
000B74 904CAE            MOV     DPTR,#R_AD_CaliDot3
000B77 E0                MOVX    A,@DPTR
000B78 FE                MOV     R6,A
000B79 A3                INC     DPTR
000B7A E0                MOVX    A,@DPTR
000B7B FF                MOV     R7,A
000B7C 22                RET     
000B7D         ?C0143?CS_SCALE_PROC:
 1050: 	
 1051: 	R_AD_BUF = R_AD_Original;
000B7D 904CD7            MOV     DPTR,#R_AD_Original
000B80 E0                MOVX    A,@DPTR
000B81 FE                MOV     R6,A
000B82 A3                INC     DPTR
000B83 E0                MOVX    A,@DPTR
000B84 FF                MOV     R7,A
000B85 904DF8            MOV     DPTR,#R_AD_BUF
000B88 EE                MOV     A,R6
000B89 F0                MOVX    @DPTR,A
000B8A FC                MOV     R4,A
000B8B A3                INC     DPTR
000B8C EF                MOV     A,R7
000B8D F0                MOVX    @DPTR,A
000B8E FD                MOV     R5,A
 1052: 	R_AD_BUF=CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
000B8F E4                CLR     A
000B90 FF                MOV     R7,A
000B91 12327E            LCALL   _CS_Scale_AdcFilter
000B94 904DF8            MOV     DPTR,#R_AD_BUF
000B97 EE                MOV     A,R6
000B98 F0                MOVX    @DPTR,A
000B99 FC                MOV     R4,A
000B9A A3                INC     DPTR
000B9B EF                MOV     A,R7
000B9C F0                MOVX    @DPTR,A
000B9D FD                MOV     R5,A
 1053: 	R_AdFilTimes = CS_Scale_AdcFilter(ScaleAdcFilterGetFilTimes,R_AD_BUF);
000B9E 7F02              MOV     R7,#02H
000BA0 12327E            LCALL   _CS_Scale_AdcFilter
000BA3 904DF4            MOV     DPTR,#R_AdFilTimes
000BA6 EE                MOV     A,R6
000BA7 F0                MOVX    @DPTR,A
000BA8 A3                INC     DPTR
000BA9 EF                MOV     A,R7
000BAA F0                MOVX    @DPTR,A
 1054: 	
 1055: 	
 1056: 
 1057: 	//数据稳定才处理
 1058: 		
 1059: 	if(R_CaliState==CS_CaliState_GetZero) 
000BAB 904CB0            MOV     DPTR,#R_CaliState
000BAE E0                MOVX    A,@DPTR
000BAF 7048              JNZ     ?C0144?CS_SCALE_PROC
 1060: 		{	
 1061: 
 1062: 			R_AD_CaliDot1 = R_AD_BUF;	//暂存零点用于显示
000BB1 904DF8            MOV     DPTR,#R_AD_BUF
000BB4 E0                MOVX    A,@DPTR
000BB5 FC                MOV     R4,A
000BB6 A3                INC     DPTR
000BB7 E0                MOVX    A,@DPTR
000BB8 FD                MOV     R5,A
000BB9 904CAA            MOV     DPTR,#R_AD_CaliDot1
000BBC EC                MOV     A,R4
000BBD F0                MOVX    @DPTR,A
000BBE A3                INC     DPTR
000BBF ED                MOV     A,R5
000BC0 F0                MOVX    @DPTR,A
 1063: 			if(R_AdFilTimes>=CS_Cali_Steadytimes)
000BC1 C3                CLR     C
000BC2 904DF5            MOV     DPTR,#R_AdFilTimes+01H
000BC5 E0                MOVX    A,@DPTR
000BC6 940C              SUBB    A,#0CH
000BC8 904DF4            MOV     DPTR,#R_AdFilTimes
000BCB E0                MOVX    A,@DPTR
000BCC 9400              SUBB    A,#00H
000BCE 401C              JC      ?C0145?CS_SCALE_PROC
 1064: 				{
 1065: 			CS_Scale_ZeroProc(SetPowerOnZero,R_AD_BUF);	
000BD0 7F05              MOV     R7,#05H
000BD2 1212F0            LCALL   _CS_Scale_ZeroProc
 1066: 			CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000BD5 904DF8            MOV     DPTR,#R_AD_BUF
000BD8 E0                MOVX    A,@DPTR
000BD9 FC                MOV     R4,A
000BDA A3                INC     DPTR
000BDB E0                MOVX    A,@DPTR
000BDC FD                MOV     R5,A
000BDD 7F01              MOV     R7,#01H
000BDF 12327E            LCALL   _CS_Scale_AdcFilter
 1067: 			CS_SoftTimer(ResetSoftTimer);
000BE2 7F02              MOV     R7,#02H
000BE4 F115              ACALL   _CS_SoftTimer
 1068: 			R_CaliState = CS_CaliState_ShowCal1;
000BE6 904CB0            MOV     DPTR,#R_CaliState
000BE9 7401              MOV     A,#01H
000BEB F0                MOVX    @DPTR,A
 1069: 				}
000BEC         ?C0145?CS_SCALE_PROC:
 1070: 		CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_BUF);
000BEC 904DF8            MOV     DPTR,#R_AD_BUF
000BEF E0                MOVX    A,@DPTR
000BF0 FC                MOV     R4,A
000BF1 A3                INC     DPTR
000BF2 E0                MOVX    A,@DPTR
000BF3 FD                MOV     R5,A
000BF4 7F21              MOV     R7,#021H
000BF6 1239F0            LCALL   _CS_ScaleDisplay_FreshBuf
 1071: 		}
000BF9         ?C0144?CS_SCALE_PROC:
 1072: 	
 1073: 	if(R_CaliState == CS_CaliState_ShowCal1)
000BF9 904CB0            MOV     DPTR,#R_CaliState
000BFC E0                MOVX    A,@DPTR
000BFD B40118            CJNE    A,#01H,?C0146?CS_SCALE_PROC
 1074: 		{
 1075: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 	
000C00 7F01              MOV     R7,#01H
000C02 F115              ACALL   _CS_SoftTimer
000C04 EF                MOV     A,R7
000C05 D3                SETB    C
000C06 94C8              SUBB    A,#0C8H
000C08 4006              JC      ?C0147?CS_SCALE_PROC
 1076: 			R_CaliState = CS_CaliState_GetCal1;
000C0A 904CB0            MOV     DPTR,#R_CaliState
000C0D 7402              MOV     A,#02H
000C0F F0                MOVX    @DPTR,A
000C10         ?C0147?CS_SCALE_PROC:
 1077: 		CS_ScaleDisplay_FreshBuf(DisplayCal1,0);
000C10 E4                CLR     A
000C11 FD                MOV     R5,A
000C12 FC                MOV     R4,A
000C13 7F81              MOV     R7,#081H
000C15 1239F0            LCALL   _CS_ScaleDisplay_FreshBuf
 1078: 		}
000C18         ?C0146?CS_SCALE_PROC:
 1079: 
 1080: 	if(R_CaliState==CS_CaliState_GetCal1)
000C18 904CB0            MOV     DPTR,#R_CaliState
000C1B E0                MOVX    A,@DPTR
000C1C 6402              XRL     A,#02H
000C1E 6002              JZ      $ + 4H
000C20 81D9              AJMP    ?C0148?CS_SCALE_PROC
 1081: 		{	
 1082: 			R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);	
000C22 FD                MOV     R5,A
000C23 FC                MOV     R4,A
000C24 FF                MOV     R7,A
000C25 1212F0            LCALL   _CS_Scale_ZeroProc
000C28 904DFA            MOV     DPTR,#R_AD_PowerOnZero
000C2B EE                MOV     A,R6
000C2C F0                MOVX    @DPTR,A
000C2D A3                INC     DPTR
000C2E EF                MOV     A,R7
000C2F F0                MOVX    @DPTR,A
 1083: 			R_AD_CaliDot1 = R_AD_BUF - R_AD_PowerOnZero;
000C30 C3                CLR     C
000C31 904DF9            MOV     DPTR,#R_AD_BUF+01H
000C34 E0                MOVX    A,@DPTR
000C35 9F                SUBB    A,R7
000C36 FF                MOV     R7,A
000C37 904DF8            MOV     DPTR,#R_AD_BUF
000C3A E0                MOVX    A,@DPTR
000C3B 9E                SUBB    A,R6
000C3C FE                MOV     R6,A
000C3D 904CAA            MOV     DPTR,#R_AD_CaliDot1
000C40 F0                MOVX    @DPTR,A
000C41 A3                INC     DPTR
000C42 EF                MOV     A,R7
000C43 F0                MOVX    @DPTR,A
 1084: 				
 1085: 			if((R_AD_CaliDot1 < R_OpenWeight_Ad)||(R_AD_BUF < R_AD_PowerOnZero))
000C44 D3                SETB    C
000C45 904CB2            MOV     DPTR,#R_OpenWeight_Ad+01H
000C48 E0                MOVX    A,@DPTR
000C49 9F                SUBB    A,R7
000C4A 904CB1            MOV     DPTR,#R_OpenWeight_Ad
000C4D E0                MOVX    A,@DPTR
000C4E 9E                SUBB    A,R6
000C4F 5015              JNC     ?C0150?CS_SCALE_PROC
000C51 904DFA            MOV     DPTR,#R_AD_PowerOnZero
000C54 E0                MOVX    A,@DPTR
000C55 FE                MOV     R6,A
000C56 A3                INC     DPTR
000C57 E0                MOVX    A,@DPTR
000C58 FF                MOV     R7,A
000C59 C3                CLR     C
000C5A 904DF9            MOV     DPTR,#R_AD_BUF+01H
000C5D E0                MOVX    A,@DPTR
000C5E 9F                SUBB    A,R7
000C5F 904DF8            MOV     DPTR,#R_AD_BUF
000C62 E0                MOVX    A,@DPTR
000C63 9E                SUBB    A,R6
000C64 5032              JNC     ?C0149?CS_SCALE_PROC
000C66         ?C0150?CS_SCALE_PROC:
 1086: 				{
 1087: 				if(R_AdFilTimes>=CS_Cali_Steadytimes)
000C66 C3                CLR     C
000C67 904DF5            MOV     DPTR,#R_AdFilTimes+01H
000C6A E0                MOVX    A,@DPTR
000C6B 940C              SUBB    A,#0CH
000C6D 904DF4            MOV     DPTR,#R_AdFilTimes
000C70 E0                MOVX    A,@DPTR
000C71 9400              SUBB    A,#00H
000C73 401A              JC      ?C0151?CS_SCALE_PROC
 1088: 					{
 1089: 					CS_Scale_ZeroProc(SetPowerOnZero,R_AD_BUF);	
000C75 904DF8            MOV     DPTR,#R_AD_BUF
000C78 E0                MOVX    A,@DPTR
000C79 FC                MOV     R4,A
000C7A A3                INC     DPTR
000C7B E0                MOVX    A,@DPTR
000C7C FD                MOV     R5,A
000C7D 7F05              MOV     R7,#05H
000C7F 1212F0            LCALL   _CS_Scale_ZeroProc
 1090: 					CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000C82 904DF8            MOV     DPTR,#R_AD_BUF
000C85 E0                MOVX    A,@DPTR
000C86 FC                MOV     R4,A
000C87 A3                INC     DPTR
000C88 E0                MOVX    A,@DPTR
000C89 FD                MOV     R5,A
000C8A 7F01              MOV     R7,#01H
000C8C 12327E            LCALL   _CS_Scale_AdcFilter
 1091: 					}
000C8F         ?C0151?CS_SCALE_PROC:
 1092: 				R_AD_CaliDot1 = 0;
000C8F E4                CLR     A
000C90 904CAA            MOV     DPTR,#R_AD_CaliDot1
000C93 F0                MOVX    @DPTR,A
000C94 A3                INC     DPTR
000C95 F0                MOVX    @DPTR,A
 1093: 				}
000C96 8034              SJMP    ?C0152?CS_SCALE_PROC
000C98         ?C0149?CS_SCALE_PROC:
 1094: 			else
 1095: 				{
 1096: 				if((R_AD_CaliDot1> 750)&&(R_AdFilTimes>=CS_Cali_Steadytimes))
000C98 D3                SETB    C
000C99 904CAB            MOV     DPTR,#R_AD_CaliDot1+01H
000C9C E0                MOVX    A,@DPTR
000C9D 94EE              SUBB    A,#0EEH
000C9F 904CAA            MOV     DPTR,#R_AD_CaliDot1
000CA2 E0                MOVX    A,@DPTR
000CA3 9402              SUBB    A,#02H
000CA5 4025              JC      ?C0152?CS_SCALE_PROC
000CA7 904DF5            MOV     DPTR,#R_AdFilTimes+01H
000CAA E0                MOVX    A,@DPTR
000CAB 940C              SUBB    A,#0CH
000CAD 904DF4            MOV     DPTR,#R_AdFilTimes
000CB0 E0                MOVX    A,@DPTR
000CB1 9400              SUBB    A,#00H
000CB3 4017              JC      ?C0152?CS_SCALE_PROC
 1097: 					{				
 1098: 					CS_SoftTimer(ResetSoftTimer);
000CB5 7F02              MOV     R7,#02H
000CB7 F115              ACALL   _CS_SoftTimer
 1099: 					CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000CB9 904DF8            MOV     DPTR,#R_AD_BUF
000CBC E0                MOVX    A,@DPTR
000CBD FC                MOV     R4,A
000CBE A3                INC     DPTR
000CBF E0                MOVX    A,@DPTR
000CC0 FD                MOV     R5,A
000CC1 7F01              MOV     R7,#01H
000CC3 12327E            LCALL   _CS_Scale_AdcFilter
 1100: 					R_CaliState = CS_CaliState_ShowCal2;
000CC6 904CB0            MOV     DPTR,#R_CaliState
000CC9 7403              MOV     A,#03H
000CCB F0                MOVX    @DPTR,A
 1101: 					}
 1102: 				}
000CCC         ?C0152?CS_SCALE_PROC:
 1103: 			CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_CaliDot1);
000CCC 904CAA            MOV     DPTR,#R_AD_CaliDot1
000CCF E0                MOVX    A,@DPTR
000CD0 FC                MOV     R4,A
000CD1 A3                INC     DPTR
000CD2 E0                MOVX    A,@DPTR
000CD3 FD                MOV     R5,A
000CD4 7F21              MOV     R7,#021H
000CD6 1239F0            LCALL   _CS_ScaleDisplay_FreshBuf
 1104: 			
 1105: 		}
000CD9         ?C0148?CS_SCALE_PROC:
 1106: 
 1107: 	if(R_CaliState == CS_CaliState_ShowCal2)
000CD9 904CB0            MOV     DPTR,#R_CaliState
000CDC E0                MOVX    A,@DPTR
000CDD B40318            CJNE    A,#03H,?C0154?CS_SCALE_PROC
 1108: 		{
 1109: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 	
000CE0 7F01              MOV     R7,#01H
000CE2 F115              ACALL   _CS_SoftTimer
000CE4 EF                MOV     A,R7
000CE5 D3                SETB    C
000CE6 94C8              SUBB    A,#0C8H
000CE8 4006              JC      ?C0155?CS_SCALE_PROC
 1110: 			R_CaliState = CS_CaliState_GetCal2;
000CEA 904CB0            MOV     DPTR,#R_CaliState
000CED 7404              MOV     A,#04H
000CEF F0                MOVX    @DPTR,A
000CF0         ?C0155?CS_SCALE_PROC:
 1111: 		CS_ScaleDisplay_FreshBuf(DisplayCal2,0);
000CF0 E4                CLR     A
000CF1 FD                MOV     R5,A
000CF2 FC                MOV     R4,A
000CF3 7F82              MOV     R7,#082H
000CF5 1239F0            LCALL   _CS_ScaleDisplay_FreshBuf
 1112: 		}
000CF8         ?C0154?CS_SCALE_PROC:
 1113: 	
 1114: 	if(R_CaliState==CS_CaliState_GetCal2)
000CF8 904CB0            MOV     DPTR,#R_CaliState
000CFB E0                MOVX    A,@DPTR
000CFC 6404              XRL     A,#04H
000CFE 6002              JZ      $ + 4H
000D00 A19E              AJMP    ?C0156?CS_SCALE_PROC
 1115: 		{		
 1116: 			R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);		
000D02 FD                MOV     R5,A
000D03 FC                MOV     R4,A
000D04 FF                MOV     R7,A
000D05 1212F0            LCALL   _CS_Scale_ZeroProc
000D08 904DFA            MOV     DPTR,#R_AD_PowerOnZero
000D0B EE                MOV     A,R6
000D0C F0                MOVX    @DPTR,A
000D0D A3                INC     DPTR
000D0E EF                MOV     A,R7
000D0F F0                MOVX    @DPTR,A
 1117: 			weight_temp = R_AD_BUF - R_AD_PowerOnZero;
000D10 C3                CLR     C
000D11 904DF9            MOV     DPTR,#R_AD_BUF+01H
000D14 E0                MOVX    A,@DPTR
000D15 9F                SUBB    A,R7
000D16 FF                MOV     R7,A
000D17 904DF8            MOV     DPTR,#R_AD_BUF
000D1A E0                MOVX    A,@DPTR
000D1B 9E                SUBB    A,R6
000D1C FE                MOV     R6,A
000D1D 904DF6            MOV     DPTR,#weight_temp
000D20 F0                MOVX    @DPTR,A
000D21 A3                INC     DPTR
000D22 EF                MOV     A,R7
000D23 F0                MOVX    @DPTR,A
 1118: 					
 1119: 			if((weight_temp < R_AD_CaliDot1)||(R_AD_BUF < R_AD_PowerOnZero))
000D24 904CAA            MOV     DPTR,#R_AD_CaliDot1
000D27 E0                MOVX    A,@DPTR
000D28 FC                MOV     R4,A
000D29 A3                INC     DPTR
000D2A E0                MOVX    A,@DPTR
000D2B FD                MOV     R5,A
000D2C D3                SETB    C
000D2D 9F                SUBB    A,R7
000D2E EC                MOV     A,R4
000D2F 9E                SUBB    A,R6
000D30 5015              JNC     ?C0158?CS_SCALE_PROC
000D32 904DFA            MOV     DPTR,#R_AD_PowerOnZero
000D35 E0                MOVX    A,@DPTR
000D36 FE                MOV     R6,A
000D37 A3                INC     DPTR
000D38 E0                MOVX    A,@DPTR
000D39 FF                MOV     R7,A
000D3A C3                CLR     C
000D3B 904DF9            MOV     DPTR,#R_AD_BUF+01H
000D3E E0                MOVX    A,@DPTR
000D3F 9F                SUBB    A,R7
000D40 904DF8            MOV     DPTR,#R_AD_BUF
000D43 E0                MOVX    A,@DPTR
000D44 9E                SUBB    A,R6
000D45 5009              JNC     ?C0157?CS_SCALE_PROC
000D47         ?C0158?CS_SCALE_PROC:
 1120: 				{
 1121: 				R_AD_CaliDot2 = 0;
000D47 E4                CLR     A
000D48 904CAC            MOV     DPTR,#R_AD_CaliDot2
000D4B F0                MOVX    @DPTR,A
000D4C A3                INC     DPTR
000D4D F0                MOVX    @DPTR,A
 1122: 				}
000D4E 8041              SJMP    ?C0159?CS_SCALE_PROC
000D50         ?C0157?CS_SCALE_PROC:
 1123: 			else
 1124: 				{
 1125: 				R_AD_CaliDot2 = weight_temp -R_AD_CaliDot1;
000D50 C3                CLR     C
000D51 904DF7            MOV     DPTR,#weight_temp+01H
000D54 E0                MOVX    A,@DPTR
000D55 9D                SUBB    A,R5
000D56 FF                MOV     R7,A
000D57 904DF6            MOV     DPTR,#weight_temp
000D5A E0                MOVX    A,@DPTR
000D5B 9C                SUBB    A,R4
000D5C FE                MOV     R6,A
000D5D 904CAC            MOV     DPTR,#R_AD_CaliDot2
000D60 F0                MOVX    @DPTR,A
000D61 A3                INC     DPTR
000D62 EF                MOV     A,R7
000D63 F0                MOVX    @DPTR,A
 1126: 			
 1127: 				if((R_AD_CaliDot2> 750)&& (R_AdFilTimes>=CS_Cali_Steadytimes))
000D64 D3                SETB    C
000D65 94EE              SUBB    A,#0EEH
000D67 EE                MOV     A,R6
000D68 9402              SUBB    A,#02H
000D6A 4025              JC      ?C0159?CS_SCALE_PROC
000D6C 904DF5            MOV     DPTR,#R_AdFilTimes+01H
000D6F E0                MOVX    A,@DPTR
000D70 940C              SUBB    A,#0CH
000D72 904DF4            MOV     DPTR,#R_AdFilTimes
000D75 E0                MOVX    A,@DPTR
000D76 9400              SUBB    A,#00H
000D78 4017              JC      ?C0159?CS_SCALE_PROC
 1128: 					{
 1129: 					CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000D7A 904DF8            MOV     DPTR,#R_AD_BUF
000D7D E0                MOVX    A,@DPTR
000D7E FC                MOV     R4,A
000D7F A3                INC     DPTR
000D80 E0                MOVX    A,@DPTR
000D81 FD                MOV     R5,A
000D82 7F01              MOV     R7,#01H
000D84 12327E            LCALL   _CS_Scale_AdcFilter
 1130: 					CS_SoftTimer(ResetSoftTimer);
000D87 7F02              MOV     R7,#02H
000D89 F115              ACALL   _CS_SoftTimer
 1131: 					R_CaliState = CS_CaliState_ShowCal3;
000D8B 904CB0            MOV     DPTR,#R_CaliState
000D8E 7405              MOV     A,#05H
000D90 F0                MOVX    @DPTR,A
 1132: 					}
 1133: 				}
000D91         ?C0159?CS_SCALE_PROC:
 1134: 			CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_CaliDot2);
000D91 904CAC            MOV     DPTR,#R_AD_CaliDot2
000D94 E0                MOVX    A,@DPTR
000D95 FC                MOV     R4,A
000D96 A3                INC     DPTR
000D97 E0                MOVX    A,@DPTR
000D98 FD                MOV     R5,A
000D99 7F21              MOV     R7,#021H
000D9B 1239F0            LCALL   _CS_ScaleDisplay_FreshBuf
 1135: 		}
000D9E         ?C0156?CS_SCALE_PROC:
 1136: 
 1137: 	if(R_CaliState == CS_CaliState_ShowCal3)
000D9E 904CB0            MOV     DPTR,#R_CaliState
000DA1 E0                MOVX    A,@DPTR
000DA2 B40518            CJNE    A,#05H,?C0161?CS_SCALE_PROC
 1138: 		{
 1139: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 	
000DA5 7F01              MOV     R7,#01H
000DA7 F115              ACALL   _CS_SoftTimer
000DA9 EF                MOV     A,R7
000DAA D3                SETB    C
000DAB 94C8              SUBB    A,#0C8H
000DAD 4006              JC      ?C0162?CS_SCALE_PROC
 1140: 			R_CaliState = CS_CaliState_GetCal3;
000DAF 904CB0            MOV     DPTR,#R_CaliState
000DB2 7406              MOV     A,#06H
000DB4 F0                MOVX    @DPTR,A
000DB5         ?C0162?CS_SCALE_PROC:
 1141: 		CS_ScaleDisplay_FreshBuf(DisplayCal3,0);
000DB5 E4                CLR     A
000DB6 FD                MOV     R5,A
000DB7 FC                MOV     R4,A
000DB8 7F83              MOV     R7,#083H
000DBA 1239F0            LCALL   _CS_ScaleDisplay_FreshBuf
 1142: 		}
000DBD         ?C0161?CS_SCALE_PROC:
 1143: 	
 1144: 	if(R_CaliState==CS_CaliState_GetCal3)
000DBD 904CB0            MOV     DPTR,#R_CaliState
000DC0 E0                MOVX    A,@DPTR
000DC1 6406              XRL     A,#06H
000DC3 6002              JZ      $ + 4H
000DC5 C17C              AJMP    ?C0163?CS_SCALE_PROC
 1145: 		{		
 1146: 			R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);		
000DC7 FD                MOV     R5,A
000DC8 FC                MOV     R4,A
000DC9 FF                MOV     R7,A
000DCA 1212F0            LCALL   _CS_Scale_ZeroProc
000DCD 904DFA            MOV     DPTR,#R_AD_PowerOnZero
000DD0 EE                MOV     A,R6
000DD1 F0                MOVX    @DPTR,A
000DD2 A3                INC     DPTR
000DD3 EF                MOV     A,R7
000DD4 F0                MOVX    @DPTR,A
 1147: 			weight_temp = R_AD_BUF - R_AD_PowerOnZero;
000DD5 C3                CLR     C
000DD6 904DF9            MOV     DPTR,#R_AD_BUF+01H
000DD9 E0                MOVX    A,@DPTR
000DDA 9F                SUBB    A,R7
000DDB FF                MOV     R7,A
000DDC 904DF8            MOV     DPTR,#R_AD_BUF
000DDF E0                MOVX    A,@DPTR
000DE0 9E                SUBB    A,R6
000DE1 FE                MOV     R6,A
000DE2 904DF6            MOV     DPTR,#weight_temp
000DE5 F0                MOVX    @DPTR,A
000DE6 A3                INC     DPTR
000DE7 EF                MOV     A,R7
000DE8 F0                MOVX    @DPTR,A
 1148: 					
 1149: 			if((weight_temp < R_AD_CaliDot1)||(R_AD_BUF < R_AD_PowerOnZero))
000DE9 904CAA            MOV     DPTR,#R_AD_CaliDot1
000DEC E0                MOVX    A,@DPTR
000DED FC                MOV     R4,A
000DEE A3                INC     DPTR
000DEF E0                MOVX    A,@DPTR
000DF0 FD                MOV     R5,A
000DF1 D3                SETB    C
000DF2 9F                SUBB    A,R7
000DF3 EC                MOV     A,R4
000DF4 9E                SUBB    A,R6
000DF5 5015              JNC     ?C0165?CS_SCALE_PROC
000DF7 904DFA            MOV     DPTR,#R_AD_PowerOnZero
000DFA E0                MOVX    A,@DPTR
000DFB FE                MOV     R6,A
000DFC A3                INC     DPTR
000DFD E0                MOVX    A,@DPTR
000DFE FF                MOV     R7,A
000DFF C3                CLR     C
000E00 904DF9            MOV     DPTR,#R_AD_BUF+01H
000E03 E0                MOVX    A,@DPTR
000E04 9F                SUBB    A,R7
000E05 904DF8            MOV     DPTR,#R_AD_BUF
000E08 E0                MOVX    A,@DPTR
000E09 9E                SUBB    A,R6
000E0A 5009              JNC     ?C0164?CS_SCALE_PROC
000E0C         ?C0165?CS_SCALE_PROC:
 1150: 				{
 1151: 				R_AD_CaliDot3 = 0;
000E0C E4                CLR     A
000E0D 904CAE            MOV     DPTR,#R_AD_CaliDot3
000E10 F0                MOVX    @DPTR,A
000E11 A3                INC     DPTR
000E12 F0                MOVX    @DPTR,A
 1152: 				}
000E13 805A              SJMP    ?C0166?CS_SCALE_PROC
000E15         ?C0164?CS_SCALE_PROC:
 1153: 			else
 1154: 				{
 1155: 				weight_temp = weight_temp -R_AD_CaliDot1;
000E15 C3                CLR     C
000E16 904DF7            MOV     DPTR,#weight_temp+01H
000E19 E0                MOVX    A,@DPTR
000E1A 9D                SUBB    A,R5
000E1B FF                MOV     R7,A
000E1C 904DF6            MOV     DPTR,#weight_temp
000E1F E0                MOVX    A,@DPTR
000E20 9C                SUBB    A,R4
000E21 FE                MOV     R6,A
000E22 F0                MOVX    @DPTR,A
000E23 A3                INC     DPTR
000E24 EF                MOV     A,R7
000E25 F0                MOVX    @DPTR,A
 1156: 
 1157: 				if(weight_temp < R_AD_CaliDot2)
000E26 904CAC            MOV     DPTR,#R_AD_CaliDot2
000E29 E0                MOVX    A,@DPTR
000E2A FC                MOV     R4,A
000E2B A3                INC     DPTR
000E2C E0                MOVX    A,@DPTR
000E2D FD                MOV     R5,A
000E2E D3                SETB    C
000E2F 9F                SUBB    A,R7
000E30 EC                MOV     A,R4
000E31 9E                SUBB    A,R6
000E32 4007              JC      ?C0167?CS_SCALE_PROC
 1158: 					{
 1159: 					R_AD_CaliDot3 = 0;
000E34 E4                CLR     A
000E35 A3                INC     DPTR
000E36 F0                MOVX    @DPTR,A
000E37 A3                INC     DPTR
000E38 F0                MOVX    @DPTR,A
 1160: 					
 1161: 					}
000E39 8034              SJMP    ?C0166?CS_SCALE_PROC
000E3B         ?C0167?CS_SCALE_PROC:
 1162: 				else
 1163: 					{
 1164: 				R_AD_CaliDot3 = weight_temp -R_AD_CaliDot2;
000E3B C3                CLR     C
000E3C 904DF7            MOV     DPTR,#weight_temp+01H
000E3F E0                MOVX    A,@DPTR
000E40 9D                SUBB    A,R5
000E41 FF                MOV     R7,A
000E42 904DF6            MOV     DPTR,#weight_temp
000E45 E0                MOVX    A,@DPTR
000E46 9C                SUBB    A,R4
000E47 FE                MOV     R6,A
000E48 904CAE            MOV     DPTR,#R_AD_CaliDot3
000E4B F0                MOVX    @DPTR,A
000E4C A3                INC     DPTR
000E4D EF                MOV     A,R7
000E4E F0                MOVX    @DPTR,A
 1165: 			
 1166: 				if((R_AD_CaliDot3> 750)&& (R_AdFilTimes>=CS_Cali_Steadytimes))
000E4F D3                SETB    C
000E50 94EE              SUBB    A,#0EEH
000E52 EE                MOV     A,R6
000E53 9402              SUBB    A,#02H
000E55 4018              JC      ?C0166?CS_SCALE_PROC
000E57 904DF5            MOV     DPTR,#R_AdFilTimes+01H
000E5A E0                MOVX    A,@DPTR
000E5B 940C              SUBB    A,#0CH
000E5D 904DF4            MOV     DPTR,#R_AdFilTimes
000E60 E0                MOVX    A,@DPTR
000E61 9400              SUBB    A,#00H
000E63 400A              JC      ?C0166?CS_SCALE_PROC
 1167: 					{
 1168: 					CS_SoftTimer(ResetSoftTimer);
000E65 7F02              MOV     R7,#02H
000E67 F115              ACALL   _CS_SoftTimer
 1169: 					R_CaliState = CS_CaliState_ShowCal4;
000E69 904CB0            MOV     DPTR,#R_CaliState
000E6C 7407              MOV     A,#07H
000E6E F0                MOVX    @DPTR,A
 1170: 					}
 1171: 					}
 1172: 				}
000E6F         ?C0166?CS_SCALE_PROC:
 1173: 			CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_CaliDot3);
000E6F 904CAE            MOV     DPTR,#R_AD_CaliDot3
000E72 E0                MOVX    A,@DPTR
000E73 FC                MOV     R4,A
000E74 A3                INC     DPTR
000E75 E0                MOVX    A,@DPTR
000E76 FD                MOV     R5,A
000E77 7F21              MOV     R7,#021H
000E79 1239F0            LCALL   _CS_ScaleDisplay_FreshBuf
 1174: 		}
000E7C         ?C0163?CS_SCALE_PROC:
 1175: 	
 1176: 	if(R_CaliState == CS_CaliState_ShowCal4)
000E7C 904CB0            MOV     DPTR,#R_CaliState
000E7F E0                MOVX    A,@DPTR
000E80 B40718            CJNE    A,#07H,?C0170?CS_SCALE_PROC
 1177: 		{
 1178: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 
000E83 7F01              MOV     R7,#01H
000E85 F115              ACALL   _CS_SoftTimer
000E87 EF                MOV     A,R7
000E88 D3                SETB    C
000E89 94C8              SUBB    A,#0C8H
000E8B 4006              JC      ?C0171?CS_SCALE_PROC
 1179: 			R_CaliState = CS_CaliState_SaveData;
000E8D 904CB0            MOV     DPTR,#R_CaliState
000E90 7408              MOV     A,#08H
000E92 F0                MOVX    @DPTR,A
000E93         ?C0171?CS_SCALE_PROC:
 1180: 		CS_ScaleDisplay_FreshBuf(DisplayCal4,0);
000E93 E4                CLR     A
000E94 FD                MOV     R5,A
000E95 FC                MOV     R4,A
000E96 7F84              MOV     R7,#084H
000E98 1239F0            LCALL   _CS_ScaleDisplay_FreshBuf
 1181: 		}
000E9B         ?C0170?CS_SCALE_PROC:
 1182: 	
 1183: 	if(R_CaliState==CS_CaliState_SaveData)
000E9B 904CB0            MOV     DPTR,#R_CaliState
000E9E E0                MOVX    A,@DPTR
000E9F 6408              XRL     A,#08H
000EA1 706E              JNZ     ?C0172?CS_SCALE_PROC
 1184: 		{
 1185: 		
 1186: 		R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);
000EA3 FD                MOV     R5,A
000EA4 FC                MOV     R4,A
000EA5 FF                MOV     R7,A
000EA6 1212F0            LCALL   _CS_Scale_ZeroProc
000EA9 904DFA            MOV     DPTR,#R_AD_PowerOnZero
000EAC EE                MOV     A,R6
000EAD F0                MOVX    @DPTR,A
000EAE A3                INC     DPTR
000EAF EF                MOV     A,R7
000EB0 F0                MOVX    @DPTR,A
 1187: 		CS_Scale_ZeroProc(SetRunningZero,R_AD_PowerOnZero);
000EB1 904DFA            MOV     DPTR,#R_AD_PowerOnZero
000EB4 E0                MOVX    A,@DPTR
000EB5 FC                MOV     R4,A
000EB6 A3                INC     DPTR
000EB7 E0                MOVX    A,@DPTR
000EB8 FD                MOV     R5,A
000EB9 7F06              MOV     R7,#06H
000EBB 1212F0            LCALL   _CS_Scale_ZeroProc
 1188: 		R_Scale_state = CS_Scale_state_weighting;
000EBE 904CC4            MOV     DPTR,#R_Scale_state
000EC1 7401              MOV     A,#01H
000EC3 F0                MOVX    @DPTR,A
 1189: 		R_OpenWeight_Ad	=  R_AD_CaliDot1/10;
000EC4 904CAA            MOV     DPTR,#R_AD_CaliDot1
000EC7 E0                MOVX    A,@DPTR
000EC8 FA                MOV     R2,A
000EC9 A3                INC     DPTR
000ECA E0                MOVX    A,@DPTR
000ECB 7C00              MOV     R4,#00H
000ECD 7D0A              MOV     R5,#0AH
000ECF FF                MOV     R7,A
000ED0 AE02              MOV     R6,AR2
000ED2 120173            LCALL   ?C?UIDIV
000ED5 904CB1            MOV     DPTR,#R_OpenWeight_Ad
000ED8 EE                MOV     A,R6
000ED9 F0                MOVX    @DPTR,A
000EDA A3                INC     DPTR
000EDB EF                MOV     A,R7
000EDC F0                MOVX    @DPTR,A
 1190: 
 1191: 		/*
 1192: 		R_Debug_temp=R_AD_CaliDot2;
 1193: 		CS_ScaleDisplay_Debug();
 1194: 		while(1);
 1195: 		*/
 1196: 		
 1197: 		*(mem_sensor_buf )= HI_UINT16(R_AD_CaliDot1);
000EDD EA                MOV     A,R2
000EDE 904C08            MOV     DPTR,#04C08H
000EE1 F0                MOVX    @DPTR,A
 1198: 		*(mem_sensor_buf+1) = LO_UINT16(R_AD_CaliDot1);
000EE2 904CAA            MOV     DPTR,#R_AD_CaliDot1
000EE5 E0                MOVX    A,@DPTR
000EE6 A3                INC     DPTR
000EE7 E0                MOVX    A,@DPTR
000EE8 904C09            MOV     DPTR,#04C09H
000EEB F0                MOVX    @DPTR,A
 1199: 		*(mem_sensor_buf+2 )= HI_UINT16(R_AD_CaliDot2);
000EEC 904CAC            MOV     DPTR,#R_AD_CaliDot2
000EEF E0                MOVX    A,@DPTR
000EF0 FC                MOV     R4,A
000EF1 A3                INC     DPTR
000EF2 E0                MOVX    A,@DPTR
000EF3 FD                MOV     R5,A
000EF4 EC                MOV     A,R4
000EF5 904C0A            MOV     DPTR,#04C0AH
000EF8 F0                MOVX    @DPTR,A
 1200: 		*(mem_sensor_buf+3) = LO_UINT16(R_AD_CaliDot2);
000EF9 ED                MOV     A,R5
000EFA A3                INC     DPTR
000EFB F0                MOVX    @DPTR,A
 1201: 		*(mem_sensor_buf+4 )= HI_UINT16(R_AD_CaliDot3);
000EFC 904CAE            MOV     DPTR,#R_AD_CaliDot3
000EFF E0                MOVX    A,@DPTR
000F00 FC                MOV     R4,A
000F01 A3                INC     DPTR
000F02 E0                MOVX    A,@DPTR
000F03 FD                MOV     R5,A
000F04 EC                MOV     A,R4
000F05 904C0C            MOV     DPTR,#04C0CH
000F08 F0                MOVX    @DPTR,A
 1202: 		*(mem_sensor_buf+5) = LO_UINT16(R_AD_CaliDot3);
000F09 ED                MOV     A,R5
000F0A A3                INC     DPTR
000F0B F0                MOVX    @DPTR,A
 1203: 		SpiFlashOperator(CS_CMD_WRITE_FLASH);
000F0C 7F41              MOV     R7,#041H
000F0E 121FDF            LCALL   _SpiFlashOperator
 1204: 
 1205: 		
 1206: 
 1207: 		}
000F11         ?C0172?CS_SCALE_PROC:
 1208: 	return 0;
000F11 E4                CLR     A
000F12 FE                MOV     R6,A
000F13 FF                MOV     R7,A
 1209: 	
 1210: }
000F14 22                RET     
----- FUNCTION _CS_Scale_CaliProc (END) -------


----- FUNCTION _CS_SoftTimer (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1427: u8_t CS_SoftTimer(u8_t option)
 1428: {
;---- Variable 'option' assigned to Register 'R7' ----
 1429: 	static u8_t xdata timecount; 				//计时变量
 1430: 	static u8_t xdata B_Timeout;
 1431: 
 1432: 	if(option==ResetSoftTimer)
000F15 EF                MOV     A,R7
000F16 B40207            CJNE    A,#02H,?C0204?CS_SCALE_PROC
 1433: 		{
 1434: 		timecount=0;
000F19 E4                CLR     A
000F1A 904CB7            MOV     DPTR,#timecount
000F1D F0                MOVX    @DPTR,A
 1435: 		B_Timeout = false;
000F1E A3                INC     DPTR
000F1F F0                MOVX    @DPTR,A
 1436: 		}
000F20         ?C0204?CS_SCALE_PROC:
 1437: 
 1438: 	if(option==GetSoftTimerTime)
000F20 EF                MOV     A,R7
000F21 B40106            CJNE    A,#01H,?C0205?CS_SCALE_PROC
 1439: 		return	timecount;
000F24 904CB7            MOV     DPTR,#timecount
000F27 E0                MOVX    A,@DPTR
000F28 FF                MOV     R7,A
000F29 22                RET     
000F2A         ?C0205?CS_SCALE_PROC:
 1440: 
 1441: 	if(option==SoftTimerInc)
000F2A EF                MOV     A,R7
000F2B 700C              JNZ     ?C0207?CS_SCALE_PROC
 1442: 		{
 1443: 		if(timecount<255 ) 
000F2D 904CB7            MOV     DPTR,#timecount
000F30 E0                MOVX    A,@DPTR
000F31 C3                CLR     C
000F32 94FF              SUBB    A,#0FFH
000F34 5003              JNC     ?C0207?CS_SCALE_PROC
 1444: 		timecount++;
000F36 E0                MOVX    A,@DPTR
000F37 04                INC     A
000F38 F0                MOVX    @DPTR,A
 1445: 		}
000F39         ?C0207?CS_SCALE_PROC:
 1446: 	
 1447: 	
 1448: 	if(timecount>SoftTimerTimeOut)
000F39 904CB7            MOV     DPTR,#timecount
000F3C E0                MOVX    A,@DPTR
000F3D D3                SETB    C
000F3E 9496              SUBB    A,#096H
000F40 4004              JC      ?C0209?CS_SCALE_PROC
 1449: 		B_Timeout = true;
000F42 A3                INC     DPTR
000F43 7401              MOV     A,#01H
000F45 F0                MOVX    @DPTR,A
000F46         ?C0209?CS_SCALE_PROC:
 1450: 
 1451: 	if(option==GetIfTimeOut)
000F46 EF                MOV     A,R7
000F47 B40306            CJNE    A,#03H,?C0210?CS_SCALE_PROC
 1452: 		return	B_Timeout;
000F4A 904CB8            MOV     DPTR,#B_Timeout
000F4D E0                MOVX    A,@DPTR
000F4E FF                MOV     R7,A
000F4F 22                RET     
000F50         ?C0210?CS_SCALE_PROC:
 1453: 	
 1454: 	return 0;
000F50 7F00              MOV     R7,#00H
 1455: 
 1456: }
000F52 22                RET     
----- FUNCTION _CS_SoftTimer (END) -------


----- FUNCTION CS_Scale_ChangeUnit (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  377: void CS_Scale_ChangeUnit()
  378: {
  379: 	switch(R_Selet_Unit)
  380: 		{
000F53 904CC5            MOV     DPTR,#R_Selet_Unit
000F56 E0                MOVX    A,@DPTR
000F57 24FE              ADD     A,#0FEH
000F59 600A              JZ      ?C0040?CS_SCALE_PROC
000F5B 14                DEC     A
000F5C 700E              JNZ     ?C0041?CS_SCALE_PROC
  381: 		/*
  382: 		case CS_ScaleDisplay_L_kg:
  383: 			R_Selet_Unit=CS_ScaleDisplay_L_lb;
  384: 			break;
  385: 		case CS_ScaleDisplay_L_lb:
  386: 			R_Selet_Unit=CS_ScaleDisplay_L_jin;
  387: 			break;
  388: 		*/
  389: 		case CS_ScaleDisplay_L_jin:
000F5E         ?C0039?CS_SCALE_PROC:
  390: 			R_Selet_Unit=CS_ScaleDisplay_L_gongjin;
000F5E 904CC5            MOV     DPTR,#R_Selet_Unit
000F61 7402              MOV     A,#02H
000F63 F0                MOVX    @DPTR,A
  391: 			break;
000F64 22                RET     
  392: 		case CS_ScaleDisplay_L_gongjin:
000F65         ?C0040?CS_SCALE_PROC:
  393: 			R_Selet_Unit=CS_ScaleDisplay_L_jin;
000F65 904CC5            MOV     DPTR,#R_Selet_Unit
000F68 7403              MOV     A,#03H
000F6A F0                MOVX    @DPTR,A
  394: 			break;
000F6B 22                RET     
  395: 		default :
000F6C         ?C0041?CS_SCALE_PROC:
  396: 			R_Selet_Unit=CS_ScaleDisplay_L_gongjin;
000F6C 904CC5            MOV     DPTR,#R_Selet_Unit
000F6F 7402              MOV     A,#02H
000F71 F0                MOVX    @DPTR,A
  397: 			break;
  398: 		}
  399: }
000F72 22                RET     
----- FUNCTION CS_Scale_ChangeUnit (END) -------


----- FUNCTION CS_ScaleDisplay_SteadyFlash (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  346: void CS_ScaleDisplay_SteadyFlash(void)
  347: {	 
  348: 
  349: 	u8_t xdata R_Weight_FlashTime;
  350: 
  351: 	
  352: 	if(CS_SoftTimer(GetIfTimeOut) == false)
000F73 7F03              MOV     R7,#03H
000F75 F115              ACALL   _CS_SoftTimer
000F77 EF                MOV     A,R7
000F78 702D              JNZ     ?C0057?CS_SCALEDISPLAY
  353: 		{
  354: 		R_Weight_FlashTime = CS_SoftTimer(GetSoftTimerTime);
000F7A 7F01              MOV     R7,#01H
000F7C F115              ACALL   _CS_SoftTimer
;---- Variable 'R_Weight_FlashTime' assigned to Register 'R7' ----
  355: 		   if(R_Weight_FlashTime<30) 
000F7E EF                MOV     A,R7
000F7F C3                CLR     C
000F80 941E              SUBB    A,#01EH
000F82 5003              JNC     ?C0048?CS_SCALEDISPLAY
  356: 		   	CS_ScaleDisplay_LcdBackup();
000F84 023BE4            LJMP    CS_ScaleDisplay_LcdBackup
000F87         ?C0048?CS_SCALEDISPLAY:
  357: 		    else if(R_Weight_FlashTime<60) 
000F87 EF                MOV     A,R7
000F88 C3                CLR     C
000F89 943C              SUBB    A,#03CH
000F8B 5002              JNC     ?C0050?CS_SCALEDISPLAY
  358: 				CS_ScaleDisplay_LcdShowNoDigit();
000F8D 8019              SJMP    CS_ScaleDisplay_LcdShowNoDigit
000F8F         ?C0050?CS_SCALEDISPLAY:
  359: 		    		else if(R_Weight_FlashTime<90)
000F8F EF                MOV     A,R7
000F90 C3                CLR     C
000F91 945A              SUBB    A,#05AH
000F93 5002              JNC     ?C0052?CS_SCALEDISPLAY
  360: 					CS_ScaleDisplay_LcdRestore();
000F95 802C              SJMP    CS_ScaleDisplay_LcdRestore
000F97         ?C0052?CS_SCALEDISPLAY:
  361: 		     			else if(R_Weight_FlashTime<120) 
000F97 EF                MOV     A,R7
000F98 C3                CLR     C
000F99 9478              SUBB    A,#078H
000F9B 5002              JNC     ?C0054?CS_SCALEDISPLAY
  362: 						CS_ScaleDisplay_LcdShowNoDigit();
000F9D 8009              SJMP    CS_ScaleDisplay_LcdShowNoDigit
000F9F         ?C0054?CS_SCALEDISPLAY:
  363: 		   			 	else if(R_Weight_FlashTime<150)
000F9F EF                MOV     A,R7
000FA0 C3                CLR     C
000FA1 9496              SUBB    A,#096H
000FA3 5002              JNC     ?C0057?CS_SCALEDISPLAY
  364: 							CS_ScaleDisplay_LcdRestore();		
000FA5 F1C3              ACALL   CS_ScaleDisplay_LcdRestore
  365: 		}
  366: }
000FA7         ?C0057?CS_SCALEDISPLAY:
000FA7 22                RET     
----- FUNCTION CS_ScaleDisplay_SteadyFlash (END) -------


----- FUNCTION CS_ScaleDisplay_LcdShowNoDigit (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  307: void CS_ScaleDisplay_LcdShowNoDigit(void)
  308: {
  309: 	CS_Lcd_Send_Data[0] &= 0x0f;
  310: 	CS_Lcd_Send_Data[1] &= 0x00;
000FA8 904D27            MOV     DPTR,#CS_Lcd_Send_Data
000FAB E0                MOVX    A,@DPTR
000FAC 540F              ANL     A,#0FH
000FAE F0                MOVX    @DPTR,A
  311: 	CS_Lcd_Send_Data[2] &= 0x08;
000FAF A3                INC     DPTR
000FB0 E0                MOVX    A,@DPTR
000FB1 E4                CLR     A
000FB2 F0                MOVX    @DPTR,A
  312: 	CS_Lcd_Send_Data[3] &= 0x08;
000FB3 A3                INC     DPTR
000FB4 E0                MOVX    A,@DPTR
000FB5 5408              ANL     A,#08H
000FB7 F0                MOVX    @DPTR,A
  313: 	CS_Lcd_Send_Data[4] &= 0xf0;
000FB8 A3                INC     DPTR
000FB9 E0                MOVX    A,@DPTR
000FBA 5408              ANL     A,#08H
000FBC F0                MOVX    @DPTR,A
  314: }
000FBD A3                INC     DPTR
000FBE E0                MOVX    A,@DPTR
000FBF 54F0              ANL     A,#0F0H
000FC1 F0                MOVX    @DPTR,A
  315: 
000FC2 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdShowNoDigit (END) -------


----- FUNCTION CS_ScaleDisplay_LcdRestore (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  336: void CS_ScaleDisplay_LcdRestore(void)
  337: {
  338: 	CS_Lcd_Send_Data[0] = CS_Lcd_Send_Data_BAK[0];
  339: 	CS_Lcd_Send_Data[1] = CS_Lcd_Send_Data_BAK[1];
000FC3 904D1C            MOV     DPTR,#CS_Lcd_Send_Data_BAK
000FC6 E0                MOVX    A,@DPTR
000FC7 904D27            MOV     DPTR,#CS_Lcd_Send_Data
000FCA F0                MOVX    @DPTR,A
  340: 	CS_Lcd_Send_Data[2] = CS_Lcd_Send_Data_BAK[2];
000FCB 904D1D            MOV     DPTR,#CS_Lcd_Send_Data_BAK+01H
000FCE E0                MOVX    A,@DPTR
000FCF 904D28            MOV     DPTR,#CS_Lcd_Send_Data+01H
000FD2 F0                MOVX    @DPTR,A
  341: 	CS_Lcd_Send_Data[3] = CS_Lcd_Send_Data_BAK[3];
000FD3 904D1E            MOV     DPTR,#CS_Lcd_Send_Data_BAK+02H
000FD6 E0                MOVX    A,@DPTR
000FD7 904D29            MOV     DPTR,#CS_Lcd_Send_Data+02H
000FDA F0                MOVX    @DPTR,A
  342: 	CS_Lcd_Send_Data[4] = CS_Lcd_Send_Data_BAK[4];
000FDB 904D1F            MOV     DPTR,#CS_Lcd_Send_Data_BAK+03H
000FDE E0                MOVX    A,@DPTR
000FDF 904D2A            MOV     DPTR,#CS_Lcd_Send_Data+03H
000FE2 F0                MOVX    @DPTR,A
  343: }
000FE3 904D20            MOV     DPTR,#CS_Lcd_Send_Data_BAK+04H
000FE6 E0                MOVX    A,@DPTR
000FE7 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+04H
000FEA F0                MOVX    @DPTR,A
  344: 
000FEB 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdRestore (END) -------


----- FUNCTION systemInit (BEGIN) -----
 FILE: 'system.c'
   69: void systemInit(void)
   70: {
   71: 	LPM_DISABLE();
   72: 	if(*mem_poweron_flag == CS_POWERON_FLAG		//poweron or reset
000FEC 9049FE            MOV     DPTR,#049FEH
000FEF E4                CLR     A
000FF0 F0                MOVX    @DPTR,A
   73: 	/*|| *mem_poweron_flag == CS_IOWAKE_FLAG*/) {		//iowake from sleep
000FF1 9049FC            MOV     DPTR,#049FCH
000FF4 E0                MOVX    A,@DPTR
000FF5 6410              XRL     A,#010H
000FF7 704F              JNZ     ?C0005?SYSTEM
   74: 		sys_state = SYS_ST_RUN;
   75: 		R_Scale_state = CS_Scale_state_init;
000FF9 904E59            MOV     DPTR,#sys_state
000FFC 7402              MOV     A,#02H
000FFE F0                MOVX    @DPTR,A
   76: 
000FFF E4                CLR     A
001000 904CC4            MOV     DPTR,#R_Scale_state
001003 F0                MOVX    @DPTR,A
   77: 		QueueInit();
001004 123F1B            LCALL   QueueInit
   78: 		//read spiflash data,save to buffer
   79: 		SpiFlashOperator(CS_CMD_READ_FLASH);
001007 7F40              MOV     R7,#040H
001009 121FDF            LCALL   _SpiFlashOperator
   80: 		bleConnStatus = BLE_STATUS_DISCONN;
00100C E4                CLR     A
00100D 904C5B            MOV     DPTR,#bleConnStatus
001010 F0                MOVX    @DPTR,A
   81: 		if(deviceInfo.registerFlag != DEVICE_REGISTERED)
001011 904C06            MOV     DPTR,#deviceInfo
001014 E0                MOVX    A,@DPTR
001015 6401              XRL     A,#01H
001017 600B              JZ      ?C0006?SYSTEM
   82: 		{
   83: 			xmemset(mem_register_buf, 0, sizeof(deviceInfo));
001019 7B0A              MOV     R3,#0AH
00101B E4                CLR     A
00101C FD                MOV     R5,A
00101D 7F0E              MOV     R7,#0EH
00101F 7E4C              MOV     R6,#04CH
001021 121FA3            LCALL   _xmemset
   84: 		}
001024         ?C0006?SYSTEM:
   85: 		*(mem_le_adv_data + 13) = deviceInfo.registerFlag;
001024 904C06            MOV     DPTR,#deviceInfo
001027 E0                MOVX    A,@DPTR
001028 9043E7            MOV     DPTR,#043E7H
00102B F0                MOVX    @DPTR,A
   86: 			
   87: 		YC_UtilTimerInit();
00102C 11B9              ACALL   YC_UtilTimerInit
   88: 		//YC_UtilTimerStart(1, SoftTimer_1SCallback, &SoftTimer_1STimerID);
   89: 		YC_UtilTimerStartMs(10, SoftTimer_10mSCallback, &SoftTimer_10msTimerID);
00102E 7BFF              MOV     R3,#0FFH
001030 7A08              MOV     R2,#HIGH SoftTimer_10mSCallback
001032 79F3              MOV     R1,#LOW SoftTimer_10mSCallback
001034 904DD9            MOV     DPTR,#?_YC_UtilTimerStartMs?BYTE+05H
001037 744E              MOV     A,#HIGH SoftTimer_10msTimerID
001039 F0                MOVX    @DPTR,A
00103A A3                INC     DPTR
00103B 743C              MOV     A,#LOW SoftTimer_10msTimerID
00103D F0                MOVX    @DPTR,A
00103E 7F0A              MOV     R7,#0AH
001040 7E00              MOV     R6,#00H
001042 317C              ACALL   _YC_UtilTimerStartMs
   90: 		CS_Scale_PowerOn();	
001044 51BB              ACALL   CS_Scale_PowerOn
   91: 		
   92: 	}
001046 8036              SJMP    ?C0007?SYSTEM
001048         ?C0005?SYSTEM:
   93: 	else {	//wake from LPM mode
   94: 		if(YC_GPIOGetInputStatus(5) == 0 ||	//GPIO5, key is  down	
001048 7F05              MOV     R7,#05H
00104A 1184              ACALL   _YC_GPIOGetInputStatus
00104C 5006              JNC     ?C0009?SYSTEM
00104E 7F1B              MOV     R7,#01BH
001050 1184              ACALL   _YC_GPIOGetInputStatus
001052 4024              JC      ?C0008?SYSTEM
001054         ?C0009?SYSTEM:
   95: 		YC_GPIOGetInputStatus(27) == 0) {	//GPIO27, scale wakeup
   96: 			sys_state = SYS_ST_RUN;
001054 904E59            MOV     DPTR,#sys_state
001057 7402              MOV     A,#02H
001059 F0                MOVX    @DPTR,A
   97: 			R_Scale_state = CS_Scale_state_standby;
00105A 904CC4            MOV     DPTR,#R_Scale_state
00105D F0                MOVX    @DPTR,A
   98: 			YC_UtilTimerInit();
00105E 11B9              ACALL   YC_UtilTimerInit
   99: 			//YC_UtilTimerStart(1, SoftTimer_1SCallback, &SoftTimer_1STimerID);
  100: 			YC_UtilTimerStartMs(10, SoftTimer_10mSCallback, &SoftTimer_10msTimerID);
001060 7BFF              MOV     R3,#0FFH
001062 7A08              MOV     R2,#HIGH SoftTimer_10mSCallback
001064 79F3              MOV     R1,#LOW SoftTimer_10mSCallback
001066 904DD9            MOV     DPTR,#?_YC_UtilTimerStartMs?BYTE+05H
001069 744E              MOV     A,#HIGH SoftTimer_10msTimerID
00106B F0                MOVX    @DPTR,A
00106C A3                INC     DPTR
00106D 743C              MOV     A,#LOW SoftTimer_10msTimerID
00106F F0                MOVX    @DPTR,A
001070 7F0A              MOV     R7,#0AH
001072 7E00              MOV     R6,#00H
001074 317C              ACALL   _YC_UtilTimerStartMs
  101: 			//CS_Scale_PowerOn();	
  102: 
  103: 			//R_Debug_temp=R_Scale_state;
  104: 			//CS_ScaleDisplay_Debug();
  105: 			//while(1);
  106: 		}
001076 8006              SJMP    ?C0007?SYSTEM
001078         ?C0008?SYSTEM:
  107: 		else {	//remote bluetooth wakeup
  108: 			sys_state = SYS_ST_IDLE;
001078 904E59            MOV     DPTR,#sys_state
00107B 7401              MOV     A,#01H
00107D F0                MOVX    @DPTR,A
  109: 		}
  110: 	}
00107E         ?C0007?SYSTEM:
  111: 	*mem_poweron_flag = CS_NULL_FLAG;
00107E 9049FC            MOV     DPTR,#049FCH
001081 E4                CLR     A
001082 F0                MOVX    @DPTR,A
  112: }
001083 22                RET     
----- FUNCTION systemInit (END) -------


----- FUNCTION _YC_GPIOGetInputStatus (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  140: bool YC_GPIOGetInputStatus(u8_t gpio_num)
  141: {
;---- Variable 'gpio_num' assigned to Register 'R7' ----
  142: 	u8_t queue, group;
  143: 
  144: 	queue = (gpio_num & 7);
001084 EF                MOV     A,R7
001085 5407              ANL     A,#07H
001087 FE                MOV     R6,A
;---- Variable 'queue' assigned to Register 'R6' ----
  145: 	group = (gpio_num>>3 & 3);
001088 EF                MOV     A,R7
001089 13                RRC     A
00108A 13                RRC     A
00108B 13                RRC     A
00108C 5403              ANL     A,#03H
00108E FF                MOV     R7,A
;---- Variable 'group' assigned to Register 'R7' ----
  146: 
  147: 	return (REG_GPIO_IN(group) & (1<<queue));
00108F 241C              ADD     A,#01CH
001091 FD                MOV     R5,A
001092 E4                CLR     A
001093 3481              ADDC    A,#081H
001095 8D82              MOV     DPL,R5
001097 F583              MOV     DPH,A
001099 E0                MOVX    A,@DPTR
00109A FD                MOV     R5,A
00109B 7C00              MOV     R4,#00H
00109D AF06              MOV     R7,AR6
00109F 7401              MOV     A,#01H
0010A1 7E00              MOV     R6,#00H
0010A3 A807              MOV     R0,AR7
0010A5 08                INC     R0
0010A6 8005              SJMP    ?C0021?YC_PERIPHERAL
0010A8         ?C0020?YC_PERIPHERAL:
0010A8 C3                CLR     C
0010A9 33                RLC     A
0010AA CE                XCH     A,R6
0010AB 33                RLC     A
0010AC CE                XCH     A,R6
0010AD         ?C0021?YC_PERIPHERAL:
0010AD D8F9              DJNZ    R0,?C0020?YC_PERIPHERAL
0010AF FF                MOV     R7,A
0010B0 EE                MOV     A,R6
0010B1 5C                ANL     A,R4
0010B2 FE                MOV     R6,A
0010B3 EF                MOV     A,R7
0010B4 5D                ANL     A,R5
0010B5 4E                ORL     A,R6
0010B6 24FF              ADD     A,#0FFH
  148: }
0010B8 22                RET     
----- FUNCTION _YC_GPIOGetInputStatus (END) -------


----- FUNCTION YC_UtilTimerInit (BEGIN) -----
 FILE: 'YC_Sys.c'
    8: void YC_UtilTimerInit(void)
    9: {
   10: 	u8_t i;
   11: 	
   12: 	YC_UtilTimer.timer_flages = 0;
0010B9 E4                CLR     A
0010BA 904CDA            MOV     DPTR,#YC_UtilTimer
0010BD F0                MOVX    @DPTR,A
   13: 	YC_UtilTimer.last_timer = YC_CLK_N;
0010BE 908101            MOV     DPTR,#08101H
0010C1 E0                MOVX    A,@DPTR
0010C2 FF                MOV     R7,A
0010C3 E4                CLR     A
0010C4 FC                MOV     R4,A
0010C5 FD                MOV     R5,A
0010C6 FE                MOV     R6,A
0010C7 7808              MOV     R0,#08H
0010C9 12031F            LCALL   ?C?LSHL
0010CC A804              MOV     R0,AR4
0010CE A905              MOV     R1,AR5
0010D0 AA06              MOV     R2,AR6
0010D2 AB07              MOV     R3,AR7
0010D4 908100            MOV     DPTR,#08100H
0010D7 E0                MOVX    A,@DPTR
0010D8 FF                MOV     R7,A
0010D9 E4                CLR     A
0010DA EB                MOV     A,R3
0010DB 4F                ORL     A,R7
0010DC FF                MOV     R7,A
0010DD EA                MOV     A,R2
0010DE FE                MOV     R6,A
0010DF E9                MOV     A,R1
0010E0 FD                MOV     R5,A
0010E1 E8                MOV     A,R0
0010E2 FC                MOV     R4,A
0010E3 C004              PUSH    AR4
0010E5 C005              PUSH    AR5
0010E7 C006              PUSH    AR6
0010E9 C007              PUSH    AR7
0010EB 908102            MOV     DPTR,#08102H
0010EE E0                MOVX    A,@DPTR
0010EF FF                MOV     R7,A
0010F0 E4                CLR     A
0010F1 FC                MOV     R4,A
0010F2 FD                MOV     R5,A
0010F3 FE                MOV     R6,A
0010F4 7810              MOV     R0,#010H
0010F6 12031F            LCALL   ?C?LSHL
0010F9 D003              POP     AR3
0010FB D002              POP     AR2
0010FD D001              POP     AR1
0010FF D000              POP     AR0
001101 EF                MOV     A,R7
001102 4B                ORL     A,R3
001103 FF                MOV     R7,A
001104 EE                MOV     A,R6
001105 4A                ORL     A,R2
001106 FE                MOV     R6,A
001107 ED                MOV     A,R5
001108 49                ORL     A,R1
001109 FD                MOV     R5,A
00110A EC                MOV     A,R4
00110B 48                ORL     A,R0
00110C FC                MOV     R4,A
00110D C004              PUSH    AR4
00110F C005              PUSH    AR5
001111 C006              PUSH    AR6
001113 C007              PUSH    AR7
001115 A3                INC     DPTR
001116 E0                MOVX    A,@DPTR
001117 FF                MOV     R7,A
001118 E4                CLR     A
001119 FC                MOV     R4,A
00111A FD                MOV     R5,A
00111B FE                MOV     R6,A
00111C 7818              MOV     R0,#018H
00111E 12031F            LCALL   ?C?LSHL
001121 D003              POP     AR3
001123 D002              POP     AR2
001125 D001              POP     AR1
001127 D000              POP     AR0
001129 EF                MOV     A,R7
00112A 4B                ORL     A,R3
00112B FF                MOV     R7,A
00112C EE                MOV     A,R6
00112D 4A                ORL     A,R2
00112E FE                MOV     R6,A
00112F ED                MOV     A,R5
001130 49                ORL     A,R1
001131 FD                MOV     R5,A
001132 EC                MOV     A,R4
001133 48                ORL     A,R0
001134 FC                MOV     R4,A
001135 904D13            MOV     DPTR,#YC_UtilTimer+039H
001138 120332            LCALL   ?C?LSTXDATA
   14: 	for(i = 0; i < YC_UTIL_TIMER_NUM; i++){
00113B E4                CLR     A
00113C 904E56            MOV     DPTR,#i
00113F F0                MOVX    @DPTR,A
001140         ?C0001?YC_SYS:
001140 904E56            MOV     DPTR,#i
001143 E0                MOVX    A,@DPTR
001144 FF                MOV     R7,A
001145 C3                CLR     C
001146 9408              SUBB    A,#08H
001148 5031              JNC     ?C0004?YC_SYS
   15: 		YC_UtilTimer.callback[i] = 0;
00114A EF                MOV     A,R7
00114B 75F003            MOV     B,#03H
00114E A4                MUL     AB
00114F 24DB              ADD     A,#LOW YC_UtilTimer+01H
001151 F582              MOV     DPL,A
001153 E4                CLR     A
001154 344C              ADDC    A,#HIGH YC_UtilTimer+01H
001156 F583              MOV     DPH,A
001158 E4                CLR     A
001159 F0                MOVX    @DPTR,A
00115A A3                INC     DPTR
00115B F0                MOVX    @DPTR,A
00115C A3                INC     DPTR
00115D F0                MOVX    @DPTR,A
   16: 		YC_UtilTimer.timer_end[i] = 0;
00115E EF                MOV     A,R7
00115F 25E0              ADD     A,ACC
001161 25E0              ADD     A,ACC
001163 24F3              ADD     A,#LOW YC_UtilTimer+019H
001165 F582              MOV     DPL,A
001167 E4                CLR     A
001168 344C              ADDC    A,#HIGH YC_UtilTimer+019H
00116A F583              MOV     DPH,A
00116C 12033E            LCALL   ?C?LSTKXDATA
00116F 00                DB      00H
001170 00                DB      00H
001171 00                DB      00H
001172 00                DB      00H
   17: 	}
001173 904E56            MOV     DPTR,#i
001176 E0                MOVX    A,@DPTR
001177 04                INC     A
001178 F0                MOVX    @DPTR,A
001179 80C5              SJMP    ?C0001?YC_SYS
   18: 	return;
   19: }
00117B         ?C0004?YC_SYS:
00117B 22                RET     
----- FUNCTION YC_UtilTimerInit (END) -------


----- FUNCTION _YC_UtilTimerStartMs (BEGIN) -----
 FILE: 'YC_Sys.c'
   44: bool YC_UtilTimerStartMs(u16_t time_in_ms, p_TimerCallback callback, pxbyte timer_id)
   45: {
00117C 904DD4            MOV     DPTR,#time_in_ms
00117F EE                MOV     A,R6
001180 F0                MOVX    @DPTR,A
001181 A3                INC     DPTR
001182 EF                MOV     A,R7
001183 F0                MOVX    @DPTR,A
;---- Variable 'callback' assigned to Register 'R1/R2/R3' ----
   46: 	u8_t i = 0;
   47: 	
001184 E4                CLR     A
001185 904DDB            MOV     DPTR,#i
001188 F0                MOVX    @DPTR,A
   48: 	//do we have enough timers?
   49: 	if(YC_UtilTimer.timer_flages == 0xff){
001189 904CDA            MOV     DPTR,#YC_UtilTimer
00118C E0                MOVX    A,@DPTR
00118D B4FF02            CJNE    A,#0FFH,?C0007?YC_SYS
   50: 		return false;
001190 C3                CLR     C
001191 22                RET     
   51: 	}
001192         ?C0007?YC_SYS:
   52: 	while(i < YC_UTIL_TIMER_NUM){
001192 904DDB            MOV     DPTR,#i
001195 E0                MOVX    A,@DPTR
001196 FF                MOV     R7,A
001197 C3                CLR     C
001198 9408              SUBB    A,#08H
00119A 502D              JNC     ?C0008?YC_SYS
   53: 		if(!((YC_UtilTimer.timer_flages >> i) & 1)){
00119C 904CDA            MOV     DPTR,#YC_UtilTimer
00119F E0                MOVX    A,@DPTR
0011A0 FE                MOV     R6,A
0011A1 A807              MOV     R0,AR7
0011A3 08                INC     R0
0011A4 8002              SJMP    ?C0022?YC_SYS
0011A6         ?C0021?YC_SYS:
0011A6 C3                CLR     C
0011A7 13                RRC     A
0011A8         ?C0022?YC_SYS:
0011A8 D8FC              DJNZ    R0,?C0021?YC_SYS
0011AA 20E014            JB      ACC.0,?C0009?YC_SYS
   54: 			if(timer_id)
0011AD 904DD9            MOV     DPTR,#timer_id
0011B0 E0                MOVX    A,@DPTR
0011B1 FE                MOV     R6,A
0011B2 A3                INC     DPTR
0011B3 E0                MOVX    A,@DPTR
0011B4 FF                MOV     R7,A
0011B5 4E                ORL     A,R6
0011B6 6011              JZ      ?C0008?YC_SYS
   55: 				*timer_id = i;
0011B8 A3                INC     DPTR
0011B9 E0                MOVX    A,@DPTR
0011BA 8F82              MOV     DPL,R7
0011BC 8E83              MOV     DPH,R6
0011BE F0                MOVX    @DPTR,A
   56: 			break;
0011BF 8008              SJMP    ?C0008?YC_SYS
   57: 		}
0011C1         ?C0009?YC_SYS:
   58: 		++i;
0011C1 904DDB            MOV     DPTR,#i
0011C4 E0                MOVX    A,@DPTR
0011C5 04                INC     A
0011C6 F0                MOVX    @DPTR,A
   59: 	}
0011C7 80C9              SJMP    ?C0007?YC_SYS
0011C9         ?C0008?YC_SYS:
   60: 	YC_UtilTimer.timer_flages |= 1 << i;
0011C9 904CDA            MOV     DPTR,#YC_UtilTimer
0011CC E0                MOVX    A,@DPTR
0011CD FF                MOV     R7,A
0011CE 904DDB            MOV     DPTR,#i
0011D1 E0                MOVX    A,@DPTR
0011D2 FE                MOV     R6,A
0011D3 7401              MOV     A,#01H
0011D5 A806              MOV     R0,AR6
0011D7 08                INC     R0
0011D8 8002              SJMP    ?C0024?YC_SYS
0011DA         ?C0023?YC_SYS:
0011DA C3                CLR     C
0011DB 33                RLC     A
0011DC         ?C0024?YC_SYS:
0011DC D8FC              DJNZ    R0,?C0023?YC_SYS
0011DE 4F                ORL     A,R7
0011DF 904CDA            MOV     DPTR,#YC_UtilTimer
0011E2 F0                MOVX    @DPTR,A
   61: 	YC_UtilTimer.callback[i] = callback;
0011E3 EE                MOV     A,R6
0011E4 75F003            MOV     B,#03H
0011E7 A4                MUL     AB
0011E8 24DB              ADD     A,#LOW YC_UtilTimer+01H
0011EA F582              MOV     DPL,A
0011EC E4                CLR     A
0011ED 344C              ADDC    A,#HIGH YC_UtilTimer+01H
0011EF F583              MOV     DPH,A
0011F1 EB                MOV     A,R3
0011F2 F0                MOVX    @DPTR,A
0011F3 A3                INC     DPTR
0011F4 EA                MOV     A,R2
0011F5 F0                MOVX    @DPTR,A
0011F6 A3                INC     DPTR
0011F7 E9                MOV     A,R1
0011F8 F0                MOVX    @DPTR,A
   62: 	YC_UtilTimer.timer_end[i] = YC_CLK_N + ((u32_t)time_in_ms << 4)/5;
0011F9 908101            MOV     DPTR,#08101H
0011FC E0                MOVX    A,@DPTR
0011FD FF                MOV     R7,A
0011FE E4                CLR     A
0011FF FC                MOV     R4,A
001200 FD                MOV     R5,A
001201 FE                MOV     R6,A
001202 7808              MOV     R0,#08H
001204 12031F            LCALL   ?C?LSHL
001207 A804              MOV     R0,AR4
001209 A905              MOV     R1,AR5
00120B AA06              MOV     R2,AR6
00120D AB07              MOV     R3,AR7
00120F 908100            MOV     DPTR,#08100H
001212 E0                MOVX    A,@DPTR
001213 FF                MOV     R7,A
001214 E4                CLR     A
001215 EB                MOV     A,R3
001216 4F                ORL     A,R7
001217 FF                MOV     R7,A
001218 EA                MOV     A,R2
001219 FE                MOV     R6,A
00121A E9                MOV     A,R1
00121B FD                MOV     R5,A
00121C E8                MOV     A,R0
00121D FC                MOV     R4,A
00121E C004              PUSH    AR4
001220 C005              PUSH    AR5
001222 C006              PUSH    AR6
001224 C007              PUSH    AR7
001226 908102            MOV     DPTR,#08102H
001229 E0                MOVX    A,@DPTR
00122A FF                MOV     R7,A
00122B E4                CLR     A
00122C FC                MOV     R4,A
00122D FD                MOV     R5,A
00122E FE                MOV     R6,A
00122F 7810              MOV     R0,#010H
001231 12031F            LCALL   ?C?LSHL
001234 D003              POP     AR3
001236 D002              POP     AR2
001238 D001              POP     AR1
00123A D000              POP     AR0
00123C EF                MOV     A,R7
00123D 4B                ORL     A,R3
00123E FF                MOV     R7,A
00123F EE                MOV     A,R6
001240 4A                ORL     A,R2
001241 FE                MOV     R6,A
001242 ED                MOV     A,R5
001243 49                ORL     A,R1
001244 FD                MOV     R5,A
001245 EC                MOV     A,R4
001246 48                ORL     A,R0
001247 FC                MOV     R4,A
001248 C004              PUSH    AR4
00124A C005              PUSH    AR5
00124C C006              PUSH    AR6
00124E C007              PUSH    AR7
001250 A3                INC     DPTR
001251 E0                MOVX    A,@DPTR
001252 FF                MOV     R7,A
001253 E4                CLR     A
001254 FC                MOV     R4,A
001255 FD                MOV     R5,A
001256 FE                MOV     R6,A
001257 7818              MOV     R0,#018H
001259 12031F            LCALL   ?C?LSHL
00125C D003              POP     AR3
00125E D002              POP     AR2
001260 D001              POP     AR1
001262 D000              POP     AR0
001264 EF                MOV     A,R7
001265 4B                ORL     A,R3
001266 FF                MOV     R7,A
001267 EE                MOV     A,R6
001268 4A                ORL     A,R2
001269 FE                MOV     R6,A
00126A ED                MOV     A,R5
00126B 49                ORL     A,R1
00126C FD                MOV     R5,A
00126D EC                MOV     A,R4
00126E 48                ORL     A,R0
00126F FC                MOV     R4,A
001270 C004              PUSH    AR4
001272 C005              PUSH    AR5
001274 C006              PUSH    AR6
001276 C007              PUSH    AR7
001278 904DD4            MOV     DPTR,#time_in_ms
00127B E0                MOVX    A,@DPTR
00127C FE                MOV     R6,A
00127D A3                INC     DPTR
00127E E0                MOVX    A,@DPTR
00127F FF                MOV     R7,A
001280 E4                CLR     A
001281 FC                MOV     R4,A
001282 FD                MOV     R5,A
001283 7804              MOV     R0,#04H
001285 12031F            LCALL   ?C?LSHL
001288 E4                CLR     A
001289 7B05              MOV     R3,#05H
00128B FA                MOV     R2,A
00128C F9                MOV     R1,A
00128D F8                MOV     R0,A
00128E 120269            LCALL   ?C?ULDIV
001291 D003              POP     AR3
001293 D002              POP     AR2
001295 D001              POP     AR1
001297 D000              POP     AR0
001299 EF                MOV     A,R7
00129A 2B                ADD     A,R3
00129B FF                MOV     R7,A
00129C EE                MOV     A,R6
00129D 3A                ADDC    A,R2
00129E FE                MOV     R6,A
00129F ED                MOV     A,R5
0012A0 39                ADDC    A,R1
0012A1 FD                MOV     R5,A
0012A2 EC                MOV     A,R4
0012A3 38                ADDC    A,R0
0012A4 FC                MOV     R4,A
0012A5 904DDB            MOV     DPTR,#i
0012A8 E0                MOVX    A,@DPTR
0012A9 25E0              ADD     A,ACC
0012AB 25E0              ADD     A,ACC
0012AD 24F3              ADD     A,#LOW YC_UtilTimer+019H
0012AF F582              MOV     DPL,A
0012B1 E4                CLR     A
0012B2 344C              ADDC    A,#HIGH YC_UtilTimer+019H
0012B4 F583              MOV     DPH,A
0012B6 120332            LCALL   ?C?LSTXDATA
   63: 	return true;
0012B9 D3                SETB    C
   64: }
0012BA 22                RET     
----- FUNCTION _YC_UtilTimerStartMs (END) -------


----- FUNCTION CS_Scale_PowerOn (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  178: void CS_Scale_PowerOn(void)
  179: {
  180: 	
  181: 	if(R_Scale_state == CS_Scale_state_init)
0012BB 904CC4            MOV     DPTR,#R_Scale_state
0012BE E0                MOVX    A,@DPTR
0012BF 702E              JNZ     ?C0012?CS_SCALE_PROC
  182: 		{
  183: 		B_Weight_AdOk = false;
0012C1 904CD6            MOV     DPTR,#B_Weight_AdOk
0012C4 F0                MOVX    @DPTR,A
  184: 		R_Weight_Com_Coo.pre =CS_CommTo1186_Null;	
0012C5 904D55            MOV     DPTR,#R_Weight_Com_Coo+01H
0012C8 F0                MOVX    @DPTR,A
  185: 		R_Weight_Com_Coo.now = CS_CommTo1186_Null;	
0012C9 904D54            MOV     DPTR,#R_Weight_Com_Coo
0012CC F0                MOVX    @DPTR,A
  186: 		//R_Scale_state =	CS_Scale_state_weighting;
  187: 		R_Selet_Unit = CS_ScaleDisplay_L_gongjin;
0012CD 904CC5            MOV     DPTR,#R_Selet_Unit
0012D0 7402              MOV     A,#02H
0012D2 F0                MOVX    @DPTR,A
  188: 
  189: 		R_Debug_temp = 0;
0012D3 E4                CLR     A
0012D4 A3                INC     DPTR
0012D5 F0                MOVX    @DPTR,A
0012D6 A3                INC     DPTR
0012D7 F0                MOVX    @DPTR,A
  190: 		B_Debug_Test =false;
0012D8 C201              CLR     B_Debug_Test
  191: 		
  192: 		CS_Scale_CaliProc(CaliProcSetCali);		
0012DA 7F01              MOV     R7,#01H
0012DC 120A38            LCALL   _CS_Scale_CaliProc
  193: 		CS_Scale_ZeroProc(ZeroProcReset,0);	
0012DF E4                CLR     A
0012E0 FD                MOV     R5,A
0012E1 FC                MOV     R4,A
0012E2 7F04              MOV     R7,#04H
0012E4 51F0              ACALL   _CS_Scale_ZeroProc
  194: 		
  195: 		CS_Scale_TimeOutProc(CS_Reset_AllTime);
0012E6 7F06              MOV     R7,#06H
0012E8 D185              ACALL   _CS_Scale_TimeOutProc
  196: 		CS_Scale_PowerOnProc(1);
0012EA D200              SETB    ?CS_Scale_PowerOnProc?BIT
0012EC 121A72            LCALL   CS_Scale_PowerOnProc
  197: 		}
  198: }
0012EF         ?C0012?CS_SCALE_PROC:
0012EF 22                RET     
----- FUNCTION CS_Scale_PowerOn (END) -------


----- FUNCTION _CS_Scale_ZeroProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  403: u16_t  CS_Scale_ZeroProc(u8_t option,u16_t setdata)
  404: {
;---- Variable 'setdata' assigned to Register 'R4/R5' ----
0012F0 904DEC            MOV     DPTR,#option
0012F3 EF                MOV     A,R7
0012F4 F0                MOVX    @DPTR,A
  405: 	static	u8_t	   xdata R_Weight_GetZeroTimeOut = 0;	
  406: 	static	u16_t  xdata R_AD_PowerOnZero;	//上电零点AD值
  407: 	static	u16_t  xdata R_AD_Zero;			//零点AD值
  408: 	static	u8_t    xdata B_Weight_Zero;		//处于零点标志
  409: 	static	u8_t    xdata B_Weight_ZeroOk;	//上电获取完零点标志
  410: 	static	u8_t	   xdata B_LockDownCheck;	//下秤后第一次稳定追零
  411: 	static	u8_t	   xdata B_WeightZeroErr;		//零点错误标志
  412: 	
  413: 	u16_t	R_AdFilTimes;
  414: 	u16_t	R_AD_BUF;
  415: 	u16_t	weight_temp;
  416: 	u16_t	R_Open_Weight;
  417: 	u8_t		B_Weight_Pos;
  418: 
  419: 	
  420: 	
  421: 	if(option==ZeroProcReset)
0012F5 BF0408            CJNE    R7,#04H,?C0043?CS_SCALE_PROC
  422: 		{
  423: 		B_Weight_ZeroOk = 0;
0012F8 E4                CLR     A
0012F9 904C9B            MOV     DPTR,#B_Weight_ZeroOk
0012FC F0                MOVX    @DPTR,A
  424: 		return 0;		
0012FD FE                MOV     R6,A
0012FE FF                MOV     R7,A
0012FF 22                RET     
  425: 		}
001300         ?C0043?CS_SCALE_PROC:
  426: 	if(option==SetPowerOnZero)
001300 904DEC            MOV     DPTR,#option
001303 E0                MOVX    A,@DPTR
001304 FB                MOV     R3,A
001305 B4050C            CJNE    A,#05H,?C0045?CS_SCALE_PROC
  427: 		{
  428: 		R_AD_PowerOnZero = setdata;
001308 904C96            MOV     DPTR,#R_AD_PowerOnZero
00130B EC                MOV     A,R4
00130C F0                MOVX    @DPTR,A
00130D A3                INC     DPTR
00130E ED                MOV     A,R5
00130F F0                MOVX    @DPTR,A
  429: 		return 0;		
001310 E4                CLR     A
001311 FE                MOV     R6,A
001312 FF                MOV     R7,A
001313 22                RET     
  430: 		}
001314         ?C0045?CS_SCALE_PROC:
  431: 	if(option==SetRunningZero)
001314 EB                MOV     A,R3
001315 B4060E            CJNE    A,#06H,?C0046?CS_SCALE_PROC
  432: 		{
  433: 		R_AD_Zero = setdata;
001318 AF05              MOV     R7,AR5
00131A 904C98            MOV     DPTR,#R_AD_Zero
00131D EC                MOV     A,R4
00131E F0                MOVX    @DPTR,A
00131F A3                INC     DPTR
001320 EF                MOV     A,R7
001321 F0                MOVX    @DPTR,A
  434: 		return 0;		
001322 E4                CLR     A
001323 FE                MOV     R6,A
001324 FF                MOV     R7,A
001325 22                RET     
  435: 		}
001326         ?C0046?CS_SCALE_PROC:
  436: 	if(option==ClrLockDownCheckFlag)
001326 904DEC            MOV     DPTR,#option
001329 E0                MOVX    A,@DPTR
00132A FD                MOV     R5,A
00132B B40808            CJNE    A,#08H,?C0047?CS_SCALE_PROC
  437: 		{
  438: 		B_LockDownCheck=false;
00132E E4                CLR     A
00132F 904C9C            MOV     DPTR,#B_LockDownCheck
001332 F0                MOVX    @DPTR,A
  439: 		return 0;
001333 FE                MOV     R6,A
001334 FF                MOV     R7,A
001335 22                RET     
  440: 		}
001336         ?C0047?CS_SCALE_PROC:
  441: 	
  442: 	if(option==FindPowerOnZero)
001336 ED                MOV     A,R5
001337 640A              XRL     A,#0AH
001339 7075              JNZ     ?C0048?CS_SCALE_PROC
  443: 	{
  444: 		
  445: 	
  446: 		if(R_Weight_GetZeroTimeOut <60)
00133B 904C95            MOV     DPTR,#R_Weight_GetZeroTimeOut
00133E E0                MOVX    A,@DPTR
00133F C3                CLR     C
001340 943C              SUBB    A,#03CH
001342 5052              JNC     ?C0049?CS_SCALE_PROC
  447: 		{
  448: 		R_Weight_GetZeroTimeOut ++;
001344 E0                MOVX    A,@DPTR
001345 04                INC     A
001346 F0                MOVX    @DPTR,A
  449: 		
  450: 		R_AD_BUF = R_AD_Original;
001347 904CD7            MOV     DPTR,#R_AD_Original
00134A E0                MOVX    A,@DPTR
00134B FE                MOV     R6,A
00134C A3                INC     DPTR
00134D E0                MOVX    A,@DPTR
00134E FF                MOV     R7,A
00134F 904DED            MOV     DPTR,#R_AD_BUF
001352 EE                MOV     A,R6
001353 F0                MOVX    @DPTR,A
001354 FC                MOV     R4,A
001355 A3                INC     DPTR
001356 EF                MOV     A,R7
001357 F0                MOVX    @DPTR,A
001358 FD                MOV     R5,A
  451: 		R_AD_BUF=CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
001359 E4                CLR     A
00135A FF                MOV     R7,A
00135B 12327E            LCALL   _CS_Scale_AdcFilter
00135E 904DED            MOV     DPTR,#R_AD_BUF
001361 EE                MOV     A,R6
001362 F0                MOVX    @DPTR,A
001363 FC                MOV     R4,A
001364 A3                INC     DPTR
001365 EF                MOV     A,R7
001366 F0                MOVX    @DPTR,A
001367 FD                MOV     R5,A
  452: 		R_AdFilTimes = CS_Scale_AdcFilter(ScaleAdcFilterGetFilTimes,R_AD_BUF);
001368 7F02              MOV     R7,#02H
00136A 12327E            LCALL   _CS_Scale_AdcFilter
;---- Variable 'R_AdFilTimes' assigned to Register 'R6/R7' ----
  453: 		
  454: 			if(R_AdFilTimes >=CS_PowerOnAD_Steadytimes)
00136D C3                CLR     C
00136E EF                MOV     A,R7
00136F 940A              SUBB    A,#0AH
001371 EE                MOV     A,R6
001372 9400              SUBB    A,#00H
001374 403A              JC      ?C0048?CS_SCALE_PROC
  455: 				{
  456: 				R_AD_Zero	= R_AD_BUF;
001376 904DED            MOV     DPTR,#R_AD_BUF
001379 E0                MOVX    A,@DPTR
00137A FE                MOV     R6,A
00137B A3                INC     DPTR
00137C E0                MOVX    A,@DPTR
00137D FF                MOV     R7,A
00137E 904C98            MOV     DPTR,#R_AD_Zero
001381 EE                MOV     A,R6
001382 F0                MOVX    @DPTR,A
001383 A3                INC     DPTR
001384 EF                MOV     A,R7
001385 F0                MOVX    @DPTR,A
  457: 				R_AD_PowerOnZero = R_AD_BUF;
001386 904C96            MOV     DPTR,#R_AD_PowerOnZero
001389 EE                MOV     A,R6
00138A F0                MOVX    @DPTR,A
00138B A3                INC     DPTR
00138C EF                MOV     A,R7
00138D F0                MOVX    @DPTR,A
  458: 				B_Weight_ZeroOk = true;
00138E 904C9B            MOV     DPTR,#B_Weight_ZeroOk
001391 7401              MOV     A,#01H
001393 F0                MOVX    @DPTR,A
  459: 				}
  460: 		}
001394 801A              SJMP    ?C0048?CS_SCALE_PROC
001396         ?C0049?CS_SCALE_PROC:
  461: 		else
  462: 		{
  463: 		R_AD_Zero	= 4000;
001396 904C98            MOV     DPTR,#R_AD_Zero
001399 740F              MOV     A,#0FH
00139B F0                MOVX    @DPTR,A
00139C A3                INC     DPTR
00139D 74A0              MOV     A,#0A0H
00139F F0                MOVX    @DPTR,A
  464: 		R_AD_PowerOnZero = 4000;
0013A0 904C96            MOV     DPTR,#R_AD_PowerOnZero
0013A3 740F              MOV     A,#0FH
0013A5 F0                MOVX    @DPTR,A
0013A6 A3                INC     DPTR
0013A7 74A0              MOV     A,#0A0H
0013A9 F0                MOVX    @DPTR,A
  465: 		B_Weight_ZeroOk = true;
0013AA 904C9B            MOV     DPTR,#B_Weight_ZeroOk
0013AD 7401              MOV     A,#01H
0013AF F0                MOVX    @DPTR,A
  466: 		}
  467: 
  468: 	}
0013B0         ?C0048?CS_SCALE_PROC:
  469: 
  470: 	if(option==RunningZero)
0013B0 904DEC            MOV     DPTR,#option
0013B3 E0                MOVX    A,@DPTR
0013B4 6407              XRL     A,#07H
0013B6 6002              JZ      $ + 4H
0013B8 A10E              AJMP    ?C0052?CS_SCALE_PROC
  471: 	{
  472: 	B_Weight_Zero = false;		
0013BA 904C9A            MOV     DPTR,#B_Weight_Zero
0013BD F0                MOVX    @DPTR,A
  473: 	//3kg以下才追零包括负重量
  474: 	B_Weight_Pos = CS_Scale_GetDeltaAD(GetADDirection);		//获取AD方向
0013BE 7F01              MOV     R7,#01H
0013C0 12321D            LCALL   _CS_Scale_GetDeltaAD
0013C3 904DF3            MOV     DPTR,#B_Weight_Pos
0013C6 EF                MOV     A,R7
0013C7 F0                MOVX    @DPTR,A
  475: 	R_Open_Weight = CS_Scale_CaliProc(CaliProcGetOpenWeight);	//获取开机重量值
0013C8 7F07              MOV     R7,#07H
0013CA 120A38            LCALL   _CS_Scale_CaliProc
0013CD 904DF1            MOV     DPTR,#R_Open_Weight
0013D0 EE                MOV     A,R6
0013D1 F0                MOVX    @DPTR,A
0013D2 A3                INC     DPTR
0013D3 EF                MOV     A,R7
0013D4 F0                MOVX    @DPTR,A
  476: 
  477: 
  478: 	
  479: 	
  480: 	if(R_UnitWeight.origin <= 300 ||B_Weight_Pos ==false)	
0013D5 904CC8            MOV     DPTR,#R_UnitWeight
0013D8 E0                MOVX    A,@DPTR
0013D9 FE                MOV     R6,A
0013DA A3                INC     DPTR
0013DB E0                MOVX    A,@DPTR
0013DC FF                MOV     R7,A
0013DD D3                SETB    C
0013DE 942C              SUBB    A,#02CH
0013E0 EE                MOV     A,R6
0013E1 9401              SUBB    A,#01H
0013E3 4006              JC      ?C0054?CS_SCALE_PROC
0013E5 904DF3            MOV     DPTR,#B_Weight_Pos
0013E8 E0                MOVX    A,@DPTR
0013E9 7006              JNZ     ?C0053?CS_SCALE_PROC
0013EB         ?C0054?CS_SCALE_PROC:
  481: 		B_Weight_Zero = true;
0013EB 904C9A            MOV     DPTR,#B_Weight_Zero
0013EE 7401              MOV     A,#01H
0013F0 F0                MOVX    @DPTR,A
0013F1         ?C0053?CS_SCALE_PROC:
  482: 
  483: 		if(R_UnitWeight.origin <= 200 || B_Weight_Pos==false)
0013F1 D3                SETB    C
0013F2 EF                MOV     A,R7
0013F3 94C8              SUBB    A,#0C8H
0013F5 EE                MOV     A,R6
0013F6 9400              SUBB    A,#00H
0013F8 4008              JC      ?C0056?CS_SCALE_PROC
0013FA 904DF3            MOV     DPTR,#B_Weight_Pos
0013FD E0                MOVX    A,@DPTR
0013FE 6002              JZ      $ + 4H
001400 81EA              AJMP    ?C0055?CS_SCALE_PROC
001402         ?C0056?CS_SCALE_PROC:
  484: 			{		
  485: 				if(CS_Scale_SameWeightTimes(GetTimes)>CS_SmallWeight_Steadytimes	)
001402 7F02              MOV     R7,#02H
001404 121941            LCALL   _CS_Scale_SameWeightTimes
001407 EF                MOV     A,R7
001408 D3                SETB    C
001409 9406              SUBB    A,#06H
00140B 5002              JNC     $ + 4H
00140D 81EA              AJMP    ?C0055?CS_SCALE_PROC
  486: 					{
  487: 
  488: 					CS_Scale_SameWeightTimes(ResetTimes);
00140F 7F01              MOV     R7,#01H
001411 121941            LCALL   _CS_Scale_SameWeightTimes
  489: 					
  490: 					//非锁定状态正常追零
  491: 					if(CS_Scale_LockProc(GetIfLock)==false)	
001414 7F02              MOV     R7,#02H
001416 1218D3            LCALL   _CS_Scale_LockProc
001419 EF                MOV     A,R7
00141A 7054              JNZ     ?C0058?CS_SCALE_PROC
  492: 						{
  493: 						if(R_AD_Original >= R_AD_PowerOnZero)
00141C 904C96            MOV     DPTR,#R_AD_PowerOnZero
00141F E0                MOVX    A,@DPTR
001420 FE                MOV     R6,A
001421 A3                INC     DPTR
001422 E0                MOVX    A,@DPTR
001423 FF                MOV     R7,A
001424 904CD7            MOV     DPTR,#R_AD_Original
001427 E0                MOVX    A,@DPTR
001428 FC                MOV     R4,A
001429 A3                INC     DPTR
00142A E0                MOVX    A,@DPTR
00142B FD                MOV     R5,A
00142C C3                CLR     C
00142D 9F                SUBB    A,R7
00142E EC                MOV     A,R4
00142F 9E                SUBB    A,R6
001430 402D              JC      ?C0059?CS_SCALE_PROC
  494: 							{
  495: 							weight_temp = R_AD_Original - R_AD_PowerOnZero;
001432 ED                MOV     A,R5
001433 9F                SUBB    A,R7
001434 FF                MOV     R7,A
001435 EC                MOV     A,R4
001436 9E                SUBB    A,R6
001437 FE                MOV     R6,A
001438 904DEF            MOV     DPTR,#weight_temp
00143B F0                MOVX    @DPTR,A
00143C A3                INC     DPTR
00143D EF                MOV     A,R7
00143E F0                MOVX    @DPTR,A
  496: 							if(weight_temp < R_Open_Weight)
00143F D3                SETB    C
001440 904DF2            MOV     DPTR,#R_Open_Weight+01H
001443 E0                MOVX    A,@DPTR
001444 9F                SUBB    A,R7
001445 904DF1            MOV     DPTR,#R_Open_Weight
001448 E0                MOVX    A,@DPTR
001449 9E                SUBB    A,R6
00144A 5002              JNC     $ + 4H
00144C 81EA              AJMP    ?C0055?CS_SCALE_PROC
  497: 								R_AD_Zero = R_AD_Original;
00144E 904CD7            MOV     DPTR,#R_AD_Original
001451 E0                MOVX    A,@DPTR
001452 FF                MOV     R7,A
001453 A3                INC     DPTR
001454 E0                MOVX    A,@DPTR
001455 904C98            MOV     DPTR,#R_AD_Zero
001458 CF                XCH     A,R7
001459 F0                MOVX    @DPTR,A
00145A A3                INC     DPTR
00145B EF                MOV     A,R7
00145C F0                MOVX    @DPTR,A
  498: 							}
00145D 81EA              AJMP    ?C0055?CS_SCALE_PROC
00145F         ?C0059?CS_SCALE_PROC:
  499: 						else
  500: 							R_AD_Zero = R_AD_Original;					
00145F 904CD7            MOV     DPTR,#R_AD_Original
001462 E0                MOVX    A,@DPTR
001463 FF                MOV     R7,A
001464 A3                INC     DPTR
001465 E0                MOVX    A,@DPTR
001466 904C98            MOV     DPTR,#R_AD_Zero
001469 CF                XCH     A,R7
00146A F0                MOVX    @DPTR,A
00146B A3                INC     DPTR
00146C EF                MOV     A,R7
00146D F0                MOVX    @DPTR,A
  501: 						}
00146E 807A              SJMP    ?C0055?CS_SCALE_PROC
001470         ?C0058?CS_SCALE_PROC:
  502: 					//锁定状态下秤第一次追零做防提起处理
  503: 					else			
  504: 						{
  505: 		
  506: 						//R_Debug_temp=555;
  507: 						//CS_ScaleDisplay_Debug();
  508: 						//while(1);
  509: 						
  510: 						if(B_LockDownCheck==false)
001470 904C9C            MOV     DPTR,#B_LockDownCheck
001473 E0                MOVX    A,@DPTR
001474 7074              JNZ     ?C0055?CS_SCALE_PROC
  511: 							{
  512: 							if(R_AD_Original>R_AD_Zero)
001476 904C98            MOV     DPTR,#R_AD_Zero
001479 E0                MOVX    A,@DPTR
00147A FE                MOV     R6,A
00147B A3                INC     DPTR
00147C E0                MOVX    A,@DPTR
00147D FF                MOV     R7,A
00147E 904CD7            MOV     DPTR,#R_AD_Original
001481 E0                MOVX    A,@DPTR
001482 FC                MOV     R4,A
001483 A3                INC     DPTR
001484 E0                MOVX    A,@DPTR
001485 FD                MOV     R5,A
001486 D3                SETB    C
001487 9F                SUBB    A,R7
001488 EC                MOV     A,R4
001489 9E                SUBB    A,R6
00148A 400E              JC      ?C0064?CS_SCALE_PROC
  513: 								weight_temp = R_AD_Original - R_AD_Zero;
00148C ED                MOV     A,R5
00148D 9F                SUBB    A,R7
00148E FF                MOV     R7,A
00148F EC                MOV     A,R4
001490 9E                SUBB    A,R6
001491 904DEF            MOV     DPTR,#weight_temp
001494 F0                MOVX    @DPTR,A
001495 A3                INC     DPTR
001496 EF                MOV     A,R7
001497 F0                MOVX    @DPTR,A
001498 801B              SJMP    ?C0065?CS_SCALE_PROC
00149A         ?C0064?CS_SCALE_PROC:
  514: 							else
  515: 								weight_temp = R_AD_Zero - R_AD_Original;
00149A 904CD7            MOV     DPTR,#R_AD_Original
00149D E0                MOVX    A,@DPTR
00149E FE                MOV     R6,A
00149F A3                INC     DPTR
0014A0 E0                MOVX    A,@DPTR
0014A1 FF                MOV     R7,A
0014A2 C3                CLR     C
0014A3 904C99            MOV     DPTR,#R_AD_Zero+01H
0014A6 E0                MOVX    A,@DPTR
0014A7 9F                SUBB    A,R7
0014A8 FF                MOV     R7,A
0014A9 904C98            MOV     DPTR,#R_AD_Zero
0014AC E0                MOVX    A,@DPTR
0014AD 9E                SUBB    A,R6
0014AE 904DEF            MOV     DPTR,#weight_temp
0014B1 F0                MOVX    @DPTR,A
0014B2 A3                INC     DPTR
0014B3 EF                MOV     A,R7
0014B4 F0                MOVX    @DPTR,A
0014B5         ?C0065?CS_SCALE_PROC:
  516: 
  517: 
  518: 							
  519: 							//跟锁定前的零点做比较不等于一个秤体重量的处理
  520: 							//if(weight_temp<ScaleWeightMin&&weight_temp>ScaleWeightMax)
  521: 								//{
  522: 								R_AD_Zero = R_AD_Original;	//更新零点
0014B5 904CD7            MOV     DPTR,#R_AD_Original
0014B8 E0                MOVX    A,@DPTR
0014B9 FF                MOV     R7,A
0014BA A3                INC     DPTR
0014BB E0                MOVX    A,@DPTR
0014BC 904C98            MOV     DPTR,#R_AD_Zero
0014BF CF                XCH     A,R7
0014C0 F0                MOVX    @DPTR,A
0014C1 A3                INC     DPTR
0014C2 EF                MOV     A,R7
0014C3 F0                MOVX    @DPTR,A
  523: 								if(weight_temp>SameZeroRange)
0014C4 D3                SETB    C
0014C5 904DF0            MOV     DPTR,#weight_temp+01H
0014C8 E0                MOVX    A,@DPTR
0014C9 940A              SUBB    A,#0AH
0014CB 904DEF            MOV     DPTR,#weight_temp
0014CE E0                MOVX    A,@DPTR
0014CF 9400              SUBB    A,#00H
0014D1 4011              JC      ?C0066?CS_SCALE_PROC
  524: 									{
  525: 									//跟称重前不是一个零点报零点错并解锁
  526: 									B_WeightZeroErr=true;
0014D3 904C9D            MOV     DPTR,#B_WeightZeroErr
0014D6 7401              MOV     A,#01H
0014D8 F0                MOVX    @DPTR,A
  527: 									R_Display_Err=CS_ScaleDisplay_L_err;
0014D9 904CC1            MOV     DPTR,#R_Display_Err
0014DC 7404              MOV     A,#04H
0014DE F0                MOVX    @DPTR,A
  528: 									CS_SoftTimer(ResetSoftTimer);
0014DF 7F02              MOV     R7,#02H
0014E1 120F15            LCALL   _CS_SoftTimer
  529: 					
  530: 									}
0014E4         ?C0066?CS_SCALE_PROC:
  531: 								B_LockDownCheck=true;
0014E4 904C9C            MOV     DPTR,#B_LockDownCheck
0014E7 7401              MOV     A,#01H
0014E9 F0                MOVX    @DPTR,A
  532: 								}
  533: 
  534: 							}				
  535: 							
  536: 					}
  537: 			}
0014EA         ?C0055?CS_SCALE_PROC:
  538: 
  539: 	if(B_WeightZeroErr==true)
0014EA 904C9D            MOV     DPTR,#B_WeightZeroErr
0014ED E0                MOVX    A,@DPTR
0014EE B40119            CJNE    A,#01H,?C0067?CS_SCALE_PROC
  540: 		{
  541: 		if(CS_SoftTimer(GetSoftTimerTime)>200)
0014F1 7F01              MOV     R7,#01H
0014F3 120F15            LCALL   _CS_SoftTimer
0014F6 EF                MOV     A,R7
0014F7 D3                SETB    C
0014F8 94C8              SUBB    A,#0C8H
0014FA 400E              JC      ?C0067?CS_SCALE_PROC
  542: 			{
  543: 			R_Display_Err=0;
0014FC E4                CLR     A
0014FD 904CC1            MOV     DPTR,#R_Display_Err
001500 F0                MOVX    @DPTR,A
  544: 			B_WeightZeroErr=false;
001501 904C9D            MOV     DPTR,#B_WeightZeroErr
001504 F0                MOVX    @DPTR,A
  545: 			CS_Scale_LockProc(LockProcUnLock);
001505 7F03              MOV     R7,#03H
001507 1218D3            LCALL   _CS_Scale_LockProc
  546: 			}					
  547: 		}
00150A         ?C0067?CS_SCALE_PROC:
  548: 	return	0;		
00150A E4                CLR     A
00150B FE                MOV     R6,A
00150C FF                MOV     R7,A
00150D 22                RET     
  549: 	}
00150E         ?C0052?CS_SCALE_PROC:
  550: 
  551: 	if(option==GetPowerOnZero)
00150E 904DEC            MOV     DPTR,#option
001511 E0                MOVX    A,@DPTR
001512 FD                MOV     R5,A
001513 7009              JNZ     ?C0069?CS_SCALE_PROC
  552: 		return	R_AD_PowerOnZero;
001515 904C96            MOV     DPTR,#R_AD_PowerOnZero
001518 E0                MOVX    A,@DPTR
001519 FE                MOV     R6,A
00151A A3                INC     DPTR
00151B E0                MOVX    A,@DPTR
00151C FF                MOV     R7,A
00151D 22                RET     
00151E         ?C0069?CS_SCALE_PROC:
  553: 	if(option==GetPowerOnZeroState)
00151E ED                MOV     A,R5
00151F B40208            CJNE    A,#02H,?C0070?CS_SCALE_PROC
  554: 		return	B_Weight_ZeroOk;
001522 904C9B            MOV     DPTR,#B_Weight_ZeroOk
001525 E0                MOVX    A,@DPTR
001526 FF                MOV     R7,A
001527 7E00              MOV     R6,#00H
001529 22                RET     
00152A         ?C0070?CS_SCALE_PROC:
  555: 	if(option==GetRunningZero)
00152A 904DEC            MOV     DPTR,#option
00152D E0                MOVX    A,@DPTR
00152E FD                MOV     R5,A
00152F B40109            CJNE    A,#01H,?C0071?CS_SCALE_PROC
  556: 		return	R_AD_Zero;
001532 904C98            MOV     DPTR,#R_AD_Zero
001535 E0                MOVX    A,@DPTR
001536 FE                MOV     R6,A
001537 A3                INC     DPTR
001538 E0                MOVX    A,@DPTR
001539 FF                MOV     R7,A
00153A 22                RET     
00153B         ?C0071?CS_SCALE_PROC:
  557: 	if(option==GetZeroState)
00153B ED                MOV     A,R5
00153C B40308            CJNE    A,#03H,?C0072?CS_SCALE_PROC
  558: 		return	B_Weight_Zero;
00153F 904C9A            MOV     DPTR,#B_Weight_Zero
001542 E0                MOVX    A,@DPTR
001543 FF                MOV     R7,A
001544 7E00              MOV     R6,#00H
001546 22                RET     
001547         ?C0072?CS_SCALE_PROC:
  559: 	if(option==GetIfZeroErr)
001547 904DEC            MOV     DPTR,#option
00154A E0                MOVX    A,@DPTR
00154B B40908            CJNE    A,#09H,?C0073?CS_SCALE_PROC
  560: 		return   B_WeightZeroErr;
00154E 904C9D            MOV     DPTR,#B_WeightZeroErr
001551 E0                MOVX    A,@DPTR
001552 FF                MOV     R7,A
001553 7E00              MOV     R6,#00H
001555 22                RET     
001556         ?C0073?CS_SCALE_PROC:
  561: 	
  562: 	return 0;	
001556 E4                CLR     A
001557 FE                MOV     R6,A
001558 FF                MOV     R7,A
  563: }
001559 22                RET     
----- FUNCTION _CS_Scale_ZeroProc (END) -------


----- FUNCTION CS_ScaleDisplay (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
   14: void CS_ScaleDisplay()
   15: {
   16: 	u32_t weight_temp;
   17: 	
   18: 	if(R_Display_Err==CS_ScaleDisplay_L_err)	//提示信息显示
00155A 904CC1            MOV     DPTR,#R_Display_Err
00155D E0                MOVX    A,@DPTR
00155E 6404              XRL     A,#04H
001560 7035              JNZ     ?C0001?CS_SCALEDISPLAY
   19: 		{
   20: 		if(CS_Scale_JudgeOverLoad(GetIfOverLoad)== true)	
001562 7F01              MOV     R7,#01H
001564 12377F            LCALL   _CS_Scale_JudgeOverLoad
001567 BF0108            CJNE    R7,#01H,?C0002?CS_SCALEDISPLAY
   21: 			CS_ScaleDisplay_FreshBuf(DisplayOverLoad,0);			
00156A E4                CLR     A
00156B FD                MOV     R5,A
00156C FC                MOV     R4,A
00156D 7F85              MOV     R7,#085H
00156F 1239F0            LCALL   _CS_ScaleDisplay_FreshBuf
001572         ?C0002?CS_SCALEDISPLAY:
   22: 		if(CS_Scale_JudgeLowBat(GetIfLowBat)== true)
001572 7F01              MOV     R7,#01H
001574 F1A6              ACALL   _CS_Scale_JudgeLowBat
001576 BF0108            CJNE    R7,#01H,?C0003?CS_SCALEDISPLAY
   23: 			CS_ScaleDisplay_FreshBuf(DisplayLowBat,0);	
001579 E4                CLR     A
00157A FD                MOV     R5,A
00157B FC                MOV     R4,A
00157C 7F86              MOV     R7,#086H
00157E 1239F0            LCALL   _CS_ScaleDisplay_FreshBuf
001581         ?C0003?CS_SCALEDISPLAY:
   24: 		if(CS_Scale_ZeroProc(GetIfZeroErr,0)==true)
001581 E4                CLR     A
001582 FD                MOV     R5,A
001583 FC                MOV     R4,A
001584 7F09              MOV     R7,#09H
001586 51F0              ACALL   _CS_Scale_ZeroProc
001588 EF                MOV     A,R7
001589 6401              XRL     A,#01H
00158B 4E                ORL     A,R6
00158C 6002              JZ      $ + 4H
00158E C11F              AJMP    ?C0005?CS_SCALEDISPLAY
   25: 			CS_ScaleDisplay_FreshBuf(DisplayZeroErr,0);
001590 FD                MOV     R5,A
001591 FC                MOV     R4,A
001592 7F87              MOV     R7,#087H
001594 0239F0            LJMP    _CS_ScaleDisplay_FreshBuf
   26: 		return;
   27: 		}
001597         ?C0001?CS_SCALEDISPLAY:
   28: 	if(R_Selet_Unit == CS_ScaleDisplay_L_kg)
001597 904CC5            MOV     DPTR,#R_Selet_Unit
00159A E0                MOVX    A,@DPTR
00159B 7015              JNZ     ?C0006?CS_SCALEDISPLAY
   29: 		{
   30: 		R_UnitWeight.kg = R_UnitWeight.origin;
00159D 904CC8            MOV     DPTR,#R_UnitWeight
0015A0 E0                MOVX    A,@DPTR
0015A1 FE                MOV     R6,A
0015A2 A3                INC     DPTR
0015A3 E0                MOVX    A,@DPTR
0015A4 FF                MOV     R7,A
0015A5 A3                INC     DPTR
0015A6 EE                MOV     A,R6
0015A7 F0                MOVX    @DPTR,A
0015A8 FC                MOV     R4,A
0015A9 A3                INC     DPTR
0015AA EF                MOV     A,R7
0015AB F0                MOVX    @DPTR,A
0015AC FD                MOV     R5,A
   31: 		CS_ScaleDisplay_FreshBuf(Displaykg,R_UnitWeight.kg);
0015AD 7F41              MOV     R7,#041H
0015AF 1239F0            LCALL   _CS_ScaleDisplay_FreshBuf
   32: 		}
0015B2         ?C0006?CS_SCALEDISPLAY:
   33: 	if(R_Selet_Unit == CS_ScaleDisplay_L_gongjin)
0015B2 904CC5            MOV     DPTR,#R_Selet_Unit
0015B5 E0                MOVX    A,@DPTR
0015B6 B40215            CJNE    A,#02H,?C0007?CS_SCALEDISPLAY
   34: 		{
   35: 		R_UnitWeight.kg = R_UnitWeight.origin;
0015B9 904CC8            MOV     DPTR,#R_UnitWeight
0015BC E0                MOVX    A,@DPTR
0015BD FE                MOV     R6,A
0015BE A3                INC     DPTR
0015BF E0                MOVX    A,@DPTR
0015C0 FF                MOV     R7,A
0015C1 A3                INC     DPTR
0015C2 EE                MOV     A,R6
0015C3 F0                MOVX    @DPTR,A
0015C4 FC                MOV     R4,A
0015C5 A3                INC     DPTR
0015C6 EF                MOV     A,R7
0015C7 F0                MOVX    @DPTR,A
0015C8 FD                MOV     R5,A
   36: 		CS_ScaleDisplay_FreshBuf(Displaygongjin,R_UnitWeight.kg);
0015C9 7F44              MOV     R7,#044H
0015CB 1239F0            LCALL   _CS_ScaleDisplay_FreshBuf
   37: 		}
0015CE         ?C0007?CS_SCALEDISPLAY:
   38: 	if(R_Selet_Unit == CS_ScaleDisplay_L_jin)
0015CE 904CC5            MOV     DPTR,#R_Selet_Unit
0015D1 E0                MOVX    A,@DPTR
0015D2 B4031B            CJNE    A,#03H,?C0008?CS_SCALEDISPLAY
   39: 		{
   40: 		R_UnitWeight.jin = R_UnitWeight.origin *2;
0015D5 904CC9            MOV     DPTR,#R_UnitWeight+01H
0015D8 E0                MOVX    A,@DPTR
0015D9 25E0              ADD     A,ACC
0015DB FF                MOV     R7,A
0015DC 904CC8            MOV     DPTR,#R_UnitWeight
0015DF E0                MOVX    A,@DPTR
0015E0 33                RLC     A
0015E1 FE                MOV     R6,A
0015E2 904CD0            MOV     DPTR,#R_UnitWeight+08H
0015E5 F0                MOVX    @DPTR,A
0015E6 FC                MOV     R4,A
0015E7 A3                INC     DPTR
0015E8 EF                MOV     A,R7
0015E9 F0                MOVX    @DPTR,A
0015EA FD                MOV     R5,A
   41: 		CS_ScaleDisplay_FreshBuf(Displayjin,R_UnitWeight.jin);
0015EB 7F43              MOV     R7,#043H
0015ED 1239F0            LCALL   _CS_ScaleDisplay_FreshBuf
   42: 		}				
0015F0         ?C0008?CS_SCALEDISPLAY:
   43:        if(R_Selet_Unit == CS_ScaleDisplay_L_lb )
0015F0 904CC5            MOV     DPTR,#R_Selet_Unit
0015F3 E0                MOVX    A,@DPTR
0015F4 B40128            CJNE    A,#01H,?C0005?CS_SCALEDISPLAY
   44:        	{
   45: 		weight_temp   = (u32_t) R_UnitWeight.origin *22046;
0015F7 904CC8            MOV     DPTR,#R_UnitWeight
0015FA E0                MOVX    A,@DPTR
0015FB FE                MOV     R6,A
0015FC A3                INC     DPTR
0015FD E0                MOVX    A,@DPTR
0015FE FF                MOV     R7,A
0015FF 7C56              MOV     R4,#056H
001601 7D1E              MOV     R5,#01EH
001603 1203C8            LCALL   ?C?LIMUL
;---- Variable 'weight_temp' assigned to Register 'R4/R5/R6/R7' ----
   46: 		R_UnitWeight.lb = weight_temp / 10000;
001606 E4                CLR     A
001607 7B10              MOV     R3,#010H
001609 7A27              MOV     R2,#027H
00160B F9                MOV     R1,A
00160C F8                MOV     R0,A
00160D 120269            LCALL   ?C?ULDIV
001610 904CCC            MOV     DPTR,#R_UnitWeight+04H
001613 EE                MOV     A,R6
001614 F0                MOVX    @DPTR,A
001615 FC                MOV     R4,A
001616 A3                INC     DPTR
001617 EF                MOV     A,R7
001618 F0                MOVX    @DPTR,A
001619 FD                MOV     R5,A
   47: 		CS_ScaleDisplay_FreshBuf(Displaylb,R_UnitWeight.lb);
00161A 7F42              MOV     R7,#042H
00161C 1239F0            LCALL   _CS_ScaleDisplay_FreshBuf
   48:        	}		
   49: }
00161F         ?C0005?CS_SCALEDISPLAY:
00161F 22                RET     
----- FUNCTION CS_ScaleDisplay (END) -------


----- FUNCTION CS_Scale_Proc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  126: void CS_Scale_Proc(void)
  127: {
  128: 	if(R_Scale_state == CS_Scale_state_init)
  129: 		{	
001620 904CC4            MOV     DPTR,#R_Scale_state
001623 E0                MOVX    A,@DPTR
001624 7005              JNZ     ?C0001?CS_SCALE_PROC
  130: 		CS_Scale_PowerOnProc(0);
  131: 		}
001626 C200              CLR     ?CS_Scale_PowerOnProc?BIT
001628 121A72            LCALL   CS_Scale_PowerOnProc
  132: 	if(R_Scale_state == CS_Scale_state_standby)
00162B         ?C0001?CS_SCALE_PROC:
  133: 		{
00162B 904CC4            MOV     DPTR,#R_Scale_state
00162E E0                MOVX    A,@DPTR
00162F B40205            CJNE    A,#02H,?C0002?CS_SCALE_PROC
  134: 		CS_Scale_StandbyProc(0);		
  135: 		}
001632 E4                CLR     A
001633 FF                MOV     R7,A
001634 121B5B            LCALL   _CS_Scale_StandbyProc
  136: 		
001637         ?C0002?CS_SCALE_PROC:
  137: 	if(B_Weight_AdOk == true)
001637 904CD6            MOV     DPTR,#B_Weight_AdOk
00163A E0                MOVX    A,@DPTR
00163B 6401              XRL     A,#01H
00163D 7045              JNZ     ?C0010?CS_SCALE_PROC
  138: 		{		
  139: 		B_Weight_AdOk = false;	
00163F F0                MOVX    @DPTR,A
  140: 		
  141: 		if(CS_Scale_ZeroProc(GetPowerOnZeroState,0)== false)	//还没上电取零点先取零点
001640 FD                MOV     R5,A
001641 FC                MOV     R4,A
001642 7F02              MOV     R7,#02H
001644 51F0              ACALL   _CS_Scale_ZeroProc
001646 EF                MOV     A,R7
001647 4E                ORL     A,R6
001648 7006              JNZ     ?C0004?CS_SCALE_PROC
  142: 			{
  143: 			CS_Scale_ZeroProc(FindPowerOnZero,0);
00164A FD                MOV     R5,A
00164B FC                MOV     R4,A
00164C 7F0A              MOV     R7,#0AH
00164E 41F0              AJMP    _CS_Scale_ZeroProc
  144: 			}
001650         ?C0004?CS_SCALE_PROC:
  145: 		else
  146: 			{
  147: 				
  148: 			if(R_Scale_state == CS_Scale_state_weighting)
001650 904CC4            MOV     DPTR,#R_Scale_state
001653 E0                MOVX    A,@DPTR
001654 B40104            CJNE    A,#01H,?C0006?CS_SCALE_PROC
  149: 				{
  150: 				CS_Scale_WeightProc();
001657 F1CD              ACALL   CS_Scale_WeightProc
  151: 				CS_ScaleDisplay();
001659 B15A              ACALL   CS_ScaleDisplay
  152: 				}
00165B         ?C0006?CS_SCALE_PROC:
  153: 			if(R_Scale_state == CS_Scale_state_locking)
00165B 904CC4            MOV     DPTR,#R_Scale_state
00165E E0                MOVX    A,@DPTR
00165F B40412            CJNE    A,#04H,?C0007?CS_SCALE_PROC
  154: 				{					
  155: 				CS_ScaleDisplay_SteadyFlash();
001662 120F73            LCALL   CS_ScaleDisplay_SteadyFlash
  156: 				if(CS_SoftTimer(GetIfTimeOut) == true)	//锁定闪现时间到
001665 7F03              MOV     R7,#03H
001667 120F15            LCALL   _CS_SoftTimer
00166A BF0107            CJNE    R7,#01H,?C0007?CS_SCALE_PROC
  157: 					{
  158: 					CS_Scale_SteadyProc(SteadyProcRun);
00166D 7F01              MOV     R7,#01H
00166F 1219BD            LCALL   _CS_Scale_SteadyProc
  159: 					CS_ScaleDisplay();
001672 B15A              ACALL   CS_ScaleDisplay
  160: 					}
  161: 				}
001674         ?C0007?CS_SCALE_PROC:
  162: 			if(R_Scale_state == CS_Scale_state_caling)
001674 904CC4            MOV     DPTR,#R_Scale_state
001677 E0                MOVX    A,@DPTR
001678 B40305            CJNE    A,#03H,?C0009?CS_SCALE_PROC
  163: 				{
  164: 				CS_Scale_CaliProc(CaliProcRun);
00167B E4                CLR     A
00167C FF                MOV     R7,A
00167D 120A38            LCALL   _CS_Scale_CaliProc
  165: 				}	
001680         ?C0009?CS_SCALE_PROC:
  166: 			
  167: 			CS_Scale_TimeOutProc(0);
001680 E4                CLR     A
001681 FF                MOV     R7,A
001682 D185              ACALL   _CS_Scale_TimeOutProc
  168: 			}
  169: 		}
  170: }	
001684         ?C0010?CS_SCALE_PROC:
001684 22                RET     
----- FUNCTION CS_Scale_Proc (END) -------


----- FUNCTION _CS_Scale_TimeOutProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1474: void CS_Scale_TimeOutProc(u8_t option)
 1475: {
;---- Variable 'option' assigned to Register 'R7' ----
 1476: 	static	CS_TimeOut_T xdata R_TimeOut;
 1477: 	static	u8_t xdata B_TimeBase_1s;		//1s时基
 1478: 
 1479: 	if(option==CS_SetTimeBase1S)
001685 EF                MOV     A,R7
001686 B40707            CJNE    A,#07H,?C0211?CS_SCALE_PROC
 1480: 		{
 1481: 		B_TimeBase_1s = true;
001689 904CBE            MOV     DPTR,#B_TimeBase_1s
00168C 7401              MOV     A,#01H
00168E F0                MOVX    @DPTR,A
00168F 22                RET     
 1482: 		return;
 1483: 		}
001690         ?C0211?CS_SCALE_PROC:
 1484: 	//超时计数器复位
 1485: 	if(option)
001690 EF                MOV     A,R7
001691 6040              JZ      ?C0213?CS_SCALE_PROC
 1486: 	{
 1487: 	if(option==CS_Reset_ZeroTime)
001693 B40105            CJNE    A,#01H,?C0214?CS_SCALE_PROC
 1488: 		R_TimeOut.zero=0;
001696 E4                CLR     A
001697 904CB9            MOV     DPTR,#R_TimeOut
00169A F0                MOVX    @DPTR,A
00169B         ?C0214?CS_SCALE_PROC:
 1489: 	if(option==CS_Reset_LockTime)
00169B EF                MOV     A,R7
00169C B40205            CJNE    A,#02H,?C0215?CS_SCALE_PROC
 1490: 		R_TimeOut.lock=0;
00169F E4                CLR     A
0016A0 904CBA            MOV     DPTR,#R_TimeOut+01H
0016A3 F0                MOVX    @DPTR,A
0016A4         ?C0215?CS_SCALE_PROC:
 1491: 	if(option==CS_Reset_UnstableTime)
0016A4 EF                MOV     A,R7
0016A5 B40305            CJNE    A,#03H,?C0216?CS_SCALE_PROC
 1492: 		R_TimeOut.unstable=0;
0016A8 E4                CLR     A
0016A9 904CBB            MOV     DPTR,#R_TimeOut+02H
0016AC F0                MOVX    @DPTR,A
0016AD         ?C0216?CS_SCALE_PROC:
 1493: 	if(option==CS_Reset_OverLoadTime)
0016AD EF                MOV     A,R7
0016AE B40405            CJNE    A,#04H,?C0217?CS_SCALE_PROC
 1494: 		R_TimeOut.overload=0;
0016B1 E4                CLR     A
0016B2 904CBC            MOV     DPTR,#R_TimeOut+03H
0016B5 F0                MOVX    @DPTR,A
0016B6         ?C0217?CS_SCALE_PROC:
 1495: 	if(option==CS_Reset_LowBatTime)
0016B6 EF                MOV     A,R7
0016B7 B40505            CJNE    A,#05H,?C0218?CS_SCALE_PROC
 1496: 		R_TimeOut.lowbat=0;
0016BA E4                CLR     A
0016BB 904CBD            MOV     DPTR,#R_TimeOut+04H
0016BE F0                MOVX    @DPTR,A
0016BF         ?C0218?CS_SCALE_PROC:
 1497: 	if(option==CS_Reset_AllTime)
0016BF EF                MOV     A,R7
0016C0 6406              XRL     A,#06H
0016C2 6002              JZ      $ + 4H
0016C4 E1A5              AJMP    ?C0212?CS_SCALE_PROC
 1498: 		{
 1499: 		R_TimeOut.zero=0;
0016C6 904CB9            MOV     DPTR,#R_TimeOut
0016C9 F0                MOVX    @DPTR,A
 1500: 		R_TimeOut.lock=0;
0016CA A3                INC     DPTR
0016CB F0                MOVX    @DPTR,A
 1501: 		R_TimeOut.unstable=0;
0016CC A3                INC     DPTR
0016CD F0                MOVX    @DPTR,A
 1502: 		R_TimeOut.overload=0;
0016CE A3                INC     DPTR
0016CF F0                MOVX    @DPTR,A
 1503: 		R_TimeOut.lowbat=0;
0016D0 A3                INC     DPTR
0016D1 F0                MOVX    @DPTR,A
 1504: 		}
0016D2 22                RET     
 1505: 	return;
 1506: 	}
0016D3         ?C0213?CS_SCALE_PROC:
 1507: 		
 1508: 	if(B_TimeBase_1s == true)
0016D3 904CBE            MOV     DPTR,#B_TimeBase_1s
0016D6 E0                MOVX    A,@DPTR
0016D7 6401              XRL     A,#01H
0016D9 6002              JZ      $ + 4H
0016DB E1A5              AJMP    ?C0212?CS_SCALE_PROC
 1509: 	{
 1510: 		B_TimeBase_1s = false;
0016DD F0                MOVX    @DPTR,A
 1511: 
 1512: 		
 1513: 		//低电超时处理
 1514: 		if(CS_Scale_JudgeLowBat(GetIfLowBat) == true)
0016DE 7F01              MOV     R7,#01H
0016E0 F1A6              ACALL   _CS_Scale_JudgeLowBat
0016E2 BF011F            CJNE    R7,#01H,?C0221?CS_SCALE_PROC
 1515: 		{
 1516: 			R_TimeOut.lowbat++;
0016E5 904CBD            MOV     DPTR,#R_TimeOut+04H
0016E8 E0                MOVX    A,@DPTR
0016E9 04                INC     A
0016EA F0                MOVX    @DPTR,A
 1517: 
 1518: 			if(R_TimeOut.lowbat>=CS_Scale_TimeOut_LowBat)
0016EB E0                MOVX    A,@DPTR
0016EC C3                CLR     C
0016ED 9403              SUBB    A,#03H
0016EF 5002              JNC     $ + 4H
0016F1 E1A5              AJMP    ?C0212?CS_SCALE_PROC
 1519: 			{
 1520: 				R_Scale_state = CS_Scale_state_standby;
0016F3 904CC4            MOV     DPTR,#R_Scale_state
0016F6 7402              MOV     A,#02H
0016F8 F0                MOVX    @DPTR,A
 1521: 				CS_Scale_StandbyProc(1);
0016F9 7F01              MOV     R7,#01H
0016FB 121B5B            LCALL   _CS_Scale_StandbyProc
 1522: 				R_TimeOut.lowbat=0;
0016FE E4                CLR     A
0016FF 904CBD            MOV     DPTR,#R_TimeOut+04H
001702 F0                MOVX    @DPTR,A
 1523: 			}
001703 22                RET     
 1524: 		return;			
 1525: 		}
001704         ?C0221?CS_SCALE_PROC:
 1526: 
 1527: 		//超载超时处理
 1528: 		if(CS_Scale_JudgeOverLoad(GetIfOverLoad)== true)
001704 7F01              MOV     R7,#01H
001706 12377F            LCALL   _CS_Scale_JudgeOverLoad
001709 BF011F            CJNE    R7,#01H,?C0223?CS_SCALE_PROC
 1529: 		{
 1530: 			R_TimeOut.overload++;
00170C 904CBC            MOV     DPTR,#R_TimeOut+03H
00170F E0                MOVX    A,@DPTR
001710 04                INC     A
001711 F0                MOVX    @DPTR,A
 1531: 
 1532: 			if(R_TimeOut.overload>=CS_Scale_TimeOut_OverLoad)
001712 E0                MOVX    A,@DPTR
001713 C3                CLR     C
001714 9403              SUBB    A,#03H
001716 5002              JNC     $ + 4H
001718 E1A5              AJMP    ?C0212?CS_SCALE_PROC
 1533: 			{
 1534: 				R_Scale_state = CS_Scale_state_standby;
00171A 904CC4            MOV     DPTR,#R_Scale_state
00171D 7402              MOV     A,#02H
00171F F0                MOVX    @DPTR,A
 1535: 				CS_Scale_StandbyProc(1);
001720 7F01              MOV     R7,#01H
001722 121B5B            LCALL   _CS_Scale_StandbyProc
 1536: 				R_TimeOut.overload=0;
001725 E4                CLR     A
001726 904CBC            MOV     DPTR,#R_TimeOut+03H
001729 F0                MOVX    @DPTR,A
 1537: 			}
00172A 22                RET     
 1538: 		return;	
 1539: 
 1540: 		}
00172B         ?C0223?CS_SCALE_PROC:
 1541: 		
 1542: 		
 1543: 		//称重模式下的超时处理
 1544: 		if(R_Scale_state == CS_Scale_state_weighting)
00172B 904CC4            MOV     DPTR,#R_Scale_state
00172E E0                MOVX    A,@DPTR
00172F 6401              XRL     A,#01H
001731 704A              JNZ     ?C0225?CS_SCALE_PROC
 1545: 		{
 1546: 		
 1547: 		if(CS_Scale_ZeroProc(GetZeroState,0) == true)
001733 FD                MOV     R5,A
001734 FC                MOV     R4,A
001735 7F03              MOV     R7,#03H
001737 51F0              ACALL   _CS_Scale_ZeroProc
001739 EF                MOV     A,R7
00173A 6401              XRL     A,#01H
00173C 4E                ORL     A,R6
00173D 700C              JNZ     ?C0226?CS_SCALE_PROC
 1548: 			{
 1549: 			R_TimeOut.unstable=0;
00173F 904CBB            MOV     DPTR,#R_TimeOut+02H
001742 F0                MOVX    @DPTR,A
 1550: 			R_TimeOut.zero++;
001743 904CB9            MOV     DPTR,#R_TimeOut
001746 E0                MOVX    A,@DPTR
001747 04                INC     A
001748 F0                MOVX    @DPTR,A
 1551: 			}
001749 800B              SJMP    ?C0227?CS_SCALE_PROC
00174B         ?C0226?CS_SCALE_PROC:
 1552: 		else
 1553: 			{
 1554: 			R_TimeOut.zero=0;
00174B E4                CLR     A
00174C 904CB9            MOV     DPTR,#R_TimeOut
00174F F0                MOVX    @DPTR,A
 1555: 			R_TimeOut.unstable++;
001750 904CBB            MOV     DPTR,#R_TimeOut+02H
001753 E0                MOVX    A,@DPTR
001754 04                INC     A
001755 F0                MOVX    @DPTR,A
 1556: 			}
001756         ?C0227?CS_SCALE_PROC:
 1557: 
 1558: 		if(R_TimeOut.zero >=CS_Scale_TimeOut_Zero||R_TimeOut.unstable>=CS_Scale_TimeOut_Unstable)
001756 904CB9            MOV     DPTR,#R_TimeOut
001759 E0                MOVX    A,@DPTR
00175A C3                CLR     C
00175B 940F              SUBB    A,#0FH
00175D 5009              JNC     ?C0229?CS_SCALE_PROC
00175F 904CBB            MOV     DPTR,#R_TimeOut+02H
001762 E0                MOVX    A,@DPTR
001763 C3                CLR     C
001764 940F              SUBB    A,#0FH
001766 403D              JC      ?C0212?CS_SCALE_PROC
001768         ?C0229?CS_SCALE_PROC:
 1559: 			{
 1560: 				//R_Debug_temp=R_TimeOut.unstable;
 1561: 				//CS_ScaleDisplay_Debug();
 1562: 				//while(1);
 1563: 				
 1564: 				R_Scale_state = CS_Scale_state_standby;
001768 904CC4            MOV     DPTR,#R_Scale_state
00176B 7402              MOV     A,#02H
00176D F0                MOVX    @DPTR,A
 1565: 				CS_Scale_StandbyProc(1);
00176E 7F01              MOV     R7,#01H
001770 121B5B            LCALL   _CS_Scale_StandbyProc
 1566: 				R_TimeOut.zero=0;
001773 E4                CLR     A
001774 904CB9            MOV     DPTR,#R_TimeOut
001777 F0                MOVX    @DPTR,A
 1567: 				R_TimeOut.unstable=0;
001778 904CBB            MOV     DPTR,#R_TimeOut+02H
00177B F0                MOVX    @DPTR,A
 1568: 			}
00177C 22                RET     
 1569: 		return;
 1570: 
 1571: 		}
00177D         ?C0225?CS_SCALE_PROC:
 1572: 		
 1573: 
 1574: 		//锁定模式下的超时处理
 1575: 		if(R_Scale_state == CS_Scale_state_locking)
00177D 904CC4            MOV     DPTR,#R_Scale_state
001780 E0                MOVX    A,@DPTR
001781 B40421            CJNE    A,#04H,?C0212?CS_SCALE_PROC
 1576: 		{
 1577: 			R_TimeOut.unstable=0;
001784 E4                CLR     A
001785 904CBB            MOV     DPTR,#R_TimeOut+02H
001788 F0                MOVX    @DPTR,A
 1578: 			R_TimeOut.lock++;
001789 904CBA            MOV     DPTR,#R_TimeOut+01H
00178C E0                MOVX    A,@DPTR
00178D 04                INC     A
00178E F0                MOVX    @DPTR,A
 1579: 			
 1580: 			if(R_TimeOut.lock>=CS_Scale_TimeOut_Lock)
00178F E0                MOVX    A,@DPTR
001790 C3                CLR     C
001791 940F              SUBB    A,#0FH
001793 4010              JC      ?C0212?CS_SCALE_PROC
 1581: 			{
 1582: 				
 1583: 				R_Scale_state = CS_Scale_state_standby;
001795 904CC4            MOV     DPTR,#R_Scale_state
001798 7402              MOV     A,#02H
00179A F0                MOVX    @DPTR,A
 1584: 				CS_Scale_StandbyProc(1);
00179B 7F01              MOV     R7,#01H
00179D 121B5B            LCALL   _CS_Scale_StandbyProc
 1585: 				R_TimeOut.lock=0;
0017A0 E4                CLR     A
0017A1 904CBA            MOV     DPTR,#R_TimeOut+01H
0017A4 F0                MOVX    @DPTR,A
 1586: 			}
 1587: 		return;
 1588: 		}		
 1589: 		
 1590: 
 1591: 	}
 1592: 
 1593: }
0017A5         ?C0212?CS_SCALE_PROC:
0017A5 22                RET     
----- FUNCTION _CS_Scale_TimeOutProc (END) -------


----- FUNCTION _CS_Scale_JudgeLowBat (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  653: u8_t CS_Scale_JudgeLowBat(u8_t option)
  654: {
;---- Variable 'option' assigned to Register 'R7' ----
  655: 	static	u8_t xdata B_Weight_LowBat;			//低电标志
  656: 	
  657: 	if(R_1186sys_state&CS_Scale_LowBatBit)
0017A6 904CD9            MOV     DPTR,#R_1186sys_state
0017A9 E0                MOVX    A,@DPTR
0017AA 30E10E            JNB     ACC.1,?C0083?CS_SCALE_PROC
  658: 		{
  659: 		B_Weight_LowBat = true;
0017AD 904C9F            MOV     DPTR,#B_Weight_LowBat
0017B0 7401              MOV     A,#01H
0017B2 F0                MOVX    @DPTR,A
  660: 		R_Display_Err=CS_ScaleDisplay_L_err;
0017B3 904CC1            MOV     DPTR,#R_Display_Err
0017B6 7404              MOV     A,#04H
0017B8 F0                MOVX    @DPTR,A
  661: 		}
0017B9 8005              SJMP    ?C0084?CS_SCALE_PROC
0017BB         ?C0083?CS_SCALE_PROC:
  662: 	else
  663: 		B_Weight_LowBat = false;
0017BB E4                CLR     A
0017BC 904C9F            MOV     DPTR,#B_Weight_LowBat
0017BF F0                MOVX    @DPTR,A
0017C0         ?C0084?CS_SCALE_PROC:
  664: 
  665: 	if(option==GetIfLowBat)
0017C0 EF                MOV     A,R7
0017C1 B40106            CJNE    A,#01H,?C0085?CS_SCALE_PROC
  666: 		return B_Weight_LowBat;
0017C4 904C9F            MOV     DPTR,#B_Weight_LowBat
0017C7 E0                MOVX    A,@DPTR
0017C8 FF                MOV     R7,A
0017C9 22                RET     
0017CA         ?C0085?CS_SCALE_PROC:
  667: 	
  668: 		return 0;	
0017CA 7F00              MOV     R7,#00H
  669: }
0017CC 22                RET     
----- FUNCTION _CS_Scale_JudgeLowBat (END) -------


----- FUNCTION CS_Scale_WeightProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  207: void CS_Scale_WeightProc(void)
  208: {
  209: 	u16_t	R_AD_BUF;
  210: 	
  211: 	R_AD_BUF = CS_Scale_GetDeltaAD(GetDeltaAD);
0017CD E4                CLR     A
0017CE FF                MOV     R7,A
0017CF 12321D            LCALL   _CS_Scale_GetDeltaAD
;---- Variable 'R_AD_BUF' assigned to Register 'R6/R7' ----
  212: 	R_AD_BUF = CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
0017D2 AD07              MOV     R5,AR7
0017D4 AC06              MOV     R4,AR6
0017D6 E4                CLR     A
0017D7 FF                MOV     R7,A
0017D8 12327E            LCALL   _CS_Scale_AdcFilter
  213: 	CS_Scale_GetWeight(R_AD_BUF);
0017DB 12362E            LCALL   _CS_Scale_GetWeight
  214: 	CS_Scale_SameWeightTimes(Run);
0017DE E4                CLR     A
0017DF FF                MOV     R7,A
0017E0 121941            LCALL   _CS_Scale_SameWeightTimes
  215: 	CS_Scale_ZeroProc(RunningZero,0);
0017E3 E4                CLR     A
0017E4 FD                MOV     R5,A
0017E5 FC                MOV     R4,A
0017E6 7F07              MOV     R7,#07H
0017E8 51F0              ACALL   _CS_Scale_ZeroProc
  216: 	CS_Scale_LockProc(LockProcRun);
0017EA E4                CLR     A
0017EB FF                MOV     R7,A
0017EC 1218D3            LCALL   _CS_Scale_LockProc
  217: 	CS_Scale_JudgeOverLoad(0);
0017EF E4                CLR     A
0017F0 FF                MOV     R7,A
0017F1 12377F            LCALL   _CS_Scale_JudgeOverLoad
  218: 	//CS_Scale_JudgeLowBat(0);
  219: 	CS_Scale_JudgeSteady(JudgeSteadyRun);
0017F4 E4                CLR     A
0017F5 FF                MOV     R7,A
;----                  JMP     _CS_Scale_JudgeSteady
  220: 	
----- FUNCTION CS_Scale_WeightProc (END) -------


----- FUNCTION _CS_Scale_JudgeSteady (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  740: u8_t CS_Scale_JudgeSteady(u8_t option)
  741: {
;---- Variable 'option' assigned to Register 'R7' ----
  742: 
  743: 	u16_t	R_Weight_Temp;
  744: 	//static	u8_t xdata B_Weight_SmallSteady;		//小重量稳定标志
  745: 	static	u8_t xdata B_Weight_HeavySteady;	//大重量稳定标志
  746: 	
  747: 	if(option==ResetSteady)
0017F6 EF                MOV     A,R7
0017F7 B40107            CJNE    A,#01H,?C0101?CS_SCALE_PROC
  748: 		{
  749: 		B_Weight_HeavySteady = false;
0017FA E4                CLR     A
0017FB 904CA5            MOV     DPTR,#B_Weight_HeavySteady
0017FE F0                MOVX    @DPTR,A
  750: 		return 0;
0017FF FF                MOV     R7,A
001800 22                RET     
  751: 		}	
001801         ?C0101?CS_SCALE_PROC:
  752: 
  753: 	if(option==GetIfHeavySteady)
001801 EF                MOV     A,R7
001802 B40306            CJNE    A,#03H,?C0103?CS_SCALE_PROC
  754: 		return B_Weight_HeavySteady;
001805 904CA5            MOV     DPTR,#B_Weight_HeavySteady
001808 E0                MOVX    A,@DPTR
001809 FF                MOV     R7,A
00180A 22                RET     
00180B         ?C0103?CS_SCALE_PROC:
  755: 	
  756: 	if(CS_Scale_LockProc(GetIfLock)==false)
00180B 7F02              MOV     R7,#02H
00180D 11D3              ACALL   _CS_Scale_LockProc
00180F EF                MOV     A,R7
001810 6002              JZ      $ + 4H
001812 01D0              AJMP    ?C0104?CS_SCALE_PROC
  757: 		{
  758: 	
  759: 		B_Weight_HeavySteady = false;
001814 904CA5            MOV     DPTR,#B_Weight_HeavySteady
001817 F0                MOVX    @DPTR,A
  760: 		if(R_UnitWeight.origin>=CS_Scale_MinLockWeight	)
001818 C3                CLR     C
001819 904CC9            MOV     DPTR,#R_UnitWeight+01H
00181C E0                MOVX    A,@DPTR
00181D 94FA              SUBB    A,#0FAH
00181F 904CC8            MOV     DPTR,#R_UnitWeight
001822 E0                MOVX    A,@DPTR
001823 9400              SUBB    A,#00H
001825 5002              JNC     $ + 4H
001827 01D0              AJMP    ?C0104?CS_SCALE_PROC
  761: 		{
  762: 			if(CS_Scale_SameWeightTimes(GetTimes)>CS_BigWeight_Steadytimes)
001829 7F02              MOV     R7,#02H
00182B 3141              ACALL   _CS_Scale_SameWeightTimes
00182D EF                MOV     A,R7
00182E D3                SETB    C
00182F 9405              SUBB    A,#05H
001831 5002              JNC     $ + 4H
001833 01D0              AJMP    ?C0104?CS_SCALE_PROC
  763: 				{
  764: 				B_Weight_HeavySteady = true;	
001835 904CA5            MOV     DPTR,#B_Weight_HeavySteady
001838 7401              MOV     A,#01H
00183A F0                MOVX    @DPTR,A
  765: 
  766: 				if(R_UnitWeight.origin>R_Weight_Mem)
00183B 904CC2            MOV     DPTR,#R_Weight_Mem
00183E E0                MOVX    A,@DPTR
00183F FE                MOV     R6,A
001840 A3                INC     DPTR
001841 E0                MOVX    A,@DPTR
001842 FF                MOV     R7,A
001843 904CC8            MOV     DPTR,#R_UnitWeight
001846 E0                MOVX    A,@DPTR
001847 FC                MOV     R4,A
001848 A3                INC     DPTR
001849 E0                MOVX    A,@DPTR
00184A FD                MOV     R5,A
00184B D3                SETB    C
00184C 9F                SUBB    A,R7
00184D EC                MOV     A,R4
00184E 9E                SUBB    A,R6
00184F 400E              JC      ?C0107?CS_SCALE_PROC
  767: 				R_Weight_Temp = R_UnitWeight.origin -R_Weight_Mem;
001851 ED                MOV     A,R5
001852 9F                SUBB    A,R7
001853 FF                MOV     R7,A
001854 EC                MOV     A,R4
001855 9E                SUBB    A,R6
001856 904E52            MOV     DPTR,#R_Weight_Temp
001859 F0                MOVX    @DPTR,A
00185A A3                INC     DPTR
00185B EF                MOV     A,R7
00185C F0                MOVX    @DPTR,A
00185D 801B              SJMP    ?C0108?CS_SCALE_PROC
00185F         ?C0107?CS_SCALE_PROC:
  768: 				else
  769: 				R_Weight_Temp = R_Weight_Mem - R_UnitWeight.origin;
00185F 904CC8            MOV     DPTR,#R_UnitWeight
001862 E0                MOVX    A,@DPTR
001863 FE                MOV     R6,A
001864 A3                INC     DPTR
001865 E0                MOVX    A,@DPTR
001866 FF                MOV     R7,A
001867 C3                CLR     C
001868 904CC3            MOV     DPTR,#R_Weight_Mem+01H
00186B E0                MOVX    A,@DPTR
00186C 9F                SUBB    A,R7
00186D FF                MOV     R7,A
00186E 904CC2            MOV     DPTR,#R_Weight_Mem
001871 E0                MOVX    A,@DPTR
001872 9E                SUBB    A,R6
001873 904E52            MOV     DPTR,#R_Weight_Temp
001876 F0                MOVX    @DPTR,A
001877 A3                INC     DPTR
001878 EF                MOV     A,R7
001879 F0                MOVX    @DPTR,A
00187A         ?C0108?CS_SCALE_PROC:
  770: 
  771: 					//在记忆范围内记忆
  772: 				if(R_UnitWeight.origin > ScaleStartMemoryWeight)
00187A D3                SETB    C
00187B 904CC9            MOV     DPTR,#R_UnitWeight+01H
00187E E0                MOVX    A,@DPTR
00187F 9458              SUBB    A,#058H
001881 904CC8            MOV     DPTR,#R_UnitWeight
001884 E0                MOVX    A,@DPTR
001885 9402              SUBB    A,#02H
001887 401D              JC      ?C0109?CS_SCALE_PROC
  773: 					{
  774: 					if(R_Weight_Temp<CS_MemoryRange)
001889 904E53            MOV     DPTR,#R_Weight_Temp+01H
00188C E0                MOVX    A,@DPTR
00188D 9419              SUBB    A,#019H
00188F 904E52            MOV     DPTR,#R_Weight_Temp
001892 E0                MOVX    A,@DPTR
001893 9400              SUBB    A,#00H
001895 500F              JNC     ?C0109?CS_SCALE_PROC
  775: 					R_UnitWeight.origin = R_Weight_Mem;
001897 904CC2            MOV     DPTR,#R_Weight_Mem
00189A E0                MOVX    A,@DPTR
00189B FF                MOV     R7,A
00189C A3                INC     DPTR
00189D E0                MOVX    A,@DPTR
00189E 904CC8            MOV     DPTR,#R_UnitWeight
0018A1 CF                XCH     A,R7
0018A2 F0                MOVX    @DPTR,A
0018A3 A3                INC     DPTR
0018A4 EF                MOV     A,R7
0018A5 F0                MOVX    @DPTR,A
  776: 					}
0018A6         ?C0109?CS_SCALE_PROC:
  777: 				
  778: 				R_Weight_Lock = R_UnitWeight.origin;
0018A6 904CC8            MOV     DPTR,#R_UnitWeight
0018A9 E0                MOVX    A,@DPTR
0018AA FE                MOV     R6,A
0018AB A3                INC     DPTR
0018AC E0                MOVX    A,@DPTR
0018AD FF                MOV     R7,A
0018AE 904CBF            MOV     DPTR,#R_Weight_Lock
0018B1 EE                MOV     A,R6
0018B2 F0                MOVX    @DPTR,A
0018B3 A3                INC     DPTR
0018B4 EF                MOV     A,R7
0018B5 F0                MOVX    @DPTR,A
  779: 				R_Weight_Mem = R_UnitWeight.origin;
0018B6 904CC2            MOV     DPTR,#R_Weight_Mem
0018B9 EE                MOV     A,R6
0018BA F0                MOVX    @DPTR,A
0018BB A3                INC     DPTR
0018BC EF                MOV     A,R7
0018BD F0                MOVX    @DPTR,A
  780: 					
  781: 				R_Scale_state = CS_Scale_state_locking;
0018BE A3                INC     DPTR
0018BF 7404              MOV     A,#04H
0018C1 F0                MOVX    @DPTR,A
  782: 				CS_SoftTimer(ResetSoftTimer);		//软件定时器开始用于锁定闪显示计时
0018C2 7F02              MOV     R7,#02H
0018C4 120F15            LCALL   _CS_SoftTimer
  783: 				CS_Scale_SteadyProc(SteadyProcReset);
0018C7 E4                CLR     A
0018C8 FF                MOV     R7,A
0018C9 31BD              ACALL   _CS_Scale_SteadyProc
  784: 				CS_Scale_TimeOutProc(CS_Reset_AllTime);
0018CB 7F06              MOV     R7,#06H
0018CD 121685            LCALL   _CS_Scale_TimeOutProc
  785: 				}
  786: 			}
  787: 		}
0018D0         ?C0104?CS_SCALE_PROC:
  788: 	return 0;
0018D0 7F00              MOV     R7,#00H
  789: }
0018D2 22                RET     
----- FUNCTION _CS_Scale_JudgeSteady (END) -------


----- FUNCTION _CS_Scale_LockProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  574: u8_t CS_Scale_LockProc(u8_t option)
  575: {
;---- Variable 'option' assigned to Register 'R7' ----
  576: 	static u8_t xdata B_Weight_Downing_Lock;		//下秤过程有重物在上面锁住
  577: 	
  578: 	if(option==SetDowningLock)
0018D3 EF                MOV     A,R7
0018D4 B40109            CJNE    A,#01H,?C0074?CS_SCALE_PROC
  579: 		{
  580: 		B_Weight_Downing_Lock =LockProcLock;
0018D7 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
0018DA 7403              MOV     A,#03H
0018DC F0                MOVX    @DPTR,A
  581: 		return 0;
0018DD 7F00              MOV     R7,#00H
0018DF 22                RET     
  582: 		}
0018E0         ?C0074?CS_SCALE_PROC:
  583: 
  584: 	if(option==GetIfLock)
0018E0 EF                MOV     A,R7
0018E1 B40206            CJNE    A,#02H,?C0076?CS_SCALE_PROC
  585: 		{
  586: 		return B_Weight_Downing_Lock;
0018E4 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
0018E7 E0                MOVX    A,@DPTR
0018E8 FF                MOV     R7,A
0018E9 22                RET     
  587: 		}
0018EA         ?C0076?CS_SCALE_PROC:
  588: 	if(option==LockProcUnLock)
0018EA EF                MOV     A,R7
0018EB B40307            CJNE    A,#03H,?C0077?CS_SCALE_PROC
  589: 		{
  590: 		B_Weight_Downing_Lock =false;
0018EE E4                CLR     A
0018EF 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
0018F2 F0                MOVX    @DPTR,A
  591: 		return 0;
0018F3 FF                MOV     R7,A
0018F4 22                RET     
  592: 		}
0018F5         ?C0077?CS_SCALE_PROC:
  593: 	
  594: 	if(CS_Scale_ZeroProc(GetZeroState,0)==true)		//处于零位
0018F5 E4                CLR     A
0018F6 FD                MOV     R5,A
0018F7 FC                MOV     R4,A
0018F8 7F03              MOV     R7,#03H
0018FA 1212F0            LCALL   _CS_Scale_ZeroProc
0018FD EF                MOV     A,R7
0018FE 6401              XRL     A,#01H
001900 4E                ORL     A,R6
001901 701B              JNZ     ?C0078?CS_SCALE_PROC
  595: 		{
  596: 		B_Weight_Downing_Lock &=LockProcDownUnLock ;
001903 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
001906 E0                MOVX    A,@DPTR
001907 54FD              ANL     A,#0FDH
001909 F0                MOVX    @DPTR,A
  597: 		
  598: 		if(B_Weight_Downing_Lock&LockProcZeroLock)
00190A 30E031            JNB     ACC.0,?C0080?CS_SCALE_PROC
  599: 		R_UnitWeight.origin = R_Weight_Lock;
00190D 904CBF            MOV     DPTR,#R_Weight_Lock
001910 E0                MOVX    A,@DPTR
001911 FF                MOV     R7,A
001912 A3                INC     DPTR
001913 E0                MOVX    A,@DPTR
001914 904CC8            MOV     DPTR,#R_UnitWeight
001917 CF                XCH     A,R7
001918 F0                MOVX    @DPTR,A
001919 A3                INC     DPTR
00191A EF                MOV     A,R7
00191B F0                MOVX    @DPTR,A
  600: 		}
00191C 8020              SJMP    ?C0080?CS_SCALE_PROC
00191E         ?C0078?CS_SCALE_PROC:
  601: 	else
  602: 		{
  603: 		if(B_Weight_Downing_Lock&LockProcDownLock)
00191E 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
001921 E0                MOVX    A,@DPTR
001922 FF                MOV     R7,A
001923 30E111            JNB     ACC.1,?C0081?CS_SCALE_PROC
  604: 			R_UnitWeight.origin = R_Weight_Lock;
001926 904CBF            MOV     DPTR,#R_Weight_Lock
001929 E0                MOVX    A,@DPTR
00192A FD                MOV     R5,A
00192B A3                INC     DPTR
00192C E0                MOVX    A,@DPTR
00192D 904CC8            MOV     DPTR,#R_UnitWeight
001930 CD                XCH     A,R5
001931 F0                MOVX    @DPTR,A
001932 A3                INC     DPTR
001933 ED                MOV     A,R5
001934 F0                MOVX    @DPTR,A
001935 8007              SJMP    ?C0080?CS_SCALE_PROC
001937         ?C0081?CS_SCALE_PROC:
  605: 		else
  606: 			B_Weight_Downing_Lock &= LockProcZeroUnLock;
001937 EF                MOV     A,R7
001938 54FE              ANL     A,#0FEH
00193A 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
00193D F0                MOVX    @DPTR,A
  607: 		}
00193E         ?C0080?CS_SCALE_PROC:
  608: 
  609: 	return 0;
00193E 7F00              MOV     R7,#00H
  610: }
001940 22                RET     
----- FUNCTION _CS_Scale_LockProc (END) -------


----- FUNCTION _CS_Scale_SameWeightTimes (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  703: u8_t CS_Scale_SameWeightTimes(u8_t option)
  704: {
;---- Variable 'weight_temp' assigned to Register 'R4/R5' ----
;---- Variable 'option' assigned to Register 'R7' ----
  705: 	u16_t	weight_temp;
  706: 	static	u16_t xdata R_Weight_kg_old;
  707: 	static	u8_t	  xdata R_Weight_SameTimes;
  708: 
  709: 	if(option==ResetTimes)
001941 EF                MOV     A,R7
001942 B40107            CJNE    A,#01H,?C0093?CS_SCALE_PROC
  710: 		{
  711: 		R_Weight_SameTimes = 0;
001945 E4                CLR     A
001946 904CA4            MOV     DPTR,#R_Weight_SameTimes
001949 F0                MOVX    @DPTR,A
  712: 		return 0;
00194A FF                MOV     R7,A
00194B 22                RET     
  713: 		}	
00194C         ?C0093?CS_SCALE_PROC:
  714: 
  715: 	if(option==GetTimes)
00194C EF                MOV     A,R7
00194D B40206            CJNE    A,#02H,?C0095?CS_SCALE_PROC
  716: 		return R_Weight_SameTimes;
001950 904CA4            MOV     DPTR,#R_Weight_SameTimes
001953 E0                MOVX    A,@DPTR
001954 FF                MOV     R7,A
001955 22                RET     
001956         ?C0095?CS_SCALE_PROC:
  717: 	
  718: 	
  719: 	if(R_UnitWeight.origin > R_Weight_kg_old)
001956 904CA2            MOV     DPTR,#R_Weight_kg_old
001959 E0                MOVX    A,@DPTR
00195A FE                MOV     R6,A
00195B A3                INC     DPTR
00195C E0                MOVX    A,@DPTR
00195D FF                MOV     R7,A
00195E 904CC8            MOV     DPTR,#R_UnitWeight
001961 E0                MOVX    A,@DPTR
001962 FA                MOV     R2,A
001963 A3                INC     DPTR
001964 E0                MOVX    A,@DPTR
001965 FB                MOV     R3,A
001966 D3                SETB    C
001967 9F                SUBB    A,R7
001968 EA                MOV     A,R2
001969 9E                SUBB    A,R6
00196A 400E              JC      ?C0096?CS_SCALE_PROC
  720: 		weight_temp = R_UnitWeight.origin -R_Weight_kg_old;
00196C 904CA2            MOV     DPTR,#R_Weight_kg_old
00196F E0                MOVX    A,@DPTR
001970 A3                INC     DPTR
001971 E0                MOVX    A,@DPTR
001972 EB                MOV     A,R3
001973 9F                SUBB    A,R7
001974 FD                MOV     R5,A
001975 EA                MOV     A,R2
001976 9E                SUBB    A,R6
001977 FC                MOV     R4,A
001978 8015              SJMP    ?C0097?CS_SCALE_PROC
00197A         ?C0096?CS_SCALE_PROC:
  721: 	else
  722: 		weight_temp = R_Weight_kg_old -R_UnitWeight.origin;
00197A 904CC8            MOV     DPTR,#R_UnitWeight
00197D E0                MOVX    A,@DPTR
00197E FE                MOV     R6,A
00197F A3                INC     DPTR
001980 E0                MOVX    A,@DPTR
001981 FF                MOV     R7,A
001982 C3                CLR     C
001983 904CA3            MOV     DPTR,#R_Weight_kg_old+01H
001986 E0                MOVX    A,@DPTR
001987 9F                SUBB    A,R7
001988 FD                MOV     R5,A
001989 904CA2            MOV     DPTR,#R_Weight_kg_old
00198C E0                MOVX    A,@DPTR
00198D 9E                SUBB    A,R6
00198E FC                MOV     R4,A
00198F         ?C0097?CS_SCALE_PROC:
  723: 		
  724: 	if(weight_temp <  CS_Scale_SameWeightRange)
00198F C3                CLR     C
001990 ED                MOV     A,R5
001991 940A              SUBB    A,#0AH
001993 EC                MOV     A,R4
001994 9400              SUBB    A,#00H
001996 500E              JNC     ?C0098?CS_SCALE_PROC
  725: 		{
  726: 		if(R_Weight_SameTimes<255)
001998 904CA4            MOV     DPTR,#R_Weight_SameTimes
00199B E0                MOVX    A,@DPTR
00199C C3                CLR     C
00199D 94FF              SUBB    A,#0FFH
00199F 500A              JNC     ?C0100?CS_SCALE_PROC
  727: 		R_Weight_SameTimes++;
0019A1 E0                MOVX    A,@DPTR
0019A2 04                INC     A
0019A3 F0                MOVX    @DPTR,A
  728: 		}
0019A4 8005              SJMP    ?C0100?CS_SCALE_PROC
0019A6         ?C0098?CS_SCALE_PROC:
  729: 		else
  730: 		R_Weight_SameTimes = 0;
0019A6 E4                CLR     A
0019A7 904CA4            MOV     DPTR,#R_Weight_SameTimes
0019AA F0                MOVX    @DPTR,A
0019AB         ?C0100?CS_SCALE_PROC:
  731: 
  732: 	R_Weight_kg_old = R_UnitWeight.origin;
0019AB 904CC8            MOV     DPTR,#R_UnitWeight
0019AE E0                MOVX    A,@DPTR
0019AF FF                MOV     R7,A
0019B0 A3                INC     DPTR
0019B1 E0                MOVX    A,@DPTR
0019B2 904CA2            MOV     DPTR,#R_Weight_kg_old
0019B5 CF                XCH     A,R7
0019B6 F0                MOVX    @DPTR,A
0019B7 A3                INC     DPTR
0019B8 EF                MOV     A,R7
0019B9 F0                MOVX    @DPTR,A
  733: 
  734: 	return 0;	
0019BA 7F00              MOV     R7,#00H
  735: }
0019BC 22                RET     
----- FUNCTION _CS_Scale_SameWeightTimes (END) -------


----- FUNCTION _CS_Scale_SteadyProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  798: void CS_Scale_SteadyProc(u8_t option)
  799: {
;---- Variable 'option' assigned to Register 'R7' ----
  800: 	u16_t	R_AD_BUF;	
  801: 
  802: 	static	u8_t xdata B_Debug_Send;	
  803: 	static 	u8_t xdata ReadUTC;
  804: 	UserMeasureData SendData;
  805: 
  806: 	if(option==SteadyProcReset)
0019BD EF                MOV     A,R7
0019BE 7005              JNZ     ?C0111?CS_SCALE_PROC
  807: 		{
  808: 		B_Debug_Send=false;
0019C0 904CA6            MOV     DPTR,#B_Debug_Send
0019C3 F0                MOVX    @DPTR,A
0019C4 22                RET     
  809: 		return;
  810: 		}
0019C5         ?C0111?CS_SCALE_PROC:
  811: 	
  812: 	
  813: 		if(CS_Scale_JudgeSteady(GetIfHeavySteady) == true)
0019C5 7F03              MOV     R7,#03H
0019C7 1217F6            LCALL   _CS_Scale_JudgeSteady
0019CA BF0113            CJNE    R7,#01H,?C0113?CS_SCALE_PROC
  814: 			{
  815: 			
  816: 			CS_Scale_JudgeSteady(ResetSteady);
0019CD 7F01              MOV     R7,#01H
0019CF 1217F6            LCALL   _CS_Scale_JudgeSteady
  817: 		
  818: 			CS_Scale_ZeroProc(ClrLockDownCheckFlag,0);
0019D2 E4                CLR     A
0019D3 FD                MOV     R5,A
0019D4 FC                MOV     R4,A
0019D5 7F08              MOV     R7,#08H
0019D7 1212F0            LCALL   _CS_Scale_ZeroProc
  819: 			ReadUTC = false;	//初始化读ADC
0019DA E4                CLR     A
0019DB 904CA7            MOV     DPTR,#ReadUTC
0019DE F0                MOVX    @DPTR,A
  820: 			}
0019DF 22                RET     
0019E0         ?C0113?CS_SCALE_PROC:
  821: 		else
  822: 			{
  823: 			
  824: 			/*
  825: 			if(wechatStatus == WECHAT_ST_OK&&B_Debug_Send==false)
  826: 				{
  827: 				sendMeasureData();
  828: 				B_Debug_Send=true;
  829: 				}
  830: 			*/		
  831: 			if(B_Debug_Send==false)
0019E0 904CA6            MOV     DPTR,#B_Debug_Send
0019E3 E0                MOVX    A,@DPTR
0019E4 705D              JNZ     ?C0115?CS_SCALE_PROC
  832: 				{
  833: 				
  834: 				if(ReadUTC==false)
0019E6 A3                INC     DPTR
0019E7 E0                MOVX    A,@DPTR
0019E8 7006              JNZ     ?C0116?CS_SCALE_PROC
  835: 					{
  836: 					ReadUTC=true;
0019EA 04                INC     A
0019EB F0                MOVX    @DPTR,A
  837: 					CS_Scale_1186ComSend(CS_CommTo1186_ReadTime);	
0019EC 7F82              MOV     R7,#082H
0019EE 5167              ACALL   _CS_Scale_1186ComSend
  838: 					}
0019F0         ?C0116?CS_SCALE_PROC:
  839: 				
  840: 				if(CS_If1186ComSucess()==true)
0019F0 7155              ACALL   CS_If1186ComSucess
0019F2 EF                MOV     A,R7
0019F3 6401              XRL     A,#01H
0019F5 706F              JNZ     ?C0112?CS_SCALE_PROC
  841: 					{
  842: 					
  843: 					
  844: 					ReadUTC=false;
0019F7 904CA7            MOV     DPTR,#ReadUTC
0019FA F0                MOVX    @DPTR,A
  845: 					
  846: 					SendData.UTCTime[0]=R_1186_RTC[0];
0019FB 904CD2            MOV     DPTR,#R_1186_RTC
0019FE E0                MOVX    A,@DPTR
0019FF 904E14            MOV     DPTR,#SendData+02H
001A02 F0                MOVX    @DPTR,A
  847: 					SendData.UTCTime[1]=R_1186_RTC[1];	
001A03 904CD3            MOV     DPTR,#R_1186_RTC+01H
001A06 E0                MOVX    A,@DPTR
001A07 904E15            MOV     DPTR,#SendData+03H
001A0A F0                MOVX    @DPTR,A
  848: 					SendData.UTCTime[2]=R_1186_RTC[2];	
001A0B 904CD4            MOV     DPTR,#R_1186_RTC+02H
001A0E E0                MOVX    A,@DPTR
001A0F 904E16            MOV     DPTR,#SendData+04H
001A12 F0                MOVX    @DPTR,A
  849: 					SendData.UTCTime[3]=R_1186_RTC[3];	
001A13 904CD5            MOV     DPTR,#R_1186_RTC+03H
001A16 E0                MOVX    A,@DPTR
001A17 904E17            MOV     DPTR,#SendData+05H
001A1A F0                MOVX    @DPTR,A
  850: 					SendData.weight=ESWAP(R_UnitWeight.origin);
001A1B 904CC8            MOV     DPTR,#R_UnitWeight
001A1E E0                MOVX    A,@DPTR
001A1F FC                MOV     R4,A
001A20 A3                INC     DPTR
001A21 E0                MOVX    A,@DPTR
001A22 FA                MOV     R2,A
001A23 EC                MOV     A,R4
001A24 FF                MOV     R7,A
001A25 EA                MOV     A,R2
001A26 FE                MOV     R6,A
001A27 EF                MOV     A,R7
001A28 904E12            MOV     DPTR,#SendData
001A2B EE                MOV     A,R6
001A2C F0                MOVX    @DPTR,A
001A2D A3                INC     DPTR
001A2E EF                MOV     A,R7
001A2F F0                MOVX    @DPTR,A
  851: 					QueuePush(&SendData);
001A30 7B01              MOV     R3,#01H
001A32 7A4E              MOV     R2,#HIGH SendData
001A34 7912              MOV     R1,#LOW SendData
001A36 122676            LCALL   _QueuePush
  852: 					B_Debug_Send=true;
001A39 904CA6            MOV     DPTR,#B_Debug_Send
001A3C 7401              MOV     A,#01H
001A3E F0                MOVX    @DPTR,A
  853: 
  854: 					CS_Scale_1186ComSend(CS_CommTo1186_ReadAd);
001A3F 7F80              MOV     R7,#080H
001A41 8024              SJMP    _CS_Scale_1186ComSend
  855: 			
  856: 					//CS_SoftTimer(ResetSoftTimer);	
  857: 					
  858: 					}
  859: 				
  860: 				}
001A43         ?C0115?CS_SCALE_PROC:
  861: 			else
  862: 				{
  863: 				R_AD_BUF = CS_Scale_GetDeltaAD(GetDeltaAD);
001A43 E4                CLR     A
001A44 FF                MOV     R7,A
001A45 12321D            LCALL   _CS_Scale_GetDeltaAD
;---- Variable 'R_AD_BUF' assigned to Register 'R6/R7' ----
  864: 				R_AD_BUF = CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
001A48 AD07              MOV     R5,AR7
001A4A AC06              MOV     R4,AR6
001A4C E4                CLR     A
001A4D FF                MOV     R7,A
001A4E 12327E            LCALL   _CS_Scale_AdcFilter
  865: 				CS_Scale_GetWeight(R_AD_BUF);				
001A51 12362E            LCALL   _CS_Scale_GetWeight
  866: 				CS_Scale_ReturnLock();
001A54 1237CA            LCALL   CS_Scale_ReturnLock
  867: 				
  868: 				 R_UnitWeight.origin = R_Weight_Lock;	//锁定重量
001A57 904CBF            MOV     DPTR,#R_Weight_Lock
001A5A E0                MOVX    A,@DPTR
001A5B FF                MOV     R7,A
001A5C A3                INC     DPTR
001A5D E0                MOVX    A,@DPTR
001A5E 904CC8            MOV     DPTR,#R_UnitWeight
001A61 CF                XCH     A,R7
001A62 F0                MOVX    @DPTR,A
001A63 A3                INC     DPTR
001A64 EF                MOV     A,R7
001A65 F0                MOVX    @DPTR,A
  869: 				}
  870: 			}
  871: 	
  872: 
  873: 			/*
  874: 			if(CS_SoftTimer(GetSoftTimerTime)<200)
  875: 				{
  876: 			R_Debug_temp=SendData.UTCTime;
  877: 			CS_ScaleDisplay_Debug();			
  878: 			return;
  879: 				}
  880: 			*/	
  881: 			/* B_Debug_Test =true;
  882: 			if(B_Debug_Test)
  883: 				{
  884: 				R_Debug_temp=888;
  885: 				CS_ScaleDisplay_Debug();
  886: 				while(1);
  887: 				}
  888: 			*/
  889: }
001A66         ?C0112?CS_SCALE_PROC:
001A66 22                RET     
----- FUNCTION _CS_Scale_SteadyProc (END) -------


----- FUNCTION _CS_Scale_1186ComSend (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   18: void CS_Scale_1186ComSend(u8_t com_comand)
   19: {
;---- Variable 'com_comand' assigned to Register 'R7' ----
   20: R_Weight_Com_Coo.sucess=false;
   21: R_Weight_Com_Coo.now = com_comand;
001A67 E4                CLR     A
001A68 904D56            MOV     DPTR,#R_Weight_Com_Coo+02H
001A6B F0                MOVX    @DPTR,A
   22: }
001A6C 904D54            MOV     DPTR,#R_Weight_Com_Coo
001A6F EF                MOV     A,R7
001A70 F0                MOVX    @DPTR,A
   23: 
001A71 22                RET     
----- FUNCTION _CS_Scale_1186ComSend (END) -------


----- FUNCTION CS_Scale_PowerOnProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1321: void CS_Scale_PowerOnProc(bool B_Reset)
 1322: {
 1323: 	static u8_t xdata comm_doing;
 1324: 	static u8_t xdata PowerOnState;
 1325: 	
 1326: 	
 1327: 	if(B_Reset)
001A72 30000A            JNB     B_Reset,?C0184?CS_SCALE_PROC
 1328: 		{
 1329: 		PowerOnState=CS_PowerOn_State1_Reset;
001A75 E4                CLR     A
001A76 904CB6            MOV     DPTR,#PowerOnState
001A79 F0                MOVX    @DPTR,A
 1330: 		comm_doing=false;
001A7A 904CB5            MOV     DPTR,#comm_doing
001A7D F0                MOVX    @DPTR,A
001A7E 22                RET     
 1331: 		return;
 1332: 		}
001A7F         ?C0184?CS_SCALE_PROC:
 1333: 	
 1334: 	//-----------S1
 1335: 	if(PowerOnState==CS_PowerOn_State1_Reset)
001A7F 904CB6            MOV     DPTR,#PowerOnState
001A82 E0                MOVX    A,@DPTR
001A83 7016              JNZ     ?C0186?CS_SCALE_PROC
 1336: 		{
 1337: 		if(comm_doing==false)
001A85 904CB5            MOV     DPTR,#comm_doing
001A88 E0                MOVX    A,@DPTR
001A89 7008              JNZ     ?C0187?CS_SCALE_PROC
 1338: 			{
 1339: 			comm_doing=true;
001A8B 04                INC     A
001A8C F0                MOVX    @DPTR,A
 1340: 			CS_Scale_1186ComSend(CS_CommTo1186_Reset);
001A8D 7FC5              MOV     R7,#0C5H
001A8F 5167              ACALL   _CS_Scale_1186ComSend
 1341: 			}
001A91 8008              SJMP    ?C0186?CS_SCALE_PROC
001A93         ?C0187?CS_SCALE_PROC:
 1342: 		else
 1343: 			{
 1344: 			comm_doing=false;
001A93 E4                CLR     A
001A94 904CB5            MOV     DPTR,#comm_doing
001A97 F0                MOVX    @DPTR,A
 1345: 			PowerOnState	= CS_PowerOn_State2_ReadOtp;
001A98 A3                INC     DPTR
001A99 04                INC     A
001A9A F0                MOVX    @DPTR,A
 1346: 			}		
 1347: 		}
001A9B         ?C0186?CS_SCALE_PROC:
 1348: 	//-----------S2
 1349: 	if(PowerOnState==CS_PowerOn_State2_ReadOtp)
001A9B 904CB6            MOV     DPTR,#PowerOnState
001A9E E0                MOVX    A,@DPTR
001A9F B4011A            CJNE    A,#01H,?C0189?CS_SCALE_PROC
 1350: 		{
 1351: 		if(comm_doing==false)
001AA2 904CB5            MOV     DPTR,#comm_doing
001AA5 E0                MOVX    A,@DPTR
001AA6 7006              JNZ     ?C0190?CS_SCALE_PROC
 1352: 			{
 1353: 			comm_doing=true;
001AA8 04                INC     A
001AA9 F0                MOVX    @DPTR,A
 1354: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadOtp);
001AAA 7F84              MOV     R7,#084H
001AAC 5167              ACALL   _CS_Scale_1186ComSend
 1355: 			
 1356: 			}
001AAE         ?C0190?CS_SCALE_PROC:
 1357: 		if(CS_If1186ComSucess()==true)
001AAE 7155              ACALL   CS_If1186ComSucess
001AB0 BF0109            CJNE    R7,#01H,?C0189?CS_SCALE_PROC
 1358: 			{
 1359: 			comm_doing=false;
001AB3 E4                CLR     A
001AB4 904CB5            MOV     DPTR,#comm_doing
001AB7 F0                MOVX    @DPTR,A
 1360: 			PowerOnState =  CS_PowerOn_State3_ReadVersion;
001AB8 A3                INC     DPTR
001AB9 7402              MOV     A,#02H
001ABB F0                MOVX    @DPTR,A
 1361: 			}
 1362: 		}
001ABC         ?C0189?CS_SCALE_PROC:
 1363: 	//-----------S3
 1364: 	if(PowerOnState==CS_PowerOn_State3_ReadVersion)
001ABC 904CB6            MOV     DPTR,#PowerOnState
001ABF E0                MOVX    A,@DPTR
001AC0 B40203            CJNE    A,#02H,?C0192?CS_SCALE_PROC
 1365: 		{
 1366: 		PowerOnState =  CS_PowerOn_State4_ReadTime;		
001AC3 7403              MOV     A,#03H
001AC5 F0                MOVX    @DPTR,A
 1367: 		}
001AC6         ?C0192?CS_SCALE_PROC:
 1368: 	//-----------S4
 1369: 	if(PowerOnState==CS_PowerOn_State4_ReadTime)
001AC6 904CB6            MOV     DPTR,#PowerOnState
001AC9 E0                MOVX    A,@DPTR
001ACA B4031A            CJNE    A,#03H,?C0193?CS_SCALE_PROC
 1370: 		{
 1371: 		if(comm_doing==false)
001ACD 904CB5            MOV     DPTR,#comm_doing
001AD0 E0                MOVX    A,@DPTR
001AD1 7006              JNZ     ?C0194?CS_SCALE_PROC
 1372: 			{
 1373: 			comm_doing=true;
001AD3 04                INC     A
001AD4 F0                MOVX    @DPTR,A
 1374: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadTime);
001AD5 7F82              MOV     R7,#082H
001AD7 5167              ACALL   _CS_Scale_1186ComSend
 1375: 			}
001AD9         ?C0194?CS_SCALE_PROC:
 1376: 		if(CS_If1186ComSucess()==true)
001AD9 7155              ACALL   CS_If1186ComSucess
001ADB BF0109            CJNE    R7,#01H,?C0193?CS_SCALE_PROC
 1377: 			{
 1378: 			comm_doing=false;
001ADE E4                CLR     A
001ADF 904CB5            MOV     DPTR,#comm_doing
001AE2 F0                MOVX    @DPTR,A
 1379: 			PowerOnState =  CS_PowerOn_State5_SetOpenWeight;	
001AE3 A3                INC     DPTR
001AE4 7404              MOV     A,#04H
001AE6 F0                MOVX    @DPTR,A
 1380: 			}
 1381: 		}
001AE7         ?C0193?CS_SCALE_PROC:
 1382: 	//-----------S5
 1383: 	if(PowerOnState==CS_PowerOn_State5_SetOpenWeight)
001AE7 904CB6            MOV     DPTR,#PowerOnState
001AEA E0                MOVX    A,@DPTR
001AEB B4041A            CJNE    A,#04H,?C0196?CS_SCALE_PROC
 1384: 		{
 1385: 		if(comm_doing==false)
001AEE 904CB5            MOV     DPTR,#comm_doing
001AF1 E0                MOVX    A,@DPTR
001AF2 7006              JNZ     ?C0197?CS_SCALE_PROC
 1386: 			{
 1387: 			comm_doing=true;
001AF4 04                INC     A
001AF5 F0                MOVX    @DPTR,A
 1388: 			CS_Scale_1186ComSend(CS_CommTo1186_SetOpenWeight);
001AF6 7FA1              MOV     R7,#0A1H
001AF8 5167              ACALL   _CS_Scale_1186ComSend
 1389: 			}
001AFA         ?C0197?CS_SCALE_PROC:
 1390: 		if(CS_If1186ComSucess()==true)
001AFA 7155              ACALL   CS_If1186ComSucess
001AFC BF0109            CJNE    R7,#01H,?C0196?CS_SCALE_PROC
 1391: 			{
 1392: 			comm_doing=false;
001AFF E4                CLR     A
001B00 904CB5            MOV     DPTR,#comm_doing
001B03 F0                MOVX    @DPTR,A
 1393: 			PowerOnState =  CS_PowerOn_State6_ShowOpenPic;
001B04 A3                INC     DPTR
001B05 7405              MOV     A,#05H
001B07 F0                MOVX    @DPTR,A
 1394: 			}
 1395: 		}
001B08         ?C0196?CS_SCALE_PROC:
 1396: 	//-----------S6
 1397: 	if(PowerOnState==CS_PowerOn_State6_ShowOpenPic)
001B08 904CB6            MOV     DPTR,#PowerOnState
001B0B E0                MOVX    A,@DPTR
001B0C 6405              XRL     A,#05H
001B0E 7028              JNZ     ?C0199?CS_SCALE_PROC
 1398: 		{
 1399: 		if(comm_doing==false)
001B10 904CB5            MOV     DPTR,#comm_doing
001B13 E0                MOVX    A,@DPTR
001B14 700F              JNZ     ?C0200?CS_SCALE_PROC
 1400: 			{
 1401: 			comm_doing=true;	
001B16 04                INC     A
001B17 F0                MOVX    @DPTR,A
 1402: 			CS_ScaleDisplay_FreshBuf(DisplayData,8888);
001B18 7DB8              MOV     R5,#0B8H
001B1A 7C22              MOV     R4,#022H
001B1C 7F21              MOV     R7,#021H
001B1E 1239F0            LCALL   _CS_ScaleDisplay_FreshBuf
 1403: 			CS_Scale_1186ComSend(CS_CommTo1186_LcdDisplay);
001B21 7FE0              MOV     R7,#0E0H
001B23 5167              ACALL   _CS_Scale_1186ComSend
 1404: 			}
001B25         ?C0200?CS_SCALE_PROC:
 1405: 		if(CS_If1186ComSucess()==true)
001B25 7155              ACALL   CS_If1186ComSucess
001B27 BF010E            CJNE    R7,#01H,?C0199?CS_SCALE_PROC
 1406: 			{	
 1407: 			comm_doing=false;
001B2A E4                CLR     A
001B2B 904CB5            MOV     DPTR,#comm_doing
001B2E F0                MOVX    @DPTR,A
 1408: 			PowerOnState =	CS_PowerOn_State7_ShowOpenPicWait;
001B2F A3                INC     DPTR
001B30 7406              MOV     A,#06H
001B32 F0                MOVX    @DPTR,A
 1409: 			CS_SoftTimer(ResetSoftTimer);
001B33 7F02              MOV     R7,#02H
001B35 120F15            LCALL   _CS_SoftTimer
 1410: 			}		
 1411: 		}
001B38         ?C0199?CS_SCALE_PROC:
 1412: 	//-----------S7
 1413: 	if(PowerOnState==CS_PowerOn_State7_ShowOpenPicWait)
001B38 904CB6            MOV     DPTR,#PowerOnState
001B3B E0                MOVX    A,@DPTR
001B3C B40615            CJNE    A,#06H,?C0185?CS_SCALE_PROC
 1414: 		{
 1415: 		if(CS_SoftTimer(GetSoftTimerTime)>200)
001B3F 7F01              MOV     R7,#01H
001B41 120F15            LCALL   _CS_SoftTimer
001B44 EF                MOV     A,R7
001B45 D3                SETB    C
001B46 94C8              SUBB    A,#0C8H
001B48 400A              JC      ?C0185?CS_SCALE_PROC
 1416: 			{
 1417: 			R_Scale_state = CS_Scale_state_weighting;
001B4A 904CC4            MOV     DPTR,#R_Scale_state
001B4D 7401              MOV     A,#01H
001B4F F0                MOVX    @DPTR,A
 1418: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadAd);
001B50 7F80              MOV     R7,#080H
001B52 5167              ACALL   _CS_Scale_1186ComSend
 1419: 			}
 1420: 		}
 1421: 
 1422: }
001B54         ?C0185?CS_SCALE_PROC:
001B54 22                RET     
----- FUNCTION CS_Scale_PowerOnProc (END) -------


----- FUNCTION CS_If1186ComSucess (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   25: u8_t CS_If1186ComSucess(void)
   26: {
   27: return R_Weight_Com_Coo.sucess;
   28: }
001B55 904D56            MOV     DPTR,#R_Weight_Com_Coo+02H
001B58 E0                MOVX    A,@DPTR
001B59 FF                MOV     R7,A
   29: 
001B5A 22                RET     
----- FUNCTION CS_If1186ComSucess (END) -------


----- FUNCTION _CS_Scale_StandbyProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1222: void CS_Scale_StandbyProc(u8_t B_Reset)
 1223: {
;---- Variable 'B_Reset' assigned to Register 'R7' ----
 1224: 	static u8_t xdata comm_doing;
 1225: 	static u8_t xdata StandbyState;
 1226: 
 1227: 	if(B_Reset==1)
001B5B EF                MOV     A,R7
001B5C B4010A            CJNE    A,#01H,?C0173?CS_SCALE_PROC
 1228: 		{
 1229: 		StandbyState=CS_Standby_S1_ToSleep;
001B5F E4                CLR     A
001B60 904CB4            MOV     DPTR,#StandbyState
001B63 F0                MOVX    @DPTR,A
 1230: 		comm_doing=false;
001B64 904CB3            MOV     DPTR,#comm_doing
001B67 F0                MOVX    @DPTR,A
001B68 22                RET     
 1231: 		return;
 1232: 		}
001B69         ?C0173?CS_SCALE_PROC:
 1233: 
 1234: 	if(B_Reset==2)
001B69 EF                MOV     A,R7
001B6A B4020C            CJNE    A,#02H,?C0175?CS_SCALE_PROC
 1235: 		{
 1236: 		StandbyState=CS_Standby_S2_WakeUp;
001B6D 904CB4            MOV     DPTR,#StandbyState
001B70 7401              MOV     A,#01H
001B72 F0                MOVX    @DPTR,A
 1237: 		comm_doing=false;
001B73 E4                CLR     A
001B74 904CB3            MOV     DPTR,#comm_doing
001B77 F0                MOVX    @DPTR,A
001B78 22                RET     
 1238: 		return;
 1239: 		}
001B79         ?C0175?CS_SCALE_PROC:
 1240: 	
 1241: 	switch(StandbyState)
001B79 904CB4            MOV     DPTR,#StandbyState
001B7C E0                MOVX    A,@DPTR
001B7D 14                DEC     A
001B7E 6034              JZ      ?C0180?CS_SCALE_PROC
001B80 04                INC     A
001B81 7066              JNZ     ?C0183?CS_SCALE_PROC
 1242: 	{
 1243: 	case CS_Standby_S1_ToSleep:
001B83         ?C0177?CS_SCALE_PROC:
 1244: 		if(comm_doing==false)
001B83 904CB3            MOV     DPTR,#comm_doing
001B86 E0                MOVX    A,@DPTR
001B87 7006              JNZ     ?C0178?CS_SCALE_PROC
 1245: 			{
 1246: 			comm_doing=true;
001B89 04                INC     A
001B8A F0                MOVX    @DPTR,A
 1247: 
 1248: 			CS_Scale_1186ComSend(CS_CommTo1186_SetSleepMode);
001B8B 7FA0              MOV     R7,#0A0H
001B8D 5167              ACALL   _CS_Scale_1186ComSend
 1249: 			//sys_state = SYS_ST_IDLE;			//系统进入睡眠
 1250: 			}
001B8F         ?C0178?CS_SCALE_PROC:
 1251: 		if(CS_If1186ComSucess()==true)
001B8F 7155              ACALL   CS_If1186ComSucess
001B91 EF                MOV     A,R7
001B92 6401              XRL     A,#01H
001B94 7058              JNZ     ?C0174?CS_SCALE_PROC
 1252: 			{
 1253: 			comm_doing=false;
001B96 904CB3            MOV     DPTR,#comm_doing
001B99 F0                MOVX    @DPTR,A
 1254: 			StandbyState =  CS_Standby_S2_WakeUp;
001B9A A3                INC     DPTR
001B9B 04                INC     A
001B9C F0                MOVX    @DPTR,A
 1255: 
 1256: 			btCmdBuf.len = 0x01;
001B9D 904C63            MOV     DPTR,#btCmdBuf
001BA0 F0                MOVX    @DPTR,A
 1257: 			btCmdBuf.DATA[0] = CS_CMD_SLEEP_REQ;
001BA1 A3                INC     DPTR
001BA2 7420              MOV     A,#020H
001BA4 F0                MOVX    @DPTR,A
 1258: 			BT_CmdFifoIn(&btCmdBuf);
001BA5 7B01              MOV     R3,#01H
001BA7 7A4C              MOV     R2,#HIGH btCmdBuf
001BA9 7963              MOV     R1,#LOW btCmdBuf
001BAB 71EF              ACALL   _BT_CmdFifoIn
 1259: 
 1260: 			//btCmdBuf.len = 2;
 1261: 			//btCmdBuf.DATA[0] = 0x20;
 1262: 			//btCmdBuf.DATA[1] = 0;
 1263: 			//BT_CmdFifoIn(&btCmdBuf);
 1264: 			
 1265: 			 
 1266: 			sys_state = SYS_ST_IDLE;  //SYS_ST_SLEEP;			//系统进入睡眠
001BAD 904E59            MOV     DPTR,#sys_state
001BB0 7401              MOV     A,#01H
001BB2 F0                MOVX    @DPTR,A
 1267: 					
 1268: 			}	
 1269: 		break;
001BB3 22                RET     
 1270: 	case CS_Standby_S2_WakeUp:
001BB4         ?C0180?CS_SCALE_PROC:
 1271: 		if(comm_doing==false)
001BB4 904CB3            MOV     DPTR,#comm_doing
001BB7 E0                MOVX    A,@DPTR
001BB8 7006              JNZ     ?C0181?CS_SCALE_PROC
 1272: 			{
 1273: 			comm_doing=true;
001BBA 04                INC     A
001BBB F0                MOVX    @DPTR,A
 1274: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadAdZero);
001BBC 7F85              MOV     R7,#085H
001BBE 5167              ACALL   _CS_Scale_1186ComSend
 1275: 			}
001BC0         ?C0181?CS_SCALE_PROC:
 1276: 		if(CS_If1186ComSucess()==true)
001BC0 7155              ACALL   CS_If1186ComSucess
001BC2 BF0129            CJNE    R7,#01H,?C0174?CS_SCALE_PROC
 1277: 			{
 1278: 			comm_doing=false;
001BC5 E4                CLR     A
001BC6 904CB3            MOV     DPTR,#comm_doing
001BC9 F0                MOVX    @DPTR,A
 1279: 			StandbyState =  CS_Standby_S1_ToSleep;	
001BCA A3                INC     DPTR
001BCB F0                MOVX    @DPTR,A
 1280: 			sys_state = SYS_ST_RUN;
001BCC 904E59            MOV     DPTR,#sys_state
001BCF 7402              MOV     A,#02H
001BD1 F0                MOVX    @DPTR,A
 1281: 
 1282: 			/*
 1283: 			while(1)
 1284: 			{
 1285: 			R_Debug_temp = R_AD_Zero;
 1286: 			CS_ScaleDisplay_Debug();
 1287: 			}
 1288: 			*/
 1289: 			//清除异常状态
 1290: 			CS_Scale_JudgeOverLoad(ResetOverLoad);
001BD2 FF                MOV     R7,A
001BD3 12377F            LCALL   _CS_Scale_JudgeOverLoad
 1291: 			CS_Scale_TimeOutProc(CS_Reset_AllTime);
001BD6 7F06              MOV     R7,#06H
001BD8 121685            LCALL   _CS_Scale_TimeOutProc
 1292: 			R_Display_Err = 0;
001BDB E4                CLR     A
001BDC 904CC1            MOV     DPTR,#R_Display_Err
001BDF F0                MOVX    @DPTR,A
 1293: 			
 1294: 			R_Scale_state = CS_Scale_state_weighting;
001BE0 904CC4            MOV     DPTR,#R_Scale_state
001BE3 04                INC     A
001BE4 F0                MOVX    @DPTR,A
 1295: 			
 1296: 			CS_Scale_1186ComSend(CS_CommTo1186_ReadAd);
001BE5 7F80              MOV     R7,#080H
001BE7 4167              AJMP    _CS_Scale_1186ComSend
 1297: 			
 1298: 			}
 1299: 		break;
 1300: 	default:
001BE9         ?C0183?CS_SCALE_PROC:
 1301: 		StandbyState = CS_Standby_S1_ToSleep;
001BE9 E4                CLR     A
001BEA 904CB4            MOV     DPTR,#StandbyState
001BED F0                MOVX    @DPTR,A
 1302: 		break;
 1303: 	}
 1304: 	
 1305: 	//R_Debug_temp = 456;
 1306: 
 1307: }
001BEE         ?C0174?CS_SCALE_PROC:
001BEE 22                RET     
----- FUNCTION _CS_Scale_StandbyProc (END) -------


----- FUNCTION _BT_CmdFifoIn (BEGIN) -----
 FILE: 'BT_IPC.c'
    7: bool BT_CmdFifoIn(BT_CMDFIFO_t *pFIFO)
    8: {
001BEF 904E04            MOV     DPTR,#pFIFO
001BF2 EB                MOV     A,R3
001BF3 F0                MOVX    @DPTR,A
001BF4 A3                INC     DPTR
001BF5 EA                MOV     A,R2
001BF6 F0                MOVX    @DPTR,A
001BF7 A3                INC     DPTR
001BF8 E9                MOV     A,R1
001BF9 F0                MOVX    @DPTR,A
    9: 	u16_t new_wprt,new_cmd_len,i;
   10: 	if( pFIFO->len ==0 )
001BFA 1200F9            LCALL   ?C?CLDPTR
001BFD 7002              JNZ     ?C0001?BT_IPC
   11: 		return false;
001BFF C3                CLR     C
001C00 22                RET     
001C01         ?C0001?BT_IPC:
   12: 	new_cmd_len = BT_GetCmdFifoDepth()+pFIFO->len+2;
001C01 1230C9            LCALL   BT_GetCmdFifoDepth
001C04 904E04            MOV     DPTR,#pFIFO
001C07 E0                MOVX    A,@DPTR
001C08 FB                MOV     R3,A
001C09 A3                INC     DPTR
001C0A E0                MOVX    A,@DPTR
001C0B FA                MOV     R2,A
001C0C A3                INC     DPTR
001C0D E0                MOVX    A,@DPTR
001C0E F9                MOV     R1,A
001C0F 1200F9            LCALL   ?C?CLDPTR
001C12 FD                MOV     R5,A
001C13 2F                ADD     A,R7
001C14 FF                MOV     R7,A
001C15 E4                CLR     A
001C16 33                RLC     A
001C17 CF                XCH     A,R7
001C18 2402              ADD     A,#02H
001C1A CF                XCH     A,R7
001C1B 3400              ADDC    A,#00H
001C1D FE                MOV     R6,A
;---- Variable 'new_cmd_len' assigned to Register 'R6/R7' ----
   13: 	if(new_cmd_len<=BT_CMD_BUF_LEN)
001C1E D3                SETB    C
001C1F EF                MOV     A,R7
001C20 9480              SUBB    A,#080H
001C22 EE                MOV     A,R6
001C23 9400              SUBB    A,#00H
001C25 4002              JC      $ + 4H
001C27 A10E              AJMP    ?C0003?BT_IPC
   14: 	{
   15: 		new_wprt = ESWAP(BT_CmdWptr);
001C29 904A03            MOV     DPTR,#BT_CmdWptr+01H
001C2C E0                MOVX    A,@DPTR
001C2D FA                MOV     R2,A
001C2E 904A02            MOV     DPTR,#BT_CmdWptr
001C31 E0                MOVX    A,@DPTR
001C32 FF                MOV     R7,A
001C33 EA                MOV     A,R2
001C34 FE                MOV     R6,A
001C35 EF                MOV     A,R7
001C36 904E07            MOV     DPTR,#new_wprt
001C39 EE                MOV     A,R6
001C3A F0                MOVX    @DPTR,A
001C3B A3                INC     DPTR
001C3C EF                MOV     A,R7
001C3D F0                MOVX    @DPTR,A
   16: 		HWRITE(new_wprt++,CS_PREFIX_CMD);
001C3E 904E07            MOV     DPTR,#new_wprt
001C41 E4                CLR     A
001C42 75F001            MOV     B,#01H
001C45 1201C8            LCALL   ?C?ILDIX
001C48 85F082            MOV     DPL,B
001C4B F583              MOV     DPH,A
001C4D 74C5              MOV     A,#0C5H
001C4F F0                MOVX    @DPTR,A
   17: 		if(new_wprt == (mem_cmd_buf_end + 1))
001C50 904E07            MOV     DPTR,#new_wprt
001C53 E0                MOVX    A,@DPTR
001C54 B44F0E            CJNE    A,#04FH,?C0004?BT_IPC
001C57 A3                INC     DPTR
001C58 E0                MOVX    A,@DPTR
001C59 B48009            CJNE    A,#080H,?C0004?BT_IPC
   18: 		{
   19: 			new_wprt = mem_cmd_buf;
001C5C 904E07            MOV     DPTR,#new_wprt
001C5F 744F              MOV     A,#04FH
001C61 F0                MOVX    @DPTR,A
001C62 A3                INC     DPTR
001C63 E4                CLR     A
001C64 F0                MOVX    @DPTR,A
   20: 		}
001C65         ?C0004?BT_IPC:
   21: 		HWRITE(new_wprt++,pFIFO->len);
001C65 904E07            MOV     DPTR,#new_wprt
001C68 E4                CLR     A
001C69 75F001            MOV     B,#01H
001C6C 1201C8            LCALL   ?C?ILDIX
001C6F 85F082            MOV     DPL,B
001C72 F583              MOV     DPH,A
001C74 ED                MOV     A,R5
001C75 F0                MOVX    @DPTR,A
   22: 		if(new_wprt == (mem_cmd_buf_end + 1))
001C76 904E07            MOV     DPTR,#new_wprt
001C79 E0                MOVX    A,@DPTR
001C7A B44F0E            CJNE    A,#04FH,?C0005?BT_IPC
001C7D A3                INC     DPTR
001C7E E0                MOVX    A,@DPTR
001C7F B48009            CJNE    A,#080H,?C0005?BT_IPC
   23: 		{
   24: 			new_wprt = mem_cmd_buf;
001C82 904E07            MOV     DPTR,#new_wprt
001C85 744F              MOV     A,#04FH
001C87 F0                MOVX    @DPTR,A
001C88 A3                INC     DPTR
001C89 E4                CLR     A
001C8A F0                MOVX    @DPTR,A
   25: 		}
001C8B         ?C0005?BT_IPC:
   26: 		for(i=0;i<pFIFO->len;i++)
001C8B E4                CLR     A
001C8C 904E09            MOV     DPTR,#i
001C8F F0                MOVX    @DPTR,A
001C90 A3                INC     DPTR
001C91 F0                MOVX    @DPTR,A
001C92         ?C0006?BT_IPC:
001C92 904E04            MOV     DPTR,#pFIFO
001C95 E0                MOVX    A,@DPTR
001C96 FB                MOV     R3,A
001C97 A3                INC     DPTR
001C98 E0                MOVX    A,@DPTR
001C99 FA                MOV     R2,A
001C9A A3                INC     DPTR
001C9B E0                MOVX    A,@DPTR
001C9C F9                MOV     R1,A
001C9D 1200F9            LCALL   ?C?CLDPTR
001CA0 FF                MOV     R7,A
001CA1 904E09            MOV     DPTR,#i
001CA4 E0                MOVX    A,@DPTR
001CA5 FC                MOV     R4,A
001CA6 A3                INC     DPTR
001CA7 E0                MOVX    A,@DPTR
001CA8 FD                MOV     R5,A
001CA9 C3                CLR     C
001CAA 9F                SUBB    A,R7
001CAB EC                MOV     A,R4
001CAC 9400              SUBB    A,#00H
001CAE 5047              JNC     ?C0007?BT_IPC
   27: 		{
   28: 			HWRITE(new_wprt++,pFIFO->DATA[i]);
001CB0 E9                MOV     A,R1
001CB1 2401              ADD     A,#01H
001CB3 F9                MOV     R1,A
001CB4 E4                CLR     A
001CB5 3A                ADDC    A,R2
001CB6 FA                MOV     R2,A
001CB7 E9                MOV     A,R1
001CB8 2D                ADD     A,R5
001CB9 F9                MOV     R1,A
001CBA EA                MOV     A,R2
001CBB 3C                ADDC    A,R4
001CBC FA                MOV     R2,A
001CBD 1200F9            LCALL   ?C?CLDPTR
001CC0 FF                MOV     R7,A
001CC1 904E07            MOV     DPTR,#new_wprt
001CC4 E4                CLR     A
001CC5 75F001            MOV     B,#01H
001CC8 1201C8            LCALL   ?C?ILDIX
001CCB 85F082            MOV     DPL,B
001CCE F583              MOV     DPH,A
001CD0 EF                MOV     A,R7
001CD1 F0                MOVX    @DPTR,A
   29: 			if(new_wprt == (mem_cmd_buf_end + 1))
001CD2 904E07            MOV     DPTR,#new_wprt
001CD5 E0                MOVX    A,@DPTR
001CD6 B44F0E            CJNE    A,#04FH,?C0008?BT_IPC
001CD9 A3                INC     DPTR
001CDA E0                MOVX    A,@DPTR
001CDB B48009            CJNE    A,#080H,?C0008?BT_IPC
   30: 			{
   31: 				new_wprt = mem_cmd_buf;
001CDE 904E07            MOV     DPTR,#new_wprt
001CE1 744F              MOV     A,#04FH
001CE3 F0                MOVX    @DPTR,A
001CE4 A3                INC     DPTR
001CE5 E4                CLR     A
001CE6 F0                MOVX    @DPTR,A
   32: 			}
   33: 		}
001CE7         ?C0008?BT_IPC:
001CE7 904E0A            MOV     DPTR,#i+01H
001CEA E0                MOVX    A,@DPTR
001CEB 04                INC     A
001CEC F0                MOVX    @DPTR,A
001CED 7006              JNZ     ?C0030?BT_IPC
001CEF 904E09            MOV     DPTR,#i
001CF2 E0                MOVX    A,@DPTR
001CF3 04                INC     A
001CF4 F0                MOVX    @DPTR,A
001CF5         ?C0030?BT_IPC:
001CF5 809B              SJMP    ?C0006?BT_IPC
001CF7         ?C0007?BT_IPC:
   34: 		BT_CmdWptr = ESWAP(new_wprt);
001CF7 904E07            MOV     DPTR,#new_wprt
001CFA E0                MOVX    A,@DPTR
001CFB FC                MOV     R4,A
001CFC A3                INC     DPTR
001CFD E0                MOVX    A,@DPTR
001CFE FA                MOV     R2,A
001CFF EC                MOV     A,R4
001D00 FF                MOV     R7,A
001D01 EA                MOV     A,R2
001D02 FE                MOV     R6,A
001D03 EF                MOV     A,R7
001D04 904A02            MOV     DPTR,#BT_CmdWptr
001D07 EE                MOV     A,R6
001D08 F0                MOVX    @DPTR,A
001D09 A3                INC     DPTR
001D0A EF                MOV     A,R7
001D0B F0                MOVX    @DPTR,A
   35: 		return true;
001D0C D3                SETB    C
001D0D 22                RET     
   36: 	}
001D0E         ?C0003?BT_IPC:
   37: 	else
   38: 	{
   39: 		return false;
001D0E C3                CLR     C
   40: 	}
   41: }
001D0F 22                RET     
----- FUNCTION _BT_CmdFifoIn (END) -------


----- FUNCTION _lxSettingDeviceRespone (BEGIN) -----
 FILE: 'lxProtocol.c'
  351: static void lxSettingDeviceRespone(u16_t cmd, u8_t state)
  352: {
;---- Variable 'cmd' assigned to Register 'R2/R3' ----
001D10 AB07              MOV     R3,AR7
001D12 AA06              MOV     R2,AR6
;---- Variable 'state' assigned to Register 'R5' ----
  353: 	btCmdBuf.len = DEVICE_RSP_DATA_LEN + 5;
  354: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
001D14 904C63            MOV     DPTR,#btCmdBuf
001D17 740A              MOV     A,#0AH
001D19 F0                MOVX    @DPTR,A
  355: 	btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
001D1A A3                INC     DPTR
001D1B 7430              MOV     A,#030H
001D1D F0                MOVX    @DPTR,A
  356: 	btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
001D1E A3                INC     DPTR
001D1F 741C              MOV     A,#01CH
001D21 F0                MOVX    @DPTR,A
  357: 	btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
001D22 E4                CLR     A
001D23 A3                INC     DPTR
001D24 F0                MOVX    @DPTR,A
  358: 	btCmdBuf.DATA[4] = DEVICE_RSP_DATA_LEN;
001D25 A3                INC     DPTR
001D26 7410              MOV     A,#010H
001D28 F0                MOVX    @DPTR,A
  359: 	btCmdBuf.DATA[5] = LO_UINT16(CMD_DEVICE_RSP);
001D29 A3                INC     DPTR
001D2A 7405              MOV     A,#05H
001D2C F0                MOVX    @DPTR,A
  360: 	btCmdBuf.DATA[6] = HI_UINT16(CMD_DEVICE_RSP);
001D2D E4                CLR     A
001D2E A3                INC     DPTR
001D2F F0                MOVX    @DPTR,A
  361: 	btCmdBuf.DATA[7] = LO_UINT16(cmd);
001D30 A3                INC     DPTR
001D31 7410              MOV     A,#010H
001D33 F0                MOVX    @DPTR,A
  362: 	btCmdBuf.DATA[8] = HI_UINT16(cmd);
001D34 EF                MOV     A,R7
001D35 A3                INC     DPTR
001D36 F0                MOVX    @DPTR,A
  363: 	btCmdBuf.DATA[9] = state;
001D37 EE                MOV     A,R6
001D38 A3                INC     DPTR
001D39 F0                MOVX    @DPTR,A
  364: 
001D3A A3                INC     DPTR
001D3B ED                MOV     A,R5
001D3C F0                MOVX    @DPTR,A
  365: 	bigLittleEndianSwap(&(btCmdBuf.DATA[5]), DEVICE_RSP_DATA_LEN);
001D3D 7B01              MOV     R3,#01H
001D3F 7A4C              MOV     R2,#HIGH btCmdBuf+06H
001D41 7969              MOV     R1,#LOW btCmdBuf+06H
001D43 7D05              MOV     R5,#05H
001D45 7C00              MOV     R4,#00H
001D47 B16B              ACALL   _bigLittleEndianSwap
  366: 	BT_CmdFifoIn(&btCmdBuf);
001D49 7B01              MOV     R3,#01H
001D4B 7A4C              MOV     R2,#HIGH btCmdBuf
001D4D 7963              MOV     R1,#LOW btCmdBuf
001D4F 71EF              ACALL   _BT_CmdFifoIn
  367: 	YC_Delay10ms(10);
001D51 7F0A              MOV     R7,#0AH
;----                  JMP     _YC_Delay10ms
  368: }
----- FUNCTION _lxSettingDeviceRespone (END) -------


----- FUNCTION _YC_Delay10ms (BEGIN) -----
 FILE: 'YC_Utilities.c'
   60: void YC_Delay10ms(u8_t Time)
   61: {
;---- Variable 'Time' assigned to Register 'R7' ----
   62: 	u16_t j; 
   63: 	for(;Time>0;Time--)
001D53         ?C0027?YC_UTILITIES:
001D53 EF                MOV     A,R7
001D54 D3                SETB    C
001D55 9400              SUBB    A,#00H
001D57 4011              JC      ?C0033?YC_UTILITIES
   64: 	{
   65: 		for(j=0;j<11900;j++);
;---- Variable 'j' assigned to Register 'R4/R5' ----
001D59 E4                CLR     A
001D5A FD                MOV     R5,A
001D5B FC                MOV     R4,A
001D5C         ?C0030?YC_UTILITIES:
001D5C 0D                INC     R5
001D5D BD0001            CJNE    R5,#00H,?C0054?YC_UTILITIES
001D60 0C                INC     R4
001D61         ?C0054?YC_UTILITIES:
001D61 BC2EF8            CJNE    R4,#02EH,?C0030?YC_UTILITIES
001D64 BD7CF5            CJNE    R5,#07CH,?C0030?YC_UTILITIES
   66: 	}
001D67         ?C0029?YC_UTILITIES:
001D67 1F                DEC     R7
001D68 80E9              SJMP    ?C0027?YC_UTILITIES
   67: }
001D6A         ?C0033?YC_UTILITIES:
001D6A 22                RET     
----- FUNCTION _YC_Delay10ms (END) -------


----- FUNCTION _bigLittleEndianSwap (BEGIN) -----
 FILE: 'lxProtocol.c'
   17: static void bigLittleEndianSwap(u8_t *buf, u16_t len)
   18: {
001D6B 904DB7            MOV     DPTR,#buf
001D6E EB                MOV     A,R3
001D6F F0                MOVX    @DPTR,A
001D70 A3                INC     DPTR
001D71 EA                MOV     A,R2
001D72 F0                MOVX    @DPTR,A
001D73 A3                INC     DPTR
001D74 E9                MOV     A,R1
001D75 F0                MOVX    @DPTR,A
001D76 A3                INC     DPTR
001D77 EC                MOV     A,R4
001D78 F0                MOVX    @DPTR,A
001D79 A3                INC     DPTR
001D7A ED                MOV     A,R5
001D7B F0                MOVX    @DPTR,A
   19: 	u16_t i, size;
   20: 	u8_t temp;
   21: 	
   22: 	size = len -1;
001D7C 24FF              ADD     A,#0FFH
001D7E FE                MOV     R6,A
001D7F EC                MOV     A,R4
001D80 34FF              ADDC    A,#0FFH
001D82 904DBE            MOV     DPTR,#size
001D85 F0                MOVX    @DPTR,A
001D86 A3                INC     DPTR
001D87 CE                XCH     A,R6
001D88 F0                MOVX    @DPTR,A
   23: 	for(i=0; i<len/2; i++)
001D89 E4                CLR     A
001D8A 904DBC            MOV     DPTR,#i
001D8D F0                MOVX    @DPTR,A
001D8E A3                INC     DPTR
001D8F F0                MOVX    @DPTR,A
001D90         ?C0001?LXPROTOCOL:
001D90 904DBA            MOV     DPTR,#len
001D93 E0                MOVX    A,@DPTR
001D94 C3                CLR     C
001D95 13                RRC     A
001D96 FE                MOV     R6,A
001D97 A3                INC     DPTR
001D98 E0                MOVX    A,@DPTR
001D99 13                RRC     A
001D9A FF                MOV     R7,A
001D9B C3                CLR     C
001D9C 904DBD            MOV     DPTR,#i+01H
001D9F E0                MOVX    A,@DPTR
001DA0 9F                SUBB    A,R7
001DA1 904DBC            MOV     DPTR,#i
001DA4 E0                MOVX    A,@DPTR
001DA5 9E                SUBB    A,R6
001DA6 507D              JNC     ?C0004?LXPROTOCOL
   24: 	{
   25: 		temp = buf[i];
001DA8 904DB7            MOV     DPTR,#buf
001DAB E0                MOVX    A,@DPTR
001DAC FB                MOV     R3,A
001DAD A3                INC     DPTR
001DAE E0                MOVX    A,@DPTR
001DAF FA                MOV     R2,A
001DB0 A3                INC     DPTR
001DB1 E0                MOVX    A,@DPTR
001DB2 F9                MOV     R1,A
001DB3 904DBC            MOV     DPTR,#i
001DB6 E0                MOVX    A,@DPTR
001DB7 FE                MOV     R6,A
001DB8 A3                INC     DPTR
001DB9 E0                MOVX    A,@DPTR
001DBA F582              MOV     DPL,A
001DBC 8E83              MOV     DPH,R6
001DBE 120112            LCALL   ?C?CLDOPTR
001DC1 904DC0            MOV     DPTR,#temp
001DC4 F0                MOVX    @DPTR,A
   26: 		buf[i] = buf[size -i];
001DC5 904DBC            MOV     DPTR,#i
001DC8 E0                MOVX    A,@DPTR
001DC9 A3                INC     DPTR
001DCA E0                MOVX    A,@DPTR
001DCB FF                MOV     R7,A
001DCC C3                CLR     C
001DCD 904DBF            MOV     DPTR,#size+01H
001DD0 E0                MOVX    A,@DPTR
001DD1 9F                SUBB    A,R7
001DD2 FF                MOV     R7,A
001DD3 904DBE            MOV     DPTR,#size
001DD6 E0                MOVX    A,@DPTR
001DD7 9E                SUBB    A,R6
001DD8 8F82              MOV     DPL,R7
001DDA F583              MOV     DPH,A
001DDC 120112            LCALL   ?C?CLDOPTR
001DDF FF                MOV     R7,A
001DE0 904DBC            MOV     DPTR,#i
001DE3 E0                MOVX    A,@DPTR
001DE4 FC                MOV     R4,A
001DE5 A3                INC     DPTR
001DE6 E0                MOVX    A,@DPTR
001DE7 FD                MOV     R5,A
001DE8 F582              MOV     DPL,A
001DEA 8C83              MOV     DPH,R4
001DEC EF                MOV     A,R7
001DED 120151            LCALL   ?C?CSTOPTR
   27: 		buf[size -i] = temp;
001DF0 904DC0            MOV     DPTR,#temp
001DF3 E0                MOVX    A,@DPTR
001DF4 FF                MOV     R7,A
001DF5 C3                CLR     C
001DF6 904DBF            MOV     DPTR,#size+01H
001DF9 E0                MOVX    A,@DPTR
001DFA 9D                SUBB    A,R5
001DFB FD                MOV     R5,A
001DFC 904DBE            MOV     DPTR,#size
001DFF E0                MOVX    A,@DPTR
001E00 9C                SUBB    A,R4
001E01 FC                MOV     R4,A
001E02 904DB7            MOV     DPTR,#buf
001E05 E0                MOVX    A,@DPTR
001E06 FB                MOV     R3,A
001E07 A3                INC     DPTR
001E08 E0                MOVX    A,@DPTR
001E09 FA                MOV     R2,A
001E0A A3                INC     DPTR
001E0B E0                MOVX    A,@DPTR
001E0C F9                MOV     R1,A
001E0D 8D82              MOV     DPL,R5
001E0F 8C83              MOV     DPH,R4
001E11 EF                MOV     A,R7
001E12 120151            LCALL   ?C?CSTOPTR
   28: 	}
001E15 904DBD            MOV     DPTR,#i+01H
001E18 E0                MOVX    A,@DPTR
001E19 04                INC     A
001E1A F0                MOVX    @DPTR,A
001E1B 7006              JNZ     ?C0092?LXPROTOCOL
001E1D 904DBC            MOV     DPTR,#i
001E20 E0                MOVX    A,@DPTR
001E21 04                INC     A
001E22 F0                MOVX    @DPTR,A
001E23         ?C0092?LXPROTOCOL:
001E23 A190              AJMP    ?C0001?LXPROTOCOL
   29: }
001E25         ?C0004?LXPROTOCOL:
001E25 22                RET     
----- FUNCTION _bigLittleEndianSwap (END) -------


----- FUNCTION _lxRecvDataFromApp (BEGIN) -----
 FILE: 'lxProtocol.c'
   50: void lxRecvDataFromApp(BT_EVENTFIFO_t *event)
   51: {
001E26 904E1E            MOV     DPTR,#event
001E29 EB                MOV     A,R3
001E2A F0                MOVX    @DPTR,A
001E2B A3                INC     DPTR
001E2C EA                MOV     A,R2
001E2D F0                MOVX    @DPTR,A
001E2E A3                INC     DPTR
001E2F E9                MOV     A,R1
001E30 F0                MOVX    @DPTR,A
   52: 	//data[0]:total length, data[1~2]:handle
   53: 	//data[3]:frame control,data[4]:length,data[5~N]:content
   54: 	u8_t frameControl = event->DATA[3];
001E31 904E1E            MOV     DPTR,#event
001E34 E0                MOVX    A,@DPTR
001E35 FB                MOV     R3,A
001E36 A3                INC     DPTR
001E37 E0                MOVX    A,@DPTR
001E38 FA                MOV     R2,A
001E39 A3                INC     DPTR
001E3A E0                MOVX    A,@DPTR
001E3B F9                MOV     R1,A
001E3C 900004            MOV     DPTR,#04H
001E3F 120112            LCALL   ?C?CLDOPTR
001E42 904E21            MOV     DPTR,#frameControl
001E45 F0                MOVX    @DPTR,A
   55: 	u16_t cmd;
   56: 	
   57: 	bigLittleEndianSwap(&(event->DATA[5]), event->DATA[4]);
001E46 E9                MOV     A,R1
001E47 2406              ADD     A,#06H
001E49 F9                MOV     R1,A
001E4A E4                CLR     A
001E4B 3A                ADDC    A,R2
001E4C FA                MOV     R2,A
001E4D C002              PUSH    AR2
001E4F C001              PUSH    AR1
001E51 904E1E            MOV     DPTR,#event
001E54 E0                MOVX    A,@DPTR
001E55 A3                INC     DPTR
001E56 E0                MOVX    A,@DPTR
001E57 FA                MOV     R2,A
001E58 A3                INC     DPTR
001E59 E0                MOVX    A,@DPTR
001E5A F9                MOV     R1,A
001E5B 900005            MOV     DPTR,#05H
001E5E 120112            LCALL   ?C?CLDOPTR
001E61 FD                MOV     R5,A
001E62 7C00              MOV     R4,#00H
001E64 D001              POP     AR1
001E66 D002              POP     AR2
001E68 B16B              ACALL   _bigLittleEndianSwap
   58: 	cmd = event->DATA[5] | (event->DATA[6] << 8);
001E6A 904E1E            MOV     DPTR,#event
001E6D E0                MOVX    A,@DPTR
001E6E FB                MOV     R3,A
001E6F A3                INC     DPTR
001E70 E0                MOVX    A,@DPTR
001E71 FA                MOV     R2,A
001E72 A3                INC     DPTR
001E73 E0                MOVX    A,@DPTR
001E74 F9                MOV     R1,A
001E75 900007            MOV     DPTR,#07H
001E78 120112            LCALL   ?C?CLDOPTR
001E7B FE                MOV     R6,A
001E7C 900006            MOV     DPTR,#06H
001E7F 120112            LCALL   ?C?CLDOPTR
001E82 FD                MOV     R5,A
001E83 EE                MOV     A,R6
001E84 ED                MOV     A,R5
001E85 FF                MOV     R7,A
001E86 904E22            MOV     DPTR,#cmd
001E89 EE                MOV     A,R6
001E8A F0                MOVX    @DPTR,A
001E8B A3                INC     DPTR
001E8C EF                MOV     A,R7
001E8D F0                MOVX    @DPTR,A
   59: 	
   60: 	//numTotalFrames == 1
   61: 	if(frameControl == FRAME_CONTROL_SINGLE)
001E8E 904E21            MOV     DPTR,#frameControl
001E91 E0                MOVX    A,@DPTR
001E92 6410              XRL     A,#010H
001E94 6002              JZ      $ + 4H
001E96 E121              AJMP    ?C0007?LXPROTOCOL
   62: 	{
   63: 		//send ack
   64: 		lxSendRecvDataACK(HANDLE_UUIDA625_NOTIFY, RECV_ACK_SUCCESS);
001E98 7D01              MOV     R5,#01H
001E9A 7F25              MOV     R7,#025H
001E9C FE                MOV     R6,A
001E9D F171              ACALL   _lxSendRecvDataACK
   65: 
   66: 		//copy data
   67: 		xmemcpy(LX_RECV_BUF, &(event->DATA[5]), event->DATA[4]);
001E9F 904E1E            MOV     DPTR,#event
001EA2 E0                MOVX    A,@DPTR
001EA3 FB                MOV     R3,A
001EA4 A3                INC     DPTR
001EA5 E0                MOVX    A,@DPTR
001EA6 FA                MOV     R2,A
001EA7 A3                INC     DPTR
001EA8 E0                MOVX    A,@DPTR
001EA9 2406              ADD     A,#06H
001EAB F9                MOV     R1,A
001EAC E4                CLR     A
001EAD 3A                ADDC    A,R2
001EAE FA                MOV     R2,A
001EAF C002              PUSH    AR2
001EB1 C001              PUSH    AR1
001EB3 904E1E            MOV     DPTR,#event
001EB6 E0                MOVX    A,@DPTR
001EB7 A3                INC     DPTR
001EB8 E0                MOVX    A,@DPTR
001EB9 FA                MOV     R2,A
001EBA A3                INC     DPTR
001EBB E0                MOVX    A,@DPTR
001EBC F9                MOV     R1,A
001EBD 900005            MOV     DPTR,#05H
001EC0 120112            LCALL   ?C?CLDOPTR
001EC3 F51C              MOV     ?_xmemcpy?BYTE+05H,A
001EC5 D001              POP     AR1
001EC7 D002              POP     AR2
001EC9 7FA0              MOV     R7,#0A0H
001ECB 7E48              MOV     R6,#048H
001ECD 122E8B            LCALL   _xmemcpy
   68: 		
   69: 		switch(cmd)
001ED0 904E22            MOV     DPTR,#cmd
001ED3 E0                MOVX    A,@DPTR
001ED4 FE                MOV     R6,A
001ED5 A3                INC     DPTR
001ED6 E0                MOVX    A,@DPTR
001ED7 8EF0              MOV     B,R6
001ED9 120395            LCALL   ?C?ICASE
001EDC 1F00              DW      ?C0009?LXPROTOCOL
001EDE 0001              DW      01H
001EE0 1F04              DW      ?C0010?LXPROTOCOL
001EE2 0003              DW      03H
001EE4 1F08              DW      ?C0011?LXPROTOCOL
001EE6 0008              DW      08H
001EE8 1F0C              DW      ?C0012?LXPROTOCOL
001EEA 000A              DW      0AH
001EEC 1F10              DW      ?C0013?LXPROTOCOL
001EEE 1002              DW      01002H
001EF0 1F14              DW      ?C0014?LXPROTOCOL
001EF2 1004              DW      01004H
001EF4 1F18              DW      ?C0015?LXPROTOCOL
001EF6 1005              DW      01005H
001EF8 1F1C              DW      ?C0016?LXPROTOCOL
001EFA 4801              DW      04801H
001EFC 0000              DW      00H
001EFE 1F67              DW      ?C0023?LXPROTOCOL
   70: 		{
   71: 			case CMD_REGISTRATION_REQ:
001F00         ?C0009?LXPROTOCOL:
   72: 				changeLxOptStatus(OPT_REGISTER_REQ);
001F00 7F10              MOV     R7,#010H
001F02 8064              SJMP    _changeLxOptStatus
   73: 				break;
   74: 			case CMD_BIND_REQ:
001F04         ?C0010?LXPROTOCOL:
   75: 				changeLxOptStatus(OPT_BIND_REQ);
001F04 7F13              MOV     R7,#013H
001F06 8060              SJMP    _changeLxOptStatus
   76: 				break;
   77: 			case CMD_LOGIN_RSP:
001F08         ?C0011?LXPROTOCOL:
   78: 				changeLxOptStatus(OPT_LOGIN_RSP);
001F08 7F18              MOV     R7,#018H
001F0A 805C              SJMP    _changeLxOptStatus
   79: 				break;
   80: 			case CMD_INIT_RSP:
001F0C         ?C0012?LXPROTOCOL:
   81: 				changeLxOptStatus(OPT_INIT_RSP);
001F0C 7F22              MOV     R7,#022H
001F0E 8058              SJMP    _changeLxOptStatus
   82: 				break;
   83: 				
   84: 			case CMD_TIME_SETTING_REQ:
001F10         ?C0013?LXPROTOCOL:
   85: 				changeLxOptStatus(OPT_TIME_SETTING_REQ);
001F10 7F25              MOV     R7,#025H
001F12 8054              SJMP    _changeLxOptStatus
   86: 				break;
   87: 			case CMD_UNIT_SETTING_REQ:
001F14         ?C0014?LXPROTOCOL:
   88: 				changeLxOptStatus(OPT_UNIT_SETTING_REQ);
001F14 7F28              MOV     R7,#028H
001F16 8050              SJMP    _changeLxOptStatus
   89: 				break;
   90: 			case CMD_DATA_CLEAR_SETTING_REQ:
001F18         ?C0015?LXPROTOCOL:
   91: 				changeLxOptStatus(OPT_DATA_DEL_SETTING_REQ);
001F18 7F31              MOV     R7,#031H
001F1A 804C              SJMP    _changeLxOptStatus
   92: 				break;
   93: 				
   94: 			case CMD_SYNC_DATA_REQ:
001F1C         ?C0016?LXPROTOCOL:
   95: 				changeLxOptStatus(OPT_SYNC_DATA_REQ);
001F1C 7F35              MOV     R7,#035H
001F1E 8048              SJMP    _changeLxOptStatus
   96: 				break;
   97: 		}
   98: 		
   99: 	}
001F20 22                RET     
001F21         ?C0007?LXPROTOCOL:
  100: 	//ACK:numTotalFrames == 0
  101: 	else if(frameControl == FRAME_CONTROL_ACK)
001F21 904E21            MOV     DPTR,#frameControl
001F24 E0                MOVX    A,@DPTR
001F25 7040              JNZ     ?C0023?LXPROTOCOL
  102: 	{
  103: 		if(event->DATA[5] == RECV_ACK_SUCCESS)
001F27 904E1E            MOV     DPTR,#event
001F2A E0                MOVX    A,@DPTR
001F2B FB                MOV     R3,A
001F2C A3                INC     DPTR
001F2D E0                MOVX    A,@DPTR
001F2E FA                MOV     R2,A
001F2F A3                INC     DPTR
001F30 E0                MOVX    A,@DPTR
001F31 F9                MOV     R1,A
001F32 900006            MOV     DPTR,#06H
001F35 120112            LCALL   ?C?CLDOPTR
001F38 B40111            CJNE    A,#01H,?C0019?LXPROTOCOL
  104: 		{
  105: 			if(lxOptStatus == OPT_REGISTER_RSP_WAIT_ACK)
001F3B 904C5C            MOV     DPTR,#lxOptStatus
001F3E E0                MOVX    A,@DPTR
001F3F B41104            CJNE    A,#011H,?C0020?LXPROTOCOL
  106: 			{
  107: 				SpiFlashOperator(CS_CMD_WRITE_FLASH);
001F42 7F41              MOV     R7,#041H
001F44 F1DF              ACALL   _SpiFlashOperator
  108: 			}
001F46         ?C0020?LXPROTOCOL:
  109: 			
  110: 			lxOptStatus = OPT_IDLE;
001F46 E4                CLR     A
001F47 904C5C            MOV     DPTR,#lxOptStatus
001F4A F0                MOVX    @DPTR,A
  111: 		}
001F4B 22                RET     
001F4C         ?C0019?LXPROTOCOL:
  112: 		else
  113: 		{
  114: 			if(lxOptStatus == OPT_REGISTER_RSP_WAIT_ACK)
001F4C 904C5C            MOV     DPTR,#lxOptStatus
001F4F E0                MOVX    A,@DPTR
001F50 B4110F            CJNE    A,#011H,?C0022?LXPROTOCOL
  115: 			{
  116: 				xmemset(mem_register_buf , 0, 10);
001F53 7B0A              MOV     R3,#0AH
001F55 E4                CLR     A
001F56 FD                MOV     R5,A
001F57 7F0E              MOV     R7,#0EH
001F59 7E4C              MOV     R6,#04CH
001F5B F1A3              ACALL   _xmemset
  117: 				//update adv flag
  118: 				*(mem_le_adv_data + 13) = 0;
001F5D 9043E7            MOV     DPTR,#043E7H
001F60 E4                CLR     A
001F61 F0                MOVX    @DPTR,A
  119: 			}
001F62         ?C0022?LXPROTOCOL:
  120: 			lxOptStatus = OPT_IDLE;
001F62 E4                CLR     A
001F63 904C5C            MOV     DPTR,#lxOptStatus
001F66 F0                MOVX    @DPTR,A
  121: 		}
  122: 	}
  123: }
001F67         ?C0023?LXPROTOCOL:
001F67 22                RET     
----- FUNCTION _lxRecvDataFromApp (END) -------


----- FUNCTION _changeLxOptStatus (BEGIN) -----
 FILE: 'lxProtocol.c'
  125: void changeLxOptStatus(u8_t opt)
  126: {
;---- Variable 'opt' assigned to Register 'R7' ----
  127: 	if(lxOptStatus == OPT_IDLE)
  128: 	{
001F68 904C5C            MOV     DPTR,#lxOptStatus
001F6B E0                MOVX    A,@DPTR
001F6C 7002              JNZ     ?C0025?LXPROTOCOL
  129: 		lxOptStatus = opt;
  130: 	}
001F6E EF                MOV     A,R7
001F6F F0                MOVX    @DPTR,A
  131: }
  132: 
001F70         ?C0025?LXPROTOCOL:
001F70 22                RET     
----- FUNCTION _changeLxOptStatus (END) -------


----- FUNCTION _lxSendRecvDataACK (BEGIN) -----
 FILE: 'lxProtocol.c'
   31: static void lxSendRecvDataACK(u16_t handle, u8_t state)
   32: {
;---- Variable 'handle' assigned to Register 'R2/R3' ----
001F71 AB07              MOV     R3,AR7
001F73 AA06              MOV     R2,AR6
;---- Variable 'state' assigned to Register 'R5' ----
   33: 	if(notifyValueUUIDA625 != NOTIFY_ENABLE)
   34: 	{
001F75 904C5A            MOV     DPTR,#notifyValueUUIDA625
001F78 E0                MOVX    A,@DPTR
001F79 6401              XRL     A,#01H
001F7B 7025              JNZ     ?C0006?LXPROTOCOL
   35: 		return;
   36: 	}
001F7D         ?C0005?LXPROTOCOL:
   37: 
   38: 	btCmdBuf.len = 0x06;
001F7D 904C63            MOV     DPTR,#btCmdBuf
001F80 7406              MOV     A,#06H
001F82 F0                MOVX    @DPTR,A
   39: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
001F83 A3                INC     DPTR
001F84 7430              MOV     A,#030H
001F86 F0                MOVX    @DPTR,A
   40: 	btCmdBuf.DATA[1] = LO_UINT16(handle);
001F87 EB                MOV     A,R3
001F88 A3                INC     DPTR
001F89 F0                MOVX    @DPTR,A
   41: 	btCmdBuf.DATA[2] = HI_UINT16(handle);
001F8A EA                MOV     A,R2
001F8B A3                INC     DPTR
001F8C F0                MOVX    @DPTR,A
   42: 	btCmdBuf.DATA[3] = ACK_FRAME;
001F8D E4                CLR     A
001F8E A3                INC     DPTR
001F8F F0                MOVX    @DPTR,A
   43: 	btCmdBuf.DATA[4] = RECV_ACK_FRAME_LEN;
001F90 A3                INC     DPTR
001F91 04                INC     A
001F92 F0                MOVX    @DPTR,A
   44: 	btCmdBuf.DATA[5] = state;
001F93 A3                INC     DPTR
001F94 ED                MOV     A,R5
001F95 F0                MOVX    @DPTR,A
   45: 	
   46: 	BT_CmdFifoIn(&btCmdBuf);
001F96 7B01              MOV     R3,#01H
001F98 7A4C              MOV     R2,#HIGH btCmdBuf
001F9A 7963              MOV     R1,#LOW btCmdBuf
001F9C 71EF              ACALL   _BT_CmdFifoIn
   47: 	YC_Delay10ms(10);
001F9E 7F0A              MOV     R7,#0AH
001FA0 B153              ACALL   _YC_Delay10ms
   48: }
001FA2         ?C0006?LXPROTOCOL:
001FA2 22                RET     
----- FUNCTION _lxSendRecvDataACK (END) -------


----- FUNCTION _xmemset (BEGIN) -----
 FILE: 'YC_Utilities.c'
   10: void xmemset(pxbyte addr, u8_t value, u8_t len) small
   11: {
001FA3 8E1D              MOV     addr,R6
001FA5 8F1E              MOV     addr+01H,R7
;---- Variable 'len' assigned to Register 'R3' ----
;---- Variable 'value' assigned to Register 'R5' ----
001FA7         ?C0002?YC_UTILITIES:
   12: 	while(len--)
001FA7 AF03              MOV     R7,AR3
001FA9 1B                DEC     R3
001FAA EF                MOV     A,R7
001FAB 6013              JZ      ?C0004?YC_UTILITIES
   13: 		*addr++ = value;
001FAD 051E              INC     addr+01H
001FAF E51E              MOV     A,addr+01H
001FB1 AE1D              MOV     R6,addr
001FB3 7002              JNZ     ?C0044?YC_UTILITIES
001FB5 051D              INC     addr
001FB7         ?C0044?YC_UTILITIES:
001FB7 14                DEC     A
001FB8 F582              MOV     DPL,A
001FBA 8E83              MOV     DPH,R6
001FBC ED                MOV     A,R5
001FBD F0                MOVX    @DPTR,A
001FBE 80E7              SJMP    ?C0002?YC_UTILITIES
   14: 	return;
   15: }
001FC0         ?C0004?YC_UTILITIES:
001FC0 22                RET     
----- FUNCTION _xmemset (END) -------


----- FUNCTION delUserData (BEGIN) -----
 FILE: 'lxProtocol.c'
  370: static void delUserData(void)
  371: {
  372: 	//(mem_register_buf) = DEVICE_UNREGISTERED;
  373: 	//*(mem_le_adv_data + 13) = *(mem_register_buf);
  374: 	xmemset((u8_t *)&deviceInfo, 0, sizeof(DeviceInfo_t));
001FC1 7E4C              MOV     R6,#HIGH deviceInfo
001FC3 7F06              MOV     R7,#LOW deviceInfo
001FC5 7B0A              MOV     R3,#0AH
001FC7 E4                CLR     A
001FC8 FD                MOV     R5,A
001FC9 F1A3              ACALL   _xmemset
  375: 	QueueInit();
001FCB 123F1B            LCALL   QueueInit
  376: 	*(mem_le_adv_data + 13) = DEVICE_UNREGISTERED;
001FCE 9043E7            MOV     DPTR,#043E7H
001FD1 E4                CLR     A
001FD2 F0                MOVX    @DPTR,A
  377: 	UTCTime = 0;
001FD3 904C5E            MOV     DPTR,#UTCTime
001FD6 12033E            LCALL   ?C?LSTKXDATA
001FD9 00                DB      00H
001FDA 00                DB      00H
001FDB 00                DB      00H
001FDC 00                DB      00H
  378: 	SpiFlashOperator(CS_CMD_WRITE_FLASH);
001FDD 7F41              MOV     R7,#041H
;----                  JMP     _SpiFlashOperator
  379: }
----- FUNCTION delUserData (END) -------


----- FUNCTION _SpiFlashOperator (BEGIN) -----
 FILE: 'lxProtocol.c'
  469: void SpiFlashOperator(u8_t opt)
  470: {
001FDF 904E5C            MOV     DPTR,#opt
001FE2 EF                MOV     A,R7
001FE3 F0                MOVX    @DPTR,A
  471: #if 1
  472: 	if(CS_CMD_READ_FLASH == opt)
001FE4 BF4017            CJNE    R7,#040H,?C0083?LXPROTOCOL
  473: 	{
  474: 		SPIFlashRead(mem_spiflash_buf, SPIFLASH_DATA_ADDR, SPIFLASH_READ_LENGTH);
001FE7 7B01              MOV     R3,#01H
001FE9 7A4C              MOV     R2,#04CH
001FEB 7900              MOV     R1,#00H
001FED 904DEB            MOV     DPTR,#?_SPIFlashRead?BYTE+07H
001FF0 744C              MOV     A,#04CH
001FF2 F0                MOVX    @DPTR,A
001FF3 7F00              MOV     R7,#00H
001FF5 7EA0              MOV     R6,#0A0H
001FF7 7D00              MOV     R5,#00H
001FF9 7C00              MOV     R4,#00H
001FFB 0221FD            LJMP    _SPIFlashRead
  475: 	}
001FFE         ?C0083?LXPROTOCOL:
  476: 	else if(CS_CMD_WRITE_FLASH == opt)
001FFE 904E5C            MOV     DPTR,#opt
002001 E0                MOVX    A,@DPTR
002002 B44120            CJNE    A,#041H,?C0086?LXPROTOCOL
  477: 	{
  478: 		SPIFlashEraseSector(SPIFLASH_DATA_ADDR);
002005 7F00              MOV     R7,#00H
002007 7EA0              MOV     R6,#0A0H
002009 7D00              MOV     R5,#00H
00200B 7C00              MOV     R4,#00H
00200D 1126              ACALL   _SPIFlashEraseSector
  479: 		SPIFlashWrite(mem_spiflash_buf, SPIFLASH_DATA_ADDR, SPIFLASH_READ_LENGTH);
00200F 7B01              MOV     R3,#01H
002011 7A4C              MOV     R2,#04CH
002013 7900              MOV     R1,#00H
002015 904DE3            MOV     DPTR,#?_SPIFlashWrite?BYTE+07H
002018 744C              MOV     A,#04CH
00201A F0                MOVX    @DPTR,A
00201B 7F00              MOV     R7,#00H
00201D 7EA0              MOV     R6,#0A0H
00201F 7D00              MOV     R5,#00H
002021 7C00              MOV     R4,#00H
002023 11AE              ACALL   _SPIFlashWrite
  480: 	}
  481: #else
  482: 	btCmdBuf.len = 1;
  483: 	btCmdBuf.DATA[0] = opt;
  484: 	BT_CmdFifoIn(&btCmdBuf);
  485: 	YC_Delay10ms(10);
  486: #endif
  487: }
002025         ?C0086?LXPROTOCOL:
002025 22                RET     
----- FUNCTION _SpiFlashOperator (END) -------


----- FUNCTION _SPIFlashEraseSector (BEGIN) -----
 FILE: 'spiflash.c'
   50: void SPIFlashEraseSector(u32_t addr)
   51: {
002026 904E2E            MOV     DPTR,#addr
002029 119C              ACALL   ?L?COM0001
   52: 	SPIFlashWriteEnable();
   53: 	SPIFlashWaitBusy();
   54: 	*(SF_TX_BUF) = SF_SECTOR_ERASE;
00202B 9001BC            MOV     DPTR,#01BCH
00202E 7420              MOV     A,#020H
002030 F0                MOVX    @DPTR,A
   55: 	*(SF_TX_BUF+1) = (addr>>16);
002031 904E2E            MOV     DPTR,#addr
002034 E0                MOVX    A,@DPTR
002035 FC                MOV     R4,A
002036 A3                INC     DPTR
002037 E0                MOVX    A,@DPTR
002038 FD                MOV     R5,A
002039 A3                INC     DPTR
00203A E0                MOVX    A,@DPTR
00203B FE                MOV     R6,A
00203C A3                INC     DPTR
00203D E0                MOVX    A,@DPTR
00203E FF                MOV     R7,A
00203F 7810              MOV     R0,#010H
002041 12030C            LCALL   ?C?ULSHR
002044 9001BD            MOV     DPTR,#01BDH
002047 EF                MOV     A,R7
002048 F0                MOVX    @DPTR,A
   56: 	*(SF_TX_BUF+2) = (addr>>8);
002049 904E2E            MOV     DPTR,#addr
00204C E0                MOVX    A,@DPTR
00204D FC                MOV     R4,A
00204E A3                INC     DPTR
00204F E0                MOVX    A,@DPTR
002050 FD                MOV     R5,A
002051 A3                INC     DPTR
002052 E0                MOVX    A,@DPTR
002053 FE                MOV     R6,A
002054 A3                INC     DPTR
002055 E0                MOVX    A,@DPTR
002056 FF                MOV     R7,A
002057 7808              MOV     R0,#08H
002059 12030C            LCALL   ?C?ULSHR
00205C 9001BE            MOV     DPTR,#01BEH
00205F EF                MOV     A,R7
002060 F0                MOVX    @DPTR,A
   57: 	*(SF_TX_BUF+3) = (addr&0xff);
002061 904E2E            MOV     DPTR,#addr
002064 E0                MOVX    A,@DPTR
002065 FC                MOV     R4,A
002066 A3                INC     DPTR
002067 E0                MOVX    A,@DPTR
002068 FD                MOV     R5,A
002069 A3                INC     DPTR
00206A E0                MOVX    A,@DPTR
00206B FE                MOV     R6,A
00206C A3                INC     DPTR
00206D E0                MOVX    A,@DPTR
00206E FF                MOV     R7,A
00206F E4                CLR     A
002070 9001BF            MOV     DPTR,#01BFH
002073 EF                MOV     A,R7
002074 F0                MOVX    @DPTR,A
   58: 	REG_SPID_TXLEN = ESWAP(4);
002075 908088            MOV     DPTR,#08088H
002078 7404              MOV     A,#04H
00207A F0                MOVX    @DPTR,A
00207B A3                INC     DPTR
00207C E4                CLR     A
00207D F0                MOVX    @DPTR,A
   59: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
00207E A3                INC     DPTR
00207F 74BC              MOV     A,#0BCH
002081 F0                MOVX    @DPTR,A
002082 A3                INC     DPTR
002083 7401              MOV     A,#01H
002085 F0                MOVX    @DPTR,A
   60: 	REG_SPID_RXLEN = ESWAP(0);
002086 90808E            MOV     DPTR,#0808EH
002089 E4                CLR     A
00208A F0                MOVX    @DPTR,A
00208B A3                INC     DPTR
00208C F0                MOVX    @DPTR,A
   61: 	REG_MISC_CTRL = SPID_START;
00208D 908006            MOV     DPTR,#08006H
002090 7402              MOV     A,#02H
002092 F0                MOVX    @DPTR,A
002093         ?C0010?SPIFLASH:
   62: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
002093 90812C            MOV     DPTR,#0812CH
002096 E0                MOVX    A,@DPTR
002097 30E3F9            JNB     ACC.3,?C0010?SPIFLASH
00209A         ?C0011?SPIFLASH:
   63: 	SPIFlashWaitBusy();
00209A 8005              SJMP    SPIFlashWaitBusy
   64: }
----- FUNCTION _SPIFlashEraseSector (END) -------


----- FUNCTION ?L?COM0001 (BEGIN) -----
00209C 120332            LCALL   ?C?LSTXDATA
00209F 316F              ACALL   SPIFlashWriteEnable
----- FUNCTION SPIFlashWaitBusy (BEGIN) -----
 FILE: 'spiflash.c'
   44: void SPIFlashWaitBusy(void)
   45: {
   46: 	while((SPIFlashReadSR()&0x01) == 0x01) {	//wait for BUSY
0020A1         ?C0007?SPIFLASH:
   47: 		YC_Delay1ms(1);
0020A1 31B3              ACALL   SPIFlashReadSR
0020A3 EF                MOV     A,R7
0020A4 30E006            JNB     ACC.0,?C0009?SPIFLASH
   48: 	}
0020A7 7F01              MOV     R7,#01H
0020A9 319B              ACALL   _YC_Delay1ms
   49: }
0020AB 80F4              SJMP    ?C0007?SPIFLASH
   50: void SPIFlashEraseSector(u32_t addr)
0020AD         ?C0009?SPIFLASH:
0020AD 22                RET     
----- FUNCTION SPIFlashWaitBusy (END) -------


----- FUNCTION _SPIFlashWrite (BEGIN) -----
 FILE: 'spiflash.c'
   65: void SPIFlashWrite(u8_t *buf, u32_t addr, u8_t len)
   66: {
0020AE 904DDC            MOV     DPTR,#buf
0020B1 EB                MOV     A,R3
0020B2 F0                MOVX    @DPTR,A
0020B3 A3                INC     DPTR
0020B4 EA                MOV     A,R2
0020B5 F0                MOVX    @DPTR,A
0020B6 A3                INC     DPTR
0020B7 E9                MOV     A,R1
0020B8 F0                MOVX    @DPTR,A
0020B9 A3                INC     DPTR
0020BA 119C              ACALL   ?L?COM0001
   67: 	u8_t i;
   68: 	SPIFlashWriteEnable();
   69: 	SPIFlashWaitBusy();
   70: 	for(i=0;i<len;i++) {
;---- Variable 'i' assigned to Register 'R7' ----
0020BC E4                CLR     A
0020BD FF                MOV     R7,A
0020BE         ?C0013?SPIFLASH:
0020BE 904DE3            MOV     DPTR,#len
0020C1 E0                MOVX    A,@DPTR
0020C2 FE                MOV     R6,A
0020C3 EF                MOV     A,R7
0020C4 C3                CLR     C
0020C5 9E                SUBB    A,R6
0020C6 5023              JNC     ?C0014?SPIFLASH
   71: 		*(SF_TX_BUF+4+i) = buf[i];
0020C8 904DDC            MOV     DPTR,#buf
0020CB E0                MOVX    A,@DPTR
0020CC FB                MOV     R3,A
0020CD A3                INC     DPTR
0020CE E0                MOVX    A,@DPTR
0020CF FA                MOV     R2,A
0020D0 A3                INC     DPTR
0020D1 E0                MOVX    A,@DPTR
0020D2 F9                MOV     R1,A
0020D3 8F82              MOV     DPL,R7
0020D5 758300            MOV     DPH,#00H
0020D8 120112            LCALL   ?C?CLDOPTR
0020DB FE                MOV     R6,A
0020DC 74C0              MOV     A,#0C0H
0020DE 2F                ADD     A,R7
0020DF F582              MOV     DPL,A
0020E1 E4                CLR     A
0020E2 3401              ADDC    A,#01H
0020E4 F583              MOV     DPH,A
0020E6 EE                MOV     A,R6
0020E7 F0                MOVX    @DPTR,A
   72: 	}
0020E8 0F                INC     R7
0020E9 80D3              SJMP    ?C0013?SPIFLASH
0020EB         ?C0014?SPIFLASH:
   73: 	*(SF_TX_BUF) = SF_PAGE_PROGRAM;
0020EB 9001BC            MOV     DPTR,#01BCH
0020EE 7402              MOV     A,#02H
0020F0 F0                MOVX    @DPTR,A
   74: 	*(SF_TX_BUF+1) = (addr>>16);
0020F1 904DDF            MOV     DPTR,#addr
0020F4 E0                MOVX    A,@DPTR
0020F5 FC                MOV     R4,A
0020F6 A3                INC     DPTR
0020F7 E0                MOVX    A,@DPTR
0020F8 FD                MOV     R5,A
0020F9 A3                INC     DPTR
0020FA E0                MOVX    A,@DPTR
0020FB FE                MOV     R6,A
0020FC A3                INC     DPTR
0020FD E0                MOVX    A,@DPTR
0020FE FF                MOV     R7,A
0020FF 7810              MOV     R0,#010H
002101 12030C            LCALL   ?C?ULSHR
002104 9001BD            MOV     DPTR,#01BDH
002107 EF                MOV     A,R7
002108 F0                MOVX    @DPTR,A
   75: 	*(SF_TX_BUF+2) = (addr>>8);
002109 904DDF            MOV     DPTR,#addr
00210C E0                MOVX    A,@DPTR
00210D FC                MOV     R4,A
00210E A3                INC     DPTR
00210F E0                MOVX    A,@DPTR
002110 FD                MOV     R5,A
002111 A3                INC     DPTR
002112 E0                MOVX    A,@DPTR
002113 FE                MOV     R6,A
002114 A3                INC     DPTR
002115 E0                MOVX    A,@DPTR
002116 FF                MOV     R7,A
002117 7808              MOV     R0,#08H
002119 12030C            LCALL   ?C?ULSHR
00211C 9001BE            MOV     DPTR,#01BEH
00211F EF                MOV     A,R7
002120 F0                MOVX    @DPTR,A
   76: 	*(SF_TX_BUF+3) = (addr&0xff);
002121 904DDF            MOV     DPTR,#addr
002124 E0                MOVX    A,@DPTR
002125 FC                MOV     R4,A
002126 A3                INC     DPTR
002127 E0                MOVX    A,@DPTR
002128 FD                MOV     R5,A
002129 A3                INC     DPTR
00212A E0                MOVX    A,@DPTR
00212B FE                MOV     R6,A
00212C A3                INC     DPTR
00212D E0                MOVX    A,@DPTR
00212E FF                MOV     R7,A
00212F E4                CLR     A
002130 9001BF            MOV     DPTR,#01BFH
002133 EF                MOV     A,R7
002134 F0                MOVX    @DPTR,A
   77: 	REG_SPID_TXLEN = ESWAP(len+4);
002135 904DE3            MOV     DPTR,#len
002138 E0                MOVX    A,@DPTR
002139 2404              ADD     A,#04H
00213B FD                MOV     R5,A
00213C E4                CLR     A
00213D 33                RLC     A
00213E FC                MOV     R4,A
00213F ED                MOV     A,R5
002140 FA                MOV     R2,A
002141 EC                MOV     A,R4
002142 FF                MOV     R7,A
002143 33                RLC     A
002144 95E0              SUBB    A,ACC
002146 EA                MOV     A,R2
002147 FE                MOV     R6,A
002148 EF                MOV     A,R7
002149 908088            MOV     DPTR,#08088H
00214C EE                MOV     A,R6
00214D F0                MOVX    @DPTR,A
00214E A3                INC     DPTR
00214F EF                MOV     A,R7
002150 F0                MOVX    @DPTR,A
   78: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
002151 A3                INC     DPTR
002152 74BC              MOV     A,#0BCH
002154 F0                MOVX    @DPTR,A
002155 A3                INC     DPTR
002156 7401              MOV     A,#01H
002158 F0                MOVX    @DPTR,A
   79: 	REG_SPID_RXLEN = ESWAP(0);
002159 90808E            MOV     DPTR,#0808EH
00215C E4                CLR     A
00215D F0                MOVX    @DPTR,A
00215E A3                INC     DPTR
00215F F0                MOVX    @DPTR,A
   80: 	REG_MISC_CTRL = SPID_START;
002160 908006            MOV     DPTR,#08006H
002163 7402              MOV     A,#02H
002165 F0                MOVX    @DPTR,A
002166         ?C0016?SPIFLASH:
   81: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
002166 90812C            MOV     DPTR,#0812CH
002169 E0                MOVX    A,@DPTR
00216A 30E3F9            JNB     ACC.3,?C0016?SPIFLASH
00216D         ?C0017?SPIFLASH:
   82: 	SPIFlashWaitBusy();
00216D 01A1              AJMP    SPIFlashWaitBusy
   83: }
----- FUNCTION _SPIFlashWrite (END) -------


----- FUNCTION SPIFlashWriteEnable (BEGIN) -----
 FILE: 'spiflash.c'
   35: void SPIFlashWriteEnable(void)
   36: {
   37: 	REG_SPID_RXLEN = ESWAP(0);
   38: 	REG_SPID_TXLEN = ESWAP(1);
00216F 90808E            MOV     DPTR,#0808EH
002172 E4                CLR     A
002173 F0                MOVX    @DPTR,A
002174 A3                INC     DPTR
002175 F0                MOVX    @DPTR,A
   39: 	*SF_TX_BUF = SF_WRITE_ENABLE;
002176 908088            MOV     DPTR,#08088H
002179 04                INC     A
00217A F0                MOVX    @DPTR,A
00217B A3                INC     DPTR
00217C E4                CLR     A
00217D F0                MOVX    @DPTR,A
   40: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
00217E 9001BC            MOV     DPTR,#01BCH
002181 7406              MOV     A,#06H
002183 F0                MOVX    @DPTR,A
   41: 	REG_MISC_CTRL = SPID_START;
002184 90808A            MOV     DPTR,#0808AH
002187 74BC              MOV     A,#0BCH
002189 F0                MOVX    @DPTR,A
00218A A3                INC     DPTR
00218B 7401              MOV     A,#01H
00218D F0                MOVX    @DPTR,A
   42: 	while((REG_DMA_STATUS&(1<<3)) == 0);
00218E 908006            MOV     DPTR,#08006H
002191 04                INC     A
002192 F0                MOVX    @DPTR,A
002193         ?C0004?SPIFLASH:
   43: }
002193 90812C            MOV     DPTR,#0812CH
002196 E0                MOVX    A,@DPTR
002197 30E3F9            JNB     ACC.3,?C0004?SPIFLASH
   44: void SPIFlashWaitBusy(void)
00219A 22                RET     
----- FUNCTION SPIFlashWriteEnable (END) -------


----- FUNCTION _YC_Delay1ms (BEGIN) -----
 FILE: 'YC_Utilities.c'
   51: void YC_Delay1ms(u8_t Time)
   52: {
;---- Variable 'Time' assigned to Register 'R7' ----
   53: 	u16_t j; 
   54: 	for(;Time>0;Time--)
00219B         ?C0020?YC_UTILITIES:
00219B EF                MOV     A,R7
00219C D3                SETB    C
00219D 9400              SUBB    A,#00H
00219F 4011              JC      ?C0026?YC_UTILITIES
   55: 	{
   56: 		for(j=0;j<1160;j++);
;---- Variable 'j' assigned to Register 'R4/R5' ----
0021A1 E4                CLR     A
0021A2 FD                MOV     R5,A
0021A3 FC                MOV     R4,A
0021A4         ?C0023?YC_UTILITIES:
0021A4 0D                INC     R5
0021A5 BD0001            CJNE    R5,#00H,?C0053?YC_UTILITIES
0021A8 0C                INC     R4
0021A9         ?C0053?YC_UTILITIES:
0021A9 BC04F8            CJNE    R4,#04H,?C0023?YC_UTILITIES
0021AC BD88F5            CJNE    R5,#088H,?C0023?YC_UTILITIES
   57: 	}
0021AF         ?C0022?YC_UTILITIES:
0021AF 1F                DEC     R7
0021B0 80E9              SJMP    ?C0020?YC_UTILITIES
   58: }
0021B2         ?C0026?YC_UTILITIES:
0021B2 22                RET     
----- FUNCTION _YC_Delay1ms (END) -------


----- FUNCTION SPIFlashReadSR (BEGIN) -----
 FILE: 'spiflash.c'
   21: u8_t SPIFlashReadSR(void)
   22: {
   23: 	u8_t status;
   24: 	status = 0xff;
0021B3 904E57            MOV     DPTR,#status
0021B6 74FF              MOV     A,#0FFH
0021B8 F0                MOVX    @DPTR,A
   25: 	REG_SPID_RXLEN = ESWAP(1);
0021B9 90808E            MOV     DPTR,#0808EH
0021BC 7401              MOV     A,#01H
0021BE F0                MOVX    @DPTR,A
0021BF A3                INC     DPTR
0021C0 E4                CLR     A
0021C1 F0                MOVX    @DPTR,A
   26: 	REG_SPID_TXLEN = ESWAP(1);
0021C2 908088            MOV     DPTR,#08088H
0021C5 04                INC     A
0021C6 F0                MOVX    @DPTR,A
0021C7 A3                INC     DPTR
0021C8 E4                CLR     A
0021C9 F0                MOVX    @DPTR,A
   27: 	*SF_TX_BUF = SF_READ_STATUS_REG;
0021CA 9001BC            MOV     DPTR,#01BCH
0021CD 7405              MOV     A,#05H
0021CF F0                MOVX    @DPTR,A
   28: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
0021D0 90808A            MOV     DPTR,#0808AH
0021D3 74BC              MOV     A,#0BCH
0021D5 F0                MOVX    @DPTR,A
0021D6 A3                INC     DPTR
0021D7 7401              MOV     A,#01H
0021D9 F0                MOVX    @DPTR,A
   29: 	REG_SPID_RXADDR = ESWAP((u16_t)(&status));
0021DA 7D57              MOV     R5,#LOW status
0021DC ED                MOV     A,R5
0021DD FA                MOV     R2,A
0021DE 744E              MOV     A,#HIGH status
0021E0 FF                MOV     R7,A
0021E1 EA                MOV     A,R2
0021E2 FE                MOV     R6,A
0021E3 EF                MOV     A,R7
0021E4 A3                INC     DPTR
0021E5 EE                MOV     A,R6
0021E6 F0                MOVX    @DPTR,A
0021E7 A3                INC     DPTR
0021E8 EF                MOV     A,R7
0021E9 F0                MOVX    @DPTR,A
   30: 	REG_MISC_CTRL = SPID_START;
0021EA 908006            MOV     DPTR,#08006H
0021ED 7402              MOV     A,#02H
0021EF F0                MOVX    @DPTR,A
0021F0         ?C0001?SPIFLASH:
   31: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
0021F0 90812C            MOV     DPTR,#0812CH
0021F3 E0                MOVX    A,@DPTR
0021F4 30E3F9            JNB     ACC.3,?C0001?SPIFLASH
0021F7         ?C0002?SPIFLASH:
   32: 	//YC_UARTSendData(&status, 1);
   33: 	return status;
0021F7 904E57            MOV     DPTR,#status
0021FA E0                MOVX    A,@DPTR
0021FB FF                MOV     R7,A
   34: }
0021FC 22                RET     
----- FUNCTION SPIFlashReadSR (END) -------


----- FUNCTION _SPIFlashRead (BEGIN) -----
 FILE: 'spiflash.c'
   84: void SPIFlashRead(u8_t *buf, u32_t addr, u8_t len)
   85: {
0021FD 904DE7            MOV     DPTR,#addr
002200 120332            LCALL   ?C?LSTXDATA
;---- Variable 'buf' assigned to Register 'R1/R2/R3' ----
   86: 	REG_SPID_RXLEN = ESWAP(len);
   87: 	REG_SPID_TXLEN = ESWAP(4);
002203 904DEB            MOV     DPTR,#len
002206 E0                MOVX    A,@DPTR
002207 FD                MOV     R5,A
002208 FE                MOV     R6,A
002209 E4                CLR     A
00220A 90808E            MOV     DPTR,#0808EH
00220D EE                MOV     A,R6
00220E F0                MOVX    @DPTR,A
00220F A3                INC     DPTR
002210 E4                CLR     A
002211 F0                MOVX    @DPTR,A
   88: 	*SF_TX_BUF = SF_READ_DATA;
002212 908088            MOV     DPTR,#08088H
002215 7404              MOV     A,#04H
002217 F0                MOVX    @DPTR,A
002218 A3                INC     DPTR
002219 E4                CLR     A
00221A F0                MOVX    @DPTR,A
   89: 	*(SF_TX_BUF+1) = (addr>>16);
00221B 9001BC            MOV     DPTR,#01BCH
00221E 7403              MOV     A,#03H
002220 F0                MOVX    @DPTR,A
   90: 	*(SF_TX_BUF+2) = (addr>>8);
002221 904DE7            MOV     DPTR,#addr
002224 E0                MOVX    A,@DPTR
002225 FC                MOV     R4,A
002226 A3                INC     DPTR
002227 E0                MOVX    A,@DPTR
002228 FD                MOV     R5,A
002229 A3                INC     DPTR
00222A E0                MOVX    A,@DPTR
00222B FE                MOV     R6,A
00222C A3                INC     DPTR
00222D E0                MOVX    A,@DPTR
00222E FF                MOV     R7,A
00222F 7810              MOV     R0,#010H
002231 12030C            LCALL   ?C?ULSHR
002234 9001BD            MOV     DPTR,#01BDH
002237 EF                MOV     A,R7
002238 F0                MOVX    @DPTR,A
   91: 	*(SF_TX_BUF+3) = (addr&0xff);
002239 904DE7            MOV     DPTR,#addr
00223C E0                MOVX    A,@DPTR
00223D FC                MOV     R4,A
00223E A3                INC     DPTR
00223F E0                MOVX    A,@DPTR
002240 FD                MOV     R5,A
002241 A3                INC     DPTR
002242 E0                MOVX    A,@DPTR
002243 FE                MOV     R6,A
002244 A3                INC     DPTR
002245 E0                MOVX    A,@DPTR
002246 FF                MOV     R7,A
002247 7808              MOV     R0,#08H
002249 12030C            LCALL   ?C?ULSHR
00224C 9001BE            MOV     DPTR,#01BEH
00224F EF                MOV     A,R7
002250 F0                MOVX    @DPTR,A
   92: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
002251 904DE7            MOV     DPTR,#addr
002254 E0                MOVX    A,@DPTR
002255 FC                MOV     R4,A
002256 A3                INC     DPTR
002257 E0                MOVX    A,@DPTR
002258 FD                MOV     R5,A
002259 A3                INC     DPTR
00225A E0                MOVX    A,@DPTR
00225B FE                MOV     R6,A
00225C A3                INC     DPTR
00225D E0                MOVX    A,@DPTR
00225E FF                MOV     R7,A
00225F E4                CLR     A
002260 9001BF            MOV     DPTR,#01BFH
002263 EF                MOV     A,R7
002264 F0                MOVX    @DPTR,A
   93: 	REG_SPID_RXADDR = ESWAP((u16_t)buf);
002265 90808A            MOV     DPTR,#0808AH
002268 74BC              MOV     A,#0BCH
00226A F0                MOVX    @DPTR,A
00226B A3                INC     DPTR
00226C 7401              MOV     A,#01H
00226E F0                MOVX    @DPTR,A
   94: 	REG_SPID_CTRL  |=  (1<<6);
00226F E9                MOV     A,R1
002270 FC                MOV     R4,A
002271 EA                MOV     A,R2
002272 FF                MOV     R7,A
002273 EC                MOV     A,R4
002274 FE                MOV     R6,A
002275 EF                MOV     A,R7
002276 A3                INC     DPTR
002277 EE                MOV     A,R6
002278 F0                MOVX    @DPTR,A
002279 A3                INC     DPTR
00227A EF                MOV     A,R7
00227B F0                MOVX    @DPTR,A
   95: 	REG_MISC_CTRL = SPID_START;
00227C 908086            MOV     DPTR,#08086H
00227F E0                MOVX    A,@DPTR
002280 4440              ORL     A,#040H
002282 F0                MOVX    @DPTR,A
   96: 	//spi_read_flash_wait
002283 908006            MOV     DPTR,#08006H
002286 7402              MOV     A,#02H
002288 F0                MOVX    @DPTR,A
002289         ?C0019?SPIFLASH:
   97: 	while(REG_DMA_STATUS&(1<<7));	//waiting for spid write
002289 90812C            MOV     DPTR,#0812CH
00228C E0                MOVX    A,@DPTR
00228D 20E7F9            JB      ACC.7,?C0019?SPIFLASH
002290         ?C0020?SPIFLASH:
002290         ?C0021?SPIFLASH:
   98: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
002290 90812C            MOV     DPTR,#0812CH
002293 E0                MOVX    A,@DPTR
002294 30E3F9            JNB     ACC.3,?C0021?SPIFLASH
   99: 	return;
  100: }
002297 22                RET     
----- FUNCTION _SPIFlashRead (END) -------


----- FUNCTION _cal_crc32_multiple (BEGIN) -----
 FILE: 'Crc32.c'
   80: u32_t cal_crc32_multiple(u32_t crc, u8_t *buffer, u32_t size)
   81: {
002298 904D90            MOV     DPTR,#crc
00229B 120332            LCALL   ?C?LSTXDATA
00229E 904D94            MOV     DPTR,#buffer
0022A1 EB                MOV     A,R3
0022A2 F0                MOVX    @DPTR,A
0022A3 A3                INC     DPTR
0022A4 EA                MOV     A,R2
0022A5 F0                MOVX    @DPTR,A
0022A6 A3                INC     DPTR
0022A7 E9                MOV     A,R1
0022A8 F0                MOVX    @DPTR,A
   82:     u32_t i;
   83:     for (i = 0; i < size; ++i)
0022A9 904D9B            MOV     DPTR,#i
0022AC 12033E            LCALL   ?C?LSTKXDATA
0022AF 00                DB      00H
0022B0 00                DB      00H
0022B1 00                DB      00H
0022B2 00                DB      00H
0022B3         ?C0001?CRC32:
0022B3 904D97            MOV     DPTR,#size
0022B6 E0                MOVX    A,@DPTR
0022B7 FC                MOV     R4,A
0022B8 A3                INC     DPTR
0022B9 E0                MOVX    A,@DPTR
0022BA FD                MOV     R5,A
0022BB A3                INC     DPTR
0022BC E0                MOVX    A,@DPTR
0022BD FE                MOV     R6,A
0022BE A3                INC     DPTR
0022BF E0                MOVX    A,@DPTR
0022C0 FF                MOV     R7,A
0022C1 A3                INC     DPTR
0022C2 E0                MOVX    A,@DPTR
0022C3 F8                MOV     R0,A
0022C4 A3                INC     DPTR
0022C5 E0                MOVX    A,@DPTR
0022C6 F9                MOV     R1,A
0022C7 A3                INC     DPTR
0022C8 E0                MOVX    A,@DPTR
0022C9 FA                MOV     R2,A
0022CA A3                INC     DPTR
0022CB E0                MOVX    A,@DPTR
0022CC FB                MOV     R3,A
0022CD C3                CLR     C
0022CE 1202FB            LCALL   ?C?ULCMP
0022D1 4002              JC      $ + 4H
0022D3 6184              AJMP    ?C0002?CRC32
   84:     {
   85:     	SPIFlashRead((u8_t *)&crc_table, CRC32_ADDR + (((crc ^ buffer[i]) & 0xff)*4), sizeof(crc_table));
0022D5 904D9B            MOV     DPTR,#i
0022D8 E0                MOVX    A,@DPTR
0022D9 A3                INC     DPTR
0022DA E0                MOVX    A,@DPTR
0022DB A3                INC     DPTR
0022DC E0                MOVX    A,@DPTR
0022DD FE                MOV     R6,A
0022DE A3                INC     DPTR
0022DF E0                MOVX    A,@DPTR
0022E0 FF                MOV     R7,A
0022E1 904D94            MOV     DPTR,#buffer
0022E4 E0                MOVX    A,@DPTR
0022E5 FB                MOV     R3,A
0022E6 A3                INC     DPTR
0022E7 E0                MOVX    A,@DPTR
0022E8 FA                MOV     R2,A
0022E9 A3                INC     DPTR
0022EA E0                MOVX    A,@DPTR
0022EB F9                MOV     R1,A
0022EC 8F82              MOV     DPL,R7
0022EE 8E83              MOV     DPH,R6
0022F0 120112            LCALL   ?C?CLDOPTR
0022F3 FF                MOV     R7,A
0022F4 E4                CLR     A
0022F5 904D90            MOV     DPTR,#crc
0022F8 E0                MOVX    A,@DPTR
0022F9 F8                MOV     R0,A
0022FA A3                INC     DPTR
0022FB E0                MOVX    A,@DPTR
0022FC F9                MOV     R1,A
0022FD A3                INC     DPTR
0022FE E0                MOVX    A,@DPTR
0022FF FA                MOV     R2,A
002300 A3                INC     DPTR
002301 E0                MOVX    A,@DPTR
002302 6F                XRL     A,R7
002303 FF                MOV     R7,A
002304 EA                MOV     A,R2
002305 FE                MOV     R6,A
002306 E9                MOV     A,R1
002307 FD                MOV     R5,A
002308 E8                MOV     A,R0
002309 FC                MOV     R4,A
00230A EF                MOV     A,R7
00230B E4                CLR     A
00230C FE                MOV     R6,A
00230D FD                MOV     R5,A
00230E FC                MOV     R4,A
00230F 7B04              MOV     R3,#04H
002311 FA                MOV     R2,A
002312 F9                MOV     R1,A
002313 F8                MOV     R0,A
002314 1201DE            LCALL   ?C?LMUL
002317 E4                CLR     A
002318 2F                ADD     A,R7
002319 FF                MOV     R7,A
00231A EE                MOV     A,R6
00231B 3480              ADDC    A,#080H
00231D FE                MOV     R6,A
00231E E4                CLR     A
00231F 3D                ADDC    A,R5
002320 FD                MOV     R5,A
002321 E4                CLR     A
002322 3C                ADDC    A,R4
002323 FC                MOV     R4,A
002324 904DEB            MOV     DPTR,#?_SPIFlashRead?BYTE+07H
002327 7404              MOV     A,#04H
002329 F0                MOVX    @DPTR,A
00232A 7B01              MOV     R3,#01H
00232C 7A4E              MOV     R2,#HIGH crc_table
00232E 7936              MOV     R1,#LOW crc_table
002330 31FD              ACALL   _SPIFlashRead
   86:         crc = crc_table ^ (crc >> 8);
002332 904D90            MOV     DPTR,#crc
002335 E0                MOVX    A,@DPTR
002336 FC                MOV     R4,A
002337 A3                INC     DPTR
002338 E0                MOVX    A,@DPTR
002339 FD                MOV     R5,A
00233A A3                INC     DPTR
00233B E0                MOVX    A,@DPTR
00233C FE                MOV     R6,A
00233D A3                INC     DPTR
00233E E0                MOVX    A,@DPTR
00233F FF                MOV     R7,A
002340 7808              MOV     R0,#08H
002342 12030C            LCALL   ?C?ULSHR
002345 904E36            MOV     DPTR,#crc_table
002348 E0                MOVX    A,@DPTR
002349 F8                MOV     R0,A
00234A A3                INC     DPTR
00234B E0                MOVX    A,@DPTR
00234C F9                MOV     R1,A
00234D A3                INC     DPTR
00234E E0                MOVX    A,@DPTR
00234F FA                MOV     R2,A
002350 A3                INC     DPTR
002351 E0                MOVX    A,@DPTR
002352 6F                XRL     A,R7
002353 FF                MOV     R7,A
002354 EA                MOV     A,R2
002355 6E                XRL     A,R6
002356 FE                MOV     R6,A
002357 E9                MOV     A,R1
002358 6D                XRL     A,R5
002359 FD                MOV     R5,A
00235A E8                MOV     A,R0
00235B 6C                XRL     A,R4
00235C FC                MOV     R4,A
00235D 904D90            MOV     DPTR,#crc
002360 120332            LCALL   ?C?LSTXDATA
   87:     }
002363 904D9B            MOV     DPTR,#i
002366 E0                MOVX    A,@DPTR
002367 FC                MOV     R4,A
002368 A3                INC     DPTR
002369 E0                MOVX    A,@DPTR
00236A FD                MOV     R5,A
00236B A3                INC     DPTR
00236C E0                MOVX    A,@DPTR
00236D FE                MOV     R6,A
00236E A3                INC     DPTR
00236F E0                MOVX    A,@DPTR
002370 2401              ADD     A,#01H
002372 FF                MOV     R7,A
002373 E4                CLR     A
002374 3E                ADDC    A,R6
002375 FE                MOV     R6,A
002376 E4                CLR     A
002377 3D                ADDC    A,R5
002378 FD                MOV     R5,A
002379 E4                CLR     A
00237A 3C                ADDC    A,R4
00237B FC                MOV     R4,A
00237C 904D9B            MOV     DPTR,#i
00237F 120332            LCALL   ?C?LSTXDATA
002382 41B3              AJMP    ?C0001?CRC32
002384         ?C0002?CRC32:
   88: 
   89:     return crc;
002384 904D90            MOV     DPTR,#crc
002387 E0                MOVX    A,@DPTR
002388 FC                MOV     R4,A
002389 A3                INC     DPTR
00238A E0                MOVX    A,@DPTR
00238B FD                MOV     R5,A
00238C A3                INC     DPTR
00238D E0                MOVX    A,@DPTR
00238E FE                MOV     R6,A
00238F A3                INC     DPTR
002390 E0                MOVX    A,@DPTR
002391 FF                MOV     R7,A
   90: }
002392 22                RET     
----- FUNCTION _cal_crc32_multiple (END) -------


----- FUNCTION sendHistoryData (BEGIN) -----
 FILE: 'lxProtocol.c'
  383: static void sendHistoryData(void)
  384: {
  385: 	static u8_t total_len = 0;
  386: 	UserMeasureData *temp = NULL;
002393 904DC1            MOV     DPTR,#temp
002396 E4                CLR     A
002397 F0                MOVX    @DPTR,A
002398 A3                INC     DPTR
002399 F0                MOVX    @DPTR,A
00239A A3                INC     DPTR
00239B F0                MOVX    @DPTR,A
  387: 	u32_t crc32;
  388: 	u8_t i=0;
00239C 904DC8            MOV     DPTR,#i
00239F F0                MOVX    @DPTR,A
  389: 	u8_t pkgCnt; 
  390: 	u8_t size;
  391: 	/*
  392: 	UserMeasureData temp1;
  393: 	temp1.UTCTime[0] = 0x12;
  394: 	temp1.UTCTime[0] = 0x34;
  395: 	temp1.UTCTime[0] = 0x56;
  396: 	temp1.UTCTime[0] = 0x78;
  397: 	temp1.weight = 0xabba;
  398: 	QueuePush(&temp1);
  399: 	QueuePush(&temp1);
  400: 	*/
  401: 	
  402: 	size = historyUserData.size;
0023A0 904C12            MOV     DPTR,#historyUserData+02H
0023A3 E0                MOVX    A,@DPTR
0023A4 904DCA            MOV     DPTR,#size
0023A7 F0                MOVX    @DPTR,A
  403: 	pkgCnt = (8 + historyUserData.size * 6 + 4)/18 + (((8 + historyUserData.size * 6 + 4)%18)>0?1:0);
0023A8 75F006            MOV     B,#06H
0023AB A4                MUL     AB
0023AC 240C              ADD     A,#0CH
0023AE FF                MOV     R7,A
0023AF E4                CLR     A
0023B0 35F0              ADDC    A,B
0023B2 FE                MOV     R6,A
0023B3 7C00              MOV     R4,#00H
0023B5 7D12              MOV     R5,#012H
0023B7 120173            LCALL   ?C?UIDIV
0023BA ED                MOV     A,R5
0023BB D3                SETB    C
0023BC 9400              SUBB    A,#00H
0023BE 4006              JC      ?C0068?LXPROTOCOL
0023C0 7F01              MOV     R7,#01H
0023C2 7B01              MOV     R3,#01H
0023C4 8004              SJMP    ?C0069?LXPROTOCOL
0023C6         ?C0068?LXPROTOCOL:
0023C6 7F00              MOV     R7,#00H
0023C8 7B00              MOV     R3,#00H
0023CA         ?C0069?LXPROTOCOL:
0023CA 904C12            MOV     DPTR,#historyUserData+02H
0023CD E0                MOVX    A,@DPTR
0023CE FA                MOV     R2,A
0023CF 75F006            MOV     B,#06H
0023D2 A4                MUL     AB
0023D3 240C              ADD     A,#0CH
0023D5 FF                MOV     R7,A
0023D6 E4                CLR     A
0023D7 35F0              ADDC    A,B
0023D9 FE                MOV     R6,A
0023DA 7C00              MOV     R4,#00H
0023DC 7D12              MOV     R5,#012H
0023DE 120173            LCALL   ?C?UIDIV
0023E1 EB                MOV     A,R3
0023E2 2F                ADD     A,R7
0023E3 904DC9            MOV     DPTR,#pkgCnt
0023E6 F0                MOVX    @DPTR,A
  404: 	total_len = 8 + historyUserData.size * 6 + 4;
0023E7 EA                MOV     A,R2
0023E8 75F006            MOV     B,#06H
0023EB A4                MUL     AB
0023EC 240C              ADD     A,#0CH
0023EE 904E5B            MOV     DPTR,#total_len
0023F1 F0                MOVX    @DPTR,A
  405: 	
  406: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
0023F2 904C64            MOV     DPTR,#btCmdBuf+01H
0023F5 7430              MOV     A,#030H
0023F7 F0                MOVX    @DPTR,A
  407: 	btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
0023F8 A3                INC     DPTR
0023F9 741C              MOV     A,#01CH
0023FB F0                MOVX    @DPTR,A
  408: 	btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
0023FC E4                CLR     A
0023FD A3                INC     DPTR
0023FE F0                MOVX    @DPTR,A
  409: 
  410: 	*(LX_SEND_BUF+0) = LO_UINT16(CMD_SYNC_DATA_RSP);
0023FF 9048D2            MOV     DPTR,#048D2H
002402 7402              MOV     A,#02H
002404 F0                MOVX    @DPTR,A
  411: 	*(LX_SEND_BUF+1) = HI_UINT16(CMD_SYNC_DATA_RSP);
002405 A3                INC     DPTR
002406 7448              MOV     A,#048H
002408 F0                MOVX    @DPTR,A
  412: 	*(LX_SEND_BUF+2) = pkgCnt - 1;
002409 904DC9            MOV     DPTR,#pkgCnt
00240C E0                MOVX    A,@DPTR
00240D FF                MOV     R7,A
00240E 14                DEC     A
00240F 9048D4            MOV     DPTR,#048D4H
002412 F0                MOVX    @DPTR,A
  413: 	*(LX_SEND_BUF+3) = 0;
002413 A3                INC     DPTR
002414 E4                CLR     A
002415 F0                MOVX    @DPTR,A
  414: 	*(LX_SEND_BUF+4) = WEIGHT_UTC_FLAG;
002416 A3                INC     DPTR
002417 7405              MOV     A,#05H
002419 F0                MOVX    @DPTR,A
  415: 	*(LX_SEND_BUF+5) = 0;
00241A A3                INC     DPTR
00241B E4                CLR     A
00241C F0                MOVX    @DPTR,A
  416: 	*(LX_SEND_BUF+6) = 0;
00241D A3                INC     DPTR
00241E F0                MOVX    @DPTR,A
  417: 	*(LX_SEND_BUF+7) = 0;
00241F A3                INC     DPTR
002420 F0                MOVX    @DPTR,A
  418: 	if(pkgCnt > 1)
002421 EF                MOV     A,R7
002422 D3                SETB    C
002423 9401              SUBB    A,#01H
002425 5002              JNC     $ + 4H
002427 A16F              AJMP    ?C0070?LXPROTOCOL
  419: 	{
  420: 		for(i=0;i<size;i++)
002429 E4                CLR     A
00242A 904DC8            MOV     DPTR,#i
00242D F0                MOVX    @DPTR,A
00242E         ?C0071?LXPROTOCOL:
00242E 904DCA            MOV     DPTR,#size
002431 E0                MOVX    A,@DPTR
002432 FF                MOV     R7,A
002433 904DC8            MOV     DPTR,#i
002436 E0                MOVX    A,@DPTR
002437 C3                CLR     C
002438 9F                SUBB    A,R7
002439 5046              JNC     ?C0072?LXPROTOCOL
  421: 		{
  422: 			temp = QueuePop();
00243B D11C              ACALL   QueuePop
00243D 904DC1            MOV     DPTR,#temp
002440 EB                MOV     A,R3
002441 F0                MOVX    @DPTR,A
002442 A3                INC     DPTR
002443 EA                MOV     A,R2
002444 F0                MOVX    @DPTR,A
002445 A3                INC     DPTR
002446 E9                MOV     A,R1
002447 F0                MOVX    @DPTR,A
  423: 			dmemcpy(LX_SEND_BUF + (sizeof(UserMeasureData) * i) + 8, (u8_t *)temp, sizeof(UserMeasureData));
002448 904DC8            MOV     DPTR,#i
00244B E0                MOVX    A,@DPTR
00244C 75F006            MOV     B,#06H
00244F A4                MUL     AB
002450 24DA              ADD     A,#0DAH
002452 FF                MOV     R7,A
002453 E5F0              MOV     A,B
002455 3448              ADDC    A,#048H
002457 FA                MOV     R2,A
002458 A907              MOV     R1,AR7
00245A 7B01              MOV     R3,#01H
00245C C003              PUSH    AR3
00245E C002              PUSH    AR2
002460 904DC1            MOV     DPTR,#temp
002463 E0                MOVX    A,@DPTR
002464 FB                MOV     R3,A
002465 A3                INC     DPTR
002466 E0                MOVX    A,@DPTR
002467 FA                MOV     R2,A
002468 A3                INC     DPTR
002469 E0                MOVX    A,@DPTR
00246A 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
00246C 8A14              MOV     ?_dmemcpy?BYTE+04H,R2
00246E F515              MOV     ?_dmemcpy?BYTE+05H,A
002470 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
002473 D002              POP     AR2
002475 D003              POP     AR3
002477 B1E8              ACALL   _dmemcpy
  424: 		}
002479 904DC8            MOV     DPTR,#i
00247C E0                MOVX    A,@DPTR
00247D 04                INC     A
00247E F0                MOVX    @DPTR,A
00247F 80AD              SJMP    ?C0071?LXPROTOCOL
002481         ?C0072?LXPROTOCOL:
  425: 		crc32 = cal_crc32_multiple(0, LX_SEND_BUF, total_len - 4);
002481 7B01              MOV     R3,#01H
002483 7A48              MOV     R2,#048H
002485 79D2              MOV     R1,#0D2H
002487 904E5B            MOV     DPTR,#total_len
00248A E0                MOVX    A,@DPTR
00248B 24FC              ADD     A,#0FCH
00248D FF                MOV     R7,A
00248E E4                CLR     A
00248F 34FF              ADDC    A,#0FFH
002491 FE                MOV     R6,A
002492 E4                CLR     A
002493 FC                MOV     R4,A
002494 FD                MOV     R5,A
002495 904D97            MOV     DPTR,#?_cal_crc32_multiple?BYTE+07H
002498 120332            LCALL   ?C?LSTXDATA
00249B 7F00              MOV     R7,#00H
00249D 7E00              MOV     R6,#00H
00249F 7D00              MOV     R5,#00H
0024A1 7C00              MOV     R4,#00H
0024A3 5198              ACALL   _cal_crc32_multiple
0024A5 904DC4            MOV     DPTR,#crc32
0024A8 120332            LCALL   ?C?LSTXDATA
  426: 		dmemcpy(LX_SEND_BUF + (sizeof(UserMeasureData) * i) + 8, (u8_t *)&crc32, sizeof(crc32));
0024AB 904DC8            MOV     DPTR,#i
0024AE E0                MOVX    A,@DPTR
0024AF 75F006            MOV     B,#06H
0024B2 A4                MUL     AB
0024B3 24DA              ADD     A,#0DAH
0024B5 FF                MOV     R7,A
0024B6 E5F0              MOV     A,B
0024B8 3448              ADDC    A,#048H
0024BA FA                MOV     R2,A
0024BB A907              MOV     R1,AR7
0024BD 7B01              MOV     R3,#01H
0024BF C003              PUSH    AR3
0024C1 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
0024C3 75144D            MOV     ?_dmemcpy?BYTE+04H,#HIGH crc32
0024C6 7515C4            MOV     ?_dmemcpy?BYTE+05H,#LOW crc32
0024C9 751604            MOV     ?_dmemcpy?BYTE+06H,#04H
0024CC D003              POP     AR3
0024CE B1E8              ACALL   _dmemcpy
  427: 		bigLittleEndianSwap(LX_SEND_BUF, total_len);
0024D0 7B01              MOV     R3,#01H
0024D2 7A48              MOV     R2,#048H
0024D4 79D2              MOV     R1,#0D2H
0024D6 904E5B            MOV     DPTR,#total_len
0024D9 E0                MOVX    A,@DPTR
0024DA FD                MOV     R5,A
0024DB 7C00              MOV     R4,#00H
0024DD 121D6B            LCALL   _bigLittleEndianSwap
  428: 		
  429: 		for(i=0;i<pkgCnt;i++)
0024E0 E4                CLR     A
0024E1 904DC8            MOV     DPTR,#i
0024E4 F0                MOVX    @DPTR,A
0024E5         ?C0074?LXPROTOCOL:
0024E5 904DC9            MOV     DPTR,#pkgCnt
0024E8 E0                MOVX    A,@DPTR
0024E9 FF                MOV     R7,A
0024EA 904DC8            MOV     DPTR,#i
0024ED E0                MOVX    A,@DPTR
0024EE FE                MOV     R6,A
0024EF C3                CLR     C
0024F0 9F                SUBB    A,R7
0024F1 4002              JC      $ + 4H
0024F3 A1E7              AJMP    ?C0082?LXPROTOCOL
  430: 		{
  431: 			btCmdBuf.DATA[3] = (pkgCnt << 4) + i;
0024F5 A3                INC     DPTR
0024F6 E0                MOVX    A,@DPTR
0024F7 FD                MOV     R5,A
0024F8 C4                SWAP    A
0024F9 54F0              ANL     A,#0F0H
0024FB FF                MOV     R7,A
0024FC EE                MOV     A,R6
0024FD 2F                ADD     A,R7
0024FE 904C67            MOV     DPTR,#btCmdBuf+04H
002501 F0                MOVX    @DPTR,A
  432: 			if(i == pkgCnt -1)
002502 ED                MOV     A,R5
002503 14                DEC     A
002504 B5060A            CJNE    A,AR6,?C0077?LXPROTOCOL
  433: 			{
  434: 				btCmdBuf.DATA[4] = total_len;
002507 904E5B            MOV     DPTR,#total_len
00250A E0                MOVX    A,@DPTR
00250B 904C68            MOV     DPTR,#btCmdBuf+05H
00250E F0                MOVX    @DPTR,A
  435: 			}
00250F 800D              SJMP    ?C0078?LXPROTOCOL
002511         ?C0077?LXPROTOCOL:
  436: 			else
  437: 			{
  438: 				btCmdBuf.DATA[4] = 20 - 2;
002511 904C68            MOV     DPTR,#btCmdBuf+05H
002514 7412              MOV     A,#012H
002516 F0                MOVX    @DPTR,A
  439: 				total_len -= 18;
002517 904E5B            MOV     DPTR,#total_len
00251A E0                MOVX    A,@DPTR
00251B 24EE              ADD     A,#0EEH
00251D F0                MOVX    @DPTR,A
  440: 				
  441: 			}
00251E         ?C0078?LXPROTOCOL:
  442: 			btCmdBuf.DATA[7] = pkgCnt - i - 1;
00251E 904DC8            MOV     DPTR,#i
002521 E0                MOVX    A,@DPTR
002522 FD                MOV     R5,A
002523 A3                INC     DPTR
002524 E0                MOVX    A,@DPTR
002525 C3                CLR     C
002526 9D                SUBB    A,R5
002527 14                DEC     A
002528 904C6B            MOV     DPTR,#btCmdBuf+08H
00252B F0                MOVX    @DPTR,A
  443: 			btCmdBuf.len = 3 + 2 + btCmdBuf.DATA[4] ;
00252C 904C68            MOV     DPTR,#btCmdBuf+05H
00252F E0                MOVX    A,@DPTR
002530 2405              ADD     A,#05H
002532 904C63            MOV     DPTR,#btCmdBuf
002535 F0                MOVX    @DPTR,A
  444: 			dmemcpy(&btCmdBuf.DATA[5], (u8_t *)(LX_SEND_BUF+i*18), btCmdBuf.DATA[4] );
002536 ED                MOV     A,R5
002537 75F012            MOV     B,#012H
00253A A4                MUL     AB
00253B 24D2              ADD     A,#0D2H
00253D FF                MOV     R7,A
00253E E5F0              MOV     A,B
002540 3448              ADDC    A,#048H
002542 A907              MOV     R1,AR7
002544 751301            MOV     ?_dmemcpy?BYTE+03H,#01H
002547 F514              MOV     ?_dmemcpy?BYTE+04H,A
002549 8915              MOV     ?_dmemcpy?BYTE+05H,R1
00254B 904C68            MOV     DPTR,#btCmdBuf+05H
00254E E0                MOVX    A,@DPTR
00254F F516              MOV     ?_dmemcpy?BYTE+06H,A
002551 7B01              MOV     R3,#01H
002553 7A4C              MOV     R2,#HIGH btCmdBuf+06H
002555 7969              MOV     R1,#LOW btCmdBuf+06H
002557 B1E8              ACALL   _dmemcpy
  445: 			BT_CmdFifoIn(&btCmdBuf);
002559 7B01              MOV     R3,#01H
00255B 7A4C              MOV     R2,#HIGH btCmdBuf
00255D 7963              MOV     R1,#LOW btCmdBuf
00255F 121BEF            LCALL   _BT_CmdFifoIn
  446: 			YC_Delay10ms(12);
002562 7F0C              MOV     R7,#0CH
002564 121D53            LCALL   _YC_Delay10ms
  447: 		}
002567 904DC8            MOV     DPTR,#i
00256A E0                MOVX    A,@DPTR
00256B 04                INC     A
00256C F0                MOVX    @DPTR,A
00256D 81E5              AJMP    ?C0074?LXPROTOCOL
  448: 	}
00256F         ?C0070?LXPROTOCOL:
  449: 	else
  450: 	{
  451: 		btCmdBuf.len = 3 + 2 + SYNC_DATA_HDR_LEN + sizeof(UserMeasureData);
00256F 904C63            MOV     DPTR,#btCmdBuf
002572 7413              MOV     A,#013H
002574 F0                MOVX    @DPTR,A
  452: 		btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
002575 904C67            MOV     DPTR,#btCmdBuf+04H
002578 7410              MOV     A,#010H
00257A F0                MOVX    @DPTR,A
  453: 		btCmdBuf.DATA[4] = SYNC_DATA_HDR_LEN + sizeof(UserMeasureData);
00257B A3                INC     DPTR
00257C 740E              MOV     A,#0EH
00257E F0                MOVX    @DPTR,A
  454: 		temp = QueuePop();
00257F D11C              ACALL   QueuePop
002581 904DC1            MOV     DPTR,#temp
002584 EB                MOV     A,R3
002585 F0                MOVX    @DPTR,A
002586 A3                INC     DPTR
002587 EA                MOV     A,R2
002588 F0                MOVX    @DPTR,A
002589 A3                INC     DPTR
00258A E9                MOV     A,R1
00258B F0                MOVX    @DPTR,A
  455: 		if(temp != NULL)
00258C 4A                ORL     A,R2
00258D 601D              JZ      ?C0080?LXPROTOCOL
  456: 		{
  457: 			dmemcpy(LX_SEND_BUF + 8, (u8_t *)temp, sizeof(UserMeasureData));
00258F 904DC1            MOV     DPTR,#temp
002592 E0                MOVX    A,@DPTR
002593 FB                MOV     R3,A
002594 A3                INC     DPTR
002595 E0                MOVX    A,@DPTR
002596 FA                MOV     R2,A
002597 A3                INC     DPTR
002598 E0                MOVX    A,@DPTR
002599 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
00259B 8A14              MOV     ?_dmemcpy?BYTE+04H,R2
00259D F515              MOV     ?_dmemcpy?BYTE+05H,A
00259F 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
0025A2 7B01              MOV     R3,#01H
0025A4 7A48              MOV     R2,#048H
0025A6 79DA              MOV     R1,#0DAH
0025A8 B1E8              ACALL   _dmemcpy
  458: 		}
0025AA 800B              SJMP    ?C0081?LXPROTOCOL
0025AC         ?C0080?LXPROTOCOL:
  459: 		else
  460: 		{
  461: 			xmemset(LX_SEND_BUF, 0, sizeof(UserMeasureData));
0025AC 7B06              MOV     R3,#06H
0025AE E4                CLR     A
0025AF FD                MOV     R5,A
0025B0 7FD2              MOV     R7,#0D2H
0025B2 7E48              MOV     R6,#048H
0025B4 121FA3            LCALL   _xmemset
  462: 		}
0025B7         ?C0081?LXPROTOCOL:
  463: 		dmemcpy(&(btCmdBuf.DATA[5]), LX_SEND_BUF, btCmdBuf.DATA[4]);
0025B7 751301            MOV     ?_dmemcpy?BYTE+03H,#01H
0025BA 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
0025BD 7515D2            MOV     ?_dmemcpy?BYTE+05H,#0D2H
0025C0 904C68            MOV     DPTR,#btCmdBuf+05H
0025C3 E0                MOVX    A,@DPTR
0025C4 F516              MOV     ?_dmemcpy?BYTE+06H,A
0025C6 7B01              MOV     R3,#01H
0025C8 7A4C              MOV     R2,#HIGH btCmdBuf+06H
0025CA 7969              MOV     R1,#LOW btCmdBuf+06H
0025CC B1E8              ACALL   _dmemcpy
  464: 		bigLittleEndianSwap(&(btCmdBuf.DATA[5]), btCmdBuf.DATA[4]);
0025CE 7B01              MOV     R3,#01H
0025D0 7A4C              MOV     R2,#HIGH btCmdBuf+06H
0025D2 7969              MOV     R1,#LOW btCmdBuf+06H
0025D4 904C68            MOV     DPTR,#btCmdBuf+05H
0025D7 E0                MOVX    A,@DPTR
0025D8 FD                MOV     R5,A
0025D9 7C00              MOV     R4,#00H
0025DB 121D6B            LCALL   _bigLittleEndianSwap
  465: 		BT_CmdFifoIn(&btCmdBuf);
0025DE 7B01              MOV     R3,#01H
0025E0 7A4C              MOV     R2,#HIGH btCmdBuf
0025E2 7963              MOV     R1,#LOW btCmdBuf
0025E4 121BEF            LCALL   _BT_CmdFifoIn
  466: 	}
  467: }
0025E7         ?C0082?LXPROTOCOL:
0025E7 22                RET     
----- FUNCTION sendHistoryData (END) -------


----- FUNCTION _dmemcpy (BEGIN) -----
 FILE: 'YC_Utilities.c'
   22: void dmemcpy(u8_t *dest, u8_t* src, u8_t len) small
   23: {
0025E8 8B10              MOV     dest,R3
0025EA 8A11              MOV     dest+01H,R2
0025EC 8912              MOV     dest+02H,R1
0025EE         ?C0008?YC_UTILITIES:
   24: 	while(len--)
0025EE AF16              MOV     R7,len
0025F0 1516              DEC     len
0025F2 EF                MOV     A,R7
0025F3 6026              JZ      ?C0010?YC_UTILITIES
   25: 		*dest++ = *src++;
0025F5 AB13              MOV     R3,src
0025F7 0515              INC     src+02H
0025F9 E515              MOV     A,src+02H
0025FB AA14              MOV     R2,src+01H
0025FD 7002              JNZ     ?C0047?YC_UTILITIES
0025FF 0514              INC     src+01H
002601         ?C0047?YC_UTILITIES:
002601 14                DEC     A
002602 F9                MOV     R1,A
002603 1200F9            LCALL   ?C?CLDPTR
002606 FF                MOV     R7,A
002607 AB10              MOV     R3,dest
002609 0512              INC     dest+02H
00260B E512              MOV     A,dest+02H
00260D AA11              MOV     R2,dest+01H
00260F 7002              JNZ     ?C0048?YC_UTILITIES
002611 0511              INC     dest+01H
002613         ?C0048?YC_UTILITIES:
002613 14                DEC     A
002614 F9                MOV     R1,A
002615 EF                MOV     A,R7
002616 12013F            LCALL   ?C?CSTPTR
002619 80D3              SJMP    ?C0008?YC_UTILITIES
   26: 	return;
   27: }
00261B         ?C0010?YC_UTILITIES:
00261B 22                RET     
----- FUNCTION _dmemcpy (END) -------


----- FUNCTION QueuePop (BEGIN) -----
 FILE: 'lxProtocol.c'
  503: static UserMeasureData* QueuePop(void)
  504: {
  505: 	UserMeasureData *temp = NULL;
  506: 	
00261C 904E4C            MOV     DPTR,#temp
00261F E4                CLR     A
002620 F0                MOVX    @DPTR,A
002621 A3                INC     DPTR
002622 F0                MOVX    @DPTR,A
002623 A3                INC     DPTR
002624 F0                MOVX    @DPTR,A
  507: 	if(QUEUE_IS_EMPTY)
002625 904C12            MOV     DPTR,#historyUserData+02H
002628 E0                MOVX    A,@DPTR
002629 D3                SETB    C
00262A 9400              SUBB    A,#00H
00262C 5007              JNC     ?C0088?LXPROTOCOL
  508: 		return NULL;
00262E 7B00              MOV     R3,#00H
002630 7A00              MOV     R2,#00H
002632 7900              MOV     R1,#00H
002634 22                RET     
002635         ?C0088?LXPROTOCOL:
  509: 
  510: 	temp = &(historyUserData.measureData[historyUserData.head]);
002635 904C10            MOV     DPTR,#historyUserData
002638 E0                MOVX    A,@DPTR
002639 75F006            MOV     B,#06H
00263C A4                MUL     AB
00263D 2413              ADD     A,#LOW historyUserData+03H
00263F F9                MOV     R1,A
002640 744C              MOV     A,#HIGH historyUserData+03H
002642 35F0              ADDC    A,B
002644 FA                MOV     R2,A
002645 904E4C            MOV     DPTR,#temp
002648 7401              MOV     A,#01H
00264A F0                MOVX    @DPTR,A
00264B A3                INC     DPTR
00264C EA                MOV     A,R2
00264D F0                MOVX    @DPTR,A
00264E A3                INC     DPTR
00264F E9                MOV     A,R1
002650 F0                MOVX    @DPTR,A
  511: 	historyUserData.head = (historyUserData.head + 1)%MAX_SIZE;
002651 904C10            MOV     DPTR,#historyUserData
002654 E0                MOVX    A,@DPTR
002655 2401              ADD     A,#01H
002657 FF                MOV     R7,A
002658 E4                CLR     A
002659 33                RLC     A
00265A FE                MOV     R6,A
00265B 7C00              MOV     R4,#00H
00265D 7D0A              MOV     R5,#0AH
00265F 120173            LCALL   ?C?UIDIV
002662 ED                MOV     A,R5
002663 F0                MOVX    @DPTR,A
  512: 	historyUserData.size--;
002664 904C12            MOV     DPTR,#historyUserData+02H
002667 E0                MOVX    A,@DPTR
002668 14                DEC     A
002669 F0                MOVX    @DPTR,A
  513: 
  514: 	return temp;
00266A 904E4C            MOV     DPTR,#temp
00266D E0                MOVX    A,@DPTR
00266E FB                MOV     R3,A
00266F A3                INC     DPTR
002670 E0                MOVX    A,@DPTR
002671 FA                MOV     R2,A
002672 A3                INC     DPTR
002673 E0                MOVX    A,@DPTR
002674 F9                MOV     R1,A
  515: }
002675 22                RET     
----- FUNCTION QueuePop (END) -------


----- FUNCTION _QueuePush (BEGIN) -----
 FILE: 'lxProtocol.c'
  517: void QueuePush(UserMeasureData *userData)
  518: {
002676 904E4F            MOV     DPTR,#userData
002679 EB                MOV     A,R3
00267A F0                MOVX    @DPTR,A
00267B A3                INC     DPTR
00267C EA                MOV     A,R2
00267D F0                MOVX    @DPTR,A
00267E A3                INC     DPTR
00267F E9                MOV     A,R1
002680 F0                MOVX    @DPTR,A
  519: 	if(QUEUE_IS_FULL)
  520: 		QueuePop();
002681 904C12            MOV     DPTR,#historyUserData+02H
002684 E0                MOVX    A,@DPTR
002685 C3                CLR     C
002686 940A              SUBB    A,#0AH
002688 4002              JC      ?C0090?LXPROTOCOL
  521: 	
00268A D11C              ACALL   QueuePop
00268C         ?C0090?LXPROTOCOL:
  522: 	dmemcpy((u8_t *)&(historyUserData.measureData[historyUserData.tail]), (u8_t *)userData, sizeof(UserMeasureData))
>> ;
00268C 904C11            MOV     DPTR,#historyUserData+01H
00268F E0                MOVX    A,@DPTR
002690 75F006            MOV     B,#06H
002693 A4                MUL     AB
002694 2413              ADD     A,#LOW historyUserData+03H
002696 F9                MOV     R1,A
002697 744C              MOV     A,#HIGH historyUserData+03H
002699 35F0              ADDC    A,B
00269B FA                MOV     R2,A
00269C 7B01              MOV     R3,#01H
00269E C003              PUSH    AR3
0026A0 C002              PUSH    AR2
0026A2 904E4F            MOV     DPTR,#userData
0026A5 E0                MOVX    A,@DPTR
0026A6 FB                MOV     R3,A
0026A7 A3                INC     DPTR
0026A8 E0                MOVX    A,@DPTR
0026A9 FA                MOV     R2,A
0026AA A3                INC     DPTR
0026AB E0                MOVX    A,@DPTR
0026AC 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
0026AE 8A14              MOV     ?_dmemcpy?BYTE+04H,R2
0026B0 F515              MOV     ?_dmemcpy?BYTE+05H,A
0026B2 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
0026B5 D002              POP     AR2
0026B7 D003              POP     AR3
0026B9 B1E8              ACALL   _dmemcpy
  523: 	historyUserData.tail = (historyUserData.tail + 1)%MAX_SIZE;
0026BB 904C11            MOV     DPTR,#historyUserData+01H
0026BE E0                MOVX    A,@DPTR
0026BF 2401              ADD     A,#01H
0026C1 FF                MOV     R7,A
0026C2 E4                CLR     A
0026C3 33                RLC     A
0026C4 FE                MOV     R6,A
0026C5 7C00              MOV     R4,#00H
0026C7 7D0A              MOV     R5,#0AH
0026C9 120173            LCALL   ?C?UIDIV
0026CC ED                MOV     A,R5
0026CD F0                MOVX    @DPTR,A
  524: 	historyUserData.size++;
0026CE A3                INC     DPTR
0026CF E0                MOVX    A,@DPTR
0026D0 04                INC     A
0026D1 F0                MOVX    @DPTR,A
  525: }
0026D2 22                RET     
----- FUNCTION _QueuePush (END) -------


----- FUNCTION _generateChecksum (BEGIN) -----
 FILE: 'system.c'
  114: u8_t generateChecksum(u8_t *buf,u8_t len)
  115: {
0026D3 904E3D            MOV     DPTR,#buf
0026D6 EB                MOV     A,R3
0026D7 F0                MOVX    @DPTR,A
0026D8 A3                INC     DPTR
0026D9 EA                MOV     A,R2
0026DA F0                MOVX    @DPTR,A
0026DB A3                INC     DPTR
0026DC E9                MOV     A,R1
0026DD F0                MOVX    @DPTR,A
;---- Variable 'len' assigned to Register 'R5' ----
  116: 	u8_t result;
  117: 	result = 0;
;---- Variable 'result' assigned to Register 'R7' ----
0026DE E4                CLR     A
0026DF FF                MOV     R7,A
0026E0         ?C0012?SYSTEM:
  118: 	while(len--) {
0026E0 AE05              MOV     R6,AR5
0026E2 1D                DEC     R5
0026E3 EE                MOV     A,R6
0026E4 6017              JZ      ?C0013?SYSTEM
  119: 		result^=*buf++;
0026E6 904E3D            MOV     DPTR,#buf
0026E9 E0                MOVX    A,@DPTR
0026EA FB                MOV     R3,A
0026EB A3                INC     DPTR
0026EC E4                CLR     A
0026ED 75F001            MOV     B,#01H
0026F0 1201C8            LCALL   ?C?ILDIX
0026F3 A9F0              MOV     R1,B
0026F5 FA                MOV     R2,A
0026F6 1200F9            LCALL   ?C?CLDPTR
0026F9 6F                XRL     A,R7
0026FA FF                MOV     R7,A
  120: 	}
0026FB 80E3              SJMP    ?C0012?SYSTEM
0026FD         ?C0013?SYSTEM:
  121: 	return result;
  122: }
0026FD 22                RET     
----- FUNCTION _generateChecksum (END) -------


----- FUNCTION CS_1186Com_ReadMacAdress_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   86: void CS_1186Com_ReadMacAdress_Proc(void)
   87: {
   88: 	u8_t i;
   89: 	u8_t xdata * ptr;
   90: 
   91: 	i=0;
0026FE E4                CLR     A
0026FF 904E46            MOV     DPTR,#i
002702 F0                MOVX    @DPTR,A
   92: 	ptr =&i;
002703 A3                INC     DPTR
002704 744E              MOV     A,#HIGH i
002706 F0                MOVX    @DPTR,A
002707 A3                INC     DPTR
002708 7446              MOV     A,#LOW i
00270A F0                MOVX    @DPTR,A
   93: 	
   94: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadOtp)
00270B 904D54            MOV     DPTR,#R_Weight_Com_Coo
00270E E0                MOVX    A,@DPTR
00270F B4842D            CJNE    A,#084H,?C0014?CS_COMMTO1186
   95: 		{
   96: 		uartTxBuf[0]=6;		//read 6 byte MacAdress
002712 904D57            MOV     DPTR,#uartTxBuf
002715 7406              MOV     A,#06H
002717 F0                MOVX    @DPTR,A
   97: 		uartTxBuf[1]=0xF7;	//OTP  adress low 8bits
002718 A3                INC     DPTR
002719 74F7              MOV     A,#0F7H
00271B F0                MOVX    @DPTR,A
   98: 		uartTxBuf[2]=0x0F;	//OTP  adress high 8bits
00271C A3                INC     DPTR
00271D 740F              MOV     A,#0FH
00271F F0                MOVX    @DPTR,A
   99: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadOtp,uartTxBuf);
002720 7B01              MOV     R3,#01H
002722 7A4D              MOV     R2,#HIGH uartTxBuf
002724 7957              MOV     R1,#LOW uartTxBuf
002726 7F84              MOV     R7,#084H
002728 122AD1            LCALL   _CS_CommTo1186_SendCmd
  100: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadOtp;
00272B 904D55            MOV     DPTR,#R_Weight_Com_Coo+01H
00272E 7484              MOV     A,#084H
002730 F0                MOVX    @DPTR,A
  101: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadOtpStandby;
002731 904D54            MOV     DPTR,#R_Weight_Com_Coo
002734 7405              MOV     A,#05H
002736 F0                MOVX    @DPTR,A
  102: 		uartTimeoutCnt=0;
002737 E4                CLR     A
002738 904D67            MOV     DPTR,#uartTimeoutCnt
00273B F0                MOVX    @DPTR,A
  103: 		YC_UARTClearBuffer();
00273C 120592            LCALL   YC_UARTClearBuffer
  104: 		}
00273F         ?C0014?CS_COMMTO1186:
  105: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadOtpStandby)
00273F 904D54            MOV     DPTR,#R_Weight_Com_Coo
002742 E0                MOVX    A,@DPTR
002743 6405              XRL     A,#05H
002745 7069              JNZ     ?C0019?CS_COMMTO1186
  106: 		{
  107: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 11) == 11)
002747 7B01              MOV     R3,#01H
002749 7A4D              MOV     R2,#HIGH uartRcvBuf
00274B 7944              MOV     R1,#LOW uartRcvBuf
00274D 7D0B              MOV     R5,#0BH
00274F FC                MOV     R4,A
002750 1207A8            LCALL   _YC_UARTReciveDataExpected
002753 EF                MOV     A,R7
002754 640B              XRL     A,#0BH
002756 4E                ORL     A,R6
002757 7057              JNZ     ?C0019?CS_COMMTO1186
  108: 			{
  109: 			if(generateChecksum(uartRcvBuf,10) == uartRcvBuf[10] &&
002759 7B01              MOV     R3,#01H
00275B 7A4D              MOV     R2,#HIGH uartRcvBuf
00275D 7944              MOV     R1,#LOW uartRcvBuf
00275F 7D0A              MOV     R5,#0AH
002761 D1D3              ACALL   _generateChecksum
002763 904D4E            MOV     DPTR,#uartRcvBuf+0AH
002766 E0                MOVX    A,@DPTR
002767 6F                XRL     A,R7
002768 7040              JNZ     ?C0017?CS_COMMTO1186
00276A 904D46            MOV     DPTR,#uartRcvBuf+02H
00276D E0                MOVX    A,@DPTR
00276E 6410              XRL     A,#010H
002770 7038              JNZ     ?C0017?CS_COMMTO1186
002772 A3                INC     DPTR
002773 E0                MOVX    A,@DPTR
002774 B48433            CJNE    A,#084H,?C0017?CS_COMMTO1186
  110: 			uartRcvBuf[2] == UART_EVENT_OK &&
  111: 			uartRcvBuf[3] == CS_CommTo1186_ReadOtp)
  112: 				{	
  113: 				//slave_state = SLAVE_ST_SET_PARAM;
  114: 				//R_Debug_temp= uartRcvBuf[5];	//测试用
  115: 
  116: 				//数据放错地址，部分数据手动赋值
  117: 				uartRcvBuf[9]= uartRcvBuf[6];
002777 904D4A            MOV     DPTR,#uartRcvBuf+06H
00277A E0                MOVX    A,@DPTR
00277B 904D4D            MOV     DPTR,#uartRcvBuf+09H
00277E F0                MOVX    @DPTR,A
  118: 				uartRcvBuf[8]=0x55;
00277F 904D4C            MOV     DPTR,#uartRcvBuf+08H
002782 7455              MOV     A,#055H
002784 F0                MOVX    @DPTR,A
  119: 				uartRcvBuf[7]=uartRcvBuf[5];
002785 904D49            MOV     DPTR,#uartRcvBuf+05H
002788 E0                MOVX    A,@DPTR
002789 904D4B            MOV     DPTR,#uartRcvBuf+07H
00278C F0                MOVX    @DPTR,A
  120: 				uartRcvBuf[6]=0xbe;
00278D 904D4A            MOV     DPTR,#uartRcvBuf+06H
002790 74BE              MOV     A,#0BEH
002792 F0                MOVX    @DPTR,A
  121: 				uartRcvBuf[5]=uartRcvBuf[4];
002793 904D48            MOV     DPTR,#uartRcvBuf+04H
002796 E0                MOVX    A,@DPTR
002797 A3                INC     DPTR
002798 F0                MOVX    @DPTR,A
  122: 				uartRcvBuf[4]=0x08;
002799 904D48            MOV     DPTR,#uartRcvBuf+04H
00279C 7408              MOV     A,#08H
00279E F0                MOVX    @DPTR,A
  123: 
  124: 				/*
  125: 				xmemcpy(mem_le_lap,&uartRcvBuf[4],6);
  126: 				if((*mem_adv_lap_ptr) != 0) 
  127: 					{
  128: 					for(i=0;i<6;i++) 
  129: 						{
  130: 						ptr = (u8_t xdata *)(ESWAP(*mem_adv_lap_ptr)+i);
  131: 						*ptr= uartRcvBuf[9-i];
  132: 						}
  133: 					}
  134: 				*/
  135: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
00279F E4                CLR     A
0027A0 904D54            MOV     DPTR,#R_Weight_Com_Coo
0027A3 F0                MOVX    @DPTR,A
  136: 				R_Weight_Com_Coo.sucess=true;
0027A4 904D56            MOV     DPTR,#R_Weight_Com_Coo+02H
0027A7 04                INC     A
0027A8 F0                MOVX    @DPTR,A
  137: 				}
0027A9 22                RET     
0027AA         ?C0017?CS_COMMTO1186:
  138: 			else
  139: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
0027AA 904D67            MOV     DPTR,#uartTimeoutCnt
0027AD 7415              MOV     A,#015H
0027AF F0                MOVX    @DPTR,A
  140: 			}
  141: 		}
  142: }
0027B0         ?C0019?CS_COMMTO1186:
0027B0 22                RET     
----- FUNCTION CS_1186Com_ReadMacAdress_Proc (END) -------


----- FUNCTION BTControlProcess (BEGIN) -----
 FILE: 'system.c'
  124: void BTControlProcess(void)
  125: {
  126: 	BT_EVENTFIFO_t event;
  127: 	//normal process
  128: 	BT_EventFifoOut(&event);
0027B1 7B01              MOV     R3,#01H
0027B3 7A4D              MOV     R2,#HIGH event
0027B5 7968              MOV     R1,#LOW event
0027B7 122FC4            LCALL   _BT_EventFifoOut
  129: 	if(event.len != 0)
0027BA 904D68            MOV     DPTR,#event
0027BD E0                MOVX    A,@DPTR
0027BE 6076              JZ      ?C0028?SYSTEM
  130: 	{
  131: 		//YC_UARTSendData(event.DATA, event.len);
  132: 		switch(event.DATA[0]) {
0027C0 A3                INC     DPTR
0027C1 E0                MOVX    A,@DPTR
0027C2 24EE              ADD     A,#0EEH
0027C4 601C              JZ      ?C0019?SYSTEM
0027C6 14                DEC     A
0027C7 6024              JZ      ?C0020?SYSTEM
0027C9 14                DEC     A
0027CA 602A              JZ      ?C0021?SYSTEM
0027CC 24FC              ADD     A,#0FCH
0027CE 6060              JZ      ?C0027?SYSTEM
0027D0 2407              ADD     A,#07H
0027D2 7062              JNZ     ?C0028?SYSTEM
  133: 			case CS_NOTIFY_POWERON:
  134: 				break;
  135: 			case CS_NOTIFY_DISC:		//bluetooth disconnect
0027D4         ?C0018?SYSTEM:
  136: 				notifyValueUUIDA621 = NOTIFY_INDICATE_DISABLE;
0027D4 E4                CLR     A
0027D5 904C59            MOV     DPTR,#notifyValueUUIDA621
0027D8 F0                MOVX    @DPTR,A
  137: 				notifyValueUUIDA625 = NOTIFY_INDICATE_DISABLE;
0027D9 904C5A            MOV     DPTR,#notifyValueUUIDA625
0027DC F0                MOVX    @DPTR,A
  138: 				bleConnStatus= BLE_STATUS_DISCONN;
0027DD 904C5B            MOV     DPTR,#bleConnStatus
0027E0 F0                MOVX    @DPTR,A
  139: 				break;
0027E1 22                RET     
  140: 			case CS_NOTIFY_CONN:	//bluetooth connected
0027E2         ?C0019?SYSTEM:
  141: 				lxOptStatus = OPT_IDLE;
0027E2 E4                CLR     A
0027E3 904C5C            MOV     DPTR,#lxOptStatus
0027E6 F0                MOVX    @DPTR,A
  142: 				bleConnStatus= BLE_STATUS_CONN;
0027E7 904C5B            MOV     DPTR,#bleConnStatus
0027EA 04                INC     A
0027EB F0                MOVX    @DPTR,A
  143: 				break;
0027EC 22                RET     
  144: 			case CS_NOTIFY_DATA:	//receive data
0027ED         ?C0020?SYSTEM:
  145: 				lxRecvDataFromApp(&event);
0027ED 7B01              MOV     R3,#01H
0027EF 7A4D              MOV     R2,#HIGH event
0027F1 7968              MOV     R1,#LOW event
0027F3 021E26            LJMP    _lxRecvDataFromApp
  146: 				break; 
  147: 			case CS_NOTIFY_OPENHANDLE:
0027F6         ?C0021?SYSTEM:
  148: 				if(event.DATA[1] == HANDLE_UUIDA621_NOTIFY)
0027F6 904D6A            MOV     DPTR,#event+02H
0027F9 E0                MOVX    A,@DPTR
0027FA FF                MOV     R7,A
0027FB B41C0A            CJNE    A,#01CH,?C0022?SYSTEM
  149: 				{
  150: 					notifyValueUUIDA621 = event.DATA[3];
0027FE 904D6C            MOV     DPTR,#event+04H
002801 E0                MOVX    A,@DPTR
002802 904C59            MOV     DPTR,#notifyValueUUIDA621
002805 F0                MOVX    @DPTR,A
  151: 				}
002806 800C              SJMP    ?C0023?SYSTEM
002808         ?C0022?SYSTEM:
  152: 				else if(event.DATA[1] == HANDLE_UUIDA625_NOTIFY)
002808 EF                MOV     A,R7
002809 B42508            CJNE    A,#025H,?C0023?SYSTEM
  153: 				{
  154: 					notifyValueUUIDA625 = event.DATA[3];
00280C 904D6C            MOV     DPTR,#event+04H
00280F E0                MOVX    A,@DPTR
002810 904C5A            MOV     DPTR,#notifyValueUUIDA625
002813 F0                MOVX    @DPTR,A
  155: 				}
002814         ?C0023?SYSTEM:
  156: 
  157: 				if(*mem_register_buf == DEVICE_REGISTERED &&
002814 904C0E            MOV     DPTR,#04C0EH
002817 E0                MOVX    A,@DPTR
002818 B4011B            CJNE    A,#01H,?C0028?SYSTEM
00281B 904C59            MOV     DPTR,#notifyValueUUIDA621
00281E E0                MOVX    A,@DPTR
00281F B40114            CJNE    A,#01H,?C0028?SYSTEM
002822 904C5A            MOV     DPTR,#notifyValueUUIDA625
002825 E0                MOVX    A,@DPTR
002826 B4010D            CJNE    A,#01H,?C0028?SYSTEM
  158: 					notifyValueUUIDA621 == NOTIFY_ENABLE &&
  159: 					notifyValueUUIDA625 == NOTIFY_ENABLE)
  160: 				{
  161: 					lxOptStatus = OPT_LOGIN_REQ;
002829 904C5C            MOV     DPTR,#lxOptStatus
00282C 7416              MOV     A,#016H
00282E F0                MOVX    @DPTR,A
  162: 				}
  163: 				break;
00282F 22                RET     
  164: 			case CS_NOTIFY_READ_REQ:
  165: 				break;
  166: 			case CS_NOTIFY_INDICATE_CONFIRM:
002830         ?C0027?SYSTEM:
  167: 				handleIndicationConfirm = 1;
002830 904C5D            MOV     DPTR,#handleIndicationConfirm
002833 7401              MOV     A,#01H
002835 F0                MOVX    @DPTR,A
  168: 				break;
  169: 		}
  170: 	}
  171: }
002836         ?C0028?SYSTEM:
002836 22                RET     
----- FUNCTION BTControlProcess (END) -------


----- FUNCTION _YC_UtilTimerStop (BEGIN) -----
 FILE: 'YC_Sys.c'
   66: bool YC_UtilTimerStop( u8_t timer_id) large
   67: {
;---- Variable 'timer_id' assigned to Register 'R4' ----
002837 AC07              MOV     R4,AR7
   68: 	if((timer_id > 8) ||!((YC_UtilTimer.timer_flages >> timer_id) & 1))
002839 EF                MOV     A,R7
00283A D3                SETB    C
00283B 9408              SUBB    A,#08H
00283D 5011              JNC     ?C0012?YC_SYS
00283F 904CDA            MOV     DPTR,#YC_UtilTimer
002842 E0                MOVX    A,@DPTR
002843 FE                MOV     R6,A
002844 A807              MOV     R0,AR7
002846 08                INC     R0
002847 8002              SJMP    ?C0026?YC_SYS
002849         ?C0025?YC_SYS:
002849 C3                CLR     C
00284A 13                RRC     A
00284B         ?C0026?YC_SYS:
00284B D8FC              DJNZ    R0,?C0025?YC_SYS
00284D 20E002            JB      ACC.0,?C0011?YC_SYS
002850         ?C0012?YC_SYS:
   69: 		return false;
002850 C3                CLR     C
002851 22                RET     
002852         ?C0011?YC_SYS:
   70: 	YC_UtilTimer.timer_flages &= ~( 1<< timer_id);
002852 AF04              MOV     R7,AR4
002854 7401              MOV     A,#01H
002856 A807              MOV     R0,AR7
002858 08                INC     R0
002859 8002              SJMP    ?C0028?YC_SYS
00285B         ?C0027?YC_SYS:
00285B C3                CLR     C
00285C 33                RLC     A
00285D         ?C0028?YC_SYS:
00285D D8FC              DJNZ    R0,?C0027?YC_SYS
00285F F4                CPL     A
002860 5E                ANL     A,R6
002861 904CDA            MOV     DPTR,#YC_UtilTimer
002864 F0                MOVX    @DPTR,A
   71: 	YC_UtilTimer.callback[timer_id] = 0;
002865 EC                MOV     A,R4
002866 75F003            MOV     B,#03H
002869 A4                MUL     AB
00286A 24DB              ADD     A,#LOW YC_UtilTimer+01H
00286C F582              MOV     DPL,A
00286E E4                CLR     A
00286F 344C              ADDC    A,#HIGH YC_UtilTimer+01H
002871 F583              MOV     DPH,A
002873 E4                CLR     A
002874 F0                MOVX    @DPTR,A
002875 A3                INC     DPTR
002876 F0                MOVX    @DPTR,A
002877 A3                INC     DPTR
002878 F0                MOVX    @DPTR,A
   72: 	YC_UtilTimer.timer_end[timer_id] = 0;
002879 EC                MOV     A,R4
00287A 25E0              ADD     A,ACC
00287C 25E0              ADD     A,ACC
00287E 24F3              ADD     A,#LOW YC_UtilTimer+019H
002880 F582              MOV     DPL,A
002882 E4                CLR     A
002883 344C              ADDC    A,#HIGH YC_UtilTimer+019H
002885 F583              MOV     DPH,A
002887 12033E            LCALL   ?C?LSTKXDATA
00288A 00                DB      00H
00288B 00                DB      00H
00288C 00                DB      00H
00288D 00                DB      00H
   73: 	return true;
00288E D3                SETB    C
   74: }
00288F 22                RET     
----- FUNCTION _YC_UtilTimerStop (END) -------


----- FUNCTION YC_UtilTimerProcess (BEGIN) -----
 FILE: 'YC_Sys.c'
   76: void YC_UtilTimerProcess(void) small
   77: {
   78: 	u8_t i;
   79: #if 0
   80: 	if(YC_UtilTimer.last_timer > (YC_CLK_N + 0x1000)){
   81: 		for(i = 0; i < YC_UTIL_TIMER_NUM; ++i){
   82: 			if((YC_UtilTimer.timer_flages >> i) & 1){
   83: 				YC_UtilTimer.timer_end[i] -= YC_UtilTimer.last_timer;
   84: 			}
   85: 		}
   86: 	}
   87: 	YC_UtilTimer.last_timer = YC_CLK_N;
   88: 	for(i = 0; i < YC_UTIL_TIMER_NUM; ++i){
   89: 		if((YC_UtilTimer.timer_flages >> i) & 1){
   90: 			if(YC_UtilTimer.timer_end[i] < YC_CLK_N){
   91: 				YC_UtilTimer.timer_flages &=~( 1<< i); // clear the flag
   92: 				YC_UtilTimer.callback[i](i);			
   93: 			}
   94: 		}
   95: 	}
   96: #else
   97: 	YC_UtilTimer.last_timer = YC_CLK_N;
002890 908101            MOV     DPTR,#08101H
002893 E0                MOVX    A,@DPTR
002894 FF                MOV     R7,A
002895 E4                CLR     A
002896 FC                MOV     R4,A
002897 FD                MOV     R5,A
002898 FE                MOV     R6,A
002899 7808              MOV     R0,#08H
00289B 12031F            LCALL   ?C?LSHL
00289E A804              MOV     R0,AR4
0028A0 A905              MOV     R1,AR5
0028A2 AA06              MOV     R2,AR6
0028A4 AB07              MOV     R3,AR7
0028A6 908100            MOV     DPTR,#08100H
0028A9 E0                MOVX    A,@DPTR
0028AA FF                MOV     R7,A
0028AB E4                CLR     A
0028AC EB                MOV     A,R3
0028AD 4F                ORL     A,R7
0028AE FF                MOV     R7,A
0028AF EA                MOV     A,R2
0028B0 FE                MOV     R6,A
0028B1 E9                MOV     A,R1
0028B2 FD                MOV     R5,A
0028B3 E8                MOV     A,R0
0028B4 FC                MOV     R4,A
0028B5 C004              PUSH    AR4
0028B7 C005              PUSH    AR5
0028B9 C006              PUSH    AR6
0028BB C007              PUSH    AR7
0028BD 908102            MOV     DPTR,#08102H
0028C0 E0                MOVX    A,@DPTR
0028C1 FF                MOV     R7,A
0028C2 E4                CLR     A
0028C3 FC                MOV     R4,A
0028C4 FD                MOV     R5,A
0028C5 FE                MOV     R6,A
0028C6 7810              MOV     R0,#010H
0028C8 12031F            LCALL   ?C?LSHL
0028CB D003              POP     AR3
0028CD D002              POP     AR2
0028CF D001              POP     AR1
0028D1 D000              POP     AR0
0028D3 EF                MOV     A,R7
0028D4 4B                ORL     A,R3
0028D5 FF                MOV     R7,A
0028D6 EE                MOV     A,R6
0028D7 4A                ORL     A,R2
0028D8 FE                MOV     R6,A
0028D9 ED                MOV     A,R5
0028DA 49                ORL     A,R1
0028DB FD                MOV     R5,A
0028DC EC                MOV     A,R4
0028DD 48                ORL     A,R0
0028DE FC                MOV     R4,A
0028DF C004              PUSH    AR4
0028E1 C005              PUSH    AR5
0028E3 C006              PUSH    AR6
0028E5 C007              PUSH    AR7
0028E7 A3                INC     DPTR
0028E8 E0                MOVX    A,@DPTR
0028E9 FF                MOV     R7,A
0028EA E4                CLR     A
0028EB FC                MOV     R4,A
0028EC FD                MOV     R5,A
0028ED FE                MOV     R6,A
0028EE 7818              MOV     R0,#018H
0028F0 12031F            LCALL   ?C?LSHL
0028F3 D003              POP     AR3
0028F5 D002              POP     AR2
0028F7 D001              POP     AR1
0028F9 D000              POP     AR0
0028FB EF                MOV     A,R7
0028FC 4B                ORL     A,R3
0028FD FF                MOV     R7,A
0028FE EE                MOV     A,R6
0028FF 4A                ORL     A,R2
002900 FE                MOV     R6,A
002901 ED                MOV     A,R5
002902 49                ORL     A,R1
002903 FD                MOV     R5,A
002904 EC                MOV     A,R4
002905 48                ORL     A,R0
002906 FC                MOV     R4,A
002907 904D13            MOV     DPTR,#YC_UtilTimer+039H
00290A 120332            LCALL   ?C?LSTXDATA
   98: 	for(i = 0; i < YC_UTIL_TIMER_NUM; ++i){
00290D E4                CLR     A
00290E F51F              MOV     i,A
002910         ?C0014?YC_SYS:
   99: 		if((YC_UtilTimer.timer_flages >> i) & 1){
002910 AF1F              MOV     R7,i
002912 904CDA            MOV     DPTR,#YC_UtilTimer
002915 E0                MOVX    A,@DPTR
002916 FE                MOV     R6,A
002917 A807              MOV     R0,AR7
002919 08                INC     R0
00291A 8002              SJMP    ?C0030?YC_SYS
00291C         ?C0029?YC_SYS:
00291C C3                CLR     C
00291D 13                RRC     A
00291E         ?C0030?YC_SYS:
00291E D8FC              DJNZ    R0,?C0029?YC_SYS
002920 20E002            JB      ACC.0,$ + 5H
002923 21C7              AJMP    ?C0016?YC_SYS
  100: 			if((YC_UtilTimer.timer_end[i] < YC_UtilTimer.last_timer) || 
002925 E51F              MOV     A,i
002927 25E0              ADD     A,ACC
002929 25E0              ADD     A,ACC
00292B 24F3              ADD     A,#LOW YC_UtilTimer+019H
00292D F582              MOV     DPL,A
00292F E4                CLR     A
002930 344C              ADDC    A,#HIGH YC_UtilTimer+019H
002932 F583              MOV     DPH,A
002934 E0                MOVX    A,@DPTR
002935 FC                MOV     R4,A
002936 A3                INC     DPTR
002937 E0                MOVX    A,@DPTR
002938 FD                MOV     R5,A
002939 A3                INC     DPTR
00293A E0                MOVX    A,@DPTR
00293B FE                MOV     R6,A
00293C A3                INC     DPTR
00293D E0                MOVX    A,@DPTR
00293E FF                MOV     R7,A
00293F 904D13            MOV     DPTR,#YC_UtilTimer+039H
002942 E0                MOVX    A,@DPTR
002943 F8                MOV     R0,A
002944 A3                INC     DPTR
002945 E0                MOVX    A,@DPTR
002946 F9                MOV     R1,A
002947 A3                INC     DPTR
002948 E0                MOVX    A,@DPTR
002949 FA                MOV     R2,A
00294A A3                INC     DPTR
00294B E0                MOVX    A,@DPTR
00294C FB                MOV     R3,A
00294D D3                SETB    C
00294E 1202FB            LCALL   ?C?ULCMP
002951 503E              JNC     ?C0019?YC_SYS
002953 E51F              MOV     A,i
002955 25E0              ADD     A,ACC
002957 25E0              ADD     A,ACC
002959 24F3              ADD     A,#LOW YC_UtilTimer+019H
00295B F582              MOV     DPL,A
00295D E4                CLR     A
00295E 344C              ADDC    A,#HIGH YC_UtilTimer+019H
002960 F583              MOV     DPH,A
002962 E0                MOVX    A,@DPTR
002963 FC                MOV     R4,A
002964 A3                INC     DPTR
002965 E0                MOVX    A,@DPTR
002966 FD                MOV     R5,A
002967 A3                INC     DPTR
002968 E0                MOVX    A,@DPTR
002969 FE                MOV     R6,A
00296A A3                INC     DPTR
00296B E0                MOVX    A,@DPTR
00296C FF                MOV     R7,A
00296D 904D13            MOV     DPTR,#YC_UtilTimer+039H
002970 E0                MOVX    A,@DPTR
002971 F8                MOV     R0,A
002972 A3                INC     DPTR
002973 E0                MOVX    A,@DPTR
002974 A3                INC     DPTR
002975 E0                MOVX    A,@DPTR
002976 A3                INC     DPTR
002977 E0                MOVX    A,@DPTR
002978 C3                CLR     C
002979 EF                MOV     A,R7
00297A 9B                SUBB    A,R3
00297B FF                MOV     R7,A
00297C EE                MOV     A,R6
00297D 9A                SUBB    A,R2
00297E FE                MOV     R6,A
00297F ED                MOV     A,R5
002980 99                SUBB    A,R1
002981 FD                MOV     R5,A
002982 EC                MOV     A,R4
002983 98                SUBB    A,R0
002984 FC                MOV     R4,A
002985 E4                CLR     A
002986 FB                MOV     R3,A
002987 7A10              MOV     R2,#010H
002989 F9                MOV     R1,A
00298A F8                MOV     R0,A
00298B C3                CLR     C
00298C 1202FB            LCALL   ?C?ULCMP
00298F 5036              JNC     ?C0016?YC_SYS
002991         ?C0019?YC_SYS:
  101: 			   (YC_UtilTimer.timer_end[i]  - YC_UtilTimer.last_timer > 0x1000)){
  102: 				YC_UtilTimer.timer_flages &=~( 1<< i); // clear the flag
002991 904CDA            MOV     DPTR,#YC_UtilTimer
002994 E0                MOVX    A,@DPTR
002995 FF                MOV     R7,A
002996 AE1F              MOV     R6,i
002998 7401              MOV     A,#01H
00299A A806              MOV     R0,AR6
00299C 08                INC     R0
00299D 8002              SJMP    ?C0032?YC_SYS
00299F         ?C0031?YC_SYS:
00299F C3                CLR     C
0029A0 33                RLC     A
0029A1         ?C0032?YC_SYS:
0029A1 D8FC              DJNZ    R0,?C0031?YC_SYS
0029A3 F4                CPL     A
0029A4 5F                ANL     A,R7
0029A5 904CDA            MOV     DPTR,#YC_UtilTimer
0029A8 F0                MOVX    @DPTR,A
  103: 				YC_UtilTimer.callback[i](i);			
0029A9 E51F              MOV     A,i
0029AB 75F003            MOV     B,#03H
0029AE A4                MUL     AB
0029AF 24DB              ADD     A,#LOW YC_UtilTimer+01H
0029B1 F582              MOV     DPL,A
0029B3 E4                CLR     A
0029B4 344C              ADDC    A,#HIGH YC_UtilTimer+01H
0029B6 F583              MOV     DPH,A
0029B8 E0                MOVX    A,@DPTR
0029B9 A3                INC     DPTR
0029BA E0                MOVX    A,@DPTR
0029BB FA                MOV     R2,A
0029BC A3                INC     DPTR
0029BD E0                MOVX    A,@DPTR
0029BE F582              MOV     DPL,A
0029C0 8A83              MOV     DPH,R2
0029C2 AF1F              MOV     R7,i
0029C4 1203C6            LCALL   ?C?ICALL2
  104: 			}
  105: 		}
  106: 	}
0029C7         ?C0016?YC_SYS:
0029C7 051F              INC     i
0029C9 E51F              MOV     A,i
0029CB C3                CLR     C
0029CC 9408              SUBB    A,#08H
0029CE 5002              JNC     $ + 4H
0029D0 2110              AJMP    ?C0014?YC_SYS
  107: #endif
  108: 	return;
  109: }
0029D2 22                RET     
----- FUNCTION YC_UtilTimerProcess (END) -------


----- FUNCTION _YC_UARTSendData (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  351: void YC_UARTSendData(u8_t* pbuff, u16_t len)
  352: {
0029D3 904DAD            MOV     DPTR,#pbuff
0029D6 EB                MOV     A,R3
0029D7 F0                MOVX    @DPTR,A
0029D8 A3                INC     DPTR
0029D9 EA                MOV     A,R2
0029DA F0                MOVX    @DPTR,A
0029DB A3                INC     DPTR
0029DC E9                MOV     A,R1
0029DD F0                MOVX    @DPTR,A
0029DE A3                INC     DPTR
0029DF EC                MOV     A,R4
0029E0 F0                MOVX    @DPTR,A
0029E1 A3                INC     DPTR
0029E2 ED                MOV     A,R5
0029E3 F0                MOVX    @DPTR,A
  353: 	int i;
  354: 	u8_t *twptr = (u8_t *)ESWAP(REG_UART_TX_PTR_W);
0029E4 90805E            MOV     DPTR,#0805EH
0029E7 A3                INC     DPTR
0029E8 E0                MOVX    A,@DPTR
0029E9 FC                MOV     R4,A
0029EA 90805E            MOV     DPTR,#0805EH
0029ED E0                MOVX    A,@DPTR
0029EE FF                MOV     R7,A
0029EF EC                MOV     A,R4
0029F0 FE                MOV     R6,A
0029F1 EF                MOV     A,R7
0029F2 AA06              MOV     R2,AR6
0029F4 F9                MOV     R1,A
0029F5 904DB4            MOV     DPTR,#twptr
0029F8 E4                CLR     A
0029F9 F0                MOVX    @DPTR,A
0029FA A3                INC     DPTR
0029FB EA                MOV     A,R2
0029FC F0                MOVX    @DPTR,A
0029FD A3                INC     DPTR
0029FE E9                MOV     A,R1
0029FF F0                MOVX    @DPTR,A
  355: 
  356: 	for(i=0;i<len;i++)
002A00 E4                CLR     A
002A01 904DB2            MOV     DPTR,#i
002A04 F0                MOVX    @DPTR,A
002A05 A3                INC     DPTR
002A06 F0                MOVX    @DPTR,A
002A07         ?C0002?YC_PERIPHERAL:
002A07 904DB0            MOV     DPTR,#len
002A0A E0                MOVX    A,@DPTR
002A0B FE                MOV     R6,A
002A0C A3                INC     DPTR
002A0D E0                MOVX    A,@DPTR
002A0E FF                MOV     R7,A
002A0F C3                CLR     C
002A10 904DB3            MOV     DPTR,#i+01H
002A13 E0                MOVX    A,@DPTR
002A14 9F                SUBB    A,R7
002A15 904DB2            MOV     DPTR,#i
002A18 E0                MOVX    A,@DPTR
002A19 9E                SUBB    A,R6
002A1A 4002              JC      $ + 4H
002A1C 41B2              AJMP    ?C0003?YC_PERIPHERAL
  357: 	{
  358: 		xmemcpy(twptr++, pbuff++, 1);
002A1E 904DB4            MOV     DPTR,#twptr
002A21 E0                MOVX    A,@DPTR
002A22 A3                INC     DPTR
002A23 E4                CLR     A
002A24 75F001            MOV     B,#01H
002A27 1201C8            LCALL   ?C?ILDIX
002A2A FE                MOV     R6,A
002A2B AFF0              MOV     R7,B
002A2D 904DAD            MOV     DPTR,#pbuff
002A30 E0                MOVX    A,@DPTR
002A31 FB                MOV     R3,A
002A32 A3                INC     DPTR
002A33 E4                CLR     A
002A34 75F001            MOV     B,#01H
002A37 1201C8            LCALL   ?C?ILDIX
002A3A A9F0              MOV     R1,B
002A3C FA                MOV     R2,A
002A3D 751C01            MOV     ?_xmemcpy?BYTE+05H,#01H
002A40 D18B              ACALL   _xmemcpy
  359: 
  360: 		if(((short)twptr-1)==ESWAP(REG_UART_TX_ADDR_E))	//twptr reach the end of buffer
002A42 90805C            MOV     DPTR,#0805CH
002A45 A3                INC     DPTR
002A46 E0                MOVX    A,@DPTR
002A47 FC                MOV     R4,A
002A48 90805C            MOV     DPTR,#0805CH
002A4B E0                MOVX    A,@DPTR
002A4C FF                MOV     R7,A
002A4D EC                MOV     A,R4
002A4E FE                MOV     R6,A
002A4F EF                MOV     A,R7
002A50 904DB4            MOV     DPTR,#twptr
002A53 E0                MOVX    A,@DPTR
002A54 A3                INC     DPTR
002A55 E0                MOVX    A,@DPTR
002A56 FA                MOV     R2,A
002A57 A3                INC     DPTR
002A58 E0                MOVX    A,@DPTR
002A59 24FF              ADD     A,#0FFH
002A5B FD                MOV     R5,A
002A5C EA                MOV     A,R2
002A5D 34FF              ADDC    A,#0FFH
002A5F FC                MOV     R4,A
002A60 EF                MOV     A,R7
002A61 6D                XRL     A,R5
002A62 7002              JNZ     ?C0022?YC_PERIPHERAL
002A64 EE                MOV     A,R6
002A65 6C                XRL     A,R4
002A66         ?C0022?YC_PERIPHERAL:
002A66 703A              JNZ     ?C0004?YC_PERIPHERAL
  361: 		{
  362: 			REG_UART_TX_PTR_W = REG_UART_TX_ADDR_E;
002A68 90805C            MOV     DPTR,#0805CH
002A6B E0                MOVX    A,@DPTR
002A6C FF                MOV     R7,A
002A6D A3                INC     DPTR
002A6E E0                MOVX    A,@DPTR
002A6F A3                INC     DPTR
002A70 CF                XCH     A,R7
002A71 F0                MOVX    @DPTR,A
002A72 A3                INC     DPTR
002A73 EF                MOV     A,R7
002A74 F0                MOVX    @DPTR,A
002A75         ?C0006?YC_PERIPHERAL:
  363: 			while(ESWAP(REG_UART_TX_ITEMS));
002A75 90810E            MOV     DPTR,#0810EH
002A78 A3                INC     DPTR
002A79 E0                MOVX    A,@DPTR
002A7A FC                MOV     R4,A
002A7B 90810E            MOV     DPTR,#0810EH
002A7E E0                MOVX    A,@DPTR
002A7F FF                MOV     R7,A
002A80 EC                MOV     A,R4
002A81 FE                MOV     R6,A
002A82 EF                MOV     A,R7
002A83 4E                ORL     A,R6
002A84 70EF              JNZ     ?C0006?YC_PERIPHERAL
002A86         ?C0007?YC_PERIPHERAL:
  364: 			
  365: 			twptr = (u8_t *)ESWAP(REG_UART_TX_ADDR_S);	//reset twptr
002A86 90805A            MOV     DPTR,#0805AH
002A89 A3                INC     DPTR
002A8A E0                MOVX    A,@DPTR
002A8B FC                MOV     R4,A
002A8C 90805A            MOV     DPTR,#0805AH
002A8F E0                MOVX    A,@DPTR
002A90 FF                MOV     R7,A
002A91 EC                MOV     A,R4
002A92 FE                MOV     R6,A
002A93 EF                MOV     A,R7
002A94 AA06              MOV     R2,AR6
002A96 F9                MOV     R1,A
002A97 904DB4            MOV     DPTR,#twptr
002A9A E4                CLR     A
002A9B F0                MOVX    @DPTR,A
002A9C A3                INC     DPTR
002A9D EA                MOV     A,R2
002A9E F0                MOVX    @DPTR,A
002A9F A3                INC     DPTR
002AA0 E9                MOV     A,R1
002AA1 F0                MOVX    @DPTR,A
  366: 		}	
  367: 	}	
002AA2         ?C0004?YC_PERIPHERAL:
002AA2 904DB3            MOV     DPTR,#i+01H
002AA5 E0                MOVX    A,@DPTR
002AA6 04                INC     A
002AA7 F0                MOVX    @DPTR,A
002AA8 7006              JNZ     ?C0023?YC_PERIPHERAL
002AAA 904DB2            MOV     DPTR,#i
002AAD E0                MOVX    A,@DPTR
002AAE 04                INC     A
002AAF F0                MOVX    @DPTR,A
002AB0         ?C0023?YC_PERIPHERAL:
002AB0 4107              AJMP    ?C0002?YC_PERIPHERAL
002AB2         ?C0003?YC_PERIPHERAL:
  368: 
  369: 	REG_UART_TX_PTR_W = ESWAP((short)twptr);
002AB2 904DB4            MOV     DPTR,#twptr
002AB5 E0                MOVX    A,@DPTR
002AB6 A3                INC     DPTR
002AB7 E0                MOVX    A,@DPTR
002AB8 FA                MOV     R2,A
002AB9 A3                INC     DPTR
002ABA E0                MOVX    A,@DPTR
002ABB AC02              MOV     R4,AR2
002ABD FD                MOV     R5,A
002ABE EC                MOV     A,R4
002ABF FF                MOV     R7,A
002AC0 33                RLC     A
002AC1 95E0              SUBB    A,ACC
002AC3 AB07              MOV     R3,AR7
002AC5 ED                MOV     A,R5
002AC6 FF                MOV     R7,A
002AC7 EB                MOV     A,R3
002AC8 90805E            MOV     DPTR,#0805EH
002ACB CF                XCH     A,R7
002ACC F0                MOVX    @DPTR,A
002ACD A3                INC     DPTR
002ACE EF                MOV     A,R7
002ACF F0                MOVX    @DPTR,A
  370: 	//YC_UARTWaitSendData();
  371: }
002AD0 22                RET     
----- FUNCTION _YC_UARTSendData (END) -------


----- FUNCTION _CS_CommTo1186_SendCmd (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  421: void CS_CommTo1186_SendCmd(u8_t cmd_code ,u8_t * databuf)
  422: {
002AD1 904D81            MOV     DPTR,#cmd_code
002AD4 EF                MOV     A,R7
002AD5 F0                MOVX    @DPTR,A
002AD6 A3                INC     DPTR
002AD7 EB                MOV     A,R3
002AD8 F0                MOVX    @DPTR,A
002AD9 A3                INC     DPTR
002ADA EA                MOV     A,R2
002ADB F0                MOVX    @DPTR,A
002ADC A3                INC     DPTR
002ADD E9                MOV     A,R1
002ADE F0                MOVX    @DPTR,A
  423: 	u8_t buf[10] = {0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,0x00,0x00};
  424:        u8_t len;
002ADF 7885              MOV     R0,#LOW buf
002AE1 7C4D              MOV     R4,#HIGH buf
002AE3 7D01              MOV     R5,#01H
002AE5 7BFF              MOV     R3,#0FFH
002AE7 7A04              MOV     R2,#HIGH _?ix1000
002AE9 79B8              MOV     R1,#LOW _?ix1000
002AEB 7E00              MOV     R6,#00H
002AED 7F0A              MOV     R7,#0AH
002AEF 1200D3            LCALL   ?C?COPY
  425: 
  426: 	 buf[0] = 0xc5;							//包头数据
002AF2 904D85            MOV     DPTR,#buf
002AF5 74C5              MOV     A,#0C5H
002AF7 F0                MOVX    @DPTR,A
  427: 	switch(cmd_code)
002AF8 904D81            MOV     DPTR,#cmd_code
002AFB E0                MOVX    A,@DPTR
002AFC 12036F            LCALL   ?C?CCASE
002AFF 2B38              DW      ?C0069?CS_COMMTO1186
002B01 80                DB      080H
002B02 2B4E              DW      ?C0070?CS_COMMTO1186
002B04 81                DB      081H
002B05 2B64              DW      ?C0071?CS_COMMTO1186
002B07 82                DB      082H
002B08 2B7A              DW      ?C0072?CS_COMMTO1186
002B0A 83                DB      083H
002B0B 2BB7              DW      ?C0073?CS_COMMTO1186
002B0D 84                DB      084H
002B0E 2BFE              DW      ?C0074?CS_COMMTO1186
002B10 85                DB      085H
002B11 2C14              DW      ?C0075?CS_COMMTO1186
002B13 A0                DB      0A0H
002B14 2C65              DW      ?C0076?CS_COMMTO1186
002B16 A1                DB      0A1H
002B17 2CC0              DW      ?C0077?CS_COMMTO1186
002B19 A2                DB      0A2H
002B1A 2D11              DW      ?C0078?CS_COMMTO1186
002B1C A3                DB      0A3H
002B1D 2B27              DW      ?C0068?CS_COMMTO1186
002B1F C5                DB      0C5H
002B20 2D58              DW      ?C0079?CS_COMMTO1186
002B22 E0                DB      0E0H
002B23 0000              DW      00H
002B25 2DBB              DW      ?C0080?CS_COMMTO1186
  428: 		{
  429: 		case CS_CommTo1186_Reset:			//0
002B27         ?C0068?CS_COMMTO1186:
  430: 			buf[0] = 0x00;
002B27 E4                CLR     A
002B28 904D85            MOV     DPTR,#buf
002B2B F0                MOVX    @DPTR,A
  431: 			buf[1] = 0x00;
002B2C A3                INC     DPTR
002B2D F0                MOVX    @DPTR,A
  432: 			buf[2] = 0x00;
002B2E A3                INC     DPTR
002B2F F0                MOVX    @DPTR,A
  433: 			len  =  3;
002B30 904D8F            MOV     DPTR,#len
002B33 7403              MOV     A,#03H
002B35 F0                MOVX    @DPTR,A
  434: 			break;
002B36 A1C6              AJMP    ?C0067?CS_COMMTO1186
  435: 		case CS_CommTo1186_ReadAd:		 	// 1 
002B38         ?C0069?CS_COMMTO1186:
  436: 			buf[1] = 0x01;
002B38 904D86            MOV     DPTR,#buf+01H
002B3B 7401              MOV     A,#01H
002B3D F0                MOVX    @DPTR,A
  437: 			buf[2] = 0x80;
002B3E A3                INC     DPTR
002B3F 7480              MOV     A,#080H
002B41 F0                MOVX    @DPTR,A
  438: 			buf[3] = 0x44;
002B42 A3                INC     DPTR
002B43 7444              MOV     A,#044H
002B45 F0                MOVX    @DPTR,A
  439: 			len  =  4;
002B46 904D8F            MOV     DPTR,#len
002B49 7404              MOV     A,#04H
002B4B F0                MOVX    @DPTR,A
  440: 			break;			
002B4C A1C6              AJMP    ?C0067?CS_COMMTO1186
  441: 		case CS_CommTo1186_ReadVersion:		 // 2 
002B4E         ?C0070?CS_COMMTO1186:
  442: 			buf[1] = 0x01;
002B4E 904D86            MOV     DPTR,#buf+01H
002B51 7401              MOV     A,#01H
002B53 F0                MOVX    @DPTR,A
  443: 			buf[2] = 0x81;
002B54 A3                INC     DPTR
002B55 7481              MOV     A,#081H
002B57 F0                MOVX    @DPTR,A
  444: 			buf[3] = 0x45;
002B58 A3                INC     DPTR
002B59 7445              MOV     A,#045H
002B5B F0                MOVX    @DPTR,A
  445: 			len  =  4;
002B5C 904D8F            MOV     DPTR,#len
002B5F 7404              MOV     A,#04H
002B61 F0                MOVX    @DPTR,A
  446: 			break;
002B62 A1C6              AJMP    ?C0067?CS_COMMTO1186
  447: 		case CS_CommTo1186_ReadTime:		 // 3 
002B64         ?C0071?CS_COMMTO1186:
  448: 			buf[1] = 0x01;
002B64 904D86            MOV     DPTR,#buf+01H
002B67 7401              MOV     A,#01H
002B69 F0                MOVX    @DPTR,A
  449: 			buf[2] = 0x82;
002B6A A3                INC     DPTR
002B6B 7482              MOV     A,#082H
002B6D F0                MOVX    @DPTR,A
  450: 			buf[3] = 0x46;
002B6E A3                INC     DPTR
002B6F 7446              MOV     A,#046H
002B71 F0                MOVX    @DPTR,A
  451: 			len  =  4;
002B72 904D8F            MOV     DPTR,#len
002B75 7404              MOV     A,#04H
002B77 F0                MOVX    @DPTR,A
  452: 			break;
002B78 A1C6              AJMP    ?C0067?CS_COMMTO1186
  453: 		case CS_CommTo1186_ReadRam:		 // 4 
002B7A         ?C0072?CS_COMMTO1186:
  454: 			buf[1] = 0x03;
002B7A 904D86            MOV     DPTR,#buf+01H
002B7D 7403              MOV     A,#03H
002B7F F0                MOVX    @DPTR,A
  455: 			buf[2] = 0x83;
002B80 A3                INC     DPTR
002B81 7483              MOV     A,#083H
002B83 F0                MOVX    @DPTR,A
  456: 			buf[3] = databuf[1];
002B84 904D82            MOV     DPTR,#databuf
002B87 E0                MOVX    A,@DPTR
002B88 FB                MOV     R3,A
002B89 A3                INC     DPTR
002B8A E0                MOVX    A,@DPTR
002B8B FA                MOV     R2,A
002B8C A3                INC     DPTR
002B8D E0                MOVX    A,@DPTR
002B8E F9                MOV     R1,A
002B8F 900001            MOV     DPTR,#01H
002B92 120112            LCALL   ?C?CLDOPTR
002B95 904D88            MOV     DPTR,#buf+03H
002B98 F0                MOVX    @DPTR,A
  457: 			buf[4] = databuf[0];	 
002B99 1200F9            LCALL   ?C?CLDPTR
002B9C 904D89            MOV     DPTR,#buf+04H
002B9F F0                MOVX    @DPTR,A
  458: 			buf[5] =  CS_CommTo1186_Xor(buf,5);
002BA0 7B01              MOV     R3,#01H
002BA2 7A4D              MOV     R2,#HIGH buf
002BA4 7985              MOV     R1,#LOW buf
002BA6 7D05              MOV     R5,#05H
002BA8 B1D5              ACALL   _CS_CommTo1186_Xor
002BAA 904D8A            MOV     DPTR,#buf+05H
002BAD EF                MOV     A,R7
002BAE F0                MOVX    @DPTR,A
  459: 			len  =  6;
002BAF 904D8F            MOV     DPTR,#len
002BB2 7406              MOV     A,#06H
002BB4 F0                MOVX    @DPTR,A
  460: 			break;
002BB5 A1C6              AJMP    ?C0067?CS_COMMTO1186
  461: 		case CS_CommTo1186_ReadOtp:		 // 5 
002BB7         ?C0073?CS_COMMTO1186:
  462: 			buf[1] = 0x04;
002BB7 904D86            MOV     DPTR,#buf+01H
002BBA 7404              MOV     A,#04H
002BBC F0                MOVX    @DPTR,A
  463: 			buf[2] = 0x84;
002BBD A3                INC     DPTR
002BBE 7484              MOV     A,#084H
002BC0 F0                MOVX    @DPTR,A
  464: 			buf[3] = databuf[2];
002BC1 904D82            MOV     DPTR,#databuf
002BC4 E0                MOVX    A,@DPTR
002BC5 FB                MOV     R3,A
002BC6 A3                INC     DPTR
002BC7 E0                MOVX    A,@DPTR
002BC8 FA                MOV     R2,A
002BC9 A3                INC     DPTR
002BCA E0                MOVX    A,@DPTR
002BCB F9                MOV     R1,A
002BCC 900002            MOV     DPTR,#02H
002BCF 120112            LCALL   ?C?CLDOPTR
002BD2 904D88            MOV     DPTR,#buf+03H
002BD5 F0                MOVX    @DPTR,A
  465: 			buf[4] = databuf[1];	
002BD6 900001            MOV     DPTR,#01H
002BD9 120112            LCALL   ?C?CLDOPTR
002BDC 904D89            MOV     DPTR,#buf+04H
002BDF F0                MOVX    @DPTR,A
  466: 			buf[5] = databuf[0]; 
002BE0 1200F9            LCALL   ?C?CLDPTR
002BE3 904D8A            MOV     DPTR,#buf+05H
002BE6 F0                MOVX    @DPTR,A
  467: 			buf[6] = CS_CommTo1186_Xor(buf,6);
002BE7 7B01              MOV     R3,#01H
002BE9 7A4D              MOV     R2,#HIGH buf
002BEB 7985              MOV     R1,#LOW buf
002BED 7D06              MOV     R5,#06H
002BEF B1D5              ACALL   _CS_CommTo1186_Xor
002BF1 904D8B            MOV     DPTR,#buf+06H
002BF4 EF                MOV     A,R7
002BF5 F0                MOVX    @DPTR,A
  468: 			len  =  7;
002BF6 904D8F            MOV     DPTR,#len
002BF9 7407              MOV     A,#07H
002BFB F0                MOVX    @DPTR,A
  469: 			break;
002BFC A1C6              AJMP    ?C0067?CS_COMMTO1186
  470: 		case CS_CommTo1186_ReadAdZero:		 // 6 
002BFE         ?C0074?CS_COMMTO1186:
  471: 			buf[1] = 0x01;
002BFE 904D86            MOV     DPTR,#buf+01H
002C01 7401              MOV     A,#01H
002C03 F0                MOVX    @DPTR,A
  472: 			buf[2] = 0x85;
002C04 A3                INC     DPTR
002C05 7485              MOV     A,#085H
002C07 F0                MOVX    @DPTR,A
  473: 			buf[3] = 0x41;
002C08 A3                INC     DPTR
002C09 7441              MOV     A,#041H
002C0B F0                MOVX    @DPTR,A
  474: 			len  =  4;
002C0C 904D8F            MOV     DPTR,#len
002C0F 7404              MOV     A,#04H
002C11 F0                MOVX    @DPTR,A
  475: 			break;
002C12 A1C6              AJMP    ?C0067?CS_COMMTO1186
  476: 		case CS_CommTo1186_SetSleepMode:	 // 7 
002C14         ?C0075?CS_COMMTO1186:
  477: 			buf[1] = 0x05;
002C14 904D86            MOV     DPTR,#buf+01H
002C17 7405              MOV     A,#05H
002C19 F0                MOVX    @DPTR,A
  478: 			buf[2] = 0xA0;
002C1A A3                INC     DPTR
002C1B 74A0              MOV     A,#0A0H
002C1D F0                MOVX    @DPTR,A
  479: 			buf[3] = databuf[3];
002C1E 904D82            MOV     DPTR,#databuf
002C21 E0                MOVX    A,@DPTR
002C22 FB                MOV     R3,A
002C23 A3                INC     DPTR
002C24 E0                MOVX    A,@DPTR
002C25 FA                MOV     R2,A
002C26 A3                INC     DPTR
002C27 E0                MOVX    A,@DPTR
002C28 F9                MOV     R1,A
002C29 900003            MOV     DPTR,#03H
002C2C 120112            LCALL   ?C?CLDOPTR
002C2F 904D88            MOV     DPTR,#buf+03H
002C32 F0                MOVX    @DPTR,A
  480: 			buf[4] = databuf[2];	
002C33 900002            MOV     DPTR,#02H
002C36 120112            LCALL   ?C?CLDOPTR
002C39 904D89            MOV     DPTR,#buf+04H
002C3C F0                MOVX    @DPTR,A
  481: 			buf[5] = databuf[1];
002C3D 900001            MOV     DPTR,#01H
002C40 120112            LCALL   ?C?CLDOPTR
002C43 904D8A            MOV     DPTR,#buf+05H
002C46 F0                MOVX    @DPTR,A
  482: 			buf[6] = databuf[0]; 
002C47 1200F9            LCALL   ?C?CLDPTR
002C4A 904D8B            MOV     DPTR,#buf+06H
002C4D F0                MOVX    @DPTR,A
  483: 			buf[7] = CS_CommTo1186_Xor(buf,7);
002C4E 7B01              MOV     R3,#01H
002C50 7A4D              MOV     R2,#HIGH buf
002C52 7985              MOV     R1,#LOW buf
002C54 7D07              MOV     R5,#07H
002C56 B1D5              ACALL   _CS_CommTo1186_Xor
002C58 904D8C            MOV     DPTR,#buf+07H
002C5B EF                MOV     A,R7
002C5C F0                MOVX    @DPTR,A
  484: 			len  =  8;
002C5D 904D8F            MOV     DPTR,#len
002C60 7408              MOV     A,#08H
002C62 F0                MOVX    @DPTR,A
  485: 			break;
002C63 A1C6              AJMP    ?C0067?CS_COMMTO1186
  486: 		case CS_CommTo1186_SetOpenWeight:	 // 8 
002C65         ?C0076?CS_COMMTO1186:
  487: 			buf[1] = 0x06;
002C65 904D86            MOV     DPTR,#buf+01H
002C68 7406              MOV     A,#06H
002C6A F0                MOVX    @DPTR,A
  488: 			buf[2] = 0xA1;
002C6B A3                INC     DPTR
002C6C 74A1              MOV     A,#0A1H
002C6E F0                MOVX    @DPTR,A
  489: 			buf[3] = databuf[4];
002C6F 904D82            MOV     DPTR,#databuf
002C72 E0                MOVX    A,@DPTR
002C73 FB                MOV     R3,A
002C74 A3                INC     DPTR
002C75 E0                MOVX    A,@DPTR
002C76 FA                MOV     R2,A
002C77 A3                INC     DPTR
002C78 E0                MOVX    A,@DPTR
002C79 F9                MOV     R1,A
002C7A 900004            MOV     DPTR,#04H
002C7D 120112            LCALL   ?C?CLDOPTR
002C80 904D88            MOV     DPTR,#buf+03H
002C83 F0                MOVX    @DPTR,A
  490: 			buf[4] = databuf[3];	
002C84 900003            MOV     DPTR,#03H
002C87 120112            LCALL   ?C?CLDOPTR
002C8A 904D89            MOV     DPTR,#buf+04H
002C8D F0                MOVX    @DPTR,A
  491: 			buf[5] = databuf[2];
002C8E 900002            MOV     DPTR,#02H
002C91 120112            LCALL   ?C?CLDOPTR
002C94 904D8A            MOV     DPTR,#buf+05H
002C97 F0                MOVX    @DPTR,A
  492: 			buf[6] = databuf[1];
002C98 900001            MOV     DPTR,#01H
002C9B 120112            LCALL   ?C?CLDOPTR
002C9E 904D8B            MOV     DPTR,#buf+06H
002CA1 F0                MOVX    @DPTR,A
  493: 			buf[7] = databuf[0]; 
002CA2 1200F9            LCALL   ?C?CLDPTR
002CA5 904D8C            MOV     DPTR,#buf+07H
002CA8 F0                MOVX    @DPTR,A
  494: 			buf[8] = CS_CommTo1186_Xor(buf,8);
002CA9 7B01              MOV     R3,#01H
002CAB 7A4D              MOV     R2,#HIGH buf
002CAD 7985              MOV     R1,#LOW buf
002CAF 7D08              MOV     R5,#08H
002CB1 B1D5              ACALL   _CS_CommTo1186_Xor
002CB3 904D8D            MOV     DPTR,#buf+08H
002CB6 EF                MOV     A,R7
002CB7 F0                MOVX    @DPTR,A
  495: 			len  =  9;
002CB8 904D8F            MOV     DPTR,#len
002CBB 7409              MOV     A,#09H
002CBD F0                MOVX    @DPTR,A
  496: 			break;
002CBE A1C6              AJMP    ?C0067?CS_COMMTO1186
  497: 		case CS_CommTo1186_SetTime:		 // 9 
002CC0         ?C0077?CS_COMMTO1186:
  498: 			buf[1] = 0x05;
002CC0 904D86            MOV     DPTR,#buf+01H
002CC3 7405              MOV     A,#05H
002CC5 F0                MOVX    @DPTR,A
  499: 			buf[2] = 0xA2;
002CC6 A3                INC     DPTR
002CC7 74A2              MOV     A,#0A2H
002CC9 F0                MOVX    @DPTR,A
  500: 			buf[3] = databuf[3];
002CCA 904D82            MOV     DPTR,#databuf
002CCD E0                MOVX    A,@DPTR
002CCE FB                MOV     R3,A
002CCF A3                INC     DPTR
002CD0 E0                MOVX    A,@DPTR
002CD1 FA                MOV     R2,A
002CD2 A3                INC     DPTR
002CD3 E0                MOVX    A,@DPTR
002CD4 F9                MOV     R1,A
002CD5 900003            MOV     DPTR,#03H
002CD8 120112            LCALL   ?C?CLDOPTR
002CDB 904D88            MOV     DPTR,#buf+03H
002CDE F0                MOVX    @DPTR,A
  501: 			buf[4] = databuf[2];	
002CDF 900002            MOV     DPTR,#02H
002CE2 120112            LCALL   ?C?CLDOPTR
002CE5 904D89            MOV     DPTR,#buf+04H
002CE8 F0                MOVX    @DPTR,A
  502: 			buf[5] = databuf[1];
002CE9 900001            MOV     DPTR,#01H
002CEC 120112            LCALL   ?C?CLDOPTR
002CEF 904D8A            MOV     DPTR,#buf+05H
002CF2 F0                MOVX    @DPTR,A
  503: 			buf[6] = databuf[0]; 
002CF3 1200F9            LCALL   ?C?CLDPTR
002CF6 904D8B            MOV     DPTR,#buf+06H
002CF9 F0                MOVX    @DPTR,A
  504: 			buf[7] = CS_CommTo1186_Xor(buf,7);
002CFA 7B01              MOV     R3,#01H
002CFC 7A4D              MOV     R2,#HIGH buf
002CFE 7985              MOV     R1,#LOW buf
002D00 7D07              MOV     R5,#07H
002D02 B1D5              ACALL   _CS_CommTo1186_Xor
002D04 904D8C            MOV     DPTR,#buf+07H
002D07 EF                MOV     A,R7
002D08 F0                MOVX    @DPTR,A
  505: 			len  =  8;	
002D09 904D8F            MOV     DPTR,#len
002D0C 7408              MOV     A,#08H
002D0E F0                MOVX    @DPTR,A
  506: 			break;
002D0F A1C6              AJMP    ?C0067?CS_COMMTO1186
  507: 		case CS_CommTo1186_SetRam:		 	// 10 
002D11         ?C0078?CS_COMMTO1186:
  508: 			buf[1] = 0x04;
002D11 904D86            MOV     DPTR,#buf+01H
002D14 7404              MOV     A,#04H
002D16 F0                MOVX    @DPTR,A
  509: 			buf[2] = 0xA3;
002D17 A3                INC     DPTR
002D18 74A3              MOV     A,#0A3H
002D1A F0                MOVX    @DPTR,A
  510: 			buf[3] = databuf[2];
002D1B 904D82            MOV     DPTR,#databuf
002D1E E0                MOVX    A,@DPTR
002D1F FB                MOV     R3,A
002D20 A3                INC     DPTR
002D21 E0                MOVX    A,@DPTR
002D22 FA                MOV     R2,A
002D23 A3                INC     DPTR
002D24 E0                MOVX    A,@DPTR
002D25 F9                MOV     R1,A
002D26 900002            MOV     DPTR,#02H
002D29 120112            LCALL   ?C?CLDOPTR
002D2C 904D88            MOV     DPTR,#buf+03H
002D2F F0                MOVX    @DPTR,A
  511: 			buf[4] = databuf[1];	
002D30 900001            MOV     DPTR,#01H
002D33 120112            LCALL   ?C?CLDOPTR
002D36 904D89            MOV     DPTR,#buf+04H
002D39 F0                MOVX    @DPTR,A
  512: 			buf[5] = databuf[0]; 
002D3A 1200F9            LCALL   ?C?CLDPTR
002D3D 904D8A            MOV     DPTR,#buf+05H
002D40 F0                MOVX    @DPTR,A
  513: 			buf[6] = CS_CommTo1186_Xor(buf,6);
002D41 7B01              MOV     R3,#01H
002D43 7A4D              MOV     R2,#HIGH buf
002D45 7985              MOV     R1,#LOW buf
002D47 7D06              MOV     R5,#06H
002D49 B1D5              ACALL   _CS_CommTo1186_Xor
002D4B 904D8B            MOV     DPTR,#buf+06H
002D4E EF                MOV     A,R7
002D4F F0                MOVX    @DPTR,A
  514: 			len  =  7;			
002D50 904D8F            MOV     DPTR,#len
002D53 7407              MOV     A,#07H
002D55 F0                MOVX    @DPTR,A
  515: 			break;
002D56 806E              SJMP    ?C0067?CS_COMMTO1186
  516: 		case CS_CommTo1186_LcdDisplay:		// 11 
002D58         ?C0079?CS_COMMTO1186:
  517: 			buf[1] = 0x07;
002D58 904D86            MOV     DPTR,#buf+01H
002D5B 7407              MOV     A,#07H
002D5D F0                MOVX    @DPTR,A
  518: 			buf[2] = 0xe0;
002D5E A3                INC     DPTR
002D5F 74E0              MOV     A,#0E0H
002D61 F0                MOVX    @DPTR,A
  519: 			buf[3] = databuf[5];
002D62 904D82            MOV     DPTR,#databuf
002D65 E0                MOVX    A,@DPTR
002D66 FB                MOV     R3,A
002D67 A3                INC     DPTR
002D68 E0                MOVX    A,@DPTR
002D69 FA                MOV     R2,A
002D6A A3                INC     DPTR
002D6B E0                MOVX    A,@DPTR
002D6C F9                MOV     R1,A
002D6D 900005            MOV     DPTR,#05H
002D70 120112            LCALL   ?C?CLDOPTR
002D73 904D88            MOV     DPTR,#buf+03H
002D76 F0                MOVX    @DPTR,A
  520: 			buf[4] = databuf[4];
002D77 900004            MOV     DPTR,#04H
002D7A 120112            LCALL   ?C?CLDOPTR
002D7D 904D89            MOV     DPTR,#buf+04H
002D80 F0                MOVX    @DPTR,A
  521: 			buf[5] = databuf[3];
002D81 900003            MOV     DPTR,#03H
002D84 120112            LCALL   ?C?CLDOPTR
002D87 904D8A            MOV     DPTR,#buf+05H
002D8A F0                MOVX    @DPTR,A
  522: 			buf[6] = databuf[2];
002D8B 900002            MOV     DPTR,#02H
002D8E 120112            LCALL   ?C?CLDOPTR
002D91 904D8B            MOV     DPTR,#buf+06H
002D94 F0                MOVX    @DPTR,A
  523: 			buf[7] = databuf[1];
002D95 900001            MOV     DPTR,#01H
002D98 120112            LCALL   ?C?CLDOPTR
002D9B 904D8C            MOV     DPTR,#buf+07H
002D9E F0                MOVX    @DPTR,A
  524: 			buf[8] = databuf[0];		 
002D9F 1200F9            LCALL   ?C?CLDPTR
002DA2 904D8D            MOV     DPTR,#buf+08H
002DA5 F0                MOVX    @DPTR,A
  525: 			buf[9] = CS_CommTo1186_Xor(buf,9);
002DA6 7B01              MOV     R3,#01H
002DA8 7A4D              MOV     R2,#HIGH buf
002DAA 7985              MOV     R1,#LOW buf
002DAC 7D09              MOV     R5,#09H
002DAE B1D5              ACALL   _CS_CommTo1186_Xor
002DB0 904D8E            MOV     DPTR,#buf+09H
002DB3 EF                MOV     A,R7
002DB4 F0                MOVX    @DPTR,A
  526: 			len  =  10;
002DB5 A3                INC     DPTR
002DB6 740A              MOV     A,#0AH
002DB8 F0                MOVX    @DPTR,A
  527: 			break;
002DB9 800B              SJMP    ?C0067?CS_COMMTO1186
  528: 		default:		
002DBB         ?C0080?CS_COMMTO1186:
  529: 			buf[1] = 0x00;
002DBB E4                CLR     A
002DBC 904D86            MOV     DPTR,#buf+01H
002DBF F0                MOVX    @DPTR,A
  530: 			len   = 2;
002DC0 904D8F            MOV     DPTR,#len
002DC3 7402              MOV     A,#02H
002DC5 F0                MOVX    @DPTR,A
  531: 			break;
  532: 		}
002DC6         ?C0067?CS_COMMTO1186:
  533: 	YC_UARTSendData(buf, len);
002DC6 7B01              MOV     R3,#01H
002DC8 7A4D              MOV     R2,#HIGH buf
002DCA 7985              MOV     R1,#LOW buf
002DCC 904D8F            MOV     DPTR,#len
002DCF E0                MOVX    A,@DPTR
002DD0 FD                MOV     R5,A
002DD1 7C00              MOV     R4,#00H
002DD3 21D3              AJMP    _YC_UARTSendData
  534: }
----- FUNCTION _CS_CommTo1186_SendCmd (END) -------


----- FUNCTION _CS_CommTo1186_Xor (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  411: u8_t CS_CommTo1186_Xor(u8_t * buf,u8_t len)
  412: {
002DD5 904E49            MOV     DPTR,#buf
002DD8 EB                MOV     A,R3
002DD9 F0                MOVX    @DPTR,A
002DDA A3                INC     DPTR
002DDB EA                MOV     A,R2
002DDC F0                MOVX    @DPTR,A
002DDD A3                INC     DPTR
002DDE E9                MOV     A,R1
002DDF F0                MOVX    @DPTR,A
;---- Variable 'len' assigned to Register 'R5' ----
  413: 	u8_t	i;
  414: 	for(i=0;i<len;i++)
;---- Variable 'i' assigned to Register 'R7' ----
002DE0 E4                CLR     A
002DE1 FF                MOV     R7,A
002DE2         ?C0063?CS_COMMTO1186:
002DE2 EF                MOV     A,R7
002DE3 C3                CLR     C
002DE4 9D                SUBB    A,R5
002DE5 5035              JNC     ?C0064?CS_COMMTO1186
  415: 		{
  416: 		*(buf+9) = *(buf+9) ^	*(buf+i);
002DE7 904E49            MOV     DPTR,#buf
002DEA E0                MOVX    A,@DPTR
002DEB FB                MOV     R3,A
002DEC A3                INC     DPTR
002DED E0                MOVX    A,@DPTR
002DEE FA                MOV     R2,A
002DEF A3                INC     DPTR
002DF0 E0                MOVX    A,@DPTR
002DF1 2409              ADD     A,#09H
002DF3 F9                MOV     R1,A
002DF4 E4                CLR     A
002DF5 3A                ADDC    A,R2
002DF6 FA                MOV     R2,A
002DF7 C002              PUSH    AR2
002DF9 C001              PUSH    AR1
002DFB 1200F9            LCALL   ?C?CLDPTR
002DFE FE                MOV     R6,A
002DFF 904E49            MOV     DPTR,#buf
002E02 E0                MOVX    A,@DPTR
002E03 A3                INC     DPTR
002E04 E0                MOVX    A,@DPTR
002E05 FA                MOV     R2,A
002E06 A3                INC     DPTR
002E07 E0                MOVX    A,@DPTR
002E08 F9                MOV     R1,A
002E09 8F82              MOV     DPL,R7
002E0B 758300            MOV     DPH,#00H
002E0E 120112            LCALL   ?C?CLDOPTR
002E11 6E                XRL     A,R6
002E12 D001              POP     AR1
002E14 D002              POP     AR2
002E16 12013F            LCALL   ?C?CSTPTR
  417: 		}
002E19 0F                INC     R7
002E1A 80C6              SJMP    ?C0063?CS_COMMTO1186
002E1C         ?C0064?CS_COMMTO1186:
  418: 	return *(buf+9);
002E1C 904E49            MOV     DPTR,#buf
002E1F E0                MOVX    A,@DPTR
002E20 FB                MOV     R3,A
002E21 A3                INC     DPTR
002E22 E0                MOVX    A,@DPTR
002E23 FA                MOV     R2,A
002E24 A3                INC     DPTR
002E25 E0                MOVX    A,@DPTR
002E26 F9                MOV     R1,A
002E27 900009            MOV     DPTR,#09H
002E2A 120112            LCALL   ?C?CLDOPTR
002E2D FF                MOV     R7,A
  419: }
002E2E 22                RET     
----- FUNCTION _CS_CommTo1186_Xor (END) -------


----- FUNCTION CS_ScaleDisplay_Debug (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
   55: void CS_ScaleDisplay_Debug()
   56: {
   57: 	u8_t buf[5];
   58: 	CS_ScaleDisplay_HexToBcd(R_Debug_temp,buf);
002E2F 904CC6            MOV     DPTR,#R_Debug_temp
002E32 E0                MOVX    A,@DPTR
002E33 FE                MOV     R6,A
002E34 A3                INC     DPTR
002E35 E0                MOVX    A,@DPTR
002E36 FF                MOV     R7,A
002E37 7B01              MOV     R3,#01H
002E39 7A4E              MOV     R2,#HIGH buf
002E3B 7929              MOV     R1,#LOW buf
002E3D D1C2              ACALL   _CS_ScaleDisplay_HexToBcd
   59: 		
   60: 	CS_lcd_showbuf[0] = CS_ScaleDisplay_LookUpTable(buf[1]);
002E3F 904E2A            MOV     DPTR,#buf+01H
002E42 E0                MOVX    A,@DPTR
002E43 FF                MOV     R7,A
002E44 D17B              ACALL   _CS_ScaleDisplay_LookUpTable
002E46 904D22            MOV     DPTR,#CS_lcd_showbuf
002E49 EF                MOV     A,R7
002E4A F0                MOVX    @DPTR,A
   61: 	CS_lcd_showbuf[1] = CS_ScaleDisplay_LookUpTable(buf[2]);
002E4B 904E2B            MOV     DPTR,#buf+02H
002E4E E0                MOVX    A,@DPTR
002E4F FF                MOV     R7,A
002E50 D17B              ACALL   _CS_ScaleDisplay_LookUpTable
002E52 904D23            MOV     DPTR,#CS_lcd_showbuf+01H
002E55 EF                MOV     A,R7
002E56 F0                MOVX    @DPTR,A
   62: 	CS_lcd_showbuf[2] = CS_ScaleDisplay_LookUpTable(buf[3]);
002E57 904E2C            MOV     DPTR,#buf+03H
002E5A E0                MOVX    A,@DPTR
002E5B FF                MOV     R7,A
002E5C D17B              ACALL   _CS_ScaleDisplay_LookUpTable
002E5E 904D24            MOV     DPTR,#CS_lcd_showbuf+02H
002E61 EF                MOV     A,R7
002E62 F0                MOVX    @DPTR,A
   63: 	CS_lcd_showbuf[3] = CS_ScaleDisplay_LookUpTable(buf[4]);	
002E63 904E2D            MOV     DPTR,#buf+04H
002E66 E0                MOVX    A,@DPTR
002E67 FF                MOV     R7,A
002E68 D17B              ACALL   _CS_ScaleDisplay_LookUpTable
002E6A 904D25            MOV     DPTR,#CS_lcd_showbuf+03H
002E6D EF                MOV     A,R7
002E6E F0                MOVX    @DPTR,A
   64: 		
   65: 	CS_ScaleDisplay_LcdBuf_rShift4();
002E6F F12D              ACALL   CS_ScaleDisplay_LcdBuf_rShift4
   66: 
   67: 	CS_CommTo1186_SendCmd(CS_CommTo1186_LcdDisplay,CS_Lcd_Send_Data);
002E71 7B01              MOV     R3,#01H
002E73 7A4D              MOV     R2,#HIGH CS_Lcd_Send_Data
002E75 7927              MOV     R1,#LOW CS_Lcd_Send_Data
002E77 7FE0              MOV     R7,#0E0H
002E79 41D1              AJMP    _CS_CommTo1186_SendCmd
   68: 
----- FUNCTION CS_ScaleDisplay_Debug (END) -------


----- FUNCTION _CS_ScaleDisplay_LookUpTable (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  288: u8_t CS_ScaleDisplay_LookUpTable(u8_t NumData)
  289: {
;---- Variable 'NumData' assigned to Register 'R7' ----
  290: 	u8_t	 * data_ptr;
  291: 	data_ptr = CS_Lcd_Table;
002E7B 7B01              MOV     R3,#01H
002E7D 7A4D              MOV     R2,#HIGH CS_Lcd_Table
002E7F 792D              MOV     R1,#LOW CS_Lcd_Table
;---- Variable 'data_ptr' assigned to Register 'R1/R2/R3' ----
  292: 	return 	*(data_ptr + NumData);
002E81 8F82              MOV     DPL,R7
002E83 758300            MOV     DPH,#00H
002E86 120112            LCALL   ?C?CLDOPTR
002E89 FF                MOV     R7,A
  293: }
002E8A 22                RET     
----- FUNCTION _CS_ScaleDisplay_LookUpTable (END) -------


----- FUNCTION _xmemcpy (BEGIN) -----
 FILE: 'YC_Utilities.c'
   16: void xmemcpy(pxbyte dest, u8_t* src, u8_t len) small
   17: {
002E8B 8E17              MOV     dest,R6
002E8D 8F18              MOV     dest+01H,R7
002E8F 8B19              MOV     src,R3
002E91 8A1A              MOV     src+01H,R2
002E93 891B              MOV     src+02H,R1
002E95         ?C0005?YC_UTILITIES:
   18: 	while(len--)
002E95 AF1C              MOV     R7,len
002E97 151C              DEC     len
002E99 EF                MOV     A,R7
002E9A 6025              JZ      ?C0007?YC_UTILITIES
   19: 		*dest++ = *src++;
002E9C AB19              MOV     R3,src
002E9E 051B              INC     src+02H
002EA0 E51B              MOV     A,src+02H
002EA2 AA1A              MOV     R2,src+01H
002EA4 7002              JNZ     ?C0045?YC_UTILITIES
002EA6 051A              INC     src+01H
002EA8         ?C0045?YC_UTILITIES:
002EA8 14                DEC     A
002EA9 F9                MOV     R1,A
002EAA 1200F9            LCALL   ?C?CLDPTR
002EAD FF                MOV     R7,A
002EAE 0518              INC     dest+01H
002EB0 E518              MOV     A,dest+01H
002EB2 AC17              MOV     R4,dest
002EB4 7002              JNZ     ?C0046?YC_UTILITIES
002EB6 0517              INC     dest
002EB8         ?C0046?YC_UTILITIES:
002EB8 14                DEC     A
002EB9 F582              MOV     DPL,A
002EBB 8C83              MOV     DPH,R4
002EBD EF                MOV     A,R7
002EBE F0                MOVX    @DPTR,A
002EBF 80D4              SJMP    ?C0005?YC_UTILITIES
   20: 	return;
   21: }
002EC1         ?C0007?YC_UTILITIES:
002EC1 22                RET     
----- FUNCTION _xmemcpy (END) -------


----- FUNCTION _CS_ScaleDisplay_HexToBcd (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  268: void CS_ScaleDisplay_HexToBcd(u16_t HexData,u8_t* buf)
  269: {
002EC2 904E18            MOV     DPTR,#HexData
002EC5 EE                MOV     A,R6
002EC6 F0                MOVX    @DPTR,A
002EC7 A3                INC     DPTR
002EC8 EF                MOV     A,R7
002EC9 F0                MOVX    @DPTR,A
002ECA A3                INC     DPTR
002ECB EB                MOV     A,R3
002ECC F0                MOVX    @DPTR,A
002ECD A3                INC     DPTR
002ECE EA                MOV     A,R2
002ECF F0                MOVX    @DPTR,A
002ED0 A3                INC     DPTR
002ED1 E9                MOV     A,R1
002ED2 F0                MOVX    @DPTR,A
  270: 	u8_t  i;
  271: 	for(i=0;i<5;i++)
002ED3 E4                CLR     A
002ED4 A3                INC     DPTR
002ED5 F0                MOVX    @DPTR,A
002ED6         ?C0037?CS_SCALEDISPLAY:
002ED6 904E1D            MOV     DPTR,#i
002ED9 E0                MOVX    A,@DPTR
002EDA FB                MOV     R3,A
002EDB C3                CLR     C
002EDC 9405              SUBB    A,#05H
002EDE 504C              JNC     ?C0040?CS_SCALEDISPLAY
  272: 		{
  273: 		buf[4-i] =  HexData%10;
002EE0 904E18            MOV     DPTR,#HexData
002EE3 E0                MOVX    A,@DPTR
002EE4 FE                MOV     R6,A
002EE5 A3                INC     DPTR
002EE6 E0                MOVX    A,@DPTR
002EE7 FF                MOV     R7,A
002EE8 7C00              MOV     R4,#00H
002EEA 7D0A              MOV     R5,#0AH
002EEC 120173            LCALL   ?C?UIDIV
002EEF AF05              MOV     R7,AR5
002EF1 EB                MOV     A,R3
002EF2 FD                MOV     R5,A
002EF3 C3                CLR     C
002EF4 7404              MOV     A,#04H
002EF6 9D                SUBB    A,R5
002EF7 FD                MOV     R5,A
002EF8 E4                CLR     A
002EF9 9400              SUBB    A,#00H
002EFB FC                MOV     R4,A
002EFC A3                INC     DPTR
002EFD E0                MOVX    A,@DPTR
002EFE FB                MOV     R3,A
002EFF A3                INC     DPTR
002F00 E0                MOVX    A,@DPTR
002F01 FA                MOV     R2,A
002F02 A3                INC     DPTR
002F03 E0                MOVX    A,@DPTR
002F04 F9                MOV     R1,A
002F05 8D82              MOV     DPL,R5
002F07 8C83              MOV     DPH,R4
002F09 EF                MOV     A,R7
002F0A 120151            LCALL   ?C?CSTOPTR
  274: 		HexData = HexData /10;
002F0D 904E18            MOV     DPTR,#HexData
002F10 E0                MOVX    A,@DPTR
002F11 FE                MOV     R6,A
002F12 A3                INC     DPTR
002F13 E0                MOVX    A,@DPTR
002F14 FF                MOV     R7,A
002F15 7C00              MOV     R4,#00H
002F17 7D0A              MOV     R5,#0AH
002F19 120173            LCALL   ?C?UIDIV
002F1C 904E18            MOV     DPTR,#HexData
002F1F EE                MOV     A,R6
002F20 F0                MOVX    @DPTR,A
002F21 A3                INC     DPTR
002F22 EF                MOV     A,R7
002F23 F0                MOVX    @DPTR,A
  275: 		}	
002F24 904E1D            MOV     DPTR,#i
002F27 E0                MOVX    A,@DPTR
002F28 04                INC     A
002F29 F0                MOVX    @DPTR,A
002F2A 80AA              SJMP    ?C0037?CS_SCALEDISPLAY
  276: }
002F2C         ?C0040?CS_SCALEDISPLAY:
002F2C 22                RET     
----- FUNCTION _CS_ScaleDisplay_HexToBcd (END) -------


----- FUNCTION CS_ScaleDisplay_LcdBuf_rShift4 (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  243: void CS_ScaleDisplay_LcdBuf_rShift4()
  244: {
  245: 	CS_lcd_showbuf[4] = (CS_lcd_showbuf[4] & 0xf0) | (CS_lcd_showbuf[3] & 0x0f);
  246: 	CS_lcd_showbuf[3] = (CS_lcd_showbuf[3] & 0xf0) | (CS_lcd_showbuf[2] & 0x0f);
002F2D 904D25            MOV     DPTR,#CS_lcd_showbuf+03H
002F30 E0                MOVX    A,@DPTR
002F31 540F              ANL     A,#0FH
002F33 FF                MOV     R7,A
002F34 A3                INC     DPTR
002F35 E0                MOVX    A,@DPTR
002F36 54F0              ANL     A,#0F0H
002F38 4F                ORL     A,R7
002F39 F0                MOVX    @DPTR,A
  247: 	CS_lcd_showbuf[2] = (CS_lcd_showbuf[2] & 0xf0) | (CS_lcd_showbuf[1] & 0x0f);
002F3A 904D24            MOV     DPTR,#CS_lcd_showbuf+02H
002F3D E0                MOVX    A,@DPTR
002F3E 540F              ANL     A,#0FH
002F40 FF                MOV     R7,A
002F41 A3                INC     DPTR
002F42 E0                MOVX    A,@DPTR
002F43 54F0              ANL     A,#0F0H
002F45 4F                ORL     A,R7
002F46 F0                MOVX    @DPTR,A
  248: 	CS_lcd_showbuf[1] = (CS_lcd_showbuf[1] & 0xf0) | (CS_lcd_showbuf[0] & 0x0f);
002F47 904D23            MOV     DPTR,#CS_lcd_showbuf+01H
002F4A E0                MOVX    A,@DPTR
002F4B 540F              ANL     A,#0FH
002F4D FF                MOV     R7,A
002F4E A3                INC     DPTR
002F4F E0                MOVX    A,@DPTR
002F50 54F0              ANL     A,#0F0H
002F52 4F                ORL     A,R7
002F53 F0                MOVX    @DPTR,A
  249: 	CS_lcd_showbuf[0] = CS_lcd_showbuf[0] & 0xf0;
002F54 904D22            MOV     DPTR,#CS_lcd_showbuf
002F57 E0                MOVX    A,@DPTR
002F58 540F              ANL     A,#0FH
002F5A FF                MOV     R7,A
002F5B A3                INC     DPTR
002F5C E0                MOVX    A,@DPTR
002F5D 54F0              ANL     A,#0F0H
002F5F 4F                ORL     A,R7
002F60 F0                MOVX    @DPTR,A
  250: 
002F61 904D22            MOV     DPTR,#CS_lcd_showbuf
002F64 E0                MOVX    A,@DPTR
002F65 54F0              ANL     A,#0F0H
002F67 FF                MOV     R7,A
002F68 F0                MOVX    @DPTR,A
002F69 FD                MOV     R5,A
  251: 	//清显示缓存数字部分
  252: 	CS_Lcd_Send_Data[0]  &= 0x0f;
002F6A 904D27            MOV     DPTR,#CS_Lcd_Send_Data
002F6D E0                MOVX    A,@DPTR
002F6E 540F              ANL     A,#0FH
002F70 F0                MOVX    @DPTR,A
  253: 	CS_Lcd_Send_Data[1]  &= 0x08;
002F71 A3                INC     DPTR
002F72 E0                MOVX    A,@DPTR
002F73 5408              ANL     A,#08H
002F75 F0                MOVX    @DPTR,A
  254: 	CS_Lcd_Send_Data[2]  &= 0x08;
002F76 A3                INC     DPTR
002F77 E0                MOVX    A,@DPTR
002F78 5408              ANL     A,#08H
002F7A F0                MOVX    @DPTR,A
  255: 	CS_Lcd_Send_Data[3]  &= 0x08;
002F7B A3                INC     DPTR
002F7C E0                MOVX    A,@DPTR
002F7D 5408              ANL     A,#08H
002F7F F0                MOVX    @DPTR,A
  256: 	CS_Lcd_Send_Data[4]  &= 0xf8;
002F80 A3                INC     DPTR
002F81 E0                MOVX    A,@DPTR
002F82 54F8              ANL     A,#0F8H
002F84 F0                MOVX    @DPTR,A
  257: 
  258: 	//显示缓存数字部分重新赋值
  259: 	CS_Lcd_Send_Data[0]  |= CS_lcd_showbuf[0];
002F85 904D27            MOV     DPTR,#CS_Lcd_Send_Data
002F88 E0                MOVX    A,@DPTR
002F89 4D                ORL     A,R5
002F8A F0                MOVX    @DPTR,A
  260: 	CS_Lcd_Send_Data[1]  |= CS_lcd_showbuf[1];
002F8B A3                INC     DPTR
002F8C E0                MOVX    A,@DPTR
002F8D FF                MOV     R7,A
002F8E 904D23            MOV     DPTR,#CS_lcd_showbuf+01H
002F91 E0                MOVX    A,@DPTR
002F92 FE                MOV     R6,A
002F93 EF                MOV     A,R7
002F94 4E                ORL     A,R6
002F95 904D28            MOV     DPTR,#CS_Lcd_Send_Data+01H
002F98 F0                MOVX    @DPTR,A
  261: 	CS_Lcd_Send_Data[2]  |= CS_lcd_showbuf[2];
002F99 A3                INC     DPTR
002F9A E0                MOVX    A,@DPTR
002F9B FF                MOV     R7,A
002F9C 904D24            MOV     DPTR,#CS_lcd_showbuf+02H
002F9F E0                MOVX    A,@DPTR
002FA0 FE                MOV     R6,A
002FA1 EF                MOV     A,R7
002FA2 4E                ORL     A,R6
002FA3 904D29            MOV     DPTR,#CS_Lcd_Send_Data+02H
002FA6 F0                MOVX    @DPTR,A
  262: 	CS_Lcd_Send_Data[3]  |= CS_lcd_showbuf[3];
002FA7 A3                INC     DPTR
002FA8 E0                MOVX    A,@DPTR
002FA9 FF                MOV     R7,A
002FAA 904D25            MOV     DPTR,#CS_lcd_showbuf+03H
002FAD E0                MOVX    A,@DPTR
002FAE FE                MOV     R6,A
002FAF EF                MOV     A,R7
002FB0 4E                ORL     A,R6
002FB1 904D2A            MOV     DPTR,#CS_Lcd_Send_Data+03H
002FB4 F0                MOVX    @DPTR,A
  263: 	CS_Lcd_Send_Data[4]  |= CS_lcd_showbuf[4];
002FB5 A3                INC     DPTR
002FB6 E0                MOVX    A,@DPTR
002FB7 FF                MOV     R7,A
002FB8 904D26            MOV     DPTR,#CS_lcd_showbuf+04H
002FBB E0                MOVX    A,@DPTR
002FBC FE                MOV     R6,A
002FBD EF                MOV     A,R7
002FBE 4E                ORL     A,R6
002FBF 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+04H
002FC2 F0                MOVX    @DPTR,A
  264: 		
  265: }
002FC3 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdBuf_rShift4 (END) -------


----- FUNCTION _BT_EventFifoOut (BEGIN) -----
 FILE: 'BT_IPC.c'
   43: void BT_EventFifoOut(BT_EVENTFIFO_t * event)
   44: {
002FC4 904E24            MOV     DPTR,#event
002FC7 EB                MOV     A,R3
002FC8 F0                MOVX    @DPTR,A
002FC9 A3                INC     DPTR
002FCA EA                MOV     A,R2
002FCB F0                MOVX    @DPTR,A
002FCC A3                INC     DPTR
002FCD E9                MOV     A,R1
002FCE F0                MOVX    @DPTR,A
   45: 	u16_t new_rprt,i;
   46: 	u8_t event_prefix;
   47: 	if(BT_GetEvtFifoDepth()>2)
002FCF 123135            LCALL   BT_GetEvtFifoDepth
002FD2 EF                MOV     A,R7
002FD3 D3                SETB    C
002FD4 9402              SUBB    A,#02H
002FD6 5003              JNC     $ + 5H
002FD8 0230BA            LJMP    ?C0011?BT_IPC
   48: 	{//event is not empty
   49: 		new_rprt = ESWAP(BT_EventRptr);
002FDB 904A05            MOV     DPTR,#BT_EventRptr+01H
002FDE E0                MOVX    A,@DPTR
002FDF FC                MOV     R4,A
002FE0 904A04            MOV     DPTR,#BT_EventRptr
002FE3 E0                MOVX    A,@DPTR
002FE4 FF                MOV     R7,A
002FE5 EC                MOV     A,R4
002FE6 FE                MOV     R6,A
002FE7 EF                MOV     A,R7
002FE8 904E27            MOV     DPTR,#new_rprt
002FEB EE                MOV     A,R6
002FEC F0                MOVX    @DPTR,A
002FED A3                INC     DPTR
002FEE EF                MOV     A,R7
002FEF F0                MOVX    @DPTR,A
   50: 		event_prefix = HREAD(new_rprt++);
002FF0 904E27            MOV     DPTR,#new_rprt
002FF3 E4                CLR     A
002FF4 75F001            MOV     B,#01H
002FF7 1201C8            LCALL   ?C?ILDIX
002FFA 85F082            MOV     DPL,B
002FFD F583              MOV     DPH,A
002FFF E0                MOVX    A,@DPTR
003000 FF                MOV     R7,A
;---- Variable 'event_prefix' assigned to Register 'R7' ----
   51: 		if(event_prefix == CS_PREFIX_EVENT) {
003001 64C6              XRL     A,#0C6H
003003 6002              JZ      $ + 4H
003005 0195              AJMP    ?C0012?BT_IPC
   52: 			event->len = HREAD(new_rprt++);
003007 904E27            MOV     DPTR,#new_rprt
00300A 75F001            MOV     B,#01H
00300D 1201C8            LCALL   ?C?ILDIX
003010 85F082            MOV     DPL,B
003013 F583              MOV     DPH,A
003015 E0                MOVX    A,@DPTR
003016 FF                MOV     R7,A
003017 904E24            MOV     DPTR,#event
00301A E0                MOVX    A,@DPTR
00301B FB                MOV     R3,A
00301C A3                INC     DPTR
00301D E0                MOVX    A,@DPTR
00301E FA                MOV     R2,A
00301F A3                INC     DPTR
003020 E0                MOVX    A,@DPTR
003021 F9                MOV     R1,A
003022 EF                MOV     A,R7
003023 12013F            LCALL   ?C?CSTPTR
   53: 			if( new_rprt == (mem_event_buf_end+1) )
003026 904E27            MOV     DPTR,#new_rprt
003029 E0                MOVX    A,@DPTR
00302A B4500F            CJNE    A,#050H,?C0013?BT_IPC
00302D A3                INC     DPTR
00302E E0                MOVX    A,@DPTR
00302F B4000A            CJNE    A,#00H,?C0013?BT_IPC
   54: 			{
   55: 				new_rprt = mem_event_buf;
003032 904E27            MOV     DPTR,#new_rprt
003035 744F              MOV     A,#04FH
003037 F0                MOVX    @DPTR,A
003038 A3                INC     DPTR
003039 7480              MOV     A,#080H
00303B F0                MOVX    @DPTR,A
   56: 			}
00303C         ?C0013?BT_IPC:
   57: 			for(i=0;i<event->len;i++)
;---- Variable 'i' assigned to Register 'R6/R7' ----
00303C E4                CLR     A
00303D FF                MOV     R7,A
00303E FE                MOV     R6,A
00303F         ?C0014?BT_IPC:
00303F 904E24            MOV     DPTR,#event
003042 E0                MOVX    A,@DPTR
003043 FB                MOV     R3,A
003044 A3                INC     DPTR
003045 E0                MOVX    A,@DPTR
003046 FA                MOV     R2,A
003047 A3                INC     DPTR
003048 E0                MOVX    A,@DPTR
003049 F9                MOV     R1,A
00304A 1200F9            LCALL   ?C?CLDPTR
00304D FD                MOV     R5,A
00304E C3                CLR     C
00304F EF                MOV     A,R7
003050 9D                SUBB    A,R5
003051 EE                MOV     A,R6
003052 9400              SUBB    A,#00H
003054 504E              JNC     ?C0018?BT_IPC
   58: 			{
   59: 				event->DATA[i] = HREAD(new_rprt++);
003056 904E27            MOV     DPTR,#new_rprt
003059 E4                CLR     A
00305A 75F001            MOV     B,#01H
00305D 1201C8            LCALL   ?C?ILDIX
003060 85F082            MOV     DPL,B
003063 F583              MOV     DPH,A
003065 E0                MOVX    A,@DPTR
003066 FD                MOV     R5,A
003067 E9                MOV     A,R1
003068 2401              ADD     A,#01H
00306A F9                MOV     R1,A
00306B E4                CLR     A
00306C 3A                ADDC    A,R2
00306D FA                MOV     R2,A
00306E E9                MOV     A,R1
00306F 2F                ADD     A,R7
003070 F9                MOV     R1,A
003071 EA                MOV     A,R2
003072 3E                ADDC    A,R6
003073 FA                MOV     R2,A
003074 ED                MOV     A,R5
003075 12013F            LCALL   ?C?CSTPTR
   60: 				if( new_rprt == (mem_event_buf_end+1) )
003078 904E27            MOV     DPTR,#new_rprt
00307B E0                MOVX    A,@DPTR
00307C B4500F            CJNE    A,#050H,?C0016?BT_IPC
00307F A3                INC     DPTR
003080 E0                MOVX    A,@DPTR
003081 B4000A            CJNE    A,#00H,?C0016?BT_IPC
   61: 				{
   62: 					new_rprt = mem_event_buf;
003084 904E27            MOV     DPTR,#new_rprt
003087 744F              MOV     A,#04FH
003089 F0                MOVX    @DPTR,A
00308A A3                INC     DPTR
00308B 7480              MOV     A,#080H
00308D F0                MOVX    @DPTR,A
   63: 				}
   64: 			}
00308E         ?C0016?BT_IPC:
00308E 0F                INC     R7
00308F BF0001            CJNE    R7,#00H,?C0033?BT_IPC
003092 0E                INC     R6
003093         ?C0033?BT_IPC:
003093 80AA              SJMP    ?C0014?BT_IPC
   65: 		}
003095         ?C0012?BT_IPC:
   66: 		else {
   67: 			event->len = 0;
003095 904E24            MOV     DPTR,#event
003098 E0                MOVX    A,@DPTR
003099 FB                MOV     R3,A
00309A A3                INC     DPTR
00309B E0                MOVX    A,@DPTR
00309C FA                MOV     R2,A
00309D A3                INC     DPTR
00309E E0                MOVX    A,@DPTR
00309F F9                MOV     R1,A
0030A0 E4                CLR     A
0030A1 12013F            LCALL   ?C?CSTPTR
   68: 		}
0030A4         ?C0018?BT_IPC:
   69: 		BT_EventRptr = ESWAP(new_rprt);
0030A4 904E27            MOV     DPTR,#new_rprt
0030A7 E0                MOVX    A,@DPTR
0030A8 FC                MOV     R4,A
0030A9 A3                INC     DPTR
0030AA E0                MOVX    A,@DPTR
0030AB FA                MOV     R2,A
0030AC EC                MOV     A,R4
0030AD FF                MOV     R7,A
0030AE EA                MOV     A,R2
0030AF FE                MOV     R6,A
0030B0 EF                MOV     A,R7
0030B1 904A04            MOV     DPTR,#BT_EventRptr
0030B4 EE                MOV     A,R6
0030B5 F0                MOVX    @DPTR,A
0030B6 A3                INC     DPTR
0030B7 EF                MOV     A,R7
0030B8 F0                MOVX    @DPTR,A
   70: 	}
0030B9 22                RET     
0030BA         ?C0011?BT_IPC:
   71: 	else
   72: 	{
   73: 		event->len = 0;
0030BA 904E24            MOV     DPTR,#event
0030BD E0                MOVX    A,@DPTR
0030BE FB                MOV     R3,A
0030BF A3                INC     DPTR
0030C0 E0                MOVX    A,@DPTR
0030C1 FA                MOV     R2,A
0030C2 A3                INC     DPTR
0030C3 E0                MOVX    A,@DPTR
0030C4 F9                MOV     R1,A
0030C5 E4                CLR     A
0030C6 02013F            LJMP    ?C?CSTPTR
   74: 	}
----- FUNCTION _BT_EventFifoOut (END) -------


----- FUNCTION BT_GetCmdFifoDepth (BEGIN) -----
 FILE: 'BT_IPC.c'
   78: u8_t BT_GetCmdFifoDepth(void)
   79: {
   80: 	u16_t wptr,rptr,len;
   81: 	wptr = ESWAP(BT_CmdWptr);
0030C9 904A03            MOV     DPTR,#BT_CmdWptr+01H
0030CC E0                MOVX    A,@DPTR
0030CD FC                MOV     R4,A
0030CE 904A02            MOV     DPTR,#BT_CmdWptr
0030D1 E0                MOVX    A,@DPTR
0030D2 FF                MOV     R7,A
0030D3 EC                MOV     A,R4
0030D4 EF                MOV     A,R7
;---- Variable 'wptr' assigned to Register 'R4/R5' ----
0030D5 FD                MOV     R5,A
   82: 	rptr = ESWAP(BT_CmdRptr);
0030D6 904A01            MOV     DPTR,#BT_CmdRptr+01H
0030D9 E0                MOVX    A,@DPTR
0030DA FA                MOV     R2,A
0030DB 904A00            MOV     DPTR,#BT_CmdRptr
0030DE E0                MOVX    A,@DPTR
0030DF FF                MOV     R7,A
0030E0 EA                MOV     A,R2
0030E1 FE                MOV     R6,A
0030E2 EF                MOV     A,R7
;---- Variable 'rptr' assigned to Register 'R6/R7' ----
   83: 	len = (wptr + BT_CMD_BUF_LEN - rptr)&(BT_CMD_BUF_LEN-1);
0030E3 ED                MOV     A,R5
0030E4 2480              ADD     A,#080H
0030E6 FD                MOV     R5,A
0030E7 E4                CLR     A
0030E8 3C                ADDC    A,R4
0030E9 FC                MOV     R4,A
0030EA C3                CLR     C
0030EB ED                MOV     A,R5
0030EC 9F                SUBB    A,R7
0030ED FF                MOV     R7,A
0030EE EC                MOV     A,R4
0030EF 9E                SUBB    A,R6
0030F0 7E00              MOV     R6,#00H
0030F2 EF                MOV     A,R7
0030F3 547F              ANL     A,#07FH
0030F5 FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R6/R7' ----
   84: 	return len&0xff;
   85: }
0030F6 22                RET     
----- FUNCTION BT_GetCmdFifoDepth (END) -------


----- FUNCTION BT_CmdFifoEmpty (BEGIN) -----
 FILE: 'BT_IPC.c'
   96: bool BT_CmdFifoEmpty(void)
   97: {
   98: 	if(BT_GetCmdFifoDepth()==0)
   99: 	{
0030F7 11C9              ACALL   BT_GetCmdFifoDepth
0030F9 EF                MOV     A,R7
0030FA 7002              JNZ     ?C0023?BT_IPC
  100: 		return true;
  101: 	}
0030FC D3                SETB    C
0030FD 22                RET     
  102: 	return false;
0030FE         ?C0023?BT_IPC:
  103: }
0030FE C3                CLR     C
  104: 
0030FF 22                RET     
----- FUNCTION BT_CmdFifoEmpty (END) -------


----- FUNCTION _BT_CmdFifoFull (BEGIN) -----
 FILE: 'BT_IPC.c'
  105: bool BT_CmdFifoFull(BT_CMDFIFO_t *pFIFO)
  106: {
003100 904E40            MOV     DPTR,#pFIFO
003103 EB                MOV     A,R3
003104 F0                MOVX    @DPTR,A
003105 A3                INC     DPTR
003106 EA                MOV     A,R2
003107 F0                MOVX    @DPTR,A
003108 A3                INC     DPTR
003109 E9                MOV     A,R1
00310A F0                MOVX    @DPTR,A
  107: 	if((BT_GetCmdFifoDepth()+pFIFO->len+1) > BT_CMD_BUF_LEN)
  108: 		return true;
00310B 11C9              ACALL   BT_GetCmdFifoDepth
00310D 904E40            MOV     DPTR,#pFIFO
003110 E0                MOVX    A,@DPTR
003111 FB                MOV     R3,A
003112 A3                INC     DPTR
003113 E0                MOVX    A,@DPTR
003114 FA                MOV     R2,A
003115 A3                INC     DPTR
003116 E0                MOVX    A,@DPTR
003117 F9                MOV     R1,A
003118 1200F9            LCALL   ?C?CLDPTR
00311B 2F                ADD     A,R7
00311C FF                MOV     R7,A
00311D E4                CLR     A
00311E 33                RLC     A
00311F CF                XCH     A,R7
003120 2401              ADD     A,#01H
003122 CF                XCH     A,R7
003123 3400              ADDC    A,#00H
003125 FE                MOV     R6,A
003126 D3                SETB    C
003127 EF                MOV     A,R7
003128 9480              SUBB    A,#080H
00312A EE                MOV     A,R6
00312B 6480              XRL     A,#080H
00312D 9480              SUBB    A,#080H
00312F 4002              JC      ?C0025?BT_IPC
  109: 	return false;
003131 D3                SETB    C
003132 22                RET     
003133         ?C0025?BT_IPC:
  110: }
003133 C3                CLR     C
  110: 
003134 22                RET     
----- FUNCTION _BT_CmdFifoFull (END) -------


----- FUNCTION BT_GetEvtFifoDepth (BEGIN) -----
 FILE: 'BT_IPC.c'
   87: u8_t BT_GetEvtFifoDepth(void)
   88: {
   89: 	u16_t wptr,rptr,len;
   90: 	wptr = ESWAP(BT_EventWptr);
003135 904A07            MOV     DPTR,#BT_EventWptr+01H
003138 E0                MOVX    A,@DPTR
003139 FC                MOV     R4,A
00313A 904A06            MOV     DPTR,#BT_EventWptr
00313D E0                MOVX    A,@DPTR
00313E FF                MOV     R7,A
00313F EC                MOV     A,R4
003140 EF                MOV     A,R7
;---- Variable 'wptr' assigned to Register 'R4/R5' ----
003141 FD                MOV     R5,A
   91: 	rptr = ESWAP(BT_EventRptr);
003142 904A05            MOV     DPTR,#BT_EventRptr+01H
003145 E0                MOVX    A,@DPTR
003146 FA                MOV     R2,A
003147 904A04            MOV     DPTR,#BT_EventRptr
00314A E0                MOVX    A,@DPTR
00314B FF                MOV     R7,A
00314C EA                MOV     A,R2
00314D FE                MOV     R6,A
00314E EF                MOV     A,R7
;---- Variable 'rptr' assigned to Register 'R6/R7' ----
   92: 	len = (wptr + BT_EVT_BUF_LEN - rptr)&(BT_EVT_BUF_LEN-1);
00314F ED                MOV     A,R5
003150 2480              ADD     A,#080H
003152 FD                MOV     R5,A
003153 E4                CLR     A
003154 3C                ADDC    A,R4
003155 FC                MOV     R4,A
003156 C3                CLR     C
003157 ED                MOV     A,R5
003158 9F                SUBB    A,R7
003159 FF                MOV     R7,A
00315A EC                MOV     A,R4
00315B 9E                SUBB    A,R6
00315C 7E00              MOV     R6,#00H
00315E EF                MOV     A,R7
00315F 547F              ANL     A,#07FH
003161 FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R6/R7' ----
   93: 	return len&0xff;
   94: }
003162 22                RET     
----- FUNCTION BT_GetEvtFifoDepth (END) -------


----- FUNCTION YC_Ice_break (BEGIN) -----
 FILE: 'YC_Utilities.c'
    4: void YC_Ice_break()
    5: {
    6: 	CPUB_ICE_CTRL = 1;
    7: 	return;
003163 908280            MOV     DPTR,#08280H
003166 7401              MOV     A,#01H
003168 F0                MOVX    @DPTR,A
    8: }
003169 22                RET     
----- FUNCTION YC_Ice_break (END) -------


----- FUNCTION _cmemcpy (BEGIN) -----
 FILE: 'YC_Utilities.c'
   28: void cmemcpy(pxbyte dest, const u8_t* src, u8_t len) small
   29: {
00316A 8E21              MOV     dest,R6
00316C 8F22              MOV     dest+01H,R7
00316E 8B23              MOV     src,R3
003170 8A24              MOV     src+01H,R2
003172 8925              MOV     src+02H,R1
003174         ?C0011?YC_UTILITIES:
   30: 	while(len--)
003174 AF26              MOV     R7,len
003176 1526              DEC     len
003178 EF                MOV     A,R7
003179 6025              JZ      ?C0013?YC_UTILITIES
   31: 		*dest++ = (u8_t)(*src++);
00317B AB23              MOV     R3,src
00317D 0525              INC     src+02H
00317F E525              MOV     A,src+02H
003181 AA24              MOV     R2,src+01H
003183 7002              JNZ     ?C0049?YC_UTILITIES
003185 0524              INC     src+01H
003187         ?C0049?YC_UTILITIES:
003187 14                DEC     A
003188 F9                MOV     R1,A
003189 1200F9            LCALL   ?C?CLDPTR
00318C FF                MOV     R7,A
00318D 0522              INC     dest+01H
00318F E522              MOV     A,dest+01H
003191 AC21              MOV     R4,dest
003193 7002              JNZ     ?C0050?YC_UTILITIES
003195 0521              INC     dest
003197         ?C0050?YC_UTILITIES:
003197 14                DEC     A
003198 F582              MOV     DPL,A
00319A 8C83              MOV     DPH,R4
00319C EF                MOV     A,R7
00319D F0                MOVX    @DPTR,A
00319E 80D4              SJMP    ?C0011?YC_UTILITIES
   32: 	return;
   33: }
0031A0         ?C0013?YC_UTILITIES:
0031A0 22                RET     
----- FUNCTION _cmemcpy (END) -------


----- FUNCTION _YC_MemCheckEmpty (BEGIN) -----
 FILE: 'YC_Utilities.c'
   34: bool YC_MemCheckEmpty(u8_t *mem, u8_t len)
   35: {
0031A1 904E32            MOV     DPTR,#mem
0031A4 EB                MOV     A,R3
0031A5 F0                MOVX    @DPTR,A
0031A6 A3                INC     DPTR
0031A7 EA                MOV     A,R2
0031A8 F0                MOVX    @DPTR,A
0031A9 A3                INC     DPTR
0031AA E9                MOV     A,R1
0031AB F0                MOVX    @DPTR,A
0031AC A3                INC     DPTR
0031AD ED                MOV     A,R5
0031AE F0                MOVX    @DPTR,A
   36: 	int i;
   37: 	for(i=0;i<len;i++)
;---- Variable 'i' assigned to Register 'R6/R7' ----
0031AF E4                CLR     A
0031B0 FF                MOV     R7,A
0031B1 FE                MOV     R6,A
0031B2         ?C0014?YC_UTILITIES:
0031B2 904E35            MOV     DPTR,#len
0031B5 E0                MOVX    A,@DPTR
0031B6 FD                MOV     R5,A
0031B7 C3                CLR     C
0031B8 EF                MOV     A,R7
0031B9 9D                SUBB    A,R5
0031BA 7480              MOV     A,#080H
0031BC F8                MOV     R0,A
0031BD 6E                XRL     A,R6
0031BE 98                SUBB    A,R0
0031BF 5034              JNC     ?C0015?YC_UTILITIES
   38: 	{
   39: 		if(mem[i])
0031C1 904E32            MOV     DPTR,#mem
0031C4 E0                MOVX    A,@DPTR
0031C5 FB                MOV     R3,A
0031C6 A3                INC     DPTR
0031C7 E0                MOVX    A,@DPTR
0031C8 FA                MOV     R2,A
0031C9 A3                INC     DPTR
0031CA E0                MOVX    A,@DPTR
0031CB F9                MOV     R1,A
0031CC 8F82              MOV     DPL,R7
0031CE 8E83              MOV     DPH,R6
0031D0 120112            LCALL   ?C?CLDOPTR
0031D3 FD                MOV     R5,A
0031D4 701F              JNZ     ?C0015?YC_UTILITIES
   40: 		{
   41: 			break;
   42: 		}
0031D6         ?C0017?YC_UTILITIES:
   43: 		if(i==(len-1)&&mem[i]==0)
0031D6 904E35            MOV     DPTR,#len
0031D9 E0                MOVX    A,@DPTR
0031DA 24FF              ADD     A,#0FFH
0031DC FB                MOV     R3,A
0031DD E4                CLR     A
0031DE 34FF              ADDC    A,#0FFH
0031E0 FA                MOV     R2,A
0031E1 EB                MOV     A,R3
0031E2 B50709            CJNE    A,AR7,?C0016?YC_UTILITIES
0031E5 EA                MOV     A,R2
0031E6 B50605            CJNE    A,AR6,?C0016?YC_UTILITIES
0031E9 ED                MOV     A,R5
0031EA 7002              JNZ     ?C0016?YC_UTILITIES
   44: 		{
   45: 			return 0;
0031EC C3                CLR     C
0031ED 22                RET     
   46: 		}
   47: 	}
0031EE         ?C0016?YC_UTILITIES:
0031EE 0F                INC     R7
0031EF BF0001            CJNE    R7,#00H,?C0052?YC_UTILITIES
0031F2 0E                INC     R6
0031F3         ?C0052?YC_UTILITIES:
0031F3 80BD              SJMP    ?C0014?YC_UTILITIES
0031F5         ?C0015?YC_UTILITIES:
   48: 	return 1;
0031F5 D3                SETB    C
   49: }
0031F6 22                RET     
----- FUNCTION _YC_MemCheckEmpty (END) -------


----- FUNCTION _YC_Delay1S (BEGIN) -----
 FILE: 'YC_Utilities.c'
   69: void YC_Delay1S(u8_t Time)
   70: {
;---- Variable 'Time' assigned to Register 'R7' ----
   71: 	u16_t j,k;
   72: 	for(;Time>0;Time--)
0031F7         ?C0034?YC_UTILITIES:
0031F7 EF                MOV     A,R7
0031F8 D3                SETB    C
0031F9 9400              SUBB    A,#00H
0031FB 401F              JC      ?C0043?YC_UTILITIES
   73: 	{
   74: 		for(j=0;j<1000;j++)
;---- Variable 'j' assigned to Register 'R4/R5' ----
0031FD E4                CLR     A
0031FE FD                MOV     R5,A
0031FF FC                MOV     R4,A
003200         ?C0037?YC_UTILITIES:
   75: 		{
   76: 			for(k=0;k<1150;k++);
;---- Variable 'k' assigned to Register 'R2/R3' ----
003200 E4                CLR     A
003201 FB                MOV     R3,A
003202 FA                MOV     R2,A
003203         ?C0040?YC_UTILITIES:
003203 0B                INC     R3
003204 BB0001            CJNE    R3,#00H,?C0055?YC_UTILITIES
003207 0A                INC     R2
003208         ?C0055?YC_UTILITIES:
003208 BA04F8            CJNE    R2,#04H,?C0040?YC_UTILITIES
00320B BB7EF5            CJNE    R3,#07EH,?C0040?YC_UTILITIES
   77: 		}
00320E         ?C0039?YC_UTILITIES:
00320E 0D                INC     R5
00320F BD0001            CJNE    R5,#00H,?C0056?YC_UTILITIES
003212 0C                INC     R4
003213         ?C0056?YC_UTILITIES:
003213 BC03EA            CJNE    R4,#03H,?C0037?YC_UTILITIES
003216 BDE8E7            CJNE    R5,#0E8H,?C0037?YC_UTILITIES
   78: 	}
003219         ?C0036?YC_UTILITIES:
003219 1F                DEC     R7
00321A 80DB              SJMP    ?C0034?YC_UTILITIES
   79: }
00321C         ?C0043?YC_UTILITIES:
00321C 22                RET     
----- FUNCTION _YC_Delay1S (END) -------


----- FUNCTION _CS_Scale_GetDeltaAD (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  225: u16_t CS_Scale_GetDeltaAD(u8_t option)
  226: {
00321D 904E43            MOV     DPTR,#option
003220 EF                MOV     A,R7
003221 F0                MOVX    @DPTR,A
  227: 	static       u8_t xdata B_Weight_Pos;				//正负AD变化标志
  228: 	u16_t	ad_temp;
  229: 	u16_t      R_AD_Zero;
  230: 	R_AD_Zero = CS_Scale_ZeroProc(GetRunningZero,0);
003222 E4                CLR     A
003223 FD                MOV     R5,A
003224 FC                MOV     R4,A
003225 7F01              MOV     R7,#01H
003227 1212F0            LCALL   _CS_Scale_ZeroProc
;---- Variable 'R_AD_Zero' assigned to Register 'R6/R7' ----
  231: 	if(R_AD_Original>R_AD_Zero)
00322A 904CD7            MOV     DPTR,#R_AD_Original
00322D E0                MOVX    A,@DPTR
00322E FC                MOV     R4,A
00322F A3                INC     DPTR
003230 E0                MOVX    A,@DPTR
003231 FD                MOV     R5,A
003232 D3                SETB    C
003233 9F                SUBB    A,R7
003234 EC                MOV     A,R4
003235 9E                SUBB    A,R6
003236 4014              JC      ?C0014?CS_SCALE_PROC
  232: 		{
  233: 		ad_temp = R_AD_Original - R_AD_Zero;
003238 ED                MOV     A,R5
003239 9F                SUBB    A,R7
00323A FF                MOV     R7,A
00323B EC                MOV     A,R4
00323C 9E                SUBB    A,R6
00323D 904E44            MOV     DPTR,#ad_temp
003240 F0                MOVX    @DPTR,A
003241 A3                INC     DPTR
003242 EF                MOV     A,R7
003243 F0                MOVX    @DPTR,A
  234: 		B_Weight_Pos = true;
003244 904C80            MOV     DPTR,#B_Weight_Pos
003247 7401              MOV     A,#01H
003249 F0                MOVX    @DPTR,A
  235: 
  236: 		}
00324A 801A              SJMP    ?C0015?CS_SCALE_PROC
00324C         ?C0014?CS_SCALE_PROC:
  237: 	else
  238: 		{
  239: 		ad_temp = R_AD_Zero - R_AD_Original;
00324C 904CD7            MOV     DPTR,#R_AD_Original
00324F E0                MOVX    A,@DPTR
003250 FC                MOV     R4,A
003251 A3                INC     DPTR
003252 E0                MOVX    A,@DPTR
003253 FD                MOV     R5,A
003254 C3                CLR     C
003255 EF                MOV     A,R7
003256 9D                SUBB    A,R5
003257 FF                MOV     R7,A
003258 EE                MOV     A,R6
003259 9C                SUBB    A,R4
00325A 904E44            MOV     DPTR,#ad_temp
00325D F0                MOVX    @DPTR,A
00325E A3                INC     DPTR
00325F EF                MOV     A,R7
003260 F0                MOVX    @DPTR,A
  240: 		B_Weight_Pos = false;		
003261 E4                CLR     A
003262 904C80            MOV     DPTR,#B_Weight_Pos
003265 F0                MOVX    @DPTR,A
  241: 		}
003266         ?C0015?CS_SCALE_PROC:
  242: 
  243: 	
  244: 	if(option == GetADDirection)
003266 904E43            MOV     DPTR,#option
003269 E0                MOVX    A,@DPTR
00326A B40108            CJNE    A,#01H,?C0016?CS_SCALE_PROC
  245: 		{
  246: 		return	B_Weight_Pos;
00326D 904C80            MOV     DPTR,#B_Weight_Pos
003270 E0                MOVX    A,@DPTR
003271 FF                MOV     R7,A
003272 7E00              MOV     R6,#00H
003274 22                RET     
  247: 		}	
003275         ?C0016?CS_SCALE_PROC:
  248: 	return ad_temp;
003275 904E44            MOV     DPTR,#ad_temp
003278 E0                MOVX    A,@DPTR
003279 FE                MOV     R6,A
00327A A3                INC     DPTR
00327B E0                MOVX    A,@DPTR
00327C FF                MOV     R7,A
  249: }
00327D 22                RET     
----- FUNCTION _CS_Scale_GetDeltaAD (END) -------


----- FUNCTION _CS_Scale_AdcFilter (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  254: u16_t CS_Scale_AdcFilter(u8_t option,u16_t R_AD_BUF)
  255: {
00327E 904E0C            MOV     DPTR,#R_AD_BUF
003281 EC                MOV     A,R4
003282 F0                MOVX    @DPTR,A
003283 A3                INC     DPTR
003284 ED                MOV     A,R5
003285 F0                MOVX    @DPTR,A
003286 904E0B            MOV     DPTR,#option
003289 EF                MOV     A,R7
00328A F0                MOVX    @DPTR,A
  256: 	u32_t	ad_temp;
  257: 	static	u16_t xdata R_AD_FilTimes;
  258: 	static	u16_t xdata R_AD_BUF_OLD;
  259: 	static	u16_t xdata R_AD_F1;
  260: 	static	u16_t xdata R_AD_F2;
  261: 	static	u16_t xdata R_AD_F3;
  262: 	static	u16_t xdata R_AD_F4;
  263: 	static	u16_t xdata R_AD_F5;
  264: 	static	u16_t xdata R_AD_F6;
  265: 	static	u16_t xdata R_AD_F7;
  266: 	static	u16_t xdata R_AD_F8;	
  267: 		
  268: 	if(option==ScaleAdcFilterGetFilTimes)
00328B BF0209            CJNE    R7,#02H,?C0018?CS_SCALE_PROC
  269: 		{
  270: 		return  R_AD_FilTimes;
00328E 904C81            MOV     DPTR,#R_AD_FilTimes
003291 E0                MOVX    A,@DPTR
003292 FE                MOV     R6,A
003293 A3                INC     DPTR
003294 E0                MOVX    A,@DPTR
003295 FF                MOV     R7,A
003296 22                RET     
  271: 		}
003297         ?C0018?CS_SCALE_PROC:
  272: 	
  273: 	
  274: 	if(R_AD_BUF >R_AD_BUF_OLD)
003297 904C83            MOV     DPTR,#R_AD_BUF_OLD
00329A E0                MOVX    A,@DPTR
00329B FE                MOV     R6,A
00329C A3                INC     DPTR
00329D E0                MOVX    A,@DPTR
00329E FF                MOV     R7,A
00329F 904E0C            MOV     DPTR,#R_AD_BUF
0032A2 E0                MOVX    A,@DPTR
0032A3 FC                MOV     R4,A
0032A4 A3                INC     DPTR
0032A5 E0                MOVX    A,@DPTR
0032A6 FD                MOV     R5,A
0032A7 D3                SETB    C
0032A8 9F                SUBB    A,R7
0032A9 EC                MOV     A,R4
0032AA 9E                SUBB    A,R6
0032AB 4017              JC      ?C0020?CS_SCALE_PROC
  275: 		ad_temp = R_AD_BUF - R_AD_BUF_OLD;
0032AD 904C83            MOV     DPTR,#R_AD_BUF_OLD
0032B0 E0                MOVX    A,@DPTR
0032B1 A3                INC     DPTR
0032B2 E0                MOVX    A,@DPTR
0032B3 ED                MOV     A,R5
0032B4 9F                SUBB    A,R7
0032B5 FF                MOV     R7,A
0032B6 EC                MOV     A,R4
0032B7 9E                SUBB    A,R6
0032B8 FE                MOV     R6,A
0032B9 E4                CLR     A
0032BA FC                MOV     R4,A
0032BB FD                MOV     R5,A
0032BC 904E0E            MOV     DPTR,#ad_temp
0032BF 120332            LCALL   ?C?LSTXDATA
0032C2 801E              SJMP    ?C0021?CS_SCALE_PROC
0032C4         ?C0020?CS_SCALE_PROC:
  276: 	else
  277: 		ad_temp = R_AD_BUF_OLD - R_AD_BUF;
0032C4 904E0C            MOV     DPTR,#R_AD_BUF
0032C7 E0                MOVX    A,@DPTR
0032C8 FE                MOV     R6,A
0032C9 A3                INC     DPTR
0032CA E0                MOVX    A,@DPTR
0032CB FF                MOV     R7,A
0032CC C3                CLR     C
0032CD 904C84            MOV     DPTR,#R_AD_BUF_OLD+01H
0032D0 E0                MOVX    A,@DPTR
0032D1 9F                SUBB    A,R7
0032D2 FF                MOV     R7,A
0032D3 904C83            MOV     DPTR,#R_AD_BUF_OLD
0032D6 E0                MOVX    A,@DPTR
0032D7 9E                SUBB    A,R6
0032D8 FE                MOV     R6,A
0032D9 E4                CLR     A
0032DA FC                MOV     R4,A
0032DB FD                MOV     R5,A
0032DC 904E0E            MOV     DPTR,#ad_temp
0032DF 120332            LCALL   ?C?LSTXDATA
0032E2         ?C0021?CS_SCALE_PROC:
  278: 
  279: 	R_AD_BUF_OLD	=	R_AD_BUF;
0032E2 904E0C            MOV     DPTR,#R_AD_BUF
0032E5 E0                MOVX    A,@DPTR
0032E6 FF                MOV     R7,A
0032E7 A3                INC     DPTR
0032E8 E0                MOVX    A,@DPTR
0032E9 904C83            MOV     DPTR,#R_AD_BUF_OLD
0032EC CF                XCH     A,R7
0032ED F0                MOVX    @DPTR,A
0032EE A3                INC     DPTR
0032EF EF                MOV     A,R7
0032F0 F0                MOVX    @DPTR,A
  280: 	
  281: 	if((ad_temp > CS_Scale_FiterX) ||(option==ScaleAdcFilterReset))	
0032F1 E4                CLR     A
0032F2 7F05              MOV     R7,#05H
0032F4 FE                MOV     R6,A
0032F5 FD                MOV     R5,A
0032F6 FC                MOV     R4,A
0032F7 904E0E            MOV     DPTR,#ad_temp
0032FA E0                MOVX    A,@DPTR
0032FB F8                MOV     R0,A
0032FC A3                INC     DPTR
0032FD E0                MOVX    A,@DPTR
0032FE F9                MOV     R1,A
0032FF A3                INC     DPTR
003300 E0                MOVX    A,@DPTR
003301 FA                MOV     R2,A
003302 A3                INC     DPTR
003303 E0                MOVX    A,@DPTR
003304 FB                MOV     R3,A
003305 D3                SETB    C
003306 1202FB            LCALL   ?C?ULCMP
003309 5007              JNC     ?C0023?CS_SCALE_PROC
00330B 904E0B            MOV     DPTR,#option
00330E E0                MOVX    A,@DPTR
00330F B4012B            CJNE    A,#01H,?C0022?CS_SCALE_PROC
003312         ?C0023?CS_SCALE_PROC:
  282: 		{						
  283: 		R_AD_FilTimes = 0;
003312 E4                CLR     A
003313 904C81            MOV     DPTR,#R_AD_FilTimes
003316 F0                MOVX    @DPTR,A
003317 A3                INC     DPTR
003318 F0                MOVX    @DPTR,A
  284: 		R_AD_F1 	    = 0;
003319 904C85            MOV     DPTR,#R_AD_F1
00331C F0                MOVX    @DPTR,A
00331D A3                INC     DPTR
00331E F0                MOVX    @DPTR,A
  285: 		R_AD_F2 	    = 0;
00331F A3                INC     DPTR
003320 F0                MOVX    @DPTR,A
003321 A3                INC     DPTR
003322 F0                MOVX    @DPTR,A
  286: 		R_AD_F3 	    = 0;
003323 A3                INC     DPTR
003324 F0                MOVX    @DPTR,A
003325 A3                INC     DPTR
003326 F0                MOVX    @DPTR,A
  287: 		R_AD_F4 	    = 0;
003327 A3                INC     DPTR
003328 F0                MOVX    @DPTR,A
003329 A3                INC     DPTR
00332A F0                MOVX    @DPTR,A
  288: 		R_AD_F5 	    = 0;
00332B A3                INC     DPTR
00332C F0                MOVX    @DPTR,A
00332D A3                INC     DPTR
00332E F0                MOVX    @DPTR,A
  289: 		R_AD_F6 	    = 0;
00332F A3                INC     DPTR
003330 F0                MOVX    @DPTR,A
003331 A3                INC     DPTR
003332 F0                MOVX    @DPTR,A
  290: 		R_AD_F7 	    = 0;
003333 A3                INC     DPTR
003334 F0                MOVX    @DPTR,A
003335 A3                INC     DPTR
003336 F0                MOVX    @DPTR,A
  291: 		R_AD_F8 	    = 0;
003337 A3                INC     DPTR
003338 F0                MOVX    @DPTR,A
003339 A3                INC     DPTR
00333A F0                MOVX    @DPTR,A
  292: 		}
00333B C125              AJMP    ?C0024?CS_SCALE_PROC
00333D         ?C0022?CS_SCALE_PROC:
  293: 	else
  294: 		{
  295: 		if(R_AD_FilTimes < 200 )
00333D C3                CLR     C
00333E 904C82            MOV     DPTR,#R_AD_FilTimes+01H
003341 E0                MOVX    A,@DPTR
003342 94C8              SUBB    A,#0C8H
003344 904C81            MOV     DPTR,#R_AD_FilTimes
003347 E0                MOVX    A,@DPTR
003348 9400              SUBB    A,#00H
00334A 500C              JNC     ?C0025?CS_SCALE_PROC
  296: 		R_AD_FilTimes ++;	
00334C A3                INC     DPTR
00334D E0                MOVX    A,@DPTR
00334E 04                INC     A
00334F F0                MOVX    @DPTR,A
003350 7006              JNZ     ?C0232?CS_SCALE_PROC
003352 904C81            MOV     DPTR,#R_AD_FilTimes
003355 E0                MOVX    A,@DPTR
003356 04                INC     A
003357 F0                MOVX    @DPTR,A
003358         ?C0232?CS_SCALE_PROC:
003358         ?C0025?CS_SCALE_PROC:
  297: 
  298: 			if(R_AD_FilTimes<=1)
003358 904C81            MOV     DPTR,#R_AD_FilTimes
00335B E0                MOVX    A,@DPTR
00335C FE                MOV     R6,A
00335D A3                INC     DPTR
00335E E0                MOVX    A,@DPTR
00335F FF                MOV     R7,A
003360 D3                SETB    C
003361 9401              SUBB    A,#01H
003363 EE                MOV     A,R6
003364 9400              SUBB    A,#00H
003366 500F              JNC     ?C0026?CS_SCALE_PROC
  299: 				R_AD_F1 = R_AD_BUF;	
003368 904E0C            MOV     DPTR,#R_AD_BUF
00336B E0                MOVX    A,@DPTR
00336C FD                MOV     R5,A
00336D A3                INC     DPTR
00336E E0                MOVX    A,@DPTR
00336F 904C85            MOV     DPTR,#R_AD_F1
003372 CD                XCH     A,R5
003373 F0                MOVX    @DPTR,A
003374 A3                INC     DPTR
003375 ED                MOV     A,R5
003376 F0                MOVX    @DPTR,A
003377         ?C0026?CS_SCALE_PROC:
  300: 			if(R_AD_FilTimes<=2)
003377 D3                SETB    C
003378 EF                MOV     A,R7
003379 9402              SUBB    A,#02H
00337B EE                MOV     A,R6
00337C 9400              SUBB    A,#00H
00337E 500F              JNC     ?C0027?CS_SCALE_PROC
  301: 				R_AD_F2 = R_AD_BUF;
003380 904E0C            MOV     DPTR,#R_AD_BUF
003383 E0                MOVX    A,@DPTR
003384 FF                MOV     R7,A
003385 A3                INC     DPTR
003386 E0                MOVX    A,@DPTR
003387 904C87            MOV     DPTR,#R_AD_F2
00338A CF                XCH     A,R7
00338B F0                MOVX    @DPTR,A
00338C A3                INC     DPTR
00338D EF                MOV     A,R7
00338E F0                MOVX    @DPTR,A
00338F         ?C0027?CS_SCALE_PROC:
  302: 			if(R_AD_FilTimes<=3)
00338F D3                SETB    C
003390 904C82            MOV     DPTR,#R_AD_FilTimes+01H
003393 E0                MOVX    A,@DPTR
003394 9403              SUBB    A,#03H
003396 904C81            MOV     DPTR,#R_AD_FilTimes
003399 E0                MOVX    A,@DPTR
00339A 9400              SUBB    A,#00H
00339C 500F              JNC     ?C0028?CS_SCALE_PROC
  303: 				R_AD_F3 = R_AD_BUF;
00339E 904E0C            MOV     DPTR,#R_AD_BUF
0033A1 E0                MOVX    A,@DPTR
0033A2 FF                MOV     R7,A
0033A3 A3                INC     DPTR
0033A4 E0                MOVX    A,@DPTR
0033A5 904C89            MOV     DPTR,#R_AD_F3
0033A8 CF                XCH     A,R7
0033A9 F0                MOVX    @DPTR,A
0033AA A3                INC     DPTR
0033AB EF                MOV     A,R7
0033AC F0                MOVX    @DPTR,A
0033AD         ?C0028?CS_SCALE_PROC:
  304: 			if(R_AD_FilTimes<=4)
0033AD 904C81            MOV     DPTR,#R_AD_FilTimes
0033B0 E0                MOVX    A,@DPTR
0033B1 FE                MOV     R6,A
0033B2 A3                INC     DPTR
0033B3 E0                MOVX    A,@DPTR
0033B4 FF                MOV     R7,A
0033B5 D3                SETB    C
0033B6 9404              SUBB    A,#04H
0033B8 EE                MOV     A,R6
0033B9 9400              SUBB    A,#00H
0033BB 500F              JNC     ?C0029?CS_SCALE_PROC
  305: 				R_AD_F4 = R_AD_BUF;
0033BD 904E0C            MOV     DPTR,#R_AD_BUF
0033C0 E0                MOVX    A,@DPTR
0033C1 FD                MOV     R5,A
0033C2 A3                INC     DPTR
0033C3 E0                MOVX    A,@DPTR
0033C4 904C8B            MOV     DPTR,#R_AD_F4
0033C7 CD                XCH     A,R5
0033C8 F0                MOVX    @DPTR,A
0033C9 A3                INC     DPTR
0033CA ED                MOV     A,R5
0033CB F0                MOVX    @DPTR,A
0033CC         ?C0029?CS_SCALE_PROC:
  306: 			if(R_AD_FilTimes<=5)
0033CC D3                SETB    C
0033CD EF                MOV     A,R7
0033CE 9405              SUBB    A,#05H
0033D0 EE                MOV     A,R6
0033D1 9400              SUBB    A,#00H
0033D3 500F              JNC     ?C0030?CS_SCALE_PROC
  307: 				R_AD_F5 = R_AD_BUF;
0033D5 904E0C            MOV     DPTR,#R_AD_BUF
0033D8 E0                MOVX    A,@DPTR
0033D9 FF                MOV     R7,A
0033DA A3                INC     DPTR
0033DB E0                MOVX    A,@DPTR
0033DC 904C8D            MOV     DPTR,#R_AD_F5
0033DF CF                XCH     A,R7
0033E0 F0                MOVX    @DPTR,A
0033E1 A3                INC     DPTR
0033E2 EF                MOV     A,R7
0033E3 F0                MOVX    @DPTR,A
0033E4         ?C0030?CS_SCALE_PROC:
  308: 			if(R_AD_FilTimes<=6)
0033E4 D3                SETB    C
0033E5 904C82            MOV     DPTR,#R_AD_FilTimes+01H
0033E8 E0                MOVX    A,@DPTR
0033E9 9406              SUBB    A,#06H
0033EB 904C81            MOV     DPTR,#R_AD_FilTimes
0033EE E0                MOVX    A,@DPTR
0033EF 9400              SUBB    A,#00H
0033F1 500F              JNC     ?C0031?CS_SCALE_PROC
  309: 				R_AD_F6 = R_AD_BUF;
0033F3 904E0C            MOV     DPTR,#R_AD_BUF
0033F6 E0                MOVX    A,@DPTR
0033F7 FF                MOV     R7,A
0033F8 A3                INC     DPTR
0033F9 E0                MOVX    A,@DPTR
0033FA 904C8F            MOV     DPTR,#R_AD_F6
0033FD CF                XCH     A,R7
0033FE F0                MOVX    @DPTR,A
0033FF A3                INC     DPTR
003400 EF                MOV     A,R7
003401 F0                MOVX    @DPTR,A
003402         ?C0031?CS_SCALE_PROC:
  310: 			if(R_AD_FilTimes<=7)
003402 904C81            MOV     DPTR,#R_AD_FilTimes
003405 E0                MOVX    A,@DPTR
003406 FE                MOV     R6,A
003407 A3                INC     DPTR
003408 E0                MOVX    A,@DPTR
003409 FF                MOV     R7,A
00340A D3                SETB    C
00340B 9407              SUBB    A,#07H
00340D EE                MOV     A,R6
00340E 9400              SUBB    A,#00H
003410 500F              JNC     ?C0032?CS_SCALE_PROC
  311: 				R_AD_F7 = R_AD_BUF;
003412 904E0C            MOV     DPTR,#R_AD_BUF
003415 E0                MOVX    A,@DPTR
003416 FD                MOV     R5,A
003417 A3                INC     DPTR
003418 E0                MOVX    A,@DPTR
003419 904C91            MOV     DPTR,#R_AD_F7
00341C CD                XCH     A,R5
00341D F0                MOVX    @DPTR,A
00341E A3                INC     DPTR
00341F ED                MOV     A,R5
003420 F0                MOVX    @DPTR,A
003421         ?C0032?CS_SCALE_PROC:
  312: 			if(R_AD_FilTimes<=8)
003421 D3                SETB    C
003422 EF                MOV     A,R7
003423 9408              SUBB    A,#08H
003425 EE                MOV     A,R6
003426 9400              SUBB    A,#00H
003428 500F              JNC     ?C0033?CS_SCALE_PROC
  313: 				R_AD_F8 = R_AD_BUF;
00342A 904E0C            MOV     DPTR,#R_AD_BUF
00342D E0                MOVX    A,@DPTR
00342E FF                MOV     R7,A
00342F A3                INC     DPTR
003430 E0                MOVX    A,@DPTR
003431 904C93            MOV     DPTR,#R_AD_F8
003434 CF                XCH     A,R7
003435 F0                MOVX    @DPTR,A
003436 A3                INC     DPTR
003437 EF                MOV     A,R7
003438 F0                MOVX    @DPTR,A
003439         ?C0033?CS_SCALE_PROC:
  314: 			if(R_AD_FilTimes>8)
003439 D3                SETB    C
00343A 904C82            MOV     DPTR,#R_AD_FilTimes+01H
00343D E0                MOVX    A,@DPTR
00343E 9408              SUBB    A,#08H
003440 904C81            MOV     DPTR,#R_AD_FilTimes
003443 E0                MOVX    A,@DPTR
003444 9400              SUBB    A,#00H
003446 4078              JC      ?C0034?CS_SCALE_PROC
  315: 				{
  316: 				R_AD_F1 = R_AD_F2;
003448 904C87            MOV     DPTR,#R_AD_F2
00344B E0                MOVX    A,@DPTR
00344C FF                MOV     R7,A
00344D A3                INC     DPTR
00344E E0                MOVX    A,@DPTR
00344F 904C85            MOV     DPTR,#R_AD_F1
003452 CF                XCH     A,R7
003453 F0                MOVX    @DPTR,A
003454 A3                INC     DPTR
003455 EF                MOV     A,R7
003456 F0                MOVX    @DPTR,A
  317: 				R_AD_F2 = R_AD_F3;
003457 904C89            MOV     DPTR,#R_AD_F3
00345A E0                MOVX    A,@DPTR
00345B FF                MOV     R7,A
00345C A3                INC     DPTR
00345D E0                MOVX    A,@DPTR
00345E 904C87            MOV     DPTR,#R_AD_F2
003461 CF                XCH     A,R7
003462 F0                MOVX    @DPTR,A
003463 A3                INC     DPTR
003464 EF                MOV     A,R7
003465 F0                MOVX    @DPTR,A
  318: 				R_AD_F3 = R_AD_F4;
003466 904C8B            MOV     DPTR,#R_AD_F4
003469 E0                MOVX    A,@DPTR
00346A FF                MOV     R7,A
00346B A3                INC     DPTR
00346C E0                MOVX    A,@DPTR
00346D 904C89            MOV     DPTR,#R_AD_F3
003470 CF                XCH     A,R7
003471 F0                MOVX    @DPTR,A
003472 A3                INC     DPTR
003473 EF                MOV     A,R7
003474 F0                MOVX    @DPTR,A
  319: 				R_AD_F4 = R_AD_F5;
003475 904C8D            MOV     DPTR,#R_AD_F5
003478 E0                MOVX    A,@DPTR
003479 FF                MOV     R7,A
00347A A3                INC     DPTR
00347B E0                MOVX    A,@DPTR
00347C 904C8B            MOV     DPTR,#R_AD_F4
00347F CF                XCH     A,R7
003480 F0                MOVX    @DPTR,A
003481 A3                INC     DPTR
003482 EF                MOV     A,R7
003483 F0                MOVX    @DPTR,A
  320: 				R_AD_F5 = R_AD_F6;
003484 904C8F            MOV     DPTR,#R_AD_F6
003487 E0                MOVX    A,@DPTR
003488 FF                MOV     R7,A
003489 A3                INC     DPTR
00348A E0                MOVX    A,@DPTR
00348B 904C8D            MOV     DPTR,#R_AD_F5
00348E CF                XCH     A,R7
00348F F0                MOVX    @DPTR,A
003490 A3                INC     DPTR
003491 EF                MOV     A,R7
003492 F0                MOVX    @DPTR,A
  321: 				R_AD_F6 = R_AD_F7;
003493 904C91            MOV     DPTR,#R_AD_F7
003496 E0                MOVX    A,@DPTR
003497 FF                MOV     R7,A
003498 A3                INC     DPTR
003499 E0                MOVX    A,@DPTR
00349A 904C8F            MOV     DPTR,#R_AD_F6
00349D CF                XCH     A,R7
00349E F0                MOVX    @DPTR,A
00349F A3                INC     DPTR
0034A0 EF                MOV     A,R7
0034A1 F0                MOVX    @DPTR,A
  322: 				R_AD_F7 = R_AD_F8;
0034A2 904C93            MOV     DPTR,#R_AD_F8
0034A5 E0                MOVX    A,@DPTR
0034A6 FF                MOV     R7,A
0034A7 A3                INC     DPTR
0034A8 E0                MOVX    A,@DPTR
0034A9 904C91            MOV     DPTR,#R_AD_F7
0034AC CF                XCH     A,R7
0034AD F0                MOVX    @DPTR,A
0034AE A3                INC     DPTR
0034AF EF                MOV     A,R7
0034B0 F0                MOVX    @DPTR,A
  323: 				R_AD_F8 = R_AD_BUF;
0034B1 904E0C            MOV     DPTR,#R_AD_BUF
0034B4 E0                MOVX    A,@DPTR
0034B5 FF                MOV     R7,A
0034B6 A3                INC     DPTR
0034B7 E0                MOVX    A,@DPTR
0034B8 904C93            MOV     DPTR,#R_AD_F8
0034BB CF                XCH     A,R7
0034BC F0                MOVX    @DPTR,A
0034BD A3                INC     DPTR
0034BE EF                MOV     A,R7
0034BF F0                MOVX    @DPTR,A
  324: 				}
0034C0         ?C0034?CS_SCALE_PROC:
  325: 
  326: 		ad_temp	= R_AD_F1;
0034C0 904C85            MOV     DPTR,#R_AD_F1
0034C3 E0                MOVX    A,@DPTR
0034C4 FE                MOV     R6,A
0034C5 A3                INC     DPTR
0034C6 E0                MOVX    A,@DPTR
0034C7 FF                MOV     R7,A
0034C8 E4                CLR     A
0034C9 FC                MOV     R4,A
0034CA FD                MOV     R5,A
0034CB 904E0E            MOV     DPTR,#ad_temp
0034CE 120332            LCALL   ?C?LSTXDATA
  327: 		ad_temp	+= R_AD_F2;
0034D1 904E0E            MOV     DPTR,#ad_temp
0034D4 E0                MOVX    A,@DPTR
0034D5 F8                MOV     R0,A
0034D6 A3                INC     DPTR
0034D7 E0                MOVX    A,@DPTR
0034D8 F9                MOV     R1,A
0034D9 A3                INC     DPTR
0034DA E0                MOVX    A,@DPTR
0034DB FA                MOV     R2,A
0034DC A3                INC     DPTR
0034DD E0                MOVX    A,@DPTR
0034DE FB                MOV     R3,A
0034DF 904C87            MOV     DPTR,#R_AD_F2
0034E2 E0                MOVX    A,@DPTR
0034E3 FE                MOV     R6,A
0034E4 A3                INC     DPTR
0034E5 E0                MOVX    A,@DPTR
0034E6 FF                MOV     R7,A
0034E7 E4                CLR     A
0034E8 FC                MOV     R4,A
0034E9 FD                MOV     R5,A
0034EA EB                MOV     A,R3
0034EB 2F                ADD     A,R7
0034EC FF                MOV     R7,A
0034ED EA                MOV     A,R2
0034EE 3E                ADDC    A,R6
0034EF FE                MOV     R6,A
0034F0 ED                MOV     A,R5
0034F1 39                ADDC    A,R1
0034F2 FD                MOV     R5,A
0034F3 EC                MOV     A,R4
0034F4 38                ADDC    A,R0
0034F5 FC                MOV     R4,A
0034F6 904E0E            MOV     DPTR,#ad_temp
0034F9 120332            LCALL   ?C?LSTXDATA
  328: 		ad_temp	+= R_AD_F3;
0034FC 904E0E            MOV     DPTR,#ad_temp
0034FF E0                MOVX    A,@DPTR
003500 F8                MOV     R0,A
003501 A3                INC     DPTR
003502 E0                MOVX    A,@DPTR
003503 F9                MOV     R1,A
003504 A3                INC     DPTR
003505 E0                MOVX    A,@DPTR
003506 FA                MOV     R2,A
003507 A3                INC     DPTR
003508 E0                MOVX    A,@DPTR
003509 FB                MOV     R3,A
00350A 904C89            MOV     DPTR,#R_AD_F3
00350D E0                MOVX    A,@DPTR
00350E FE                MOV     R6,A
00350F A3                INC     DPTR
003510 E0                MOVX    A,@DPTR
003511 FF                MOV     R7,A
003512 E4                CLR     A
003513 FC                MOV     R4,A
003514 FD                MOV     R5,A
003515 EB                MOV     A,R3
003516 2F                ADD     A,R7
003517 FF                MOV     R7,A
003518 EA                MOV     A,R2
003519 3E                ADDC    A,R6
00351A FE                MOV     R6,A
00351B ED                MOV     A,R5
00351C 39                ADDC    A,R1
00351D FD                MOV     R5,A
00351E EC                MOV     A,R4
00351F 38                ADDC    A,R0
003520 FC                MOV     R4,A
003521 904E0E            MOV     DPTR,#ad_temp
003524 120332            LCALL   ?C?LSTXDATA
  329: 		ad_temp	+= R_AD_F4;
003527 904E0E            MOV     DPTR,#ad_temp
00352A E0                MOVX    A,@DPTR
00352B F8                MOV     R0,A
00352C A3                INC     DPTR
00352D E0                MOVX    A,@DPTR
00352E F9                MOV     R1,A
00352F A3                INC     DPTR
003530 E0                MOVX    A,@DPTR
003531 FA                MOV     R2,A
003532 A3                INC     DPTR
003533 E0                MOVX    A,@DPTR
003534 FB                MOV     R3,A
003535 904C8B            MOV     DPTR,#R_AD_F4
003538 E0                MOVX    A,@DPTR
003539 FE                MOV     R6,A
00353A A3                INC     DPTR
00353B E0                MOVX    A,@DPTR
00353C FF                MOV     R7,A
00353D E4                CLR     A
00353E FC                MOV     R4,A
00353F FD                MOV     R5,A
003540 EB                MOV     A,R3
003541 2F                ADD     A,R7
003542 FF                MOV     R7,A
003543 EA                MOV     A,R2
003544 3E                ADDC    A,R6
003545 FE                MOV     R6,A
003546 ED                MOV     A,R5
003547 39                ADDC    A,R1
003548 FD                MOV     R5,A
003549 EC                MOV     A,R4
00354A 38                ADDC    A,R0
00354B FC                MOV     R4,A
00354C 904E0E            MOV     DPTR,#ad_temp
00354F 120332            LCALL   ?C?LSTXDATA
  330: 		ad_temp	+= R_AD_F5;
003552 904E0E            MOV     DPTR,#ad_temp
003555 E0                MOVX    A,@DPTR
003556 F8                MOV     R0,A
003557 A3                INC     DPTR
003558 E0                MOVX    A,@DPTR
003559 F9                MOV     R1,A
00355A A3                INC     DPTR
00355B E0                MOVX    A,@DPTR
00355C FA                MOV     R2,A
00355D A3                INC     DPTR
00355E E0                MOVX    A,@DPTR
00355F FB                MOV     R3,A
003560 904C8D            MOV     DPTR,#R_AD_F5
003563 E0                MOVX    A,@DPTR
003564 FE                MOV     R6,A
003565 A3                INC     DPTR
003566 E0                MOVX    A,@DPTR
003567 FF                MOV     R7,A
003568 E4                CLR     A
003569 FC                MOV     R4,A
00356A FD                MOV     R5,A
00356B EB                MOV     A,R3
00356C 2F                ADD     A,R7
00356D FF                MOV     R7,A
00356E EA                MOV     A,R2
00356F 3E                ADDC    A,R6
003570 FE                MOV     R6,A
003571 ED                MOV     A,R5
003572 39                ADDC    A,R1
003573 FD                MOV     R5,A
003574 EC                MOV     A,R4
003575 38                ADDC    A,R0
003576 FC                MOV     R4,A
003577 904E0E            MOV     DPTR,#ad_temp
00357A 120332            LCALL   ?C?LSTXDATA
  331: 		ad_temp	+= R_AD_F6;
00357D 904E0E            MOV     DPTR,#ad_temp
003580 E0                MOVX    A,@DPTR
003581 F8                MOV     R0,A
003582 A3                INC     DPTR
003583 E0                MOVX    A,@DPTR
003584 F9                MOV     R1,A
003585 A3                INC     DPTR
003586 E0                MOVX    A,@DPTR
003587 FA                MOV     R2,A
003588 A3                INC     DPTR
003589 E0                MOVX    A,@DPTR
00358A FB                MOV     R3,A
00358B 904C8F            MOV     DPTR,#R_AD_F6
00358E E0                MOVX    A,@DPTR
00358F FE                MOV     R6,A
003590 A3                INC     DPTR
003591 E0                MOVX    A,@DPTR
003592 FF                MOV     R7,A
003593 E4                CLR     A
003594 FC                MOV     R4,A
003595 FD                MOV     R5,A
003596 EB                MOV     A,R3
003597 2F                ADD     A,R7
003598 FF                MOV     R7,A
003599 EA                MOV     A,R2
00359A 3E                ADDC    A,R6
00359B FE                MOV     R6,A
00359C ED                MOV     A,R5
00359D 39                ADDC    A,R1
00359E FD                MOV     R5,A
00359F EC                MOV     A,R4
0035A0 38                ADDC    A,R0
0035A1 FC                MOV     R4,A
0035A2 904E0E            MOV     DPTR,#ad_temp
0035A5 120332            LCALL   ?C?LSTXDATA
  332: 		ad_temp	+= R_AD_F7;
0035A8 904E0E            MOV     DPTR,#ad_temp
0035AB E0                MOVX    A,@DPTR
0035AC F8                MOV     R0,A
0035AD A3                INC     DPTR
0035AE E0                MOVX    A,@DPTR
0035AF F9                MOV     R1,A
0035B0 A3                INC     DPTR
0035B1 E0                MOVX    A,@DPTR
0035B2 FA                MOV     R2,A
0035B3 A3                INC     DPTR
0035B4 E0                MOVX    A,@DPTR
0035B5 FB                MOV     R3,A
0035B6 904C91            MOV     DPTR,#R_AD_F7
0035B9 E0                MOVX    A,@DPTR
0035BA FE                MOV     R6,A
0035BB A3                INC     DPTR
0035BC E0                MOVX    A,@DPTR
0035BD FF                MOV     R7,A
0035BE E4                CLR     A
0035BF FC                MOV     R4,A
0035C0 FD                MOV     R5,A
0035C1 EB                MOV     A,R3
0035C2 2F                ADD     A,R7
0035C3 FF                MOV     R7,A
0035C4 EA                MOV     A,R2
0035C5 3E                ADDC    A,R6
0035C6 FE                MOV     R6,A
0035C7 ED                MOV     A,R5
0035C8 39                ADDC    A,R1
0035C9 FD                MOV     R5,A
0035CA EC                MOV     A,R4
0035CB 38                ADDC    A,R0
0035CC FC                MOV     R4,A
0035CD 904E0E            MOV     DPTR,#ad_temp
0035D0 120332            LCALL   ?C?LSTXDATA
  333: 		ad_temp	+= R_AD_F8;
0035D3 904E0E            MOV     DPTR,#ad_temp
0035D6 E0                MOVX    A,@DPTR
0035D7 F8                MOV     R0,A
0035D8 A3                INC     DPTR
0035D9 E0                MOVX    A,@DPTR
0035DA F9                MOV     R1,A
0035DB A3                INC     DPTR
0035DC E0                MOVX    A,@DPTR
0035DD FA                MOV     R2,A
0035DE A3                INC     DPTR
0035DF E0                MOVX    A,@DPTR
0035E0 FB                MOV     R3,A
0035E1 904C93            MOV     DPTR,#R_AD_F8
0035E4 E0                MOVX    A,@DPTR
0035E5 FE                MOV     R6,A
0035E6 A3                INC     DPTR
0035E7 E0                MOVX    A,@DPTR
0035E8 FF                MOV     R7,A
0035E9 E4                CLR     A
0035EA FC                MOV     R4,A
0035EB FD                MOV     R5,A
0035EC EB                MOV     A,R3
0035ED 2F                ADD     A,R7
0035EE FF                MOV     R7,A
0035EF EA                MOV     A,R2
0035F0 3E                ADDC    A,R6
0035F1 FE                MOV     R6,A
0035F2 ED                MOV     A,R5
0035F3 39                ADDC    A,R1
0035F4 FD                MOV     R5,A
0035F5 EC                MOV     A,R4
0035F6 38                ADDC    A,R0
0035F7 FC                MOV     R4,A
0035F8 904E0E            MOV     DPTR,#ad_temp
0035FB 120332            LCALL   ?C?LSTXDATA
  334: 
  335: 		R_AD_BUF = ad_temp / 8 ;
0035FE E4                CLR     A
0035FF 7B08              MOV     R3,#08H
003601 FA                MOV     R2,A
003602 F9                MOV     R1,A
003603 F8                MOV     R0,A
003604 904E0E            MOV     DPTR,#ad_temp
003607 E0                MOVX    A,@DPTR
003608 FC                MOV     R4,A
003609 A3                INC     DPTR
00360A E0                MOVX    A,@DPTR
00360B FD                MOV     R5,A
00360C A3                INC     DPTR
00360D E0                MOVX    A,@DPTR
00360E FE                MOV     R6,A
00360F A3                INC     DPTR
003610 E0                MOVX    A,@DPTR
003611 FF                MOV     R7,A
003612 120269            LCALL   ?C?ULDIV
003615 904E0C            MOV     DPTR,#R_AD_BUF
003618 EE                MOV     A,R6
003619 F0                MOVX    @DPTR,A
00361A A3                INC     DPTR
00361B EF                MOV     A,R7
00361C F0                MOVX    @DPTR,A
  336: 		R_AD_BUF_OLD	=	R_AD_BUF;
00361D 904C83            MOV     DPTR,#R_AD_BUF_OLD
003620 EE                MOV     A,R6
003621 F0                MOVX    @DPTR,A
003622 A3                INC     DPTR
003623 EF                MOV     A,R7
003624 F0                MOVX    @DPTR,A
  337: 		}
003625         ?C0024?CS_SCALE_PROC:
  338: 	return	R_AD_BUF;
003625 904E0C            MOV     DPTR,#R_AD_BUF
003628 E0                MOVX    A,@DPTR
003629 FE                MOV     R6,A
00362A A3                INC     DPTR
00362B E0                MOVX    A,@DPTR
00362C FF                MOV     R7,A
  339: }
00362D 22                RET     
----- FUNCTION _CS_Scale_AdcFilter (END) -------


----- FUNCTION _CS_Scale_GetWeight (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  344: void CS_Scale_GetWeight(u16_t R_AD_BUF)
  345: {
00362E 904D9F            MOV     DPTR,#R_AD_BUF
003631 EE                MOV     A,R6
003632 F0                MOVX    @DPTR,A
003633 A3                INC     DPTR
003634 EF                MOV     A,R7
003635 F0                MOVX    @DPTR,A
  346: 	u32_t	ad_temp;
  347: 	u16_t	ad_cal;
  348: 	u16_t	CaliDot1,CaliDot2,CaliDot3;
  349: 	
  350: 	CaliDot1 =CS_Scale_CaliProc(CaliProcGetCaliDot1);
003636 7F02              MOV     R7,#02H
003638 120A38            LCALL   _CS_Scale_CaliProc
00363B 904DA7            MOV     DPTR,#CaliDot1
00363E EE                MOV     A,R6
00363F F0                MOVX    @DPTR,A
003640 A3                INC     DPTR
003641 EF                MOV     A,R7
003642 F0                MOVX    @DPTR,A
  351: 	CaliDot2 =CS_Scale_CaliProc(CaliProcGetCaliDot2);
003643 7F03              MOV     R7,#03H
003645 120A38            LCALL   _CS_Scale_CaliProc
003648 904DA9            MOV     DPTR,#CaliDot2
00364B EE                MOV     A,R6
00364C F0                MOVX    @DPTR,A
00364D A3                INC     DPTR
00364E EF                MOV     A,R7
00364F F0                MOVX    @DPTR,A
  352: 	CaliDot3 =CS_Scale_CaliProc(CaliProcGetCaliDot3);
003650 7F04              MOV     R7,#04H
003652 120A38            LCALL   _CS_Scale_CaliProc
003655 904DAB            MOV     DPTR,#CaliDot3
003658 EE                MOV     A,R6
003659 F0                MOVX    @DPTR,A
00365A A3                INC     DPTR
00365B EF                MOV     A,R7
00365C F0                MOVX    @DPTR,A
  353: 	
  354: 	if(R_AD_BUF <= CaliDot1 )
00365D 904DA7            MOV     DPTR,#CaliDot1
003660 E0                MOVX    A,@DPTR
003661 FE                MOV     R6,A
003662 A3                INC     DPTR
003663 E0                MOVX    A,@DPTR
003664 FF                MOV     R7,A
003665 904D9F            MOV     DPTR,#R_AD_BUF
003668 E0                MOVX    A,@DPTR
003669 FC                MOV     R4,A
00366A A3                INC     DPTR
00366B E0                MOVX    A,@DPTR
00366C FD                MOV     R5,A
00366D D3                SETB    C
00366E 9F                SUBB    A,R7
00366F EC                MOV     A,R4
003670 9E                SUBB    A,R6
003671 5033              JNC     ?C0035?CS_SCALE_PROC
  355: 		{
  356: 		ad_temp = (u32_t)R_AD_BUF  * 5000;	
003673 7E13              MOV     R6,#013H
003675 7F88              MOV     R7,#088H
003677 1203C8            LCALL   ?C?LIMUL
00367A A3                INC     DPTR
00367B 120332            LCALL   ?C?LSTXDATA
  357: 		R_UnitWeight.origin = ad_temp / CaliDot1;
00367E 904DA7            MOV     DPTR,#CaliDot1
003681 E0                MOVX    A,@DPTR
003682 FE                MOV     R6,A
003683 A3                INC     DPTR
003684 E0                MOVX    A,@DPTR
003685 FF                MOV     R7,A
003686 FB                MOV     R3,A
003687 AA06              MOV     R2,AR6
003689 E4                CLR     A
00368A F9                MOV     R1,A
00368B F8                MOV     R0,A
00368C 904DA1            MOV     DPTR,#ad_temp
00368F E0                MOVX    A,@DPTR
003690 FC                MOV     R4,A
003691 A3                INC     DPTR
003692 E0                MOVX    A,@DPTR
003693 FD                MOV     R5,A
003694 A3                INC     DPTR
003695 E0                MOVX    A,@DPTR
003696 FE                MOV     R6,A
003697 A3                INC     DPTR
003698 E0                MOVX    A,@DPTR
003699 FF                MOV     R7,A
00369A 120269            LCALL   ?C?ULDIV
00369D 904CC8            MOV     DPTR,#R_UnitWeight
0036A0 EE                MOV     A,R6
0036A1 F0                MOVX    @DPTR,A
0036A2 A3                INC     DPTR
0036A3 EF                MOV     A,R7
0036A4 F0                MOVX    @DPTR,A
0036A5 22                RET     
  358: 		return;
  359: 		}
0036A6         ?C0035?CS_SCALE_PROC:
  360: 	ad_cal = R_AD_BUF - CaliDot1;
0036A6 904DA7            MOV     DPTR,#CaliDot1
0036A9 E0                MOVX    A,@DPTR
0036AA FE                MOV     R6,A
0036AB A3                INC     DPTR
0036AC E0                MOVX    A,@DPTR
0036AD FF                MOV     R7,A
0036AE C3                CLR     C
0036AF 904DA0            MOV     DPTR,#R_AD_BUF+01H
0036B2 E0                MOVX    A,@DPTR
0036B3 9F                SUBB    A,R7
0036B4 FF                MOV     R7,A
0036B5 904D9F            MOV     DPTR,#R_AD_BUF
0036B8 E0                MOVX    A,@DPTR
0036B9 9E                SUBB    A,R6
0036BA FE                MOV     R6,A
0036BB 904DA5            MOV     DPTR,#ad_cal
0036BE F0                MOVX    @DPTR,A
0036BF A3                INC     DPTR
0036C0 EF                MOV     A,R7
0036C1 F0                MOVX    @DPTR,A
  361: 
  362: 	if(ad_cal <=CaliDot2)
0036C2 C3                CLR     C
0036C3 904DAA            MOV     DPTR,#CaliDot2+01H
0036C6 E0                MOVX    A,@DPTR
0036C7 9F                SUBB    A,R7
0036C8 904DA9            MOV     DPTR,#CaliDot2
0036CB E0                MOVX    A,@DPTR
0036CC 9E                SUBB    A,R6
0036CD 4043              JC      ?C0037?CS_SCALE_PROC
  363: 		{
  364: 		ad_temp = (u32_t)ad_cal  * 5000;	
0036CF 904DA5            MOV     DPTR,#ad_cal
0036D2 E0                MOVX    A,@DPTR
0036D3 FE                MOV     R6,A
0036D4 A3                INC     DPTR
0036D5 E0                MOVX    A,@DPTR
0036D6 FF                MOV     R7,A
0036D7 7C13              MOV     R4,#013H
0036D9 7D88              MOV     R5,#088H
0036DB 1203C8            LCALL   ?C?LIMUL
0036DE 904DA1            MOV     DPTR,#ad_temp
0036E1 120332            LCALL   ?C?LSTXDATA
  365: 		R_UnitWeight.origin = ad_temp / CaliDot2 +5000 ;
0036E4 904DA9            MOV     DPTR,#CaliDot2
0036E7 E0                MOVX    A,@DPTR
0036E8 FE                MOV     R6,A
0036E9 A3                INC     DPTR
0036EA E0                MOVX    A,@DPTR
0036EB FF                MOV     R7,A
0036EC FB                MOV     R3,A
0036ED AA06              MOV     R2,AR6
0036EF E4                CLR     A
0036F0 F9                MOV     R1,A
0036F1 F8                MOV     R0,A
0036F2 904DA1            MOV     DPTR,#ad_temp
0036F5 E0                MOVX    A,@DPTR
0036F6 FC                MOV     R4,A
0036F7 A3                INC     DPTR
0036F8 E0                MOVX    A,@DPTR
0036F9 FD                MOV     R5,A
0036FA A3                INC     DPTR
0036FB E0                MOVX    A,@DPTR
0036FC FE                MOV     R6,A
0036FD A3                INC     DPTR
0036FE E0                MOVX    A,@DPTR
0036FF FF                MOV     R7,A
003700 120269            LCALL   ?C?ULDIV
003703 EF                MOV     A,R7
003704 2488              ADD     A,#088H
003706 FF                MOV     R7,A
003707 EE                MOV     A,R6
003708 3413              ADDC    A,#013H
00370A 904CC8            MOV     DPTR,#R_UnitWeight
00370D F0                MOVX    @DPTR,A
00370E A3                INC     DPTR
00370F EF                MOV     A,R7
003710 F0                MOVX    @DPTR,A
003711 22                RET     
  366: 		return;
  367: 		}
003712         ?C0037?CS_SCALE_PROC:
  368: 	
  369: 	ad_cal  = R_AD_BUF - CaliDot1 - CaliDot2 ;	
003712 904DA7            MOV     DPTR,#CaliDot1
003715 E0                MOVX    A,@DPTR
003716 FE                MOV     R6,A
003717 A3                INC     DPTR
003718 E0                MOVX    A,@DPTR
003719 FF                MOV     R7,A
00371A C3                CLR     C
00371B 904DA0            MOV     DPTR,#R_AD_BUF+01H
00371E E0                MOVX    A,@DPTR
00371F 9F                SUBB    A,R7
003720 FF                MOV     R7,A
003721 904D9F            MOV     DPTR,#R_AD_BUF
003724 E0                MOVX    A,@DPTR
003725 9E                SUBB    A,R6
003726 FE                MOV     R6,A
003727 904DA9            MOV     DPTR,#CaliDot2
00372A E0                MOVX    A,@DPTR
00372B FC                MOV     R4,A
00372C A3                INC     DPTR
00372D E0                MOVX    A,@DPTR
00372E FD                MOV     R5,A
00372F C3                CLR     C
003730 EF                MOV     A,R7
003731 9D                SUBB    A,R5
003732 FF                MOV     R7,A
003733 EE                MOV     A,R6
003734 9C                SUBB    A,R4
003735 904DA5            MOV     DPTR,#ad_cal
003738 F0                MOVX    @DPTR,A
003739 A3                INC     DPTR
00373A EF                MOV     A,R7
00373B F0                MOVX    @DPTR,A
  370: 	ad_temp = (u32_t)ad_cal  * 5000;	
00373C 904DA5            MOV     DPTR,#ad_cal
00373F E0                MOVX    A,@DPTR
003740 FE                MOV     R6,A
003741 A3                INC     DPTR
003742 E0                MOVX    A,@DPTR
003743 FF                MOV     R7,A
003744 7C13              MOV     R4,#013H
003746 7D88              MOV     R5,#088H
003748 1203C8            LCALL   ?C?LIMUL
00374B 904DA1            MOV     DPTR,#ad_temp
00374E 120332            LCALL   ?C?LSTXDATA
  371: 	R_UnitWeight.origin = ad_temp /CaliDot3 +10000 ;
003751 904DAB            MOV     DPTR,#CaliDot3
003754 E0                MOVX    A,@DPTR
003755 FE                MOV     R6,A
003756 A3                INC     DPTR
003757 E0                MOVX    A,@DPTR
003758 FF                MOV     R7,A
003759 FB                MOV     R3,A
00375A AA06              MOV     R2,AR6
00375C E4                CLR     A
00375D F9                MOV     R1,A
00375E F8                MOV     R0,A
00375F 904DA1            MOV     DPTR,#ad_temp
003762 E0                MOVX    A,@DPTR
003763 FC                MOV     R4,A
003764 A3                INC     DPTR
003765 E0                MOVX    A,@DPTR
003766 FD                MOV     R5,A
003767 A3                INC     DPTR
003768 E0                MOVX    A,@DPTR
003769 FE                MOV     R6,A
00376A A3                INC     DPTR
00376B E0                MOVX    A,@DPTR
00376C FF                MOV     R7,A
00376D 120269            LCALL   ?C?ULDIV
003770 EF                MOV     A,R7
003771 2410              ADD     A,#010H
003773 FF                MOV     R7,A
003774 EE                MOV     A,R6
003775 3427              ADDC    A,#027H
003777 904CC8            MOV     DPTR,#R_UnitWeight
00377A F0                MOVX    @DPTR,A
00377B A3                INC     DPTR
00377C EF                MOV     A,R7
00377D F0                MOVX    @DPTR,A
  372: 
  373: 	
  374: }
00377E 22                RET     
----- FUNCTION _CS_Scale_GetWeight (END) -------


----- FUNCTION _CS_Scale_JudgeOverLoad (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  672: u8_t CS_Scale_JudgeOverLoad(u8_t option)
  673: {
;---- Variable 'option' assigned to Register 'R7' ----
  674: 
  675: 	static	u8_t	  xdata R_Weight_OverLoadTimes;
  676: 	static	u8_t  xdata  B_Weight_OverLoad;			//超载标志
  677: 	if(option==ResetOverLoad)
00377F EF                MOV     A,R7
003780 B40209            CJNE    A,#02H,?C0087?CS_SCALE_PROC
  678: 		{
  679: 		R_Weight_OverLoadTimes = 0;
003783 E4                CLR     A
003784 904CA0            MOV     DPTR,#R_Weight_OverLoadTimes
003787 F0                MOVX    @DPTR,A
  680: 		B_Weight_OverLoad = false;
003788 A3                INC     DPTR
003789 F0                MOVX    @DPTR,A
  681: 		return 0;
00378A FF                MOV     R7,A
00378B 22                RET     
  682: 		}
00378C         ?C0087?CS_SCALE_PROC:
  683: 	
  684: 	if(R_UnitWeight.origin > CS_Scale_MaxWeight)
00378C D3                SETB    C
00378D 904CC9            MOV     DPTR,#R_UnitWeight+01H
003790 E0                MOVX    A,@DPTR
003791 94C4              SUBB    A,#0C4H
003793 904CC8            MOV     DPTR,#R_UnitWeight
003796 E0                MOVX    A,@DPTR
003797 943B              SUBB    A,#03BH
003799 4006              JC      ?C0089?CS_SCALE_PROC
  685: 		R_Weight_OverLoadTimes++;
00379B 904CA0            MOV     DPTR,#R_Weight_OverLoadTimes
00379E E0                MOVX    A,@DPTR
00379F 04                INC     A
0037A0 F0                MOVX    @DPTR,A
0037A1         ?C0089?CS_SCALE_PROC:
  686: 	if(R_Weight_OverLoadTimes >=2)
0037A1 904CA0            MOV     DPTR,#R_Weight_OverLoadTimes
0037A4 E0                MOVX    A,@DPTR
0037A5 C3                CLR     C
0037A6 9402              SUBB    A,#02H
0037A8 400E              JC      ?C0090?CS_SCALE_PROC
  687: 		{
  688: 		R_Weight_OverLoadTimes = 2;
0037AA 7402              MOV     A,#02H
0037AC F0                MOVX    @DPTR,A
  689: 		B_Weight_OverLoad = true;
0037AD A3                INC     DPTR
0037AE 14                DEC     A
0037AF F0                MOVX    @DPTR,A
  690: 		R_Display_Err=CS_ScaleDisplay_L_err;
0037B0 904CC1            MOV     DPTR,#R_Display_Err
0037B3 7404              MOV     A,#04H
0037B5 F0                MOVX    @DPTR,A
  691: 		}
0037B6 8005              SJMP    ?C0091?CS_SCALE_PROC
0037B8         ?C0090?CS_SCALE_PROC:
  692: 	else
  693: 		B_Weight_OverLoad = false;
0037B8 E4                CLR     A
0037B9 904CA1            MOV     DPTR,#B_Weight_OverLoad
0037BC F0                MOVX    @DPTR,A
0037BD         ?C0091?CS_SCALE_PROC:
  694: 
  695: 	if(option==GetIfOverLoad)
0037BD EF                MOV     A,R7
0037BE B40106            CJNE    A,#01H,?C0092?CS_SCALE_PROC
  696: 		return B_Weight_OverLoad;
0037C1 904CA1            MOV     DPTR,#B_Weight_OverLoad
0037C4 E0                MOVX    A,@DPTR
0037C5 FF                MOV     R7,A
0037C6 22                RET     
0037C7         ?C0092?CS_SCALE_PROC:
  697: 	
  698: 		return 0;
0037C7 7F00              MOV     R7,#00H
  699: }
0037C9 22                RET     
----- FUNCTION _CS_Scale_JudgeOverLoad (END) -------


----- FUNCTION CS_Scale_ReturnLock (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  893: void CS_Scale_ReturnLock(void)
  894: {
  895: 	u16_t	weight_temp;
  896: 	
  897: 	if( R_UnitWeight.origin > R_Weight_Lock)
0037CA 904CBF            MOV     DPTR,#R_Weight_Lock
0037CD E0                MOVX    A,@DPTR
0037CE FE                MOV     R6,A
0037CF A3                INC     DPTR
0037D0 E0                MOVX    A,@DPTR
0037D1 FF                MOV     R7,A
0037D2 904CC8            MOV     DPTR,#R_UnitWeight
0037D5 E0                MOVX    A,@DPTR
0037D6 FC                MOV     R4,A
0037D7 A3                INC     DPTR
0037D8 E0                MOVX    A,@DPTR
0037D9 FD                MOV     R5,A
0037DA D3                SETB    C
0037DB 9F                SUBB    A,R7
0037DC EC                MOV     A,R4
0037DD 9E                SUBB    A,R6
0037DE 4020              JC      ?C0119?CS_SCALE_PROC
  898: 		{
  899: 		weight_temp = R_UnitWeight.origin -R_Weight_Lock;
0037E0 ED                MOV     A,R5
0037E1 9F                SUBB    A,R7
0037E2 FF                MOV     R7,A
0037E3 EC                MOV     A,R4
0037E4 9E                SUBB    A,R6
0037E5 FE                MOV     R6,A
0037E6 904E54            MOV     DPTR,#weight_temp
0037E9 F0                MOVX    @DPTR,A
0037EA A3                INC     DPTR
0037EB EF                MOV     A,R7
0037EC F0                MOVX    @DPTR,A
  900: 		if(weight_temp >= CS_Scale_RetLockWeightInc)
0037ED C3                CLR     C
0037EE 94E8              SUBB    A,#0E8H
0037F0 EE                MOV     A,R6
0037F1 9403              SUBB    A,#03H
0037F3 403E              JC      ?C0123?CS_SCALE_PROC
  901: 			{
  902: 			R_Scale_state = CS_Scale_state_weighting;
0037F5 904CC4            MOV     DPTR,#R_Scale_state
0037F8 7401              MOV     A,#01H
0037FA F0                MOVX    @DPTR,A
  903: 			CS_Scale_TimeOutProc(CS_Reset_AllTime);
0037FB 7F06              MOV     R7,#06H
0037FD 021685            LJMP    _CS_Scale_TimeOutProc
  904: 			}
  905: 		}
003800         ?C0119?CS_SCALE_PROC:
  906: 	else
  907: 		{
  908: 		weight_temp = R_Weight_Lock -R_UnitWeight.origin;
003800 904CC8            MOV     DPTR,#R_UnitWeight
003803 E0                MOVX    A,@DPTR
003804 FE                MOV     R6,A
003805 A3                INC     DPTR
003806 E0                MOVX    A,@DPTR
003807 FF                MOV     R7,A
003808 C3                CLR     C
003809 904CC0            MOV     DPTR,#R_Weight_Lock+01H
00380C E0                MOVX    A,@DPTR
00380D 9F                SUBB    A,R7
00380E FF                MOV     R7,A
00380F 904CBF            MOV     DPTR,#R_Weight_Lock
003812 E0                MOVX    A,@DPTR
003813 9E                SUBB    A,R6
003814 FE                MOV     R6,A
003815 904E54            MOV     DPTR,#weight_temp
003818 F0                MOVX    @DPTR,A
003819 A3                INC     DPTR
00381A EF                MOV     A,R7
00381B F0                MOVX    @DPTR,A
  909: 		if(weight_temp >= CS_Scale_RetLockWeightDec)
00381C C3                CLR     C
00381D 942C              SUBB    A,#02CH
00381F EE                MOV     A,R6
003820 9401              SUBB    A,#01H
003822 400F              JC      ?C0123?CS_SCALE_PROC
  910: 			{
  911: 			
  912: 			R_Scale_state = CS_Scale_state_weighting;
003824 904CC4            MOV     DPTR,#R_Scale_state
003827 7401              MOV     A,#01H
003829 F0                MOVX    @DPTR,A
  913: 			CS_Scale_LockProc(SetDowningLock);
00382A FF                MOV     R7,A
00382B 1218D3            LCALL   _CS_Scale_LockProc
  914: 			CS_Scale_TimeOutProc(CS_Reset_AllTime);
00382E 7F06              MOV     R7,#06H
003830 121685            LCALL   _CS_Scale_TimeOutProc
  915: 			
  916: 			}
  917: 		}
  918: 
  919: }
003833         ?C0123?CS_SCALE_PROC:
003833 22                RET     
----- FUNCTION CS_Scale_ReturnLock (END) -------


----- FUNCTION _CS_MemoryWeightClear_Timer (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  925: void CS_MemoryWeightClear_Timer(u8_t option)
  926: {
;---- Variable 'option' assigned to Register 'R7' ----
  927: 	static u8_t xdata timecount; 				//计时变量
  928: 	static u8_t xdata B_Timeout;
  929: 
  930: 	if(option==StartClearMemWeightTimer)
003834 EF                MOV     A,R7
003835 B40107            CJNE    A,#01H,?C0124?CS_SCALE_PROC
  931: 		{
  932: 		timecount=0;
003838 E4                CLR     A
003839 904CA8            MOV     DPTR,#timecount
00383C F0                MOVX    @DPTR,A
  933: 		B_Timeout = false;
00383D A3                INC     DPTR
00383E F0                MOVX    @DPTR,A
  934: 		}
00383F         ?C0124?CS_SCALE_PROC:
  935: 
  936: 	if(option==MemWeightTimerInc)
00383F EF                MOV     A,R7
003840 B4020C            CJNE    A,#02H,?C0125?CS_SCALE_PROC
  937: 		{
  938: 		if(timecount<255 ) 
003843 904CA8            MOV     DPTR,#timecount
003846 E0                MOVX    A,@DPTR
003847 C3                CLR     C
003848 94FF              SUBB    A,#0FFH
00384A 5003              JNC     ?C0125?CS_SCALE_PROC
  939: 		timecount++;
00384C E0                MOVX    A,@DPTR
00384D 04                INC     A
00384E F0                MOVX    @DPTR,A
  940: 		}
00384F         ?C0125?CS_SCALE_PROC:
  941: 	
  942: 	if(B_Timeout == false)
00384F 904CA9            MOV     DPTR,#B_Timeout
003852 E0                MOVX    A,@DPTR
003853 7014              JNZ     ?C0129?CS_SCALE_PROC
  943: 		{
  944: 		if(timecount>SoftTimerTimeOut)
003855 904CA8            MOV     DPTR,#timecount
003858 E0                MOVX    A,@DPTR
003859 D3                SETB    C
00385A 9496              SUBB    A,#096H
00385C 400B              JC      ?C0129?CS_SCALE_PROC
  945: 			{
  946: 			B_Timeout = true;
00385E A3                INC     DPTR
00385F 7401              MOV     A,#01H
003861 F0                MOVX    @DPTR,A
  947: 			R_Weight_Mem = 0;	//时间到清记忆重量
003862 E4                CLR     A
003863 904CC2            MOV     DPTR,#R_Weight_Mem
003866 F0                MOVX    @DPTR,A
003867 A3                INC     DPTR
003868 F0                MOVX    @DPTR,A
  948: 			}
  949: 		}
  950: }
003869         ?C0129?CS_SCALE_PROC:
003869 22                RET     
----- FUNCTION _CS_MemoryWeightClear_Timer (END) -------


----- FUNCTION CS_1186Com_ReadAdc_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  145: void CS_1186Com_ReadAdc_Proc(void)
  146: {
  147: 	u32_t	data_rec;
  148: 	
  149: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAd)
00386A 904D54            MOV     DPTR,#R_Weight_Com_Coo
00386D E0                MOVX    A,@DPTR
00386E B4801F            CJNE    A,#080H,?C0020?CS_COMMTO1186
  150: 		{
  151: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadAd,0);
003871 7B00              MOV     R3,#00H
003873 7A00              MOV     R2,#00H
003875 7900              MOV     R1,#00H
003877 7F80              MOV     R7,#080H
003879 122AD1            LCALL   _CS_CommTo1186_SendCmd
  152: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadAd;
00387C 904D55            MOV     DPTR,#R_Weight_Com_Coo+01H
00387F 7480              MOV     A,#080H
003881 F0                MOVX    @DPTR,A
  153: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadAdStandby;
003882 904D54            MOV     DPTR,#R_Weight_Com_Coo
003885 7401              MOV     A,#01H
003887 F0                MOVX    @DPTR,A
  154: 		uartTimeoutCnt=0;
003888 E4                CLR     A
003889 904D67            MOV     DPTR,#uartTimeoutCnt
00388C F0                MOVX    @DPTR,A
  155: 		YC_UARTClearBuffer();
00388D 120592            LCALL   YC_UARTClearBuffer
  156: 		}
003890         ?C0020?CS_COMMTO1186:
  157: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAdStandby)
003890 904D54            MOV     DPTR,#R_Weight_Com_Coo
003893 E0                MOVX    A,@DPTR
003894 6401              XRL     A,#01H
003896 6002              JZ      $ + 4H
003898 213E              AJMP    ?C0028?CS_COMMTO1186
  158: 		{						
  159: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 9)==9)
00389A 7B01              MOV     R3,#01H
00389C 7A4D              MOV     R2,#HIGH uartRcvBuf
00389E 7944              MOV     R1,#LOW uartRcvBuf
0038A0 7D09              MOV     R5,#09H
0038A2 FC                MOV     R4,A
0038A3 1207A8            LCALL   _YC_UARTReciveDataExpected
0038A6 EF                MOV     A,R7
0038A7 6409              XRL     A,#09H
0038A9 4E                ORL     A,R6
0038AA 6002              JZ      $ + 4H
0038AC 213E              AJMP    ?C0028?CS_COMMTO1186
  160: 			{						
  161: 			if(uartRcvBuf[3] == CS_CommTo1186_ReadAd)   
0038AE 904D47            MOV     DPTR,#uartRcvBuf+03H
0038B1 E0                MOVX    A,@DPTR
0038B2 6480              XRL     A,#080H
0038B4 6002              JZ      $ + 4H
0038B6 2138              AJMP    ?C0023?CS_COMMTO1186
  162: 				{
  163: 				
  164: 				
  165: 				R_1186sys_state = uartRcvBuf[7];
0038B8 904D4B            MOV     DPTR,#uartRcvBuf+07H
0038BB E0                MOVX    A,@DPTR
0038BC 904CD9            MOV     DPTR,#R_1186sys_state
0038BF F0                MOVX    @DPTR,A
  166: 
  167: 				if(R_1186sys_state&0x08)			//AD数据更新标志
0038C0 30E35C            JNB     ACC.3,?C0024?CS_COMMTO1186
  168: 					{
  169: 					B_Weight_AdOk = true;
0038C3 904CD6            MOV     DPTR,#B_Weight_AdOk
0038C6 7401              MOV     A,#01H
0038C8 F0                MOVX    @DPTR,A
  170: 					data_rec = uartRcvBuf[4];
0038C9 904D48            MOV     DPTR,#uartRcvBuf+04H
0038CC E0                MOVX    A,@DPTR
0038CD FF                MOV     R7,A
0038CE E4                CLR     A
0038CF FC                MOV     R4,A
0038D0 FD                MOV     R5,A
0038D1 FE                MOV     R6,A
;---- Variable 'data_rec' assigned to Register 'R4/R5/R6/R7' ----
  171: 					data_rec = (data_rec<<8) + uartRcvBuf[5];
0038D2 7808              MOV     R0,#08H
0038D4 12031F            LCALL   ?C?LSHL
0038D7 A804              MOV     R0,AR4
0038D9 A905              MOV     R1,AR5
0038DB AA06              MOV     R2,AR6
0038DD AB07              MOV     R3,AR7
0038DF A3                INC     DPTR
0038E0 E0                MOVX    A,@DPTR
0038E1 FF                MOV     R7,A
0038E2 E4                CLR     A
0038E3 FC                MOV     R4,A
0038E4 FD                MOV     R5,A
0038E5 FE                MOV     R6,A
0038E6 EB                MOV     A,R3
0038E7 2F                ADD     A,R7
0038E8 FF                MOV     R7,A
0038E9 EE                MOV     A,R6
0038EA 3A                ADDC    A,R2
0038EB FE                MOV     R6,A
0038EC ED                MOV     A,R5
0038ED 39                ADDC    A,R1
0038EE FD                MOV     R5,A
0038EF EC                MOV     A,R4
0038F0 38                ADDC    A,R0
0038F1 FC                MOV     R4,A
  172: 					data_rec = (data_rec<<8) + uartRcvBuf[6];
0038F2 7808              MOV     R0,#08H
0038F4 12031F            LCALL   ?C?LSHL
0038F7 A804              MOV     R0,AR4
0038F9 A905              MOV     R1,AR5
0038FB AA06              MOV     R2,AR6
0038FD AB07              MOV     R3,AR7
0038FF A3                INC     DPTR
003900 E0                MOVX    A,@DPTR
003901 FF                MOV     R7,A
003902 E4                CLR     A
003903 FC                MOV     R4,A
003904 FD                MOV     R5,A
003905 FE                MOV     R6,A
003906 EB                MOV     A,R3
003907 2F                ADD     A,R7
003908 FF                MOV     R7,A
003909 EE                MOV     A,R6
00390A 3A                ADDC    A,R2
00390B FE                MOV     R6,A
00390C ED                MOV     A,R5
00390D 39                ADDC    A,R1
00390E FD                MOV     R5,A
00390F EC                MOV     A,R4
003910 38                ADDC    A,R0
003911 FC                MOV     R4,A
  173: 					R_AD_Original =data_rec >> 6;	
003912 7806              MOV     R0,#06H
003914 12030C            LCALL   ?C?ULSHR
003917 904CD7            MOV     DPTR,#R_AD_Original
00391A EE                MOV     A,R6
00391B F0                MOVX    @DPTR,A
00391C A3                INC     DPTR
00391D EF                MOV     A,R7
00391E F0                MOVX    @DPTR,A
  174: 					}
00391F         ?C0024?CS_COMMTO1186:
  175: 				
  176: 				if(R_Scale_state==CS_Scale_state_init)
00391F 904CC4            MOV     DPTR,#R_Scale_state
003922 E0                MOVX    A,@DPTR
003923 7006              JNZ     ?C0025?CS_COMMTO1186
  177: 					R_Weight_Com_Coo.now = CS_CommTo1186_Null;
003925 904D54            MOV     DPTR,#R_Weight_Com_Coo
003928 F0                MOVX    @DPTR,A
003929 8006              SJMP    ?C0026?CS_COMMTO1186
00392B         ?C0025?CS_COMMTO1186:
  178: 				else
  179: 					R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplay;
00392B 904D54            MOV     DPTR,#R_Weight_Com_Coo
00392E 74E0              MOV     A,#0E0H
003930 F0                MOVX    @DPTR,A
003931         ?C0026?CS_COMMTO1186:
  180: 				R_Weight_Com_Coo.sucess=true;
003931 904D56            MOV     DPTR,#R_Weight_Com_Coo+02H
003934 7401              MOV     A,#01H
003936 F0                MOVX    @DPTR,A
  181: 				
  182: 				}
003937 22                RET     
003938         ?C0023?CS_COMMTO1186:
  183: 			else
  184: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
003938 904D67            MOV     DPTR,#uartTimeoutCnt
00393B 7415              MOV     A,#015H
00393D F0                MOVX    @DPTR,A
  185: 			}
  186: 		}
  187: }
00393E         ?C0028?CS_COMMTO1186:
00393E 22                RET     
----- FUNCTION CS_1186Com_ReadAdc_Proc (END) -------


----- FUNCTION CS_1186Com_ReadAdZero_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  359: void CS_1186Com_ReadAdZero_Proc(void)
  360: {
  361: 	u32_t	data_rec;
  362: 	u16_t	R_AD_Zero;
  363: 	
  364: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAdZero)
00393F 904D54            MOV     DPTR,#R_Weight_Com_Coo
003942 E0                MOVX    A,@DPTR
003943 B4851F            CJNE    A,#085H,?C0055?CS_COMMTO1186
  365: 		{
  366: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadAdZero,0);
003946 7B00              MOV     R3,#00H
003948 7A00              MOV     R2,#00H
00394A 7900              MOV     R1,#00H
00394C 7F85              MOV     R7,#085H
00394E 122AD1            LCALL   _CS_CommTo1186_SendCmd
  367: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadAdZero;
003951 904D55            MOV     DPTR,#R_Weight_Com_Coo+01H
003954 7485              MOV     A,#085H
003956 F0                MOVX    @DPTR,A
  368: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadAdZeroStandby;
003957 904D54            MOV     DPTR,#R_Weight_Com_Coo
00395A 7406              MOV     A,#06H
00395C F0                MOVX    @DPTR,A
  369: 		uartTimeoutCnt=0;
00395D E4                CLR     A
00395E 904D67            MOV     DPTR,#uartTimeoutCnt
003961 F0                MOVX    @DPTR,A
  370: 		YC_UARTClearBuffer();
003962 120592            LCALL   YC_UARTClearBuffer
  371: 		}
003965         ?C0055?CS_COMMTO1186:
  372: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAdZeroStandby)
003965 904D54            MOV     DPTR,#R_Weight_Com_Coo
003968 E0                MOVX    A,@DPTR
003969 6406              XRL     A,#06H
00396B 6002              JZ      $ + 4H
00396D 21EF              AJMP    ?C0060?CS_COMMTO1186
  373: 		{						
  374: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 8)==8)
00396F 7B01              MOV     R3,#01H
003971 7A4D              MOV     R2,#HIGH uartRcvBuf
003973 7944              MOV     R1,#LOW uartRcvBuf
003975 7D08              MOV     R5,#08H
003977 FC                MOV     R4,A
003978 1207A8            LCALL   _YC_UARTReciveDataExpected
00397B EF                MOV     A,R7
00397C 6408              XRL     A,#08H
00397E 4E                ORL     A,R6
00397F 706E              JNZ     ?C0060?CS_COMMTO1186
  375: 			{						
  376: 			if(uartRcvBuf[3] == CS_CommTo1186_ReadAdZero)   
003981 904D47            MOV     DPTR,#uartRcvBuf+03H
003984 E0                MOVX    A,@DPTR
003985 6485              XRL     A,#085H
003987 7060              JNZ     ?C0058?CS_COMMTO1186
  377: 				{
  378: 				data_rec = uartRcvBuf[4];
003989 A3                INC     DPTR
00398A E0                MOVX    A,@DPTR
00398B FF                MOV     R7,A
00398C E4                CLR     A
00398D FC                MOV     R4,A
00398E FD                MOV     R5,A
00398F FE                MOV     R6,A
;---- Variable 'data_rec' assigned to Register 'R4/R5/R6/R7' ----
  379: 				data_rec = (data_rec<<8) + uartRcvBuf[5];
003990 7808              MOV     R0,#08H
003992 12031F            LCALL   ?C?LSHL
003995 A804              MOV     R0,AR4
003997 A905              MOV     R1,AR5
003999 AA06              MOV     R2,AR6
00399B AB07              MOV     R3,AR7
00399D A3                INC     DPTR
00399E E0                MOVX    A,@DPTR
00399F FF                MOV     R7,A
0039A0 E4                CLR     A
0039A1 FC                MOV     R4,A
0039A2 FD                MOV     R5,A
0039A3 FE                MOV     R6,A
0039A4 EB                MOV     A,R3
0039A5 2F                ADD     A,R7
0039A6 FF                MOV     R7,A
0039A7 EE                MOV     A,R6
0039A8 3A                ADDC    A,R2
0039A9 FE                MOV     R6,A
0039AA ED                MOV     A,R5
0039AB 39                ADDC    A,R1
0039AC FD                MOV     R5,A
0039AD EC                MOV     A,R4
0039AE 38                ADDC    A,R0
0039AF FC                MOV     R4,A
  380: 				data_rec = (data_rec<<8) + uartRcvBuf[6];
0039B0 7808              MOV     R0,#08H
0039B2 12031F            LCALL   ?C?LSHL
0039B5 A804              MOV     R0,AR4
0039B7 A905              MOV     R1,AR5
0039B9 AA06              MOV     R2,AR6
0039BB AB07              MOV     R3,AR7
0039BD A3                INC     DPTR
0039BE E0                MOVX    A,@DPTR
0039BF FF                MOV     R7,A
0039C0 E4                CLR     A
0039C1 FC                MOV     R4,A
0039C2 FD                MOV     R5,A
0039C3 FE                MOV     R6,A
0039C4 EB                MOV     A,R3
0039C5 2F                ADD     A,R7
0039C6 FF                MOV     R7,A
0039C7 EE                MOV     A,R6
0039C8 3A                ADDC    A,R2
0039C9 FE                MOV     R6,A
0039CA ED                MOV     A,R5
0039CB 39                ADDC    A,R1
0039CC FD                MOV     R5,A
0039CD EC                MOV     A,R4
0039CE 38                ADDC    A,R0
0039CF FC                MOV     R4,A
  381: 				R_AD_Zero =data_rec >> 6;	
0039D0 7806              MOV     R0,#06H
0039D2 12030C            LCALL   ?C?ULSHR
;---- Variable 'R_AD_Zero' assigned to Register 'R6/R7' ----
  382: 				CS_Scale_ZeroProc(SetRunningZero,R_AD_Zero);
0039D5 AD07              MOV     R5,AR7
0039D7 AC06              MOV     R4,AR6
0039D9 7F06              MOV     R7,#06H
0039DB 1212F0            LCALL   _CS_Scale_ZeroProc
  383: 				
  384: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
0039DE E4                CLR     A
0039DF 904D54            MOV     DPTR,#R_Weight_Com_Coo
0039E2 F0                MOVX    @DPTR,A
  385: 				R_Weight_Com_Coo.sucess=true;
0039E3 904D56            MOV     DPTR,#R_Weight_Com_Coo+02H
0039E6 04                INC     A
0039E7 F0                MOVX    @DPTR,A
  386: 				
  387: 				}
0039E8 22                RET     
0039E9         ?C0058?CS_COMMTO1186:
  388: 			else
  389: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
0039E9 904D67            MOV     DPTR,#uartTimeoutCnt
0039EC 7415              MOV     A,#015H
0039EE F0                MOVX    @DPTR,A
  390: 			}
  391: 		}
  392: }
0039EF         ?C0060?CS_COMMTO1186:
0039EF 22                RET     
----- FUNCTION CS_1186Com_ReadAdZero_Proc (END) -------


----- FUNCTION _CS_ScaleDisplay_FreshBuf (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
   73: void CS_ScaleDisplay_FreshBuf(u8_t option,u16_t showdata)
   74: {
;---- Variable 'showdata' assigned to Register 'R4/R5' ----
0039F0 904E58            MOV     DPTR,#option
0039F3 EF                MOV     A,R7
0039F4 F0                MOVX    @DPTR,A
   75: 	static	u8_t	data_buf[5];
   76: 
   77: 	//////////////////////////////////////////
   78: 	//数字部分赋值
   79: 	if(option==DisplayOverLoad)
0039F5 BF850F            CJNE    R7,#085H,?C0011?CS_SCALEDISPLAY
   80: 	{
   81: 	data_buf[0]=Lcdnull_Num;
0039F8 904D17            MOV     DPTR,#data_buf
0039FB 7415              MOV     A,#015H
0039FD F0                MOVX    @DPTR,A
   82: 	data_buf[1]=Lcdup_Num;
0039FE A3                INC     DPTR
0039FF 04                INC     A
003A00 F0                MOVX    @DPTR,A
   83: 	data_buf[2]=Lcdup_Num;
003A01 A3                INC     DPTR
003A02 F0                MOVX    @DPTR,A
   84: 	data_buf[3]=Lcdup_Num;
003A03 A3                INC     DPTR
003A04 F0                MOVX    @DPTR,A
   85: 	data_buf[4]=Lcdup_Num;
003A05 A3                INC     DPTR
003A06 F0                MOVX    @DPTR,A
   86: 	}
003A07         ?C0011?CS_SCALEDISPLAY:
   87: 
   88: 	if(option==DisplayLowBat)
003A07 904E58            MOV     DPTR,#option
003A0A E0                MOVX    A,@DPTR
003A0B FF                MOV     R7,A
003A0C B48614            CJNE    A,#086H,?C0012?CS_SCALEDISPLAY
   89: 	{
   90: 	data_buf[0]=0;
003A0F E4                CLR     A
003A10 904D17            MOV     DPTR,#data_buf
003A13 F0                MOVX    @DPTR,A
   91: 	data_buf[1]=Lcdnull_Num;
003A14 A3                INC     DPTR
003A15 7415              MOV     A,#015H
003A17 F0                MOVX    @DPTR,A
   92: 	data_buf[2]=LcdchL_Num;
003A18 A3                INC     DPTR
003A19 7410              MOV     A,#010H
003A1B F0                MOVX    @DPTR,A
   93: 	data_buf[3]=Lcdcho_Num;
003A1C A3                INC     DPTR
003A1D 04                INC     A
003A1E F0                MOVX    @DPTR,A
   94: 	data_buf[4]=Lcdnull_Num;
003A1F A3                INC     DPTR
003A20 7415              MOV     A,#015H
003A22 F0                MOVX    @DPTR,A
   95: 	}
003A23         ?C0012?CS_SCALEDISPLAY:
   96: 
   97: 	if(option==DisplayZeroErr)
003A23 EF                MOV     A,R7
003A24 B48712            CJNE    A,#087H,?C0013?CS_SCALEDISPLAY
   98: 	{
   99: 	data_buf[0]=Lcdnull_Num;
003A27 904D17            MOV     DPTR,#data_buf
003A2A 7415              MOV     A,#015H
003A2C F0                MOVX    @DPTR,A
  100: 	data_buf[1]=Lcdnull_Num;
003A2D A3                INC     DPTR
003A2E F0                MOVX    @DPTR,A
  101: 	data_buf[2]=LcdchC_Num;
003A2F A3                INC     DPTR
003A30 740C              MOV     A,#0CH
003A32 F0                MOVX    @DPTR,A
  102: 	data_buf[3]=Lcdnull_Num;
003A33 A3                INC     DPTR
003A34 7415              MOV     A,#015H
003A36 F0                MOVX    @DPTR,A
  103: 	data_buf[4]=Lcdnull_Num;
003A37 A3                INC     DPTR
003A38 F0                MOVX    @DPTR,A
  104: 	}
003A39         ?C0013?CS_SCALEDISPLAY:
  105: 	
  106: 	if(option==DisplayCal1||option==DisplayCal2||option==DisplayCal3||option==DisplayCal4)
003A39 EF                MOV     A,R7
003A3A 6481              XRL     A,#081H
003A3C 600F              JZ      ?C0015?CS_SCALEDISPLAY
003A3E EF                MOV     A,R7
003A3F 6482              XRL     A,#082H
003A41 600A              JZ      ?C0015?CS_SCALEDISPLAY
003A43 EF                MOV     A,R7
003A44 6483              XRL     A,#083H
003A46 6005              JZ      ?C0015?CS_SCALEDISPLAY
003A48 EF                MOV     A,R7
003A49 6484              XRL     A,#084H
003A4B 703E              JNZ     ?C0014?CS_SCALEDISPLAY
003A4D         ?C0015?CS_SCALEDISPLAY:
  107: 	{
  108: 	data_buf[0]=0;
003A4D E4                CLR     A
003A4E 904D17            MOV     DPTR,#data_buf
003A51 F0                MOVX    @DPTR,A
  109: 	data_buf[1]=LcdchC_Num;
003A52 A3                INC     DPTR
003A53 740C              MOV     A,#0CH
003A55 F0                MOVX    @DPTR,A
  110: 	data_buf[2]=LcdchA_Num;
003A56 A3                INC     DPTR
003A57 740A              MOV     A,#0AH
003A59 F0                MOVX    @DPTR,A
  111: 	data_buf[3]=LcdchL_Num;
003A5A A3                INC     DPTR
003A5B 7410              MOV     A,#010H
003A5D F0                MOVX    @DPTR,A
  112: 		if(option==DisplayCal1)
003A5E EF                MOV     A,R7
003A5F B48104            CJNE    A,#081H,?C0016?CS_SCALEDISPLAY
  113: 			data_buf[4]=1;
003A62 A3                INC     DPTR
003A63 7401              MOV     A,#01H
003A65 F0                MOVX    @DPTR,A
003A66         ?C0016?CS_SCALEDISPLAY:
  114: 		if(option==DisplayCal2)
003A66 904E58            MOV     DPTR,#option
003A69 E0                MOVX    A,@DPTR
003A6A B48206            CJNE    A,#082H,?C0017?CS_SCALEDISPLAY
  115: 			data_buf[4]=2;
003A6D 904D1B            MOV     DPTR,#data_buf+04H
003A70 7402              MOV     A,#02H
003A72 F0                MOVX    @DPTR,A
003A73         ?C0017?CS_SCALEDISPLAY:
  116: 		if(option==DisplayCal3)
003A73 904E58            MOV     DPTR,#option
003A76 E0                MOVX    A,@DPTR
003A77 FF                MOV     R7,A
003A78 B48306            CJNE    A,#083H,?C0018?CS_SCALEDISPLAY
  117: 			data_buf[4]=3;
003A7B 904D1B            MOV     DPTR,#data_buf+04H
003A7E 7403              MOV     A,#03H
003A80 F0                MOVX    @DPTR,A
003A81         ?C0018?CS_SCALEDISPLAY:
  118: 		if(option==DisplayCal4)
003A81 EF                MOV     A,R7
003A82 B48406            CJNE    A,#084H,?C0014?CS_SCALEDISPLAY
  119: 			data_buf[4]=4;
003A85 904D1B            MOV     DPTR,#data_buf+04H
003A88 7404              MOV     A,#04H
003A8A F0                MOVX    @DPTR,A
  120: 	}
003A8B         ?C0014?CS_SCALEDISPLAY:
  121: 
  122: 	if(option==DisplayData||option==Displaykg||option==Displaylb||option==Displayjin||option==Displaygongjin)
003A8B 904E58            MOV     DPTR,#option
003A8E E0                MOVX    A,@DPTR
003A8F FF                MOV     R7,A
003A90 6421              XRL     A,#021H
003A92 6014              JZ      ?C0021?CS_SCALEDISPLAY
003A94 EF                MOV     A,R7
003A95 6441              XRL     A,#041H
003A97 600F              JZ      ?C0021?CS_SCALEDISPLAY
003A99 EF                MOV     A,R7
003A9A 6442              XRL     A,#042H
003A9C 600A              JZ      ?C0021?CS_SCALEDISPLAY
003A9E EF                MOV     A,R7
003A9F 6443              XRL     A,#043H
003AA1 6005              JZ      ?C0021?CS_SCALEDISPLAY
003AA3 EF                MOV     A,R7
003AA4 6444              XRL     A,#044H
003AA6 705F              JNZ     ?C0020?CS_SCALEDISPLAY
003AA8         ?C0021?CS_SCALEDISPLAY:
  123: 	{
  124: 	CS_ScaleDisplay_HexToBcd(showdata,data_buf);
003AA8 AE04              MOV     R6,AR4
003AAA AF05              MOV     R7,AR5
003AAC 7B01              MOV     R3,#01H
003AAE 7A4D              MOV     R2,#HIGH data_buf
003AB0 7917              MOV     R1,#LOW data_buf
003AB2 122EC2            LCALL   _CS_ScaleDisplay_HexToBcd
  125: 	
  126: 	if(option&showhigh4)		//显示高4位
003AB5 904E58            MOV     DPTR,#option
003AB8 E0                MOVX    A,@DPTR
003AB9 FF                MOV     R7,A
003ABA 30E61D            JNB     ACC.6,?C0022?CS_SCALEDISPLAY
  127: 		{
  128: 		data_buf[4]=data_buf[3];
003ABD 904D1A            MOV     DPTR,#data_buf+03H
003AC0 E0                MOVX    A,@DPTR
003AC1 A3                INC     DPTR
003AC2 F0                MOVX    @DPTR,A
  129: 		data_buf[3]=data_buf[2];
003AC3 904D19            MOV     DPTR,#data_buf+02H
003AC6 E0                MOVX    A,@DPTR
003AC7 A3                INC     DPTR
003AC8 F0                MOVX    @DPTR,A
  130: 		data_buf[2]=data_buf[1];
003AC9 904D18            MOV     DPTR,#data_buf+01H
003ACC E0                MOVX    A,@DPTR
003ACD A3                INC     DPTR
003ACE F0                MOVX    @DPTR,A
  131: 		data_buf[1]=data_buf[0];
003ACF 904D17            MOV     DPTR,#data_buf
003AD2 E0                MOVX    A,@DPTR
003AD3 A3                INC     DPTR
003AD4 F0                MOVX    @DPTR,A
  132: 		data_buf[0]=0;
003AD5 E4                CLR     A
003AD6 904D17            MOV     DPTR,#data_buf
003AD9 F0                MOVX    @DPTR,A
  133: 		}
003ADA         ?C0022?CS_SCALEDISPLAY:
  134: 
  135: 		if(data_buf[0]==0 && data_buf[1]==0 )	
003ADA 904D17            MOV     DPTR,#data_buf
003ADD E0                MOVX    A,@DPTR
003ADE 7007              JNZ     ?C0023?CS_SCALEDISPLAY
003AE0 A3                INC     DPTR
003AE1 E0                MOVX    A,@DPTR
003AE2 7003              JNZ     ?C0023?CS_SCALEDISPLAY
  136: 			data_buf[1]=Lcdnull_Num;
003AE4 7415              MOV     A,#015H
003AE6 F0                MOVX    @DPTR,A
003AE7         ?C0023?CS_SCALEDISPLAY:
  137: 		if(data_buf[1]==Lcdnull_Num && data_buf[2]==0 )	
003AE7 904D18            MOV     DPTR,#data_buf+01H
003AEA E0                MOVX    A,@DPTR
003AEB B41507            CJNE    A,#015H,?C0024?CS_SCALEDISPLAY
003AEE A3                INC     DPTR
003AEF E0                MOVX    A,@DPTR
003AF0 7003              JNZ     ?C0024?CS_SCALEDISPLAY
  138: 			data_buf[2]=Lcdnull_Num;
003AF2 7415              MOV     A,#015H
003AF4 F0                MOVX    @DPTR,A
003AF5         ?C0024?CS_SCALEDISPLAY:
  139: 
  140: 		if(option&ShowNoDot)	//没有小数点还要判断多一位数字为0时是否不显示
003AF5 EF                MOV     A,R7
003AF6 30E50E            JNB     ACC.5,?C0020?CS_SCALEDISPLAY
  141: 			{
  142: 			if(data_buf[2]==Lcdnull_Num && data_buf[3]==0 )	
003AF9 904D19            MOV     DPTR,#data_buf+02H
003AFC E0                MOVX    A,@DPTR
003AFD B41507            CJNE    A,#015H,?C0020?CS_SCALEDISPLAY
003B00 A3                INC     DPTR
003B01 E0                MOVX    A,@DPTR
003B02 7003              JNZ     ?C0020?CS_SCALEDISPLAY
  143: 				data_buf[3]=Lcdnull_Num;
003B04 7415              MOV     A,#015H
003B06 F0                MOVX    @DPTR,A
  144: 			}
  145: 	}
003B07         ?C0020?CS_SCALEDISPLAY:
  146: 	
  147: 	CS_lcd_showbuf[0] = CS_ScaleDisplay_LookUpTable(data_buf[1]);
003B07 904D18            MOV     DPTR,#data_buf+01H
003B0A E0                MOVX    A,@DPTR
003B0B FF                MOV     R7,A
003B0C 122E7B            LCALL   _CS_ScaleDisplay_LookUpTable
003B0F 904D22            MOV     DPTR,#CS_lcd_showbuf
003B12 EF                MOV     A,R7
003B13 F0                MOVX    @DPTR,A
  148: 	CS_lcd_showbuf[1] = CS_ScaleDisplay_LookUpTable(data_buf[2]);
003B14 904D19            MOV     DPTR,#data_buf+02H
003B17 E0                MOVX    A,@DPTR
003B18 FF                MOV     R7,A
003B19 122E7B            LCALL   _CS_ScaleDisplay_LookUpTable
003B1C 904D23            MOV     DPTR,#CS_lcd_showbuf+01H
003B1F EF                MOV     A,R7
003B20 F0                MOVX    @DPTR,A
  149: 	CS_lcd_showbuf[2] = CS_ScaleDisplay_LookUpTable(data_buf[3]);
003B21 904D1A            MOV     DPTR,#data_buf+03H
003B24 E0                MOVX    A,@DPTR
003B25 FF                MOV     R7,A
003B26 122E7B            LCALL   _CS_ScaleDisplay_LookUpTable
003B29 904D24            MOV     DPTR,#CS_lcd_showbuf+02H
003B2C EF                MOV     A,R7
003B2D F0                MOVX    @DPTR,A
  150: 	CS_lcd_showbuf[3] = CS_ScaleDisplay_LookUpTable(data_buf[4]);
003B2E 904D1B            MOV     DPTR,#data_buf+04H
003B31 E0                MOVX    A,@DPTR
003B32 FF                MOV     R7,A
003B33 122E7B            LCALL   _CS_ScaleDisplay_LookUpTable
003B36 904D25            MOV     DPTR,#CS_lcd_showbuf+03H
003B39 EF                MOV     A,R7
003B3A F0                MOVX    @DPTR,A
  151: 
  152: 	CS_ScaleDisplay_LcdBuf_rShift4();	//显示缓存跟实际液晶的逻辑对应有出入还要微调
003B3B 122F2D            LCALL   CS_ScaleDisplay_LcdBuf_rShift4
  153: 
  154: 										//显示缓存数字还有符号部分的位置
  155: 
  156: 	//////////////////////////////////////////
  157: 	//符号部分赋值
  158: 	CS_Lcd_Send_Data[4] &=0x0f;			//清单位符号缓存	
003B3E 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+04H
003B41 E0                MOVX    A,@DPTR
003B42 540F              ANL     A,#0FH
003B44 F0                MOVX    @DPTR,A
  159: 	CS_Lcd_Buf_DOT2	 &= ~S_DOT;			//清显示小数点
003B45 904D2A            MOV     DPTR,#CS_Lcd_Send_Data+03H
003B48 E0                MOVX    A,@DPTR
003B49 54F7              ANL     A,#0F7H
003B4B F0                MOVX    @DPTR,A
  160: 
  161: 		
  162: 	if(option==Displaykg)
003B4C 904E58            MOV     DPTR,#option
003B4F E0                MOVX    A,@DPTR
003B50 FD                MOV     R5,A
003B51 B4410C            CJNE    A,#041H,?C0027?CS_SCALEDISPLAY
  163: 		{
  164: 		CS_Lcd_Buf_DOT2	|= S_DOT;
003B54 904D2A            MOV     DPTR,#CS_Lcd_Send_Data+03H
003B57 E0                MOVX    A,@DPTR
003B58 4408              ORL     A,#08H
003B5A F0                MOVX    @DPTR,A
  165: 		CS_Lcd_Buf_Unit	|= S_KG;							
003B5B A3                INC     DPTR
003B5C E0                MOVX    A,@DPTR
003B5D 4410              ORL     A,#010H
003B5F F0                MOVX    @DPTR,A
  166: 		}	
003B60         ?C0027?CS_SCALEDISPLAY:
  167: 
  168: 	if(option==Displaylb)
003B60 ED                MOV     A,R5
003B61 B4420C            CJNE    A,#042H,?C0028?CS_SCALEDISPLAY
  169: 		{
  170: 		CS_Lcd_Buf_DOT2	|= S_DOT;
003B64 904D2A            MOV     DPTR,#CS_Lcd_Send_Data+03H
003B67 E0                MOVX    A,@DPTR
003B68 4408              ORL     A,#08H
003B6A F0                MOVX    @DPTR,A
  171: 		CS_Lcd_Buf_Unit	|= S_LB;							
003B6B A3                INC     DPTR
003B6C E0                MOVX    A,@DPTR
003B6D 4420              ORL     A,#020H
003B6F F0                MOVX    @DPTR,A
  172: 		}
003B70         ?C0028?CS_SCALEDISPLAY:
  173: 	if(option==Displayjin)
003B70 904E58            MOV     DPTR,#option
003B73 E0                MOVX    A,@DPTR
003B74 B4430C            CJNE    A,#043H,?C0029?CS_SCALEDISPLAY
  174: 		{
  175: 		CS_Lcd_Buf_DOT2	|= S_DOT;
003B77 904D2A            MOV     DPTR,#CS_Lcd_Send_Data+03H
003B7A E0                MOVX    A,@DPTR
003B7B 4408              ORL     A,#08H
003B7D F0                MOVX    @DPTR,A
  176: 		CS_Lcd_Buf_Unit	|= S_JIN;							
003B7E A3                INC     DPTR
003B7F E0                MOVX    A,@DPTR
003B80 4480              ORL     A,#080H
003B82 F0                MOVX    @DPTR,A
  177: 		}
003B83         ?C0029?CS_SCALEDISPLAY:
  178: 	
  179: 	if(option==Displaygongjin)
003B83 904E58            MOV     DPTR,#option
003B86 E0                MOVX    A,@DPTR
003B87 FD                MOV     R5,A
003B88 B4440C            CJNE    A,#044H,?C0030?CS_SCALEDISPLAY
  180: 		{
  181: 		CS_Lcd_Buf_DOT2	|= S_DOT;
003B8B 904D2A            MOV     DPTR,#CS_Lcd_Send_Data+03H
003B8E E0                MOVX    A,@DPTR
003B8F 4408              ORL     A,#08H
003B91 F0                MOVX    @DPTR,A
  182: 		CS_Lcd_Buf_Unit	|= S_GONG | S_JIN;							
003B92 A3                INC     DPTR
003B93 E0                MOVX    A,@DPTR
003B94 44C0              ORL     A,#0C0H
003B96 F0                MOVX    @DPTR,A
  183: 		}
003B97         ?C0030?CS_SCALEDISPLAY:
  184: 
  185: 	/*
  186: 	if( R_1186sys_state&0x02)
  187: 		CS_Lcd_Buf_SIGN |=S_DAT;
  188: 	else
  189: 		CS_Lcd_Buf_SIGN &=~S_DAT;
  190: 	*/
  191: 	
  192: 	if(bleConnStatus==BLE_STATUS_CONN)
003B97 904C5B            MOV     DPTR,#bleConnStatus
003B9A E0                MOVX    A,@DPTR
003B9B B40109            CJNE    A,#01H,?C0031?CS_SCALEDISPLAY
  193: 		CS_Lcd_Buf_SIGN |=S_BLE;
003B9E 904D27            MOV     DPTR,#CS_Lcd_Send_Data
003BA1 E0                MOVX    A,@DPTR
003BA2 4402              ORL     A,#02H
003BA4 F0                MOVX    @DPTR,A
003BA5 8007              SJMP    ?C0032?CS_SCALEDISPLAY
003BA7         ?C0031?CS_SCALEDISPLAY:
  194: 	else
  195: 		CS_Lcd_Buf_SIGN &=~S_BLE;
003BA7 904D27            MOV     DPTR,#CS_Lcd_Send_Data
003BAA E0                MOVX    A,@DPTR
003BAB 54FD              ANL     A,#0FDH
003BAD F0                MOVX    @DPTR,A
003BAE         ?C0032?CS_SCALEDISPLAY:
  196: 										
  197: 	if(option==DisplayData)				//最高位用蓝牙标志辅助显示
003BAE ED                MOV     A,R5
003BAF B42114            CJNE    A,#021H,?C0035?CS_SCALEDISPLAY
  198: 		{	
  199: 		CS_Lcd_Buf_SIGN &=~S_BLE;
003BB2 904D27            MOV     DPTR,#CS_Lcd_Send_Data
003BB5 E0                MOVX    A,@DPTR
003BB6 54FD              ANL     A,#0FDH
003BB8 F0                MOVX    @DPTR,A
  200: 		if(data_buf[0]!=0)
003BB9 904D17            MOV     DPTR,#data_buf
003BBC E0                MOVX    A,@DPTR
003BBD 6007              JZ      ?C0035?CS_SCALEDISPLAY
  201: 		CS_Lcd_Buf_SIGN |=S_BLE;
003BBF 904D27            MOV     DPTR,#CS_Lcd_Send_Data
003BC2 E0                MOVX    A,@DPTR
003BC3 4402              ORL     A,#02H
003BC5 F0                MOVX    @DPTR,A
  202: 		}
  203: 	
  204: }
003BC6         ?C0035?CS_SCALEDISPLAY:
003BC6 22                RET     
----- FUNCTION _CS_ScaleDisplay_FreshBuf (END) -------


----- FUNCTION CS_ScaleDisplay_LcdShowNull (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  298: void CS_ScaleDisplay_LcdShowNull(void)
  299: {
  300: 	CS_Lcd_Send_Data[0] = 0x00;
  301: 	CS_Lcd_Send_Data[1] = 0x00;
003BC7 E4                CLR     A
003BC8 904D27            MOV     DPTR,#CS_Lcd_Send_Data
003BCB F0                MOVX    @DPTR,A
  302: 	CS_Lcd_Send_Data[2] = 0x00;
003BCC A3                INC     DPTR
003BCD F0                MOVX    @DPTR,A
  303: 	CS_Lcd_Send_Data[3] = 0x00;
003BCE A3                INC     DPTR
003BCF F0                MOVX    @DPTR,A
  304: 	CS_Lcd_Send_Data[4] = 0x00;
003BD0 A3                INC     DPTR
003BD1 F0                MOVX    @DPTR,A
  305: }
003BD2 A3                INC     DPTR
003BD3 F0                MOVX    @DPTR,A
  306: 
003BD4 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdShowNull (END) -------


----- FUNCTION CS_ScaleDisplay_LcdShowAll (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  316: void CS_ScaleDisplay_LcdShowAll(void)
  317: {
  318: 	CS_Lcd_Send_Data[0] = 0xFF;
  319: 	CS_Lcd_Send_Data[1] = 0xFF;
003BD5 904D27            MOV     DPTR,#CS_Lcd_Send_Data
003BD8 74FF              MOV     A,#0FFH
003BDA F0                MOVX    @DPTR,A
  320: 	CS_Lcd_Send_Data[2] = 0xFF;
003BDB A3                INC     DPTR
003BDC F0                MOVX    @DPTR,A
  321: 	CS_Lcd_Send_Data[3] = 0xFF;
003BDD A3                INC     DPTR
003BDE F0                MOVX    @DPTR,A
  322: 	CS_Lcd_Send_Data[4] = 0xFF;
003BDF A3                INC     DPTR
003BE0 F0                MOVX    @DPTR,A
  323: }
003BE1 A3                INC     DPTR
003BE2 F0                MOVX    @DPTR,A
  324: 
003BE3 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdShowAll (END) -------


----- FUNCTION CS_ScaleDisplay_LcdBackup (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  326: void CS_ScaleDisplay_LcdBackup(void)
  327: {
  328: 	CS_Lcd_Send_Data_BAK[0] = CS_Lcd_Send_Data[0];
  329: 	CS_Lcd_Send_Data_BAK[1] = CS_Lcd_Send_Data[1];
003BE4 904D27            MOV     DPTR,#CS_Lcd_Send_Data
003BE7 E0                MOVX    A,@DPTR
003BE8 904D1C            MOV     DPTR,#CS_Lcd_Send_Data_BAK
003BEB F0                MOVX    @DPTR,A
  330: 	CS_Lcd_Send_Data_BAK[2] = CS_Lcd_Send_Data[2];
003BEC 904D28            MOV     DPTR,#CS_Lcd_Send_Data+01H
003BEF E0                MOVX    A,@DPTR
003BF0 904D1D            MOV     DPTR,#CS_Lcd_Send_Data_BAK+01H
003BF3 F0                MOVX    @DPTR,A
  331: 	CS_Lcd_Send_Data_BAK[3] = CS_Lcd_Send_Data[3];
003BF4 904D29            MOV     DPTR,#CS_Lcd_Send_Data+02H
003BF7 E0                MOVX    A,@DPTR
003BF8 904D1E            MOV     DPTR,#CS_Lcd_Send_Data_BAK+02H
003BFB F0                MOVX    @DPTR,A
  332: 	CS_Lcd_Send_Data_BAK[4] = CS_Lcd_Send_Data[4];	
003BFC 904D2A            MOV     DPTR,#CS_Lcd_Send_Data+03H
003BFF E0                MOVX    A,@DPTR
003C00 904D1F            MOV     DPTR,#CS_Lcd_Send_Data_BAK+03H
003C03 F0                MOVX    @DPTR,A
  333: }
003C04 904D2B            MOV     DPTR,#CS_Lcd_Send_Data+04H
003C07 E0                MOVX    A,@DPTR
003C08 904D20            MOV     DPTR,#CS_Lcd_Send_Data_BAK+04H
003C0B F0                MOVX    @DPTR,A
  334: 
003C0C 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdBackup (END) -------


----- FUNCTION lxOptProcess (BEGIN) -----
 FILE: 'lxProtocol.c'
  133: void lxOptProcess(void)
  134: {
  135: 	u8_t i;
  136: 
  137: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
003C0D 904C64            MOV     DPTR,#btCmdBuf+01H
003C10 7430              MOV     A,#030H
003C12 F0                MOVX    @DPTR,A
  138: 	btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
003C13 A3                INC     DPTR
003C14 741C              MOV     A,#01CH
003C16 F0                MOVX    @DPTR,A
  139: 	btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
003C17 E4                CLR     A
003C18 A3                INC     DPTR
003C19 F0                MOVX    @DPTR,A
  140: 	switch(lxOptStatus)
003C1A 904C5C            MOV     DPTR,#lxOptStatus
003C1D E0                MOVX    A,@DPTR
003C1E 12036F            LCALL   ?C?CCASE
003C21 3C46              DW      ?C0027?LXPROTOCOL
003C23 10                DB      010H
003C24 3CB3              DW      ?C0031?LXPROTOCOL
003C26 13                DB      013H
003C27 3D21              DW      ?C0034?LXPROTOCOL
003C29 16                DB      016H
003C2A 3DB3              DW      ?C0040?LXPROTOCOL
003C2C 18                DB      018H
003C2D 3E27              DW      ?C0050?LXPROTOCOL
003C2F 20                DB      020H
003C30 3E68              DW      ?C0051?LXPROTOCOL
003C32 22                DB      022H
003C33 3E8D              DW      ?C0053?LXPROTOCOL
003C35 25                DB      025H
003C36 3EBC              DW      ?C0055?LXPROTOCOL
003C38 28                DB      028H
003C39 3EE5              DW      ?C0058?LXPROTOCOL
003C3B 31                DB      031H
003C3C 3EFF              DW      ?C0062?LXPROTOCOL
003C3E 35                DB      035H
003C3F 3F11              DW      ?C0065?LXPROTOCOL
003C41 36                DB      036H
003C42 0000              DW      00H
003C44 3F1A              DW      ?C0049?LXPROTOCOL
  141: 	{
  142: #if 1
  143: 		case OPT_REGISTER_REQ:
003C46         ?C0027?LXPROTOCOL:
  144: 			if(*(LX_RECV_BUF + 8) == DEVICE_ID_UNREGISTERED ||
  145: 				*(LX_RECV_BUF + 8) == DEVICE_ID_REGISTERED)
003C46 9048A8            MOV     DPTR,#048A8H
003C49 E0                MOVX    A,@DPTR
003C4A 6401              XRL     A,#01H
003C4C 6004              JZ      ?C0029?LXPROTOCOL
003C4E E0                MOVX    A,@DPTR
003C4F B40221            CJNE    A,#02H,?C0028?LXPROTOCOL
003C52         ?C0029?LXPROTOCOL:
  146: 			{
  147: 				//save deviceID
  148: 				dmemcpy(deviceInfo.deviceID, LX_RECV_BUF + 2, DEVICE_ID_LENGTH);
003C52 751301            MOV     ?_dmemcpy?BYTE+03H,#01H
003C55 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
003C58 7515A2            MOV     ?_dmemcpy?BYTE+05H,#0A2H
003C5B 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
003C5E 7B01              MOV     R3,#01H
003C60 7A4C              MOV     R2,#HIGH deviceInfo+04H
003C62 790A              MOV     R1,#LOW deviceInfo+04H
003C64 1225E8            LCALL   _dmemcpy
  149: 				//register success
  150: 				deviceInfo.registerFlag = DEVICE_REGISTERED;
003C67 904C06            MOV     DPTR,#deviceInfo
003C6A 7401              MOV     A,#01H
003C6C F0                MOVX    @DPTR,A
  151: 				//update adv flag
  152: 				*(mem_le_adv_data + 13) = DEVICE_REGISTERED;
003C6D 9043E7            MOV     DPTR,#043E7H
003C70 F0                MOVX    @DPTR,A
  153: 			}
003C71 8005              SJMP    ?C0030?LXPROTOCOL
003C73         ?C0028?LXPROTOCOL:
  154: 			else// if(*(LX_RECV_BUF + 8) == DEVICE_ID_ILLEGALED)
  155: 			{
  156: 				deviceInfo.registerFlag = DEVICE_UNREGISTERED;
003C73 E4                CLR     A
003C74 904C06            MOV     DPTR,#deviceInfo
003C77 F0                MOVX    @DPTR,A
  157: 			}
003C78         ?C0030?LXPROTOCOL:
  158: 			
  159: 			btCmdBuf.len = 0x08;
003C78 904C63            MOV     DPTR,#btCmdBuf
003C7B 7408              MOV     A,#08H
003C7D F0                MOVX    @DPTR,A
  160: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
003C7E 904C67            MOV     DPTR,#btCmdBuf+04H
003C81 7410              MOV     A,#010H
003C83 F0                MOVX    @DPTR,A
  161: 			btCmdBuf.DATA[4] = REGISTER_RSP_DATA_LEN;
003C84 A3                INC     DPTR
003C85 7403              MOV     A,#03H
003C87 F0                MOVX    @DPTR,A
  162: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_REGISTER_RSP);
003C88 A3                INC     DPTR
003C89 14                DEC     A
003C8A F0                MOVX    @DPTR,A
  163: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_REGISTER_RSP);
003C8B E4                CLR     A
003C8C A3                INC     DPTR
003C8D F0                MOVX    @DPTR,A
  164: 			btCmdBuf.DATA[7] = deviceInfo.registerFlag;
003C8E 904C06            MOV     DPTR,#deviceInfo
003C91 E0                MOVX    A,@DPTR
003C92 904C6B            MOV     DPTR,#btCmdBuf+08H
003C95 F0                MOVX    @DPTR,A
  165: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), REGISTER_RSP_DATA_LEN);
003C96 7B01              MOV     R3,#01H
003C98 7A4C              MOV     R2,#HIGH btCmdBuf+06H
003C9A 7969              MOV     R1,#LOW btCmdBuf+06H
003C9C 7D03              MOV     R5,#03H
003C9E 7C00              MOV     R4,#00H
003CA0 121D6B            LCALL   _bigLittleEndianSwap
  166: 			BT_CmdFifoIn(&btCmdBuf);
003CA3 7B01              MOV     R3,#01H
003CA5 7A4C              MOV     R2,#HIGH btCmdBuf
003CA7 7963              MOV     R1,#LOW btCmdBuf
003CA9 121BEF            LCALL   _BT_CmdFifoIn
  167: 			lxOptStatus = OPT_REGISTER_RSP_WAIT_ACK;
003CAC 904C5C            MOV     DPTR,#lxOptStatus
003CAF 7411              MOV     A,#011H
003CB1 F0                MOVX    @DPTR,A
  168: 			break;
003CB2 22                RET     
  169: 			
  170: 		case OPT_BIND_REQ:
003CB3         ?C0031?LXPROTOCOL:
  171: 			//bind success
  172: 			if(*(LX_RECV_BUF + 2) >= 1 && *(LX_RECV_BUF + 2) <= 4 && *(LX_RECV_BUF + 3) == 1)
003CB3 9048A2            MOV     DPTR,#048A2H
003CB6 E0                MOVX    A,@DPTR
003CB7 C3                CLR     C
003CB8 9401              SUBB    A,#01H
003CBA 401B              JC      ?C0032?LXPROTOCOL
003CBC E0                MOVX    A,@DPTR
003CBD D3                SETB    C
003CBE 9404              SUBB    A,#04H
003CC0 5015              JNC     ?C0032?LXPROTOCOL
003CC2 A3                INC     DPTR
003CC3 E0                MOVX    A,@DPTR
003CC4 B40110            CJNE    A,#01H,?C0032?LXPROTOCOL
  173: 			{
  174: 				//save user number
  175: 				deviceInfo.userNum = *(LX_RECV_BUF + 2);
003CC7 9048A2            MOV     DPTR,#048A2H
003CCA E0                MOVX    A,@DPTR
003CCB 904C09            MOV     DPTR,#deviceInfo+03H
003CCE F0                MOVX    @DPTR,A
  176: 				//lcd display result
  177: 				deviceInfo.bindFlag = BIND_SUCCESS;
003CCF 904C07            MOV     DPTR,#deviceInfo+01H
003CD2 7401              MOV     A,#01H
003CD4 F0                MOVX    @DPTR,A
  178: 			}
003CD5 8006              SJMP    ?C0033?LXPROTOCOL
003CD7         ?C0032?LXPROTOCOL:
  179: 			else
  180: 			{
  181: 				deviceInfo.bindFlag =  BIND_FAIL;
003CD7 904C07            MOV     DPTR,#deviceInfo+01H
003CDA 7402              MOV     A,#02H
003CDC F0                MOVX    @DPTR,A
  182: 			}
003CDD         ?C0033?LXPROTOCOL:
  183: 			
  184: 			btCmdBuf.len = 0x08;
003CDD 904C63            MOV     DPTR,#btCmdBuf
003CE0 7408              MOV     A,#08H
003CE2 F0                MOVX    @DPTR,A
  185: 			btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
003CE3 A3                INC     DPTR
003CE4 7430              MOV     A,#030H
003CE6 F0                MOVX    @DPTR,A
  186: 			btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
003CE7 A3                INC     DPTR
003CE8 741C              MOV     A,#01CH
003CEA F0                MOVX    @DPTR,A
  187: 			btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
003CEB E4                CLR     A
003CEC A3                INC     DPTR
003CED F0                MOVX    @DPTR,A
  188: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
003CEE A3                INC     DPTR
003CEF 7410              MOV     A,#010H
003CF1 F0                MOVX    @DPTR,A
  189: 			btCmdBuf.DATA[4] = BIND_RSP_DATA_LEN;
003CF2 A3                INC     DPTR
003CF3 7403              MOV     A,#03H
003CF5 F0                MOVX    @DPTR,A
  190: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_BIND_RSP);
003CF6 A3                INC     DPTR
003CF7 04                INC     A
003CF8 F0                MOVX    @DPTR,A
  191: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_BIND_RSP);
003CF9 E4                CLR     A
003CFA A3                INC     DPTR
003CFB F0                MOVX    @DPTR,A
  192: 			btCmdBuf.DATA[7] = deviceInfo.bindFlag;
003CFC 904C07            MOV     DPTR,#deviceInfo+01H
003CFF E0                MOVX    A,@DPTR
003D00 904C6B            MOV     DPTR,#btCmdBuf+08H
003D03 F0                MOVX    @DPTR,A
  193: 
  194: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), BIND_RSP_DATA_LEN);
003D04 7B01              MOV     R3,#01H
003D06 7A4C              MOV     R2,#HIGH btCmdBuf+06H
003D08 7969              MOV     R1,#LOW btCmdBuf+06H
003D0A 7D03              MOV     R5,#03H
003D0C 7C00              MOV     R4,#00H
003D0E 121D6B            LCALL   _bigLittleEndianSwap
  195: 			BT_CmdFifoIn(&btCmdBuf);
003D11 7B01              MOV     R3,#01H
003D13 7A4C              MOV     R2,#HIGH btCmdBuf
003D15 7963              MOV     R1,#LOW btCmdBuf
003D17 121BEF            LCALL   _BT_CmdFifoIn
  196: 			lxOptStatus = OPT_BIND_RSP_WAIT_ACK;
003D1A 904C5C            MOV     DPTR,#lxOptStatus
003D1D 7414              MOV     A,#014H
003D1F F0                MOVX    @DPTR,A
  197: 			break;
003D20 22                RET     
  198: 		
  199: 		case OPT_LOGIN_REQ:
003D21         ?C0034?LXPROTOCOL:
  200: 			btCmdBuf.len = 0x0f;
003D21 904C63            MOV     DPTR,#btCmdBuf
003D24 740F              MOV     A,#0FH
003D26 F0                MOVX    @DPTR,A
  201: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
003D27 904C67            MOV     DPTR,#btCmdBuf+04H
003D2A 04                INC     A
003D2B F0                MOVX    @DPTR,A
  202: 			btCmdBuf.DATA[4] = LOGIN_REQ_DATA_LEN;
003D2C A3                INC     DPTR
003D2D 740A              MOV     A,#0AH
003D2F F0                MOVX    @DPTR,A
  203: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_LOGIN_REQ);
003D30 A3                INC     DPTR
003D31 7407              MOV     A,#07H
003D33 F0                MOVX    @DPTR,A
  204: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_LOGIN_REQ);
003D34 E4                CLR     A
003D35 A3                INC     DPTR
003D36 F0                MOVX    @DPTR,A
  205: 			//Verification code:6bytes deviceID XOR MAC
  206: 			for(i=0;i<6;i++)
003D37 904E5A            MOV     DPTR,#i
003D3A F0                MOVX    @DPTR,A
003D3B         ?C0035?LXPROTOCOL:
003D3B 904E5A            MOV     DPTR,#i
003D3E E0                MOVX    A,@DPTR
003D3F FF                MOV     R7,A
003D40 C3                CLR     C
003D41 9406              SUBB    A,#06H
003D43 502E              JNC     ?C0036?LXPROTOCOL
  207: 			{
  208: 				btCmdBuf.DATA[7+i] = deviceInfo.deviceID[i] ^ (*(mem_le_mac+i));
003D45 E0                MOVX    A,@DPTR
003D46 FE                MOV     R6,A
003D47 24E8              ADD     A,#0E8H
003D49 F582              MOV     DPL,A
003D4B E4                CLR     A
003D4C 3443              ADDC    A,#043H
003D4E F583              MOV     DPH,A
003D50 E0                MOVX    A,@DPTR
003D51 FD                MOV     R5,A
003D52 740A              MOV     A,#LOW deviceInfo+04H
003D54 2E                ADD     A,R6
003D55 F582              MOV     DPL,A
003D57 E4                CLR     A
003D58 344C              ADDC    A,#HIGH deviceInfo+04H
003D5A F583              MOV     DPH,A
003D5C E0                MOVX    A,@DPTR
003D5D 6D                XRL     A,R5
003D5E FE                MOV     R6,A
003D5F 746B              MOV     A,#LOW btCmdBuf+08H
003D61 2F                ADD     A,R7
003D62 F582              MOV     DPL,A
003D64 E4                CLR     A
003D65 344C              ADDC    A,#HIGH btCmdBuf+08H
003D67 F583              MOV     DPH,A
003D69 EE                MOV     A,R6
003D6A F0                MOVX    @DPTR,A
  209: 			}
003D6B 904E5A            MOV     DPTR,#i
003D6E E0                MOVX    A,@DPTR
003D6F 04                INC     A
003D70 F0                MOVX    @DPTR,A
003D71 80C8              SJMP    ?C0035?LXPROTOCOL
003D73         ?C0036?LXPROTOCOL:
  210: 			
  211: 			//user number:1bytes
  212: 			btCmdBuf.DATA[13] = deviceInfo.userNum;
003D73 904C09            MOV     DPTR,#deviceInfo+03H
003D76 E0                MOVX    A,@DPTR
003D77 904C71            MOV     DPTR,#btCmdBuf+0EH
003D7A F0                MOVX    @DPTR,A
  213: 			//battery:1bytes
  214: 			if(CS_Scale_JudgeLowBat(GetIfLowBat) == true)
003D7B 7F01              MOV     R7,#01H
003D7D 1217A6            LCALL   _CS_Scale_JudgeLowBat
003D80 BF0108            CJNE    R7,#01H,?C0038?LXPROTOCOL
  215: 				btCmdBuf.DATA[14] = 10;
003D83 904C72            MOV     DPTR,#btCmdBuf+0FH
003D86 740A              MOV     A,#0AH
003D88 F0                MOVX    @DPTR,A
003D89 8006              SJMP    ?C0039?LXPROTOCOL
003D8B         ?C0038?LXPROTOCOL:
  216: 			else
  217: 				btCmdBuf.DATA[14] = 100;
003D8B 904C72            MOV     DPTR,#btCmdBuf+0FH
003D8E 7464              MOV     A,#064H
003D90 F0                MOVX    @DPTR,A
003D91         ?C0039?LXPROTOCOL:
  218: 
  219: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), LOGIN_REQ_DATA_LEN);
003D91 7B01              MOV     R3,#01H
003D93 7A4C              MOV     R2,#HIGH btCmdBuf+06H
003D95 7969              MOV     R1,#LOW btCmdBuf+06H
003D97 7D0A              MOV     R5,#0AH
003D99 7C00              MOV     R4,#00H
003D9B 121D6B            LCALL   _bigLittleEndianSwap
  220: 			BT_CmdFifoIn(&btCmdBuf);
003D9E 7B01              MOV     R3,#01H
003DA0 7A4C              MOV     R2,#HIGH btCmdBuf
003DA2 7963              MOV     R1,#LOW btCmdBuf
003DA4 121BEF            LCALL   _BT_CmdFifoIn
  221: 			YC_Delay10ms(10);
003DA7 7F0A              MOV     R7,#0AH
003DA9 121D53            LCALL   _YC_Delay10ms
  222: 			lxOptStatus = OPT_LOGIN_REQ_WAIT_ACK;
003DAC 904C5C            MOV     DPTR,#lxOptStatus
003DAF 7417              MOV     A,#017H
003DB1 F0                MOVX    @DPTR,A
  223: 			break;
003DB2 22                RET     
  224: 		case OPT_LOGIN_RSP:
003DB3         ?C0040?LXPROTOCOL:
  225: 			*(mem_register_buf + 2) = *(LX_RECV_BUF + 2);
003DB3 9048A2            MOV     DPTR,#048A2H
003DB6 E0                MOVX    A,@DPTR
003DB7 904C10            MOV     DPTR,#04C10H
003DBA F0                MOVX    @DPTR,A
  226: 			if(*(mem_register_buf + 2) == LOGIN_SUCCESS)
003DBB E0                MOVX    A,@DPTR
003DBC 6401              XRL     A,#01H
003DBE 7050              JNZ     ?C0041?LXPROTOCOL
  227: 			{
  228: 				//Verification code:6bytes deviceID XOR MAC
  229: 				for(i=0;i<6;i++)
003DC0 904E5A            MOV     DPTR,#i
003DC3 F0                MOVX    @DPTR,A
003DC4         ?C0042?LXPROTOCOL:
  230: 				{
  231: 					if(*(LX_RECV_BUF + 3+i) != *(mem_register_buf + 4 + i) ^ (*(mem_le_mac+i)))
003DC4 904E5A            MOV     DPTR,#i
003DC7 E0                MOVX    A,@DPTR
003DC8 FF                MOV     R7,A
003DC9 2412              ADD     A,#012H
003DCB F582              MOV     DPL,A
003DCD E4                CLR     A
003DCE 344C              ADDC    A,#04CH
003DD0 F583              MOV     DPH,A
003DD2 E0                MOVX    A,@DPTR
003DD3 FE                MOV     R6,A
003DD4 74A3              MOV     A,#0A3H
003DD6 2F                ADD     A,R7
003DD7 F582              MOV     DPL,A
003DD9 E4                CLR     A
003DDA 3448              ADDC    A,#048H
003DDC F583              MOV     DPH,A
003DDE E0                MOVX    A,@DPTR
003DDF 6E                XRL     A,R6
003DE0 6004              JZ      ?C0046?LXPROTOCOL
003DE2 7F01              MOV     R7,#01H
003DE4 8002              SJMP    ?C0047?LXPROTOCOL
003DE6         ?C0046?LXPROTOCOL:
003DE6 7F00              MOV     R7,#00H
003DE8         ?C0047?LXPROTOCOL:
003DE8 904E5A            MOV     DPTR,#i
003DEB E0                MOVX    A,@DPTR
003DEC 24E8              ADD     A,#0E8H
003DEE F582              MOV     DPL,A
003DF0 E4                CLR     A
003DF1 3443              ADDC    A,#043H
003DF3 F583              MOV     DPH,A
003DF5 E0                MOVX    A,@DPTR
003DF6 6F                XRL     A,R7
003DF7 6006              JZ      ?C0044?LXPROTOCOL
  232: 					{
  233: 						//disconnected
  234: 						btCmdBuf.len = 0x01;
003DF9 904C63            MOV     DPTR,#btCmdBuf
003DFC 7401              MOV     A,#01H
003DFE F0                MOVX    @DPTR,A
  235: 						//btCmdBuf.DATA[0] = CS_CMD_LE_DISC_REQ;
  236: 						//BT_CmdFifoIn(&btCmdBuf);
  237: 						//return;
  238: 					}
  239: 				}
003DFF         ?C0044?LXPROTOCOL:
003DFF 904E5A            MOV     DPTR,#i
003E02 E0                MOVX    A,@DPTR
003E03 04                INC     A
003E04 F0                MOVX    @DPTR,A
003E05 E0                MOVX    A,@DPTR
003E06 B406BB            CJNE    A,#06H,?C0042?LXPROTOCOL
003E09         ?C0043?LXPROTOCOL:
  240: 				//login success:sync time
  241: 				lxOptStatus = OPT_INIT_REQ;
003E09 904C5C            MOV     DPTR,#lxOptStatus
003E0C 7420              MOV     A,#020H
003E0E F0                MOVX    @DPTR,A
  242: 			}
003E0F 22                RET     
003E10         ?C0041?LXPROTOCOL:
  243: 			else
  244: 			{
  245: 				lxOptStatus = OPT_IDLE;
003E10 E4                CLR     A
003E11 904C5C            MOV     DPTR,#lxOptStatus
003E14 F0                MOVX    @DPTR,A
  246: 				//disconnected
  247: 				btCmdBuf.len = 0x01;
003E15 904C63            MOV     DPTR,#btCmdBuf
003E18 04                INC     A
003E19 F0                MOVX    @DPTR,A
  248: 				btCmdBuf.DATA[0] = CS_CMD_LE_DISC_REQ;
003E1A A3                INC     DPTR
003E1B 7429              MOV     A,#029H
003E1D F0                MOVX    @DPTR,A
  249: 				BT_CmdFifoIn(&btCmdBuf);
003E1E 7B01              MOV     R3,#01H
003E20 7A4C              MOV     R2,#HIGH btCmdBuf
003E22 7963              MOV     R1,#LOW btCmdBuf
003E24 021BEF            LJMP    _BT_CmdFifoIn
  250: 				return;
  251: 			}
  252: 			break;
  253: 			
  254: 		case OPT_INIT_REQ:
003E27         ?C0050?LXPROTOCOL:
  255: 			btCmdBuf.len = 0x08;
003E27 904C63            MOV     DPTR,#btCmdBuf
003E2A 7408              MOV     A,#08H
003E2C F0                MOVX    @DPTR,A
  256: 			btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
003E2D A3                INC     DPTR
003E2E 7430              MOV     A,#030H
003E30 F0                MOVX    @DPTR,A
  257: 			btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
003E31 A3                INC     DPTR
003E32 741C              MOV     A,#01CH
003E34 F0                MOVX    @DPTR,A
  258: 			btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
003E35 E4                CLR     A
003E36 A3                INC     DPTR
003E37 F0                MOVX    @DPTR,A
  259: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
003E38 A3                INC     DPTR
003E39 7410              MOV     A,#010H
003E3B F0                MOVX    @DPTR,A
  260: 			btCmdBuf.DATA[4] = INIT_REQ_DATA_LEN;
003E3C A3                INC     DPTR
003E3D 7403              MOV     A,#03H
003E3F F0                MOVX    @DPTR,A
  261: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_INIT_REQ);
003E40 A3                INC     DPTR
003E41 7409              MOV     A,#09H
003E43 F0                MOVX    @DPTR,A
  262: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_INIT_REQ);
003E44 E4                CLR     A
003E45 A3                INC     DPTR
003E46 F0                MOVX    @DPTR,A
  263: 			btCmdBuf.DATA[7] = 0x08;
003E47 A3                INC     DPTR
003E48 7408              MOV     A,#08H
003E4A F0                MOVX    @DPTR,A
  264: 			
  265: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), INIT_REQ_DATA_LEN);
003E4B 7B01              MOV     R3,#01H
003E4D 7A4C              MOV     R2,#HIGH btCmdBuf+06H
003E4F 7969              MOV     R1,#LOW btCmdBuf+06H
003E51 7D03              MOV     R5,#03H
003E53 7C00              MOV     R4,#00H
003E55 121D6B            LCALL   _bigLittleEndianSwap
  266: 			BT_CmdFifoIn(&btCmdBuf);
003E58 7B01              MOV     R3,#01H
003E5A 7A4C              MOV     R2,#HIGH btCmdBuf
003E5C 7963              MOV     R1,#LOW btCmdBuf
003E5E 121BEF            LCALL   _BT_CmdFifoIn
  267: 			lxOptStatus = OPT_INIT_REQ_WAIT_ACK;
003E61 904C5C            MOV     DPTR,#lxOptStatus
003E64 7421              MOV     A,#021H
003E66 F0                MOVX    @DPTR,A
  268: 			break;
003E67 22                RET     
  269: 		case OPT_INIT_RSP:
003E68         ?C0051?LXPROTOCOL:
  270: 			if(*(LX_RECV_BUF + 2) == 0x08)
003E68 9048A2            MOV     DPTR,#048A2H
003E6B E0                MOVX    A,@DPTR
003E6C B40818            CJNE    A,#08H,?C0052?LXPROTOCOL
  271: 			{
  272: 				//save UTC time
  273: 				dmemcpy((pxbyte)&UTCTime, LX_RECV_BUF + 3, 4);
003E6F 7A4C              MOV     R2,#HIGH UTCTime
003E71 795E              MOV     R1,#LOW UTCTime
003E73 7B01              MOV     R3,#01H
003E75 C003              PUSH    AR3
003E77 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
003E79 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
003E7C 7515A3            MOV     ?_dmemcpy?BYTE+05H,#0A3H
003E7F 751604            MOV     ?_dmemcpy?BYTE+06H,#04H
003E82 D003              POP     AR3
003E84 1225E8            LCALL   _dmemcpy
  274: 			}
003E87         ?C0052?LXPROTOCOL:
  275: 			lxOptStatus = OPT_IDLE;
003E87 E4                CLR     A
003E88 904C5C            MOV     DPTR,#lxOptStatus
003E8B F0                MOVX    @DPTR,A
  276: 			break;
003E8C 22                RET     
  277: 			
  278: 		case OPT_TIME_SETTING_REQ:
003E8D         ?C0053?LXPROTOCOL:
  279: 			if(*(LX_RECV_BUF+2) &0x01 == 1)
003E8D 9048A2            MOV     DPTR,#048A2H
003E90 E0                MOVX    A,@DPTR
003E91 30E018            JNB     ACC.0,?C0054?LXPROTOCOL
  280: 			{
  281: 				dmemcpy((pxbyte)&UTCTime, LX_RECV_BUF + 3, 4);
003E94 7A4C              MOV     R2,#HIGH UTCTime
003E96 795E              MOV     R1,#LOW UTCTime
003E98 7B01              MOV     R3,#01H
003E9A C003              PUSH    AR3
003E9C 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
003E9E 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
003EA1 7515A3            MOV     ?_dmemcpy?BYTE+05H,#0A3H
003EA4 751604            MOV     ?_dmemcpy?BYTE+06H,#04H
003EA7 D003              POP     AR3
003EA9 1225E8            LCALL   _dmemcpy
  282: 			}
003EAC         ?C0054?LXPROTOCOL:
  283: 			/*
  284: 			if(*(LX_RECV_BUF+2) &0x02 == 1)
  285: 			{
  286: 
  287: 			}
  288: 			*/
  289: 			lxSettingDeviceRespone(CMD_TIME_SETTING_REQ, DEVICE_RSP_SUCCESS);
003EAC 7D01              MOV     R5,#01H
003EAE 7F02              MOV     R7,#02H
003EB0 7E10              MOV     R6,#010H
003EB2 121D10            LCALL   _lxSettingDeviceRespone
  290: 			lxOptStatus = OPT_TIME_SETTING_RSP_WAIT_ACK;
003EB5 904C5C            MOV     DPTR,#lxOptStatus
003EB8 7426              MOV     A,#026H
003EBA F0                MOVX    @DPTR,A
  291: 			break;
003EBB 22                RET     
  292: 		
  293: 		case OPT_UNIT_SETTING_REQ:
003EBC         ?C0055?LXPROTOCOL:
  294: 			//save
  295: 			if(*(LX_RECV_BUF + 2) <= 3)
003EBC 9048A2            MOV     DPTR,#048A2H
003EBF E0                MOVX    A,@DPTR
003EC0 D3                SETB    C
003EC1 9403              SUBB    A,#03H
003EC3 5010              JNC     ?C0056?LXPROTOCOL
  296: 			{
  297: 				R_Selet_Unit = *(LX_RECV_BUF + 2);
003EC5 E0                MOVX    A,@DPTR
003EC6 904CC5            MOV     DPTR,#R_Selet_Unit
003EC9 F0                MOVX    @DPTR,A
  298: 				lxSettingDeviceRespone(CMD_UNIT_SETTING_REQ, DEVICE_RSP_SUCCESS);
003ECA 7D01              MOV     R5,#01H
003ECC 7F04              MOV     R7,#04H
003ECE 7E10              MOV     R6,#010H
003ED0 121D10            LCALL   _lxSettingDeviceRespone
  299: 			}
003ED3 8009              SJMP    ?C0057?LXPROTOCOL
003ED5         ?C0056?LXPROTOCOL:
  300: 			else
  301: 			{
  302: 				lxSettingDeviceRespone(CMD_UNIT_SETTING_REQ, DEVICE_RSP_FAIL);
003ED5 7D02              MOV     R5,#02H
003ED7 7F04              MOV     R7,#04H
003ED9 7E10              MOV     R6,#010H
003EDB 121D10            LCALL   _lxSettingDeviceRespone
  303: 			}
003EDE         ?C0057?LXPROTOCOL:
  304: 			lxOptStatus = OPT_UNIT_SETTING_RSP_WAIT_ACK;
003EDE 904C5C            MOV     DPTR,#lxOptStatus
003EE1 7429              MOV     A,#029H
003EE3 F0                MOVX    @DPTR,A
  305: 			break;
003EE4 22                RET     
  306: 
  307: 		case OPT_DATA_DEL_SETTING_REQ:
003EE5         ?C0058?LXPROTOCOL:
  308: 			if(*(LX_RECV_BUF + 3)&0x01 == 1)
003EE5 9048A3            MOV     DPTR,#048A3H
003EE8 E0                MOVX    A,@DPTR
003EE9 30E003            JNB     ACC.0,?C0061?LXPROTOCOL
  309: 			{
  310: 				delUserData();
003EEC 121FC1            LCALL   delUserData
  311: 			}
  312: 			if(*(LX_RECV_BUF + 3)&0x04 == 1)
  313: 			{
  314: 				UTCTime = 0;
  315: 				R_Selet_Unit = CS_ScaleDisplay_L_kg;
  316: 			}
  317: 			if(*(LX_RECV_BUF + 3)&0x08 == 1)
  318: 			{
  319: 				QueueInit();
  320: 			}
003EEF         ?C0061?LXPROTOCOL:
  321: 			
  322: 			lxSettingDeviceRespone(CMD_DATA_CLEAR_SETTING_REQ, DEVICE_RSP_SUCCESS);
003EEF 7D01              MOV     R5,#01H
003EF1 7F05              MOV     R7,#05H
003EF3 7E10              MOV     R6,#010H
003EF5 121D10            LCALL   _lxSettingDeviceRespone
  323: 			lxOptStatus = OPT_DATA_DEL_SETTING_RSP_WAIT_ACK;
003EF8 904C5C            MOV     DPTR,#lxOptStatus
003EFB 7432              MOV     A,#032H
003EFD F0                MOVX    @DPTR,A
  324: 			break;
003EFE 22                RET     
  325: #endif
  326: 		case OPT_SYNC_DATA_REQ:
003EFF         ?C0062?LXPROTOCOL:
  327: 			//forbidden
  328: 			if(*(LX_RECV_BUF + 3) == 0)
003EFF 9048A3            MOV     DPTR,#048A3H
003F02 E0                MOVX    A,@DPTR
003F03 7005              JNZ     ?C0063?LXPROTOCOL
  329: 			{
  330: 				lxOptStatus = OPT_IDLE;
003F05 904C5C            MOV     DPTR,#lxOptStatus
003F08 F0                MOVX    @DPTR,A
  331: 			}
003F09 22                RET     
003F0A         ?C0063?LXPROTOCOL:
  332: 			else
  333: 			{
  334: 				lxOptStatus = OPT_SYNC_DATA_RSP;
003F0A 904C5C            MOV     DPTR,#lxOptStatus
003F0D 7436              MOV     A,#036H
003F0F F0                MOVX    @DPTR,A
  335: 			}
  336: 			break;
003F10 22                RET     
  337: 		case OPT_SYNC_DATA_RSP:
003F11         ?C0065?LXPROTOCOL:
  338: 			//send measuredata
  339: 			sendHistoryData();
003F11 122393            LCALL   sendHistoryData
  340: 			lxOptStatus = OPT_SYNC_DATA_RSP_WAIT_ACK;
003F14 904C5C            MOV     DPTR,#lxOptStatus
003F17 7437              MOV     A,#037H
003F19 F0                MOVX    @DPTR,A
  341: 			break;
  342: 		/*
  343: 		case LX_OPT_STATUS_RESEND:
  344: 			BT_CmdFifoIn(&btCmdBuf);
  345: 			lxOptStatus = OPT_IDLE;
  346: 			break;
  347: 			*/
  348: 	}
  349: }
003F1A         ?C0049?LXPROTOCOL:
003F1A 22                RET     
----- FUNCTION lxOptProcess (END) -------


----- FUNCTION QueueInit (BEGIN) -----
 FILE: 'lxProtocol.c'
  496: void QueueInit(void)
  497: {
  498: 	historyUserData.head = 0;
  499: 	historyUserData.tail = 0;
003F1B E4                CLR     A
003F1C 904C10            MOV     DPTR,#historyUserData
003F1F F0                MOVX    @DPTR,A
  500: 	historyUserData.size = 0;
003F20 A3                INC     DPTR
003F21 F0                MOVX    @DPTR,A
  501: }
003F22 A3                INC     DPTR
003F23 F0                MOVX    @DPTR,A
  502: 
003F24 22                RET     
----- FUNCTION QueueInit (END) -------


