LX51 LINKER/LOCATER V4.41                                                               03/23/2017  16:17:30  PAGE 1





ASSEMBLER CODE PACKING OF MODULE:  OUT\FW (MAIN)


----- FUNCTION main (BEGIN) -----
 FILE: 'main.c'
   20: void main()
   21: {
   22: 	R_Test++;
   23: 	systemInit();
0004CC 904C62            MOV     DPTR,#R_Test
0004CF E0                MOVX    A,@DPTR
0004D0 04                INC     A
0004D1 F0                MOVX    @DPTR,A
   24: 	while(1) {		
0004D2 12192D            LCALL   systemInit
0004D5         ?C0001?MAIN:
   25: 		BTControlProcess();
   26: 		lxOptProcess();
0004D5 12200E            LCALL   BTControlProcess
   27: 		//WechatProcess();
0004D8 F1AD              ACALL   lxOptProcess
   28: 		SysStatusProcess();
0004DA B1A7              ACALL   SysStatusProcess
   29: 		if(sys_state == SYS_ST_RUN) {
0004DC 904E6E            MOV     DPTR,#sys_state
0004DF E0                MOVX    A,@DPTR
0004E0 B402F2            CJNE    A,#02H,?C0001?MAIN
   30: 			YC_UtilTimerProcess();
0004E3 12221D            LCALL   YC_UtilTimerProcess
   31: 			CS_Scale_1186Com();		//1186通信处理
0004E6 91EE              ACALL   CS_Scale_1186Com
   32: 			CS_Scale_Proc();
0004E8 120E55            LCALL   CS_Scale_Proc
   33: 		}
   34: 	}
0004EB 80E8              SJMP    ?C0001?MAIN
0004ED 22                RET     
----- FUNCTION main (END) -------


----- FUNCTION CS_Scale_1186Com (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   19: void CS_Scale_1186Com(void)
   20: {	
   21: 	
   22: 	if(uartTimeoutCnt < CS_CommTo1186_TimeOut)	 
0004EE 904D64            MOV     DPTR,#uartTimeoutCnt
0004F1 E0                MOVX    A,@DPTR
0004F2 C3                CLR     C
0004F3 9415              SUBB    A,#015H
0004F5 502B              JNC     ?C0001?CS_COMMTO1186
   23: 		{
   24: 		
   25: 			switch(R_Scale_state)
0004F7 904CC5            MOV     DPTR,#R_Scale_state
0004FA E0                MOVX    A,@DPTR
0004FB 24FE              ADD     A,#0FEH
0004FD 6014              JZ      ?C0004?CS_COMMTO1186
0004FF 04                INC     A
000500 24FC              ADD     A,#0FCH
000502 5016              JNC     ?C0007?CS_COMMTO1186
000504 2405              ADD     A,#05H
000506 7029              JNZ     ?C0010?CS_COMMTO1186
   26: 			{
   27: 			case CS_Scale_state_init:
000508         ?C0003?CS_COMMTO1186:
   28: 				CS_1186Com_Reset_Proc();			
000508 F106              ACALL   CS_1186Com_Reset_Proc
   29: 				CS_1186Com_ReadMacAdress_Proc();
00050A 123871            LCALL   CS_1186Com_ReadMacAdress_Proc
   30: 				CS_1186Com_ReadTime_Proc();
00050D B1E7              ACALL   CS_1186Com_ReadTime_Proc
   31: 				CS_1186Com_SetOpenWeight_Proc();
00050F F120              ACALL   CS_1186Com_SetOpenWeight_Proc
   32: 				CS_1186Com_SetLcd_Proc();
000511 801F              SJMP    CS_1186Com_SetLcd_Proc
   33: 				break;			
   34: 			case CS_Scale_state_standby:
000513         ?C0004?CS_COMMTO1186:
   35: 				CS_1186Com_SetSleepMode_Proc();
000513 D172              ACALL   CS_1186Com_SetSleepMode_Proc
   36: 				CS_1186Com_ReadAdZero_Proc();
000515 123672            LCALL   CS_1186Com_ReadAdZero_Proc
   37: 				CS_1186Com_SetLcd_Proc();
000518 8018              SJMP    CS_1186Com_SetLcd_Proc
   38: 				break;
   39: 			case CS_Scale_state_weighting:
   40: 			case CS_Scale_state_caling:
   41: 			case CS_Scale_state_locking:
00051A         ?C0007?CS_COMMTO1186:
   42: 				CS_1186Com_ReadTime_Proc();
00051A B1E7              ACALL   CS_1186Com_ReadTime_Proc
   43: 				CS_1186Com_ReadAdc_Proc();
00051C 123D7A            LCALL   CS_1186Com_ReadAdc_Proc
   44: 				CS_1186Com_SetLcd_Proc();
00051F 8011              SJMP    CS_1186Com_SetLcd_Proc
   45: 
   46: 				/*
   47: 				if(B_Weight_AdOk == true)
   48: 					{
   49: 					R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplay;
   50: 					B_Weight_LcdOk =false;
   51: 					}
   52: 				if(B_Weight_LcdOk == true)
   53: 					{
   54: 					R_Weight_Com_Coo.now = CS_CommTo1186_ReadAd;	
   55: 					}
   56: 				*/
   57: 				break;
   58: 			default:
   59: 				break;			
   60: 			}		
   61: 		}
000521 22                RET     
000522         ?C0001?CS_COMMTO1186:
   62: 	else
   63: 		{
   64: 		YC_UARTClearBuffer();	// fresh rec buffer
000522 B197              ACALL   YC_UARTClearBuffer
   65: 		uartTimeoutCnt=0;
000524 E4                CLR     A
000525 904D64            MOV     DPTR,#uartTimeoutCnt
000528 F0                MOVX    @DPTR,A
   66: 		R_Weight_Com_Coo.now = R_Weight_Com_Coo.pre;	//re send
000529 904D51            MOV     DPTR,#R_Weight_Com_Coo+01H
00052C E0                MOVX    A,@DPTR
00052D 904D50            MOV     DPTR,#R_Weight_Com_Coo
000530 F0                MOVX    @DPTR,A
   67: 		}
   68: 
   69: }
000531         ?C0010?CS_COMMTO1186:
000531 22                RET     
----- FUNCTION CS_Scale_1186Com (END) -------


----- FUNCTION CS_1186Com_SetLcd_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  172: void CS_1186Com_SetLcd_Proc(void)
  173: {
  174: 
  175: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_LcdDisplay)
000532 904D50            MOV     DPTR,#R_Weight_Com_Coo
000535 E0                MOVX    A,@DPTR
000536 B4E01E            CJNE    A,#0E0H,?C0025?CS_COMMTO1186
  176: 		{
  177: 		CS_CommTo1186_SendCmd(CS_CommTo1186_LcdDisplay,CS_Lcd_Send_Data);
000539 7B01              MOV     R3,#01H
00053B 7A4D              MOV     R2,#HIGH CS_Lcd_Send_Data
00053D 7923              MOV     R1,#LOW CS_Lcd_Send_Data
00053F 7FE0              MOV     R7,#0E0H
000541 123924            LCALL   _CS_CommTo1186_SendCmd
  178: 		R_Weight_Com_Coo.pre = CS_CommTo1186_LcdDisplay;
000544 904D51            MOV     DPTR,#R_Weight_Com_Coo+01H
000547 74E0              MOV     A,#0E0H
000549 F0                MOVX    @DPTR,A
  179: 		R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplayStandby;
00054A 904D50            MOV     DPTR,#R_Weight_Com_Coo
00054D 740B              MOV     A,#0BH
00054F F0                MOVX    @DPTR,A
  180: 		uartTimeoutCnt=0;
000550 E4                CLR     A
000551 904D64            MOV     DPTR,#uartTimeoutCnt
000554 F0                MOVX    @DPTR,A
  181: 		YC_UARTClearBuffer();
000555 B197              ACALL   YC_UARTClearBuffer
  182: 		}
000557         ?C0025?CS_COMMTO1186:
  183: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_LcdDisplayStandby)
000557 904D50            MOV     DPTR,#R_Weight_Com_Coo
00055A E0                MOVX    A,@DPTR
00055B 640B              XRL     A,#0BH
00055D 7037              JNZ     ?C0032?CS_COMMTO1186
  184: 		{
  185: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 5)==5)
00055F 7B01              MOV     R3,#01H
000561 7A4D              MOV     R2,#HIGH uartRcvBuf
000563 7940              MOV     R1,#LOW uartRcvBuf
000565 7D05              MOV     R5,#05H
000567 FC                MOV     R4,A
000568 F1E1              ACALL   _YC_UARTReciveDataExpected
00056A EF                MOV     A,R7
00056B 6405              XRL     A,#05H
00056D 4E                ORL     A,R6
00056E 7026              JNZ     ?C0032?CS_COMMTO1186
  186: 			{
  187: 			if(uartRcvBuf[3] == CS_CommTo1186_LcdDisplay)    
000570 904D43            MOV     DPTR,#uartRcvBuf+03H
000573 E0                MOVX    A,@DPTR
000574 B4E019            CJNE    A,#0E0H,?C0028?CS_COMMTO1186
  188: 				{
  189: 				if(R_Scale_state==CS_Scale_state_init)
000577 904CC5            MOV     DPTR,#R_Scale_state
00057A E0                MOVX    A,@DPTR
00057B 7006              JNZ     ?C0029?CS_COMMTO1186
  190: 					R_Weight_Com_Coo.now = CS_CommTo1186_Null;
00057D 904D50            MOV     DPTR,#R_Weight_Com_Coo
000580 F0                MOVX    @DPTR,A
000581 8006              SJMP    ?C0030?CS_COMMTO1186
000583         ?C0029?CS_COMMTO1186:
  191: 				else
  192: 					R_Weight_Com_Coo.now = CS_CommTo1186_ReadAd;
000583 904D50            MOV     DPTR,#R_Weight_Com_Coo
000586 7480              MOV     A,#080H
000588 F0                MOVX    @DPTR,A
000589         ?C0030?CS_COMMTO1186:
  193: 				R_Weight_Com_Coo.sucess=true;		
000589 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
00058C 7401              MOV     A,#01H
00058E F0                MOVX    @DPTR,A
  194: 				}
00058F 22                RET     
000590         ?C0028?CS_COMMTO1186:
  195: 			else
  196: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
000590 904D64            MOV     DPTR,#uartTimeoutCnt
000593 7415              MOV     A,#015H
000595 F0                MOVX    @DPTR,A
  197: 			}	
  198: 		}
  199: }
000596         ?C0032?CS_COMMTO1186:
000596 22                RET     
----- FUNCTION CS_1186Com_SetLcd_Proc (END) -------


----- FUNCTION YC_UARTClearBuffer (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  409: void YC_UARTClearBuffer(void)
  410: {
  411: 	REG_UART_RX_PTR_R = REG_UART_RX_PTR_W;
  412: 	//REG_UART_TX_PTR_W = REG_UART_TX_PTR_R;
000597 908116            MOV     DPTR,#08116H
00059A E0                MOVX    A,@DPTR
00059B FF                MOV     R7,A
00059C A3                INC     DPTR
00059D E0                MOVX    A,@DPTR
00059E 908058            MOV     DPTR,#08058H
0005A1 CF                XCH     A,R7
0005A2 F0                MOVX    @DPTR,A
0005A3 A3                INC     DPTR
0005A4 EF                MOV     A,R7
0005A5 F0                MOVX    @DPTR,A
  413: }
0005A6 22                RET     
----- FUNCTION YC_UARTClearBuffer (END) -------


----- FUNCTION SysStatusProcess (BEGIN) -----
 FILE: 'system.c'
  163: void SysStatusProcess(void) 
  164: {
  165: 	if( sys_state == SYS_ST_IDLE) {	//can enter LPM
  166: 		if(bleConnStatus ==BLE_STATUS_DISCONN)
0005A7 904E6E            MOV     DPTR,#sys_state
0005AA E0                MOVX    A,@DPTR
0005AB B40121            CJNE    A,#01H,?C0028?SYSTEM
  167: 		{
0005AE 904C5B            MOV     DPTR,#bleConnStatus
0005B1 E0                MOVX    A,@DPTR
0005B2 7032              JNZ     ?C0033?SYSTEM
  168: 			YC_UARTWaitSendData();
  169: 			YC_UARTClearBuffer();
0005B4 D160              ACALL   YC_UARTWaitSendData
  170: 		    	LPM_ENABLE();
0005B6 B197              ACALL   YC_UARTClearBuffer
  171: 
0005B8 9049FE            MOV     DPTR,#049FEH
0005BB 7401              MOV     A,#01H
0005BD F0                MOVX    @DPTR,A
  172: 			btCmdBuf.len = 0x01;
0005BE 904C63            MOV     DPTR,#btCmdBuf
0005C1 F0                MOVX    @DPTR,A
  173: 			btCmdBuf.DATA[0] = CS_CMD_SLEEP_REQ;
0005C2 A3                INC     DPTR
0005C3 7420              MOV     A,#020H
0005C5 F0                MOVX    @DPTR,A
  174: 			BT_CmdFifoIn(&btCmdBuf);
0005C6 7B01              MOV     R3,#01H
0005C8 7A4C              MOV     R2,#HIGH btCmdBuf
0005CA 7963              MOV     R1,#LOW btCmdBuf
0005CC 0227F1            LJMP    _BT_CmdFifoIn
  175: 
  176: 				
  177: 		}
  178: 	}
0005CF         ?C0028?SYSTEM:
  179: 	else if( sys_state == SYS_ST_SLEEP) {//can enter LPM
0005CF 904E6E            MOV     DPTR,#sys_state
0005D2 E0                MOVX    A,@DPTR
0005D3 B4030B            CJNE    A,#03H,?C0031?SYSTEM
  180: 		YC_UARTWaitSendData();
0005D6 D160              ACALL   YC_UARTWaitSendData
  181: 		YC_UARTClearBuffer();
0005D8 B197              ACALL   YC_UARTClearBuffer
  182: 	    	LPM_ENABLE();
0005DA 9049FE            MOV     DPTR,#049FEH
0005DD 7401              MOV     A,#01H
0005DF F0                MOVX    @DPTR,A
  183: 	} 
0005E0 22                RET     
0005E1         ?C0031?SYSTEM:
  184: 	else {
  185: 		LPM_DISABLE();
0005E1 9049FE            MOV     DPTR,#049FEH
0005E4 E4                CLR     A
0005E5 F0                MOVX    @DPTR,A
  186: 	}
  187: }
0005E6         ?C0033?SYSTEM:
0005E6 22                RET     
----- FUNCTION SysStatusProcess (END) -------


----- FUNCTION CS_1186Com_ReadTime_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  203: void CS_1186Com_ReadTime_Proc(void)
  204: {
  205: 	//static u8_t xdata temp=0;
  206: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadTime)
0005E7 904D50            MOV     DPTR,#R_Weight_Com_Coo
0005EA E0                MOVX    A,@DPTR
0005EB B4821E            CJNE    A,#082H,?C0033?CS_COMMTO1186
  207: 		{
  208: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadTime,0);
0005EE 7B00              MOV     R3,#00H
0005F0 7A00              MOV     R2,#00H
0005F2 7900              MOV     R1,#00H
0005F4 7F82              MOV     R7,#082H
0005F6 123924            LCALL   _CS_CommTo1186_SendCmd
  209: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadTime;
0005F9 904D51            MOV     DPTR,#R_Weight_Com_Coo+01H
0005FC 7482              MOV     A,#082H
0005FE F0                MOVX    @DPTR,A
  210: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadTimeStandby;
0005FF 904D50            MOV     DPTR,#R_Weight_Com_Coo
000602 7403              MOV     A,#03H
000604 F0                MOVX    @DPTR,A
  211: 		uartTimeoutCnt=0;
000605 E4                CLR     A
000606 904D64            MOV     DPTR,#uartTimeoutCnt
000609 F0                MOVX    @DPTR,A
  212: 		YC_UARTClearBuffer();
00060A B197              ACALL   YC_UARTClearBuffer
  213: 		}
00060C         ?C0033?CS_COMMTO1186:
  214: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadTimeStandby)
00060C 904D50            MOV     DPTR,#R_Weight_Com_Coo
00060F E0                MOVX    A,@DPTR
000610 6403              XRL     A,#03H
000612 704B              JNZ     ?C0038?CS_COMMTO1186
  215: 		{
  216: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 9)==9)
000614 7B01              MOV     R3,#01H
000616 7A4D              MOV     R2,#HIGH uartRcvBuf
000618 7940              MOV     R1,#LOW uartRcvBuf
00061A 7D09              MOV     R5,#09H
00061C FC                MOV     R4,A
00061D F1E1              ACALL   _YC_UARTReciveDataExpected
00061F EF                MOV     A,R7
000620 6409              XRL     A,#09H
000622 4E                ORL     A,R6
000623 703A              JNZ     ?C0038?CS_COMMTO1186
  217: 			{
  218: 			if(uartRcvBuf[3] == CS_CommTo1186_ReadTime)    
000625 904D43            MOV     DPTR,#uartRcvBuf+03H
000628 E0                MOVX    A,@DPTR
000629 B4822D            CJNE    A,#082H,?C0036?CS_COMMTO1186
  219: 				{			
  220: 				//读到时间的操作
  221: 				R_1186_RTC[3] = uartRcvBuf[4];
00062C A3                INC     DPTR
00062D E0                MOVX    A,@DPTR
00062E 904CD6            MOV     DPTR,#R_1186_RTC+03H
000631 F0                MOVX    @DPTR,A
  222: 				R_1186_RTC[2] = uartRcvBuf[5];
000632 904D45            MOV     DPTR,#uartRcvBuf+05H
000635 E0                MOVX    A,@DPTR
000636 904CD5            MOV     DPTR,#R_1186_RTC+02H
000639 F0                MOVX    @DPTR,A
  223: 				R_1186_RTC[1] = uartRcvBuf[6];
00063A 904D46            MOV     DPTR,#uartRcvBuf+06H
00063D E0                MOVX    A,@DPTR
00063E 904CD4            MOV     DPTR,#R_1186_RTC+01H
000641 F0                MOVX    @DPTR,A
  224: 				R_1186_RTC[0] = uartRcvBuf[7];
000642 904D47            MOV     DPTR,#uartRcvBuf+07H
000645 E0                MOVX    A,@DPTR
000646 904CD3            MOV     DPTR,#R_1186_RTC
000649 F0                MOVX    @DPTR,A
  225: 
  226: 			
  227: 				/*
  228: 				R_Debug_temp=R_1186RTC.R_32;
  229: 				CS_ScaleDisplay_Debug();
  230: 				while(temp==2);
  231: 				temp=2;
  232: 				*/
  233: 				/*
  234: 				R_1186RTC.R_BYTE[3]=  uartRcvBuf[4];
  235: 				R_1186RTC.R_BYTE[2] = uartRcvBuf[5];
  236: 				R_1186RTC.R_BYTE[1] = uartRcvBuf[6];
  237: 				R_1186RTC.R_BYTE[0] = uartRcvBuf[7];
  238: 				/*
  239: 				R_1186_RTC = uartRcvBuf[4];
  240: 				R_1186_RTC = R_1186_RTC<<8;
  241: 				R_1186_RTC |= uartRcvBuf[5];
  242: 				R_1186_RTC = R_1186_RTC<<8;
  243: 				R_1186_RTC |= uartRcvBuf[6];
  244: 				R_1186_RTC = R_1186_RTC<<8;
  245: 				R_1186_RTC |= uartRcvBuf[7];
  246: 				*/
  247: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
00064A E4                CLR     A
00064B 904D50            MOV     DPTR,#R_Weight_Com_Coo
00064E F0                MOVX    @DPTR,A
  248: 				R_Weight_Com_Coo.sucess=true;
00064F 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
000652 04                INC     A
000653 F0                MOVX    @DPTR,A
  249: 				B_Weight_AdOk = true;
000654 904CD7            MOV     DPTR,#B_Weight_AdOk
000657 F0                MOVX    @DPTR,A
  250: 						
  251: 				}
000658 22                RET     
000659         ?C0036?CS_COMMTO1186:
  252: 			else
  253: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
000659 904D64            MOV     DPTR,#uartTimeoutCnt
00065C 7415              MOV     A,#015H
00065E F0                MOVX    @DPTR,A
  254: 			}	
  255: 		}
  256: }
00065F         ?C0038?CS_COMMTO1186:
00065F 22                RET     
----- FUNCTION CS_1186Com_ReadTime_Proc (END) -------


----- FUNCTION YC_UARTWaitSendData (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  373: void YC_UARTWaitSendData(void)
  374: {
  375: 	while(ESWAP(REG_UART_TX_ITEMS));
000660         ?C0009?YC_PERIPHERAL:
  376: }
000660 90810E            MOV     DPTR,#0810EH
000663 A3                INC     DPTR
000664 E0                MOVX    A,@DPTR
000665 FC                MOV     R4,A
000666 90810E            MOV     DPTR,#0810EH
000669 E0                MOVX    A,@DPTR
00066A FF                MOV     R7,A
00066B EC                MOV     A,R4
00066C FE                MOV     R6,A
00066D EF                MOV     A,R7
00066E 4E                ORL     A,R6
00066F 70EF              JNZ     ?C0009?YC_PERIPHERAL
  377: 
000671 22                RET     
----- FUNCTION YC_UARTWaitSendData (END) -------


----- FUNCTION CS_1186Com_SetSleepMode_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  260: void CS_1186Com_SetSleepMode_Proc(void)
  261: {
  262: 	u16_t	R_AD_Zero;
  263: 	
  264: 	R_AD_Zero = CS_Scale_ZeroProc(GetRunningZero,0);
000672 E4                CLR     A
000673 FD                MOV     R5,A
000674 FC                MOV     R4,A
000675 7F01              MOV     R7,#01H
000677 1233BE            LCALL   _CS_Scale_ZeroProc
;---- Variable 'R_AD_Zero' assigned to Register 'R4/R5' ----
00067A AD07              MOV     R5,AR7
00067C AC06              MOV     R4,AR6
  265: 		
  266: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetSleepMode)
00067E 904D50            MOV     DPTR,#R_Weight_Com_Coo
000681 E0                MOVX    A,@DPTR
000682 64A0              XRL     A,#0A0H
000684 704E              JNZ     ?C0039?CS_COMMTO1186
  267: 		{
  268: 		
  269: 		uartTxBuf[0]= 0x91;
000686 904D54            MOV     DPTR,#uartTxBuf
000689 7491              MOV     A,#091H
00068B F0                MOVX    @DPTR,A
  270: 		uartTxBuf[1]= R_AD_Zero<<6;
00068C ED                MOV     A,R5
00068D 7806              MOV     R0,#06H
00068F         ?C0078?CS_COMMTO1186:
00068F C3                CLR     C
000690 33                RLC     A
000691 CE                XCH     A,R6
000692 33                RLC     A
000693 CE                XCH     A,R6
000694 D8F9              DJNZ    R0,?C0078?CS_COMMTO1186
000696 904D55            MOV     DPTR,#uartTxBuf+01H
000699 F0                MOVX    @DPTR,A
  271: 		uartTxBuf[2]= R_AD_Zero>>2;
00069A ED                MOV     A,R5
00069B AE04              MOV     R6,AR4
00069D 7802              MOV     R0,#02H
00069F         ?C0079?CS_COMMTO1186:
00069F CE                XCH     A,R6
0006A0 C3                CLR     C
0006A1 13                RRC     A
0006A2 CE                XCH     A,R6
0006A3 13                RRC     A
0006A4 D8F9              DJNZ    R0,?C0079?CS_COMMTO1186
0006A6 904D56            MOV     DPTR,#uartTxBuf+02H
0006A9 F0                MOVX    @DPTR,A
  272: 		uartTxBuf[3]= R_AD_Zero>>10;
0006AA EC                MOV     A,R4
0006AB 13                RRC     A
0006AC 13                RRC     A
0006AD 543F              ANL     A,#03FH
0006AF A3                INC     DPTR
0006B0 F0                MOVX    @DPTR,A
  273: 		uartTxBuf[3]|= 0x80;
0006B1 4480              ORL     A,#080H
0006B3 F0                MOVX    @DPTR,A
  274: 		CS_CommTo1186_SendCmd(CS_CommTo1186_SetSleepMode,uartTxBuf);
0006B4 7B01              MOV     R3,#01H
0006B6 7A4D              MOV     R2,#HIGH uartTxBuf
0006B8 7954              MOV     R1,#LOW uartTxBuf
0006BA 7FA0              MOV     R7,#0A0H
0006BC 123924            LCALL   _CS_CommTo1186_SendCmd
  275: 		
  276: 		YC_UARTWaitSendData();
0006BF D160              ACALL   YC_UARTWaitSendData
  277: 		
  278: 		R_Weight_Com_Coo.pre = CS_CommTo1186_SetSleepMode;
0006C1 904D51            MOV     DPTR,#R_Weight_Com_Coo+01H
0006C4 74A0              MOV     A,#0A0H
0006C6 F0                MOVX    @DPTR,A
  279: 		R_Weight_Com_Coo.now = CS_CommTo1186_SetSleepModeStandby;
0006C7 904D50            MOV     DPTR,#R_Weight_Com_Coo
0006CA 7407              MOV     A,#07H
0006CC F0                MOVX    @DPTR,A
  280: 		uartTimeoutCnt=0;
0006CD E4                CLR     A
0006CE 904D64            MOV     DPTR,#uartTimeoutCnt
0006D1 F0                MOVX    @DPTR,A
  281: 		YC_UARTClearBuffer();
0006D2 B197              ACALL   YC_UARTClearBuffer
  282: 		}
0006D4         ?C0039?CS_COMMTO1186:
  283: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetSleepModeStandby)
0006D4 904D50            MOV     DPTR,#R_Weight_Com_Coo
0006D7 E0                MOVX    A,@DPTR
0006D8 B4072A            CJNE    A,#07H,?C0044?CS_COMMTO1186
  284: 		{
  285: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 5)==5)
0006DB 7B01              MOV     R3,#01H
0006DD 7A4D              MOV     R2,#HIGH uartRcvBuf
0006DF 7940              MOV     R1,#LOW uartRcvBuf
0006E1 7D05              MOV     R5,#05H
0006E3 7C00              MOV     R4,#00H
0006E5 F1E1              ACALL   _YC_UARTReciveDataExpected
0006E7 EF                MOV     A,R7
0006E8 6405              XRL     A,#05H
0006EA 4E                ORL     A,R6
0006EB 7018              JNZ     ?C0044?CS_COMMTO1186
  286: 			{
  287: 			if(uartRcvBuf[3] == CS_CommTo1186_SetSleepMode)    
0006ED 904D43            MOV     DPTR,#uartRcvBuf+03H
0006F0 E0                MOVX    A,@DPTR
0006F1 B4A00B            CJNE    A,#0A0H,?C0042?CS_COMMTO1186
  288: 				{			
  289: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
0006F4 E4                CLR     A
0006F5 904D50            MOV     DPTR,#R_Weight_Com_Coo
0006F8 F0                MOVX    @DPTR,A
  290: 				R_Weight_Com_Coo.sucess=true;	
0006F9 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
0006FC 04                INC     A
0006FD F0                MOVX    @DPTR,A
  291: 				}
0006FE 22                RET     
0006FF         ?C0042?CS_COMMTO1186:
  292: 			else
  293: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
0006FF 904D64            MOV     DPTR,#uartTimeoutCnt
000702 7415              MOV     A,#015H
000704 F0                MOVX    @DPTR,A
  294: 			}	
  295: 		}
  296: }
000705         ?C0044?CS_COMMTO1186:
000705 22                RET     
----- FUNCTION CS_1186Com_SetSleepMode_Proc (END) -------


----- FUNCTION CS_1186Com_Reset_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  377: void CS_1186Com_Reset_Proc(void)
  378: {
  379: 
  380: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_Reset)
000706 904D50            MOV     DPTR,#R_Weight_Com_Coo
000709 E0                MOVX    A,@DPTR
00070A B4C512            CJNE    A,#0C5H,?C0058?CS_COMMTO1186
  381: 		{
  382: 		CS_CommTo1186_SendCmd(CS_CommTo1186_Reset,0);
00070D 7B00              MOV     R3,#00H
00070F 7A00              MOV     R2,#00H
000711 7900              MOV     R1,#00H
000713 7FC5              MOV     R7,#0C5H
000715 123924            LCALL   _CS_CommTo1186_SendCmd
  383: 		YC_UARTClearBuffer();
000718 B197              ACALL   YC_UARTClearBuffer
  384: 		R_Weight_Com_Coo.now=CS_CommTo1186_Null;
00071A E4                CLR     A
00071B 904D50            MOV     DPTR,#R_Weight_Com_Coo
00071E F0                MOVX    @DPTR,A
  385: 		
  386: 		}
  387: 													
  388: }
00071F         ?C0058?CS_COMMTO1186:
00071F 22                RET     
----- FUNCTION CS_1186Com_Reset_Proc (END) -------


----- FUNCTION CS_1186Com_SetOpenWeight_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  301: void CS_1186Com_SetOpenWeight_Proc(void)
  302: {
  303: 	u16_t	R_Open_Weight;
  304: 	R_Open_Weight = CS_Scale_CaliProc(CaliProcGetOpenWeight);	//获取开机重量值
000720 7F07              MOV     R7,#07H
000722 121135            LCALL   _CS_Scale_CaliProc
;---- Variable 'R_Open_Weight' assigned to Register 'R4/R5' ----
000725 AD07              MOV     R5,AR7
000727 AC06              MOV     R4,AR6
  305: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetOpenWeight)
000729 904D50            MOV     DPTR,#R_Weight_Com_Coo
00072C E0                MOVX    A,@DPTR
00072D 64A1              XRL     A,#0A1H
00072F 704A              JNZ     ?C0045?CS_COMMTO1186
  306: 		{
  307: 		uartTxBuf[0]= 0x20;
000731 904D54            MOV     DPTR,#uartTxBuf
000734 7420              MOV     A,#020H
000736 F0                MOVX    @DPTR,A
  308: 		uartTxBuf[1]= R_Open_Weight<<6;
000737 ED                MOV     A,R5
000738 7806              MOV     R0,#06H
00073A         ?C0080?CS_COMMTO1186:
00073A C3                CLR     C
00073B 33                RLC     A
00073C CE                XCH     A,R6
00073D 33                RLC     A
00073E CE                XCH     A,R6
00073F D8F9              DJNZ    R0,?C0080?CS_COMMTO1186
000741 FB                MOV     R3,A
000742 904D55            MOV     DPTR,#uartTxBuf+01H
000745 F0                MOVX    @DPTR,A
  309: 		uartTxBuf[2]= R_Open_Weight>>2;
000746 ED                MOV     A,R5
000747 AE04              MOV     R6,AR4
000749 7802              MOV     R0,#02H
00074B         ?C0081?CS_COMMTO1186:
00074B CE                XCH     A,R6
00074C C3                CLR     C
00074D 13                RRC     A
00074E CE                XCH     A,R6
00074F 13                RRC     A
000750 D8F9              DJNZ    R0,?C0081?CS_COMMTO1186
000752 FF                MOV     R7,A
000753 904D56            MOV     DPTR,#uartTxBuf+02H
000756 F0                MOVX    @DPTR,A
  310: 		uartTxBuf[3]= R_Open_Weight<<6;
000757 A3                INC     DPTR
000758 EB                MOV     A,R3
000759 F0                MOVX    @DPTR,A
  311: 		uartTxBuf[4]= R_Open_Weight>>2;	
00075A A3                INC     DPTR
00075B EF                MOV     A,R7
00075C F0                MOVX    @DPTR,A
  312: 		CS_CommTo1186_SendCmd(CS_CommTo1186_SetOpenWeight,uartTxBuf);
00075D 7B01              MOV     R3,#01H
00075F 7A4D              MOV     R2,#HIGH uartTxBuf
000761 7954              MOV     R1,#LOW uartTxBuf
000763 7FA1              MOV     R7,#0A1H
000765 123924            LCALL   _CS_CommTo1186_SendCmd
  313: 		R_Weight_Com_Coo.pre = CS_CommTo1186_SetOpenWeight;
000768 904D51            MOV     DPTR,#R_Weight_Com_Coo+01H
00076B 74A1              MOV     A,#0A1H
00076D F0                MOVX    @DPTR,A
  314: 		R_Weight_Com_Coo.now = CS_CommTo1186_SetOpenWeightStandby;
00076E 904D50            MOV     DPTR,#R_Weight_Com_Coo
000771 7408              MOV     A,#08H
000773 F0                MOVX    @DPTR,A
  315: 		uartTimeoutCnt=0;
000774 E4                CLR     A
000775 904D64            MOV     DPTR,#uartTimeoutCnt
000778 F0                MOVX    @DPTR,A
  316: 		YC_UARTClearBuffer();
000779 B197              ACALL   YC_UARTClearBuffer
  317: 		}
00077B         ?C0045?CS_COMMTO1186:
  318: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetOpenWeightStandby)
00077B 904D50            MOV     DPTR,#R_Weight_Com_Coo
00077E E0                MOVX    A,@DPTR
00077F B4082A            CJNE    A,#08H,?C0050?CS_COMMTO1186
  319: 		{
  320: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 5)==5)
000782 7B01              MOV     R3,#01H
000784 7A4D              MOV     R2,#HIGH uartRcvBuf
000786 7940              MOV     R1,#LOW uartRcvBuf
000788 7D05              MOV     R5,#05H
00078A 7C00              MOV     R4,#00H
00078C F1E1              ACALL   _YC_UARTReciveDataExpected
00078E EF                MOV     A,R7
00078F 6405              XRL     A,#05H
000791 4E                ORL     A,R6
000792 7018              JNZ     ?C0050?CS_COMMTO1186
  321: 			{
  322: 			if(uartRcvBuf[3] == CS_CommTo1186_SetOpenWeight)    
000794 904D43            MOV     DPTR,#uartRcvBuf+03H
000797 E0                MOVX    A,@DPTR
000798 B4A10B            CJNE    A,#0A1H,?C0048?CS_COMMTO1186
  323: 				{			
  324: 				//读到时间的操作
  325: 				//R_Debug_temp=uartRcvBuf[5];
  326: 				
  327: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
00079B E4                CLR     A
00079C 904D50            MOV     DPTR,#R_Weight_Com_Coo
00079F F0                MOVX    @DPTR,A
  328: 				R_Weight_Com_Coo.sucess=true;
0007A0 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
0007A3 04                INC     A
0007A4 F0                MOVX    @DPTR,A
  329: 				
  330: 						
  331: 				}
0007A5 22                RET     
0007A6         ?C0048?CS_COMMTO1186:
  332: 			else
  333: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
0007A6 904D64            MOV     DPTR,#uartTimeoutCnt
0007A9 7415              MOV     A,#015H
0007AB F0                MOVX    @DPTR,A
  334: 			}	
  335: 		}
  336: }
0007AC         ?C0050?CS_COMMTO1186:
0007AC 22                RET     
----- FUNCTION CS_1186Com_SetOpenWeight_Proc (END) -------


----- FUNCTION lxOptProcess (BEGIN) -----
 FILE: 'lxProtocol.c'
  134: void lxOptProcess(void)
  135: {
  136: 	//u8_t i;
  137: 
  138: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
0007AD 904C64            MOV     DPTR,#btCmdBuf+01H
0007B0 7430              MOV     A,#030H
0007B2 F0                MOVX    @DPTR,A
  139: 	btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
0007B3 A3                INC     DPTR
0007B4 741C              MOV     A,#01CH
0007B6 F0                MOVX    @DPTR,A
  140: 	btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
0007B7 E4                CLR     A
0007B8 A3                INC     DPTR
0007B9 F0                MOVX    @DPTR,A
  141: 	switch(lxOptStatus)
0007BA 904C5C            MOV     DPTR,#lxOptStatus
0007BD E0                MOVX    A,@DPTR
0007BE 24CA              ADD     A,#0CAH
0007C0 6015              JZ      ?C0030?LXPROTOCOL
0007C2 04                INC     A
0007C3 701B              JNZ     ?C0031?LXPROTOCOL
  142: 	{
  143: #if 0
  144: 		case OPT_REGISTER_REQ:
  145: 			if(*(LX_RECV_BUF + 8) == DEVICE_ID_UNREGISTERED ||
  146: 				*(LX_RECV_BUF + 8) == DEVICE_ID_REGISTERED)
  147: 			{
  148: 				//save deviceID
  149: 				dmemcpy(deviceInfo.deviceID, LX_RECV_BUF + 2, DEVICE_ID_LENGTH);
  150: 				//register success
  151: 				deviceInfo.registerFlag = DEVICE_REGISTERED;
  152: 				//update adv flag
  153: 				*(mem_le_adv_data + 13) = DEVICE_REGISTERED;
  154: 			}
  155: 			else// if(*(LX_RECV_BUF + 8) == DEVICE_ID_ILLEGALED)
  156: 			{
  157: 				deviceInfo.registerFlag = DEVICE_UNREGISTERED;
  158: 			}
  159: 			
  160: 			btCmdBuf.len = 0x08;
  161: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
  162: 			btCmdBuf.DATA[4] = REGISTER_RSP_DATA_LEN;
  163: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_REGISTER_RSP);
  164: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_REGISTER_RSP);
  165: 			btCmdBuf.DATA[7] = deviceInfo.registerFlag;
  166: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), REGISTER_RSP_DATA_LEN);
  167: 			BT_CmdFifoIn(&btCmdBuf);
  168: 			lxOptStatus = OPT_REGISTER_RSP_WAIT_ACK;
  169: 			break;
  170: 			
  171: 		case OPT_BIND_REQ:
  172: 			//bind success
  173: 			if(*(LX_RECV_BUF + 2) >= 1 && *(LX_RECV_BUF + 2) <= 4 && *(LX_RECV_BUF + 3) == 1)
  174: 			{
  175: 				//save user number
  176: 				deviceInfo.userNum = *(LX_RECV_BUF + 2);
  177: 				//lcd display result
  178: 				deviceInfo.bindFlag = BIND_SUCCESS;
  179: 			}
  180: 			else
  181: 			{
  182: 				deviceInfo.bindFlag =  BIND_FAIL;
  183: 			}
  184: 			
  185: 			btCmdBuf.len = 0x08;
  186: 			btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
  187: 			btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
  188: 			btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
  189: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
  190: 			btCmdBuf.DATA[4] = BIND_RSP_DATA_LEN;
  191: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_BIND_RSP);
  192: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_BIND_RSP);
  193: 			btCmdBuf.DATA[7] = deviceInfo.bindFlag;
  194: 
  195: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), BIND_RSP_DATA_LEN);
  196: 			BT_CmdFifoIn(&btCmdBuf);
  197: 			lxOptStatus = OPT_BIND_RSP_WAIT_ACK;
  198: 			break;
  199: 		
  200: 		case OPT_LOGIN_REQ:
  201: 			btCmdBuf.len = 0x0f;
  202: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
  203: 			btCmdBuf.DATA[4] = LOGIN_REQ_DATA_LEN;
  204: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_LOGIN_REQ);
  205: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_LOGIN_REQ);
  206: 			//Verification code:6bytes deviceID XOR MAC
  207: 			for(i=0;i<6;i++)
  208: 			{
  209: 				btCmdBuf.DATA[7+i] = deviceInfo.deviceID[i] ^ (*(mem_le_mac+i));
  210: 			}
  211: 			
  212: 			//user number:1bytes
  213: 			btCmdBuf.DATA[13] = deviceInfo.userNum;
  214: 			//battery:1bytes
  215: 			if(CS_Scale_JudgeLowBat(GetIfLowBat) == true)
  216: 				btCmdBuf.DATA[14] = 10;
  217: 			else
  218: 				btCmdBuf.DATA[14] = 100;
  219: 
  220: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), LOGIN_REQ_DATA_LEN);
  221: 			BT_CmdFifoIn(&btCmdBuf);
  222: 			YC_Delay10ms(10);
  223: 			lxOptStatus = OPT_LOGIN_REQ_WAIT_ACK;
  224: 			break;
  225: 		case OPT_LOGIN_RSP:
  226: 			*(mem_register_buf + 2) = *(LX_RECV_BUF + 2);
  227: 			if(*(mem_register_buf + 2) == LOGIN_SUCCESS)
  228: 			{
  229: 				//Verification code:6bytes deviceID XOR MAC
  230: 				for(i=0;i<6;i++)
  231: 				{
  232: 					if(*(LX_RECV_BUF + 3+i) != *(mem_register_buf + 4 + i) ^ (*(mem_le_mac+i)))
  233: 					{
  234: 						//disconnected
  235: 						btCmdBuf.len = 0x01;
  236: 						//btCmdBuf.DATA[0] = CS_CMD_LE_DISC_REQ;
  237: 						//BT_CmdFifoIn(&btCmdBuf);
  238: 						//return;
  239: 					}
  240: 				}
  241: 				//login success:sync time
  242: 				lxOptStatus = OPT_INIT_REQ;
  243: 			}
  244: 			else
  245: 			{
  246: 				lxOptStatus = OPT_IDLE;
  247: 				//disconnected
  248: 				btCmdBuf.len = 0x01;
  249: 				btCmdBuf.DATA[0] = CS_CMD_LE_DISC_REQ;
  250: 				BT_CmdFifoIn(&btCmdBuf);
  251: 				return;
  252: 			}
  253: 			break;
  254: 			
  255: 		case OPT_INIT_REQ:
  256: 			btCmdBuf.len = 0x08;
  257: 			btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
  258: 			btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
  259: 			btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
  260: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
  261: 			btCmdBuf.DATA[4] = INIT_REQ_DATA_LEN;
  262: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_INIT_REQ);
  263: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_INIT_REQ);
  264: 			btCmdBuf.DATA[7] = 0x08;
  265: 			
  266: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), INIT_REQ_DATA_LEN);
  267: 			BT_CmdFifoIn(&btCmdBuf);
  268: 			lxOptStatus = OPT_INIT_REQ_WAIT_ACK;
  269: 			break;
  270: 		case OPT_INIT_RSP:
  271: 			if(*(LX_RECV_BUF + 2) == 0x08)
  272: 			{
  273: 				//save UTC time
  274: 				dmemcpy((pxbyte)&UTCTime, LX_RECV_BUF + 3, 4);
  275: 			}
  276: 			lxOptStatus = OPT_IDLE;
  277: 			break;
  278: 			
  279: 		case OPT_TIME_SETTING_REQ:
  280: 			if(*(LX_RECV_BUF+2) &0x01 == 1)
  281: 			{
  282: 				dmemcpy((pxbyte)&UTCTime, LX_RECV_BUF + 3, 4);
  283: 			}
  284: 			/*
  285: 			if(*(LX_RECV_BUF+2) &0x02 == 1)
  286: 			{
  287: 
  288: 			}
  289: 			*/
  290: 			lxSettingDeviceRespone(CMD_TIME_SETTING_REQ, DEVICE_RSP_SUCCESS);
  291: 			lxOptStatus = OPT_TIME_SETTING_RSP_WAIT_ACK;
  292: 			break;
  293: 		
  294: 		case OPT_UNIT_SETTING_REQ:
  295: 			//save
  296: 			if(*(LX_RECV_BUF + 2) <= 3)
  297: 			{
  298: 				R_Selet_Unit = *(LX_RECV_BUF + 2);
  299: 				lxSettingDeviceRespone(CMD_UNIT_SETTING_REQ, DEVICE_RSP_SUCCESS);
  300: 			}
  301: 			else
  302: 			{
  303: 				lxSettingDeviceRespone(CMD_UNIT_SETTING_REQ, DEVICE_RSP_FAIL);
  304: 			}
  305: 			lxOptStatus = OPT_UNIT_SETTING_RSP_WAIT_ACK;
  306: 			break;
  307: 
  308: 		case OPT_DATA_DEL_SETTING_REQ:
  309: 			if(*(LX_RECV_BUF + 3)&0x01 == 1)
  310: 			{
  311: 				delUserData();
  312: 			}
  313: 			if(*(LX_RECV_BUF + 3)&0x04 == 1)
  314: 			{
  315: 				UTCTime = 0;
  316: 				R_Selet_Unit = CS_ScaleDisplay_L_kg;
  317: 			}
  318: 			if(*(LX_RECV_BUF + 3)&0x08 == 1)
  319: 			{
  320: 				QueueInit();
  321: 			}
  322: 			
  323: 			lxSettingDeviceRespone(CMD_DATA_CLEAR_SETTING_REQ, DEVICE_RSP_SUCCESS);
  324: 			lxOptStatus = OPT_DATA_DEL_SETTING_RSP_WAIT_ACK;
  325: 			break;
  326: #endif
  327: 		case OPT_SYNC_DATA_REQ:
0007C5         ?C0027?LXPROTOCOL:
  328: 			//forbidden
  329: 			if(*(LX_RECV_BUF + 3) == 0)
0007C5 9048A3            MOV     DPTR,#048A3H
0007C8 E0                MOVX    A,@DPTR
0007C9 7005              JNZ     ?C0028?LXPROTOCOL
  330: 			{
  331: 				lxOptStatus = OPT_IDLE;
0007CB 904C5C            MOV     DPTR,#lxOptStatus
0007CE F0                MOVX    @DPTR,A
  332: 			}
0007CF 22                RET     
0007D0         ?C0028?LXPROTOCOL:
  333: 			else
  334: 			{
  335: 				lxOptStatus = OPT_SYNC_DATA_RSP;
0007D0 904C5C            MOV     DPTR,#lxOptStatus
0007D3 7436              MOV     A,#036H
0007D5 F0                MOVX    @DPTR,A
  336: 			}
  337: 			break;
0007D6 22                RET     
  338: 		case OPT_SYNC_DATA_RSP:
0007D7         ?C0030?LXPROTOCOL:
  339: 			//send measuredata
  340: 			sendHistoryData();
0007D7 1229B8            LCALL   sendHistoryData
  341: 			lxOptStatus = OPT_SYNC_DATA_RSP_WAIT_ACK;
0007DA 904C5C            MOV     DPTR,#lxOptStatus
0007DD 7437              MOV     A,#037H
0007DF F0                MOVX    @DPTR,A
  342: 			break;
  343: 		/*
  344: 		case LX_OPT_STATUS_RESEND:
  345: 			BT_CmdFifoIn(&btCmdBuf);
  346: 			lxOptStatus = OPT_IDLE;
  347: 			break;
  348: 			*/
  349: 	}
  350: }
0007E0         ?C0031?LXPROTOCOL:
0007E0 22                RET     
----- FUNCTION lxOptProcess (END) -------


----- FUNCTION _YC_UARTReciveDataExpected (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  378: u16_t YC_UARTReciveDataExpected(u8_t* pbuff, u16_t len)
  379: {
0007E1 904DD2            MOV     DPTR,#pbuff
0007E4 EB                MOV     A,R3
0007E5 F0                MOVX    @DPTR,A
0007E6 A3                INC     DPTR
0007E7 EA                MOV     A,R2
0007E8 F0                MOVX    @DPTR,A
0007E9 A3                INC     DPTR
0007EA E9                MOV     A,R1
0007EB F0                MOVX    @DPTR,A
0007EC A3                INC     DPTR
0007ED EC                MOV     A,R4
0007EE F0                MOVX    @DPTR,A
0007EF A3                INC     DPTR
0007F0 ED                MOV     A,R5
0007F1 F0                MOVX    @DPTR,A
  380: 	int i = 0;
  381: 	u8_t xdata* rrptr = (u8_t *)ESWAP(REG_UART_RX_PTR_R);
0007F2 E4                CLR     A
0007F3 A3                INC     DPTR
0007F4 F0                MOVX    @DPTR,A
0007F5 A3                INC     DPTR
0007F6 F0                MOVX    @DPTR,A
  382: 
0007F7 908058            MOV     DPTR,#08058H
0007FA A3                INC     DPTR
0007FB E0                MOVX    A,@DPTR
0007FC FC                MOV     R4,A
0007FD 908058            MOV     DPTR,#08058H
000800 E0                MOVX    A,@DPTR
000801 FF                MOV     R7,A
000802 EC                MOV     A,R4
000803 FE                MOV     R6,A
000804 EF                MOV     A,R7
000805 904DD9            MOV     DPTR,#rrptr
000808 EE                MOV     A,R6
000809 F0                MOVX    @DPTR,A
00080A A3                INC     DPTR
00080B EF                MOV     A,R7
00080C F0                MOVX    @DPTR,A
  383: 	if(ESWAP(REG_UART_RX_ITEMS)<len)
00080D 908112            MOV     DPTR,#08112H
000810 A3                INC     DPTR
000811 E0                MOVX    A,@DPTR
000812 FC                MOV     R4,A
000813 908112            MOV     DPTR,#08112H
000816 E0                MOVX    A,@DPTR
000817 FF                MOV     R7,A
000818 EC                MOV     A,R4
000819 FE                MOV     R6,A
00081A EF                MOV     A,R7
00081B D3                SETB    C
00081C 904DD6            MOV     DPTR,#len+01H
00081F E0                MOVX    A,@DPTR
000820 9F                SUBB    A,R7
000821 904DD5            MOV     DPTR,#len
000824 E0                MOVX    A,@DPTR
000825 9E                SUBB    A,R6
000826 4004              JC      ?C0012?YC_PERIPHERAL
  384: 	{
  385: 		return false;
000828 E4                CLR     A
000829 FE                MOV     R6,A
00082A FF                MOV     R7,A
00082B 22                RET     
  386: 	}
00082C         ?C0012?YC_PERIPHERAL:
  387: 
  388: 	for(i=0;i<len;i++)
00082C E4                CLR     A
00082D 904DD7            MOV     DPTR,#i
000830 F0                MOVX    @DPTR,A
000831 A3                INC     DPTR
000832 F0                MOVX    @DPTR,A
000833         ?C0014?YC_PERIPHERAL:
000833 904DD5            MOV     DPTR,#len
000836 E0                MOVX    A,@DPTR
000837 FE                MOV     R6,A
000838 A3                INC     DPTR
000839 E0                MOVX    A,@DPTR
00083A FF                MOV     R7,A
00083B C3                CLR     C
00083C 904DD8            MOV     DPTR,#i+01H
00083F E0                MOVX    A,@DPTR
000840 9F                SUBB    A,R7
000841 904DD7            MOV     DPTR,#i
000844 E0                MOVX    A,@DPTR
000845 9E                SUBB    A,R6
000846 4002              JC      $ + 4H
000848 2105              AJMP    ?C0015?YC_PERIPHERAL
  389: 	{
  390: 		memcpy(pbuff++, rrptr++, 1);
00084A 904DD9            MOV     DPTR,#rrptr
00084D E4                CLR     A
00084E 75F001            MOV     B,#01H
000851 1201C8            LCALL   ?C?ILDIX
000854 FA                MOV     R2,A
000855 A9F0              MOV     R1,B
000857 7B01              MOV     R3,#01H
000859 C003              PUSH    AR3
00085B 904DD2            MOV     DPTR,#pbuff
00085E E0                MOVX    A,@DPTR
00085F FB                MOV     R3,A
000860 A3                INC     DPTR
000861 E4                CLR     A
000862 75F001            MOV     B,#01H
000865 1201C8            LCALL   ?C?ILDIX
000868 A8F0              MOV     R0,B
00086A FC                MOV     R4,A
00086B AD03              MOV     R5,AR3
00086D D003              POP     AR3
00086F 7E00              MOV     R6,#00H
000871 7F01              MOV     R7,#01H
000873 1200D3            LCALL   ?C?COPY
  391: 
  392: 		if((short)rrptr == ESWAP(REG_UART_RX_ADDR_E) + 1)		//rrptr reach the end of buffer
000876 908056            MOV     DPTR,#08056H
000879 A3                INC     DPTR
00087A E0                MOVX    A,@DPTR
00087B FC                MOV     R4,A
00087C 908056            MOV     DPTR,#08056H
00087F E0                MOVX    A,@DPTR
000880 FF                MOV     R7,A
000881 EC                MOV     A,R4
000882 FE                MOV     R6,A
000883 EF                MOV     A,R7
000884 2401              ADD     A,#01H
000886 FF                MOV     R7,A
000887 E4                CLR     A
000888 3E                ADDC    A,R6
000889 FE                MOV     R6,A
00088A 904DD9            MOV     DPTR,#rrptr
00088D E0                MOVX    A,@DPTR
00088E FC                MOV     R4,A
00088F A3                INC     DPTR
000890 E0                MOVX    A,@DPTR
000891 B5071A            CJNE    A,AR7,?C0017?YC_PERIPHERAL
000894 EE                MOV     A,R6
000895 B50416            CJNE    A,AR4,?C0017?YC_PERIPHERAL
  393: 		{
  394: 			rrptr = (u8_t *)ESWAP(REG_UART_RX_ADDR_S);
000898 908054            MOV     DPTR,#08054H
00089B A3                INC     DPTR
00089C E0                MOVX    A,@DPTR
00089D FC                MOV     R4,A
00089E 908054            MOV     DPTR,#08054H
0008A1 E0                MOVX    A,@DPTR
0008A2 FF                MOV     R7,A
0008A3 EC                MOV     A,R4
0008A4 FE                MOV     R6,A
0008A5 EF                MOV     A,R7
0008A6 904DD9            MOV     DPTR,#rrptr
0008A9 EE                MOV     A,R6
0008AA F0                MOVX    @DPTR,A
0008AB A3                INC     DPTR
0008AC EF                MOV     A,R7
0008AD F0                MOVX    @DPTR,A
  395: 		}
0008AE         ?C0017?YC_PERIPHERAL:
  396: 
  397: 		if((short)rrptr == ESWAP(REG_UART_RX_PTR_W) )	//read all data already
0008AE 908116            MOV     DPTR,#08116H
0008B1 A3                INC     DPTR
0008B2 E0                MOVX    A,@DPTR
0008B3 FC                MOV     R4,A
0008B4 908116            MOV     DPTR,#08116H
0008B7 E0                MOVX    A,@DPTR
0008B8 FF                MOV     R7,A
0008B9 EC                MOV     A,R4
0008BA FE                MOV     R6,A
0008BB EF                MOV     A,R7
0008BC 904DD9            MOV     DPTR,#rrptr
0008BF E0                MOVX    A,@DPTR
0008C0 FC                MOV     R4,A
0008C1 A3                INC     DPTR
0008C2 E0                MOVX    A,@DPTR
0008C3 FD                MOV     R5,A
0008C4 EF                MOV     A,R7
0008C5 6D                XRL     A,R5
0008C6 7002              JNZ     ?C0025?YC_PERIPHERAL
0008C8 EE                MOV     A,R6
0008C9 6C                XRL     A,R4
0008CA         ?C0025?YC_PERIPHERAL:
0008CA 7029              JNZ     ?C0016?YC_PERIPHERAL
  398: 		{
  399: 			REG_UART_RX_PTR_R = ESWAP((short)rrptr);
0008CC 904DD9            MOV     DPTR,#rrptr
0008CF E0                MOVX    A,@DPTR
0008D0 FE                MOV     R6,A
0008D1 A3                INC     DPTR
0008D2 E0                MOVX    A,@DPTR
0008D3 FF                MOV     R7,A
0008D4 EC                MOV     A,R4
0008D5 FF                MOV     R7,A
0008D6 33                RLC     A
0008D7 95E0              SUBB    A,ACC
0008D9 AB07              MOV     R3,AR7
0008DB ED                MOV     A,R5
0008DC FF                MOV     R7,A
0008DD EB                MOV     A,R3
0008DE 908058            MOV     DPTR,#08058H
0008E1 CF                XCH     A,R7
0008E2 F0                MOVX    @DPTR,A
0008E3 A3                INC     DPTR
0008E4 EF                MOV     A,R7
0008E5 F0                MOVX    @DPTR,A
  400: 			return (i+1);
0008E6 904DD8            MOV     DPTR,#i+01H
0008E9 E0                MOVX    A,@DPTR
0008EA 2401              ADD     A,#01H
0008EC FF                MOV     R7,A
0008ED 904DD7            MOV     DPTR,#i
0008F0 E0                MOVX    A,@DPTR
0008F1 3400              ADDC    A,#00H
0008F3 FE                MOV     R6,A
0008F4 22                RET     
  401: 		}
  402: 	}
0008F5         ?C0016?YC_PERIPHERAL:
0008F5 904DD8            MOV     DPTR,#i+01H
0008F8 E0                MOVX    A,@DPTR
0008F9 04                INC     A
0008FA F0                MOVX    @DPTR,A
0008FB 7006              JNZ     ?C0026?YC_PERIPHERAL
0008FD 904DD7            MOV     DPTR,#i
000900 E0                MOVX    A,@DPTR
000901 04                INC     A
000902 F0                MOVX    @DPTR,A
000903         ?C0026?YC_PERIPHERAL:
000903 0133              AJMP    ?C0014?YC_PERIPHERAL
000905         ?C0015?YC_PERIPHERAL:
  403: 
  404: 	REG_UART_RX_PTR_R = ESWAP((short)rrptr);
000905 904DD9            MOV     DPTR,#rrptr
000908 E0                MOVX    A,@DPTR
000909 FE                MOV     R6,A
00090A A3                INC     DPTR
00090B E0                MOVX    A,@DPTR
00090C FF                MOV     R7,A
00090D FD                MOV     R5,A
00090E AC06              MOV     R4,AR6
000910 EC                MOV     A,R4
000911 FF                MOV     R7,A
000912 33                RLC     A
000913 95E0              SUBB    A,ACC
000915 AB07              MOV     R3,AR7
000917 ED                MOV     A,R5
000918 FF                MOV     R7,A
000919 EB                MOV     A,R3
00091A 908058            MOV     DPTR,#08058H
00091D CF                XCH     A,R7
00091E F0                MOVX    @DPTR,A
00091F A3                INC     DPTR
000920 EF                MOV     A,R7
000921 F0                MOVX    @DPTR,A
  405: 	
  406: 	return len;
000922 904DD5            MOV     DPTR,#len
000925 E0                MOVX    A,@DPTR
000926 FE                MOV     R6,A
000927 A3                INC     DPTR
000928 E0                MOVX    A,@DPTR
000929 FF                MOV     R7,A
  407: }
00092A 22                RET     
----- FUNCTION _YC_UARTReciveDataExpected (END) -------


----- FUNCTION SoftTimer_1SCallback (BEGIN) -----
 FILE: 'system.c'
   20: void SoftTimer_1SCallback(void)
   21: {
   22: 	u8_t buf[10] = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0x00};
   23: 	//YC_UARTSendData(buf, 10);
00092B 78AA              MOV     R0,#LOW buf
00092D 7C4D              MOV     R4,#HIGH buf
00092F 7D01              MOV     R5,#01H
000931 7BFF              MOV     R3,#0FFH
000933 7A04              MOV     R2,#HIGH _?ix1000
000935 79B8              MOV     R1,#LOW _?ix1000
000937 7E00              MOV     R6,#00H
000939 7F0A              MOV     R7,#0AH
00093B 1200D3            LCALL   ?C?COPY
   24: 	YC_UtilTimerStart(1, SoftTimer_1SCallback, &SoftTimer_1STimerID);
00093E 7BFF              MOV     R3,#0FFH
000940 7A09              MOV     R2,#HIGH SoftTimer_1SCallback
000942 792B              MOV     R1,#LOW SoftTimer_1SCallback
000944 904DE0            MOV     DPTR,#?_YC_UtilTimerStart?BYTE+05H
000947 744E              MOV     A,#HIGH SoftTimer_1STimerID
000949 F0                MOVX    @DPTR,A
00094A A3                INC     DPTR
00094B 7465              MOV     A,#LOW SoftTimer_1STimerID
00094D F0                MOVX    @DPTR,A
00094E 7F01              MOV     R7,#01H
000950 7E00              MOV     R6,#00H
000952 121AE6            LCALL   _YC_UtilTimerStart
   25: 	//add user function
   26: 	CS_Scale_TimeOutProc(CS_SetTimeBase1S);
000955 7F07              MOV     R7,#07H
000957 3183              ACALL   _CS_Scale_TimeOutProc
   27: 	CS_MemoryWeightClear_Timer(MemWeightTimerInc);
000959 7F02              MOV     R7,#02H
00095B 123722            LCALL   _CS_MemoryWeightClear_Timer
   28: 	UTCTime++;
00095E 904C5E            MOV     DPTR,#UTCTime
000961 E0                MOVX    A,@DPTR
000962 FC                MOV     R4,A
000963 A3                INC     DPTR
000964 E0                MOVX    A,@DPTR
000965 FD                MOV     R5,A
000966 A3                INC     DPTR
000967 E0                MOVX    A,@DPTR
000968 FE                MOV     R6,A
000969 A3                INC     DPTR
00096A E0                MOVX    A,@DPTR
00096B FF                MOV     R7,A
00096C E4                CLR     A
00096D FA                MOV     R2,A
00096E F9                MOV     R1,A
00096F F8                MOV     R0,A
000970 EF                MOV     A,R7
000971 2401              ADD     A,#01H
000973 FF                MOV     R7,A
000974 EA                MOV     A,R2
000975 3E                ADDC    A,R6
000976 FE                MOV     R6,A
000977 E9                MOV     A,R1
000978 3D                ADDC    A,R5
000979 FD                MOV     R5,A
00097A E8                MOV     A,R0
00097B 3C                ADDC    A,R4
00097C FC                MOV     R4,A
00097D 904C5E            MOV     DPTR,#UTCTime
000980 020332            LJMP    ?C?LSTXDATA
   29: 
   30: 	/*
   31: 	R_Debug_temp = 1234;
   32: 	CS_ScaleDisplay_Debug();
   33: 	
   34: 	*/
   35: 	
   36: /*
   37: 	SPIFlashInit();
   38: 	SPIFlashEraseSector(0x8000);
   39: 	SPIFlashWrite(buf,0x8000,10);
   40: 	SPIFlashRead(SF_RX_BUF,0x8000,10);	
   41: 	*/
----- FUNCTION SoftTimer_1SCallback (END) -------


----- FUNCTION _CS_Scale_TimeOutProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1429: void CS_Scale_TimeOutProc(u8_t option)
 1430: {
;---- Variable 'option' assigned to Register 'R7' ----
 1431: 	static	CS_TimeOut_T xdata R_TimeOut;
 1432: 	static	u8_t xdata B_TimeBase_1s;		//1s时基
 1433: 
 1434: 	if(option==CS_SetTimeBase1S)
000983 EF                MOV     A,R7
000984 B40707            CJNE    A,#07H,?C0210?CS_SCALE_PROC
 1435: 		{
 1436: 		B_TimeBase_1s = true;
000987 904CBF            MOV     DPTR,#B_TimeBase_1s
00098A 7401              MOV     A,#01H
00098C F0                MOVX    @DPTR,A
00098D 22                RET     
 1437: 		return;
 1438: 		}
00098E         ?C0210?CS_SCALE_PROC:
 1439: 	//超时计数器复位
 1440: 	if(option)
00098E EF                MOV     A,R7
00098F 6040              JZ      ?C0212?CS_SCALE_PROC
 1441: 	{
 1442: 	if(option==CS_Reset_ZeroTime)
000991 B40105            CJNE    A,#01H,?C0213?CS_SCALE_PROC
 1443: 		R_TimeOut.zero=0;
000994 E4                CLR     A
000995 904CBA            MOV     DPTR,#R_TimeOut
000998 F0                MOVX    @DPTR,A
000999         ?C0213?CS_SCALE_PROC:
 1444: 	if(option==CS_Reset_LockTime)
000999 EF                MOV     A,R7
00099A B40205            CJNE    A,#02H,?C0214?CS_SCALE_PROC
 1445: 		R_TimeOut.lock=0;
00099D E4                CLR     A
00099E 904CBB            MOV     DPTR,#R_TimeOut+01H
0009A1 F0                MOVX    @DPTR,A
0009A2         ?C0214?CS_SCALE_PROC:
 1446: 	if(option==CS_Reset_UnstableTime)
0009A2 EF                MOV     A,R7
0009A3 B40305            CJNE    A,#03H,?C0215?CS_SCALE_PROC
 1447: 		R_TimeOut.unstable=0;
0009A6 E4                CLR     A
0009A7 904CBC            MOV     DPTR,#R_TimeOut+02H
0009AA F0                MOVX    @DPTR,A
0009AB         ?C0215?CS_SCALE_PROC:
 1448: 	if(option==CS_Reset_OverLoadTime)
0009AB EF                MOV     A,R7
0009AC B40405            CJNE    A,#04H,?C0216?CS_SCALE_PROC
 1449: 		R_TimeOut.overload=0;
0009AF E4                CLR     A
0009B0 904CBD            MOV     DPTR,#R_TimeOut+03H
0009B3 F0                MOVX    @DPTR,A
0009B4         ?C0216?CS_SCALE_PROC:
 1450: 	if(option==CS_Reset_LowBatTime)
0009B4 EF                MOV     A,R7
0009B5 B40505            CJNE    A,#05H,?C0217?CS_SCALE_PROC
 1451: 		R_TimeOut.lowbat=0;
0009B8 E4                CLR     A
0009B9 904CBE            MOV     DPTR,#R_TimeOut+04H
0009BC F0                MOVX    @DPTR,A
0009BD         ?C0217?CS_SCALE_PROC:
 1452: 	if(option==CS_Reset_AllTime)
0009BD EF                MOV     A,R7
0009BE 6406              XRL     A,#06H
0009C0 6002              JZ      $ + 4H
0009C2 41A7              AJMP    ?C0211?CS_SCALE_PROC
 1453: 		{
 1454: 		R_TimeOut.zero=0;
0009C4 904CBA            MOV     DPTR,#R_TimeOut
0009C7 F0                MOVX    @DPTR,A
 1455: 		R_TimeOut.lock=0;
0009C8 A3                INC     DPTR
0009C9 F0                MOVX    @DPTR,A
 1456: 		R_TimeOut.unstable=0;
0009CA A3                INC     DPTR
0009CB F0                MOVX    @DPTR,A
 1457: 		R_TimeOut.overload=0;
0009CC A3                INC     DPTR
0009CD F0                MOVX    @DPTR,A
 1458: 		R_TimeOut.lowbat=0;
0009CE A3                INC     DPTR
0009CF F0                MOVX    @DPTR,A
 1459: 		}
0009D0 22                RET     
 1460: 	return;
 1461: 	}
0009D1         ?C0212?CS_SCALE_PROC:
 1462: 		
 1463: 	if(B_TimeBase_1s == true)
0009D1 904CBF            MOV     DPTR,#B_TimeBase_1s
0009D4 E0                MOVX    A,@DPTR
0009D5 6401              XRL     A,#01H
0009D7 6002              JZ      $ + 4H
0009D9 41A7              AJMP    ?C0211?CS_SCALE_PROC
 1464: 	{
 1465: 		B_TimeBase_1s = false;
0009DB F0                MOVX    @DPTR,A
 1466: 
 1467: 		//低电超时处理
 1468: 		if(CS_Scale_JudgeLowBat(GetIfLowBat) == true)
0009DC 7F01              MOV     R7,#01H
0009DE F1B5              ACALL   _CS_Scale_JudgeLowBat
0009E0 BF011E            CJNE    R7,#01H,?C0220?CS_SCALE_PROC
 1469: 		{
 1470: 			R_TimeOut.lowbat++;
0009E3 904CBE            MOV     DPTR,#R_TimeOut+04H
0009E6 E0                MOVX    A,@DPTR
0009E7 04                INC     A
0009E8 F0                MOVX    @DPTR,A
 1471: 
 1472: 			if(R_TimeOut.lowbat>=CS_Scale_TimeOut_LowBat)
0009E9 E0                MOVX    A,@DPTR
0009EA C3                CLR     C
0009EB 9403              SUBB    A,#03H
0009ED 5002              JNC     $ + 4H
0009EF 41A7              AJMP    ?C0211?CS_SCALE_PROC
 1473: 			{
 1474: 				R_Scale_state = CS_Scale_state_standby;
0009F1 904CC5            MOV     DPTR,#R_Scale_state
0009F4 7402              MOV     A,#02H
0009F6 F0                MOVX    @DPTR,A
 1475: 				CS_Scale_StandbyProc(1);
0009F7 7F01              MOV     R7,#01H
0009F9 51A8              ACALL   _CS_Scale_StandbyProc
 1476: 				R_TimeOut.lowbat=0;
0009FB E4                CLR     A
0009FC 904CBE            MOV     DPTR,#R_TimeOut+04H
0009FF F0                MOVX    @DPTR,A
 1477: 			}
000A00 22                RET     
 1478: 		return;			
 1479: 		}
000A01         ?C0220?CS_SCALE_PROC:
 1480: 
 1481: 		//超载超时处理
 1482: 		if(CS_Scale_JudgeOverLoad(GetIfOverLoad)== true)
000A01 7F01              MOV     R7,#01H
000A03 F1F1              ACALL   _CS_Scale_JudgeOverLoad
000A05 BF011E            CJNE    R7,#01H,?C0222?CS_SCALE_PROC
 1483: 		{
 1484: 			R_TimeOut.overload++;
000A08 904CBD            MOV     DPTR,#R_TimeOut+03H
000A0B E0                MOVX    A,@DPTR
000A0C 04                INC     A
000A0D F0                MOVX    @DPTR,A
 1485: 
 1486: 			if(R_TimeOut.overload>=CS_Scale_TimeOut_OverLoad)
000A0E E0                MOVX    A,@DPTR
000A0F C3                CLR     C
000A10 9403              SUBB    A,#03H
000A12 5002              JNC     $ + 4H
000A14 41A7              AJMP    ?C0211?CS_SCALE_PROC
 1487: 			{
 1488: 				R_Scale_state = CS_Scale_state_standby;
000A16 904CC5            MOV     DPTR,#R_Scale_state
000A19 7402              MOV     A,#02H
000A1B F0                MOVX    @DPTR,A
 1489: 				CS_Scale_StandbyProc(1);
000A1C 7F01              MOV     R7,#01H
000A1E 51A8              ACALL   _CS_Scale_StandbyProc
 1490: 				R_TimeOut.overload=0;
000A20 E4                CLR     A
000A21 904CBD            MOV     DPTR,#R_TimeOut+03H
000A24 F0                MOVX    @DPTR,A
 1491: 			}
000A25 22                RET     
 1492: 		return;	
 1493: 
 1494: 		}
000A26         ?C0222?CS_SCALE_PROC:
 1495: 		
 1496: 		
 1497: 		//称重模式下的超时处理
 1498: 		if(R_Scale_state == CS_Scale_state_weighting)
000A26 904CC5            MOV     DPTR,#R_Scale_state
000A29 E0                MOVX    A,@DPTR
000A2A 6401              XRL     A,#01H
000A2C 7052              JNZ     ?C0224?CS_SCALE_PROC
 1499: 		{
 1500: 		
 1501: 		if(CS_Scale_ZeroProc(GetZeroState,0) != false)
000A2E FD                MOV     R5,A
000A2F FC                MOV     R4,A
000A30 7F03              MOV     R7,#03H
000A32 1233BE            LCALL   _CS_Scale_ZeroProc
000A35 EF                MOV     A,R7
000A36 4E                ORL     A,R6
000A37 6008              JZ      ?C0225?CS_SCALE_PROC
 1502: 			{
 1503: 			R_TimeOut.zero++;
000A39 904CBA            MOV     DPTR,#R_TimeOut
000A3C E0                MOVX    A,@DPTR
000A3D 04                INC     A
000A3E F0                MOVX    @DPTR,A
 1504: 			}
000A3F 8005              SJMP    ?C0226?CS_SCALE_PROC
000A41         ?C0225?CS_SCALE_PROC:
 1505: 		else
 1506: 			{
 1507: 			//R_Debug_temp=R_TimeOut.zero;
 1508: 			//CS_ScaleDisplay_Debug();
 1509: 			//while(1);
 1510: 			R_TimeOut.zero=0;
000A41 E4                CLR     A
000A42 904CBA            MOV     DPTR,#R_TimeOut
000A45 F0                MOVX    @DPTR,A
 1511: 			}
000A46         ?C0226?CS_SCALE_PROC:
 1512: 
 1513: 		if(CS_Scale_JudgeSteady(GetIfSmallSteady)==true)
000A46 7F02              MOV     R7,#02H
000A48 71BB              ACALL   _CS_Scale_JudgeSteady
000A4A BF0107            CJNE    R7,#01H,?C0227?CS_SCALE_PROC
 1514: 			R_TimeOut.unstable=0;
000A4D E4                CLR     A
000A4E 904CBC            MOV     DPTR,#R_TimeOut+02H
000A51 F0                MOVX    @DPTR,A
000A52 8006              SJMP    ?C0228?CS_SCALE_PROC
000A54         ?C0227?CS_SCALE_PROC:
 1515: 		else
 1516: 			R_TimeOut.unstable++;
000A54 904CBC            MOV     DPTR,#R_TimeOut+02H
000A57 E0                MOVX    A,@DPTR
000A58 04                INC     A
000A59 F0                MOVX    @DPTR,A
000A5A         ?C0228?CS_SCALE_PROC:
 1517: 
 1518: 
 1519: 		if(R_TimeOut.zero >=CS_Scale_TimeOut_Zero||R_TimeOut.unstable>=CS_Scale_TimeOut_Unstable)
000A5A 904CBA            MOV     DPTR,#R_TimeOut
000A5D E0                MOVX    A,@DPTR
000A5E C3                CLR     C
000A5F 940F              SUBB    A,#0FH
000A61 5009              JNC     ?C0230?CS_SCALE_PROC
000A63 904CBC            MOV     DPTR,#R_TimeOut+02H
000A66 E0                MOVX    A,@DPTR
000A67 C3                CLR     C
000A68 940F              SUBB    A,#0FH
000A6A 403B              JC      ?C0211?CS_SCALE_PROC
000A6C         ?C0230?CS_SCALE_PROC:
 1520: 			{
 1521: 				R_Scale_state = CS_Scale_state_standby;
000A6C 904CC5            MOV     DPTR,#R_Scale_state
000A6F 7402              MOV     A,#02H
000A71 F0                MOVX    @DPTR,A
 1522: 				CS_Scale_StandbyProc(1);
000A72 7F01              MOV     R7,#01H
000A74 51A8              ACALL   _CS_Scale_StandbyProc
 1523: 				R_TimeOut.zero=0;
000A76 E4                CLR     A
000A77 904CBA            MOV     DPTR,#R_TimeOut
000A7A F0                MOVX    @DPTR,A
 1524: 				R_TimeOut.unstable=0;
000A7B 904CBC            MOV     DPTR,#R_TimeOut+02H
000A7E F0                MOVX    @DPTR,A
 1525: 			}
000A7F 22                RET     
 1526: 		return;
 1527: 
 1528: 		}
000A80         ?C0224?CS_SCALE_PROC:
 1529: 		
 1530: 
 1531: 		//锁定模式下的超时处理
 1532: 		if(R_Scale_state == CS_Scale_state_locking)
000A80 904CC5            MOV     DPTR,#R_Scale_state
000A83 E0                MOVX    A,@DPTR
000A84 B40420            CJNE    A,#04H,?C0211?CS_SCALE_PROC
 1533: 		{
 1534: 			R_TimeOut.unstable=0;
000A87 E4                CLR     A
000A88 904CBC            MOV     DPTR,#R_TimeOut+02H
000A8B F0                MOVX    @DPTR,A
 1535: 			R_TimeOut.lock++;
000A8C 904CBB            MOV     DPTR,#R_TimeOut+01H
000A8F E0                MOVX    A,@DPTR
000A90 04                INC     A
000A91 F0                MOVX    @DPTR,A
 1536: 			
 1537: 			if(R_TimeOut.lock>=CS_Scale_TimeOut_Lock)
000A92 E0                MOVX    A,@DPTR
000A93 C3                CLR     C
000A94 940F              SUBB    A,#0FH
000A96 400F              JC      ?C0211?CS_SCALE_PROC
 1538: 			{
 1539: 				R_Scale_state = CS_Scale_state_standby;
000A98 904CC5            MOV     DPTR,#R_Scale_state
000A9B 7402              MOV     A,#02H
000A9D F0                MOVX    @DPTR,A
 1540: 				CS_Scale_StandbyProc(1);
000A9E 7F01              MOV     R7,#01H
000AA0 51A8              ACALL   _CS_Scale_StandbyProc
 1541: 				R_TimeOut.lock=0;
000AA2 E4                CLR     A
000AA3 904CBB            MOV     DPTR,#R_TimeOut+01H
000AA6 F0                MOVX    @DPTR,A
 1542: 			}
 1543: 		return;
 1544: 		}		
 1545: 		
 1546: 
 1547: 	}
 1548: 
 1549: }
000AA7         ?C0211?CS_SCALE_PROC:
000AA7 22                RET     
----- FUNCTION _CS_Scale_TimeOutProc (END) -------


----- FUNCTION _CS_Scale_StandbyProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1166: void CS_Scale_StandbyProc(u8_t B_Reset)
 1167: {
;---- Variable 'B_Reset' assigned to Register 'R7' ----
 1168: 	static u8_t xdata comm_doing;
 1169: 	static u8_t xdata StandbyState;
 1170: 
 1171: 	if(B_Reset==1)
000AA8 EF                MOV     A,R7
000AA9 B4010A            CJNE    A,#01H,?C0172?CS_SCALE_PROC
 1172: 		{
 1173: 		StandbyState=CS_Standby_S1_ToSleep;
000AAC E4                CLR     A
000AAD 904CB5            MOV     DPTR,#StandbyState
000AB0 F0                MOVX    @DPTR,A
 1174: 		comm_doing=false;
000AB1 904CB4            MOV     DPTR,#comm_doing
000AB4 F0                MOVX    @DPTR,A
000AB5 22                RET     
 1175: 		return;
 1176: 		}
000AB6         ?C0172?CS_SCALE_PROC:
 1177: 
 1178: 	if(B_Reset==2)
000AB6 EF                MOV     A,R7
000AB7 B4020C            CJNE    A,#02H,?C0174?CS_SCALE_PROC
 1179: 		{
 1180: 		StandbyState=CS_Standby_S2_WakeUp;
000ABA 904CB5            MOV     DPTR,#StandbyState
000ABD 7401              MOV     A,#01H
000ABF F0                MOVX    @DPTR,A
 1181: 		comm_doing=false;
000AC0 E4                CLR     A
000AC1 904CB4            MOV     DPTR,#comm_doing
000AC4 F0                MOVX    @DPTR,A
000AC5 22                RET     
 1182: 		return;
 1183: 		}
000AC6         ?C0174?CS_SCALE_PROC:
 1184: 	
 1185: 	switch(StandbyState)
000AC6 904CB5            MOV     DPTR,#StandbyState
000AC9 E0                MOVX    A,@DPTR
000ACA 14                DEC     A
000ACB 603F              JZ      ?C0179?CS_SCALE_PROC
000ACD 04                INC     A
000ACE 707D              JNZ     ?C0182?CS_SCALE_PROC
 1186: 	{
 1187: 	case CS_Standby_S1_ToSleep:
000AD0         ?C0176?CS_SCALE_PROC:
 1188: 		if(comm_doing==false)
000AD0 904CB4            MOV     DPTR,#comm_doing
000AD3 E0                MOVX    A,@DPTR
000AD4 700F              JNZ     ?C0177?CS_SCALE_PROC
 1189: 			{
 1190: 			comm_doing=true;
000AD6 04                INC     A
000AD7 F0                MOVX    @DPTR,A
 1191: 			R_Weight_Com_Coo.now = CS_CommTo1186_SetSleepMode;
000AD8 904D50            MOV     DPTR,#R_Weight_Com_Coo
000ADB 74A0              MOV     A,#0A0H
000ADD F0                MOVX    @DPTR,A
 1192: 			R_Weight_Com_Coo.sucess=false;
000ADE E4                CLR     A
000ADF 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
000AE2 F0                MOVX    @DPTR,A
 1193: 			R_Weight_Com_Coo.fail=false;
000AE3 A3                INC     DPTR
000AE4 F0                MOVX    @DPTR,A
 1194: 			//sys_state = SYS_ST_IDLE;			//系统进入睡眠
 1195: 			}
000AE5         ?C0177?CS_SCALE_PROC:
 1196: 		if(R_Weight_Com_Coo.sucess==true)
000AE5 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
000AE8 E0                MOVX    A,@DPTR
000AE9 6401              XRL     A,#01H
000AEB 7065              JNZ     ?C0173?CS_SCALE_PROC
 1197: 			{
 1198: 			comm_doing=false;
000AED 904CB4            MOV     DPTR,#comm_doing
000AF0 F0                MOVX    @DPTR,A
 1199: 			StandbyState =  CS_Standby_S2_WakeUp;
000AF1 A3                INC     DPTR
000AF2 04                INC     A
000AF3 F0                MOVX    @DPTR,A
 1200: 
 1201: 			btCmdBuf.len = 0x01;
000AF4 904C63            MOV     DPTR,#btCmdBuf
000AF7 F0                MOVX    @DPTR,A
 1202: 			btCmdBuf.DATA[0] = CS_CMD_SLEEP_REQ;
000AF8 A3                INC     DPTR
000AF9 7420              MOV     A,#020H
000AFB F0                MOVX    @DPTR,A
 1203: 			BT_CmdFifoIn(&btCmdBuf);
000AFC 7B01              MOV     R3,#01H
000AFE 7A4C              MOV     R2,#HIGH btCmdBuf
000B00 7963              MOV     R1,#LOW btCmdBuf
000B02 1227F1            LCALL   _BT_CmdFifoIn
 1204: 
 1205: 			//btCmdBuf.len = 2;
 1206: 			//btCmdBuf.DATA[0] = 0x20;
 1207: 			//btCmdBuf.DATA[1] = 0;
 1208: 			//BT_CmdFifoIn(&btCmdBuf);
 1209: 			
 1210: 			 
 1211: 			sys_state = SYS_ST_IDLE;  //SYS_ST_SLEEP;			//系统进入睡眠
000B05 904E6E            MOV     DPTR,#sys_state
000B08 7401              MOV     A,#01H
000B0A F0                MOVX    @DPTR,A
 1212: 					
 1213: 			}	
 1214: 		break;
000B0B 22                RET     
 1215: 	case CS_Standby_S2_WakeUp:
000B0C         ?C0179?CS_SCALE_PROC:
 1216: 		if(comm_doing==false)
000B0C 904CB4            MOV     DPTR,#comm_doing
000B0F E0                MOVX    A,@DPTR
000B10 700F              JNZ     ?C0180?CS_SCALE_PROC
 1217: 			{
 1218: 			comm_doing=true;
000B12 04                INC     A
000B13 F0                MOVX    @DPTR,A
 1219: 			R_Weight_Com_Coo.now = CS_CommTo1186_ReadAdZero;
000B14 904D50            MOV     DPTR,#R_Weight_Com_Coo
000B17 7485              MOV     A,#085H
000B19 F0                MOVX    @DPTR,A
 1220: 			R_Weight_Com_Coo.sucess=false;
000B1A E4                CLR     A
000B1B 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
000B1E F0                MOVX    @DPTR,A
 1221: 			R_Weight_Com_Coo.fail=false;
000B1F A3                INC     DPTR
000B20 F0                MOVX    @DPTR,A
 1222: 			}
000B21         ?C0180?CS_SCALE_PROC:
 1223: 		if(R_Weight_Com_Coo.sucess==true)
000B21 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
000B24 E0                MOVX    A,@DPTR
000B25 B4012A            CJNE    A,#01H,?C0173?CS_SCALE_PROC
 1224: 			{
 1225: 			comm_doing=false;
000B28 E4                CLR     A
000B29 904CB4            MOV     DPTR,#comm_doing
000B2C F0                MOVX    @DPTR,A
 1226: 			StandbyState =  CS_Standby_S1_ToSleep;	
000B2D A3                INC     DPTR
000B2E F0                MOVX    @DPTR,A
 1227: 			sys_state = SYS_ST_RUN;
000B2F 904E6E            MOV     DPTR,#sys_state
000B32 7402              MOV     A,#02H
000B34 F0                MOVX    @DPTR,A
 1228: 
 1229: 			/*
 1230: 			while(1)
 1231: 			{
 1232: 			R_Debug_temp = R_AD_Zero;
 1233: 			CS_ScaleDisplay_Debug();
 1234: 			}
 1235: 			*/
 1236: 			//清除异常状态
 1237: 			CS_Scale_JudgeOverLoad(ResetOverLoad);
000B35 FF                MOV     R7,A
000B36 F1F1              ACALL   _CS_Scale_JudgeOverLoad
 1238: 			CS_Scale_TimeOutProc(CS_Reset_AllTime);
000B38 7F06              MOV     R7,#06H
000B3A 3183              ACALL   _CS_Scale_TimeOutProc
 1239: 			R_Display_Err = 0;
000B3C E4                CLR     A
000B3D 904CC2            MOV     DPTR,#R_Display_Err
000B40 F0                MOVX    @DPTR,A
 1240: 			
 1241: 			R_Scale_state = CS_Scale_state_weighting;
000B41 904CC5            MOV     DPTR,#R_Scale_state
000B44 04                INC     A
000B45 F0                MOVX    @DPTR,A
 1242: 			R_Weight_Com_Coo.now = CS_CommTo1186_ReadAd;	
000B46 904D50            MOV     DPTR,#R_Weight_Com_Coo
000B49 7480              MOV     A,#080H
000B4B F0                MOVX    @DPTR,A
 1243: 			}
 1244: 		break;
000B4C 22                RET     
 1245: 	default:
000B4D         ?C0182?CS_SCALE_PROC:
 1246: 		StandbyState = CS_Standby_S1_ToSleep;
000B4D E4                CLR     A
000B4E 904CB5            MOV     DPTR,#StandbyState
000B51 F0                MOVX    @DPTR,A
 1247: 		break;
 1248: 	}
 1249: 	
 1250: 	//R_Debug_temp = 456;
 1251: 
 1252: }
000B52         ?C0173?CS_SCALE_PROC:
000B52 22                RET     
----- FUNCTION _CS_Scale_StandbyProc (END) -------


----- FUNCTION CS_Scale_ReturnLock (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  838: void CS_Scale_ReturnLock(void)
  839: {
  840: 	u16_t	weight_temp;
  841: 	
  842: 	if( R_UnitWeight.origin > R_Weight_Lock)
000B53 904CC0            MOV     DPTR,#R_Weight_Lock
000B56 E0                MOVX    A,@DPTR
000B57 FE                MOV     R6,A
000B58 A3                INC     DPTR
000B59 E0                MOVX    A,@DPTR
000B5A FF                MOV     R7,A
000B5B 904CC9            MOV     DPTR,#R_UnitWeight
000B5E E0                MOVX    A,@DPTR
000B5F FC                MOV     R4,A
000B60 A3                INC     DPTR
000B61 E0                MOVX    A,@DPTR
000B62 FD                MOV     R5,A
000B63 D3                SETB    C
000B64 9F                SUBB    A,R7
000B65 EC                MOV     A,R4
000B66 9E                SUBB    A,R6
000B67 401F              JC      ?C0118?CS_SCALE_PROC
  843: 		{
  844: 		weight_temp = R_UnitWeight.origin -R_Weight_Lock;
000B69 ED                MOV     A,R5
000B6A 9F                SUBB    A,R7
000B6B FF                MOV     R7,A
000B6C EC                MOV     A,R4
000B6D 9E                SUBB    A,R6
000B6E FE                MOV     R6,A
000B6F 904E69            MOV     DPTR,#weight_temp
000B72 F0                MOVX    @DPTR,A
000B73 A3                INC     DPTR
000B74 EF                MOV     A,R7
000B75 F0                MOVX    @DPTR,A
  845: 		if(weight_temp >= CS_Scale_RetLockWeightInc)
000B76 C3                CLR     C
000B77 94E8              SUBB    A,#0E8H
000B79 EE                MOV     A,R6
000B7A 9403              SUBB    A,#03H
000B7C 403C              JC      ?C0122?CS_SCALE_PROC
  846: 			{
  847: 			R_Scale_state = CS_Scale_state_weighting;
000B7E 904CC5            MOV     DPTR,#R_Scale_state
000B81 7401              MOV     A,#01H
000B83 F0                MOVX    @DPTR,A
  848: 			CS_Scale_TimeOutProc(CS_Reset_AllTime);
000B84 7F06              MOV     R7,#06H
000B86 2183              AJMP    _CS_Scale_TimeOutProc
  849: 			}
  850: 		}
000B88         ?C0118?CS_SCALE_PROC:
  851: 	else
  852: 		{
  853: 		weight_temp = R_Weight_Lock -R_UnitWeight.origin;
000B88 904CC9            MOV     DPTR,#R_UnitWeight
000B8B E0                MOVX    A,@DPTR
000B8C FE                MOV     R6,A
000B8D A3                INC     DPTR
000B8E E0                MOVX    A,@DPTR
000B8F FF                MOV     R7,A
000B90 C3                CLR     C
000B91 904CC1            MOV     DPTR,#R_Weight_Lock+01H
000B94 E0                MOVX    A,@DPTR
000B95 9F                SUBB    A,R7
000B96 FF                MOV     R7,A
000B97 904CC0            MOV     DPTR,#R_Weight_Lock
000B9A E0                MOVX    A,@DPTR
000B9B 9E                SUBB    A,R6
000B9C FE                MOV     R6,A
000B9D 904E69            MOV     DPTR,#weight_temp
000BA0 F0                MOVX    @DPTR,A
000BA1 A3                INC     DPTR
000BA2 EF                MOV     A,R7
000BA3 F0                MOVX    @DPTR,A
  854: 		if(weight_temp >= CS_Scale_RetLockWeightDec)
000BA4 C3                CLR     C
000BA5 942C              SUBB    A,#02CH
000BA7 EE                MOV     A,R6
000BA8 9401              SUBB    A,#01H
000BAA 400E              JC      ?C0122?CS_SCALE_PROC
  855: 			{		
  856: 			R_Scale_state = CS_Scale_state_weighting;
000BAC 904CC5            MOV     DPTR,#R_Scale_state
000BAF 7401              MOV     A,#01H
000BB1 F0                MOVX    @DPTR,A
  857: 			CS_Scale_LockProc(SetDowningLock);
000BB2 FF                MOV     R7,A
000BB3 123605            LCALL   _CS_Scale_LockProc
  858: 			CS_Scale_TimeOutProc(CS_Reset_AllTime);
000BB6 7F06              MOV     R7,#06H
000BB8 3183              ACALL   _CS_Scale_TimeOutProc
  859: 			
  860: 			}
  861: 		}
  862: 
  863: }
000BBA         ?C0122?CS_SCALE_PROC:
000BBA 22                RET     
----- FUNCTION CS_Scale_ReturnLock (END) -------


----- FUNCTION _CS_Scale_JudgeSteady (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  672: u8_t CS_Scale_JudgeSteady(u8_t option)
  673: {
;---- Variable 'option' assigned to Register 'R7' ----
  674: 
  675: 	u16_t	weight_temp;
  676: 	static	u16_t xdata R_Weight_kg_old;
  677: 	static	u8_t	  xdata R_Weight_SameTimes;
  678: 	static	u8_t xdata B_Weight_SmallSteady;		//小重量稳定标志
  679: 	static	u8_t xdata B_Weight_HeavySteady;	//大重量稳定标志
  680: 	
  681: 	if(option==ResetSteady)
000BBB EF                MOV     A,R7
000BBC B4010B            CJNE    A,#01H,?C0092?CS_SCALE_PROC
  682: 		{
  683: 		R_Weight_SameTimes = 0;
000BBF E4                CLR     A
000BC0 904CA4            MOV     DPTR,#R_Weight_SameTimes
000BC3 F0                MOVX    @DPTR,A
  684: 		B_Weight_SmallSteady = false;
000BC4 A3                INC     DPTR
000BC5 F0                MOVX    @DPTR,A
  685: 		B_Weight_HeavySteady = false;
000BC6 A3                INC     DPTR
000BC7 F0                MOVX    @DPTR,A
  686: 		return 0;
000BC8 FF                MOV     R7,A
000BC9 22                RET     
  687: 		}	
000BCA         ?C0092?CS_SCALE_PROC:
  688: 
  689: 	if(option==GetIfSmallSteady)
000BCA EF                MOV     A,R7
000BCB B40206            CJNE    A,#02H,?C0094?CS_SCALE_PROC
  690: 		return B_Weight_SmallSteady;
000BCE 904CA5            MOV     DPTR,#B_Weight_SmallSteady
000BD1 E0                MOVX    A,@DPTR
000BD2 FF                MOV     R7,A
000BD3 22                RET     
000BD4         ?C0094?CS_SCALE_PROC:
  691: 
  692: 	if(option==GetIfHeavySteady)
000BD4 EF                MOV     A,R7
000BD5 B40306            CJNE    A,#03H,?C0095?CS_SCALE_PROC
  693: 		return B_Weight_HeavySteady;
000BD8 904CA6            MOV     DPTR,#B_Weight_HeavySteady
000BDB E0                MOVX    A,@DPTR
000BDC FF                MOV     R7,A
000BDD 22                RET     
000BDE         ?C0095?CS_SCALE_PROC:
  694: 	
  695: 	if(CS_Scale_LockProc(GetIfLock)==false)
000BDE 7F02              MOV     R7,#02H
000BE0 123605            LCALL   _CS_Scale_LockProc
000BE3 EF                MOV     A,R7
000BE4 6002              JZ      $ + 4H
000BE6 8198              AJMP    ?C0096?CS_SCALE_PROC
  696: 		{
  697: 	
  698: 		if(R_UnitWeight.origin > R_Weight_kg_old)
000BE8 904CA2            MOV     DPTR,#R_Weight_kg_old
000BEB E0                MOVX    A,@DPTR
000BEC FE                MOV     R6,A
000BED A3                INC     DPTR
000BEE E0                MOVX    A,@DPTR
000BEF FF                MOV     R7,A
000BF0 904CC9            MOV     DPTR,#R_UnitWeight
000BF3 E0                MOVX    A,@DPTR
000BF4 FC                MOV     R4,A
000BF5 A3                INC     DPTR
000BF6 E0                MOVX    A,@DPTR
000BF7 FD                MOV     R5,A
000BF8 D3                SETB    C
000BF9 9F                SUBB    A,R7
000BFA EC                MOV     A,R4
000BFB 9E                SUBB    A,R6
000BFC 400E              JC      ?C0097?CS_SCALE_PROC
  699: 			weight_temp = R_UnitWeight.origin -R_Weight_kg_old;
000BFE ED                MOV     A,R5
000BFF 9F                SUBB    A,R7
000C00 FF                MOV     R7,A
000C01 EC                MOV     A,R4
000C02 9E                SUBB    A,R6
000C03 904E67            MOV     DPTR,#weight_temp
000C06 F0                MOVX    @DPTR,A
000C07 A3                INC     DPTR
000C08 EF                MOV     A,R7
000C09 F0                MOVX    @DPTR,A
000C0A 801B              SJMP    ?C0098?CS_SCALE_PROC
000C0C         ?C0097?CS_SCALE_PROC:
  700: 		else
  701: 			weight_temp = R_Weight_kg_old -R_UnitWeight.origin;
000C0C 904CC9            MOV     DPTR,#R_UnitWeight
000C0F E0                MOVX    A,@DPTR
000C10 FE                MOV     R6,A
000C11 A3                INC     DPTR
000C12 E0                MOVX    A,@DPTR
000C13 FF                MOV     R7,A
000C14 C3                CLR     C
000C15 904CA3            MOV     DPTR,#R_Weight_kg_old+01H
000C18 E0                MOVX    A,@DPTR
000C19 9F                SUBB    A,R7
000C1A FF                MOV     R7,A
000C1B 904CA2            MOV     DPTR,#R_Weight_kg_old
000C1E E0                MOVX    A,@DPTR
000C1F 9E                SUBB    A,R6
000C20 904E67            MOV     DPTR,#weight_temp
000C23 F0                MOVX    @DPTR,A
000C24 A3                INC     DPTR
000C25 EF                MOV     A,R7
000C26 F0                MOVX    @DPTR,A
000C27         ?C0098?CS_SCALE_PROC:
  702: 		
  703: 		if(weight_temp <  CS_Scale_SameWeightRange)
000C27 C3                CLR     C
000C28 904E68            MOV     DPTR,#weight_temp+01H
000C2B E0                MOVX    A,@DPTR
000C2C 940A              SUBB    A,#0AH
000C2E 904E67            MOV     DPTR,#weight_temp
000C31 E0                MOVX    A,@DPTR
000C32 9400              SUBB    A,#00H
000C34 500E              JNC     ?C0099?CS_SCALE_PROC
  704: 			{
  705: 			if(R_Weight_SameTimes<255)
000C36 904CA4            MOV     DPTR,#R_Weight_SameTimes
000C39 E0                MOVX    A,@DPTR
000C3A C3                CLR     C
000C3B 94FF              SUBB    A,#0FFH
000C3D 500A              JNC     ?C0101?CS_SCALE_PROC
  706: 				R_Weight_SameTimes++;
000C3F E0                MOVX    A,@DPTR
000C40 04                INC     A
000C41 F0                MOVX    @DPTR,A
  707: 			}
000C42 8005              SJMP    ?C0101?CS_SCALE_PROC
000C44         ?C0099?CS_SCALE_PROC:
  708: 		else
  709: 			R_Weight_SameTimes = 0;
000C44 E4                CLR     A
000C45 904CA4            MOV     DPTR,#R_Weight_SameTimes
000C48 F0                MOVX    @DPTR,A
000C49         ?C0101?CS_SCALE_PROC:
  710: 	
  711: 		
  712: 		R_Weight_kg_old = R_UnitWeight.origin;
000C49 904CC9            MOV     DPTR,#R_UnitWeight
000C4C E0                MOVX    A,@DPTR
000C4D FE                MOV     R6,A
000C4E A3                INC     DPTR
000C4F E0                MOVX    A,@DPTR
000C50 FF                MOV     R7,A
000C51 904CA2            MOV     DPTR,#R_Weight_kg_old
000C54 EE                MOV     A,R6
000C55 F0                MOVX    @DPTR,A
000C56 A3                INC     DPTR
000C57 EF                MOV     A,R7
000C58 F0                MOVX    @DPTR,A
  713: 
  714: 		B_Weight_SmallSteady = false;
000C59 E4                CLR     A
000C5A 904CA5            MOV     DPTR,#B_Weight_SmallSteady
000C5D F0                MOVX    @DPTR,A
  715: 		B_Weight_HeavySteady = false;
000C5E A3                INC     DPTR
000C5F F0                MOVX    @DPTR,A
  716: 		
  717: 		if(R_UnitWeight.origin < CS_Scale_MinLockWeight)
000C60 C3                CLR     C
000C61 EF                MOV     A,R7
000C62 94FA              SUBB    A,#0FAH
000C64 EE                MOV     A,R6
000C65 9400              SUBB    A,#00H
000C67 500E              JNC     ?C0102?CS_SCALE_PROC
  718: 			{
  719: 			if(R_Weight_SameTimes>40)
000C69 904CA4            MOV     DPTR,#R_Weight_SameTimes
000C6C E0                MOVX    A,@DPTR
000C6D 9428              SUBB    A,#028H
000C6F 4027              JC      ?C0096?CS_SCALE_PROC
  720: 				B_Weight_SmallSteady = true;		
000C71 A3                INC     DPTR
000C72 7401              MOV     A,#01H
000C74 F0                MOVX    @DPTR,A
  721: 			}
000C75 8021              SJMP    ?C0096?CS_SCALE_PROC
000C77         ?C0102?CS_SCALE_PROC:
  722: 		else
  723: 			{			
  724: 			if(R_Weight_SameTimes>40)
000C77 904CA4            MOV     DPTR,#R_Weight_SameTimes
000C7A E0                MOVX    A,@DPTR
000C7B D3                SETB    C
000C7C 9428              SUBB    A,#028H
000C7E 4018              JC      ?C0096?CS_SCALE_PROC
  725: 				{
  726: 				B_Weight_HeavySteady = true;		
000C80 904CA6            MOV     DPTR,#B_Weight_HeavySteady
000C83 7401              MOV     A,#01H
000C85 F0                MOVX    @DPTR,A
  727: 				R_Scale_state = CS_Scale_state_locking;
000C86 904CC5            MOV     DPTR,#R_Scale_state
000C89 7404              MOV     A,#04H
000C8B F0                MOVX    @DPTR,A
  728: 				CS_SoftTimer(ResetSoftTimer);		//软件定时器开始用于锁定闪显示计时
000C8C 7F02              MOV     R7,#02H
000C8E 919B              ACALL   _CS_SoftTimer
  729: 				CS_Scale_SteadyProc(SteadyProcReset);
000C90 E4                CLR     A
000C91 FF                MOV     R7,A
000C92 91D9              ACALL   _CS_Scale_SteadyProc
  730: 				CS_Scale_TimeOutProc(CS_Reset_AllTime);
000C94 7F06              MOV     R7,#06H
000C96 3183              ACALL   _CS_Scale_TimeOutProc
  731: 				}
  732: 			}
  733: 		}
000C98         ?C0096?CS_SCALE_PROC:
  734: 	return 0;
000C98 7F00              MOV     R7,#00H
  735: }
000C9A 22                RET     
----- FUNCTION _CS_Scale_JudgeSteady (END) -------


----- FUNCTION _CS_SoftTimer (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1381: u8_t CS_SoftTimer(u8_t option)
 1382: {
;---- Variable 'option' assigned to Register 'R7' ----
 1383: 	static u8_t xdata timecount; 				//计时变量
 1384: 	static u8_t xdata B_Timeout;
 1385: 
 1386: 	if(option==ResetSoftTimer)
000C9B EF                MOV     A,R7
000C9C B40207            CJNE    A,#02H,?C0203?CS_SCALE_PROC
 1387: 		{
 1388: 		timecount=0;
000C9F E4                CLR     A
000CA0 904CB8            MOV     DPTR,#timecount
000CA3 F0                MOVX    @DPTR,A
 1389: 		B_Timeout = false;
000CA4 A3                INC     DPTR
000CA5 F0                MOVX    @DPTR,A
 1390: 		}
000CA6         ?C0203?CS_SCALE_PROC:
 1391: 
 1392: 	if(option==GetSoftTimerTime)
000CA6 EF                MOV     A,R7
000CA7 B40106            CJNE    A,#01H,?C0204?CS_SCALE_PROC
 1393: 		return	timecount;
000CAA 904CB8            MOV     DPTR,#timecount
000CAD E0                MOVX    A,@DPTR
000CAE FF                MOV     R7,A
000CAF 22                RET     
000CB0         ?C0204?CS_SCALE_PROC:
 1394: 
 1395: 	if(option==SoftTimerInc)
000CB0 EF                MOV     A,R7
000CB1 700C              JNZ     ?C0206?CS_SCALE_PROC
 1396: 		{
 1397: 		if(timecount<255 ) 
000CB3 904CB8            MOV     DPTR,#timecount
000CB6 E0                MOVX    A,@DPTR
000CB7 C3                CLR     C
000CB8 94FF              SUBB    A,#0FFH
000CBA 5003              JNC     ?C0206?CS_SCALE_PROC
 1398: 		timecount++;
000CBC E0                MOVX    A,@DPTR
000CBD 04                INC     A
000CBE F0                MOVX    @DPTR,A
 1399: 		}
000CBF         ?C0206?CS_SCALE_PROC:
 1400: 	
 1401: 	
 1402: 	if(timecount>SoftTimerTimeOut)
000CBF 904CB8            MOV     DPTR,#timecount
000CC2 E0                MOVX    A,@DPTR
000CC3 D3                SETB    C
000CC4 9496              SUBB    A,#096H
000CC6 4004              JC      ?C0208?CS_SCALE_PROC
 1403: 		B_Timeout = true;
000CC8 A3                INC     DPTR
000CC9 7401              MOV     A,#01H
000CCB F0                MOVX    @DPTR,A
000CCC         ?C0208?CS_SCALE_PROC:
 1404: 
 1405: 	if(option==GetIfTimeOut)
000CCC EF                MOV     A,R7
000CCD B40306            CJNE    A,#03H,?C0209?CS_SCALE_PROC
 1406: 		return	B_Timeout;
000CD0 904CB9            MOV     DPTR,#B_Timeout
000CD3 E0                MOVX    A,@DPTR
000CD4 FF                MOV     R7,A
000CD5 22                RET     
000CD6         ?C0209?CS_SCALE_PROC:
 1407: 	
 1408: 	return 0;
000CD6 7F00              MOV     R7,#00H
 1409: 
 1410: }
000CD8 22                RET     
----- FUNCTION _CS_SoftTimer (END) -------


----- FUNCTION _CS_Scale_SteadyProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  744: void CS_Scale_SteadyProc(u8_t option)
  745: {
;---- Variable 'option' assigned to Register 'R7' ----
  746: 	u16_t	R_AD_BUF;	
  747: 	u16_t	R_Weight_Temp;
  748: 	static	u8_t xdata B_Debug_Send;	
  749: 	static 	u8_t xdata ReadUTC;
  750: 	UserMeasureData SendData;
  751: 
  752: 	if(option==SteadyProcReset)
000CD9 EF                MOV     A,R7
000CDA 7005              JNZ     ?C0106?CS_SCALE_PROC
  753: 		{
  754: 		B_Debug_Send=false;
000CDC 904CA7            MOV     DPTR,#B_Debug_Send
000CDF F0                MOVX    @DPTR,A
000CE0 22                RET     
  755: 		return;
  756: 		}
000CE1         ?C0106?CS_SCALE_PROC:
  757: 	
  758: 	if(CS_SoftTimer(GetIfTimeOut) == true)	//锁定闪现时间到
000CE1 7F03              MOV     R7,#03H
000CE3 919B              ACALL   _CS_SoftTimer
000CE5 EF                MOV     A,R7
000CE6 6401              XRL     A,#01H
000CE8 6002              JZ      $ + 4H
000CEA C11F              AJMP    ?C0107?CS_SCALE_PROC
  759: 		{
  760: 		if(CS_Scale_JudgeSteady(GetIfHeavySteady) == true)
000CEC 7F03              MOV     R7,#03H
000CEE 71BB              ACALL   _CS_Scale_JudgeSteady
000CF0 EF                MOV     A,R7
000CF1 6401              XRL     A,#01H
000CF3 6002              JZ      $ + 4H
000CF5 A18C              AJMP    ?C0109?CS_SCALE_PROC
  761: 			{
  762: 			CS_Scale_JudgeSteady(ResetSteady);
000CF7 7F01              MOV     R7,#01H
000CF9 71BB              ACALL   _CS_Scale_JudgeSteady
  763: 
  764: 			if(R_UnitWeight.origin>R_Weight_Mem)
000CFB 904CC3            MOV     DPTR,#R_Weight_Mem
000CFE E0                MOVX    A,@DPTR
000CFF FE                MOV     R6,A
000D00 A3                INC     DPTR
000D01 E0                MOVX    A,@DPTR
000D02 FF                MOV     R7,A
000D03 904CC9            MOV     DPTR,#R_UnitWeight
000D06 E0                MOVX    A,@DPTR
000D07 FC                MOV     R4,A
000D08 A3                INC     DPTR
000D09 E0                MOVX    A,@DPTR
000D0A FD                MOV     R5,A
000D0B D3                SETB    C
000D0C 9F                SUBB    A,R7
000D0D EC                MOV     A,R4
000D0E 9E                SUBB    A,R6
000D0F 400E              JC      ?C0110?CS_SCALE_PROC
  765: 				R_Weight_Temp = R_UnitWeight.origin -R_Weight_Mem;
000D11 ED                MOV     A,R5
000D12 9F                SUBB    A,R7
000D13 FF                MOV     R7,A
000D14 EC                MOV     A,R4
000D15 9E                SUBB    A,R6
000D16 904E03            MOV     DPTR,#R_Weight_Temp
000D19 F0                MOVX    @DPTR,A
000D1A A3                INC     DPTR
000D1B EF                MOV     A,R7
000D1C F0                MOVX    @DPTR,A
000D1D 801B              SJMP    ?C0111?CS_SCALE_PROC
000D1F         ?C0110?CS_SCALE_PROC:
  766: 			else
  767: 				R_Weight_Temp = R_Weight_Mem - R_UnitWeight.origin;
000D1F 904CC9            MOV     DPTR,#R_UnitWeight
000D22 E0                MOVX    A,@DPTR
000D23 FE                MOV     R6,A
000D24 A3                INC     DPTR
000D25 E0                MOVX    A,@DPTR
000D26 FF                MOV     R7,A
000D27 C3                CLR     C
000D28 904CC4            MOV     DPTR,#R_Weight_Mem+01H
000D2B E0                MOVX    A,@DPTR
000D2C 9F                SUBB    A,R7
000D2D FF                MOV     R7,A
000D2E 904CC3            MOV     DPTR,#R_Weight_Mem
000D31 E0                MOVX    A,@DPTR
000D32 9E                SUBB    A,R6
000D33 904E03            MOV     DPTR,#R_Weight_Temp
000D36 F0                MOVX    @DPTR,A
000D37 A3                INC     DPTR
000D38 EF                MOV     A,R7
000D39 F0                MOVX    @DPTR,A
000D3A         ?C0111?CS_SCALE_PROC:
  768: 
  769: 			//在记忆范围内记忆
  770: 			if(R_UnitWeight.origin > ScaleStartMemoryWeight)
000D3A D3                SETB    C
000D3B 904CCA            MOV     DPTR,#R_UnitWeight+01H
000D3E E0                MOVX    A,@DPTR
000D3F 9458              SUBB    A,#058H
000D41 904CC9            MOV     DPTR,#R_UnitWeight
000D44 E0                MOVX    A,@DPTR
000D45 9402              SUBB    A,#02H
000D47 401D              JC      ?C0112?CS_SCALE_PROC
  771: 				{
  772: 				if(R_Weight_Temp<CS_MemoryRange)
000D49 904E04            MOV     DPTR,#R_Weight_Temp+01H
000D4C E0                MOVX    A,@DPTR
000D4D 9419              SUBB    A,#019H
000D4F 904E03            MOV     DPTR,#R_Weight_Temp
000D52 E0                MOVX    A,@DPTR
000D53 9400              SUBB    A,#00H
000D55 500F              JNC     ?C0112?CS_SCALE_PROC
  773: 					R_UnitWeight.origin = R_Weight_Mem;
000D57 904CC3            MOV     DPTR,#R_Weight_Mem
000D5A E0                MOVX    A,@DPTR
000D5B FF                MOV     R7,A
000D5C A3                INC     DPTR
000D5D E0                MOVX    A,@DPTR
000D5E 904CC9            MOV     DPTR,#R_UnitWeight
000D61 CF                XCH     A,R7
000D62 F0                MOVX    @DPTR,A
000D63 A3                INC     DPTR
000D64 EF                MOV     A,R7
000D65 F0                MOVX    @DPTR,A
  774: 				}
000D66         ?C0112?CS_SCALE_PROC:
  775: 			
  776: 			R_Weight_Lock = R_UnitWeight.origin;
000D66 904CC9            MOV     DPTR,#R_UnitWeight
000D69 E0                MOVX    A,@DPTR
000D6A FE                MOV     R6,A
000D6B A3                INC     DPTR
000D6C E0                MOVX    A,@DPTR
000D6D FF                MOV     R7,A
000D6E 904CC0            MOV     DPTR,#R_Weight_Lock
000D71 EE                MOV     A,R6
000D72 F0                MOVX    @DPTR,A
000D73 A3                INC     DPTR
000D74 EF                MOV     A,R7
000D75 F0                MOVX    @DPTR,A
  777: 			R_Weight_Mem = R_UnitWeight.origin;
000D76 904CC3            MOV     DPTR,#R_Weight_Mem
000D79 EE                MOV     A,R6
000D7A F0                MOVX    @DPTR,A
000D7B A3                INC     DPTR
000D7C EF                MOV     A,R7
000D7D F0                MOVX    @DPTR,A
  778: 			CS_Scale_ZeroProc(ClrLockDownCheckFlag,0);
000D7E E4                CLR     A
000D7F FD                MOV     R5,A
000D80 FC                MOV     R4,A
000D81 7F08              MOV     R7,#08H
000D83 1233BE            LCALL   _CS_Scale_ZeroProc
  779: 			ReadUTC = false;	//初始化读ADC
000D86 E4                CLR     A
000D87 904CA8            MOV     DPTR,#ReadUTC
000D8A F0                MOVX    @DPTR,A
  780: 			}
000D8B 22                RET     
000D8C         ?C0109?CS_SCALE_PROC:
  781: 		else
  782: 			{
  783: 			/*
  784: 			if(wechatStatus == WECHAT_ST_OK&&B_Debug_Send==false)
  785: 				{
  786: 				sendMeasureData();
  787: 				B_Debug_Send=true;
  788: 				}
  789: 			*/		
  790: 			if(B_Debug_Send==false)
000D8C 904CA7            MOV     DPTR,#B_Debug_Send
000D8F E0                MOVX    A,@DPTR
000D90 707A              JNZ     ?C0115?CS_SCALE_PROC
  791: 				{
  792: 
  793: 				if(ReadUTC==false)
000D92 A3                INC     DPTR
000D93 E0                MOVX    A,@DPTR
000D94 700F              JNZ     ?C0116?CS_SCALE_PROC
  794: 					{
  795: 					ReadUTC=true;
000D96 04                INC     A
000D97 F0                MOVX    @DPTR,A
  796: 					R_Weight_Com_Coo.sucess=false;
000D98 E4                CLR     A
000D99 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
000D9C F0                MOVX    @DPTR,A
  797: 					R_Weight_Com_Coo.fail=false;
000D9D A3                INC     DPTR
000D9E F0                MOVX    @DPTR,A
  798: 					R_Weight_Com_Coo.now = CS_CommTo1186_ReadTime;
000D9F 904D50            MOV     DPTR,#R_Weight_Com_Coo
000DA2 7482              MOV     A,#082H
000DA4 F0                MOVX    @DPTR,A
  799: 						
  800: 					}
000DA5         ?C0116?CS_SCALE_PROC:
  801: 				if(R_Weight_Com_Coo.sucess==true)
000DA5 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
000DA8 E0                MOVX    A,@DPTR
000DA9 6401              XRL     A,#01H
000DAB 705F              JNZ     ?C0115?CS_SCALE_PROC
  802: 					{
  803: 			
  804: 					ReadUTC=false;
000DAD 904CA8            MOV     DPTR,#ReadUTC
000DB0 F0                MOVX    @DPTR,A
  805: 					R_Weight_Com_Coo.sucess=false;
000DB1 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
000DB4 F0                MOVX    @DPTR,A
  806: 					
  807: 					SendData.UTCTime[0]=R_1186_RTC[0];
000DB5 904CD3            MOV     DPTR,#R_1186_RTC
000DB8 E0                MOVX    A,@DPTR
000DB9 904E07            MOV     DPTR,#SendData+02H
000DBC F0                MOVX    @DPTR,A
  808: 					SendData.UTCTime[1]=R_1186_RTC[1];	
000DBD 904CD4            MOV     DPTR,#R_1186_RTC+01H
000DC0 E0                MOVX    A,@DPTR
000DC1 904E08            MOV     DPTR,#SendData+03H
000DC4 F0                MOVX    @DPTR,A
  809: 					SendData.UTCTime[2]=R_1186_RTC[2];	
000DC5 904CD5            MOV     DPTR,#R_1186_RTC+02H
000DC8 E0                MOVX    A,@DPTR
000DC9 904E09            MOV     DPTR,#SendData+04H
000DCC F0                MOVX    @DPTR,A
  810: 					SendData.UTCTime[3]=R_1186_RTC[3];	
000DCD 904CD6            MOV     DPTR,#R_1186_RTC+03H
000DD0 E0                MOVX    A,@DPTR
000DD1 904E0A            MOV     DPTR,#SendData+05H
000DD4 F0                MOVX    @DPTR,A
  811: 					SendData.weight=ESWAP(R_UnitWeight.origin);
000DD5 904CC9            MOV     DPTR,#R_UnitWeight
000DD8 E0                MOVX    A,@DPTR
000DD9 FC                MOV     R4,A
000DDA A3                INC     DPTR
000DDB E0                MOVX    A,@DPTR
000DDC FA                MOV     R2,A
000DDD EC                MOV     A,R4
000DDE FF                MOV     R7,A
000DDF EA                MOV     A,R2
000DE0 FE                MOV     R6,A
000DE1 EF                MOV     A,R7
000DE2 904E05            MOV     DPTR,#SendData
000DE5 EE                MOV     A,R6
000DE6 F0                MOVX    @DPTR,A
000DE7 A3                INC     DPTR
000DE8 EF                MOV     A,R7
000DE9 F0                MOVX    @DPTR,A
  812: 					sendMeasureData(SendData);
000DEA 7834              MOV     R0,#LOW ?sendMeasureData?BYTE
000DEC 7C4E              MOV     R4,#HIGH ?sendMeasureData?BYTE
000DEE 7D01              MOV     R5,#01H
000DF0 7B01              MOV     R3,#01H
000DF2 7A4E              MOV     R2,#HIGH SendData
000DF4 7905              MOV     R1,#LOW SendData
000DF6 7E00              MOV     R6,#00H
000DF8 7F06              MOV     R7,#06H
000DFA 1200D3            LCALL   ?C?COPY
000DFD 122D7D            LCALL   sendMeasureData
  813: 					B_Debug_Send=true;
000E00 904CA7            MOV     DPTR,#B_Debug_Send
000E03 7401              MOV     A,#01H
000E05 F0                MOVX    @DPTR,A
  814: 					R_Weight_Com_Coo.now = CS_CommTo1186_ReadAd;
000E06 904D50            MOV     DPTR,#R_Weight_Com_Coo
000E09 7480              MOV     A,#080H
000E0B F0                MOVX    @DPTR,A
  815: 					//CS_SoftTimer(ResetSoftTimer);	
  816: 
  817: 					}
  818: 				}
000E0C         ?C0115?CS_SCALE_PROC:
  819: 			/*
  820: 			if(CS_SoftTimer(GetSoftTimerTime)<200)
  821: 				{
  822: 			R_Debug_temp=SendData.UTCTime;
  823: 			CS_ScaleDisplay_Debug();			
  824: 			return;
  825: 				}
  826: 			*/	
  827: 			
  828: 			R_AD_BUF = CS_Scale_GetDeltaAD(GetDeltaAD);
000E0C E4                CLR     A
000E0D FF                MOV     R7,A
000E0E 122F7B            LCALL   _CS_Scale_GetDeltaAD
;---- Variable 'R_AD_BUF' assigned to Register 'R6/R7' ----
  829: 			R_AD_BUF = CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
000E11 AD07              MOV     R5,AR7
000E13 AC06              MOV     R4,AR6
000E15 E4                CLR     A
000E16 FF                MOV     R7,A
000E17 122FDC            LCALL   _CS_Scale_AdcFilter
  830: 			CS_Scale_GetWeight(R_AD_BUF);				
000E1A 1217DE            LCALL   _CS_Scale_GetWeight
  831: 			CS_Scale_ReturnLock();
000E1D 7153              ACALL   CS_Scale_ReturnLock
  832: 			}
  833: 		}
  834: }
000E1F         ?C0107?CS_SCALE_PROC:
000E1F 22                RET     
----- FUNCTION _CS_Scale_SteadyProc (END) -------


----- FUNCTION CS_ScaleDisplay_SteadyFlash (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  283: void CS_ScaleDisplay_SteadyFlash(void)
  284: {	 
  285: 
  286: 	u8_t xdata R_Weight_FlashTime;
  287: 
  288: 	
  289: 	if(CS_SoftTimer(GetIfTimeOut) == false)
000E20 7F03              MOV     R7,#03H
000E22 919B              ACALL   _CS_SoftTimer
000E24 EF                MOV     A,R7
000E25 702D              JNZ     ?C0056?CS_SCALEDISPLAY
  290: 		{
  291: 		R_Weight_FlashTime = CS_SoftTimer(GetSoftTimerTime);
000E27 7F01              MOV     R7,#01H
000E29 919B              ACALL   _CS_SoftTimer
;---- Variable 'R_Weight_FlashTime' assigned to Register 'R7' ----
  292: 		   if(R_Weight_FlashTime<30) 
000E2B EF                MOV     A,R7
000E2C C3                CLR     C
000E2D 941E              SUBB    A,#01EH
000E2F 5003              JNC     ?C0047?CS_SCALEDISPLAY
  293: 		   	CS_ScaleDisplay_LcdBackup();
000E31 023E65            LJMP    CS_ScaleDisplay_LcdBackup
000E34         ?C0047?CS_SCALEDISPLAY:
  294: 		    else if(R_Weight_FlashTime<60) 
000E34 EF                MOV     A,R7
000E35 C3                CLR     C
000E36 943C              SUBB    A,#03CH
000E38 5002              JNC     ?C0049?CS_SCALEDISPLAY
  295: 				CS_ScaleDisplay_LcdShowNoDigit();
000E3A E171              AJMP    CS_ScaleDisplay_LcdShowNoDigit
000E3C         ?C0049?CS_SCALEDISPLAY:
  296: 		    		else if(R_Weight_FlashTime<90)
000E3C EF                MOV     A,R7
000E3D C3                CLR     C
000E3E 945A              SUBB    A,#05AH
000E40 5002              JNC     ?C0051?CS_SCALEDISPLAY
  297: 					CS_ScaleDisplay_LcdRestore();
000E42 E18C              AJMP    CS_ScaleDisplay_LcdRestore
000E44         ?C0051?CS_SCALEDISPLAY:
  298: 		     			else if(R_Weight_FlashTime<120) 
000E44 EF                MOV     A,R7
000E45 C3                CLR     C
000E46 9478              SUBB    A,#078H
000E48 5002              JNC     ?C0053?CS_SCALEDISPLAY
  299: 						CS_ScaleDisplay_LcdShowNoDigit();
000E4A E171              AJMP    CS_ScaleDisplay_LcdShowNoDigit
000E4C         ?C0053?CS_SCALEDISPLAY:
  300: 		   			 	else if(R_Weight_FlashTime<150)
000E4C EF                MOV     A,R7
000E4D C3                CLR     C
000E4E 9496              SUBB    A,#096H
000E50 5002              JNC     ?C0056?CS_SCALEDISPLAY
  301: 							CS_ScaleDisplay_LcdRestore();		
000E52 F18C              ACALL   CS_ScaleDisplay_LcdRestore
  302: 		}
  303: }
000E54         ?C0056?CS_SCALEDISPLAY:
000E54 22                RET     
----- FUNCTION CS_ScaleDisplay_SteadyFlash (END) -------


----- FUNCTION CS_Scale_Proc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  122: void CS_Scale_Proc(void)
  123: {
  124: 	if(R_Scale_state == CS_Scale_state_init)
  125: 		{	
000E55 904CC5            MOV     DPTR,#R_Scale_state
000E58 E0                MOVX    A,@DPTR
000E59 7005              JNZ     ?C0001?CS_SCALE_PROC
  126: 		CS_Scale_PowerOnProc(0);
  127: 		}
000E5B C200              CLR     ?CS_Scale_PowerOnProc?BIT
000E5D 123758            LCALL   CS_Scale_PowerOnProc
  128: 	if(R_Scale_state == CS_Scale_state_standby)
000E60         ?C0001?CS_SCALE_PROC:
  129: 		{
000E60 904CC5            MOV     DPTR,#R_Scale_state
000E63 E0                MOVX    A,@DPTR
000E64 B40204            CJNE    A,#02H,?C0002?CS_SCALE_PROC
  130: 		CS_Scale_StandbyProc(0);		
  131: 		}
000E67 E4                CLR     A
000E68 FF                MOV     R7,A
000E69 51A8              ACALL   _CS_Scale_StandbyProc
  132: 		
000E6B         ?C0002?CS_SCALE_PROC:
  133: 	if(B_Weight_AdOk == true)
000E6B 904CD7            MOV     DPTR,#B_Weight_AdOk
000E6E E0                MOVX    A,@DPTR
000E6F 6401              XRL     A,#01H
000E71 7037              JNZ     ?C0009?CS_SCALE_PROC
  134: 		{		
  135: 		B_Weight_AdOk = false;	
000E73 F0                MOVX    @DPTR,A
  136: 		
  137: 		if(CS_Scale_ZeroProc(GetPowerOnZeroState,0)== false)	//还没上电取零点先取零点
000E74 FD                MOV     R5,A
000E75 FC                MOV     R4,A
000E76 7F02              MOV     R7,#02H
000E78 1233BE            LCALL   _CS_Scale_ZeroProc
000E7B EF                MOV     A,R7
000E7C 4E                ORL     A,R6
000E7D 7007              JNZ     ?C0004?CS_SCALE_PROC
  138: 			{
  139: 			CS_Scale_ZeroProc(FindPowerOnZero,0);
000E7F FD                MOV     R5,A
000E80 FC                MOV     R4,A
000E81 7F0A              MOV     R7,#0AH
000E83 0233BE            LJMP    _CS_Scale_ZeroProc
  140: 			}
000E86         ?C0004?CS_SCALE_PROC:
  141: 		else
  142: 			{
  143: 				
  144: 			if(R_Scale_state == CS_Scale_state_weighting)
000E86 904CC5            MOV     DPTR,#R_Scale_state
000E89 E0                MOVX    A,@DPTR
000E8A B40104            CJNE    A,#01H,?C0006?CS_SCALE_PROC
  145: 				{			
  146: 				CS_Scale_WeightProc();
000E8D F1C7              ACALL   CS_Scale_WeightProc
  147: 				CS_ScaleDisplay();
000E8F D1AB              ACALL   CS_ScaleDisplay
  148: 				}
000E91         ?C0006?CS_SCALE_PROC:
  149: 			if(R_Scale_state == CS_Scale_state_locking)
000E91 904CC5            MOV     DPTR,#R_Scale_state
000E94 E0                MOVX    A,@DPTR
000E95 B40406            CJNE    A,#04H,?C0007?CS_SCALE_PROC
  150: 				{					
  151: 				CS_ScaleDisplay_SteadyFlash();
000E98 D120              ACALL   CS_ScaleDisplay_SteadyFlash
  152: 				CS_Scale_SteadyProc(SteadyProcRun);
000E9A 7F01              MOV     R7,#01H
000E9C 91D9              ACALL   _CS_Scale_SteadyProc
  153: 				}
000E9E         ?C0007?CS_SCALE_PROC:
  154: 			if(R_Scale_state == CS_Scale_state_caling)
000E9E 904CC5            MOV     DPTR,#R_Scale_state
000EA1 E0                MOVX    A,@DPTR
000EA2 B40305            CJNE    A,#03H,?C0009?CS_SCALE_PROC
  155: 				{
  156: 				CS_Scale_CaliProc(CaliProcRun);
000EA5 E4                CLR     A
000EA6 FF                MOV     R7,A
000EA7 121135            LCALL   _CS_Scale_CaliProc
  157: 				}	
  158: 			
  159: 			//CS_Scale_TimeOutProc(0);
  160: 			}
  161: 		}
  162: }	
000EAA         ?C0009?CS_SCALE_PROC:
000EAA 22                RET     
----- FUNCTION CS_Scale_Proc (END) -------


----- FUNCTION CS_ScaleDisplay (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
   13: void CS_ScaleDisplay()
   14: {
   15: 	u32_t weight_temp;
   16: 	
   17: 	if(R_Display_Err==CS_ScaleDisplay_L_err)	//提示信息显示
000EAB 904CC2            MOV     DPTR,#R_Display_Err
000EAE E0                MOVX    A,@DPTR
000EAF 6404              XRL     A,#04H
000EB1 7035              JNZ     ?C0001?CS_SCALEDISPLAY
   18: 		{
   19: 		if(CS_Scale_JudgeOverLoad(GetIfOverLoad)== true)	
000EB3 7F01              MOV     R7,#01H
000EB5 F1F1              ACALL   _CS_Scale_JudgeOverLoad
000EB7 BF0108            CJNE    R7,#01H,?C0002?CS_SCALEDISPLAY
   20: 			CS_ScaleDisplay_FreshBuf(DisplayOverLoad,0);			
000EBA E4                CLR     A
000EBB FD                MOV     R5,A
000EBC FC                MOV     R4,A
000EBD 7F85              MOV     R7,#085H
000EBF 121612            LCALL   _CS_ScaleDisplay_FreshBuf
000EC2         ?C0002?CS_SCALEDISPLAY:
   21: 		if(CS_Scale_JudgeLowBat(GetIfLowBat)== true)
000EC2 7F01              MOV     R7,#01H
000EC4 F1B5              ACALL   _CS_Scale_JudgeLowBat
000EC6 BF0108            CJNE    R7,#01H,?C0003?CS_SCALEDISPLAY
   22: 			CS_ScaleDisplay_FreshBuf(DisplayLowBat,0);	
000EC9 E4                CLR     A
000ECA FD                MOV     R5,A
000ECB FC                MOV     R4,A
000ECC 7F86              MOV     R7,#086H
000ECE 121612            LCALL   _CS_ScaleDisplay_FreshBuf
000ED1         ?C0003?CS_SCALEDISPLAY:
   23: 		if(CS_Scale_ZeroProc(GetIfZeroErr,0)==true)
000ED1 E4                CLR     A
000ED2 FD                MOV     R5,A
000ED3 FC                MOV     R4,A
000ED4 7F09              MOV     R7,#09H
000ED6 1233BE            LCALL   _CS_Scale_ZeroProc
000ED9 EF                MOV     A,R7
000EDA 6401              XRL     A,#01H
000EDC 4E                ORL     A,R6
000EDD 6002              JZ      $ + 4H
000EDF E170              AJMP    ?C0005?CS_SCALEDISPLAY
   24: 			CS_ScaleDisplay_FreshBuf(DisplayZeroErr,0);
000EE1 FD                MOV     R5,A
000EE2 FC                MOV     R4,A
000EE3 7F87              MOV     R7,#087H
000EE5 021612            LJMP    _CS_ScaleDisplay_FreshBuf
   25: 		return;
   26: 		}
000EE8         ?C0001?CS_SCALEDISPLAY:
   27: 	if(R_Selet_Unit == CS_ScaleDisplay_L_kg)
000EE8 904CC6            MOV     DPTR,#R_Selet_Unit
000EEB E0                MOVX    A,@DPTR
000EEC 7015              JNZ     ?C0006?CS_SCALEDISPLAY
   28: 		{
   29: 		R_UnitWeight.kg = R_UnitWeight.origin;
000EEE 904CC9            MOV     DPTR,#R_UnitWeight
000EF1 E0                MOVX    A,@DPTR
000EF2 FE                MOV     R6,A
000EF3 A3                INC     DPTR
000EF4 E0                MOVX    A,@DPTR
000EF5 FF                MOV     R7,A
000EF6 A3                INC     DPTR
000EF7 EE                MOV     A,R6
000EF8 F0                MOVX    @DPTR,A
000EF9 FC                MOV     R4,A
000EFA A3                INC     DPTR
000EFB EF                MOV     A,R7
000EFC F0                MOVX    @DPTR,A
000EFD FD                MOV     R5,A
   30: 		CS_ScaleDisplay_FreshBuf(Displaykg,R_UnitWeight.kg);
000EFE 7F41              MOV     R7,#041H
000F00 121612            LCALL   _CS_ScaleDisplay_FreshBuf
   31: 		}
000F03         ?C0006?CS_SCALEDISPLAY:
   32: 	if(R_Selet_Unit == CS_ScaleDisplay_L_gongjin)
000F03 904CC6            MOV     DPTR,#R_Selet_Unit
000F06 E0                MOVX    A,@DPTR
000F07 B40215            CJNE    A,#02H,?C0007?CS_SCALEDISPLAY
   33: 		{
   34: 		R_UnitWeight.kg = R_UnitWeight.origin;
000F0A 904CC9            MOV     DPTR,#R_UnitWeight
000F0D E0                MOVX    A,@DPTR
000F0E FE                MOV     R6,A
000F0F A3                INC     DPTR
000F10 E0                MOVX    A,@DPTR
000F11 FF                MOV     R7,A
000F12 A3                INC     DPTR
000F13 EE                MOV     A,R6
000F14 F0                MOVX    @DPTR,A
000F15 FC                MOV     R4,A
000F16 A3                INC     DPTR
000F17 EF                MOV     A,R7
000F18 F0                MOVX    @DPTR,A
000F19 FD                MOV     R5,A
   35: 		CS_ScaleDisplay_FreshBuf(Displaygongjin,R_UnitWeight.kg);
000F1A 7F44              MOV     R7,#044H
000F1C 121612            LCALL   _CS_ScaleDisplay_FreshBuf
   36: 		}
000F1F         ?C0007?CS_SCALEDISPLAY:
   37: 	if(R_Selet_Unit == CS_ScaleDisplay_L_jin)
000F1F 904CC6            MOV     DPTR,#R_Selet_Unit
000F22 E0                MOVX    A,@DPTR
000F23 B4031B            CJNE    A,#03H,?C0008?CS_SCALEDISPLAY
   38: 		{
   39: 		R_UnitWeight.jin = R_UnitWeight.origin *2;
000F26 904CCA            MOV     DPTR,#R_UnitWeight+01H
000F29 E0                MOVX    A,@DPTR
000F2A 25E0              ADD     A,ACC
000F2C FF                MOV     R7,A
000F2D 904CC9            MOV     DPTR,#R_UnitWeight
000F30 E0                MOVX    A,@DPTR
000F31 33                RLC     A
000F32 FE                MOV     R6,A
000F33 904CD1            MOV     DPTR,#R_UnitWeight+08H
000F36 F0                MOVX    @DPTR,A
000F37 FC                MOV     R4,A
000F38 A3                INC     DPTR
000F39 EF                MOV     A,R7
000F3A F0                MOVX    @DPTR,A
000F3B FD                MOV     R5,A
   40: 		CS_ScaleDisplay_FreshBuf(Displayjin,R_UnitWeight.jin);
000F3C 7F43              MOV     R7,#043H
000F3E 121612            LCALL   _CS_ScaleDisplay_FreshBuf
   41: 		}				
000F41         ?C0008?CS_SCALEDISPLAY:
   42:        if(R_Selet_Unit == CS_ScaleDisplay_L_lb )
000F41 904CC6            MOV     DPTR,#R_Selet_Unit
000F44 E0                MOVX    A,@DPTR
000F45 B40128            CJNE    A,#01H,?C0005?CS_SCALEDISPLAY
   43:        	{
   44: 		weight_temp   = (u32_t) R_UnitWeight.origin *22046;
000F48 904CC9            MOV     DPTR,#R_UnitWeight
000F4B E0                MOVX    A,@DPTR
000F4C FE                MOV     R6,A
000F4D A3                INC     DPTR
000F4E E0                MOVX    A,@DPTR
000F4F FF                MOV     R7,A
000F50 7C56              MOV     R4,#056H
000F52 7D1E              MOV     R5,#01EH
000F54 1203C8            LCALL   ?C?LIMUL
;---- Variable 'weight_temp' assigned to Register 'R4/R5/R6/R7' ----
   45: 		R_UnitWeight.lb = weight_temp / 10000;
000F57 E4                CLR     A
000F58 7B10              MOV     R3,#010H
000F5A 7A27              MOV     R2,#027H
000F5C F9                MOV     R1,A
000F5D F8                MOV     R0,A
000F5E 120269            LCALL   ?C?ULDIV
000F61 904CCD            MOV     DPTR,#R_UnitWeight+04H
000F64 EE                MOV     A,R6
000F65 F0                MOVX    @DPTR,A
000F66 FC                MOV     R4,A
000F67 A3                INC     DPTR
000F68 EF                MOV     A,R7
000F69 F0                MOVX    @DPTR,A
000F6A FD                MOV     R5,A
   46: 		CS_ScaleDisplay_FreshBuf(Displaylb,R_UnitWeight.lb);
000F6B 7F42              MOV     R7,#042H
000F6D 121612            LCALL   _CS_ScaleDisplay_FreshBuf
   47:        	}		
   48: }
000F70         ?C0005?CS_SCALEDISPLAY:
000F70 22                RET     
----- FUNCTION CS_ScaleDisplay (END) -------


----- FUNCTION CS_ScaleDisplay_LcdShowNoDigit (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  244: void CS_ScaleDisplay_LcdShowNoDigit(void)
  245: {
  246: 	CS_Lcd_Send_Data[0] &= 0x0f;
  247: 	CS_Lcd_Send_Data[1] &= 0x00;
000F71 904D23            MOV     DPTR,#CS_Lcd_Send_Data
000F74 E0                MOVX    A,@DPTR
000F75 540F              ANL     A,#0FH
000F77 F0                MOVX    @DPTR,A
  248: 	CS_Lcd_Send_Data[2] &= 0x08;
000F78 A3                INC     DPTR
000F79 E0                MOVX    A,@DPTR
000F7A E4                CLR     A
000F7B F0                MOVX    @DPTR,A
  249: 	CS_Lcd_Send_Data[3] &= 0x08;
000F7C A3                INC     DPTR
000F7D E0                MOVX    A,@DPTR
000F7E 5408              ANL     A,#08H
000F80 F0                MOVX    @DPTR,A
  250: 	CS_Lcd_Send_Data[4] &= 0xf0;
000F81 A3                INC     DPTR
000F82 E0                MOVX    A,@DPTR
000F83 5408              ANL     A,#08H
000F85 F0                MOVX    @DPTR,A
  251: }
000F86 A3                INC     DPTR
000F87 E0                MOVX    A,@DPTR
000F88 54F0              ANL     A,#0F0H
000F8A F0                MOVX    @DPTR,A
  252: 
000F8B 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdShowNoDigit (END) -------


----- FUNCTION CS_ScaleDisplay_LcdRestore (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  273: void CS_ScaleDisplay_LcdRestore(void)
  274: {
  275: 	CS_Lcd_Send_Data[0] = CS_Lcd_Send_Data_BAK[0];
  276: 	CS_Lcd_Send_Data[1] = CS_Lcd_Send_Data_BAK[1];
000F8C 904D1D            MOV     DPTR,#CS_Lcd_Send_Data_BAK
000F8F E0                MOVX    A,@DPTR
000F90 904D23            MOV     DPTR,#CS_Lcd_Send_Data
000F93 F0                MOVX    @DPTR,A
  277: 	CS_Lcd_Send_Data[2] = CS_Lcd_Send_Data_BAK[2];
000F94 904D1E            MOV     DPTR,#CS_Lcd_Send_Data_BAK+01H
000F97 E0                MOVX    A,@DPTR
000F98 904D24            MOV     DPTR,#CS_Lcd_Send_Data+01H
000F9B F0                MOVX    @DPTR,A
  278: 	CS_Lcd_Send_Data[3] = CS_Lcd_Send_Data_BAK[3];
000F9C 904D1F            MOV     DPTR,#CS_Lcd_Send_Data_BAK+02H
000F9F E0                MOVX    A,@DPTR
000FA0 904D25            MOV     DPTR,#CS_Lcd_Send_Data+02H
000FA3 F0                MOVX    @DPTR,A
  279: 	CS_Lcd_Send_Data[4] = CS_Lcd_Send_Data_BAK[4];
000FA4 904D20            MOV     DPTR,#CS_Lcd_Send_Data_BAK+03H
000FA7 E0                MOVX    A,@DPTR
000FA8 904D26            MOV     DPTR,#CS_Lcd_Send_Data+03H
000FAB F0                MOVX    @DPTR,A
  280: }
000FAC 904D21            MOV     DPTR,#CS_Lcd_Send_Data_BAK+04H
000FAF E0                MOVX    A,@DPTR
000FB0 904D27            MOV     DPTR,#CS_Lcd_Send_Data+04H
000FB3 F0                MOVX    @DPTR,A
  281: 
000FB4 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdRestore (END) -------


----- FUNCTION _CS_Scale_JudgeLowBat (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  621: u8_t CS_Scale_JudgeLowBat(u8_t option)
  622: {
;---- Variable 'option' assigned to Register 'R7' ----
  623: 	static	u8_t xdata B_Weight_LowBat;			//低电标志
  624: 	
  625: 	if(R_1186sys_state&CS_Scale_LowBatBit==false)
  626: 		{
  627: 		B_Weight_LowBat = true;
  628: 		R_Display_Err=CS_ScaleDisplay_L_err;
  629: 		}
000FB5         ?C0082?CS_SCALE_PROC:
  630: 	else
  631: 		B_Weight_LowBat = false;
000FB5 E4                CLR     A
000FB6 904C9F            MOV     DPTR,#B_Weight_LowBat
000FB9 F0                MOVX    @DPTR,A
000FBA         ?C0083?CS_SCALE_PROC:
  632: 
  633: 	if(option==GetIfLowBat)
000FBA EF                MOV     A,R7
000FBB B40106            CJNE    A,#01H,?C0084?CS_SCALE_PROC
  634: 		return B_Weight_LowBat;
000FBE 904C9F            MOV     DPTR,#B_Weight_LowBat
000FC1 E0                MOVX    A,@DPTR
000FC2 FF                MOV     R7,A
000FC3 22                RET     
000FC4         ?C0084?CS_SCALE_PROC:
  635: 	
  636: 		return 0;	
000FC4 7F00              MOV     R7,#00H
  637: }
000FC6 22                RET     
----- FUNCTION _CS_Scale_JudgeLowBat (END) -------


----- FUNCTION CS_Scale_WeightProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  198: void CS_Scale_WeightProc(void)
  199: {
  200: 	u16_t	R_AD_BUF;
  201: 	
  202: 	R_AD_BUF = CS_Scale_GetDeltaAD(GetDeltaAD);
000FC7 E4                CLR     A
000FC8 FF                MOV     R7,A
000FC9 122F7B            LCALL   _CS_Scale_GetDeltaAD
;---- Variable 'R_AD_BUF' assigned to Register 'R6/R7' ----
  203: 	R_AD_BUF = CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
000FCC AD07              MOV     R5,AR7
000FCE AC06              MOV     R4,AR6
000FD0 E4                CLR     A
000FD1 FF                MOV     R7,A
000FD2 122FDC            LCALL   _CS_Scale_AdcFilter
  204: 	CS_Scale_GetWeight(R_AD_BUF);
000FD5 1217DE            LCALL   _CS_Scale_GetWeight
  205: 	CS_Scale_ZeroProc(RunningZero,0);
000FD8 E4                CLR     A
000FD9 FD                MOV     R5,A
000FDA FC                MOV     R4,A
000FDB 7F07              MOV     R7,#07H
000FDD 1233BE            LCALL   _CS_Scale_ZeroProc
  206: 	CS_Scale_LockProc(LockProcRun);
000FE0 E4                CLR     A
000FE1 FF                MOV     R7,A
000FE2 123605            LCALL   _CS_Scale_LockProc
  207: 	CS_Scale_JudgeOverLoad(0);
000FE5 E4                CLR     A
000FE6 FF                MOV     R7,A
000FE7 F1F1              ACALL   _CS_Scale_JudgeOverLoad
  208: 	CS_Scale_JudgeLowBat(0);
000FE9 E4                CLR     A
000FEA FF                MOV     R7,A
000FEB F1B5              ACALL   _CS_Scale_JudgeLowBat
  209: 	CS_Scale_JudgeSteady(JudgeSteadyRun);
000FED E4                CLR     A
000FEE FF                MOV     R7,A
000FEF 61BB              AJMP    _CS_Scale_JudgeSteady
  210: 	
----- FUNCTION CS_Scale_WeightProc (END) -------


----- FUNCTION _CS_Scale_JudgeOverLoad (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  640: u8_t CS_Scale_JudgeOverLoad(u8_t option)
  641: {
;---- Variable 'option' assigned to Register 'R7' ----
  642: 
  643: 	static	u8_t	  xdata R_Weight_OverLoadTimes;
  644: 	static	u8_t  xdata  B_Weight_OverLoad;			//超载标志
  645: 	if(option==ResetOverLoad)
000FF1 EF                MOV     A,R7
000FF2 B40209            CJNE    A,#02H,?C0086?CS_SCALE_PROC
  646: 		{
  647: 		R_Weight_OverLoadTimes = 0;
000FF5 E4                CLR     A
000FF6 904CA0            MOV     DPTR,#R_Weight_OverLoadTimes
000FF9 F0                MOVX    @DPTR,A
  648: 		B_Weight_OverLoad = false;
000FFA A3                INC     DPTR
000FFB F0                MOVX    @DPTR,A
  649: 		return 0;
000FFC FF                MOV     R7,A
000FFD 22                RET     
  650: 		}
000FFE         ?C0086?CS_SCALE_PROC:
  651: 	
  652: 	if(R_UnitWeight.origin > CS_Scale_MaxWeight)
000FFE D3                SETB    C
000FFF 904CCA            MOV     DPTR,#R_UnitWeight+01H
001002 E0                MOVX    A,@DPTR
001003 94C4              SUBB    A,#0C4H
001005 904CC9            MOV     DPTR,#R_UnitWeight
001008 E0                MOVX    A,@DPTR
001009 943B              SUBB    A,#03BH
00100B 4006              JC      ?C0088?CS_SCALE_PROC
  653: 		R_Weight_OverLoadTimes++;
00100D 904CA0            MOV     DPTR,#R_Weight_OverLoadTimes
001010 E0                MOVX    A,@DPTR
001011 04                INC     A
001012 F0                MOVX    @DPTR,A
001013         ?C0088?CS_SCALE_PROC:
  654: 	if(R_Weight_OverLoadTimes >=2)
001013 904CA0            MOV     DPTR,#R_Weight_OverLoadTimes
001016 E0                MOVX    A,@DPTR
001017 C3                CLR     C
001018 9402              SUBB    A,#02H
00101A 400E              JC      ?C0089?CS_SCALE_PROC
  655: 		{
  656: 		R_Weight_OverLoadTimes = 2;
00101C 7402              MOV     A,#02H
00101E F0                MOVX    @DPTR,A
  657: 		B_Weight_OverLoad = true;
00101F A3                INC     DPTR
001020 14                DEC     A
001021 F0                MOVX    @DPTR,A
  658: 		R_Display_Err=CS_ScaleDisplay_L_err;
001022 904CC2            MOV     DPTR,#R_Display_Err
001025 7404              MOV     A,#04H
001027 F0                MOVX    @DPTR,A
  659: 		}
001028 8005              SJMP    ?C0090?CS_SCALE_PROC
00102A         ?C0089?CS_SCALE_PROC:
  660: 	else
  661: 		B_Weight_OverLoad = false;
00102A E4                CLR     A
00102B 904CA1            MOV     DPTR,#B_Weight_OverLoad
00102E F0                MOVX    @DPTR,A
00102F         ?C0090?CS_SCALE_PROC:
  662: 
  663: 	if(option==GetIfOverLoad)
00102F EF                MOV     A,R7
001030 B40106            CJNE    A,#01H,?C0091?CS_SCALE_PROC
  664: 		return B_Weight_OverLoad;
001033 904CA1            MOV     DPTR,#B_Weight_OverLoad
001036 E0                MOVX    A,@DPTR
001037 FF                MOV     R7,A
001038 22                RET     
001039         ?C0091?CS_SCALE_PROC:
  665: 	
  666: 		return 0;
001039 7F00              MOV     R7,#00H
  667: }
00103B 22                RET     
----- FUNCTION _CS_Scale_JudgeOverLoad (END) -------


----- FUNCTION SoftTimer_10mSCallback (BEGIN) -----
 FILE: 'system.c'
   43: void SoftTimer_10mSCallback(void)
   44: {
   45: 	YC_UtilTimerStartMs(10, SoftTimer_10mSCallback, &SoftTimer_10msTimerID);
   46: 	//add user function
00103C 7BFF              MOV     R3,#0FFH
00103E 7A10              MOV     R2,#HIGH SoftTimer_10mSCallback
001040 793C              MOV     R1,#LOW SoftTimer_10mSCallback
001042 904DE8            MOV     DPTR,#?_YC_UtilTimerStartMs?BYTE+05H
001045 744E              MOV     A,#HIGH SoftTimer_10msTimerID
001047 F0                MOVX    @DPTR,A
001048 A3                INC     DPTR
001049 7466              MOV     A,#LOW SoftTimer_10msTimerID
00104B F0                MOVX    @DPTR,A
00104C 7F0A              MOV     R7,#0AH
00104E 7E00              MOV     R6,#00H
001050 121C15            LCALL   _YC_UtilTimerStartMs
   47: 	if(uartTimeoutCnt<255) {
001053 904D64            MOV     DPTR,#uartTimeoutCnt
001056 E0                MOVX    A,@DPTR
001057 C3                CLR     C
001058 94FF              SUBB    A,#0FFH
00105A 5003              JNC     ?C0002?SYSTEM
   48: 		uartTimeoutCnt++;
00105C E0                MOVX    A,@DPTR
00105D 04                INC     A
00105E F0                MOVX    @DPTR,A
   49: 	}
00105F         ?C0002?SYSTEM:
   50: 	
   51: 
   52: 	CS_SoftTimer(SoftTimerInc);
00105F E4                CLR     A
001060 FF                MOV     R7,A
001061 120C9B            LCALL   _CS_SoftTimer
;----                  JMP     CS_KeyScan
   53: 
   54: 	CS_KeyScan();
   55: 
----- FUNCTION SoftTimer_10mSCallback (END) -------


----- FUNCTION CS_KeyScan (BEGIN) -----
 FILE: 'CS_ScaleKey.c'
   17: void CS_KeyScan(void)
   18: {
   19: 	u8_t  keyState;
   20: 	static u8_t xdata keyState_prev=1;
   21: 	static u8_t xdata keyStateCnt;
   22: 	static u8_t xdata KeyPressDeal=0;
   23: 	static u8_t xdata KeyLongPressDeal=0;
   24: 	static u8_t xdata ShortPressCount=0;
   25: 	static u8_t xdata PressTimesCount=0;
   26: 	static u8_t xdata Press;
   27: 	
   28: 	
   29: 	keyState = YC_GPIOGetInputStatus(5);	//GPIO5	
001064 7F05              MOV     R7,#05H
001066 1219EE            LCALL   _YC_GPIOGetInputStatus
001069 E4                CLR     A
00106A 33                RLC     A
00106B FF                MOV     R7,A
;---- Variable 'keyState' assigned to Register 'R7' ----
   30: 
   31: 	if(ShortPressCount<255)		//短按计时
00106C 904E25            MOV     DPTR,#ShortPressCount
00106F E0                MOVX    A,@DPTR
001070 C3                CLR     C
001071 94FF              SUBB    A,#0FFH
001073 5003              JNC     ?C0001?CS_SCALEKEY
   32: 		ShortPressCount++;
001075 E0                MOVX    A,@DPTR
001076 04                INC     A
001077 F0                MOVX    @DPTR,A
001078         ?C0001?CS_SCALEKEY:
   33: 	
   34: 	if(keyState ==KEY_UP)
001078 EF                MOV     A,R7
001079 6401              XRL     A,#01H
00107B 7043              JNZ     ?C0002?CS_SCALEKEY
   35: 		{
   36: 		keyState_prev = KEY_UP;	
00107D 904E21            MOV     DPTR,#keyState_prev
001080 04                INC     A
001081 F0                MOVX    @DPTR,A
   37: 		keyStateCnt = 0; 
001082 E4                CLR     A
001083 A3                INC     DPTR
001084 F0                MOVX    @DPTR,A
   38: 
   39: 		if(KeyLongPressDeal==1)
001085 904E24            MOV     DPTR,#KeyLongPressDeal
001088 E0                MOVX    A,@DPTR
001089 B40105            CJNE    A,#01H,?C0003?CS_SCALEKEY
   40: 			Press = false;
00108C E4                CLR     A
00108D 904E27            MOV     DPTR,#Press
001090 F0                MOVX    @DPTR,A
001091         ?C0003?CS_SCALEKEY:
   41: 		
   42: 		KeyPressDeal=0;
001091 E4                CLR     A
001092 904E23            MOV     DPTR,#KeyPressDeal
001095 F0                MOVX    @DPTR,A
   43: 		KeyLongPressDeal=0;
001096 A3                INC     DPTR
001097 F0                MOVX    @DPTR,A
   44: 		
   45: 		if(Press == true)
001098 904E27            MOV     DPTR,#Press
00109B E0                MOVX    A,@DPTR
00109C 6401              XRL     A,#01H
00109E 6002              JZ      $ + 4H
0010A0 2134              AJMP    ?C0017?CS_SCALEKEY
   46: 			{
   47: 			Press = false;
0010A2 F0                MOVX    @DPTR,A
   48: 						
   49: 			//短按弹起处理
   50: 			if(ShortPressCount <KEY_SHORT_PRESS_TIME)
0010A3 904E25            MOV     DPTR,#ShortPressCount
0010A6 E0                MOVX    A,@DPTR
0010A7 C3                CLR     C
0010A8 940F              SUBB    A,#0FH
0010AA 5006              JNC     ?C0005?CS_SCALEKEY
   51: 				PressTimesCount++;
0010AC A3                INC     DPTR
0010AD E0                MOVX    A,@DPTR
0010AE 04                INC     A
0010AF F0                MOVX    @DPTR,A
0010B0 8008              SJMP    ?C0006?CS_SCALEKEY
0010B2         ?C0005?CS_SCALEKEY:
   52: 			else
   53: 				{
   54: 				PressTimesCount = 0;
0010B2 E4                CLR     A
0010B3 904E26            MOV     DPTR,#PressTimesCount
0010B6 F0                MOVX    @DPTR,A
   55: 				CS_Scale_ChangeUnit();	
0010B7 12338C            LCALL   CS_Scale_ChangeUnit
   56: 				}
0010BA         ?C0006?CS_SCALEKEY:
   57: 			ShortPressCount =0;	
0010BA E4                CLR     A
0010BB 904E25            MOV     DPTR,#ShortPressCount
0010BE F0                MOVX    @DPTR,A
   58: 			}
   59: 		}
0010BF 22                RET     
0010C0         ?C0002?CS_SCALEKEY:
   60: 	else
   61: 		{
   62: 		if(keyState_prev == KEY_DOWN)
0010C0 904E21            MOV     DPTR,#keyState_prev
0010C3 E0                MOVX    A,@DPTR
0010C4 7065              JNZ     ?C0008?CS_SCALEKEY
   63: 			{	
   64: 			if(keyStateCnt<255)
0010C6 A3                INC     DPTR
0010C7 E0                MOVX    A,@DPTR
0010C8 C3                CLR     C
0010C9 94FF              SUBB    A,#0FFH
0010CB 5003              JNC     ?C0009?CS_SCALEKEY
   65: 				keyStateCnt++;
0010CD E0                MOVX    A,@DPTR
0010CE 04                INC     A
0010CF F0                MOVX    @DPTR,A
0010D0         ?C0009?CS_SCALEKEY:
   66: 			 if(keyStateCnt > KEY_SHORT_PUSH_CNT)
0010D0 904E22            MOV     DPTR,#keyStateCnt
0010D3 E0                MOVX    A,@DPTR
0010D4 FF                MOV     R7,A
0010D5 D3                SETB    C
0010D6 9403              SUBB    A,#03H
0010D8 401F              JC      ?C0010?CS_SCALEKEY
   67: 			 	{
   68: 			 	Press =true;
0010DA 904E27            MOV     DPTR,#Press
0010DD 7401              MOV     A,#01H
0010DF F0                MOVX    @DPTR,A
   69: 				if(KeyPressDeal==0)
0010E0 904E23            MOV     DPTR,#KeyPressDeal
0010E3 E0                MOVX    A,@DPTR
0010E4 7013              JNZ     ?C0010?CS_SCALEKEY
   70: 					{
   71: 					KeyPressDeal=1;
0010E6 04                INC     A
0010E7 F0                MOVX    @DPTR,A
   72: 					//按键刚按下的处理
   73: 					if(ShortPressCount > KEY_SHORT_PRESS_TIME)
0010E8 904E25            MOV     DPTR,#ShortPressCount
0010EB E0                MOVX    A,@DPTR
0010EC D3                SETB    C
0010ED 940F              SUBB    A,#0FH
0010EF 4003              JC      ?C0012?CS_SCALEKEY
   74: 						PressTimesCount = 0;
0010F1 E4                CLR     A
0010F2 A3                INC     DPTR
0010F3 F0                MOVX    @DPTR,A
0010F4         ?C0012?CS_SCALEKEY:
   75: 					ShortPressCount=0;
0010F4 E4                CLR     A
0010F5 904E25            MOV     DPTR,#ShortPressCount
0010F8 F0                MOVX    @DPTR,A
   76: 					}
   77: 			 	}
0010F9         ?C0010?CS_SCALEKEY:
   78: 			 if(keyStateCnt > KEY_LONG_PUSH_CNT)
0010F9 EF                MOV     A,R7
0010FA D3                SETB    C
0010FB 9432              SUBB    A,#032H
0010FD 4035              JC      ?C0017?CS_SCALEKEY
   79: 			 	{
   80: 				if(KeyLongPressDeal==0)
0010FF 904E24            MOV     DPTR,#KeyLongPressDeal
001102 E0                MOVX    A,@DPTR
001103 702F              JNZ     ?C0017?CS_SCALEKEY
   81: 					{
   82: 					//按键刚长按下的处理	
   83: 					KeyLongPressDeal=1;					
001105 04                INC     A
001106 F0                MOVX    @DPTR,A
   84: 					if(PressTimesCount==3)
001107 904E26            MOV     DPTR,#PressTimesCount
00110A E0                MOVX    A,@DPTR
00110B B40313            CJNE    A,#03H,?C0015?CS_SCALEKEY
   85: 						{
   86: 						R_Scale_state = CS_Scale_state_caling;	
00110E 904CC5            MOV     DPTR,#R_Scale_state
001111 7403              MOV     A,#03H
001113 F0                MOVX    @DPTR,A
   87: 						CS_Scale_CaliProc(CaliProcReset);
001114 7F05              MOV     R7,#05H
001116 3135              ACALL   _CS_Scale_CaliProc
   88: 						Press = false;
001118 E4                CLR     A
001119 904E27            MOV     DPTR,#Press
00111C F0                MOVX    @DPTR,A
   89: 						keyStateCnt=0;
00111D 904E22            MOV     DPTR,#keyStateCnt
001120 F0                MOVX    @DPTR,A
   90: 						}
001121         ?C0015?CS_SCALEKEY:
   91: 					PressTimesCount = 0;
001121 E4                CLR     A
001122 904E26            MOV     DPTR,#PressTimesCount
001125 F0                MOVX    @DPTR,A
   92: 					ShortPressCount =0;
001126 904E25            MOV     DPTR,#ShortPressCount
001129 F0                MOVX    @DPTR,A
   93: 					}
   94: 			 	}
   95: 			}
00112A 22                RET     
00112B         ?C0008?CS_SCALEKEY:
   96: 		else
   97: 			{
   98: 			keyState_prev = KEY_DOWN;
00112B E4                CLR     A
00112C 904E21            MOV     DPTR,#keyState_prev
00112F F0                MOVX    @DPTR,A
   99: 			Press = false;
001130 904E27            MOV     DPTR,#Press
001133 F0                MOVX    @DPTR,A
  100: 			}
  101: 		}
  102: }
001134         ?C0017?CS_SCALEKEY:
001134 22                RET     
----- FUNCTION CS_KeyScan (END) -------


----- FUNCTION _CS_Scale_CaliProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  910: u16_t CS_Scale_CaliProc(u8_t option)
  911: {
;---- Variable 'option' assigned to Register 'R5' ----
001135 AD07              MOV     R5,AR7
  912: 	static	u16_t xdata R_AD_CaliDot1;		//第一个标定点AD值
  913: 	static	u16_t xdata R_AD_CaliDot2;		//第二个标定点AD值
  914: 	static	u16_t xdata R_AD_CaliDot3;		//第三个标定点AD值
  915: 	static	u8_t	  xdata R_CaliState;			//标定状态
  916: 	static	u16_t xdata R_OpenWeight_Ad;	//开机重量AD值
  917: 	
  918: 	u16_t	R_AdFilTimes;	
  919: 	u16_t	weight_temp;
  920: 	u16_t	R_AD_BUF;
  921: 	u16_t	R_AD_PowerOnZero;
  922: 
  923: 	if(option==CaliProcReset)
001137 ED                MOV     A,R5
001138 B40508            CJNE    A,#05H,?C0129?CS_SCALE_PROC
  924: 		{
  925: 		R_CaliState=CS_CaliState_GetZero;
00113B E4                CLR     A
00113C 904CB1            MOV     DPTR,#R_CaliState
00113F F0                MOVX    @DPTR,A
  926: 		return	0;
001140 FE                MOV     R6,A
001141 FF                MOV     R7,A
001142 22                RET     
  927: 		}
001143         ?C0129?CS_SCALE_PROC:
  928: 	if(option==CaliProcSetCali)
001143 ED                MOV     A,R5
001144 6401              XRL     A,#01H
001146 6002              JZ      $ + 4H
001148 4127              AJMP    ?C0131?CS_SCALE_PROC
  929: 		{
  930: /*
  931: 		*(mem_sensor_buf )= 12;
  932: 		*(mem_sensor_buf+1) = 12;
  933: 		*(mem_sensor_buf+2 )= 12;
  934: 		*(mem_sensor_buf+3) = 12;
  935: 		*(mem_sensor_buf+4 )= 12;
  936: 		*(mem_sensor_buf+5) = 12;
  937: 		SpiFlashOperator(CS_CMD_WRITE_FLASH);
  938: 		//YC_Delay10ms(10);
  939: 		
  940: 		*(mem_sensor_buf )= 0;
  941: 		*(mem_sensor_buf+1) = 0;
  942: 		*(mem_sensor_buf+2 )= 0;
  943: 		*(mem_sensor_buf+3) = 0;
  944: 		*(mem_sensor_buf+4 )= 0;
  945: 		*(mem_sensor_buf+5) = 0;
  946: 		
  947: 		
  948: 		SpiFlashOperator( CS_CMD_READ_FLASH);
  949: 		
  950: 		
  951: 		
  952: 		R_Debug_temp=(u16_t) *(mem_sensor_buf+2 ) ;
  953: 		CS_ScaleDisplay_Debug();
  954: 		while(1);
  955: 		*/
  956: 		//YC_Delay1S(1);
  957: 		
  958: 		R_AD_BUF = *(mem_sensor_buf );
00114A 904C08            MOV     DPTR,#04C08H
00114D E0                MOVX    A,@DPTR
00114E FF                MOV     R7,A
00114F 904E0F            MOV     DPTR,#R_AD_BUF
001152 E4                CLR     A
001153 F0                MOVX    @DPTR,A
001154 A3                INC     DPTR
001155 EF                MOV     A,R7
001156 F0                MOVX    @DPTR,A
  959: 		R_AD_CaliDot1 =R_AD_BUF<<8 |  (*(mem_sensor_buf+1));
001157 E0                MOVX    A,@DPTR
001158 FE                MOV     R6,A
001159 904C09            MOV     DPTR,#04C09H
00115C E0                MOVX    A,@DPTR
00115D FB                MOV     R3,A
00115E EE                MOV     A,R6
00115F EB                MOV     A,R3
001160 FF                MOV     R7,A
001161 904CAB            MOV     DPTR,#R_AD_CaliDot1
001164 EE                MOV     A,R6
001165 F0                MOVX    @DPTR,A
001166 A3                INC     DPTR
001167 EF                MOV     A,R7
001168 F0                MOVX    @DPTR,A
  960: 		R_AD_BUF = *(mem_sensor_buf+2 );
001169 904C0A            MOV     DPTR,#04C0AH
00116C E0                MOVX    A,@DPTR
00116D FF                MOV     R7,A
00116E 904E0F            MOV     DPTR,#R_AD_BUF
001171 E4                CLR     A
001172 F0                MOVX    @DPTR,A
001173 A3                INC     DPTR
001174 EF                MOV     A,R7
001175 F0                MOVX    @DPTR,A
  961: 		R_AD_CaliDot2 =R_AD_BUF<<8 |  (*(mem_sensor_buf+3));
001176 E0                MOVX    A,@DPTR
001177 FE                MOV     R6,A
001178 904C0B            MOV     DPTR,#04C0BH
00117B E0                MOVX    A,@DPTR
00117C FB                MOV     R3,A
00117D EE                MOV     A,R6
00117E EB                MOV     A,R3
00117F FF                MOV     R7,A
001180 904CAD            MOV     DPTR,#R_AD_CaliDot2
001183 EE                MOV     A,R6
001184 F0                MOVX    @DPTR,A
001185 A3                INC     DPTR
001186 EF                MOV     A,R7
001187 F0                MOVX    @DPTR,A
  962: 		R_AD_BUF = *(mem_sensor_buf+4 );
001188 904C0C            MOV     DPTR,#04C0CH
00118B E0                MOVX    A,@DPTR
00118C FF                MOV     R7,A
00118D 904E0F            MOV     DPTR,#R_AD_BUF
001190 E4                CLR     A
001191 F0                MOVX    @DPTR,A
001192 A3                INC     DPTR
001193 EF                MOV     A,R7
001194 F0                MOVX    @DPTR,A
  963: 		R_AD_CaliDot3 =R_AD_BUF<<8 |  (*(mem_sensor_buf+5));	
001195 E0                MOVX    A,@DPTR
001196 FE                MOV     R6,A
001197 904C0D            MOV     DPTR,#04C0DH
00119A E0                MOVX    A,@DPTR
00119B FB                MOV     R3,A
00119C EE                MOV     A,R6
00119D EB                MOV     A,R3
00119E FF                MOV     R7,A
00119F 904CAF            MOV     DPTR,#R_AD_CaliDot3
0011A2 EE                MOV     A,R6
0011A3 F0                MOVX    @DPTR,A
0011A4 A3                INC     DPTR
0011A5 EF                MOV     A,R7
0011A6 F0                MOVX    @DPTR,A
  964: 
  965: 		
  966: 
  967: 		if(R_AD_CaliDot1<CS_CaliStateData_Down || R_AD_CaliDot1>CS_CaliStateData_Up)
0011A7 904CAB            MOV     DPTR,#R_AD_CaliDot1
0011AA E0                MOVX    A,@DPTR
0011AB FE                MOV     R6,A
0011AC A3                INC     DPTR
0011AD E0                MOVX    A,@DPTR
0011AE FF                MOV     R7,A
0011AF C3                CLR     C
0011B0 94E8              SUBB    A,#0E8H
0011B2 EE                MOV     A,R6
0011B3 9403              SUBB    A,#03H
0011B5 4009              JC      ?C0133?CS_SCALE_PROC
0011B7 D3                SETB    C
0011B8 EF                MOV     A,R7
0011B9 9470              SUBB    A,#070H
0011BB EE                MOV     A,R6
0011BC 9417              SUBB    A,#017H
0011BE 404C              JC      ?C0132?CS_SCALE_PROC
0011C0         ?C0133?CS_SCALE_PROC:
  968: 			if(R_AD_CaliDot2<CS_CaliStateData_Down||R_AD_CaliDot2>CS_CaliStateData_Up)
0011C0 904CAD            MOV     DPTR,#R_AD_CaliDot2
0011C3 E0                MOVX    A,@DPTR
0011C4 FE                MOV     R6,A
0011C5 A3                INC     DPTR
0011C6 E0                MOVX    A,@DPTR
0011C7 FF                MOV     R7,A
0011C8 C3                CLR     C
0011C9 94E8              SUBB    A,#0E8H
0011CB EE                MOV     A,R6
0011CC 9403              SUBB    A,#03H
0011CE 4009              JC      ?C0135?CS_SCALE_PROC
0011D0 D3                SETB    C
0011D1 EF                MOV     A,R7
0011D2 9470              SUBB    A,#070H
0011D4 EE                MOV     A,R6
0011D5 9417              SUBB    A,#017H
0011D7 4033              JC      ?C0132?CS_SCALE_PROC
0011D9         ?C0135?CS_SCALE_PROC:
  969: 				if(R_AD_CaliDot3<CS_CaliStateData_Down||R_AD_CaliDot3>CS_CaliStateData_Up)
0011D9 904CAF            MOV     DPTR,#R_AD_CaliDot3
0011DC E0                MOVX    A,@DPTR
0011DD FE                MOV     R6,A
0011DE A3                INC     DPTR
0011DF E0                MOVX    A,@DPTR
0011E0 FF                MOV     R7,A
0011E1 C3                CLR     C
0011E2 94E8              SUBB    A,#0E8H
0011E4 EE                MOV     A,R6
0011E5 9403              SUBB    A,#03H
0011E7 4009              JC      ?C0137?CS_SCALE_PROC
0011E9 D3                SETB    C
0011EA EF                MOV     A,R7
0011EB 9470              SUBB    A,#070H
0011ED EE                MOV     A,R6
0011EE 9417              SUBB    A,#017H
0011F0 401A              JC      ?C0132?CS_SCALE_PROC
0011F2         ?C0137?CS_SCALE_PROC:
  970: 					{
  971: 					R_AD_CaliDot1	= 6000;
0011F2 904CAB            MOV     DPTR,#R_AD_CaliDot1
0011F5 7417              MOV     A,#017H
0011F7 F0                MOVX    @DPTR,A
0011F8 A3                INC     DPTR
0011F9 7470              MOV     A,#070H
0011FB F0                MOVX    @DPTR,A
  972: 					R_AD_CaliDot2	= 5000;
0011FC A3                INC     DPTR
0011FD 7413              MOV     A,#013H
0011FF F0                MOVX    @DPTR,A
001200 A3                INC     DPTR
001201 7488              MOV     A,#088H
001203 F0                MOVX    @DPTR,A
  973: 					R_AD_CaliDot3	= 4000;	
001204 A3                INC     DPTR
001205 740F              MOV     A,#0FH
001207 F0                MOVX    @DPTR,A
001208 A3                INC     DPTR
001209 74A0              MOV     A,#0A0H
00120B F0                MOVX    @DPTR,A
  974: 					}	
00120C         ?C0132?CS_SCALE_PROC:
  975: 		
  976: 		
  977: 		R_OpenWeight_Ad	= R_AD_CaliDot1/10;
00120C 904CAB            MOV     DPTR,#R_AD_CaliDot1
00120F E0                MOVX    A,@DPTR
001210 FE                MOV     R6,A
001211 A3                INC     DPTR
001212 E0                MOVX    A,@DPTR
001213 FF                MOV     R7,A
001214 7C00              MOV     R4,#00H
001216 7D0A              MOV     R5,#0AH
001218 120173            LCALL   ?C?UIDIV
00121B 904CB2            MOV     DPTR,#R_OpenWeight_Ad
00121E EE                MOV     A,R6
00121F F0                MOVX    @DPTR,A
001220 A3                INC     DPTR
001221 EF                MOV     A,R7
001222 F0                MOVX    @DPTR,A
  978: 		return	0;		
001223 E4                CLR     A
001224 FE                MOV     R6,A
001225 FF                MOV     R7,A
001226 22                RET     
  979: 		}
001227         ?C0131?CS_SCALE_PROC:
  980: 	if(option==CaliProcSetOpenWeight)
001227 ED                MOV     A,R5
001228 B4061B            CJNE    A,#06H,?C0138?CS_SCALE_PROC
  981: 		{
  982: 		R_OpenWeight_Ad	= R_AD_CaliDot1/10;
00122B 904CAB            MOV     DPTR,#R_AD_CaliDot1
00122E E0                MOVX    A,@DPTR
00122F FE                MOV     R6,A
001230 A3                INC     DPTR
001231 E0                MOVX    A,@DPTR
001232 FF                MOV     R7,A
001233 7C00              MOV     R4,#00H
001235 7D0A              MOV     R5,#0AH
001237 120173            LCALL   ?C?UIDIV
00123A 904CB2            MOV     DPTR,#R_OpenWeight_Ad
00123D EE                MOV     A,R6
00123E F0                MOVX    @DPTR,A
00123F A3                INC     DPTR
001240 EF                MOV     A,R7
001241 F0                MOVX    @DPTR,A
  983: 		return	0;
001242 E4                CLR     A
001243 FE                MOV     R6,A
001244 FF                MOV     R7,A
001245 22                RET     
  984: 		}
001246         ?C0138?CS_SCALE_PROC:
  985: 	
  986: 	if(option==CaliProcGetOpenWeight)
001246 ED                MOV     A,R5
001247 B40709            CJNE    A,#07H,?C0139?CS_SCALE_PROC
  987: 		return R_OpenWeight_Ad;
00124A 904CB2            MOV     DPTR,#R_OpenWeight_Ad
00124D E0                MOVX    A,@DPTR
00124E FE                MOV     R6,A
00124F A3                INC     DPTR
001250 E0                MOVX    A,@DPTR
001251 FF                MOV     R7,A
001252 22                RET     
001253         ?C0139?CS_SCALE_PROC:
  988: 	if(option==CaliProcGetCaliDot1)
001253 ED                MOV     A,R5
001254 B40209            CJNE    A,#02H,?C0140?CS_SCALE_PROC
  989: 		return R_AD_CaliDot1;
001257 904CAB            MOV     DPTR,#R_AD_CaliDot1
00125A E0                MOVX    A,@DPTR
00125B FE                MOV     R6,A
00125C A3                INC     DPTR
00125D E0                MOVX    A,@DPTR
00125E FF                MOV     R7,A
00125F 22                RET     
001260         ?C0140?CS_SCALE_PROC:
  990: 	if(option==CaliProcGetCaliDot2)
001260 ED                MOV     A,R5
001261 B40309            CJNE    A,#03H,?C0141?CS_SCALE_PROC
  991: 		return R_AD_CaliDot2;
001264 904CAD            MOV     DPTR,#R_AD_CaliDot2
001267 E0                MOVX    A,@DPTR
001268 FE                MOV     R6,A
001269 A3                INC     DPTR
00126A E0                MOVX    A,@DPTR
00126B FF                MOV     R7,A
00126C 22                RET     
00126D         ?C0141?CS_SCALE_PROC:
  992: 	if(option==CaliProcGetCaliDot3)
00126D ED                MOV     A,R5
00126E B40409            CJNE    A,#04H,?C0142?CS_SCALE_PROC
  993: 		return R_AD_CaliDot3;
001271 904CAF            MOV     DPTR,#R_AD_CaliDot3
001274 E0                MOVX    A,@DPTR
001275 FE                MOV     R6,A
001276 A3                INC     DPTR
001277 E0                MOVX    A,@DPTR
001278 FF                MOV     R7,A
001279 22                RET     
00127A         ?C0142?CS_SCALE_PROC:
  994: 	
  995: 	R_AD_BUF = R_AD_Original;
00127A 904CD8            MOV     DPTR,#R_AD_Original
00127D E0                MOVX    A,@DPTR
00127E FE                MOV     R6,A
00127F A3                INC     DPTR
001280 E0                MOVX    A,@DPTR
001281 FF                MOV     R7,A
001282 904E0F            MOV     DPTR,#R_AD_BUF
001285 EE                MOV     A,R6
001286 F0                MOVX    @DPTR,A
001287 FC                MOV     R4,A
001288 A3                INC     DPTR
001289 EF                MOV     A,R7
00128A F0                MOVX    @DPTR,A
00128B FD                MOV     R5,A
  996: 	R_AD_BUF=CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
00128C E4                CLR     A
00128D FF                MOV     R7,A
00128E 122FDC            LCALL   _CS_Scale_AdcFilter
001291 904E0F            MOV     DPTR,#R_AD_BUF
001294 EE                MOV     A,R6
001295 F0                MOVX    @DPTR,A
001296 FC                MOV     R4,A
001297 A3                INC     DPTR
001298 EF                MOV     A,R7
001299 F0                MOVX    @DPTR,A
00129A FD                MOV     R5,A
  997: 	R_AdFilTimes = CS_Scale_AdcFilter(ScaleAdcFilterGetFilTimes,R_AD_BUF);
00129B 7F02              MOV     R7,#02H
00129D 122FDC            LCALL   _CS_Scale_AdcFilter
0012A0 904E0B            MOV     DPTR,#R_AdFilTimes
0012A3 EE                MOV     A,R6
0012A4 F0                MOVX    @DPTR,A
0012A5 A3                INC     DPTR
0012A6 EF                MOV     A,R7
0012A7 F0                MOVX    @DPTR,A
  998: 	
  999: 	
 1000: 
 1001: 	//数据稳定才处理
 1002: 		
 1003: 	if(R_CaliState==CS_CaliState_GetZero) 
0012A8 904CB1            MOV     DPTR,#R_CaliState
0012AB E0                MOVX    A,@DPTR
0012AC 7048              JNZ     ?C0143?CS_SCALE_PROC
 1004: 		{	
 1005: 
 1006: 			R_AD_CaliDot1 = R_AD_BUF;	//暂存零点用于显示
0012AE 904E0F            MOV     DPTR,#R_AD_BUF
0012B1 E0                MOVX    A,@DPTR
0012B2 FC                MOV     R4,A
0012B3 A3                INC     DPTR
0012B4 E0                MOVX    A,@DPTR
0012B5 FD                MOV     R5,A
0012B6 904CAB            MOV     DPTR,#R_AD_CaliDot1
0012B9 EC                MOV     A,R4
0012BA F0                MOVX    @DPTR,A
0012BB A3                INC     DPTR
0012BC ED                MOV     A,R5
0012BD F0                MOVX    @DPTR,A
 1007: 			if(R_AdFilTimes>=60)
0012BE C3                CLR     C
0012BF 904E0C            MOV     DPTR,#R_AdFilTimes+01H
0012C2 E0                MOVX    A,@DPTR
0012C3 943C              SUBB    A,#03CH
0012C5 904E0B            MOV     DPTR,#R_AdFilTimes
0012C8 E0                MOVX    A,@DPTR
0012C9 9400              SUBB    A,#00H
0012CB 401D              JC      ?C0144?CS_SCALE_PROC
 1008: 				{
 1009: 			CS_Scale_ZeroProc(SetPowerOnZero,R_AD_BUF);	
0012CD 7F05              MOV     R7,#05H
0012CF 1233BE            LCALL   _CS_Scale_ZeroProc
 1010: 			CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
0012D2 904E0F            MOV     DPTR,#R_AD_BUF
0012D5 E0                MOVX    A,@DPTR
0012D6 FC                MOV     R4,A
0012D7 A3                INC     DPTR
0012D8 E0                MOVX    A,@DPTR
0012D9 FD                MOV     R5,A
0012DA 7F01              MOV     R7,#01H
0012DC 122FDC            LCALL   _CS_Scale_AdcFilter
 1011: 			CS_SoftTimer(ResetSoftTimer);
0012DF 7F02              MOV     R7,#02H
0012E1 120C9B            LCALL   _CS_SoftTimer
 1012: 			R_CaliState = CS_CaliState_ShowCal1;
0012E4 904CB1            MOV     DPTR,#R_CaliState
0012E7 7401              MOV     A,#01H
0012E9 F0                MOVX    @DPTR,A
 1013: 				}
0012EA         ?C0144?CS_SCALE_PROC:
 1014: 		CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_BUF);
0012EA 904E0F            MOV     DPTR,#R_AD_BUF
0012ED E0                MOVX    A,@DPTR
0012EE FC                MOV     R4,A
0012EF A3                INC     DPTR
0012F0 E0                MOVX    A,@DPTR
0012F1 FD                MOV     R5,A
0012F2 7F21              MOV     R7,#021H
0012F4 D112              ACALL   _CS_ScaleDisplay_FreshBuf
 1015: 		}
0012F6         ?C0143?CS_SCALE_PROC:
 1016: 	
 1017: 	if(R_CaliState == CS_CaliState_ShowCal1)
0012F6 904CB1            MOV     DPTR,#R_CaliState
0012F9 E0                MOVX    A,@DPTR
0012FA B40118            CJNE    A,#01H,?C0145?CS_SCALE_PROC
 1018: 		{
 1019: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 	
0012FD 7F01              MOV     R7,#01H
0012FF 120C9B            LCALL   _CS_SoftTimer
001302 EF                MOV     A,R7
001303 D3                SETB    C
001304 94C8              SUBB    A,#0C8H
001306 4006              JC      ?C0146?CS_SCALE_PROC
 1020: 			R_CaliState = CS_CaliState_GetCal1;
001308 904CB1            MOV     DPTR,#R_CaliState
00130B 7402              MOV     A,#02H
00130D F0                MOVX    @DPTR,A
00130E         ?C0146?CS_SCALE_PROC:
 1021: 		CS_ScaleDisplay_FreshBuf(DisplayCal1,0);
00130E E4                CLR     A
00130F FD                MOV     R5,A
001310 FC                MOV     R4,A
001311 7F81              MOV     R7,#081H
001313 D112              ACALL   _CS_ScaleDisplay_FreshBuf
 1022: 		}
001315         ?C0145?CS_SCALE_PROC:
 1023: 
 1024: 	if(R_CaliState==CS_CaliState_GetCal1)
001315 904CB1            MOV     DPTR,#R_CaliState
001318 E0                MOVX    A,@DPTR
001319 6402              XRL     A,#02H
00131B 6002              JZ      $ + 4H
00131D 61D6              AJMP    ?C0147?CS_SCALE_PROC
 1025: 		{	
 1026: 			R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);	
00131F FD                MOV     R5,A
001320 FC                MOV     R4,A
001321 FF                MOV     R7,A
001322 1233BE            LCALL   _CS_Scale_ZeroProc
001325 904E11            MOV     DPTR,#R_AD_PowerOnZero
001328 EE                MOV     A,R6
001329 F0                MOVX    @DPTR,A
00132A A3                INC     DPTR
00132B EF                MOV     A,R7
00132C F0                MOVX    @DPTR,A
 1027: 			R_AD_CaliDot1 = R_AD_BUF - R_AD_PowerOnZero;
00132D C3                CLR     C
00132E 904E10            MOV     DPTR,#R_AD_BUF+01H
001331 E0                MOVX    A,@DPTR
001332 9F                SUBB    A,R7
001333 FF                MOV     R7,A
001334 904E0F            MOV     DPTR,#R_AD_BUF
001337 E0                MOVX    A,@DPTR
001338 9E                SUBB    A,R6
001339 FE                MOV     R6,A
00133A 904CAB            MOV     DPTR,#R_AD_CaliDot1
00133D F0                MOVX    @DPTR,A
00133E A3                INC     DPTR
00133F EF                MOV     A,R7
001340 F0                MOVX    @DPTR,A
 1028: 				
 1029: 			if((R_AD_CaliDot1 < R_OpenWeight_Ad)||(R_AD_BUF < R_AD_PowerOnZero))
001341 D3                SETB    C
001342 904CB3            MOV     DPTR,#R_OpenWeight_Ad+01H
001345 E0                MOVX    A,@DPTR
001346 9F                SUBB    A,R7
001347 904CB2            MOV     DPTR,#R_OpenWeight_Ad
00134A E0                MOVX    A,@DPTR
00134B 9E                SUBB    A,R6
00134C 5015              JNC     ?C0149?CS_SCALE_PROC
00134E 904E11            MOV     DPTR,#R_AD_PowerOnZero
001351 E0                MOVX    A,@DPTR
001352 FE                MOV     R6,A
001353 A3                INC     DPTR
001354 E0                MOVX    A,@DPTR
001355 FF                MOV     R7,A
001356 C3                CLR     C
001357 904E10            MOV     DPTR,#R_AD_BUF+01H
00135A E0                MOVX    A,@DPTR
00135B 9F                SUBB    A,R7
00135C 904E0F            MOV     DPTR,#R_AD_BUF
00135F E0                MOVX    A,@DPTR
001360 9E                SUBB    A,R6
001361 5032              JNC     ?C0148?CS_SCALE_PROC
001363         ?C0149?CS_SCALE_PROC:
 1030: 				{
 1031: 				if(R_AdFilTimes>=60)
001363 C3                CLR     C
001364 904E0C            MOV     DPTR,#R_AdFilTimes+01H
001367 E0                MOVX    A,@DPTR
001368 943C              SUBB    A,#03CH
00136A 904E0B            MOV     DPTR,#R_AdFilTimes
00136D E0                MOVX    A,@DPTR
00136E 9400              SUBB    A,#00H
001370 401A              JC      ?C0150?CS_SCALE_PROC
 1032: 					{
 1033: 					CS_Scale_ZeroProc(SetPowerOnZero,R_AD_BUF);	
001372 904E0F            MOV     DPTR,#R_AD_BUF
001375 E0                MOVX    A,@DPTR
001376 FC                MOV     R4,A
001377 A3                INC     DPTR
001378 E0                MOVX    A,@DPTR
001379 FD                MOV     R5,A
00137A 7F05              MOV     R7,#05H
00137C 1233BE            LCALL   _CS_Scale_ZeroProc
 1034: 					CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
00137F 904E0F            MOV     DPTR,#R_AD_BUF
001382 E0                MOVX    A,@DPTR
001383 FC                MOV     R4,A
001384 A3                INC     DPTR
001385 E0                MOVX    A,@DPTR
001386 FD                MOV     R5,A
001387 7F01              MOV     R7,#01H
001389 122FDC            LCALL   _CS_Scale_AdcFilter
 1035: 					}
00138C         ?C0150?CS_SCALE_PROC:
 1036: 				R_AD_CaliDot1 = 0;
00138C E4                CLR     A
00138D 904CAB            MOV     DPTR,#R_AD_CaliDot1
001390 F0                MOVX    @DPTR,A
001391 A3                INC     DPTR
001392 F0                MOVX    @DPTR,A
 1037: 				}
001393 8035              SJMP    ?C0151?CS_SCALE_PROC
001395         ?C0148?CS_SCALE_PROC:
 1038: 			else
 1039: 				{
 1040: 				if((R_AD_CaliDot1> 750)&&(R_AdFilTimes>=60))
001395 D3                SETB    C
001396 904CAC            MOV     DPTR,#R_AD_CaliDot1+01H
001399 E0                MOVX    A,@DPTR
00139A 94EE              SUBB    A,#0EEH
00139C 904CAB            MOV     DPTR,#R_AD_CaliDot1
00139F E0                MOVX    A,@DPTR
0013A0 9402              SUBB    A,#02H
0013A2 4026              JC      ?C0151?CS_SCALE_PROC
0013A4 904E0C            MOV     DPTR,#R_AdFilTimes+01H
0013A7 E0                MOVX    A,@DPTR
0013A8 943C              SUBB    A,#03CH
0013AA 904E0B            MOV     DPTR,#R_AdFilTimes
0013AD E0                MOVX    A,@DPTR
0013AE 9400              SUBB    A,#00H
0013B0 4018              JC      ?C0151?CS_SCALE_PROC
 1041: 					{				
 1042: 					CS_SoftTimer(ResetSoftTimer);
0013B2 7F02              MOV     R7,#02H
0013B4 120C9B            LCALL   _CS_SoftTimer
 1043: 					CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
0013B7 904E0F            MOV     DPTR,#R_AD_BUF
0013BA E0                MOVX    A,@DPTR
0013BB FC                MOV     R4,A
0013BC A3                INC     DPTR
0013BD E0                MOVX    A,@DPTR
0013BE FD                MOV     R5,A
0013BF 7F01              MOV     R7,#01H
0013C1 122FDC            LCALL   _CS_Scale_AdcFilter
 1044: 					R_CaliState = CS_CaliState_ShowCal2;
0013C4 904CB1            MOV     DPTR,#R_CaliState
0013C7 7403              MOV     A,#03H
0013C9 F0                MOVX    @DPTR,A
 1045: 					}
 1046: 				}
0013CA         ?C0151?CS_SCALE_PROC:
 1047: 			CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_CaliDot1);
0013CA 904CAB            MOV     DPTR,#R_AD_CaliDot1
0013CD E0                MOVX    A,@DPTR
0013CE FC                MOV     R4,A
0013CF A3                INC     DPTR
0013D0 E0                MOVX    A,@DPTR
0013D1 FD                MOV     R5,A
0013D2 7F21              MOV     R7,#021H
0013D4 D112              ACALL   _CS_ScaleDisplay_FreshBuf
 1048: 			
 1049: 		}
0013D6         ?C0147?CS_SCALE_PROC:
 1050: 
 1051: 	if(R_CaliState == CS_CaliState_ShowCal2)
0013D6 904CB1            MOV     DPTR,#R_CaliState
0013D9 E0                MOVX    A,@DPTR
0013DA B40318            CJNE    A,#03H,?C0153?CS_SCALE_PROC
 1052: 		{
 1053: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 	
0013DD 7F01              MOV     R7,#01H
0013DF 120C9B            LCALL   _CS_SoftTimer
0013E2 EF                MOV     A,R7
0013E3 D3                SETB    C
0013E4 94C8              SUBB    A,#0C8H
0013E6 4006              JC      ?C0154?CS_SCALE_PROC
 1054: 			R_CaliState = CS_CaliState_GetCal2;
0013E8 904CB1            MOV     DPTR,#R_CaliState
0013EB 7404              MOV     A,#04H
0013ED F0                MOVX    @DPTR,A
0013EE         ?C0154?CS_SCALE_PROC:
 1055: 		CS_ScaleDisplay_FreshBuf(DisplayCal2,0);
0013EE E4                CLR     A
0013EF FD                MOV     R5,A
0013F0 FC                MOV     R4,A
0013F1 7F82              MOV     R7,#082H
0013F3 D112              ACALL   _CS_ScaleDisplay_FreshBuf
 1056: 		}
0013F5         ?C0153?CS_SCALE_PROC:
 1057: 	
 1058: 	if(R_CaliState==CS_CaliState_GetCal2)
0013F5 904CB1            MOV     DPTR,#R_CaliState
0013F8 E0                MOVX    A,@DPTR
0013F9 6404              XRL     A,#04H
0013FB 6002              JZ      $ + 4H
0013FD 819B              AJMP    ?C0155?CS_SCALE_PROC
 1059: 		{		
 1060: 			R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);		
0013FF FD                MOV     R5,A
001400 FC                MOV     R4,A
001401 FF                MOV     R7,A
001402 1233BE            LCALL   _CS_Scale_ZeroProc
001405 904E11            MOV     DPTR,#R_AD_PowerOnZero
001408 EE                MOV     A,R6
001409 F0                MOVX    @DPTR,A
00140A A3                INC     DPTR
00140B EF                MOV     A,R7
00140C F0                MOVX    @DPTR,A
 1061: 			weight_temp = R_AD_BUF - R_AD_PowerOnZero;
00140D C3                CLR     C
00140E 904E10            MOV     DPTR,#R_AD_BUF+01H
001411 E0                MOVX    A,@DPTR
001412 9F                SUBB    A,R7
001413 FF                MOV     R7,A
001414 904E0F            MOV     DPTR,#R_AD_BUF
001417 E0                MOVX    A,@DPTR
001418 9E                SUBB    A,R6
001419 FE                MOV     R6,A
00141A 904E0D            MOV     DPTR,#weight_temp
00141D F0                MOVX    @DPTR,A
00141E A3                INC     DPTR
00141F EF                MOV     A,R7
001420 F0                MOVX    @DPTR,A
 1062: 					
 1063: 			if((weight_temp < R_AD_CaliDot1)||(R_AD_BUF < R_AD_PowerOnZero))
001421 904CAB            MOV     DPTR,#R_AD_CaliDot1
001424 E0                MOVX    A,@DPTR
001425 FC                MOV     R4,A
001426 A3                INC     DPTR
001427 E0                MOVX    A,@DPTR
001428 FD                MOV     R5,A
001429 D3                SETB    C
00142A 9F                SUBB    A,R7
00142B EC                MOV     A,R4
00142C 9E                SUBB    A,R6
00142D 5015              JNC     ?C0157?CS_SCALE_PROC
00142F 904E11            MOV     DPTR,#R_AD_PowerOnZero
001432 E0                MOVX    A,@DPTR
001433 FE                MOV     R6,A
001434 A3                INC     DPTR
001435 E0                MOVX    A,@DPTR
001436 FF                MOV     R7,A
001437 C3                CLR     C
001438 904E10            MOV     DPTR,#R_AD_BUF+01H
00143B E0                MOVX    A,@DPTR
00143C 9F                SUBB    A,R7
00143D 904E0F            MOV     DPTR,#R_AD_BUF
001440 E0                MOVX    A,@DPTR
001441 9E                SUBB    A,R6
001442 5009              JNC     ?C0156?CS_SCALE_PROC
001444         ?C0157?CS_SCALE_PROC:
 1064: 				{
 1065: 				R_AD_CaliDot2 = 0;
001444 E4                CLR     A
001445 904CAD            MOV     DPTR,#R_AD_CaliDot2
001448 F0                MOVX    @DPTR,A
001449 A3                INC     DPTR
00144A F0                MOVX    @DPTR,A
 1066: 				}
00144B 8042              SJMP    ?C0158?CS_SCALE_PROC
00144D         ?C0156?CS_SCALE_PROC:
 1067: 			else
 1068: 				{
 1069: 				R_AD_CaliDot2 = weight_temp -R_AD_CaliDot1;
00144D C3                CLR     C
00144E 904E0E            MOV     DPTR,#weight_temp+01H
001451 E0                MOVX    A,@DPTR
001452 9D                SUBB    A,R5
001453 FF                MOV     R7,A
001454 904E0D            MOV     DPTR,#weight_temp
001457 E0                MOVX    A,@DPTR
001458 9C                SUBB    A,R4
001459 FE                MOV     R6,A
00145A 904CAD            MOV     DPTR,#R_AD_CaliDot2
00145D F0                MOVX    @DPTR,A
00145E A3                INC     DPTR
00145F EF                MOV     A,R7
001460 F0                MOVX    @DPTR,A
 1070: 			
 1071: 				if((R_AD_CaliDot2> 750)&& (R_AdFilTimes>=60))
001461 D3                SETB    C
001462 94EE              SUBB    A,#0EEH
001464 EE                MOV     A,R6
001465 9402              SUBB    A,#02H
001467 4026              JC      ?C0158?CS_SCALE_PROC
001469 904E0C            MOV     DPTR,#R_AdFilTimes+01H
00146C E0                MOVX    A,@DPTR
00146D 943C              SUBB    A,#03CH
00146F 904E0B            MOV     DPTR,#R_AdFilTimes
001472 E0                MOVX    A,@DPTR
001473 9400              SUBB    A,#00H
001475 4018              JC      ?C0158?CS_SCALE_PROC
 1072: 					{
 1073: 					CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
001477 904E0F            MOV     DPTR,#R_AD_BUF
00147A E0                MOVX    A,@DPTR
00147B FC                MOV     R4,A
00147C A3                INC     DPTR
00147D E0                MOVX    A,@DPTR
00147E FD                MOV     R5,A
00147F 7F01              MOV     R7,#01H
001481 122FDC            LCALL   _CS_Scale_AdcFilter
 1074: 					CS_SoftTimer(ResetSoftTimer);
001484 7F02              MOV     R7,#02H
001486 120C9B            LCALL   _CS_SoftTimer
 1075: 					R_CaliState = CS_CaliState_ShowCal3;
001489 904CB1            MOV     DPTR,#R_CaliState
00148C 7405              MOV     A,#05H
00148E F0                MOVX    @DPTR,A
 1076: 					}
 1077: 				}
00148F         ?C0158?CS_SCALE_PROC:
 1078: 			CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_CaliDot2);
00148F 904CAD            MOV     DPTR,#R_AD_CaliDot2
001492 E0                MOVX    A,@DPTR
001493 FC                MOV     R4,A
001494 A3                INC     DPTR
001495 E0                MOVX    A,@DPTR
001496 FD                MOV     R5,A
001497 7F21              MOV     R7,#021H
001499 D112              ACALL   _CS_ScaleDisplay_FreshBuf
 1079: 		}
00149B         ?C0155?CS_SCALE_PROC:
 1080: 
 1081: 	if(R_CaliState == CS_CaliState_ShowCal3)
00149B 904CB1            MOV     DPTR,#R_CaliState
00149E E0                MOVX    A,@DPTR
00149F B40518            CJNE    A,#05H,?C0160?CS_SCALE_PROC
 1082: 		{
 1083: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 	
0014A2 7F01              MOV     R7,#01H
0014A4 120C9B            LCALL   _CS_SoftTimer
0014A7 EF                MOV     A,R7
0014A8 D3                SETB    C
0014A9 94C8              SUBB    A,#0C8H
0014AB 4006              JC      ?C0161?CS_SCALE_PROC
 1084: 			R_CaliState = CS_CaliState_GetCal3;
0014AD 904CB1            MOV     DPTR,#R_CaliState
0014B0 7406              MOV     A,#06H
0014B2 F0                MOVX    @DPTR,A
0014B3         ?C0161?CS_SCALE_PROC:
 1085: 		CS_ScaleDisplay_FreshBuf(DisplayCal3,0);
0014B3 E4                CLR     A
0014B4 FD                MOV     R5,A
0014B5 FC                MOV     R4,A
0014B6 7F83              MOV     R7,#083H
0014B8 D112              ACALL   _CS_ScaleDisplay_FreshBuf
 1086: 		}
0014BA         ?C0160?CS_SCALE_PROC:
 1087: 	
 1088: 	if(R_CaliState==CS_CaliState_GetCal3)
0014BA 904CB1            MOV     DPTR,#R_CaliState
0014BD E0                MOVX    A,@DPTR
0014BE 6406              XRL     A,#06H
0014C0 6002              JZ      $ + 4H
0014C2 A179              AJMP    ?C0162?CS_SCALE_PROC
 1089: 		{		
 1090: 			R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);		
0014C4 FD                MOV     R5,A
0014C5 FC                MOV     R4,A
0014C6 FF                MOV     R7,A
0014C7 1233BE            LCALL   _CS_Scale_ZeroProc
0014CA 904E11            MOV     DPTR,#R_AD_PowerOnZero
0014CD EE                MOV     A,R6
0014CE F0                MOVX    @DPTR,A
0014CF A3                INC     DPTR
0014D0 EF                MOV     A,R7
0014D1 F0                MOVX    @DPTR,A
 1091: 			weight_temp = R_AD_BUF - R_AD_PowerOnZero;
0014D2 C3                CLR     C
0014D3 904E10            MOV     DPTR,#R_AD_BUF+01H
0014D6 E0                MOVX    A,@DPTR
0014D7 9F                SUBB    A,R7
0014D8 FF                MOV     R7,A
0014D9 904E0F            MOV     DPTR,#R_AD_BUF
0014DC E0                MOVX    A,@DPTR
0014DD 9E                SUBB    A,R6
0014DE FE                MOV     R6,A
0014DF 904E0D            MOV     DPTR,#weight_temp
0014E2 F0                MOVX    @DPTR,A
0014E3 A3                INC     DPTR
0014E4 EF                MOV     A,R7
0014E5 F0                MOVX    @DPTR,A
 1092: 					
 1093: 			if((weight_temp < R_AD_CaliDot1)||(R_AD_BUF < R_AD_PowerOnZero))
0014E6 904CAB            MOV     DPTR,#R_AD_CaliDot1
0014E9 E0                MOVX    A,@DPTR
0014EA FC                MOV     R4,A
0014EB A3                INC     DPTR
0014EC E0                MOVX    A,@DPTR
0014ED FD                MOV     R5,A
0014EE D3                SETB    C
0014EF 9F                SUBB    A,R7
0014F0 EC                MOV     A,R4
0014F1 9E                SUBB    A,R6
0014F2 5015              JNC     ?C0164?CS_SCALE_PROC
0014F4 904E11            MOV     DPTR,#R_AD_PowerOnZero
0014F7 E0                MOVX    A,@DPTR
0014F8 FE                MOV     R6,A
0014F9 A3                INC     DPTR
0014FA E0                MOVX    A,@DPTR
0014FB FF                MOV     R7,A
0014FC C3                CLR     C
0014FD 904E10            MOV     DPTR,#R_AD_BUF+01H
001500 E0                MOVX    A,@DPTR
001501 9F                SUBB    A,R7
001502 904E0F            MOV     DPTR,#R_AD_BUF
001505 E0                MOVX    A,@DPTR
001506 9E                SUBB    A,R6
001507 5009              JNC     ?C0163?CS_SCALE_PROC
001509         ?C0164?CS_SCALE_PROC:
 1094: 				{
 1095: 				R_AD_CaliDot3 = 0;
001509 E4                CLR     A
00150A 904CAF            MOV     DPTR,#R_AD_CaliDot3
00150D F0                MOVX    @DPTR,A
00150E A3                INC     DPTR
00150F F0                MOVX    @DPTR,A
 1096: 				}
001510 805B              SJMP    ?C0165?CS_SCALE_PROC
001512         ?C0163?CS_SCALE_PROC:
 1097: 			else
 1098: 				{
 1099: 				weight_temp = weight_temp -R_AD_CaliDot1;
001512 C3                CLR     C
001513 904E0E            MOV     DPTR,#weight_temp+01H
001516 E0                MOVX    A,@DPTR
001517 9D                SUBB    A,R5
001518 FF                MOV     R7,A
001519 904E0D            MOV     DPTR,#weight_temp
00151C E0                MOVX    A,@DPTR
00151D 9C                SUBB    A,R4
00151E FE                MOV     R6,A
00151F F0                MOVX    @DPTR,A
001520 A3                INC     DPTR
001521 EF                MOV     A,R7
001522 F0                MOVX    @DPTR,A
 1100: 
 1101: 				if(weight_temp < R_AD_CaliDot2)
001523 904CAD            MOV     DPTR,#R_AD_CaliDot2
001526 E0                MOVX    A,@DPTR
001527 FC                MOV     R4,A
001528 A3                INC     DPTR
001529 E0                MOVX    A,@DPTR
00152A FD                MOV     R5,A
00152B D3                SETB    C
00152C 9F                SUBB    A,R7
00152D EC                MOV     A,R4
00152E 9E                SUBB    A,R6
00152F 4007              JC      ?C0166?CS_SCALE_PROC
 1102: 					{
 1103: 					R_AD_CaliDot3 = 0;
001531 E4                CLR     A
001532 A3                INC     DPTR
001533 F0                MOVX    @DPTR,A
001534 A3                INC     DPTR
001535 F0                MOVX    @DPTR,A
 1104: 					
 1105: 					}
001536 8035              SJMP    ?C0165?CS_SCALE_PROC
001538         ?C0166?CS_SCALE_PROC:
 1106: 				else
 1107: 					{
 1108: 				R_AD_CaliDot3 = weight_temp -R_AD_CaliDot2;
001538 C3                CLR     C
001539 904E0E            MOV     DPTR,#weight_temp+01H
00153C E0                MOVX    A,@DPTR
00153D 9D                SUBB    A,R5
00153E FF                MOV     R7,A
00153F 904E0D            MOV     DPTR,#weight_temp
001542 E0                MOVX    A,@DPTR
001543 9C                SUBB    A,R4
001544 FE                MOV     R6,A
001545 904CAF            MOV     DPTR,#R_AD_CaliDot3
001548 F0                MOVX    @DPTR,A
001549 A3                INC     DPTR
00154A EF                MOV     A,R7
00154B F0                MOVX    @DPTR,A
 1109: 			
 1110: 				if((R_AD_CaliDot3> 750)&& (R_AdFilTimes>=60))
00154C D3                SETB    C
00154D 94EE              SUBB    A,#0EEH
00154F EE                MOV     A,R6
001550 9402              SUBB    A,#02H
001552 4019              JC      ?C0165?CS_SCALE_PROC
001554 904E0C            MOV     DPTR,#R_AdFilTimes+01H
001557 E0                MOVX    A,@DPTR
001558 943C              SUBB    A,#03CH
00155A 904E0B            MOV     DPTR,#R_AdFilTimes
00155D E0                MOVX    A,@DPTR
00155E 9400              SUBB    A,#00H
001560 400B              JC      ?C0165?CS_SCALE_PROC
 1111: 					{
 1112: 					CS_SoftTimer(ResetSoftTimer);
001562 7F02              MOV     R7,#02H
001564 120C9B            LCALL   _CS_SoftTimer
 1113: 					R_CaliState = CS_CaliState_ShowCal4;
001567 904CB1            MOV     DPTR,#R_CaliState
00156A 7407              MOV     A,#07H
00156C F0                MOVX    @DPTR,A
 1114: 					}
 1115: 					}
 1116: 				}
00156D         ?C0165?CS_SCALE_PROC:
 1117: 			CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_CaliDot3);
00156D 904CAF            MOV     DPTR,#R_AD_CaliDot3
001570 E0                MOVX    A,@DPTR
001571 FC                MOV     R4,A
001572 A3                INC     DPTR
001573 E0                MOVX    A,@DPTR
001574 FD                MOV     R5,A
001575 7F21              MOV     R7,#021H
001577 D112              ACALL   _CS_ScaleDisplay_FreshBuf
 1118: 		}
001579         ?C0162?CS_SCALE_PROC:
 1119: 	
 1120: 	if(R_CaliState == CS_CaliState_ShowCal4)
001579 904CB1            MOV     DPTR,#R_CaliState
00157C E0                MOVX    A,@DPTR
00157D B40718            CJNE    A,#07H,?C0169?CS_SCALE_PROC
 1121: 		{
 1122: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 
001580 7F01              MOV     R7,#01H
001582 120C9B            LCALL   _CS_SoftTimer
001585 EF                MOV     A,R7
001586 D3                SETB    C
001587 94C8              SUBB    A,#0C8H
001589 4006              JC      ?C0170?CS_SCALE_PROC
 1123: 			R_CaliState = CS_CaliState_SaveData;
00158B 904CB1            MOV     DPTR,#R_CaliState
00158E 7408              MOV     A,#08H
001590 F0                MOVX    @DPTR,A
001591         ?C0170?CS_SCALE_PROC:
 1124: 		CS_ScaleDisplay_FreshBuf(DisplayCal4,0);
001591 E4                CLR     A
001592 FD                MOV     R5,A
001593 FC                MOV     R4,A
001594 7F84              MOV     R7,#084H
001596 D112              ACALL   _CS_ScaleDisplay_FreshBuf
 1125: 		}
001598         ?C0169?CS_SCALE_PROC:
 1126: 	
 1127: 	if(R_CaliState==CS_CaliState_SaveData)
001598 904CB1            MOV     DPTR,#R_CaliState
00159B E0                MOVX    A,@DPTR
00159C 6408              XRL     A,#08H
00159E 706E              JNZ     ?C0171?CS_SCALE_PROC
 1128: 		{
 1129: 		
 1130: 		R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);
0015A0 FD                MOV     R5,A
0015A1 FC                MOV     R4,A
0015A2 FF                MOV     R7,A
0015A3 1233BE            LCALL   _CS_Scale_ZeroProc
0015A6 904E11            MOV     DPTR,#R_AD_PowerOnZero
0015A9 EE                MOV     A,R6
0015AA F0                MOVX    @DPTR,A
0015AB A3                INC     DPTR
0015AC EF                MOV     A,R7
0015AD F0                MOVX    @DPTR,A
 1131: 		CS_Scale_ZeroProc(SetRunningZero,R_AD_PowerOnZero);
0015AE 904E11            MOV     DPTR,#R_AD_PowerOnZero
0015B1 E0                MOVX    A,@DPTR
0015B2 FC                MOV     R4,A
0015B3 A3                INC     DPTR
0015B4 E0                MOVX    A,@DPTR
0015B5 FD                MOV     R5,A
0015B6 7F06              MOV     R7,#06H
0015B8 1233BE            LCALL   _CS_Scale_ZeroProc
 1132: 		R_Scale_state = CS_Scale_state_weighting;
0015BB 904CC5            MOV     DPTR,#R_Scale_state
0015BE 7401              MOV     A,#01H
0015C0 F0                MOVX    @DPTR,A
 1133: 		R_OpenWeight_Ad	=  R_AD_CaliDot1/10;
0015C1 904CAB            MOV     DPTR,#R_AD_CaliDot1
0015C4 E0                MOVX    A,@DPTR
0015C5 FA                MOV     R2,A
0015C6 A3                INC     DPTR
0015C7 E0                MOVX    A,@DPTR
0015C8 7C00              MOV     R4,#00H
0015CA 7D0A              MOV     R5,#0AH
0015CC FF                MOV     R7,A
0015CD AE02              MOV     R6,AR2
0015CF 120173            LCALL   ?C?UIDIV
0015D2 904CB2            MOV     DPTR,#R_OpenWeight_Ad
0015D5 EE                MOV     A,R6
0015D6 F0                MOVX    @DPTR,A
0015D7 A3                INC     DPTR
0015D8 EF                MOV     A,R7
0015D9 F0                MOVX    @DPTR,A
 1134: 
 1135: 		/*
 1136: 		R_Debug_temp=R_AD_CaliDot2;
 1137: 		CS_ScaleDisplay_Debug();
 1138: 		while(1);
 1139: 		*/
 1140: 		
 1141: 		*(mem_sensor_buf )= HI_UINT16(R_AD_CaliDot1);
0015DA EA                MOV     A,R2
0015DB 904C08            MOV     DPTR,#04C08H
0015DE F0                MOVX    @DPTR,A
 1142: 		*(mem_sensor_buf+1) = LO_UINT16(R_AD_CaliDot1);
0015DF 904CAB            MOV     DPTR,#R_AD_CaliDot1
0015E2 E0                MOVX    A,@DPTR
0015E3 A3                INC     DPTR
0015E4 E0                MOVX    A,@DPTR
0015E5 904C09            MOV     DPTR,#04C09H
0015E8 F0                MOVX    @DPTR,A
 1143: 		*(mem_sensor_buf+2 )= HI_UINT16(R_AD_CaliDot2);
0015E9 904CAD            MOV     DPTR,#R_AD_CaliDot2
0015EC E0                MOVX    A,@DPTR
0015ED FC                MOV     R4,A
0015EE A3                INC     DPTR
0015EF E0                MOVX    A,@DPTR
0015F0 FD                MOV     R5,A
0015F1 EC                MOV     A,R4
0015F2 904C0A            MOV     DPTR,#04C0AH
0015F5 F0                MOVX    @DPTR,A
 1144: 		*(mem_sensor_buf+3) = LO_UINT16(R_AD_CaliDot2);
0015F6 ED                MOV     A,R5
0015F7 A3                INC     DPTR
0015F8 F0                MOVX    @DPTR,A
 1145: 		*(mem_sensor_buf+4 )= HI_UINT16(R_AD_CaliDot3);
0015F9 904CAF            MOV     DPTR,#R_AD_CaliDot3
0015FC E0                MOVX    A,@DPTR
0015FD FC                MOV     R4,A
0015FE A3                INC     DPTR
0015FF E0                MOVX    A,@DPTR
001600 FD                MOV     R5,A
001601 EC                MOV     A,R4
001602 904C0C            MOV     DPTR,#04C0CH
001605 F0                MOVX    @DPTR,A
 1146: 		*(mem_sensor_buf+5) = LO_UINT16(R_AD_CaliDot3);
001606 ED                MOV     A,R5
001607 A3                INC     DPTR
001608 F0                MOVX    @DPTR,A
 1147: 		SpiFlashOperator(CS_CMD_WRITE_FLASH);
001609 7F41              MOV     R7,#041H
00160B 121D86            LCALL   _SpiFlashOperator
 1148: 
 1149: 		
 1150: 
 1151: 		}
00160E         ?C0171?CS_SCALE_PROC:
 1152: 	return 0;
00160E E4                CLR     A
00160F FE                MOV     R6,A
001610 FF                MOV     R7,A
 1153: 	
 1154: }
001611 22                RET     
----- FUNCTION _CS_Scale_CaliProc (END) -------


----- FUNCTION _CS_ScaleDisplay_FreshBuf (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
   72: void CS_ScaleDisplay_FreshBuf(u8_t option,u16_t showdata)
   73: {
;---- Variable 'showdata' assigned to Register 'R4/R5' ----
001612 904E6D            MOV     DPTR,#option
001615 EF                MOV     A,R7
001616 F0                MOVX    @DPTR,A
   74: 	static	u8_t	data_buf[5];
   75: 
   76: 	//////////////////////////////////////////
   77: 	//数字部分赋值
   78: 	if(option==DisplayOverLoad)
001617 BF850F            CJNE    R7,#085H,?C0011?CS_SCALEDISPLAY
   79: 	{
   80: 	data_buf[0]=Lcdnull_Num;
00161A 904D18            MOV     DPTR,#data_buf
00161D 7415              MOV     A,#015H
00161F F0                MOVX    @DPTR,A
   81: 	data_buf[1]=Lcdup_Num;
001620 A3                INC     DPTR
001621 04                INC     A
001622 F0                MOVX    @DPTR,A
   82: 	data_buf[2]=Lcdup_Num;
001623 A3                INC     DPTR
001624 F0                MOVX    @DPTR,A
   83: 	data_buf[3]=Lcdup_Num;
001625 A3                INC     DPTR
001626 F0                MOVX    @DPTR,A
   84: 	data_buf[4]=Lcdup_Num;
001627 A3                INC     DPTR
001628 F0                MOVX    @DPTR,A
   85: 	}
001629         ?C0011?CS_SCALEDISPLAY:
   86: 
   87: 	if(option==DisplayLowBat)
001629 904E6D            MOV     DPTR,#option
00162C E0                MOVX    A,@DPTR
00162D FF                MOV     R7,A
00162E B48614            CJNE    A,#086H,?C0012?CS_SCALEDISPLAY
   88: 	{
   89: 	data_buf[0]=0;
001631 E4                CLR     A
001632 904D18            MOV     DPTR,#data_buf
001635 F0                MOVX    @DPTR,A
   90: 	data_buf[1]=Lcdnull_Num;
001636 A3                INC     DPTR
001637 7415              MOV     A,#015H
001639 F0                MOVX    @DPTR,A
   91: 	data_buf[2]=LcdchL_Num;
00163A A3                INC     DPTR
00163B 7410              MOV     A,#010H
00163D F0                MOVX    @DPTR,A
   92: 	data_buf[3]=Lcdcho_Num;
00163E A3                INC     DPTR
00163F 04                INC     A
001640 F0                MOVX    @DPTR,A
   93: 	data_buf[4]=Lcdnull_Num;
001641 A3                INC     DPTR
001642 7415              MOV     A,#015H
001644 F0                MOVX    @DPTR,A
   94: 	}
001645         ?C0012?CS_SCALEDISPLAY:
   95: 
   96: 	if(option==DisplayZeroErr)
001645 EF                MOV     A,R7
001646 B48712            CJNE    A,#087H,?C0013?CS_SCALEDISPLAY
   97: 	{
   98: 	data_buf[0]=Lcdnull_Num;
001649 904D18            MOV     DPTR,#data_buf
00164C 7415              MOV     A,#015H
00164E F0                MOVX    @DPTR,A
   99: 	data_buf[1]=Lcdnull_Num;
00164F A3                INC     DPTR
001650 F0                MOVX    @DPTR,A
  100: 	data_buf[2]=LcdchC_Num;
001651 A3                INC     DPTR
001652 740C              MOV     A,#0CH
001654 F0                MOVX    @DPTR,A
  101: 	data_buf[3]=Lcdnull_Num;
001655 A3                INC     DPTR
001656 7415              MOV     A,#015H
001658 F0                MOVX    @DPTR,A
  102: 	data_buf[4]=Lcdnull_Num;
001659 A3                INC     DPTR
00165A F0                MOVX    @DPTR,A
  103: 	}
00165B         ?C0013?CS_SCALEDISPLAY:
  104: 	
  105: 	if(option==DisplayCal1||option==DisplayCal2||option==DisplayCal3||option==DisplayCal4)
00165B EF                MOV     A,R7
00165C 6481              XRL     A,#081H
00165E 600F              JZ      ?C0015?CS_SCALEDISPLAY
001660 EF                MOV     A,R7
001661 6482              XRL     A,#082H
001663 600A              JZ      ?C0015?CS_SCALEDISPLAY
001665 EF                MOV     A,R7
001666 6483              XRL     A,#083H
001668 6005              JZ      ?C0015?CS_SCALEDISPLAY
00166A EF                MOV     A,R7
00166B 6484              XRL     A,#084H
00166D 703E              JNZ     ?C0014?CS_SCALEDISPLAY
00166F         ?C0015?CS_SCALEDISPLAY:
  106: 	{
  107: 	data_buf[0]=0;
00166F E4                CLR     A
001670 904D18            MOV     DPTR,#data_buf
001673 F0                MOVX    @DPTR,A
  108: 	data_buf[1]=LcdchC_Num;
001674 A3                INC     DPTR
001675 740C              MOV     A,#0CH
001677 F0                MOVX    @DPTR,A
  109: 	data_buf[2]=LcdchA_Num;
001678 A3                INC     DPTR
001679 740A              MOV     A,#0AH
00167B F0                MOVX    @DPTR,A
  110: 	data_buf[3]=LcdchL_Num;
00167C A3                INC     DPTR
00167D 7410              MOV     A,#010H
00167F F0                MOVX    @DPTR,A
  111: 		if(option==DisplayCal1)
001680 EF                MOV     A,R7
001681 B48104            CJNE    A,#081H,?C0016?CS_SCALEDISPLAY
  112: 			data_buf[4]=1;
001684 A3                INC     DPTR
001685 7401              MOV     A,#01H
001687 F0                MOVX    @DPTR,A
001688         ?C0016?CS_SCALEDISPLAY:
  113: 		if(option==DisplayCal2)
001688 904E6D            MOV     DPTR,#option
00168B E0                MOVX    A,@DPTR
00168C B48206            CJNE    A,#082H,?C0017?CS_SCALEDISPLAY
  114: 			data_buf[4]=2;
00168F 904D1C            MOV     DPTR,#data_buf+04H
001692 7402              MOV     A,#02H
001694 F0                MOVX    @DPTR,A
001695         ?C0017?CS_SCALEDISPLAY:
  115: 		if(option==DisplayCal3)
001695 904E6D            MOV     DPTR,#option
001698 E0                MOVX    A,@DPTR
001699 FF                MOV     R7,A
00169A B48306            CJNE    A,#083H,?C0018?CS_SCALEDISPLAY
  116: 			data_buf[4]=3;
00169D 904D1C            MOV     DPTR,#data_buf+04H
0016A0 7403              MOV     A,#03H
0016A2 F0                MOVX    @DPTR,A
0016A3         ?C0018?CS_SCALEDISPLAY:
  117: 		if(option==DisplayCal4)
0016A3 EF                MOV     A,R7
0016A4 B48406            CJNE    A,#084H,?C0014?CS_SCALEDISPLAY
  118: 			data_buf[4]=4;
0016A7 904D1C            MOV     DPTR,#data_buf+04H
0016AA 7404              MOV     A,#04H
0016AC F0                MOVX    @DPTR,A
  119: 	}
0016AD         ?C0014?CS_SCALEDISPLAY:
  120: 
  121: 	if(option==DisplayData||option==Displaykg||option==Displaylb||option==Displayjin||option==Displaygongjin)
0016AD 904E6D            MOV     DPTR,#option
0016B0 E0                MOVX    A,@DPTR
0016B1 FF                MOV     R7,A
0016B2 6421              XRL     A,#021H
0016B4 6014              JZ      ?C0021?CS_SCALEDISPLAY
0016B6 EF                MOV     A,R7
0016B7 6441              XRL     A,#041H
0016B9 600F              JZ      ?C0021?CS_SCALEDISPLAY
0016BB EF                MOV     A,R7
0016BC 6442              XRL     A,#042H
0016BE 600A              JZ      ?C0021?CS_SCALEDISPLAY
0016C0 EF                MOV     A,R7
0016C1 6443              XRL     A,#043H
0016C3 6005              JZ      ?C0021?CS_SCALEDISPLAY
0016C5 EF                MOV     A,R7
0016C6 6444              XRL     A,#044H
0016C8 705F              JNZ     ?C0020?CS_SCALEDISPLAY
0016CA         ?C0021?CS_SCALEDISPLAY:
  122: 	{
  123: 	CS_ScaleDisplay_HexToBcd(showdata,data_buf);
0016CA AE04              MOV     R6,AR4
0016CC AF05              MOV     R7,AR5
0016CE 7B01              MOV     R3,#01H
0016D0 7A4D              MOV     R2,#HIGH data_buf
0016D2 7918              MOV     R1,#LOW data_buf
0016D4 123D0F            LCALL   _CS_ScaleDisplay_HexToBcd
  124: 	
  125: 	if(option&showhigh4)		//显示高4位
0016D7 904E6D            MOV     DPTR,#option
0016DA E0                MOVX    A,@DPTR
0016DB FF                MOV     R7,A
0016DC 30E61D            JNB     ACC.6,?C0022?CS_SCALEDISPLAY
  126: 		{
  127: 		data_buf[4]=data_buf[3];
0016DF 904D1B            MOV     DPTR,#data_buf+03H
0016E2 E0                MOVX    A,@DPTR
0016E3 A3                INC     DPTR
0016E4 F0                MOVX    @DPTR,A
  128: 		data_buf[3]=data_buf[2];
0016E5 904D1A            MOV     DPTR,#data_buf+02H
0016E8 E0                MOVX    A,@DPTR
0016E9 A3                INC     DPTR
0016EA F0                MOVX    @DPTR,A
  129: 		data_buf[2]=data_buf[1];
0016EB 904D19            MOV     DPTR,#data_buf+01H
0016EE E0                MOVX    A,@DPTR
0016EF A3                INC     DPTR
0016F0 F0                MOVX    @DPTR,A
  130: 		data_buf[1]=data_buf[0];
0016F1 904D18            MOV     DPTR,#data_buf
0016F4 E0                MOVX    A,@DPTR
0016F5 A3                INC     DPTR
0016F6 F0                MOVX    @DPTR,A
  131: 		data_buf[0]=0;
0016F7 E4                CLR     A
0016F8 904D18            MOV     DPTR,#data_buf
0016FB F0                MOVX    @DPTR,A
  132: 		}
0016FC         ?C0022?CS_SCALEDISPLAY:
  133: 
  134: 		if(data_buf[0]==0 && data_buf[1]==0 )	
0016FC 904D18            MOV     DPTR,#data_buf
0016FF E0                MOVX    A,@DPTR
001700 7007              JNZ     ?C0023?CS_SCALEDISPLAY
001702 A3                INC     DPTR
001703 E0                MOVX    A,@DPTR
001704 7003              JNZ     ?C0023?CS_SCALEDISPLAY
  135: 			data_buf[1]=Lcdnull_Num;
001706 7415              MOV     A,#015H
001708 F0                MOVX    @DPTR,A
001709         ?C0023?CS_SCALEDISPLAY:
  136: 		if(data_buf[1]==Lcdnull_Num && data_buf[2]==0 )	
001709 904D19            MOV     DPTR,#data_buf+01H
00170C E0                MOVX    A,@DPTR
00170D B41507            CJNE    A,#015H,?C0024?CS_SCALEDISPLAY
001710 A3                INC     DPTR
001711 E0                MOVX    A,@DPTR
001712 7003              JNZ     ?C0024?CS_SCALEDISPLAY
  137: 			data_buf[2]=Lcdnull_Num;
001714 7415              MOV     A,#015H
001716 F0                MOVX    @DPTR,A
001717         ?C0024?CS_SCALEDISPLAY:
  138: 
  139: 		if(option&ShowNoDot)	//没有小数点还要判断多一位数字为0时是否不显示
001717 EF                MOV     A,R7
001718 30E50E            JNB     ACC.5,?C0020?CS_SCALEDISPLAY
  140: 			{
  141: 			if(data_buf[2]==Lcdnull_Num && data_buf[3]==0 )	
00171B 904D1A            MOV     DPTR,#data_buf+02H
00171E E0                MOVX    A,@DPTR
00171F B41507            CJNE    A,#015H,?C0020?CS_SCALEDISPLAY
001722 A3                INC     DPTR
001723 E0                MOVX    A,@DPTR
001724 7003              JNZ     ?C0020?CS_SCALEDISPLAY
  142: 				data_buf[3]=Lcdnull_Num;
001726 7415              MOV     A,#015H
001728 F0                MOVX    @DPTR,A
  143: 			}
  144: 	}
001729         ?C0020?CS_SCALEDISPLAY:
  145: 	
  146: 	CS_Lcd_Send_Data[0] = CS_ScaleDisplay_LookUpTable(data_buf[1]);
001729 904D19            MOV     DPTR,#data_buf+01H
00172C E0                MOVX    A,@DPTR
00172D FF                MOV     R7,A
00172E F1CE              ACALL   _CS_ScaleDisplay_LookUpTable
001730 904D23            MOV     DPTR,#CS_Lcd_Send_Data
001733 EF                MOV     A,R7
001734 F0                MOVX    @DPTR,A
  147: 	CS_Lcd_Send_Data[1] = CS_ScaleDisplay_LookUpTable(data_buf[2]);
001735 904D1A            MOV     DPTR,#data_buf+02H
001738 E0                MOVX    A,@DPTR
001739 FF                MOV     R7,A
00173A F1CE              ACALL   _CS_ScaleDisplay_LookUpTable
00173C 904D24            MOV     DPTR,#CS_Lcd_Send_Data+01H
00173F EF                MOV     A,R7
001740 F0                MOVX    @DPTR,A
  148: 	CS_Lcd_Send_Data[2] = CS_ScaleDisplay_LookUpTable(data_buf[3]);
001741 904D1B            MOV     DPTR,#data_buf+03H
001744 E0                MOVX    A,@DPTR
001745 FF                MOV     R7,A
001746 F1CE              ACALL   _CS_ScaleDisplay_LookUpTable
001748 904D25            MOV     DPTR,#CS_Lcd_Send_Data+02H
00174B EF                MOV     A,R7
00174C F0                MOVX    @DPTR,A
  149: 	CS_Lcd_Send_Data[3] = CS_ScaleDisplay_LookUpTable(data_buf[4]);
00174D 904D1C            MOV     DPTR,#data_buf+04H
001750 E0                MOVX    A,@DPTR
001751 FF                MOV     R7,A
001752 F1CE              ACALL   _CS_ScaleDisplay_LookUpTable
001754 904D26            MOV     DPTR,#CS_Lcd_Send_Data+03H
001757 EF                MOV     A,R7
001758 F0                MOVX    @DPTR,A
  150: 			
  151: 	CS_ScaleDisplay_LcdBuf_rShift4();	//显示缓存跟实际液晶的逻辑对应有出入还要微调
001759 123CD3            LCALL   CS_ScaleDisplay_LcdBuf_rShift4
  152: 										//显示缓存数字还有符号部分的位置
  153: 
  154: 	//////////////////////////////////////////
  155: 	//符号部分赋值
  156: 	CS_Lcd_Send_Data[4]&=0x0f;			//最高位用蓝牙标志辅助显示
00175C 904D27            MOV     DPTR,#CS_Lcd_Send_Data+04H
00175F E0                MOVX    A,@DPTR
001760 540F              ANL     A,#0FH
001762 F0                MOVX    @DPTR,A
  157: 	if(option==DisplayData)
001763 904E6D            MOV     DPTR,#option
001766 E0                MOVX    A,@DPTR
001767 FD                MOV     R5,A
001768 B4210D            CJNE    A,#021H,?C0027?CS_SCALEDISPLAY
  158: 		{		
  159: 		if(data_buf[0]!=0)
00176B 904D18            MOV     DPTR,#data_buf
00176E E0                MOVX    A,@DPTR
00176F 6007              JZ      ?C0027?CS_SCALEDISPLAY
  160: 		CS_Lcd_Buf_SIGN |=S_BLE;
001771 904D23            MOV     DPTR,#CS_Lcd_Send_Data
001774 E0                MOVX    A,@DPTR
001775 4402              ORL     A,#02H
001777 F0                MOVX    @DPTR,A
  161: 		}	
001778         ?C0027?CS_SCALEDISPLAY:
  162: 	
  163: 	if(option==Displaykg)
001778 ED                MOV     A,R5
001779 B4410C            CJNE    A,#041H,?C0029?CS_SCALEDISPLAY
  164: 		{
  165: 		CS_Lcd_Buf_DOT2	|= S_DOT;
00177C 904D26            MOV     DPTR,#CS_Lcd_Send_Data+03H
00177F E0                MOVX    A,@DPTR
001780 4408              ORL     A,#08H
001782 F0                MOVX    @DPTR,A
  166: 		CS_Lcd_Buf_Unit	|= S_KG;							
001783 A3                INC     DPTR
001784 E0                MOVX    A,@DPTR
001785 4410              ORL     A,#010H
001787 F0                MOVX    @DPTR,A
  167: 		}	
001788         ?C0029?CS_SCALEDISPLAY:
  168: 
  169: 	if(option==Displaylb)
001788 904E6D            MOV     DPTR,#option
00178B E0                MOVX    A,@DPTR
00178C B4420C            CJNE    A,#042H,?C0030?CS_SCALEDISPLAY
  170: 		{
  171: 		CS_Lcd_Buf_DOT2	|= S_DOT;
00178F 904D26            MOV     DPTR,#CS_Lcd_Send_Data+03H
001792 E0                MOVX    A,@DPTR
001793 4408              ORL     A,#08H
001795 F0                MOVX    @DPTR,A
  172: 		CS_Lcd_Buf_Unit	|= S_LB;							
001796 A3                INC     DPTR
001797 E0                MOVX    A,@DPTR
001798 4420              ORL     A,#020H
00179A F0                MOVX    @DPTR,A
  173: 		}
00179B         ?C0030?CS_SCALEDISPLAY:
  174: 	if(option==Displayjin)
00179B 904E6D            MOV     DPTR,#option
00179E E0                MOVX    A,@DPTR
00179F FD                MOV     R5,A
0017A0 B4430C            CJNE    A,#043H,?C0031?CS_SCALEDISPLAY
  175: 		{
  176: 		CS_Lcd_Buf_DOT2	|= S_DOT;
0017A3 904D26            MOV     DPTR,#CS_Lcd_Send_Data+03H
0017A6 E0                MOVX    A,@DPTR
0017A7 4408              ORL     A,#08H
0017A9 F0                MOVX    @DPTR,A
  177: 		CS_Lcd_Buf_Unit	|= S_JIN;							
0017AA A3                INC     DPTR
0017AB E0                MOVX    A,@DPTR
0017AC 4480              ORL     A,#080H
0017AE F0                MOVX    @DPTR,A
  178: 		}
0017AF         ?C0031?CS_SCALEDISPLAY:
  179: 	
  180: 	if(option==Displaygongjin)
0017AF ED                MOV     A,R5
0017B0 B4440C            CJNE    A,#044H,?C0032?CS_SCALEDISPLAY
  181: 		{
  182: 		CS_Lcd_Buf_DOT2	|= S_DOT;
0017B3 904D26            MOV     DPTR,#CS_Lcd_Send_Data+03H
0017B6 E0                MOVX    A,@DPTR
0017B7 4408              ORL     A,#08H
0017B9 F0                MOVX    @DPTR,A
  183: 		CS_Lcd_Buf_Unit	|= S_GONG | S_JIN;							
0017BA A3                INC     DPTR
0017BB E0                MOVX    A,@DPTR
0017BC 44C0              ORL     A,#0C0H
0017BE F0                MOVX    @DPTR,A
  184: 		}
0017BF         ?C0032?CS_SCALEDISPLAY:
  185: 
  186: 	if(bleConnStatus==BLE_STATUS_CONN)
0017BF 904C5B            MOV     DPTR,#bleConnStatus
0017C2 E0                MOVX    A,@DPTR
0017C3 B40107            CJNE    A,#01H,?C0034?CS_SCALEDISPLAY
  187: 		{
  188: 		CS_Lcd_Buf_SIGN |=S_BLE;
0017C6 904D23            MOV     DPTR,#CS_Lcd_Send_Data
0017C9 E0                MOVX    A,@DPTR
0017CA 4402              ORL     A,#02H
0017CC F0                MOVX    @DPTR,A
  189: 		}
  190: 	
  191: }
0017CD         ?C0034?CS_SCALEDISPLAY:
0017CD 22                RET     
----- FUNCTION _CS_ScaleDisplay_FreshBuf (END) -------


----- FUNCTION _CS_ScaleDisplay_LookUpTable (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  225: u8_t CS_ScaleDisplay_LookUpTable(u8_t NumData)
  226: {
;---- Variable 'NumData' assigned to Register 'R7' ----
  227: 	u8_t	 * data_ptr;
  228: 	data_ptr = CS_Lcd_Table;
0017CE 7B01              MOV     R3,#01H
0017D0 7A4D              MOV     R2,#HIGH CS_Lcd_Table
0017D2 7929              MOV     R1,#LOW CS_Lcd_Table
;---- Variable 'data_ptr' assigned to Register 'R1/R2/R3' ----
  229: 	return 	*(data_ptr + NumData);
0017D4 8F82              MOV     DPL,R7
0017D6 758300            MOV     DPH,#00H
0017D9 120112            LCALL   ?C?CLDOPTR
0017DC FF                MOV     R7,A
  230: }
0017DD 22                RET     
----- FUNCTION _CS_ScaleDisplay_LookUpTable (END) -------


----- FUNCTION _CS_Scale_GetWeight (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  334: void CS_Scale_GetWeight(u16_t R_AD_BUF)
  335: {
0017DE 904D9C            MOV     DPTR,#R_AD_BUF
0017E1 EE                MOV     A,R6
0017E2 F0                MOVX    @DPTR,A
0017E3 A3                INC     DPTR
0017E4 EF                MOV     A,R7
0017E5 F0                MOVX    @DPTR,A
  336: 	u32_t	ad_temp;
  337: 	u16_t	ad_cal;
  338: 	u16_t	CaliDot1,CaliDot2,CaliDot3;
  339: 	
  340: 	CaliDot1 =CS_Scale_CaliProc(CaliProcGetCaliDot1);
0017E6 7F02              MOV     R7,#02H
0017E8 3135              ACALL   _CS_Scale_CaliProc
0017EA 904DA4            MOV     DPTR,#CaliDot1
0017ED EE                MOV     A,R6
0017EE F0                MOVX    @DPTR,A
0017EF A3                INC     DPTR
0017F0 EF                MOV     A,R7
0017F1 F0                MOVX    @DPTR,A
  341: 	CaliDot2 =CS_Scale_CaliProc(CaliProcGetCaliDot2);
0017F2 7F03              MOV     R7,#03H
0017F4 3135              ACALL   _CS_Scale_CaliProc
0017F6 904DA6            MOV     DPTR,#CaliDot2
0017F9 EE                MOV     A,R6
0017FA F0                MOVX    @DPTR,A
0017FB A3                INC     DPTR
0017FC EF                MOV     A,R7
0017FD F0                MOVX    @DPTR,A
  342: 	CaliDot3 =CS_Scale_CaliProc(CaliProcGetCaliDot3);
0017FE 7F04              MOV     R7,#04H
001800 121135            LCALL   _CS_Scale_CaliProc
001803 904DA8            MOV     DPTR,#CaliDot3
001806 EE                MOV     A,R6
001807 F0                MOVX    @DPTR,A
001808 A3                INC     DPTR
001809 EF                MOV     A,R7
00180A F0                MOVX    @DPTR,A
  343: 	
  344: 	if(R_AD_BUF <= CaliDot1 )
00180B 904DA4            MOV     DPTR,#CaliDot1
00180E E0                MOVX    A,@DPTR
00180F FE                MOV     R6,A
001810 A3                INC     DPTR
001811 E0                MOVX    A,@DPTR
001812 FF                MOV     R7,A
001813 904D9C            MOV     DPTR,#R_AD_BUF
001816 E0                MOVX    A,@DPTR
001817 FC                MOV     R4,A
001818 A3                INC     DPTR
001819 E0                MOVX    A,@DPTR
00181A FD                MOV     R5,A
00181B D3                SETB    C
00181C 9F                SUBB    A,R7
00181D EC                MOV     A,R4
00181E 9E                SUBB    A,R6
00181F 5033              JNC     ?C0034?CS_SCALE_PROC
  345: 		{
  346: 		ad_temp = (u32_t)R_AD_BUF  * 5000;	
001821 7E13              MOV     R6,#013H
001823 7F88              MOV     R7,#088H
001825 1203C8            LCALL   ?C?LIMUL
001828 A3                INC     DPTR
001829 120332            LCALL   ?C?LSTXDATA
  347: 		R_UnitWeight.origin = ad_temp / CaliDot1;
00182C 904DA4            MOV     DPTR,#CaliDot1
00182F E0                MOVX    A,@DPTR
001830 FE                MOV     R6,A
001831 A3                INC     DPTR
001832 E0                MOVX    A,@DPTR
001833 FF                MOV     R7,A
001834 FB                MOV     R3,A
001835 AA06              MOV     R2,AR6
001837 E4                CLR     A
001838 F9                MOV     R1,A
001839 F8                MOV     R0,A
00183A 904D9E            MOV     DPTR,#ad_temp
00183D E0                MOVX    A,@DPTR
00183E FC                MOV     R4,A
00183F A3                INC     DPTR
001840 E0                MOVX    A,@DPTR
001841 FD                MOV     R5,A
001842 A3                INC     DPTR
001843 E0                MOVX    A,@DPTR
001844 FE                MOV     R6,A
001845 A3                INC     DPTR
001846 E0                MOVX    A,@DPTR
001847 FF                MOV     R7,A
001848 120269            LCALL   ?C?ULDIV
00184B 904CC9            MOV     DPTR,#R_UnitWeight
00184E EE                MOV     A,R6
00184F F0                MOVX    @DPTR,A
001850 A3                INC     DPTR
001851 EF                MOV     A,R7
001852 F0                MOVX    @DPTR,A
001853 22                RET     
  348: 		return;
  349: 		}
001854         ?C0034?CS_SCALE_PROC:
  350: 	ad_cal = R_AD_BUF - CaliDot1;
001854 904DA4            MOV     DPTR,#CaliDot1
001857 E0                MOVX    A,@DPTR
001858 FE                MOV     R6,A
001859 A3                INC     DPTR
00185A E0                MOVX    A,@DPTR
00185B FF                MOV     R7,A
00185C C3                CLR     C
00185D 904D9D            MOV     DPTR,#R_AD_BUF+01H
001860 E0                MOVX    A,@DPTR
001861 9F                SUBB    A,R7
001862 FF                MOV     R7,A
001863 904D9C            MOV     DPTR,#R_AD_BUF
001866 E0                MOVX    A,@DPTR
001867 9E                SUBB    A,R6
001868 FE                MOV     R6,A
001869 904DA2            MOV     DPTR,#ad_cal
00186C F0                MOVX    @DPTR,A
00186D A3                INC     DPTR
00186E EF                MOV     A,R7
00186F F0                MOVX    @DPTR,A
  351: 
  352: 	if(ad_cal <=CaliDot2)
001870 C3                CLR     C
001871 904DA7            MOV     DPTR,#CaliDot2+01H
001874 E0                MOVX    A,@DPTR
001875 9F                SUBB    A,R7
001876 904DA6            MOV     DPTR,#CaliDot2
001879 E0                MOVX    A,@DPTR
00187A 9E                SUBB    A,R6
00187B 4043              JC      ?C0036?CS_SCALE_PROC
  353: 		{
  354: 		ad_temp = (u32_t)ad_cal  * 5000;	
00187D 904DA2            MOV     DPTR,#ad_cal
001880 E0                MOVX    A,@DPTR
001881 FE                MOV     R6,A
001882 A3                INC     DPTR
001883 E0                MOVX    A,@DPTR
001884 FF                MOV     R7,A
001885 7C13              MOV     R4,#013H
001887 7D88              MOV     R5,#088H
001889 1203C8            LCALL   ?C?LIMUL
00188C 904D9E            MOV     DPTR,#ad_temp
00188F 120332            LCALL   ?C?LSTXDATA
  355: 		R_UnitWeight.origin = ad_temp / CaliDot2 +5000 ;
001892 904DA6            MOV     DPTR,#CaliDot2
001895 E0                MOVX    A,@DPTR
001896 FE                MOV     R6,A
001897 A3                INC     DPTR
001898 E0                MOVX    A,@DPTR
001899 FF                MOV     R7,A
00189A FB                MOV     R3,A
00189B AA06              MOV     R2,AR6
00189D E4                CLR     A
00189E F9                MOV     R1,A
00189F F8                MOV     R0,A
0018A0 904D9E            MOV     DPTR,#ad_temp
0018A3 E0                MOVX    A,@DPTR
0018A4 FC                MOV     R4,A
0018A5 A3                INC     DPTR
0018A6 E0                MOVX    A,@DPTR
0018A7 FD                MOV     R5,A
0018A8 A3                INC     DPTR
0018A9 E0                MOVX    A,@DPTR
0018AA FE                MOV     R6,A
0018AB A3                INC     DPTR
0018AC E0                MOVX    A,@DPTR
0018AD FF                MOV     R7,A
0018AE 120269            LCALL   ?C?ULDIV
0018B1 EF                MOV     A,R7
0018B2 2488              ADD     A,#088H
0018B4 FF                MOV     R7,A
0018B5 EE                MOV     A,R6
0018B6 3413              ADDC    A,#013H
0018B8 904CC9            MOV     DPTR,#R_UnitWeight
0018BB F0                MOVX    @DPTR,A
0018BC A3                INC     DPTR
0018BD EF                MOV     A,R7
0018BE F0                MOVX    @DPTR,A
0018BF 22                RET     
  356: 		return;
  357: 		}
0018C0         ?C0036?CS_SCALE_PROC:
  358: 	
  359: 	ad_cal  = R_AD_BUF - CaliDot1 - CaliDot2 ;	
0018C0 904DA4            MOV     DPTR,#CaliDot1
0018C3 E0                MOVX    A,@DPTR
0018C4 FE                MOV     R6,A
0018C5 A3                INC     DPTR
0018C6 E0                MOVX    A,@DPTR
0018C7 FF                MOV     R7,A
0018C8 C3                CLR     C
0018C9 904D9D            MOV     DPTR,#R_AD_BUF+01H
0018CC E0                MOVX    A,@DPTR
0018CD 9F                SUBB    A,R7
0018CE FF                MOV     R7,A
0018CF 904D9C            MOV     DPTR,#R_AD_BUF
0018D2 E0                MOVX    A,@DPTR
0018D3 9E                SUBB    A,R6
0018D4 FE                MOV     R6,A
0018D5 904DA6            MOV     DPTR,#CaliDot2
0018D8 E0                MOVX    A,@DPTR
0018D9 FC                MOV     R4,A
0018DA A3                INC     DPTR
0018DB E0                MOVX    A,@DPTR
0018DC FD                MOV     R5,A
0018DD C3                CLR     C
0018DE EF                MOV     A,R7
0018DF 9D                SUBB    A,R5
0018E0 FF                MOV     R7,A
0018E1 EE                MOV     A,R6
0018E2 9C                SUBB    A,R4
0018E3 904DA2            MOV     DPTR,#ad_cal
0018E6 F0                MOVX    @DPTR,A
0018E7 A3                INC     DPTR
0018E8 EF                MOV     A,R7
0018E9 F0                MOVX    @DPTR,A
  360: 	ad_temp = (u32_t)ad_cal  * 5000;	
0018EA 904DA2            MOV     DPTR,#ad_cal
0018ED E0                MOVX    A,@DPTR
0018EE FE                MOV     R6,A
0018EF A3                INC     DPTR
0018F0 E0                MOVX    A,@DPTR
0018F1 FF                MOV     R7,A
0018F2 7C13              MOV     R4,#013H
0018F4 7D88              MOV     R5,#088H
0018F6 1203C8            LCALL   ?C?LIMUL
0018F9 904D9E            MOV     DPTR,#ad_temp
0018FC 120332            LCALL   ?C?LSTXDATA
  361: 	R_UnitWeight.origin = ad_temp /CaliDot3 +10000 ;
0018FF 904DA8            MOV     DPTR,#CaliDot3
001902 E0                MOVX    A,@DPTR
001903 FE                MOV     R6,A
001904 A3                INC     DPTR
001905 E0                MOVX    A,@DPTR
001906 FF                MOV     R7,A
001907 FB                MOV     R3,A
001908 AA06              MOV     R2,AR6
00190A E4                CLR     A
00190B F9                MOV     R1,A
00190C F8                MOV     R0,A
00190D 904D9E            MOV     DPTR,#ad_temp
001910 E0                MOVX    A,@DPTR
001911 FC                MOV     R4,A
001912 A3                INC     DPTR
001913 E0                MOVX    A,@DPTR
001914 FD                MOV     R5,A
001915 A3                INC     DPTR
001916 E0                MOVX    A,@DPTR
001917 FE                MOV     R6,A
001918 A3                INC     DPTR
001919 E0                MOVX    A,@DPTR
00191A FF                MOV     R7,A
00191B 120269            LCALL   ?C?ULDIV
00191E EF                MOV     A,R7
00191F 2410              ADD     A,#010H
001921 FF                MOV     R7,A
001922 EE                MOV     A,R6
001923 3427              ADDC    A,#027H
001925 904CC9            MOV     DPTR,#R_UnitWeight
001928 F0                MOVX    @DPTR,A
001929 A3                INC     DPTR
00192A EF                MOV     A,R7
00192B F0                MOVX    @DPTR,A
  362: 
  363: 	
  364: }
00192C 22                RET     
----- FUNCTION _CS_Scale_GetWeight (END) -------


----- FUNCTION systemInit (BEGIN) -----
 FILE: 'system.c'
   58: void systemInit(void)
   59: {
   60: 	LPM_DISABLE();
   61: 	if(*mem_poweron_flag == CS_POWERON_FLAG		//poweron or reset
00192D 9049FE            MOV     DPTR,#049FEH
001930 E4                CLR     A
001931 F0                MOVX    @DPTR,A
   62: 	/*|| *mem_poweron_flag == CS_IOWAKE_FLAG*/) {		//iowake from sleep
001932 9049FC            MOV     DPTR,#049FCH
001935 E0                MOVX    A,@DPTR
001936 6410              XRL     A,#010H
001938 7062              JNZ     ?C0004?SYSTEM
   63: 		sys_state = SYS_ST_RUN;
   64: 		R_Scale_state = CS_Scale_state_init;
00193A 904E6E            MOV     DPTR,#sys_state
00193D 7402              MOV     A,#02H
00193F F0                MOVX    @DPTR,A
   65: 
001940 E4                CLR     A
001941 904CC5            MOV     DPTR,#R_Scale_state
001944 F0                MOVX    @DPTR,A
   66: 		QueueInit();
001945 F157              ACALL   QueueInit
   67: 		//read spiflash data,save to buffer
   68: 		SpiFlashOperator(CS_CMD_READ_FLASH);
001947 7F40              MOV     R7,#040H
001949 B186              ACALL   _SpiFlashOperator
   69: 		bleConnStatus = BLE_STATUS_DISCONN;
00194B E4                CLR     A
00194C 904C5B            MOV     DPTR,#bleConnStatus
00194F F0                MOVX    @DPTR,A
   70: 		if(deviceInfo.registerFlag != DEVICE_REGISTERED)
001950 904C06            MOV     DPTR,#deviceInfo
001953 E0                MOVX    A,@DPTR
001954 6401              XRL     A,#01H
001956 600A              JZ      ?C0005?SYSTEM
   71: 		{
   72: 			xmemset(mem_register_buf, 0, sizeof(deviceInfo));
001958 7B0A              MOV     R3,#0AH
00195A E4                CLR     A
00195B FD                MOV     R5,A
00195C 7F0E              MOV     R7,#0EH
00195E 7E4C              MOV     R6,#04CH
001960 F11A              ACALL   _xmemset
   73: 		}
001962         ?C0005?SYSTEM:
   74: 		*(mem_le_adv_data + 13) = deviceInfo.registerFlag;
001962 904C06            MOV     DPTR,#deviceInfo
001965 E0                MOVX    A,@DPTR
001966 9043E7            MOV     DPTR,#043E7H
001969 F0                MOVX    @DPTR,A
   75: 			
   76: 		YC_UtilTimerInit();
00196A 5123              ACALL   YC_UtilTimerInit
   77: 		YC_UtilTimerStart(1, SoftTimer_1SCallback, &SoftTimer_1STimerID);
00196C 7BFF              MOV     R3,#0FFH
00196E 7A09              MOV     R2,#HIGH SoftTimer_1SCallback
001970 792B              MOV     R1,#LOW SoftTimer_1SCallback
001972 904DE0            MOV     DPTR,#?_YC_UtilTimerStart?BYTE+05H
001975 744E              MOV     A,#HIGH SoftTimer_1STimerID
001977 F0                MOVX    @DPTR,A
001978 A3                INC     DPTR
001979 7465              MOV     A,#LOW SoftTimer_1STimerID
00197B F0                MOVX    @DPTR,A
00197C 7F01              MOV     R7,#01H
00197E 7E00              MOV     R6,#00H
001980 51E6              ACALL   _YC_UtilTimerStart
   78: 		YC_UtilTimerStartMs(10, SoftTimer_10mSCallback, &SoftTimer_10msTimerID);
001982 7BFF              MOV     R3,#0FFH
001984 7A10              MOV     R2,#HIGH SoftTimer_10mSCallback
001986 793C              MOV     R1,#LOW SoftTimer_10mSCallback
001988 904DE8            MOV     DPTR,#?_YC_UtilTimerStartMs?BYTE+05H
00198B 744E              MOV     A,#HIGH SoftTimer_10msTimerID
00198D F0                MOVX    @DPTR,A
00198E A3                INC     DPTR
00198F 7466              MOV     A,#LOW SoftTimer_10msTimerID
001991 F0                MOVX    @DPTR,A
001992 7F0A              MOV     R7,#0AH
001994 7E00              MOV     R6,#00H
001996 9115              ACALL   _YC_UtilTimerStartMs
   79: 		CS_Scale_PowerOn();	
001998 B154              ACALL   CS_Scale_PowerOn
   80: 		
   81: 	}
00199A 804C              SJMP    ?C0006?SYSTEM
00199C         ?C0004?SYSTEM:
   82: 	else {	//wake from LPM mode
   83: 		if(YC_GPIOGetInputStatus(5) == 0 ||	//GPIO5, key is  down	
00199C 7F05              MOV     R7,#05H
00199E 31EE              ACALL   _YC_GPIOGetInputStatus
0019A0 5006              JNC     ?C0008?SYSTEM
0019A2 7F1B              MOV     R7,#01BH
0019A4 31EE              ACALL   _YC_GPIOGetInputStatus
0019A6 403A              JC      ?C0007?SYSTEM
0019A8         ?C0008?SYSTEM:
   84: 		YC_GPIOGetInputStatus(27) == 0) {	//GPIO27, scale wakeup
   85: 			sys_state = SYS_ST_RUN;
0019A8 904E6E            MOV     DPTR,#sys_state
0019AB 7402              MOV     A,#02H
0019AD F0                MOVX    @DPTR,A
   86: 			R_Scale_state = CS_Scale_state_standby;
0019AE 904CC5            MOV     DPTR,#R_Scale_state
0019B1 F0                MOVX    @DPTR,A
   87: 			YC_UtilTimerInit();
0019B2 5123              ACALL   YC_UtilTimerInit
   88: 			YC_UtilTimerStart(1, SoftTimer_1SCallback, &SoftTimer_1STimerID);
0019B4 7BFF              MOV     R3,#0FFH
0019B6 7A09              MOV     R2,#HIGH SoftTimer_1SCallback
0019B8 792B              MOV     R1,#LOW SoftTimer_1SCallback
0019BA 904DE0            MOV     DPTR,#?_YC_UtilTimerStart?BYTE+05H
0019BD 744E              MOV     A,#HIGH SoftTimer_1STimerID
0019BF F0                MOVX    @DPTR,A
0019C0 A3                INC     DPTR
0019C1 7465              MOV     A,#LOW SoftTimer_1STimerID
0019C3 F0                MOVX    @DPTR,A
0019C4 7F01              MOV     R7,#01H
0019C6 7E00              MOV     R6,#00H
0019C8 51E6              ACALL   _YC_UtilTimerStart
   89: 			YC_UtilTimerStartMs(10, SoftTimer_10mSCallback, &SoftTimer_10msTimerID);
0019CA 7BFF              MOV     R3,#0FFH
0019CC 7A10              MOV     R2,#HIGH SoftTimer_10mSCallback
0019CE 793C              MOV     R1,#LOW SoftTimer_10mSCallback
0019D0 904DE8            MOV     DPTR,#?_YC_UtilTimerStartMs?BYTE+05H
0019D3 744E              MOV     A,#HIGH SoftTimer_10msTimerID
0019D5 F0                MOVX    @DPTR,A
0019D6 A3                INC     DPTR
0019D7 7466              MOV     A,#LOW SoftTimer_10msTimerID
0019D9 F0                MOVX    @DPTR,A
0019DA 7F0A              MOV     R7,#0AH
0019DC 7E00              MOV     R6,#00H
0019DE 9115              ACALL   _YC_UtilTimerStartMs
   90: 			//CS_Scale_PowerOn();	
   91: 
   92: 			//R_Debug_temp=R_Scale_state;
   93: 			//CS_ScaleDisplay_Debug();
   94: 			//while(1);
   95: 		}
0019E0 8006              SJMP    ?C0006?SYSTEM
0019E2         ?C0007?SYSTEM:
   96: 		else {	//remote bluetooth wakeup
   97: 			sys_state = SYS_ST_IDLE;
0019E2 904E6E            MOV     DPTR,#sys_state
0019E5 7401              MOV     A,#01H
0019E7 F0                MOVX    @DPTR,A
   98: 		}
   99: 	}
0019E8         ?C0006?SYSTEM:
  100: 	*mem_poweron_flag = CS_NULL_FLAG;
0019E8 9049FC            MOV     DPTR,#049FCH
0019EB E4                CLR     A
0019EC F0                MOVX    @DPTR,A
  101: }
0019ED 22                RET     
----- FUNCTION systemInit (END) -------


----- FUNCTION _YC_GPIOGetInputStatus (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  140: bool YC_GPIOGetInputStatus(u8_t gpio_num)
  141: {
;---- Variable 'gpio_num' assigned to Register 'R7' ----
  142: 	u8_t queue, group;
  143: 
  144: 	queue = (gpio_num & 7);
0019EE EF                MOV     A,R7
0019EF 5407              ANL     A,#07H
0019F1 FE                MOV     R6,A
;---- Variable 'queue' assigned to Register 'R6' ----
  145: 	group = (gpio_num>>3 & 3);
0019F2 EF                MOV     A,R7
0019F3 13                RRC     A
0019F4 13                RRC     A
0019F5 13                RRC     A
0019F6 5403              ANL     A,#03H
0019F8 FF                MOV     R7,A
;---- Variable 'group' assigned to Register 'R7' ----
  146: 
  147: 	return (REG_GPIO_IN(group) & (1<<queue));
0019F9 241C              ADD     A,#01CH
0019FB FD                MOV     R5,A
0019FC E4                CLR     A
0019FD 3481              ADDC    A,#081H
0019FF 8D82              MOV     DPL,R5
001A01 F583              MOV     DPH,A
001A03 E0                MOVX    A,@DPTR
001A04 FD                MOV     R5,A
001A05 7C00              MOV     R4,#00H
001A07 AF06              MOV     R7,AR6
001A09 7401              MOV     A,#01H
001A0B 7E00              MOV     R6,#00H
001A0D A807              MOV     R0,AR7
001A0F 08                INC     R0
001A10 8005              SJMP    ?C0021?YC_PERIPHERAL
001A12         ?C0020?YC_PERIPHERAL:
001A12 C3                CLR     C
001A13 33                RLC     A
001A14 CE                XCH     A,R6
001A15 33                RLC     A
001A16 CE                XCH     A,R6
001A17         ?C0021?YC_PERIPHERAL:
001A17 D8F9              DJNZ    R0,?C0020?YC_PERIPHERAL
001A19 FF                MOV     R7,A
001A1A EE                MOV     A,R6
001A1B 5C                ANL     A,R4
001A1C FE                MOV     R6,A
001A1D EF                MOV     A,R7
001A1E 5D                ANL     A,R5
001A1F 4E                ORL     A,R6
001A20 24FF              ADD     A,#0FFH
  148: }
001A22 22                RET     
----- FUNCTION _YC_GPIOGetInputStatus (END) -------


----- FUNCTION YC_UtilTimerInit (BEGIN) -----
 FILE: 'YC_Sys.c'
    8: void YC_UtilTimerInit(void)
    9: {
   10: 	u8_t i;
   11: 	
   12: 	YC_UtilTimer.timer_flages = 0;
001A23 E4                CLR     A
001A24 904CDB            MOV     DPTR,#YC_UtilTimer
001A27 F0                MOVX    @DPTR,A
   13: 	YC_UtilTimer.last_timer = YC_CLK_N;
001A28 908101            MOV     DPTR,#08101H
001A2B E0                MOVX    A,@DPTR
001A2C FF                MOV     R7,A
001A2D E4                CLR     A
001A2E FC                MOV     R4,A
001A2F FD                MOV     R5,A
001A30 FE                MOV     R6,A
001A31 7808              MOV     R0,#08H
001A33 12031F            LCALL   ?C?LSHL
001A36 A804              MOV     R0,AR4
001A38 A905              MOV     R1,AR5
001A3A AA06              MOV     R2,AR6
001A3C AB07              MOV     R3,AR7
001A3E 908100            MOV     DPTR,#08100H
001A41 E0                MOVX    A,@DPTR
001A42 FF                MOV     R7,A
001A43 E4                CLR     A
001A44 EB                MOV     A,R3
001A45 4F                ORL     A,R7
001A46 FF                MOV     R7,A
001A47 EA                MOV     A,R2
001A48 FE                MOV     R6,A
001A49 E9                MOV     A,R1
001A4A FD                MOV     R5,A
001A4B E8                MOV     A,R0
001A4C FC                MOV     R4,A
001A4D C004              PUSH    AR4
001A4F C005              PUSH    AR5
001A51 C006              PUSH    AR6
001A53 C007              PUSH    AR7
001A55 908102            MOV     DPTR,#08102H
001A58 E0                MOVX    A,@DPTR
001A59 FF                MOV     R7,A
001A5A E4                CLR     A
001A5B FC                MOV     R4,A
001A5C FD                MOV     R5,A
001A5D FE                MOV     R6,A
001A5E 7810              MOV     R0,#010H
001A60 12031F            LCALL   ?C?LSHL
001A63 D003              POP     AR3
001A65 D002              POP     AR2
001A67 D001              POP     AR1
001A69 D000              POP     AR0
001A6B EF                MOV     A,R7
001A6C 4B                ORL     A,R3
001A6D FF                MOV     R7,A
001A6E EE                MOV     A,R6
001A6F 4A                ORL     A,R2
001A70 FE                MOV     R6,A
001A71 ED                MOV     A,R5
001A72 49                ORL     A,R1
001A73 FD                MOV     R5,A
001A74 EC                MOV     A,R4
001A75 48                ORL     A,R0
001A76 FC                MOV     R4,A
001A77 C004              PUSH    AR4
001A79 C005              PUSH    AR5
001A7B C006              PUSH    AR6
001A7D C007              PUSH    AR7
001A7F A3                INC     DPTR
001A80 E0                MOVX    A,@DPTR
001A81 FF                MOV     R7,A
001A82 E4                CLR     A
001A83 FC                MOV     R4,A
001A84 FD                MOV     R5,A
001A85 FE                MOV     R6,A
001A86 7818              MOV     R0,#018H
001A88 12031F            LCALL   ?C?LSHL
001A8B D003              POP     AR3
001A8D D002              POP     AR2
001A8F D001              POP     AR1
001A91 D000              POP     AR0
001A93 EF                MOV     A,R7
001A94 4B                ORL     A,R3
001A95 FF                MOV     R7,A
001A96 EE                MOV     A,R6
001A97 4A                ORL     A,R2
001A98 FE                MOV     R6,A
001A99 ED                MOV     A,R5
001A9A 49                ORL     A,R1
001A9B FD                MOV     R5,A
001A9C EC                MOV     A,R4
001A9D 48                ORL     A,R0
001A9E FC                MOV     R4,A
001A9F 904D14            MOV     DPTR,#YC_UtilTimer+039H
001AA2 120332            LCALL   ?C?LSTXDATA
   14: 	for(i = 0; i < YC_UTIL_TIMER_NUM; i++){
001AA5 E4                CLR     A
001AA6 904E6B            MOV     DPTR,#i
001AA9 F0                MOVX    @DPTR,A
001AAA         ?C0001?YC_SYS:
001AAA 904E6B            MOV     DPTR,#i
001AAD E0                MOVX    A,@DPTR
001AAE FF                MOV     R7,A
001AAF C3                CLR     C
001AB0 9408              SUBB    A,#08H
001AB2 5031              JNC     ?C0004?YC_SYS
   15: 		YC_UtilTimer.callback[i] = 0;
001AB4 EF                MOV     A,R7
001AB5 75F003            MOV     B,#03H
001AB8 A4                MUL     AB
001AB9 24DC              ADD     A,#LOW YC_UtilTimer+01H
001ABB F582              MOV     DPL,A
001ABD E4                CLR     A
001ABE 344C              ADDC    A,#HIGH YC_UtilTimer+01H
001AC0 F583              MOV     DPH,A
001AC2 E4                CLR     A
001AC3 F0                MOVX    @DPTR,A
001AC4 A3                INC     DPTR
001AC5 F0                MOVX    @DPTR,A
001AC6 A3                INC     DPTR
001AC7 F0                MOVX    @DPTR,A
   16: 		YC_UtilTimer.timer_end[i] = 0;
001AC8 EF                MOV     A,R7
001AC9 25E0              ADD     A,ACC
001ACB 25E0              ADD     A,ACC
001ACD 24F4              ADD     A,#LOW YC_UtilTimer+019H
001ACF F582              MOV     DPL,A
001AD1 E4                CLR     A
001AD2 344C              ADDC    A,#HIGH YC_UtilTimer+019H
001AD4 F583              MOV     DPH,A
001AD6 12033E            LCALL   ?C?LSTKXDATA
001AD9 00                DB      00H
001ADA 00                DB      00H
001ADB 00                DB      00H
001ADC 00                DB      00H
   17: 	}
001ADD 904E6B            MOV     DPTR,#i
001AE0 E0                MOVX    A,@DPTR
001AE1 04                INC     A
001AE2 F0                MOVX    @DPTR,A
001AE3 80C5              SJMP    ?C0001?YC_SYS
   18: 	return;
   19: }
001AE5         ?C0004?YC_SYS:
001AE5 22                RET     
----- FUNCTION YC_UtilTimerInit (END) -------


----- FUNCTION _YC_UtilTimerStart (BEGIN) -----
 FILE: 'YC_Sys.c'
   21: bool YC_UtilTimerStart(u16_t time_in_second, p_TimerCallback callback, pxbyte timer_id)
   22: {
001AE6 904DDB            MOV     DPTR,#time_in_second
001AE9 EE                MOV     A,R6
001AEA F0                MOVX    @DPTR,A
001AEB A3                INC     DPTR
001AEC EF                MOV     A,R7
001AED F0                MOVX    @DPTR,A
;---- Variable 'callback' assigned to Register 'R1/R2/R3' ----
   23: 	u8_t i = 0;
   24: 	
001AEE E4                CLR     A
001AEF 904DE2            MOV     DPTR,#i
001AF2 F0                MOVX    @DPTR,A
   25: 	//do we have enough timers?
   26: 	if(YC_UtilTimer.timer_flages == 0xff){
001AF3 904CDB            MOV     DPTR,#YC_UtilTimer
001AF6 E0                MOVX    A,@DPTR
001AF7 B4FF02            CJNE    A,#0FFH,?C0007?YC_SYS
   27: 		return false;
001AFA C3                CLR     C
001AFB 22                RET     
   28: 	}
001AFC         ?C0007?YC_SYS:
   29: 	while(i < YC_UTIL_TIMER_NUM){
001AFC 904DE2            MOV     DPTR,#i
001AFF E0                MOVX    A,@DPTR
001B00 FF                MOV     R7,A
001B01 C3                CLR     C
001B02 9408              SUBB    A,#08H
001B04 502D              JNC     ?C0008?YC_SYS
   30: 		if(!((YC_UtilTimer.timer_flages >> i) & 1)){
001B06 904CDB            MOV     DPTR,#YC_UtilTimer
001B09 E0                MOVX    A,@DPTR
001B0A FE                MOV     R6,A
001B0B A807              MOV     R0,AR7
001B0D 08                INC     R0
001B0E 8002              SJMP    ?C0032?YC_SYS
001B10         ?C0031?YC_SYS:
001B10 C3                CLR     C
001B11 13                RRC     A
001B12         ?C0032?YC_SYS:
001B12 D8FC              DJNZ    R0,?C0031?YC_SYS
001B14 20E014            JB      ACC.0,?C0009?YC_SYS
   31: 			if(timer_id)
001B17 904DE0            MOV     DPTR,#timer_id
001B1A E0                MOVX    A,@DPTR
001B1B FE                MOV     R6,A
001B1C A3                INC     DPTR
001B1D E0                MOVX    A,@DPTR
001B1E FF                MOV     R7,A
001B1F 4E                ORL     A,R6
001B20 6011              JZ      ?C0008?YC_SYS
   32: 				*timer_id = i;
001B22 A3                INC     DPTR
001B23 E0                MOVX    A,@DPTR
001B24 8F82              MOV     DPL,R7
001B26 8E83              MOV     DPH,R6
001B28 F0                MOVX    @DPTR,A
   33: 			break;
001B29 8008              SJMP    ?C0008?YC_SYS
   34: 		}
001B2B         ?C0009?YC_SYS:
   35: 		++i;
001B2B 904DE2            MOV     DPTR,#i
001B2E E0                MOVX    A,@DPTR
001B2F 04                INC     A
001B30 F0                MOVX    @DPTR,A
   36: 	}
001B31 80C9              SJMP    ?C0007?YC_SYS
001B33         ?C0008?YC_SYS:
   37: 	YC_UtilTimer.timer_flages |= 1 << i;
001B33 904CDB            MOV     DPTR,#YC_UtilTimer
001B36 E0                MOVX    A,@DPTR
001B37 FF                MOV     R7,A
001B38 904DE2            MOV     DPTR,#i
001B3B E0                MOVX    A,@DPTR
001B3C FE                MOV     R6,A
001B3D 7401              MOV     A,#01H
001B3F A806              MOV     R0,AR6
001B41 08                INC     R0
001B42 8002              SJMP    ?C0034?YC_SYS
001B44         ?C0033?YC_SYS:
001B44 C3                CLR     C
001B45 33                RLC     A
001B46         ?C0034?YC_SYS:
001B46 D8FC              DJNZ    R0,?C0033?YC_SYS
001B48 4F                ORL     A,R7
001B49 904CDB            MOV     DPTR,#YC_UtilTimer
001B4C F0                MOVX    @DPTR,A
   38: 	YC_UtilTimer.callback[i] = callback;
001B4D EE                MOV     A,R6
001B4E 75F003            MOV     B,#03H
001B51 A4                MUL     AB
001B52 24DC              ADD     A,#LOW YC_UtilTimer+01H
001B54 F582              MOV     DPL,A
001B56 E4                CLR     A
001B57 344C              ADDC    A,#HIGH YC_UtilTimer+01H
001B59 F583              MOV     DPH,A
001B5B EB                MOV     A,R3
001B5C F0                MOVX    @DPTR,A
001B5D A3                INC     DPTR
001B5E EA                MOV     A,R2
001B5F F0                MOVX    @DPTR,A
001B60 A3                INC     DPTR
001B61 E9                MOV     A,R1
001B62 F0                MOVX    @DPTR,A
   39: 	YC_UtilTimer.timer_end[i] =YC_CLK_N + (u32_t)time_in_second * 3200;
001B63 908101            MOV     DPTR,#08101H
001B66 E0                MOVX    A,@DPTR
001B67 FF                MOV     R7,A
001B68 E4                CLR     A
001B69 FC                MOV     R4,A
001B6A FD                MOV     R5,A
001B6B FE                MOV     R6,A
001B6C 7808              MOV     R0,#08H
001B6E 12031F            LCALL   ?C?LSHL
001B71 A804              MOV     R0,AR4
001B73 A905              MOV     R1,AR5
001B75 AA06              MOV     R2,AR6
001B77 AB07              MOV     R3,AR7
001B79 908100            MOV     DPTR,#08100H
001B7C E0                MOVX    A,@DPTR
001B7D FF                MOV     R7,A
001B7E E4                CLR     A
001B7F EB                MOV     A,R3
001B80 4F                ORL     A,R7
001B81 FF                MOV     R7,A
001B82 EA                MOV     A,R2
001B83 FE                MOV     R6,A
001B84 E9                MOV     A,R1
001B85 FD                MOV     R5,A
001B86 E8                MOV     A,R0
001B87 FC                MOV     R4,A
001B88 C004              PUSH    AR4
001B8A C005              PUSH    AR5
001B8C C006              PUSH    AR6
001B8E C007              PUSH    AR7
001B90 908102            MOV     DPTR,#08102H
001B93 E0                MOVX    A,@DPTR
001B94 FF                MOV     R7,A
001B95 E4                CLR     A
001B96 FC                MOV     R4,A
001B97 FD                MOV     R5,A
001B98 FE                MOV     R6,A
001B99 7810              MOV     R0,#010H
001B9B 12031F            LCALL   ?C?LSHL
001B9E D003              POP     AR3
001BA0 D002              POP     AR2
001BA2 D001              POP     AR1
001BA4 D000              POP     AR0
001BA6 EF                MOV     A,R7
001BA7 4B                ORL     A,R3
001BA8 FF                MOV     R7,A
001BA9 EE                MOV     A,R6
001BAA 4A                ORL     A,R2
001BAB FE                MOV     R6,A
001BAC ED                MOV     A,R5
001BAD 49                ORL     A,R1
001BAE FD                MOV     R5,A
001BAF EC                MOV     A,R4
001BB0 48                ORL     A,R0
001BB1 FC                MOV     R4,A
001BB2 C004              PUSH    AR4
001BB4 C005              PUSH    AR5
001BB6 C006              PUSH    AR6
001BB8 C007              PUSH    AR7
001BBA A3                INC     DPTR
001BBB E0                MOVX    A,@DPTR
001BBC FF                MOV     R7,A
001BBD E4                CLR     A
001BBE FC                MOV     R4,A
001BBF FD                MOV     R5,A
001BC0 FE                MOV     R6,A
001BC1 7818              MOV     R0,#018H
001BC3 12031F            LCALL   ?C?LSHL
001BC6 D003              POP     AR3
001BC8 D002              POP     AR2
001BCA D001              POP     AR1
001BCC D000              POP     AR0
001BCE EF                MOV     A,R7
001BCF 4B                ORL     A,R3
001BD0 FF                MOV     R7,A
001BD1 EE                MOV     A,R6
001BD2 4A                ORL     A,R2
001BD3 FE                MOV     R6,A
001BD4 ED                MOV     A,R5
001BD5 49                ORL     A,R1
001BD6 FD                MOV     R5,A
001BD7 EC                MOV     A,R4
001BD8 48                ORL     A,R0
001BD9 FC                MOV     R4,A
001BDA C004              PUSH    AR4
001BDC A905              MOV     R1,AR5
001BDE AA06              MOV     R2,AR6
001BE0 AB07              MOV     R3,AR7
001BE2 904DDB            MOV     DPTR,#time_in_second
001BE5 E0                MOVX    A,@DPTR
001BE6 FE                MOV     R6,A
001BE7 A3                INC     DPTR
001BE8 E0                MOVX    A,@DPTR
001BE9 FF                MOV     R7,A
001BEA 7C0C              MOV     R4,#0CH
001BEC 7D80              MOV     R5,#080H
001BEE 1203C8            LCALL   ?C?LIMUL
001BF1 D000              POP     AR0
001BF3 EF                MOV     A,R7
001BF4 2B                ADD     A,R3
001BF5 FF                MOV     R7,A
001BF6 EE                MOV     A,R6
001BF7 3A                ADDC    A,R2
001BF8 FE                MOV     R6,A
001BF9 ED                MOV     A,R5
001BFA 39                ADDC    A,R1
001BFB FD                MOV     R5,A
001BFC EC                MOV     A,R4
001BFD 38                ADDC    A,R0
001BFE FC                MOV     R4,A
001BFF 904DE2            MOV     DPTR,#i
001C02 E0                MOVX    A,@DPTR
001C03 25E0              ADD     A,ACC
001C05 25E0              ADD     A,ACC
001C07 24F4              ADD     A,#LOW YC_UtilTimer+019H
001C09 F582              MOV     DPL,A
001C0B E4                CLR     A
001C0C 344C              ADDC    A,#HIGH YC_UtilTimer+019H
001C0E F583              MOV     DPH,A
001C10 120332            LCALL   ?C?LSTXDATA
   40: //	while(1);
   41: 	return true;
001C13 D3                SETB    C
   42: }
001C14 22                RET     
----- FUNCTION _YC_UtilTimerStart (END) -------


----- FUNCTION _YC_UtilTimerStartMs (BEGIN) -----
 FILE: 'YC_Sys.c'
   44: bool YC_UtilTimerStartMs(u16_t time_in_ms, p_TimerCallback callback, pxbyte timer_id)
   45: {
001C15 904DE3            MOV     DPTR,#time_in_ms
001C18 EE                MOV     A,R6
001C19 F0                MOVX    @DPTR,A
001C1A A3                INC     DPTR
001C1B EF                MOV     A,R7
001C1C F0                MOVX    @DPTR,A
;---- Variable 'callback' assigned to Register 'R1/R2/R3' ----
   46: 	u8_t i = 0;
   47: 	
001C1D E4                CLR     A
001C1E 904DEA            MOV     DPTR,#i
001C21 F0                MOVX    @DPTR,A
   48: 	//do we have enough timers?
   49: 	if(YC_UtilTimer.timer_flages == 0xff){
001C22 904CDB            MOV     DPTR,#YC_UtilTimer
001C25 E0                MOVX    A,@DPTR
001C26 B4FF02            CJNE    A,#0FFH,?C0013?YC_SYS
   50: 		return false;
001C29 C3                CLR     C
001C2A 22                RET     
   51: 	}
001C2B         ?C0013?YC_SYS:
   52: 	while(i < YC_UTIL_TIMER_NUM){
001C2B 904DEA            MOV     DPTR,#i
001C2E E0                MOVX    A,@DPTR
001C2F FF                MOV     R7,A
001C30 C3                CLR     C
001C31 9408              SUBB    A,#08H
001C33 502D              JNC     ?C0014?YC_SYS
   53: 		if(!((YC_UtilTimer.timer_flages >> i) & 1)){
001C35 904CDB            MOV     DPTR,#YC_UtilTimer
001C38 E0                MOVX    A,@DPTR
001C39 FE                MOV     R6,A
001C3A A807              MOV     R0,AR7
001C3C 08                INC     R0
001C3D 8002              SJMP    ?C0036?YC_SYS
001C3F         ?C0035?YC_SYS:
001C3F C3                CLR     C
001C40 13                RRC     A
001C41         ?C0036?YC_SYS:
001C41 D8FC              DJNZ    R0,?C0035?YC_SYS
001C43 20E014            JB      ACC.0,?C0015?YC_SYS
   54: 			if(timer_id)
001C46 904DE8            MOV     DPTR,#timer_id
001C49 E0                MOVX    A,@DPTR
001C4A FE                MOV     R6,A
001C4B A3                INC     DPTR
001C4C E0                MOVX    A,@DPTR
001C4D FF                MOV     R7,A
001C4E 4E                ORL     A,R6
001C4F 6011              JZ      ?C0014?YC_SYS
   55: 				*timer_id = i;
001C51 A3                INC     DPTR
001C52 E0                MOVX    A,@DPTR
001C53 8F82              MOV     DPL,R7
001C55 8E83              MOV     DPH,R6
001C57 F0                MOVX    @DPTR,A
   56: 			break;
001C58 8008              SJMP    ?C0014?YC_SYS
   57: 		}
001C5A         ?C0015?YC_SYS:
   58: 		++i;
001C5A 904DEA            MOV     DPTR,#i
001C5D E0                MOVX    A,@DPTR
001C5E 04                INC     A
001C5F F0                MOVX    @DPTR,A
   59: 	}
001C60 80C9              SJMP    ?C0013?YC_SYS
001C62         ?C0014?YC_SYS:
   60: 	YC_UtilTimer.timer_flages |= 1 << i;
001C62 904CDB            MOV     DPTR,#YC_UtilTimer
001C65 E0                MOVX    A,@DPTR
001C66 FF                MOV     R7,A
001C67 904DEA            MOV     DPTR,#i
001C6A E0                MOVX    A,@DPTR
001C6B FE                MOV     R6,A
001C6C 7401              MOV     A,#01H
001C6E A806              MOV     R0,AR6
001C70 08                INC     R0
001C71 8002              SJMP    ?C0038?YC_SYS
001C73         ?C0037?YC_SYS:
001C73 C3                CLR     C
001C74 33                RLC     A
001C75         ?C0038?YC_SYS:
001C75 D8FC              DJNZ    R0,?C0037?YC_SYS
001C77 4F                ORL     A,R7
001C78 904CDB            MOV     DPTR,#YC_UtilTimer
001C7B F0                MOVX    @DPTR,A
   61: 	YC_UtilTimer.callback[i] = callback;
001C7C EE                MOV     A,R6
001C7D 75F003            MOV     B,#03H
001C80 A4                MUL     AB
001C81 24DC              ADD     A,#LOW YC_UtilTimer+01H
001C83 F582              MOV     DPL,A
001C85 E4                CLR     A
001C86 344C              ADDC    A,#HIGH YC_UtilTimer+01H
001C88 F583              MOV     DPH,A
001C8A EB                MOV     A,R3
001C8B F0                MOVX    @DPTR,A
001C8C A3                INC     DPTR
001C8D EA                MOV     A,R2
001C8E F0                MOVX    @DPTR,A
001C8F A3                INC     DPTR
001C90 E9                MOV     A,R1
001C91 F0                MOVX    @DPTR,A
   62: 	YC_UtilTimer.timer_end[i] = YC_CLK_N + ((u32_t)time_in_ms << 4)/5;
001C92 908101            MOV     DPTR,#08101H
001C95 E0                MOVX    A,@DPTR
001C96 FF                MOV     R7,A
001C97 E4                CLR     A
001C98 FC                MOV     R4,A
001C99 FD                MOV     R5,A
001C9A FE                MOV     R6,A
001C9B 7808              MOV     R0,#08H
001C9D 12031F            LCALL   ?C?LSHL
001CA0 A804              MOV     R0,AR4
001CA2 A905              MOV     R1,AR5
001CA4 AA06              MOV     R2,AR6
001CA6 AB07              MOV     R3,AR7
001CA8 908100            MOV     DPTR,#08100H
001CAB E0                MOVX    A,@DPTR
001CAC FF                MOV     R7,A
001CAD E4                CLR     A
001CAE EB                MOV     A,R3
001CAF 4F                ORL     A,R7
001CB0 FF                MOV     R7,A
001CB1 EA                MOV     A,R2
001CB2 FE                MOV     R6,A
001CB3 E9                MOV     A,R1
001CB4 FD                MOV     R5,A
001CB5 E8                MOV     A,R0
001CB6 FC                MOV     R4,A
001CB7 C004              PUSH    AR4
001CB9 C005              PUSH    AR5
001CBB C006              PUSH    AR6
001CBD C007              PUSH    AR7
001CBF 908102            MOV     DPTR,#08102H
001CC2 E0                MOVX    A,@DPTR
001CC3 FF                MOV     R7,A
001CC4 E4                CLR     A
001CC5 FC                MOV     R4,A
001CC6 FD                MOV     R5,A
001CC7 FE                MOV     R6,A
001CC8 7810              MOV     R0,#010H
001CCA 12031F            LCALL   ?C?LSHL
001CCD D003              POP     AR3
001CCF D002              POP     AR2
001CD1 D001              POP     AR1
001CD3 D000              POP     AR0
001CD5 EF                MOV     A,R7
001CD6 4B                ORL     A,R3
001CD7 FF                MOV     R7,A
001CD8 EE                MOV     A,R6
001CD9 4A                ORL     A,R2
001CDA FE                MOV     R6,A
001CDB ED                MOV     A,R5
001CDC 49                ORL     A,R1
001CDD FD                MOV     R5,A
001CDE EC                MOV     A,R4
001CDF 48                ORL     A,R0
001CE0 FC                MOV     R4,A
001CE1 C004              PUSH    AR4
001CE3 C005              PUSH    AR5
001CE5 C006              PUSH    AR6
001CE7 C007              PUSH    AR7
001CE9 A3                INC     DPTR
001CEA E0                MOVX    A,@DPTR
001CEB FF                MOV     R7,A
001CEC E4                CLR     A
001CED FC                MOV     R4,A
001CEE FD                MOV     R5,A
001CEF FE                MOV     R6,A
001CF0 7818              MOV     R0,#018H
001CF2 12031F            LCALL   ?C?LSHL
001CF5 D003              POP     AR3
001CF7 D002              POP     AR2
001CF9 D001              POP     AR1
001CFB D000              POP     AR0
001CFD EF                MOV     A,R7
001CFE 4B                ORL     A,R3
001CFF FF                MOV     R7,A
001D00 EE                MOV     A,R6
001D01 4A                ORL     A,R2
001D02 FE                MOV     R6,A
001D03 ED                MOV     A,R5
001D04 49                ORL     A,R1
001D05 FD                MOV     R5,A
001D06 EC                MOV     A,R4
001D07 48                ORL     A,R0
001D08 FC                MOV     R4,A
001D09 C004              PUSH    AR4
001D0B C005              PUSH    AR5
001D0D C006              PUSH    AR6
001D0F C007              PUSH    AR7
001D11 904DE3            MOV     DPTR,#time_in_ms
001D14 E0                MOVX    A,@DPTR
001D15 FE                MOV     R6,A
001D16 A3                INC     DPTR
001D17 E0                MOVX    A,@DPTR
001D18 FF                MOV     R7,A
001D19 E4                CLR     A
001D1A FC                MOV     R4,A
001D1B FD                MOV     R5,A
001D1C 7804              MOV     R0,#04H
001D1E 12031F            LCALL   ?C?LSHL
001D21 E4                CLR     A
001D22 7B05              MOV     R3,#05H
001D24 FA                MOV     R2,A
001D25 F9                MOV     R1,A
001D26 F8                MOV     R0,A
001D27 120269            LCALL   ?C?ULDIV
001D2A D003              POP     AR3
001D2C D002              POP     AR2
001D2E D001              POP     AR1
001D30 D000              POP     AR0
001D32 EF                MOV     A,R7
001D33 2B                ADD     A,R3
001D34 FF                MOV     R7,A
001D35 EE                MOV     A,R6
001D36 3A                ADDC    A,R2
001D37 FE                MOV     R6,A
001D38 ED                MOV     A,R5
001D39 39                ADDC    A,R1
001D3A FD                MOV     R5,A
001D3B EC                MOV     A,R4
001D3C 38                ADDC    A,R0
001D3D FC                MOV     R4,A
001D3E 904DEA            MOV     DPTR,#i
001D41 E0                MOVX    A,@DPTR
001D42 25E0              ADD     A,ACC
001D44 25E0              ADD     A,ACC
001D46 24F4              ADD     A,#LOW YC_UtilTimer+019H
001D48 F582              MOV     DPL,A
001D4A E4                CLR     A
001D4B 344C              ADDC    A,#HIGH YC_UtilTimer+019H
001D4D F583              MOV     DPH,A
001D4F 120332            LCALL   ?C?LSTXDATA
   63: 	return true;
001D52 D3                SETB    C
   64: }
001D53 22                RET     
----- FUNCTION _YC_UtilTimerStartMs (END) -------


----- FUNCTION CS_Scale_PowerOn (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  170: void CS_Scale_PowerOn(void)
  171: {
  172: 	
  173: 	if(R_Scale_state == CS_Scale_state_init)
001D54 904CC5            MOV     DPTR,#R_Scale_state
001D57 E0                MOVX    A,@DPTR
001D58 702B              JNZ     ?C0011?CS_SCALE_PROC
  174: 		{
  175: 		B_Weight_AdOk = false;
001D5A 904CD7            MOV     DPTR,#B_Weight_AdOk
001D5D F0                MOVX    @DPTR,A
  176: 		R_Weight_Com_Coo.pre =CS_CommTo1186_Null;	
001D5E 904D51            MOV     DPTR,#R_Weight_Com_Coo+01H
001D61 F0                MOVX    @DPTR,A
  177: 		R_Weight_Com_Coo.now = CS_CommTo1186_Null;	
001D62 904D50            MOV     DPTR,#R_Weight_Com_Coo
001D65 F0                MOVX    @DPTR,A
  178: 		//R_Scale_state =	CS_Scale_state_weighting;
  179: 		R_Selet_Unit = CS_ScaleDisplay_L_kg;
001D66 904CC6            MOV     DPTR,#R_Selet_Unit
001D69 F0                MOVX    @DPTR,A
  180: 
  181: 		R_Debug_temp = 0;
001D6A A3                INC     DPTR
001D6B F0                MOVX    @DPTR,A
001D6C A3                INC     DPTR
001D6D F0                MOVX    @DPTR,A
  182: 		
  183: 		CS_Scale_CaliProc(CaliProcSetCali);		
001D6E 7F01              MOV     R7,#01H
001D70 121135            LCALL   _CS_Scale_CaliProc
  184: 		CS_Scale_ZeroProc(ZeroProcReset,0);	
001D73 E4                CLR     A
001D74 FD                MOV     R5,A
001D75 FC                MOV     R4,A
001D76 7F04              MOV     R7,#04H
001D78 1233BE            LCALL   _CS_Scale_ZeroProc
  185: 		
  186: 		CS_Scale_TimeOutProc(CS_Reset_AllTime);
001D7B 7F06              MOV     R7,#06H
001D7D 120983            LCALL   _CS_Scale_TimeOutProc
  187: 		CS_Scale_PowerOnProc(1);
001D80 D200              SETB    ?CS_Scale_PowerOnProc?BIT
001D82 123758            LCALL   CS_Scale_PowerOnProc
  188: 		}
  189: }
001D85         ?C0011?CS_SCALE_PROC:
001D85 22                RET     
----- FUNCTION CS_Scale_PowerOn (END) -------


----- FUNCTION _SpiFlashOperator (BEGIN) -----
 FILE: 'lxProtocol.c'
  475: void SpiFlashOperator(u8_t opt)
  476: {
001D86 904E70            MOV     DPTR,#opt
001D89 EF                MOV     A,R7
001D8A F0                MOVX    @DPTR,A
  477: #if 1
  478: 	if(CS_CMD_READ_FLASH == opt)
001D8B BF4017            CJNE    R7,#040H,?C0050?LXPROTOCOL
  479: 	{
  480: 		SPIFlashRead(mem_spiflash_buf, SPIFLASH_DATA_ADDR, SPIFLASH_READ_LENGTH);
001D8E 7B01              MOV     R3,#01H
001D90 7A4C              MOV     R2,#04CH
001D92 7900              MOV     R1,#00H
001D94 904DFA            MOV     DPTR,#?_SPIFlashRead?BYTE+07H
001D97 744C              MOV     A,#04CH
001D99 F0                MOVX    @DPTR,A
001D9A 7F00              MOV     R7,#00H
001D9C 7EA0              MOV     R6,#0A0H
001D9E 7D00              MOV     R5,#00H
001DA0 7C00              MOV     R4,#00H
001DA2 022756            LJMP    _SPIFlashRead
  481: 	}
001DA5         ?C0050?LXPROTOCOL:
  482: 	else if(CS_CMD_WRITE_FLASH == opt)
001DA5 904E70            MOV     DPTR,#opt
001DA8 E0                MOVX    A,@DPTR
001DA9 B44122            CJNE    A,#041H,?C0053?LXPROTOCOL
  483: 	{
  484: 		SPIFlashEraseSector(SPIFLASH_DATA_ADDR);
001DAC 7F00              MOV     R7,#00H
001DAE 7EA0              MOV     R6,#0A0H
001DB0 7D00              MOV     R5,#00H
001DB2 7C00              MOV     R4,#00H
001DB4 1225DB            LCALL   _SPIFlashEraseSector
  485: 		SPIFlashWrite(mem_spiflash_buf, SPIFLASH_DATA_ADDR, SPIFLASH_READ_LENGTH);
001DB7 7B01              MOV     R3,#01H
001DB9 7A4C              MOV     R2,#04CH
001DBB 7900              MOV     R1,#00H
001DBD 904DF2            MOV     DPTR,#?_SPIFlashWrite?BYTE+07H
001DC0 744C              MOV     A,#04CH
001DC2 F0                MOVX    @DPTR,A
001DC3 7F00              MOV     R7,#00H
001DC5 7EA0              MOV     R6,#0A0H
001DC7 7D00              MOV     R5,#00H
001DC9 7C00              MOV     R4,#00H
001DCB 122651            LCALL   _SPIFlashWrite
  486: 	}
  487: #else
  488: 	btCmdBuf.len = 1;
  489: 	btCmdBuf.DATA[0] = opt;
  490: 	BT_CmdFifoIn(&btCmdBuf);
  491: 	YC_Delay10ms(10);
  492: #endif
  493: }
001DCE         ?C0053?LXPROTOCOL:
001DCE 22                RET     
----- FUNCTION _SpiFlashOperator (END) -------


----- FUNCTION _lxRecvDataFromApp (BEGIN) -----
 FILE: 'lxProtocol.c'
   51: void lxRecvDataFromApp(BT_EVENTFIFO_t *event)
   52: {
001DCF 904E2E            MOV     DPTR,#event
001DD2 EB                MOV     A,R3
001DD3 F0                MOVX    @DPTR,A
001DD4 A3                INC     DPTR
001DD5 EA                MOV     A,R2
001DD6 F0                MOVX    @DPTR,A
001DD7 A3                INC     DPTR
001DD8 E9                MOV     A,R1
001DD9 F0                MOVX    @DPTR,A
   53: 	//data[0]:total length, data[1~2]:handle
   54: 	//data[3]:frame control,data[4]:length,data[5~N]:content
   55: 	u8_t frameControl = event->DATA[3];
001DDA 904E2E            MOV     DPTR,#event
001DDD E0                MOVX    A,@DPTR
001DDE FB                MOV     R3,A
001DDF A3                INC     DPTR
001DE0 E0                MOVX    A,@DPTR
001DE1 FA                MOV     R2,A
001DE2 A3                INC     DPTR
001DE3 E0                MOVX    A,@DPTR
001DE4 F9                MOV     R1,A
001DE5 900004            MOV     DPTR,#04H
001DE8 120112            LCALL   ?C?CLDOPTR
001DEB 904E31            MOV     DPTR,#frameControl
001DEE F0                MOVX    @DPTR,A
   56: 	u16_t cmd;
   57: 	
   58: 	bigLittleEndianSwap(&(event->DATA[5]), event->DATA[4]);
001DEF E9                MOV     A,R1
001DF0 2406              ADD     A,#06H
001DF2 F9                MOV     R1,A
001DF3 E4                CLR     A
001DF4 3A                ADDC    A,R2
001DF5 FA                MOV     R2,A
001DF6 C002              PUSH    AR2
001DF8 C001              PUSH    AR1
001DFA 904E2E            MOV     DPTR,#event
001DFD E0                MOVX    A,@DPTR
001DFE A3                INC     DPTR
001DFF E0                MOVX    A,@DPTR
001E00 FA                MOV     R2,A
001E01 A3                INC     DPTR
001E02 E0                MOVX    A,@DPTR
001E03 F9                MOV     R1,A
001E04 900005            MOV     DPTR,#05H
001E07 120112            LCALL   ?C?CLDOPTR
001E0A FD                MOV     R5,A
001E0B 7C00              MOV     R4,#00H
001E0D D001              POP     AR1
001E0F D002              POP     AR2
001E11 122C65            LCALL   _bigLittleEndianSwap
   59: 	cmd = event->DATA[5] | (event->DATA[6] << 8);
001E14 904E2E            MOV     DPTR,#event
001E17 E0                MOVX    A,@DPTR
001E18 FB                MOV     R3,A
001E19 A3                INC     DPTR
001E1A E0                MOVX    A,@DPTR
001E1B FA                MOV     R2,A
001E1C A3                INC     DPTR
001E1D E0                MOVX    A,@DPTR
001E1E F9                MOV     R1,A
001E1F 900007            MOV     DPTR,#07H
001E22 120112            LCALL   ?C?CLDOPTR
001E25 FE                MOV     R6,A
001E26 900006            MOV     DPTR,#06H
001E29 120112            LCALL   ?C?CLDOPTR
001E2C FD                MOV     R5,A
001E2D EE                MOV     A,R6
001E2E ED                MOV     A,R5
001E2F FF                MOV     R7,A
001E30 904E32            MOV     DPTR,#cmd
001E33 EE                MOV     A,R6
001E34 F0                MOVX    @DPTR,A
001E35 A3                INC     DPTR
001E36 EF                MOV     A,R7
001E37 F0                MOVX    @DPTR,A
   60: 	
   61: 	//numTotalFrames == 1
   62: 	if(frameControl == FRAME_CONTROL_SINGLE)
001E38 904E31            MOV     DPTR,#frameControl
001E3B E0                MOVX    A,@DPTR
001E3C 6410              XRL     A,#010H
001E3E 6002              JZ      $ + 4H
001E40 C1CA              AJMP    ?C0007?LXPROTOCOL
   63: 	{
   64: 		//send ack
   65: 		lxSendRecvDataACK(HANDLE_UUIDA625_NOTIFY, RECV_ACK_SUCCESS);
001E42 7D01              MOV     R5,#01H
001E44 7F25              MOV     R7,#025H
001E46 FE                MOV     R6,A
001E47 F161              ACALL   _lxSendRecvDataACK
   66: 
   67: 		//copy data
   68: 		xmemcpy(LX_RECV_BUF, &(event->DATA[5]), event->DATA[4]);
001E49 904E2E            MOV     DPTR,#event
001E4C E0                MOVX    A,@DPTR
001E4D FB                MOV     R3,A
001E4E A3                INC     DPTR
001E4F E0                MOVX    A,@DPTR
001E50 FA                MOV     R2,A
001E51 A3                INC     DPTR
001E52 E0                MOVX    A,@DPTR
001E53 2406              ADD     A,#06H
001E55 F9                MOV     R1,A
001E56 E4                CLR     A
001E57 3A                ADDC    A,R2
001E58 FA                MOV     R2,A
001E59 C002              PUSH    AR2
001E5B C001              PUSH    AR1
001E5D 904E2E            MOV     DPTR,#event
001E60 E0                MOVX    A,@DPTR
001E61 A3                INC     DPTR
001E62 E0                MOVX    A,@DPTR
001E63 FA                MOV     R2,A
001E64 A3                INC     DPTR
001E65 E0                MOVX    A,@DPTR
001E66 F9                MOV     R1,A
001E67 900005            MOV     DPTR,#05H
001E6A 120112            LCALL   ?C?CLDOPTR
001E6D F51C              MOV     ?_xmemcpy?BYTE+05H,A
001E6F D001              POP     AR1
001E71 D002              POP     AR2
001E73 7FA0              MOV     R7,#0A0H
001E75 7E48              MOV     R6,#048H
001E77 F1AC              ACALL   _xmemcpy
   69: 		
   70: 		switch(cmd)
001E79 904E32            MOV     DPTR,#cmd
001E7C E0                MOVX    A,@DPTR
001E7D FE                MOV     R6,A
001E7E A3                INC     DPTR
001E7F E0                MOVX    A,@DPTR
001E80 8EF0              MOV     B,R6
001E82 120395            LCALL   ?C?ICASE
001E85 1EA9              DW      ?C0009?LXPROTOCOL
001E87 0001              DW      01H
001E89 1EAD              DW      ?C0010?LXPROTOCOL
001E8B 0003              DW      03H
001E8D 1EB1              DW      ?C0011?LXPROTOCOL
001E8F 0008              DW      08H
001E91 1EB5              DW      ?C0012?LXPROTOCOL
001E93 000A              DW      0AH
001E95 1EB9              DW      ?C0013?LXPROTOCOL
001E97 1002              DW      01002H
001E99 1EBD              DW      ?C0014?LXPROTOCOL
001E9B 1004              DW      01004H
001E9D 1EC1              DW      ?C0015?LXPROTOCOL
001E9F 1005              DW      01005H
001EA1 1EC5              DW      ?C0016?LXPROTOCOL
001EA3 4801              DW      04801H
001EA5 0000              DW      00H
001EA7 1F10              DW      ?C0023?LXPROTOCOL
   71: 		{
   72: 			case CMD_REGISTRATION_REQ:
001EA9         ?C0009?LXPROTOCOL:
   73: 				changeLxOptStatus(OPT_REGISTER_REQ);
001EA9 7F10              MOV     R7,#010H
001EAB 8064              SJMP    _changeLxOptStatus
   74: 				break;
   75: 			case CMD_BIND_REQ:
001EAD         ?C0010?LXPROTOCOL:
   76: 				changeLxOptStatus(OPT_BIND_REQ);
001EAD 7F13              MOV     R7,#013H
001EAF 8060              SJMP    _changeLxOptStatus
   77: 				break;
   78: 			case CMD_LOGIN_RSP:
001EB1         ?C0011?LXPROTOCOL:
   79: 				changeLxOptStatus(OPT_LOGIN_RSP);
001EB1 7F18              MOV     R7,#018H
001EB3 805C              SJMP    _changeLxOptStatus
   80: 				break;
   81: 			case CMD_INIT_RSP:
001EB5         ?C0012?LXPROTOCOL:
   82: 				changeLxOptStatus(OPT_INIT_RSP);
001EB5 7F22              MOV     R7,#022H
001EB7 8058              SJMP    _changeLxOptStatus
   83: 				break;
   84: 				
   85: 			case CMD_TIME_SETTING_REQ:
001EB9         ?C0013?LXPROTOCOL:
   86: 				changeLxOptStatus(OPT_TIME_SETTING_REQ);
001EB9 7F25              MOV     R7,#025H
001EBB 8054              SJMP    _changeLxOptStatus
   87: 				break;
   88: 			case CMD_UNIT_SETTING_REQ:
001EBD         ?C0014?LXPROTOCOL:
   89: 				changeLxOptStatus(OPT_UNIT_SETTING_REQ);
001EBD 7F28              MOV     R7,#028H
001EBF 8050              SJMP    _changeLxOptStatus
   90: 				break;
   91: 			case CMD_DATA_CLEAR_SETTING_REQ:
001EC1         ?C0015?LXPROTOCOL:
   92: 				changeLxOptStatus(OPT_DATA_DEL_SETTING_REQ);
001EC1 7F31              MOV     R7,#031H
001EC3 804C              SJMP    _changeLxOptStatus
   93: 				break;
   94: 				
   95: 			case CMD_SYNC_DATA_REQ:
001EC5         ?C0016?LXPROTOCOL:
   96: 				changeLxOptStatus(OPT_SYNC_DATA_REQ);
001EC5 7F35              MOV     R7,#035H
001EC7 8048              SJMP    _changeLxOptStatus
   97: 				break;
   98: 		}
   99: 		
  100: 	}
001EC9 22                RET     
001ECA         ?C0007?LXPROTOCOL:
  101: 	//ACK:numTotalFrames == 0
  102: 	else if(frameControl == FRAME_CONTROL_ACK)
001ECA 904E31            MOV     DPTR,#frameControl
001ECD E0                MOVX    A,@DPTR
001ECE 7040              JNZ     ?C0023?LXPROTOCOL
  103: 	{
  104: 		if(event->DATA[5] == RECV_ACK_SUCCESS)
001ED0 904E2E            MOV     DPTR,#event
001ED3 E0                MOVX    A,@DPTR
001ED4 FB                MOV     R3,A
001ED5 A3                INC     DPTR
001ED6 E0                MOVX    A,@DPTR
001ED7 FA                MOV     R2,A
001ED8 A3                INC     DPTR
001ED9 E0                MOVX    A,@DPTR
001EDA F9                MOV     R1,A
001EDB 900006            MOV     DPTR,#06H
001EDE 120112            LCALL   ?C?CLDOPTR
001EE1 B40111            CJNE    A,#01H,?C0019?LXPROTOCOL
  105: 		{
  106: 			if(lxOptStatus == OPT_REGISTER_RSP_WAIT_ACK)
001EE4 904C5C            MOV     DPTR,#lxOptStatus
001EE7 E0                MOVX    A,@DPTR
001EE8 B41104            CJNE    A,#011H,?C0020?LXPROTOCOL
  107: 			{
  108: 				SpiFlashOperator(CS_CMD_WRITE_FLASH);
001EEB 7F41              MOV     R7,#041H
001EED B186              ACALL   _SpiFlashOperator
  109: 			}
001EEF         ?C0020?LXPROTOCOL:
  110: 			
  111: 			lxOptStatus = OPT_IDLE;
001EEF E4                CLR     A
001EF0 904C5C            MOV     DPTR,#lxOptStatus
001EF3 F0                MOVX    @DPTR,A
  112: 		}
001EF4 22                RET     
001EF5         ?C0019?LXPROTOCOL:
  113: 		else
  114: 		{
  115: 			if(lxOptStatus == OPT_REGISTER_RSP_WAIT_ACK)
001EF5 904C5C            MOV     DPTR,#lxOptStatus
001EF8 E0                MOVX    A,@DPTR
001EF9 B4110F            CJNE    A,#011H,?C0022?LXPROTOCOL
  116: 			{
  117: 				xmemset(mem_register_buf , 0, 10);
001EFC 7B0A              MOV     R3,#0AH
001EFE E4                CLR     A
001EFF FD                MOV     R5,A
001F00 7F0E              MOV     R7,#0EH
001F02 7E4C              MOV     R6,#04CH
001F04 F11A              ACALL   _xmemset
  118: 				//update adv flag
  119: 				*(mem_le_adv_data + 13) = 0;
001F06 9043E7            MOV     DPTR,#043E7H
001F09 E4                CLR     A
001F0A F0                MOVX    @DPTR,A
  120: 			}
001F0B         ?C0022?LXPROTOCOL:
  121: 			lxOptStatus = OPT_IDLE;
001F0B E4                CLR     A
001F0C 904C5C            MOV     DPTR,#lxOptStatus
001F0F F0                MOVX    @DPTR,A
  122: 		}
  123: 	}
  124: }
001F10         ?C0023?LXPROTOCOL:
001F10 22                RET     
----- FUNCTION _lxRecvDataFromApp (END) -------


----- FUNCTION _changeLxOptStatus (BEGIN) -----
 FILE: 'lxProtocol.c'
  126: void changeLxOptStatus(u8_t opt)
  127: {
;---- Variable 'opt' assigned to Register 'R7' ----
  128: 	if(lxOptStatus == OPT_IDLE)
  129: 	{
001F11 904C5C            MOV     DPTR,#lxOptStatus
001F14 E0                MOVX    A,@DPTR
001F15 7002              JNZ     ?C0025?LXPROTOCOL
  130: 		lxOptStatus = opt;
  131: 	}
001F17 EF                MOV     A,R7
001F18 F0                MOVX    @DPTR,A
  132: }
  133: 
001F19         ?C0025?LXPROTOCOL:
001F19 22                RET     
----- FUNCTION _changeLxOptStatus (END) -------


----- FUNCTION _xmemset (BEGIN) -----
 FILE: 'YC_Utilities.c'
   10: void xmemset(pxbyte addr, u8_t value, u8_t len) small
   11: {
001F1A 8E1D              MOV     addr,R6
001F1C 8F1E              MOV     addr+01H,R7
;---- Variable 'len' assigned to Register 'R3' ----
;---- Variable 'value' assigned to Register 'R5' ----
001F1E         ?C0002?YC_UTILITIES:
   12: 	while(len--)
001F1E AF03              MOV     R7,AR3
001F20 1B                DEC     R3
001F21 EF                MOV     A,R7
001F22 6013              JZ      ?C0004?YC_UTILITIES
   13: 		*addr++ = value;
001F24 051E              INC     addr+01H
001F26 E51E              MOV     A,addr+01H
001F28 AE1D              MOV     R6,addr
001F2A 7002              JNZ     ?C0044?YC_UTILITIES
001F2C 051D              INC     addr
001F2E         ?C0044?YC_UTILITIES:
001F2E 14                DEC     A
001F2F F582              MOV     DPL,A
001F31 8E83              MOV     DPH,R6
001F33 ED                MOV     A,R5
001F34 F0                MOVX    @DPTR,A
001F35 80E7              SJMP    ?C0002?YC_UTILITIES
   14: 	return;
   15: }
001F37         ?C0004?YC_UTILITIES:
001F37 22                RET     
----- FUNCTION _xmemset (END) -------


----- FUNCTION delUserData (BEGIN) -----
 FILE: 'lxProtocol.c'
  371: static void delUserData(void)
  372: {
  373: 	//(mem_register_buf) = DEVICE_UNREGISTERED;
  374: 	//*(mem_le_adv_data + 13) = *(mem_register_buf);
  375: 	xmemset((u8_t *)&deviceInfo, 0, sizeof(DeviceInfo_t));
001F38 7E4C              MOV     R6,#HIGH deviceInfo
001F3A 7F06              MOV     R7,#LOW deviceInfo
001F3C 7B0A              MOV     R3,#0AH
001F3E E4                CLR     A
001F3F FD                MOV     R5,A
001F40 F11A              ACALL   _xmemset
  376: 	QueueInit();
001F42 F157              ACALL   QueueInit
  377: 	*(mem_le_adv_data + 13) = DEVICE_UNREGISTERED;
001F44 9043E7            MOV     DPTR,#043E7H
001F47 E4                CLR     A
001F48 F0                MOVX    @DPTR,A
  378: 	UTCTime = 0;
001F49 904C5E            MOV     DPTR,#UTCTime
001F4C 12033E            LCALL   ?C?LSTKXDATA
001F4F 00                DB      00H
001F50 00                DB      00H
001F51 00                DB      00H
001F52 00                DB      00H
  379: 	SpiFlashOperator(CS_CMD_WRITE_FLASH);
001F53 7F41              MOV     R7,#041H
001F55 A186              AJMP    _SpiFlashOperator
  380: }
----- FUNCTION delUserData (END) -------


----- FUNCTION QueueInit (BEGIN) -----
 FILE: 'lxProtocol.c'
  502: void QueueInit(void)
  503: {
  504: 	historyUserData.head = 0;
  505: 	historyUserData.tail = 0;
001F57 E4                CLR     A
001F58 904C10            MOV     DPTR,#historyUserData
001F5B F0                MOVX    @DPTR,A
  506: 	historyUserData.size = 0;
001F5C A3                INC     DPTR
001F5D F0                MOVX    @DPTR,A
  507: }
001F5E A3                INC     DPTR
001F5F F0                MOVX    @DPTR,A
  508: 
001F60 22                RET     
----- FUNCTION QueueInit (END) -------


----- FUNCTION _lxSendRecvDataACK (BEGIN) -----
 FILE: 'lxProtocol.c'
   32: static void lxSendRecvDataACK(u16_t handle, u8_t state)
   33: {
;---- Variable 'handle' assigned to Register 'R2/R3' ----
001F61 AB07              MOV     R3,AR7
001F63 AA06              MOV     R2,AR6
;---- Variable 'state' assigned to Register 'R5' ----
   34: 	if(notifyValueUUIDA625 != NOTIFY_ENABLE)
   35: 	{
001F65 904C5A            MOV     DPTR,#notifyValueUUIDA625
001F68 E0                MOVX    A,@DPTR
001F69 6401              XRL     A,#01H
001F6B 7026              JNZ     ?C0006?LXPROTOCOL
   36: 		return;
   37: 	}
001F6D         ?C0005?LXPROTOCOL:
   38: 
   39: 	btCmdBuf.len = 0x06;
001F6D 904C63            MOV     DPTR,#btCmdBuf
001F70 7406              MOV     A,#06H
001F72 F0                MOVX    @DPTR,A
   40: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
001F73 A3                INC     DPTR
001F74 7430              MOV     A,#030H
001F76 F0                MOVX    @DPTR,A
   41: 	btCmdBuf.DATA[1] = LO_UINT16(handle);
001F77 EB                MOV     A,R3
001F78 A3                INC     DPTR
001F79 F0                MOVX    @DPTR,A
   42: 	btCmdBuf.DATA[2] = HI_UINT16(handle);
001F7A EA                MOV     A,R2
001F7B A3                INC     DPTR
001F7C F0                MOVX    @DPTR,A
   43: 	btCmdBuf.DATA[3] = ACK_FRAME;
001F7D E4                CLR     A
001F7E A3                INC     DPTR
001F7F F0                MOVX    @DPTR,A
   44: 	btCmdBuf.DATA[4] = RECV_ACK_FRAME_LEN;
001F80 A3                INC     DPTR
001F81 04                INC     A
001F82 F0                MOVX    @DPTR,A
   45: 	btCmdBuf.DATA[5] = state;
001F83 A3                INC     DPTR
001F84 ED                MOV     A,R5
001F85 F0                MOVX    @DPTR,A
   46: 	
   47: 	BT_CmdFifoIn(&btCmdBuf);
001F86 7B01              MOV     R3,#01H
001F88 7A4C              MOV     R2,#HIGH btCmdBuf
001F8A 7963              MOV     R1,#LOW btCmdBuf
001F8C 1227F1            LCALL   _BT_CmdFifoIn
   48: 	YC_Delay10ms(10);
001F8F 7F0A              MOV     R7,#0AH
001F91 F194              ACALL   _YC_Delay10ms
   49: }
001F93         ?C0006?LXPROTOCOL:
001F93 22                RET     
----- FUNCTION _lxSendRecvDataACK (END) -------


----- FUNCTION _YC_Delay10ms (BEGIN) -----
 FILE: 'YC_Utilities.c'
   60: void YC_Delay10ms(u8_t Time)
   61: {
;---- Variable 'Time' assigned to Register 'R7' ----
   62: 	u16_t j; 
   63: 	for(;Time>0;Time--)
001F94         ?C0027?YC_UTILITIES:
001F94 EF                MOV     A,R7
001F95 D3                SETB    C
001F96 9400              SUBB    A,#00H
001F98 4011              JC      ?C0033?YC_UTILITIES
   64: 	{
   65: 		for(j=0;j<11900;j++);
;---- Variable 'j' assigned to Register 'R4/R5' ----
001F9A E4                CLR     A
001F9B FD                MOV     R5,A
001F9C FC                MOV     R4,A
001F9D         ?C0030?YC_UTILITIES:
001F9D 0D                INC     R5
001F9E BD0001            CJNE    R5,#00H,?C0054?YC_UTILITIES
001FA1 0C                INC     R4
001FA2         ?C0054?YC_UTILITIES:
001FA2 BC2EF8            CJNE    R4,#02EH,?C0030?YC_UTILITIES
001FA5 BD7CF5            CJNE    R5,#07CH,?C0030?YC_UTILITIES
   66: 	}
001FA8         ?C0029?YC_UTILITIES:
001FA8 1F                DEC     R7
001FA9 80E9              SJMP    ?C0027?YC_UTILITIES
   67: }
001FAB         ?C0033?YC_UTILITIES:
001FAB 22                RET     
----- FUNCTION _YC_Delay10ms (END) -------


----- FUNCTION _xmemcpy (BEGIN) -----
 FILE: 'YC_Utilities.c'
   16: void xmemcpy(pxbyte dest, u8_t* src, u8_t len) small
   17: {
001FAC 8E17              MOV     dest,R6
001FAE 8F18              MOV     dest+01H,R7
001FB0 8B19              MOV     src,R3
001FB2 8A1A              MOV     src+01H,R2
001FB4 891B              MOV     src+02H,R1
001FB6         ?C0005?YC_UTILITIES:
   18: 	while(len--)
001FB6 AF1C              MOV     R7,len
001FB8 151C              DEC     len
001FBA EF                MOV     A,R7
001FBB 6025              JZ      ?C0007?YC_UTILITIES
   19: 		*dest++ = *src++;
001FBD AB19              MOV     R3,src
001FBF 051B              INC     src+02H
001FC1 E51B              MOV     A,src+02H
001FC3 AA1A              MOV     R2,src+01H
001FC5 7002              JNZ     ?C0045?YC_UTILITIES
001FC7 051A              INC     src+01H
001FC9         ?C0045?YC_UTILITIES:
001FC9 14                DEC     A
001FCA F9                MOV     R1,A
001FCB 1200F9            LCALL   ?C?CLDPTR
001FCE FF                MOV     R7,A
001FCF 0518              INC     dest+01H
001FD1 E518              MOV     A,dest+01H
001FD3 AC17              MOV     R4,dest
001FD5 7002              JNZ     ?C0046?YC_UTILITIES
001FD7 0517              INC     dest
001FD9         ?C0046?YC_UTILITIES:
001FD9 14                DEC     A
001FDA F582              MOV     DPL,A
001FDC 8C83              MOV     DPH,R4
001FDE EF                MOV     A,R7
001FDF F0                MOVX    @DPTR,A
001FE0 80D4              SJMP    ?C0005?YC_UTILITIES
   20: 	return;
   21: }
001FE2         ?C0007?YC_UTILITIES:
001FE2 22                RET     
----- FUNCTION _xmemcpy (END) -------


----- FUNCTION _generateChecksum (BEGIN) -----
 FILE: 'system.c'
  103: u8_t generateChecksum(u8_t *buf,u8_t len)
  104: {
001FE3 904E50            MOV     DPTR,#buf
001FE6 EB                MOV     A,R3
001FE7 F0                MOVX    @DPTR,A
001FE8 A3                INC     DPTR
001FE9 EA                MOV     A,R2
001FEA F0                MOVX    @DPTR,A
001FEB A3                INC     DPTR
001FEC E9                MOV     A,R1
001FED F0                MOVX    @DPTR,A
;---- Variable 'len' assigned to Register 'R5' ----
  105: 	u8_t result;
  106: 	result = 0;
;---- Variable 'result' assigned to Register 'R7' ----
001FEE E4                CLR     A
001FEF FF                MOV     R7,A
001FF0         ?C0011?SYSTEM:
  107: 	while(len--) {
001FF0 AE05              MOV     R6,AR5
001FF2 1D                DEC     R5
001FF3 EE                MOV     A,R6
001FF4 6017              JZ      ?C0012?SYSTEM
  108: 		result^=*buf++;
001FF6 904E50            MOV     DPTR,#buf
001FF9 E0                MOVX    A,@DPTR
001FFA FB                MOV     R3,A
001FFB A3                INC     DPTR
001FFC E4                CLR     A
001FFD 75F001            MOV     B,#01H
002000 1201C8            LCALL   ?C?ILDIX
002003 A9F0              MOV     R1,B
002005 FA                MOV     R2,A
002006 1200F9            LCALL   ?C?CLDPTR
002009 6F                XRL     A,R7
00200A FF                MOV     R7,A
  109: 	}
00200B 80E3              SJMP    ?C0011?SYSTEM
00200D         ?C0012?SYSTEM:
  110: 	return result;
  111: }
00200D 22                RET     
----- FUNCTION _generateChecksum (END) -------


----- FUNCTION BTControlProcess (BEGIN) -----
 FILE: 'system.c'
  113: void BTControlProcess(void)
  114: {
  115: 	BT_EVENTFIFO_t event;
  116: 	//normal process
  117: 	BT_EventFifoOut(&event);
00200E 7B01              MOV     R3,#01H
002010 7A4D              MOV     R2,#HIGH event
002012 7965              MOV     R1,#LOW event
002014 1193              ACALL   _BT_EventFifoOut
  118: 	if(event.len != 0)
002016 904D65            MOV     DPTR,#event
002019 E0                MOVX    A,@DPTR
00201A 6076              JZ      ?C0027?SYSTEM
  119: 	{
  120: 		//YC_UARTSendData(event.DATA, event.len);
  121: 		switch(event.DATA[0]) {
00201C A3                INC     DPTR
00201D E0                MOVX    A,@DPTR
00201E 24EE              ADD     A,#0EEH
002020 601C              JZ      ?C0018?SYSTEM
002022 14                DEC     A
002023 6024              JZ      ?C0019?SYSTEM
002025 14                DEC     A
002026 602A              JZ      ?C0020?SYSTEM
002028 24FC              ADD     A,#0FCH
00202A 6060              JZ      ?C0026?SYSTEM
00202C 2407              ADD     A,#07H
00202E 7062              JNZ     ?C0027?SYSTEM
  122: 			case CS_NOTIFY_POWERON:
  123: 				break;
  124: 			case CS_NOTIFY_DISC:		//bluetooth disconnect
002030         ?C0017?SYSTEM:
  125: 				notifyValueUUIDA621 = NOTIFY_INDICATE_DISABLE;
002030 E4                CLR     A
002031 904C59            MOV     DPTR,#notifyValueUUIDA621
002034 F0                MOVX    @DPTR,A
  126: 				notifyValueUUIDA625 = NOTIFY_INDICATE_DISABLE;
002035 904C5A            MOV     DPTR,#notifyValueUUIDA625
002038 F0                MOVX    @DPTR,A
  127: 				bleConnStatus= BLE_STATUS_DISCONN;
002039 904C5B            MOV     DPTR,#bleConnStatus
00203C F0                MOVX    @DPTR,A
  128: 				break;
00203D 22                RET     
  129: 			case CS_NOTIFY_CONN:	//bluetooth connected
00203E         ?C0018?SYSTEM:
  130: 				lxOptStatus = OPT_IDLE;
00203E E4                CLR     A
00203F 904C5C            MOV     DPTR,#lxOptStatus
002042 F0                MOVX    @DPTR,A
  131: 				bleConnStatus= BLE_STATUS_CONN;
002043 904C5B            MOV     DPTR,#bleConnStatus
002046 04                INC     A
002047 F0                MOVX    @DPTR,A
  132: 				break;
002048 22                RET     
  133: 			case CS_NOTIFY_DATA:	//receive data
002049         ?C0019?SYSTEM:
  134: 				lxRecvDataFromApp(&event);
002049 7B01              MOV     R3,#01H
00204B 7A4D              MOV     R2,#HIGH event
00204D 7965              MOV     R1,#LOW event
00204F 021DCF            LJMP    _lxRecvDataFromApp
  135: 				break; 
  136: 			case CS_NOTIFY_OPENHANDLE:
002052         ?C0020?SYSTEM:
  137: 				if(event.DATA[1] == HANDLE_UUIDA621_NOTIFY)
002052 904D67            MOV     DPTR,#event+02H
002055 E0                MOVX    A,@DPTR
002056 FF                MOV     R7,A
002057 B41C0A            CJNE    A,#01CH,?C0021?SYSTEM
  138: 				{
  139: 					notifyValueUUIDA621 = event.DATA[3];
00205A 904D69            MOV     DPTR,#event+04H
00205D E0                MOVX    A,@DPTR
00205E 904C59            MOV     DPTR,#notifyValueUUIDA621
002061 F0                MOVX    @DPTR,A
  140: 				}
002062 800C              SJMP    ?C0022?SYSTEM
002064         ?C0021?SYSTEM:
  141: 				else if(event.DATA[1] == HANDLE_UUIDA625_NOTIFY)
002064 EF                MOV     A,R7
002065 B42508            CJNE    A,#025H,?C0022?SYSTEM
  142: 				{
  143: 					notifyValueUUIDA625 = event.DATA[3];
002068 904D69            MOV     DPTR,#event+04H
00206B E0                MOVX    A,@DPTR
00206C 904C5A            MOV     DPTR,#notifyValueUUIDA625
00206F F0                MOVX    @DPTR,A
  144: 				}
002070         ?C0022?SYSTEM:
  145: 
  146: 				if(*mem_register_buf == DEVICE_REGISTERED &&
002070 904C0E            MOV     DPTR,#04C0EH
002073 E0                MOVX    A,@DPTR
002074 B4011B            CJNE    A,#01H,?C0027?SYSTEM
002077 904C59            MOV     DPTR,#notifyValueUUIDA621
00207A E0                MOVX    A,@DPTR
00207B B40114            CJNE    A,#01H,?C0027?SYSTEM
00207E 904C5A            MOV     DPTR,#notifyValueUUIDA625
002081 E0                MOVX    A,@DPTR
002082 B4010D            CJNE    A,#01H,?C0027?SYSTEM
  147: 					notifyValueUUIDA621 == NOTIFY_ENABLE &&
  148: 					notifyValueUUIDA625 == NOTIFY_ENABLE)
  149: 				{
  150: 					lxOptStatus = OPT_LOGIN_REQ;
002085 904C5C            MOV     DPTR,#lxOptStatus
002088 7416              MOV     A,#016H
00208A F0                MOVX    @DPTR,A
  151: 				}
  152: 				break;
00208B 22                RET     
  153: 			case CS_NOTIFY_READ_REQ:
  154: 				break;
  155: 			case CS_NOTIFY_INDICATE_CONFIRM:
00208C         ?C0026?SYSTEM:
  156: 				handleIndicationConfirm = 1;
00208C 904C5D            MOV     DPTR,#handleIndicationConfirm
00208F 7401              MOV     A,#01H
002091 F0                MOVX    @DPTR,A
  157: 				break;
  158: 		}
  159: 	}
  160: }
002092         ?C0027?SYSTEM:
002092 22                RET     
----- FUNCTION BTControlProcess (END) -------


----- FUNCTION _BT_EventFifoOut (BEGIN) -----
 FILE: 'BT_IPC.c'
   43: void BT_EventFifoOut(BT_EVENTFIFO_t * event)
   44: {
002093 904E3A            MOV     DPTR,#event
002096 EB                MOV     A,R3
002097 F0                MOVX    @DPTR,A
002098 A3                INC     DPTR
002099 EA                MOV     A,R2
00209A F0                MOVX    @DPTR,A
00209B A3                INC     DPTR
00209C E9                MOV     A,R1
00209D F0                MOVX    @DPTR,A
   45: 	u16_t new_rprt,i;
   46: 	u8_t event_prefix;
   47: 	if(BT_GetEvtFifoDepth()>2)
00209E 3196              ACALL   BT_GetEvtFifoDepth
0020A0 EF                MOV     A,R7
0020A1 D3                SETB    C
0020A2 9402              SUBB    A,#02H
0020A4 5002              JNC     $ + 4H
0020A6 2187              AJMP    ?C0011?BT_IPC
   48: 	{//event is not empty
   49: 		new_rprt = ESWAP(BT_EventRptr);
0020A8 904A05            MOV     DPTR,#BT_EventRptr+01H
0020AB E0                MOVX    A,@DPTR
0020AC FC                MOV     R4,A
0020AD 904A04            MOV     DPTR,#BT_EventRptr
0020B0 E0                MOVX    A,@DPTR
0020B1 FF                MOV     R7,A
0020B2 EC                MOV     A,R4
0020B3 FE                MOV     R6,A
0020B4 EF                MOV     A,R7
0020B5 904E3D            MOV     DPTR,#new_rprt
0020B8 EE                MOV     A,R6
0020B9 F0                MOVX    @DPTR,A
0020BA A3                INC     DPTR
0020BB EF                MOV     A,R7
0020BC F0                MOVX    @DPTR,A
   50: 		event_prefix = HREAD(new_rprt++);
0020BD 904E3D            MOV     DPTR,#new_rprt
0020C0 E4                CLR     A
0020C1 75F001            MOV     B,#01H
0020C4 1201C8            LCALL   ?C?ILDIX
0020C7 85F082            MOV     DPL,B
0020CA F583              MOV     DPH,A
0020CC E0                MOVX    A,@DPTR
0020CD FF                MOV     R7,A
;---- Variable 'event_prefix' assigned to Register 'R7' ----
   51: 		if(event_prefix == CS_PREFIX_EVENT) {
0020CE 64C6              XRL     A,#0C6H
0020D0 6002              JZ      $ + 4H
0020D2 2162              AJMP    ?C0012?BT_IPC
   52: 			event->len = HREAD(new_rprt++);
0020D4 904E3D            MOV     DPTR,#new_rprt
0020D7 75F001            MOV     B,#01H
0020DA 1201C8            LCALL   ?C?ILDIX
0020DD 85F082            MOV     DPL,B
0020E0 F583              MOV     DPH,A
0020E2 E0                MOVX    A,@DPTR
0020E3 FF                MOV     R7,A
0020E4 904E3A            MOV     DPTR,#event
0020E7 E0                MOVX    A,@DPTR
0020E8 FB                MOV     R3,A
0020E9 A3                INC     DPTR
0020EA E0                MOVX    A,@DPTR
0020EB FA                MOV     R2,A
0020EC A3                INC     DPTR
0020ED E0                MOVX    A,@DPTR
0020EE F9                MOV     R1,A
0020EF EF                MOV     A,R7
0020F0 12013F            LCALL   ?C?CSTPTR
   53: 			if( new_rprt == (mem_event_buf_end+1) )
0020F3 904E3D            MOV     DPTR,#new_rprt
0020F6 E0                MOVX    A,@DPTR
0020F7 B4500F            CJNE    A,#050H,?C0013?BT_IPC
0020FA A3                INC     DPTR
0020FB E0                MOVX    A,@DPTR
0020FC B4000A            CJNE    A,#00H,?C0013?BT_IPC
   54: 			{
   55: 				new_rprt = mem_event_buf;
0020FF 904E3D            MOV     DPTR,#new_rprt
002102 744F              MOV     A,#04FH
002104 F0                MOVX    @DPTR,A
002105 A3                INC     DPTR
002106 7480              MOV     A,#080H
002108 F0                MOVX    @DPTR,A
   56: 			}
002109         ?C0013?BT_IPC:
   57: 			for(i=0;i<event->len;i++)
;---- Variable 'i' assigned to Register 'R6/R7' ----
002109 E4                CLR     A
00210A FF                MOV     R7,A
00210B FE                MOV     R6,A
00210C         ?C0014?BT_IPC:
00210C 904E3A            MOV     DPTR,#event
00210F E0                MOVX    A,@DPTR
002110 FB                MOV     R3,A
002111 A3                INC     DPTR
002112 E0                MOVX    A,@DPTR
002113 FA                MOV     R2,A
002114 A3                INC     DPTR
002115 E0                MOVX    A,@DPTR
002116 F9                MOV     R1,A
002117 1200F9            LCALL   ?C?CLDPTR
00211A FD                MOV     R5,A
00211B C3                CLR     C
00211C EF                MOV     A,R7
00211D 9D                SUBB    A,R5
00211E EE                MOV     A,R6
00211F 9400              SUBB    A,#00H
002121 504E              JNC     ?C0018?BT_IPC
   58: 			{
   59: 				event->DATA[i] = HREAD(new_rprt++);
002123 904E3D            MOV     DPTR,#new_rprt
002126 E4                CLR     A
002127 75F001            MOV     B,#01H
00212A 1201C8            LCALL   ?C?ILDIX
00212D 85F082            MOV     DPL,B
002130 F583              MOV     DPH,A
002132 E0                MOVX    A,@DPTR
002133 FD                MOV     R5,A
002134 E9                MOV     A,R1
002135 2401              ADD     A,#01H
002137 F9                MOV     R1,A
002138 E4                CLR     A
002139 3A                ADDC    A,R2
00213A FA                MOV     R2,A
00213B E9                MOV     A,R1
00213C 2F                ADD     A,R7
00213D F9                MOV     R1,A
00213E EA                MOV     A,R2
00213F 3E                ADDC    A,R6
002140 FA                MOV     R2,A
002141 ED                MOV     A,R5
002142 12013F            LCALL   ?C?CSTPTR
   60: 				if( new_rprt == (mem_event_buf_end+1) )
002145 904E3D            MOV     DPTR,#new_rprt
002148 E0                MOVX    A,@DPTR
002149 B4500F            CJNE    A,#050H,?C0016?BT_IPC
00214C A3                INC     DPTR
00214D E0                MOVX    A,@DPTR
00214E B4000A            CJNE    A,#00H,?C0016?BT_IPC
   61: 				{
   62: 					new_rprt = mem_event_buf;
002151 904E3D            MOV     DPTR,#new_rprt
002154 744F              MOV     A,#04FH
002156 F0                MOVX    @DPTR,A
002157 A3                INC     DPTR
002158 7480              MOV     A,#080H
00215A F0                MOVX    @DPTR,A
   63: 				}
   64: 			}
00215B         ?C0016?BT_IPC:
00215B 0F                INC     R7
00215C BF0001            CJNE    R7,#00H,?C0033?BT_IPC
00215F 0E                INC     R6
002160         ?C0033?BT_IPC:
002160 80AA              SJMP    ?C0014?BT_IPC
   65: 		}
002162         ?C0012?BT_IPC:
   66: 		else {
   67: 			event->len = 0;
002162 904E3A            MOV     DPTR,#event
002165 E0                MOVX    A,@DPTR
002166 FB                MOV     R3,A
002167 A3                INC     DPTR
002168 E0                MOVX    A,@DPTR
002169 FA                MOV     R2,A
00216A A3                INC     DPTR
00216B E0                MOVX    A,@DPTR
00216C F9                MOV     R1,A
00216D E4                CLR     A
00216E 12013F            LCALL   ?C?CSTPTR
   68: 		}
002171         ?C0018?BT_IPC:
   69: 		BT_EventRptr = ESWAP(new_rprt);
002171 904E3D            MOV     DPTR,#new_rprt
002174 E0                MOVX    A,@DPTR
002175 FC                MOV     R4,A
002176 A3                INC     DPTR
002177 E0                MOVX    A,@DPTR
002178 FA                MOV     R2,A
002179 EC                MOV     A,R4
00217A FF                MOV     R7,A
00217B EA                MOV     A,R2
00217C FE                MOV     R6,A
00217D EF                MOV     A,R7
00217E 904A04            MOV     DPTR,#BT_EventRptr
002181 EE                MOV     A,R6
002182 F0                MOVX    @DPTR,A
002183 A3                INC     DPTR
002184 EF                MOV     A,R7
002185 F0                MOVX    @DPTR,A
   70: 	}
002186 22                RET     
002187         ?C0011?BT_IPC:
   71: 	else
   72: 	{
   73: 		event->len = 0;
002187 904E3A            MOV     DPTR,#event
00218A E0                MOVX    A,@DPTR
00218B FB                MOV     R3,A
00218C A3                INC     DPTR
00218D E0                MOVX    A,@DPTR
00218E FA                MOV     R2,A
00218F A3                INC     DPTR
002190 E0                MOVX    A,@DPTR
002191 F9                MOV     R1,A
002192 E4                CLR     A
002193 02013F            LJMP    ?C?CSTPTR
   74: 	}
----- FUNCTION _BT_EventFifoOut (END) -------


----- FUNCTION BT_GetEvtFifoDepth (BEGIN) -----
 FILE: 'BT_IPC.c'
   87: u8_t BT_GetEvtFifoDepth(void)
   88: {
   89: 	u16_t wptr,rptr,len;
   90: 	wptr = ESWAP(BT_EventWptr);
002196 904A07            MOV     DPTR,#BT_EventWptr+01H
002199 E0                MOVX    A,@DPTR
00219A FC                MOV     R4,A
00219B 904A06            MOV     DPTR,#BT_EventWptr
00219E E0                MOVX    A,@DPTR
00219F FF                MOV     R7,A
0021A0 EC                MOV     A,R4
0021A1 EF                MOV     A,R7
;---- Variable 'wptr' assigned to Register 'R4/R5' ----
0021A2 FD                MOV     R5,A
   91: 	rptr = ESWAP(BT_EventRptr);
0021A3 904A05            MOV     DPTR,#BT_EventRptr+01H
0021A6 E0                MOVX    A,@DPTR
0021A7 FA                MOV     R2,A
0021A8 904A04            MOV     DPTR,#BT_EventRptr
0021AB E0                MOVX    A,@DPTR
0021AC FF                MOV     R7,A
0021AD EA                MOV     A,R2
0021AE FE                MOV     R6,A
0021AF EF                MOV     A,R7
;---- Variable 'rptr' assigned to Register 'R6/R7' ----
   92: 	len = (wptr + BT_EVT_BUF_LEN - rptr)&(BT_EVT_BUF_LEN-1);
0021B0 ED                MOV     A,R5
0021B1 2480              ADD     A,#080H
0021B3 FD                MOV     R5,A
0021B4 E4                CLR     A
0021B5 3C                ADDC    A,R4
0021B6 FC                MOV     R4,A
0021B7 C3                CLR     C
0021B8 ED                MOV     A,R5
0021B9 9F                SUBB    A,R7
0021BA FF                MOV     R7,A
0021BB EC                MOV     A,R4
0021BC 9E                SUBB    A,R6
0021BD 7E00              MOV     R6,#00H
0021BF EF                MOV     A,R7
0021C0 547F              ANL     A,#07FH
0021C2 FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R6/R7' ----
   93: 	return len&0xff;
   94: }
0021C3 22                RET     
----- FUNCTION BT_GetEvtFifoDepth (END) -------


----- FUNCTION _YC_UtilTimerStop (BEGIN) -----
 FILE: 'YC_Sys.c'
   66: bool YC_UtilTimerStop( u8_t timer_id) large
   67: {
;---- Variable 'timer_id' assigned to Register 'R4' ----
0021C4 AC07              MOV     R4,AR7
   68: 	if((timer_id > 8) ||!((YC_UtilTimer.timer_flages >> timer_id) & 1))
0021C6 EF                MOV     A,R7
0021C7 D3                SETB    C
0021C8 9408              SUBB    A,#08H
0021CA 5011              JNC     ?C0018?YC_SYS
0021CC 904CDB            MOV     DPTR,#YC_UtilTimer
0021CF E0                MOVX    A,@DPTR
0021D0 FE                MOV     R6,A
0021D1 A807              MOV     R0,AR7
0021D3 08                INC     R0
0021D4 8002              SJMP    ?C0040?YC_SYS
0021D6         ?C0039?YC_SYS:
0021D6 C3                CLR     C
0021D7 13                RRC     A
0021D8         ?C0040?YC_SYS:
0021D8 D8FC              DJNZ    R0,?C0039?YC_SYS
0021DA 20E002            JB      ACC.0,?C0017?YC_SYS
0021DD         ?C0018?YC_SYS:
   69: 		return false;
0021DD C3                CLR     C
0021DE 22                RET     
0021DF         ?C0017?YC_SYS:
   70: 	YC_UtilTimer.timer_flages &= ~( 1<< timer_id);
0021DF AF04              MOV     R7,AR4
0021E1 7401              MOV     A,#01H
0021E3 A807              MOV     R0,AR7
0021E5 08                INC     R0
0021E6 8002              SJMP    ?C0042?YC_SYS
0021E8         ?C0041?YC_SYS:
0021E8 C3                CLR     C
0021E9 33                RLC     A
0021EA         ?C0042?YC_SYS:
0021EA D8FC              DJNZ    R0,?C0041?YC_SYS
0021EC F4                CPL     A
0021ED 5E                ANL     A,R6
0021EE 904CDB            MOV     DPTR,#YC_UtilTimer
0021F1 F0                MOVX    @DPTR,A
   71: 	YC_UtilTimer.callback[timer_id] = 0;
0021F2 EC                MOV     A,R4
0021F3 75F003            MOV     B,#03H
0021F6 A4                MUL     AB
0021F7 24DC              ADD     A,#LOW YC_UtilTimer+01H
0021F9 F582              MOV     DPL,A
0021FB E4                CLR     A
0021FC 344C              ADDC    A,#HIGH YC_UtilTimer+01H
0021FE F583              MOV     DPH,A
002200 E4                CLR     A
002201 F0                MOVX    @DPTR,A
002202 A3                INC     DPTR
002203 F0                MOVX    @DPTR,A
002204 A3                INC     DPTR
002205 F0                MOVX    @DPTR,A
   72: 	YC_UtilTimer.timer_end[timer_id] = 0;
002206 EC                MOV     A,R4
002207 25E0              ADD     A,ACC
002209 25E0              ADD     A,ACC
00220B 24F4              ADD     A,#LOW YC_UtilTimer+019H
00220D F582              MOV     DPL,A
00220F E4                CLR     A
002210 344C              ADDC    A,#HIGH YC_UtilTimer+019H
002212 F583              MOV     DPH,A
002214 12033E            LCALL   ?C?LSTKXDATA
002217 00                DB      00H
002218 00                DB      00H
002219 00                DB      00H
00221A 00                DB      00H
   73: 	return true;
00221B D3                SETB    C
   74: }
00221C 22                RET     
----- FUNCTION _YC_UtilTimerStop (END) -------


----- FUNCTION YC_UtilTimerProcess (BEGIN) -----
 FILE: 'YC_Sys.c'
   76: void YC_UtilTimerProcess(void) small
   77: {
   78: 	u8_t i;
   79: 
   80: 	if(YC_UtilTimer.last_timer > (YC_CLK_N + 0x1000)){
00221D 908101            MOV     DPTR,#08101H
002220 E0                MOVX    A,@DPTR
002221 FF                MOV     R7,A
002222 E4                CLR     A
002223 FC                MOV     R4,A
002224 FD                MOV     R5,A
002225 FE                MOV     R6,A
002226 7808              MOV     R0,#08H
002228 12031F            LCALL   ?C?LSHL
00222B A804              MOV     R0,AR4
00222D A905              MOV     R1,AR5
00222F AA06              MOV     R2,AR6
002231 AB07              MOV     R3,AR7
002233 908100            MOV     DPTR,#08100H
002236 E0                MOVX    A,@DPTR
002237 FF                MOV     R7,A
002238 E4                CLR     A
002239 EB                MOV     A,R3
00223A 4F                ORL     A,R7
00223B FF                MOV     R7,A
00223C EA                MOV     A,R2
00223D FE                MOV     R6,A
00223E E9                MOV     A,R1
00223F FD                MOV     R5,A
002240 E8                MOV     A,R0
002241 FC                MOV     R4,A
002242 C004              PUSH    AR4
002244 C005              PUSH    AR5
002246 C006              PUSH    AR6
002248 C007              PUSH    AR7
00224A 908102            MOV     DPTR,#08102H
00224D E0                MOVX    A,@DPTR
00224E FF                MOV     R7,A
00224F E4                CLR     A
002250 FC                MOV     R4,A
002251 FD                MOV     R5,A
002252 FE                MOV     R6,A
002253 7810              MOV     R0,#010H
002255 12031F            LCALL   ?C?LSHL
002258 D003              POP     AR3
00225A D002              POP     AR2
00225C D001              POP     AR1
00225E D000              POP     AR0
002260 EF                MOV     A,R7
002261 4B                ORL     A,R3
002262 FF                MOV     R7,A
002263 EE                MOV     A,R6
002264 4A                ORL     A,R2
002265 FE                MOV     R6,A
002266 ED                MOV     A,R5
002267 49                ORL     A,R1
002268 FD                MOV     R5,A
002269 EC                MOV     A,R4
00226A 48                ORL     A,R0
00226B FC                MOV     R4,A
00226C C004              PUSH    AR4
00226E C005              PUSH    AR5
002270 C006              PUSH    AR6
002272 C007              PUSH    AR7
002274 A3                INC     DPTR
002275 E0                MOVX    A,@DPTR
002276 FF                MOV     R7,A
002277 E4                CLR     A
002278 FC                MOV     R4,A
002279 FD                MOV     R5,A
00227A FE                MOV     R6,A
00227B 7818              MOV     R0,#018H
00227D 12031F            LCALL   ?C?LSHL
002280 D003              POP     AR3
002282 D002              POP     AR2
002284 D001              POP     AR1
002286 D000              POP     AR0
002288 EF                MOV     A,R7
002289 4B                ORL     A,R3
00228A FF                MOV     R7,A
00228B EE                MOV     A,R6
00228C 4A                ORL     A,R2
00228D FE                MOV     R6,A
00228E ED                MOV     A,R5
00228F 49                ORL     A,R1
002290 FD                MOV     R5,A
002291 EC                MOV     A,R4
002292 48                ORL     A,R0
002293 FC                MOV     R4,A
002294 E4                CLR     A
002295 2F                ADD     A,R7
002296 FF                MOV     R7,A
002297 EE                MOV     A,R6
002298 3410              ADDC    A,#010H
00229A FE                MOV     R6,A
00229B E4                CLR     A
00229C 3D                ADDC    A,R5
00229D FD                MOV     R5,A
00229E E4                CLR     A
00229F 3C                ADDC    A,R4
0022A0 FC                MOV     R4,A
0022A1 904D14            MOV     DPTR,#YC_UtilTimer+039H
0022A4 E0                MOVX    A,@DPTR
0022A5 F8                MOV     R0,A
0022A6 A3                INC     DPTR
0022A7 E0                MOVX    A,@DPTR
0022A8 F9                MOV     R1,A
0022A9 A3                INC     DPTR
0022AA E0                MOVX    A,@DPTR
0022AB FA                MOV     R2,A
0022AC A3                INC     DPTR
0022AD E0                MOVX    A,@DPTR
0022AE FB                MOV     R3,A
0022AF D3                SETB    C
0022B0 1202FB            LCALL   ?C?ULCMP
0022B3 405D              JC      ?C0020?YC_SYS
   81: 		for(i = 0; i < YC_UTIL_TIMER_NUM; ++i){
0022B5 E4                CLR     A
0022B6 F51F              MOV     i,A
0022B8         ?C0021?YC_SYS:
   82: 			if((YC_UtilTimer.timer_flages >> i) & 1){
0022B8 AF1F              MOV     R7,i
0022BA 904CDB            MOV     DPTR,#YC_UtilTimer
0022BD E0                MOVX    A,@DPTR
0022BE FE                MOV     R6,A
0022BF A807              MOV     R0,AR7
0022C1 08                INC     R0
0022C2 8002              SJMP    ?C0044?YC_SYS
0022C4         ?C0043?YC_SYS:
0022C4 C3                CLR     C
0022C5 13                RRC     A
0022C6         ?C0044?YC_SYS:
0022C6 D8FC              DJNZ    R0,?C0043?YC_SYS
0022C8 30E040            JNB     ACC.0,?C0023?YC_SYS
   83: 				YC_UtilTimer.timer_end[i] -= YC_UtilTimer.last_timer;
0022CB E51F              MOV     A,i
0022CD 25E0              ADD     A,ACC
0022CF 25E0              ADD     A,ACC
0022D1 24F4              ADD     A,#LOW YC_UtilTimer+019H
0022D3 F582              MOV     DPL,A
0022D5 E4                CLR     A
0022D6 344C              ADDC    A,#HIGH YC_UtilTimer+019H
0022D8 F583              MOV     DPH,A
0022DA C083              PUSH    DPH
0022DC C082              PUSH    DPL
0022DE E0                MOVX    A,@DPTR
0022DF FC                MOV     R4,A
0022E0 A3                INC     DPTR
0022E1 E0                MOVX    A,@DPTR
0022E2 FD                MOV     R5,A
0022E3 A3                INC     DPTR
0022E4 E0                MOVX    A,@DPTR
0022E5 FE                MOV     R6,A
0022E6 A3                INC     DPTR
0022E7 E0                MOVX    A,@DPTR
0022E8 FF                MOV     R7,A
0022E9 904D14            MOV     DPTR,#YC_UtilTimer+039H
0022EC E0                MOVX    A,@DPTR
0022ED F8                MOV     R0,A
0022EE A3                INC     DPTR
0022EF E0                MOVX    A,@DPTR
0022F0 F9                MOV     R1,A
0022F1 A3                INC     DPTR
0022F2 E0                MOVX    A,@DPTR
0022F3 FA                MOV     R2,A
0022F4 A3                INC     DPTR
0022F5 E0                MOVX    A,@DPTR
0022F6 FB                MOV     R3,A
0022F7 C3                CLR     C
0022F8 EF                MOV     A,R7
0022F9 9B                SUBB    A,R3
0022FA FF                MOV     R7,A
0022FB EE                MOV     A,R6
0022FC 9A                SUBB    A,R2
0022FD FE                MOV     R6,A
0022FE ED                MOV     A,R5
0022FF 99                SUBB    A,R1
002300 FD                MOV     R5,A
002301 EC                MOV     A,R4
002302 98                SUBB    A,R0
002303 FC                MOV     R4,A
002304 D082              POP     DPL
002306 D083              POP     DPH
002308 120332            LCALL   ?C?LSTXDATA
   84: 			}
   85: 		}
00230B         ?C0023?YC_SYS:
00230B 051F              INC     i
00230D E51F              MOV     A,i
00230F B408A6            CJNE    A,#08H,?C0021?YC_SYS
   86: 	}
002312         ?C0020?YC_SYS:
   87: 	YC_UtilTimer.last_timer = YC_CLK_N;
002312 908101            MOV     DPTR,#08101H
002315 E0                MOVX    A,@DPTR
002316 FF                MOV     R7,A
002317 E4                CLR     A
002318 FC                MOV     R4,A
002319 FD                MOV     R5,A
00231A FE                MOV     R6,A
00231B 7808              MOV     R0,#08H
00231D 12031F            LCALL   ?C?LSHL
002320 A804              MOV     R0,AR4
002322 A905              MOV     R1,AR5
002324 AA06              MOV     R2,AR6
002326 AB07              MOV     R3,AR7
002328 908100            MOV     DPTR,#08100H
00232B E0                MOVX    A,@DPTR
00232C FF                MOV     R7,A
00232D E4                CLR     A
00232E EB                MOV     A,R3
00232F 4F                ORL     A,R7
002330 FF                MOV     R7,A
002331 EA                MOV     A,R2
002332 FE                MOV     R6,A
002333 E9                MOV     A,R1
002334 FD                MOV     R5,A
002335 E8                MOV     A,R0
002336 FC                MOV     R4,A
002337 C004              PUSH    AR4
002339 C005              PUSH    AR5
00233B C006              PUSH    AR6
00233D C007              PUSH    AR7
00233F 908102            MOV     DPTR,#08102H
002342 E0                MOVX    A,@DPTR
002343 FF                MOV     R7,A
002344 E4                CLR     A
002345 FC                MOV     R4,A
002346 FD                MOV     R5,A
002347 FE                MOV     R6,A
002348 7810              MOV     R0,#010H
00234A 12031F            LCALL   ?C?LSHL
00234D D003              POP     AR3
00234F D002              POP     AR2
002351 D001              POP     AR1
002353 D000              POP     AR0
002355 EF                MOV     A,R7
002356 4B                ORL     A,R3
002357 FF                MOV     R7,A
002358 EE                MOV     A,R6
002359 4A                ORL     A,R2
00235A FE                MOV     R6,A
00235B ED                MOV     A,R5
00235C 49                ORL     A,R1
00235D FD                MOV     R5,A
00235E EC                MOV     A,R4
00235F 48                ORL     A,R0
002360 FC                MOV     R4,A
002361 C004              PUSH    AR4
002363 C005              PUSH    AR5
002365 C006              PUSH    AR6
002367 C007              PUSH    AR7
002369 A3                INC     DPTR
00236A E0                MOVX    A,@DPTR
00236B FF                MOV     R7,A
00236C E4                CLR     A
00236D FC                MOV     R4,A
00236E FD                MOV     R5,A
00236F FE                MOV     R6,A
002370 7818              MOV     R0,#018H
002372 12031F            LCALL   ?C?LSHL
002375 D003              POP     AR3
002377 D002              POP     AR2
002379 D001              POP     AR1
00237B D000              POP     AR0
00237D EF                MOV     A,R7
00237E 4B                ORL     A,R3
00237F FF                MOV     R7,A
002380 EE                MOV     A,R6
002381 4A                ORL     A,R2
002382 FE                MOV     R6,A
002383 ED                MOV     A,R5
002384 49                ORL     A,R1
002385 FD                MOV     R5,A
002386 EC                MOV     A,R4
002387 48                ORL     A,R0
002388 FC                MOV     R4,A
002389 904D14            MOV     DPTR,#YC_UtilTimer+039H
00238C 120332            LCALL   ?C?LSTXDATA
   88: 	for(i = 0; i < YC_UTIL_TIMER_NUM; ++i){
00238F E4                CLR     A
002390 F51F              MOV     i,A
002392         ?C0025?YC_SYS:
   89: 		if((YC_UtilTimer.timer_flages >> i) & 1){
002392 AF1F              MOV     R7,i
002394 904CDB            MOV     DPTR,#YC_UtilTimer
002397 E0                MOVX    A,@DPTR
002398 FE                MOV     R6,A
002399 A807              MOV     R0,AR7
00239B 08                INC     R0
00239C 8002              SJMP    ?C0046?YC_SYS
00239E         ?C0045?YC_SYS:
00239E C3                CLR     C
00239F 13                RRC     A
0023A0         ?C0046?YC_SYS:
0023A0 D8FC              DJNZ    R0,?C0045?YC_SYS
0023A2 20E002            JB      ACC.0,$ + 5H
0023A5 8174              AJMP    ?C0027?YC_SYS
   90: 			if(YC_UtilTimer.timer_end[i] < YC_CLK_N){
0023A7 908101            MOV     DPTR,#08101H
0023AA E0                MOVX    A,@DPTR
0023AB FF                MOV     R7,A
0023AC E4                CLR     A
0023AD FC                MOV     R4,A
0023AE FD                MOV     R5,A
0023AF FE                MOV     R6,A
0023B0 7808              MOV     R0,#08H
0023B2 12031F            LCALL   ?C?LSHL
0023B5 A804              MOV     R0,AR4
0023B7 A905              MOV     R1,AR5
0023B9 AA06              MOV     R2,AR6
0023BB AB07              MOV     R3,AR7
0023BD 908100            MOV     DPTR,#08100H
0023C0 E0                MOVX    A,@DPTR
0023C1 FF                MOV     R7,A
0023C2 E4                CLR     A
0023C3 EB                MOV     A,R3
0023C4 4F                ORL     A,R7
0023C5 FF                MOV     R7,A
0023C6 EA                MOV     A,R2
0023C7 FE                MOV     R6,A
0023C8 E9                MOV     A,R1
0023C9 FD                MOV     R5,A
0023CA E8                MOV     A,R0
0023CB FC                MOV     R4,A
0023CC C004              PUSH    AR4
0023CE C005              PUSH    AR5
0023D0 C006              PUSH    AR6
0023D2 C007              PUSH    AR7
0023D4 908102            MOV     DPTR,#08102H
0023D7 E0                MOVX    A,@DPTR
0023D8 FF                MOV     R7,A
0023D9 E4                CLR     A
0023DA FC                MOV     R4,A
0023DB FD                MOV     R5,A
0023DC FE                MOV     R6,A
0023DD 7810              MOV     R0,#010H
0023DF 12031F            LCALL   ?C?LSHL
0023E2 D003              POP     AR3
0023E4 D002              POP     AR2
0023E6 D001              POP     AR1
0023E8 D000              POP     AR0
0023EA EF                MOV     A,R7
0023EB 4B                ORL     A,R3
0023EC FF                MOV     R7,A
0023ED EE                MOV     A,R6
0023EE 4A                ORL     A,R2
0023EF FE                MOV     R6,A
0023F0 ED                MOV     A,R5
0023F1 49                ORL     A,R1
0023F2 FD                MOV     R5,A
0023F3 EC                MOV     A,R4
0023F4 48                ORL     A,R0
0023F5 FC                MOV     R4,A
0023F6 C004              PUSH    AR4
0023F8 C005              PUSH    AR5
0023FA C006              PUSH    AR6
0023FC C007              PUSH    AR7
0023FE A3                INC     DPTR
0023FF E0                MOVX    A,@DPTR
002400 FF                MOV     R7,A
002401 E4                CLR     A
002402 FC                MOV     R4,A
002403 FD                MOV     R5,A
002404 FE                MOV     R6,A
002405 7818              MOV     R0,#018H
002407 12031F            LCALL   ?C?LSHL
00240A D003              POP     AR3
00240C D002              POP     AR2
00240E D001              POP     AR1
002410 D000              POP     AR0
002412 EF                MOV     A,R7
002413 4B                ORL     A,R3
002414 FF                MOV     R7,A
002415 EE                MOV     A,R6
002416 4A                ORL     A,R2
002417 FE                MOV     R6,A
002418 ED                MOV     A,R5
002419 49                ORL     A,R1
00241A FD                MOV     R5,A
00241B EC                MOV     A,R4
00241C 48                ORL     A,R0
00241D FC                MOV     R4,A
00241E E51F              MOV     A,i
002420 25E0              ADD     A,ACC
002422 25E0              ADD     A,ACC
002424 24F4              ADD     A,#LOW YC_UtilTimer+019H
002426 F582              MOV     DPL,A
002428 E4                CLR     A
002429 344C              ADDC    A,#HIGH YC_UtilTimer+019H
00242B F583              MOV     DPH,A
00242D E0                MOVX    A,@DPTR
00242E F8                MOV     R0,A
00242F A3                INC     DPTR
002430 E0                MOVX    A,@DPTR
002431 F9                MOV     R1,A
002432 A3                INC     DPTR
002433 E0                MOVX    A,@DPTR
002434 FA                MOV     R2,A
002435 A3                INC     DPTR
002436 E0                MOVX    A,@DPTR
002437 FB                MOV     R3,A
002438 C3                CLR     C
002439 1202FB            LCALL   ?C?ULCMP
00243C 5036              JNC     ?C0027?YC_SYS
   91: 				YC_UtilTimer.timer_flages &=~( 1<< i); // clear the flag
00243E 904CDB            MOV     DPTR,#YC_UtilTimer
002441 E0                MOVX    A,@DPTR
002442 FF                MOV     R7,A
002443 AE1F              MOV     R6,i
002445 7401              MOV     A,#01H
002447 A806              MOV     R0,AR6
002449 08                INC     R0
00244A 8002              SJMP    ?C0048?YC_SYS
00244C         ?C0047?YC_SYS:
00244C C3                CLR     C
00244D 33                RLC     A
00244E         ?C0048?YC_SYS:
00244E D8FC              DJNZ    R0,?C0047?YC_SYS
002450 F4                CPL     A
002451 5F                ANL     A,R7
002452 904CDB            MOV     DPTR,#YC_UtilTimer
002455 F0                MOVX    @DPTR,A
   92: 				YC_UtilTimer.callback[i](i);			
002456 E51F              MOV     A,i
002458 75F003            MOV     B,#03H
00245B A4                MUL     AB
00245C 24DC              ADD     A,#LOW YC_UtilTimer+01H
00245E F582              MOV     DPL,A
002460 E4                CLR     A
002461 344C              ADDC    A,#HIGH YC_UtilTimer+01H
002463 F583              MOV     DPH,A
002465 E0                MOVX    A,@DPTR
002466 A3                INC     DPTR
002467 E0                MOVX    A,@DPTR
002468 FA                MOV     R2,A
002469 A3                INC     DPTR
00246A E0                MOVX    A,@DPTR
00246B F582              MOV     DPL,A
00246D 8A83              MOV     DPH,R2
00246F AF1F              MOV     R7,i
002471 1203C6            LCALL   ?C?ICALL2
   93: 			}
   94: 		}
   95: 	}
002474         ?C0027?YC_SYS:
002474 051F              INC     i
002476 E51F              MOV     A,i
002478 C3                CLR     C
002479 9408              SUBB    A,#08H
00247B 5002              JNC     $ + 4H
00247D 6192              AJMP    ?C0025?YC_SYS
   96: 	return;
   97: }
00247F 22                RET     
----- FUNCTION YC_UtilTimerProcess (END) -------


----- FUNCTION _YC_UARTSendData (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  351: void YC_UARTSendData(u8_t* pbuff, u16_t len)
  352: {
002480 904DB4            MOV     DPTR,#pbuff
002483 EB                MOV     A,R3
002484 F0                MOVX    @DPTR,A
002485 A3                INC     DPTR
002486 EA                MOV     A,R2
002487 F0                MOVX    @DPTR,A
002488 A3                INC     DPTR
002489 E9                MOV     A,R1
00248A F0                MOVX    @DPTR,A
00248B A3                INC     DPTR
00248C EC                MOV     A,R4
00248D F0                MOVX    @DPTR,A
00248E A3                INC     DPTR
00248F ED                MOV     A,R5
002490 F0                MOVX    @DPTR,A
  353: 	int i;
  354: 	u8_t *twptr = (u8_t *)ESWAP(REG_UART_TX_PTR_W);
002491 90805E            MOV     DPTR,#0805EH
002494 A3                INC     DPTR
002495 E0                MOVX    A,@DPTR
002496 FC                MOV     R4,A
002497 90805E            MOV     DPTR,#0805EH
00249A E0                MOVX    A,@DPTR
00249B FF                MOV     R7,A
00249C EC                MOV     A,R4
00249D FE                MOV     R6,A
00249E EF                MOV     A,R7
00249F AA06              MOV     R2,AR6
0024A1 F9                MOV     R1,A
0024A2 904DBB            MOV     DPTR,#twptr
0024A5 E4                CLR     A
0024A6 F0                MOVX    @DPTR,A
0024A7 A3                INC     DPTR
0024A8 EA                MOV     A,R2
0024A9 F0                MOVX    @DPTR,A
0024AA A3                INC     DPTR
0024AB E9                MOV     A,R1
0024AC F0                MOVX    @DPTR,A
  355: 
  356: 	for(i=0;i<len;i++)
0024AD E4                CLR     A
0024AE 904DB9            MOV     DPTR,#i
0024B1 F0                MOVX    @DPTR,A
0024B2 A3                INC     DPTR
0024B3 F0                MOVX    @DPTR,A
0024B4         ?C0002?YC_PERIPHERAL:
0024B4 904DB7            MOV     DPTR,#len
0024B7 E0                MOVX    A,@DPTR
0024B8 FE                MOV     R6,A
0024B9 A3                INC     DPTR
0024BA E0                MOVX    A,@DPTR
0024BB FF                MOV     R7,A
0024BC C3                CLR     C
0024BD 904DBA            MOV     DPTR,#i+01H
0024C0 E0                MOVX    A,@DPTR
0024C1 9F                SUBB    A,R7
0024C2 904DB9            MOV     DPTR,#i
0024C5 E0                MOVX    A,@DPTR
0024C6 9E                SUBB    A,R6
0024C7 4002              JC      $ + 4H
0024C9 A160              AJMP    ?C0003?YC_PERIPHERAL
  357: 	{
  358: 		xmemcpy(twptr++, pbuff++, 1);
0024CB 904DBB            MOV     DPTR,#twptr
0024CE E0                MOVX    A,@DPTR
0024CF A3                INC     DPTR
0024D0 E4                CLR     A
0024D1 75F001            MOV     B,#01H
0024D4 1201C8            LCALL   ?C?ILDIX
0024D7 FE                MOV     R6,A
0024D8 AFF0              MOV     R7,B
0024DA 904DB4            MOV     DPTR,#pbuff
0024DD E0                MOVX    A,@DPTR
0024DE FB                MOV     R3,A
0024DF A3                INC     DPTR
0024E0 E4                CLR     A
0024E1 75F001            MOV     B,#01H
0024E4 1201C8            LCALL   ?C?ILDIX
0024E7 A9F0              MOV     R1,B
0024E9 FA                MOV     R2,A
0024EA 751C01            MOV     ?_xmemcpy?BYTE+05H,#01H
0024ED 121FAC            LCALL   _xmemcpy
  359: 
  360: 		if(((short)twptr-1)==ESWAP(REG_UART_TX_ADDR_E))	//twptr reach the end of buffer
0024F0 90805C            MOV     DPTR,#0805CH
0024F3 A3                INC     DPTR
0024F4 E0                MOVX    A,@DPTR
0024F5 FC                MOV     R4,A
0024F6 90805C            MOV     DPTR,#0805CH
0024F9 E0                MOVX    A,@DPTR
0024FA FF                MOV     R7,A
0024FB EC                MOV     A,R4
0024FC FE                MOV     R6,A
0024FD EF                MOV     A,R7
0024FE 904DBB            MOV     DPTR,#twptr
002501 E0                MOVX    A,@DPTR
002502 A3                INC     DPTR
002503 E0                MOVX    A,@DPTR
002504 FA                MOV     R2,A
002505 A3                INC     DPTR
002506 E0                MOVX    A,@DPTR
002507 24FF              ADD     A,#0FFH
002509 FD                MOV     R5,A
00250A EA                MOV     A,R2
00250B 34FF              ADDC    A,#0FFH
00250D FC                MOV     R4,A
00250E EF                MOV     A,R7
00250F 6D                XRL     A,R5
002510 7002              JNZ     ?C0022?YC_PERIPHERAL
002512 EE                MOV     A,R6
002513 6C                XRL     A,R4
002514         ?C0022?YC_PERIPHERAL:
002514 703A              JNZ     ?C0004?YC_PERIPHERAL
  361: 		{
  362: 			REG_UART_TX_PTR_W = REG_UART_TX_ADDR_E;
002516 90805C            MOV     DPTR,#0805CH
002519 E0                MOVX    A,@DPTR
00251A FF                MOV     R7,A
00251B A3                INC     DPTR
00251C E0                MOVX    A,@DPTR
00251D A3                INC     DPTR
00251E CF                XCH     A,R7
00251F F0                MOVX    @DPTR,A
002520 A3                INC     DPTR
002521 EF                MOV     A,R7
002522 F0                MOVX    @DPTR,A
002523         ?C0006?YC_PERIPHERAL:
  363: 			while(ESWAP(REG_UART_TX_ITEMS));
002523 90810E            MOV     DPTR,#0810EH
002526 A3                INC     DPTR
002527 E0                MOVX    A,@DPTR
002528 FC                MOV     R4,A
002529 90810E            MOV     DPTR,#0810EH
00252C E0                MOVX    A,@DPTR
00252D FF                MOV     R7,A
00252E EC                MOV     A,R4
00252F FE                MOV     R6,A
002530 EF                MOV     A,R7
002531 4E                ORL     A,R6
002532 70EF              JNZ     ?C0006?YC_PERIPHERAL
002534         ?C0007?YC_PERIPHERAL:
  364: 			
  365: 			twptr = (u8_t *)ESWAP(REG_UART_TX_ADDR_S);	//reset twptr
002534 90805A            MOV     DPTR,#0805AH
002537 A3                INC     DPTR
002538 E0                MOVX    A,@DPTR
002539 FC                MOV     R4,A
00253A 90805A            MOV     DPTR,#0805AH
00253D E0                MOVX    A,@DPTR
00253E FF                MOV     R7,A
00253F EC                MOV     A,R4
002540 FE                MOV     R6,A
002541 EF                MOV     A,R7
002542 AA06              MOV     R2,AR6
002544 F9                MOV     R1,A
002545 904DBB            MOV     DPTR,#twptr
002548 E4                CLR     A
002549 F0                MOVX    @DPTR,A
00254A A3                INC     DPTR
00254B EA                MOV     A,R2
00254C F0                MOVX    @DPTR,A
00254D A3                INC     DPTR
00254E E9                MOV     A,R1
00254F F0                MOVX    @DPTR,A
  366: 		}	
  367: 	}	
002550         ?C0004?YC_PERIPHERAL:
002550 904DBA            MOV     DPTR,#i+01H
002553 E0                MOVX    A,@DPTR
002554 04                INC     A
002555 F0                MOVX    @DPTR,A
002556 7006              JNZ     ?C0023?YC_PERIPHERAL
002558 904DB9            MOV     DPTR,#i
00255B E0                MOVX    A,@DPTR
00255C 04                INC     A
00255D F0                MOVX    @DPTR,A
00255E         ?C0023?YC_PERIPHERAL:
00255E 81B4              AJMP    ?C0002?YC_PERIPHERAL
002560         ?C0003?YC_PERIPHERAL:
  368: 
  369: 	REG_UART_TX_PTR_W = ESWAP((short)twptr);
002560 904DBB            MOV     DPTR,#twptr
002563 E0                MOVX    A,@DPTR
002564 A3                INC     DPTR
002565 E0                MOVX    A,@DPTR
002566 FA                MOV     R2,A
002567 A3                INC     DPTR
002568 E0                MOVX    A,@DPTR
002569 AC02              MOV     R4,AR2
00256B FD                MOV     R5,A
00256C EC                MOV     A,R4
00256D FF                MOV     R7,A
00256E 33                RLC     A
00256F 95E0              SUBB    A,ACC
002571 AB07              MOV     R3,AR7
002573 ED                MOV     A,R5
002574 FF                MOV     R7,A
002575 EB                MOV     A,R3
002576 90805E            MOV     DPTR,#0805EH
002579 CF                XCH     A,R7
00257A F0                MOVX    @DPTR,A
00257B A3                INC     DPTR
00257C EF                MOV     A,R7
00257D F0                MOVX    @DPTR,A
  370: 	//YC_UARTWaitSendData();
  371: }
00257E 22                RET     
----- FUNCTION _YC_UARTSendData (END) -------


----- FUNCTION SPIFlashReadSR (BEGIN) -----
 FILE: 'spiflash.c'
   21: u8_t SPIFlashReadSR(void)
   22: {
   23: 	u8_t status;
   24: 	status = 0xff;
00257F 904E6C            MOV     DPTR,#status
002582 74FF              MOV     A,#0FFH
002584 F0                MOVX    @DPTR,A
   25: 	REG_SPID_RXLEN = ESWAP(1);
002585 90808E            MOV     DPTR,#0808EH
002588 7401              MOV     A,#01H
00258A F0                MOVX    @DPTR,A
00258B A3                INC     DPTR
00258C E4                CLR     A
00258D F0                MOVX    @DPTR,A
   26: 	REG_SPID_TXLEN = ESWAP(1);
00258E 908088            MOV     DPTR,#08088H
002591 04                INC     A
002592 F0                MOVX    @DPTR,A
002593 A3                INC     DPTR
002594 E4                CLR     A
002595 F0                MOVX    @DPTR,A
   27: 	*SF_TX_BUF = SF_READ_STATUS_REG;
002596 9001BC            MOV     DPTR,#01BCH
002599 7405              MOV     A,#05H
00259B F0                MOVX    @DPTR,A
   28: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
00259C 90808A            MOV     DPTR,#0808AH
00259F 74BC              MOV     A,#0BCH
0025A1 F0                MOVX    @DPTR,A
0025A2 A3                INC     DPTR
0025A3 7401              MOV     A,#01H
0025A5 F0                MOVX    @DPTR,A
   29: 	REG_SPID_RXADDR = ESWAP((u16_t)(&status));
0025A6 7D6C              MOV     R5,#LOW status
0025A8 ED                MOV     A,R5
0025A9 FA                MOV     R2,A
0025AA 744E              MOV     A,#HIGH status
0025AC FF                MOV     R7,A
0025AD EA                MOV     A,R2
0025AE FE                MOV     R6,A
0025AF EF                MOV     A,R7
0025B0 A3                INC     DPTR
0025B1 EE                MOV     A,R6
0025B2 F0                MOVX    @DPTR,A
0025B3 A3                INC     DPTR
0025B4 EF                MOV     A,R7
0025B5 F0                MOVX    @DPTR,A
   30: 	REG_MISC_CTRL = SPID_START;
0025B6 908006            MOV     DPTR,#08006H
0025B9 7402              MOV     A,#02H
0025BB F0                MOVX    @DPTR,A
0025BC         ?C0001?SPIFLASH:
   31: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
0025BC 90812C            MOV     DPTR,#0812CH
0025BF E0                MOVX    A,@DPTR
0025C0 30E3F9            JNB     ACC.3,?C0001?SPIFLASH
0025C3         ?C0002?SPIFLASH:
   32: 	//YC_UARTSendData(&status, 1);
   33: 	return status;
0025C3 904E6C            MOV     DPTR,#status
0025C6 E0                MOVX    A,@DPTR
0025C7 FF                MOV     R7,A
   34: }
0025C8 22                RET     
----- FUNCTION SPIFlashReadSR (END) -------


----- FUNCTION ?L?COM0001 (BEGIN) -----
0025C9 120332            LCALL   ?C?LSTXDATA
0025CC F112              ACALL   SPIFlashWriteEnable
----- FUNCTION SPIFlashWaitBusy (BEGIN) -----
 FILE: 'spiflash.c'
   44: void SPIFlashWaitBusy(void)
   45: {
   46: 	while((SPIFlashReadSR()&0x01) == 0x01) {	//wait for BUSY
0025CE         ?C0007?SPIFLASH:
   47: 		YC_Delay1ms(1);
0025CE B17F              ACALL   SPIFlashReadSR
0025D0 EF                MOV     A,R7
0025D1 30E006            JNB     ACC.0,?C0009?SPIFLASH
   48: 	}
0025D4 7F01              MOV     R7,#01H
0025D6 F13E              ACALL   _YC_Delay1ms
   49: }
0025D8 80F4              SJMP    ?C0007?SPIFLASH
   50: void SPIFlashEraseSector(u32_t addr)
0025DA         ?C0009?SPIFLASH:
0025DA 22                RET     
----- FUNCTION SPIFlashWaitBusy (END) -------


----- FUNCTION _SPIFlashEraseSector (BEGIN) -----
 FILE: 'spiflash.c'
   50: void SPIFlashEraseSector(u32_t addr)
   51: {
0025DB 904E44            MOV     DPTR,#addr
0025DE B1C9              ACALL   ?L?COM0001
   52: 	SPIFlashWriteEnable();
   53: 	SPIFlashWaitBusy();
   54: 	*(SF_TX_BUF) = SF_SECTOR_ERASE;
0025E0 9001BC            MOV     DPTR,#01BCH
0025E3 7420              MOV     A,#020H
0025E5 F0                MOVX    @DPTR,A
   55: 	*(SF_TX_BUF+1) = (addr>>16);
0025E6 904E44            MOV     DPTR,#addr
0025E9 E0                MOVX    A,@DPTR
0025EA FC                MOV     R4,A
0025EB A3                INC     DPTR
0025EC E0                MOVX    A,@DPTR
0025ED FD                MOV     R5,A
0025EE A3                INC     DPTR
0025EF E0                MOVX    A,@DPTR
0025F0 FE                MOV     R6,A
0025F1 A3                INC     DPTR
0025F2 E0                MOVX    A,@DPTR
0025F3 FF                MOV     R7,A
0025F4 7810              MOV     R0,#010H
0025F6 12030C            LCALL   ?C?ULSHR
0025F9 9001BD            MOV     DPTR,#01BDH
0025FC EF                MOV     A,R7
0025FD F0                MOVX    @DPTR,A
   56: 	*(SF_TX_BUF+2) = (addr>>8);
0025FE 904E44            MOV     DPTR,#addr
002601 E0                MOVX    A,@DPTR
002602 FC                MOV     R4,A
002603 A3                INC     DPTR
002604 E0                MOVX    A,@DPTR
002605 FD                MOV     R5,A
002606 A3                INC     DPTR
002607 E0                MOVX    A,@DPTR
002608 FE                MOV     R6,A
002609 A3                INC     DPTR
00260A E0                MOVX    A,@DPTR
00260B FF                MOV     R7,A
00260C 7808              MOV     R0,#08H
00260E 12030C            LCALL   ?C?ULSHR
002611 9001BE            MOV     DPTR,#01BEH
002614 EF                MOV     A,R7
002615 F0                MOVX    @DPTR,A
   57: 	*(SF_TX_BUF+3) = (addr&0xff);
002616 904E44            MOV     DPTR,#addr
002619 E0                MOVX    A,@DPTR
00261A FC                MOV     R4,A
00261B A3                INC     DPTR
00261C E0                MOVX    A,@DPTR
00261D FD                MOV     R5,A
00261E A3                INC     DPTR
00261F E0                MOVX    A,@DPTR
002620 FE                MOV     R6,A
002621 A3                INC     DPTR
002622 E0                MOVX    A,@DPTR
002623 FF                MOV     R7,A
002624 E4                CLR     A
002625 9001BF            MOV     DPTR,#01BFH
002628 EF                MOV     A,R7
002629 F0                MOVX    @DPTR,A
   58: 	REG_SPID_TXLEN = ESWAP(4);
00262A 908088            MOV     DPTR,#08088H
00262D 7404              MOV     A,#04H
00262F F0                MOVX    @DPTR,A
002630 A3                INC     DPTR
002631 E4                CLR     A
002632 F0                MOVX    @DPTR,A
   59: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
002633 A3                INC     DPTR
002634 74BC              MOV     A,#0BCH
002636 F0                MOVX    @DPTR,A
002637 A3                INC     DPTR
002638 7401              MOV     A,#01H
00263A F0                MOVX    @DPTR,A
   60: 	REG_SPID_RXLEN = ESWAP(0);
00263B 90808E            MOV     DPTR,#0808EH
00263E E4                CLR     A
00263F F0                MOVX    @DPTR,A
002640 A3                INC     DPTR
002641 F0                MOVX    @DPTR,A
   61: 	REG_MISC_CTRL = SPID_START;
002642 908006            MOV     DPTR,#08006H
002645 7402              MOV     A,#02H
002647 F0                MOVX    @DPTR,A
002648         ?C0010?SPIFLASH:
   62: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
002648 90812C            MOV     DPTR,#0812CH
00264B E0                MOVX    A,@DPTR
00264C 30E3F9            JNB     ACC.3,?C0010?SPIFLASH
00264F         ?C0011?SPIFLASH:
   63: 	SPIFlashWaitBusy();
00264F A1CE              AJMP    SPIFlashWaitBusy
   64: }
----- FUNCTION _SPIFlashEraseSector (END) -------


----- FUNCTION _SPIFlashWrite (BEGIN) -----
 FILE: 'spiflash.c'
   65: void SPIFlashWrite(u8_t *buf, u32_t addr, u8_t len)
   66: {
002651 904DEB            MOV     DPTR,#buf
002654 EB                MOV     A,R3
002655 F0                MOVX    @DPTR,A
002656 A3                INC     DPTR
002657 EA                MOV     A,R2
002658 F0                MOVX    @DPTR,A
002659 A3                INC     DPTR
00265A E9                MOV     A,R1
00265B F0                MOVX    @DPTR,A
00265C A3                INC     DPTR
00265D B1C9              ACALL   ?L?COM0001
   67: 	u8_t i;
   68: 	SPIFlashWriteEnable();
   69: 	SPIFlashWaitBusy();
   70: 	for(i=0;i<len;i++) {
;---- Variable 'i' assigned to Register 'R7' ----
00265F E4                CLR     A
002660 FF                MOV     R7,A
002661         ?C0013?SPIFLASH:
002661 904DF2            MOV     DPTR,#len
002664 E0                MOVX    A,@DPTR
002665 FE                MOV     R6,A
002666 EF                MOV     A,R7
002667 C3                CLR     C
002668 9E                SUBB    A,R6
002669 5023              JNC     ?C0014?SPIFLASH
   71: 		*(SF_TX_BUF+4+i) = buf[i];
00266B 904DEB            MOV     DPTR,#buf
00266E E0                MOVX    A,@DPTR
00266F FB                MOV     R3,A
002670 A3                INC     DPTR
002671 E0                MOVX    A,@DPTR
002672 FA                MOV     R2,A
002673 A3                INC     DPTR
002674 E0                MOVX    A,@DPTR
002675 F9                MOV     R1,A
002676 8F82              MOV     DPL,R7
002678 758300            MOV     DPH,#00H
00267B 120112            LCALL   ?C?CLDOPTR
00267E FE                MOV     R6,A
00267F 74C0              MOV     A,#0C0H
002681 2F                ADD     A,R7
002682 F582              MOV     DPL,A
002684 E4                CLR     A
002685 3401              ADDC    A,#01H
002687 F583              MOV     DPH,A
002689 EE                MOV     A,R6
00268A F0                MOVX    @DPTR,A
   72: 	}
00268B 0F                INC     R7
00268C 80D3              SJMP    ?C0013?SPIFLASH
00268E         ?C0014?SPIFLASH:
   73: 	*(SF_TX_BUF) = SF_PAGE_PROGRAM;
00268E 9001BC            MOV     DPTR,#01BCH
002691 7402              MOV     A,#02H
002693 F0                MOVX    @DPTR,A
   74: 	*(SF_TX_BUF+1) = (addr>>16);
002694 904DEE            MOV     DPTR,#addr
002697 E0                MOVX    A,@DPTR
002698 FC                MOV     R4,A
002699 A3                INC     DPTR
00269A E0                MOVX    A,@DPTR
00269B FD                MOV     R5,A
00269C A3                INC     DPTR
00269D E0                MOVX    A,@DPTR
00269E FE                MOV     R6,A
00269F A3                INC     DPTR
0026A0 E0                MOVX    A,@DPTR
0026A1 FF                MOV     R7,A
0026A2 7810              MOV     R0,#010H
0026A4 12030C            LCALL   ?C?ULSHR
0026A7 9001BD            MOV     DPTR,#01BDH
0026AA EF                MOV     A,R7
0026AB F0                MOVX    @DPTR,A
   75: 	*(SF_TX_BUF+2) = (addr>>8);
0026AC 904DEE            MOV     DPTR,#addr
0026AF E0                MOVX    A,@DPTR
0026B0 FC                MOV     R4,A
0026B1 A3                INC     DPTR
0026B2 E0                MOVX    A,@DPTR
0026B3 FD                MOV     R5,A
0026B4 A3                INC     DPTR
0026B5 E0                MOVX    A,@DPTR
0026B6 FE                MOV     R6,A
0026B7 A3                INC     DPTR
0026B8 E0                MOVX    A,@DPTR
0026B9 FF                MOV     R7,A
0026BA 7808              MOV     R0,#08H
0026BC 12030C            LCALL   ?C?ULSHR
0026BF 9001BE            MOV     DPTR,#01BEH
0026C2 EF                MOV     A,R7
0026C3 F0                MOVX    @DPTR,A
   76: 	*(SF_TX_BUF+3) = (addr&0xff);
0026C4 904DEE            MOV     DPTR,#addr
0026C7 E0                MOVX    A,@DPTR
0026C8 FC                MOV     R4,A
0026C9 A3                INC     DPTR
0026CA E0                MOVX    A,@DPTR
0026CB FD                MOV     R5,A
0026CC A3                INC     DPTR
0026CD E0                MOVX    A,@DPTR
0026CE FE                MOV     R6,A
0026CF A3                INC     DPTR
0026D0 E0                MOVX    A,@DPTR
0026D1 FF                MOV     R7,A
0026D2 E4                CLR     A
0026D3 9001BF            MOV     DPTR,#01BFH
0026D6 EF                MOV     A,R7
0026D7 F0                MOVX    @DPTR,A
   77: 	REG_SPID_TXLEN = ESWAP(len+4);
0026D8 904DF2            MOV     DPTR,#len
0026DB E0                MOVX    A,@DPTR
0026DC 2404              ADD     A,#04H
0026DE FD                MOV     R5,A
0026DF E4                CLR     A
0026E0 33                RLC     A
0026E1 FC                MOV     R4,A
0026E2 ED                MOV     A,R5
0026E3 FA                MOV     R2,A
0026E4 EC                MOV     A,R4
0026E5 FF                MOV     R7,A
0026E6 33                RLC     A
0026E7 95E0              SUBB    A,ACC
0026E9 EA                MOV     A,R2
0026EA FE                MOV     R6,A
0026EB EF                MOV     A,R7
0026EC 908088            MOV     DPTR,#08088H
0026EF EE                MOV     A,R6
0026F0 F0                MOVX    @DPTR,A
0026F1 A3                INC     DPTR
0026F2 EF                MOV     A,R7
0026F3 F0                MOVX    @DPTR,A
   78: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
0026F4 A3                INC     DPTR
0026F5 74BC              MOV     A,#0BCH
0026F7 F0                MOVX    @DPTR,A
0026F8 A3                INC     DPTR
0026F9 7401              MOV     A,#01H
0026FB F0                MOVX    @DPTR,A
   79: 	REG_SPID_RXLEN = ESWAP(0);
0026FC 90808E            MOV     DPTR,#0808EH
0026FF E4                CLR     A
002700 F0                MOVX    @DPTR,A
002701 A3                INC     DPTR
002702 F0                MOVX    @DPTR,A
   80: 	REG_MISC_CTRL = SPID_START;
002703 908006            MOV     DPTR,#08006H
002706 7402              MOV     A,#02H
002708 F0                MOVX    @DPTR,A
002709         ?C0016?SPIFLASH:
   81: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
002709 90812C            MOV     DPTR,#0812CH
00270C E0                MOVX    A,@DPTR
00270D 30E3F9            JNB     ACC.3,?C0016?SPIFLASH
002710         ?C0017?SPIFLASH:
   82: 	SPIFlashWaitBusy();
002710 A1CE              AJMP    SPIFlashWaitBusy
   83: }
----- FUNCTION _SPIFlashWrite (END) -------


----- FUNCTION SPIFlashWriteEnable (BEGIN) -----
 FILE: 'spiflash.c'
   35: void SPIFlashWriteEnable(void)
   36: {
   37: 	REG_SPID_RXLEN = ESWAP(0);
   38: 	REG_SPID_TXLEN = ESWAP(1);
002712 90808E            MOV     DPTR,#0808EH
002715 E4                CLR     A
002716 F0                MOVX    @DPTR,A
002717 A3                INC     DPTR
002718 F0                MOVX    @DPTR,A
   39: 	*SF_TX_BUF = SF_WRITE_ENABLE;
002719 908088            MOV     DPTR,#08088H
00271C 04                INC     A
00271D F0                MOVX    @DPTR,A
00271E A3                INC     DPTR
00271F E4                CLR     A
002720 F0                MOVX    @DPTR,A
   40: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
002721 9001BC            MOV     DPTR,#01BCH
002724 7406              MOV     A,#06H
002726 F0                MOVX    @DPTR,A
   41: 	REG_MISC_CTRL = SPID_START;
002727 90808A            MOV     DPTR,#0808AH
00272A 74BC              MOV     A,#0BCH
00272C F0                MOVX    @DPTR,A
00272D A3                INC     DPTR
00272E 7401              MOV     A,#01H
002730 F0                MOVX    @DPTR,A
   42: 	while((REG_DMA_STATUS&(1<<3)) == 0);
002731 908006            MOV     DPTR,#08006H
002734 04                INC     A
002735 F0                MOVX    @DPTR,A
002736         ?C0004?SPIFLASH:
   43: }
002736 90812C            MOV     DPTR,#0812CH
002739 E0                MOVX    A,@DPTR
00273A 30E3F9            JNB     ACC.3,?C0004?SPIFLASH
   44: void SPIFlashWaitBusy(void)
00273D 22                RET     
----- FUNCTION SPIFlashWriteEnable (END) -------


----- FUNCTION _YC_Delay1ms (BEGIN) -----
 FILE: 'YC_Utilities.c'
   51: void YC_Delay1ms(u8_t Time)
   52: {
;---- Variable 'Time' assigned to Register 'R7' ----
   53: 	u16_t j; 
   54: 	for(;Time>0;Time--)
00273E         ?C0020?YC_UTILITIES:
00273E EF                MOV     A,R7
00273F D3                SETB    C
002740 9400              SUBB    A,#00H
002742 4011              JC      ?C0026?YC_UTILITIES
   55: 	{
   56: 		for(j=0;j<1160;j++);
;---- Variable 'j' assigned to Register 'R4/R5' ----
002744 E4                CLR     A
002745 FD                MOV     R5,A
002746 FC                MOV     R4,A
002747         ?C0023?YC_UTILITIES:
002747 0D                INC     R5
002748 BD0001            CJNE    R5,#00H,?C0053?YC_UTILITIES
00274B 0C                INC     R4
00274C         ?C0053?YC_UTILITIES:
00274C BC04F8            CJNE    R4,#04H,?C0023?YC_UTILITIES
00274F BD88F5            CJNE    R5,#088H,?C0023?YC_UTILITIES
   57: 	}
002752         ?C0022?YC_UTILITIES:
002752 1F                DEC     R7
002753 80E9              SJMP    ?C0020?YC_UTILITIES
   58: }
002755         ?C0026?YC_UTILITIES:
002755 22                RET     
----- FUNCTION _YC_Delay1ms (END) -------


----- FUNCTION _SPIFlashRead (BEGIN) -----
 FILE: 'spiflash.c'
   84: void SPIFlashRead(u8_t *buf, u32_t addr, u8_t len)
   85: {
002756 904DF6            MOV     DPTR,#addr
002759 120332            LCALL   ?C?LSTXDATA
;---- Variable 'buf' assigned to Register 'R1/R2/R3' ----
   86: 	REG_SPID_RXLEN = ESWAP(len);
   87: 	REG_SPID_TXLEN = ESWAP(4);
00275C 904DFA            MOV     DPTR,#len
00275F E0                MOVX    A,@DPTR
002760 FD                MOV     R5,A
002761 FE                MOV     R6,A
002762 E4                CLR     A
002763 90808E            MOV     DPTR,#0808EH
002766 EE                MOV     A,R6
002767 F0                MOVX    @DPTR,A
002768 A3                INC     DPTR
002769 E4                CLR     A
00276A F0                MOVX    @DPTR,A
   88: 	*SF_TX_BUF = SF_READ_DATA;
00276B 908088            MOV     DPTR,#08088H
00276E 7404              MOV     A,#04H
002770 F0                MOVX    @DPTR,A
002771 A3                INC     DPTR
002772 E4                CLR     A
002773 F0                MOVX    @DPTR,A
   89: 	*(SF_TX_BUF+1) = (addr>>16);
002774 9001BC            MOV     DPTR,#01BCH
002777 7403              MOV     A,#03H
002779 F0                MOVX    @DPTR,A
   90: 	*(SF_TX_BUF+2) = (addr>>8);
00277A 904DF6            MOV     DPTR,#addr
00277D E0                MOVX    A,@DPTR
00277E FC                MOV     R4,A
00277F A3                INC     DPTR
002780 E0                MOVX    A,@DPTR
002781 FD                MOV     R5,A
002782 A3                INC     DPTR
002783 E0                MOVX    A,@DPTR
002784 FE                MOV     R6,A
002785 A3                INC     DPTR
002786 E0                MOVX    A,@DPTR
002787 FF                MOV     R7,A
002788 7810              MOV     R0,#010H
00278A 12030C            LCALL   ?C?ULSHR
00278D 9001BD            MOV     DPTR,#01BDH
002790 EF                MOV     A,R7
002791 F0                MOVX    @DPTR,A
   91: 	*(SF_TX_BUF+3) = (addr&0xff);
002792 904DF6            MOV     DPTR,#addr
002795 E0                MOVX    A,@DPTR
002796 FC                MOV     R4,A
002797 A3                INC     DPTR
002798 E0                MOVX    A,@DPTR
002799 FD                MOV     R5,A
00279A A3                INC     DPTR
00279B E0                MOVX    A,@DPTR
00279C FE                MOV     R6,A
00279D A3                INC     DPTR
00279E E0                MOVX    A,@DPTR
00279F FF                MOV     R7,A
0027A0 7808              MOV     R0,#08H
0027A2 12030C            LCALL   ?C?ULSHR
0027A5 9001BE            MOV     DPTR,#01BEH
0027A8 EF                MOV     A,R7
0027A9 F0                MOVX    @DPTR,A
   92: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
0027AA 904DF6            MOV     DPTR,#addr
0027AD E0                MOVX    A,@DPTR
0027AE FC                MOV     R4,A
0027AF A3                INC     DPTR
0027B0 E0                MOVX    A,@DPTR
0027B1 FD                MOV     R5,A
0027B2 A3                INC     DPTR
0027B3 E0                MOVX    A,@DPTR
0027B4 FE                MOV     R6,A
0027B5 A3                INC     DPTR
0027B6 E0                MOVX    A,@DPTR
0027B7 FF                MOV     R7,A
0027B8 E4                CLR     A
0027B9 9001BF            MOV     DPTR,#01BFH
0027BC EF                MOV     A,R7
0027BD F0                MOVX    @DPTR,A
   93: 	REG_SPID_RXADDR = ESWAP((u16_t)buf);
0027BE 90808A            MOV     DPTR,#0808AH
0027C1 74BC              MOV     A,#0BCH
0027C3 F0                MOVX    @DPTR,A
0027C4 A3                INC     DPTR
0027C5 7401              MOV     A,#01H
0027C7 F0                MOVX    @DPTR,A
   94: 	REG_SPID_CTRL  |=  (1<<6);
0027C8 E9                MOV     A,R1
0027C9 FC                MOV     R4,A
0027CA EA                MOV     A,R2
0027CB FF                MOV     R7,A
0027CC EC                MOV     A,R4
0027CD FE                MOV     R6,A
0027CE EF                MOV     A,R7
0027CF A3                INC     DPTR
0027D0 EE                MOV     A,R6
0027D1 F0                MOVX    @DPTR,A
0027D2 A3                INC     DPTR
0027D3 EF                MOV     A,R7
0027D4 F0                MOVX    @DPTR,A
   95: 	REG_MISC_CTRL = SPID_START;
0027D5 908086            MOV     DPTR,#08086H
0027D8 E0                MOVX    A,@DPTR
0027D9 4440              ORL     A,#040H
0027DB F0                MOVX    @DPTR,A
   96: 	//spi_read_flash_wait
0027DC 908006            MOV     DPTR,#08006H
0027DF 7402              MOV     A,#02H
0027E1 F0                MOVX    @DPTR,A
0027E2         ?C0019?SPIFLASH:
   97: 	while(REG_DMA_STATUS&(1<<7));	//waiting for spid write
0027E2 90812C            MOV     DPTR,#0812CH
0027E5 E0                MOVX    A,@DPTR
0027E6 20E7F9            JB      ACC.7,?C0019?SPIFLASH
0027E9         ?C0020?SPIFLASH:
0027E9         ?C0021?SPIFLASH:
   98: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
0027E9 90812C            MOV     DPTR,#0812CH
0027EC E0                MOVX    A,@DPTR
0027ED 30E3F9            JNB     ACC.3,?C0021?SPIFLASH
   99: 	return;
  100: }
0027F0 22                RET     
----- FUNCTION _SPIFlashRead (END) -------


----- FUNCTION _BT_CmdFifoIn (BEGIN) -----
 FILE: 'BT_IPC.c'
    7: bool BT_CmdFifoIn(BT_CMDFIFO_t *pFIFO)
    8: {
0027F1 904E13            MOV     DPTR,#pFIFO
0027F4 EB                MOV     A,R3
0027F5 F0                MOVX    @DPTR,A
0027F6 A3                INC     DPTR
0027F7 EA                MOV     A,R2
0027F8 F0                MOVX    @DPTR,A
0027F9 A3                INC     DPTR
0027FA E9                MOV     A,R1
0027FB F0                MOVX    @DPTR,A
    9: 	u16_t new_wprt,new_cmd_len,i;
   10: 	if( pFIFO->len ==0 )
0027FC 1200F9            LCALL   ?C?CLDPTR
0027FF 7002              JNZ     ?C0001?BT_IPC
   11: 		return false;
002801 C3                CLR     C
002802 22                RET     
002803         ?C0001?BT_IPC:
   12: 	new_cmd_len = BT_GetCmdFifoDepth()+pFIFO->len+2;
002803 3111              ACALL   BT_GetCmdFifoDepth
002805 904E13            MOV     DPTR,#pFIFO
002808 E0                MOVX    A,@DPTR
002809 FB                MOV     R3,A
00280A A3                INC     DPTR
00280B E0                MOVX    A,@DPTR
00280C FA                MOV     R2,A
00280D A3                INC     DPTR
00280E E0                MOVX    A,@DPTR
00280F F9                MOV     R1,A
002810 1200F9            LCALL   ?C?CLDPTR
002813 FD                MOV     R5,A
002814 2F                ADD     A,R7
002815 FF                MOV     R7,A
002816 E4                CLR     A
002817 33                RLC     A
002818 CF                XCH     A,R7
002819 2402              ADD     A,#02H
00281B CF                XCH     A,R7
00281C 3400              ADDC    A,#00H
00281E FE                MOV     R6,A
;---- Variable 'new_cmd_len' assigned to Register 'R6/R7' ----
   13: 	if(new_cmd_len<=BT_CMD_BUF_LEN)
00281F D3                SETB    C
002820 EF                MOV     A,R7
002821 9480              SUBB    A,#080H
002823 EE                MOV     A,R6
002824 9400              SUBB    A,#00H
002826 4002              JC      $ + 4H
002828 210F              AJMP    ?C0003?BT_IPC
   14: 	{
   15: 		new_wprt = ESWAP(BT_CmdWptr);
00282A 904A03            MOV     DPTR,#BT_CmdWptr+01H
00282D E0                MOVX    A,@DPTR
00282E FA                MOV     R2,A
00282F 904A02            MOV     DPTR,#BT_CmdWptr
002832 E0                MOVX    A,@DPTR
002833 FF                MOV     R7,A
002834 EA                MOV     A,R2
002835 FE                MOV     R6,A
002836 EF                MOV     A,R7
002837 904E16            MOV     DPTR,#new_wprt
00283A EE                MOV     A,R6
00283B F0                MOVX    @DPTR,A
00283C A3                INC     DPTR
00283D EF                MOV     A,R7
00283E F0                MOVX    @DPTR,A
   16: 		HWRITE(new_wprt++,CS_PREFIX_CMD);
00283F 904E16            MOV     DPTR,#new_wprt
002842 E4                CLR     A
002843 75F001            MOV     B,#01H
002846 1201C8            LCALL   ?C?ILDIX
002849 85F082            MOV     DPL,B
00284C F583              MOV     DPH,A
00284E 74C5              MOV     A,#0C5H
002850 F0                MOVX    @DPTR,A
   17: 		if(new_wprt == (mem_cmd_buf_end + 1))
002851 904E16            MOV     DPTR,#new_wprt
002854 E0                MOVX    A,@DPTR
002855 B44F0E            CJNE    A,#04FH,?C0004?BT_IPC
002858 A3                INC     DPTR
002859 E0                MOVX    A,@DPTR
00285A B48009            CJNE    A,#080H,?C0004?BT_IPC
   18: 		{
   19: 			new_wprt = mem_cmd_buf;
00285D 904E16            MOV     DPTR,#new_wprt
002860 744F              MOV     A,#04FH
002862 F0                MOVX    @DPTR,A
002863 A3                INC     DPTR
002864 E4                CLR     A
002865 F0                MOVX    @DPTR,A
   20: 		}
002866         ?C0004?BT_IPC:
   21: 		HWRITE(new_wprt++,pFIFO->len);
002866 904E16            MOV     DPTR,#new_wprt
002869 E4                CLR     A
00286A 75F001            MOV     B,#01H
00286D 1201C8            LCALL   ?C?ILDIX
002870 85F082            MOV     DPL,B
002873 F583              MOV     DPH,A
002875 ED                MOV     A,R5
002876 F0                MOVX    @DPTR,A
   22: 		if(new_wprt == (mem_cmd_buf_end + 1))
002877 904E16            MOV     DPTR,#new_wprt
00287A E0                MOVX    A,@DPTR
00287B B44F0E            CJNE    A,#04FH,?C0005?BT_IPC
00287E A3                INC     DPTR
00287F E0                MOVX    A,@DPTR
002880 B48009            CJNE    A,#080H,?C0005?BT_IPC
   23: 		{
   24: 			new_wprt = mem_cmd_buf;
002883 904E16            MOV     DPTR,#new_wprt
002886 744F              MOV     A,#04FH
002888 F0                MOVX    @DPTR,A
002889 A3                INC     DPTR
00288A E4                CLR     A
00288B F0                MOVX    @DPTR,A
   25: 		}
00288C         ?C0005?BT_IPC:
   26: 		for(i=0;i<pFIFO->len;i++)
00288C E4                CLR     A
00288D 904E18            MOV     DPTR,#i
002890 F0                MOVX    @DPTR,A
002891 A3                INC     DPTR
002892 F0                MOVX    @DPTR,A
002893         ?C0006?BT_IPC:
002893 904E13            MOV     DPTR,#pFIFO
002896 E0                MOVX    A,@DPTR
002897 FB                MOV     R3,A
002898 A3                INC     DPTR
002899 E0                MOVX    A,@DPTR
00289A FA                MOV     R2,A
00289B A3                INC     DPTR
00289C E0                MOVX    A,@DPTR
00289D F9                MOV     R1,A
00289E 1200F9            LCALL   ?C?CLDPTR
0028A1 FF                MOV     R7,A
0028A2 904E18            MOV     DPTR,#i
0028A5 E0                MOVX    A,@DPTR
0028A6 FC                MOV     R4,A
0028A7 A3                INC     DPTR
0028A8 E0                MOVX    A,@DPTR
0028A9 FD                MOV     R5,A
0028AA C3                CLR     C
0028AB 9F                SUBB    A,R7
0028AC EC                MOV     A,R4
0028AD 9400              SUBB    A,#00H
0028AF 5047              JNC     ?C0007?BT_IPC
   27: 		{
   28: 			HWRITE(new_wprt++,pFIFO->DATA[i]);
0028B1 E9                MOV     A,R1
0028B2 2401              ADD     A,#01H
0028B4 F9                MOV     R1,A
0028B5 E4                CLR     A
0028B6 3A                ADDC    A,R2
0028B7 FA                MOV     R2,A
0028B8 E9                MOV     A,R1
0028B9 2D                ADD     A,R5
0028BA F9                MOV     R1,A
0028BB EA                MOV     A,R2
0028BC 3C                ADDC    A,R4
0028BD FA                MOV     R2,A
0028BE 1200F9            LCALL   ?C?CLDPTR
0028C1 FF                MOV     R7,A
0028C2 904E16            MOV     DPTR,#new_wprt
0028C5 E4                CLR     A
0028C6 75F001            MOV     B,#01H
0028C9 1201C8            LCALL   ?C?ILDIX
0028CC 85F082            MOV     DPL,B
0028CF F583              MOV     DPH,A
0028D1 EF                MOV     A,R7
0028D2 F0                MOVX    @DPTR,A
   29: 			if(new_wprt == (mem_cmd_buf_end + 1))
0028D3 904E16            MOV     DPTR,#new_wprt
0028D6 E0                MOVX    A,@DPTR
0028D7 B44F0E            CJNE    A,#04FH,?C0008?BT_IPC
0028DA A3                INC     DPTR
0028DB E0                MOVX    A,@DPTR
0028DC B48009            CJNE    A,#080H,?C0008?BT_IPC
   30: 			{
   31: 				new_wprt = mem_cmd_buf;
0028DF 904E16            MOV     DPTR,#new_wprt
0028E2 744F              MOV     A,#04FH
0028E4 F0                MOVX    @DPTR,A
0028E5 A3                INC     DPTR
0028E6 E4                CLR     A
0028E7 F0                MOVX    @DPTR,A
   32: 			}
   33: 		}
0028E8         ?C0008?BT_IPC:
0028E8 904E19            MOV     DPTR,#i+01H
0028EB E0                MOVX    A,@DPTR
0028EC 04                INC     A
0028ED F0                MOVX    @DPTR,A
0028EE 7006              JNZ     ?C0030?BT_IPC
0028F0 904E18            MOV     DPTR,#i
0028F3 E0                MOVX    A,@DPTR
0028F4 04                INC     A
0028F5 F0                MOVX    @DPTR,A
0028F6         ?C0030?BT_IPC:
0028F6 809B              SJMP    ?C0006?BT_IPC
0028F8         ?C0007?BT_IPC:
   34: 		BT_CmdWptr = ESWAP(new_wprt);
0028F8 904E16            MOV     DPTR,#new_wprt
0028FB E0                MOVX    A,@DPTR
0028FC FC                MOV     R4,A
0028FD A3                INC     DPTR
0028FE E0                MOVX    A,@DPTR
0028FF FA                MOV     R2,A
002900 EC                MOV     A,R4
002901 FF                MOV     R7,A
002902 EA                MOV     A,R2
002903 FE                MOV     R6,A
002904 EF                MOV     A,R7
002905 904A02            MOV     DPTR,#BT_CmdWptr
002908 EE                MOV     A,R6
002909 F0                MOVX    @DPTR,A
00290A A3                INC     DPTR
00290B EF                MOV     A,R7
00290C F0                MOVX    @DPTR,A
   35: 		return true;
00290D D3                SETB    C
00290E 22                RET     
   36: 	}
00290F         ?C0003?BT_IPC:
   37: 	else
   38: 	{
   39: 		return false;
00290F C3                CLR     C
   40: 	}
   41: }
002910 22                RET     
----- FUNCTION _BT_CmdFifoIn (END) -------


----- FUNCTION BT_GetCmdFifoDepth (BEGIN) -----
 FILE: 'BT_IPC.c'
   78: u8_t BT_GetCmdFifoDepth(void)
   79: {
   80: 	u16_t wptr,rptr,len;
   81: 	wptr = ESWAP(BT_CmdWptr);
002911 904A03            MOV     DPTR,#BT_CmdWptr+01H
002914 E0                MOVX    A,@DPTR
002915 FC                MOV     R4,A
002916 904A02            MOV     DPTR,#BT_CmdWptr
002919 E0                MOVX    A,@DPTR
00291A FF                MOV     R7,A
00291B EC                MOV     A,R4
00291C EF                MOV     A,R7
;---- Variable 'wptr' assigned to Register 'R4/R5' ----
00291D FD                MOV     R5,A
   82: 	rptr = ESWAP(BT_CmdRptr);
00291E 904A01            MOV     DPTR,#BT_CmdRptr+01H
002921 E0                MOVX    A,@DPTR
002922 FA                MOV     R2,A
002923 904A00            MOV     DPTR,#BT_CmdRptr
002926 E0                MOVX    A,@DPTR
002927 FF                MOV     R7,A
002928 EA                MOV     A,R2
002929 FE                MOV     R6,A
00292A EF                MOV     A,R7
;---- Variable 'rptr' assigned to Register 'R6/R7' ----
   83: 	len = (wptr + BT_CMD_BUF_LEN - rptr)&(BT_CMD_BUF_LEN-1);
00292B ED                MOV     A,R5
00292C 2480              ADD     A,#080H
00292E FD                MOV     R5,A
00292F E4                CLR     A
002930 3C                ADDC    A,R4
002931 FC                MOV     R4,A
002932 C3                CLR     C
002933 ED                MOV     A,R5
002934 9F                SUBB    A,R7
002935 FF                MOV     R7,A
002936 EC                MOV     A,R4
002937 9E                SUBB    A,R6
002938 7E00              MOV     R6,#00H
00293A EF                MOV     A,R7
00293B 547F              ANL     A,#07FH
00293D FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R6/R7' ----
   84: 	return len&0xff;
   85: }
00293E 22                RET     
----- FUNCTION BT_GetCmdFifoDepth (END) -------


----- FUNCTION BT_CmdFifoEmpty (BEGIN) -----
 FILE: 'BT_IPC.c'
   96: bool BT_CmdFifoEmpty(void)
   97: {
   98: 	if(BT_GetCmdFifoDepth()==0)
   99: 	{
00293F 3111              ACALL   BT_GetCmdFifoDepth
002941 EF                MOV     A,R7
002942 7002              JNZ     ?C0023?BT_IPC
  100: 		return true;
  101: 	}
002944 D3                SETB    C
002945 22                RET     
  102: 	return false;
002946         ?C0023?BT_IPC:
  103: }
002946 C3                CLR     C
  104: 
002947 22                RET     
----- FUNCTION BT_CmdFifoEmpty (END) -------


----- FUNCTION _BT_CmdFifoFull (BEGIN) -----
 FILE: 'BT_IPC.c'
  105: bool BT_CmdFifoFull(BT_CMDFIFO_t *pFIFO)
  106: {
002948 904E53            MOV     DPTR,#pFIFO
00294B EB                MOV     A,R3
00294C F0                MOVX    @DPTR,A
00294D A3                INC     DPTR
00294E EA                MOV     A,R2
00294F F0                MOVX    @DPTR,A
002950 A3                INC     DPTR
002951 E9                MOV     A,R1
002952 F0                MOVX    @DPTR,A
  107: 	if((BT_GetCmdFifoDepth()+pFIFO->len+1) > BT_CMD_BUF_LEN)
  108: 		return true;
002953 3111              ACALL   BT_GetCmdFifoDepth
002955 904E53            MOV     DPTR,#pFIFO
002958 E0                MOVX    A,@DPTR
002959 FB                MOV     R3,A
00295A A3                INC     DPTR
00295B E0                MOVX    A,@DPTR
00295C FA                MOV     R2,A
00295D A3                INC     DPTR
00295E E0                MOVX    A,@DPTR
00295F F9                MOV     R1,A
002960 1200F9            LCALL   ?C?CLDPTR
002963 2F                ADD     A,R7
002964 FF                MOV     R7,A
002965 E4                CLR     A
002966 33                RLC     A
002967 CF                XCH     A,R7
002968 2401              ADD     A,#01H
00296A CF                XCH     A,R7
00296B 3400              ADDC    A,#00H
00296D FE                MOV     R6,A
00296E D3                SETB    C
00296F EF                MOV     A,R7
002970 9480              SUBB    A,#080H
002972 EE                MOV     A,R6
002973 6480              XRL     A,#080H
002975 9480              SUBB    A,#080H
002977 4002              JC      ?C0025?BT_IPC
  109: 	return false;
002979 D3                SETB    C
00297A 22                RET     
00297B         ?C0025?BT_IPC:
  110: }
00297B C3                CLR     C
  110: 
00297C 22                RET     
----- FUNCTION _BT_CmdFifoFull (END) -------


----- FUNCTION YC_Ice_break (BEGIN) -----
 FILE: 'YC_Utilities.c'
    4: void YC_Ice_break()
    5: {
    6: 	CPUB_ICE_CTRL = 1;
    7: 	return;
00297D 908280            MOV     DPTR,#08280H
002980 7401              MOV     A,#01H
002982 F0                MOVX    @DPTR,A
    8: }
002983 22                RET     
----- FUNCTION YC_Ice_break (END) -------


----- FUNCTION _dmemcpy (BEGIN) -----
 FILE: 'YC_Utilities.c'
   22: void dmemcpy(u8_t *dest, u8_t* src, u8_t len) small
   23: {
002984 8B10              MOV     dest,R3
002986 8A11              MOV     dest+01H,R2
002988 8912              MOV     dest+02H,R1
00298A         ?C0008?YC_UTILITIES:
   24: 	while(len--)
00298A AF16              MOV     R7,len
00298C 1516              DEC     len
00298E EF                MOV     A,R7
00298F 6026              JZ      ?C0010?YC_UTILITIES
   25: 		*dest++ = *src++;
002991 AB13              MOV     R3,src
002993 0515              INC     src+02H
002995 E515              MOV     A,src+02H
002997 AA14              MOV     R2,src+01H
002999 7002              JNZ     ?C0047?YC_UTILITIES
00299B 0514              INC     src+01H
00299D         ?C0047?YC_UTILITIES:
00299D 14                DEC     A
00299E F9                MOV     R1,A
00299F 1200F9            LCALL   ?C?CLDPTR
0029A2 FF                MOV     R7,A
0029A3 AB10              MOV     R3,dest
0029A5 0512              INC     dest+02H
0029A7 E512              MOV     A,dest+02H
0029A9 AA11              MOV     R2,dest+01H
0029AB 7002              JNZ     ?C0048?YC_UTILITIES
0029AD 0511              INC     dest+01H
0029AF         ?C0048?YC_UTILITIES:
0029AF 14                DEC     A
0029B0 F9                MOV     R1,A
0029B1 EF                MOV     A,R7
0029B2 12013F            LCALL   ?C?CSTPTR
0029B5 80D3              SJMP    ?C0008?YC_UTILITIES
   26: 	return;
   27: }
0029B7         ?C0010?YC_UTILITIES:
0029B7 22                RET     
----- FUNCTION _dmemcpy (END) -------


----- FUNCTION sendHistoryData (BEGIN) -----
 FILE: 'lxProtocol.c'
  389: static void sendHistoryData(void)
  390: {
  391: 	static u8_t total_len = 0;
  392: 	UserMeasureData *temp = NULL;
0029B8 904DC8            MOV     DPTR,#temp
0029BB E4                CLR     A
0029BC F0                MOVX    @DPTR,A
0029BD A3                INC     DPTR
0029BE F0                MOVX    @DPTR,A
0029BF A3                INC     DPTR
0029C0 F0                MOVX    @DPTR,A
  393: 	u32_t crc32;
  394: 	u8_t i=0;
0029C1 904DCF            MOV     DPTR,#i
0029C4 F0                MOVX    @DPTR,A
  395: 	u8_t pkgCnt; 
  396: 	u8_t size;
  397: 	/*
  398: 	UserMeasureData temp1;
  399: 	temp1.UTCTime[0] = 0x12;
  400: 	temp1.UTCTime[0] = 0x34;
  401: 	temp1.UTCTime[0] = 0x56;
  402: 	temp1.UTCTime[0] = 0x78;
  403: 	temp1.weight = 0xabba;
  404: 	QueuePush(&temp1);
  405: 	QueuePush(&temp1);
  406: 	*/
  407: 	
  408: 	size = historyUserData.size;
0029C5 904C12            MOV     DPTR,#historyUserData+02H
0029C8 E0                MOVX    A,@DPTR
0029C9 904DD1            MOV     DPTR,#size
0029CC F0                MOVX    @DPTR,A
  409: 	pkgCnt = (8 + historyUserData.size * 6 + 4)/18 + (((8 + historyUserData.size * 6 + 4)%18)>0?1:0);
0029CD 75F006            MOV     B,#06H
0029D0 A4                MUL     AB
0029D1 240C              ADD     A,#0CH
0029D3 FF                MOV     R7,A
0029D4 E4                CLR     A
0029D5 35F0              ADDC    A,B
0029D7 FE                MOV     R6,A
0029D8 7C00              MOV     R4,#00H
0029DA 7D12              MOV     R5,#012H
0029DC 120173            LCALL   ?C?UIDIV
0029DF ED                MOV     A,R5
0029E0 D3                SETB    C
0029E1 9400              SUBB    A,#00H
0029E3 4006              JC      ?C0035?LXPROTOCOL
0029E5 7F01              MOV     R7,#01H
0029E7 7B01              MOV     R3,#01H
0029E9 8004              SJMP    ?C0036?LXPROTOCOL
0029EB         ?C0035?LXPROTOCOL:
0029EB 7F00              MOV     R7,#00H
0029ED 7B00              MOV     R3,#00H
0029EF         ?C0036?LXPROTOCOL:
0029EF 904C12            MOV     DPTR,#historyUserData+02H
0029F2 E0                MOVX    A,@DPTR
0029F3 FA                MOV     R2,A
0029F4 75F006            MOV     B,#06H
0029F7 A4                MUL     AB
0029F8 240C              ADD     A,#0CH
0029FA FF                MOV     R7,A
0029FB E4                CLR     A
0029FC 35F0              ADDC    A,B
0029FE FE                MOV     R6,A
0029FF 7C00              MOV     R4,#00H
002A01 7D12              MOV     R5,#012H
002A03 120173            LCALL   ?C?UIDIV
002A06 EB                MOV     A,R3
002A07 2F                ADD     A,R7
002A08 904DD0            MOV     DPTR,#pkgCnt
002A0B F0                MOVX    @DPTR,A
  410: 	total_len = 8 + historyUserData.size * 6 + 4;
002A0C EA                MOV     A,R2
002A0D 75F006            MOV     B,#06H
002A10 A4                MUL     AB
002A11 240C              ADD     A,#0CH
002A13 904E6F            MOV     DPTR,#total_len
002A16 F0                MOVX    @DPTR,A
  411: 	
  412: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
002A17 904C64            MOV     DPTR,#btCmdBuf+01H
002A1A 7430              MOV     A,#030H
002A1C F0                MOVX    @DPTR,A
  413: 	btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
002A1D A3                INC     DPTR
002A1E 741C              MOV     A,#01CH
002A20 F0                MOVX    @DPTR,A
  414: 	btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
002A21 E4                CLR     A
002A22 A3                INC     DPTR
002A23 F0                MOVX    @DPTR,A
  415: 
  416: 	*(LX_SEND_BUF+0) = LO_UINT16(CMD_SYNC_DATA_RSP);
002A24 9048D2            MOV     DPTR,#048D2H
002A27 7402              MOV     A,#02H
002A29 F0                MOVX    @DPTR,A
  417: 	*(LX_SEND_BUF+1) = HI_UINT16(CMD_SYNC_DATA_RSP);
002A2A A3                INC     DPTR
002A2B 7448              MOV     A,#048H
002A2D F0                MOVX    @DPTR,A
  418: 	*(LX_SEND_BUF+2) = pkgCnt - 1;
002A2E 904DD0            MOV     DPTR,#pkgCnt
002A31 E0                MOVX    A,@DPTR
002A32 FF                MOV     R7,A
002A33 14                DEC     A
002A34 9048D4            MOV     DPTR,#048D4H
002A37 F0                MOVX    @DPTR,A
  419: 	*(LX_SEND_BUF+3) = 0;
002A38 A3                INC     DPTR
002A39 E4                CLR     A
002A3A F0                MOVX    @DPTR,A
  420: 	*(LX_SEND_BUF+4) = WEIGHT_UTC_FLAG;
002A3B A3                INC     DPTR
002A3C 7405              MOV     A,#05H
002A3E F0                MOVX    @DPTR,A
  421: 	*(LX_SEND_BUF+5) = 0;
002A3F A3                INC     DPTR
002A40 E4                CLR     A
002A41 F0                MOVX    @DPTR,A
  422: 	*(LX_SEND_BUF+6) = 0;
002A42 A3                INC     DPTR
002A43 F0                MOVX    @DPTR,A
  423: 	*(LX_SEND_BUF+7) = 0;
002A44 A3                INC     DPTR
002A45 F0                MOVX    @DPTR,A
  424: 	if(pkgCnt > 1)
002A46 EF                MOV     A,R7
002A47 D3                SETB    C
002A48 9401              SUBB    A,#01H
002A4A 5002              JNC     $ + 4H
002A4C 6193              AJMP    ?C0037?LXPROTOCOL
  425: 	{
  426: 		for(i=0;i<size;i++)
002A4E E4                CLR     A
002A4F 904DCF            MOV     DPTR,#i
002A52 F0                MOVX    @DPTR,A
002A53         ?C0038?LXPROTOCOL:
002A53 904DD1            MOV     DPTR,#size
002A56 E0                MOVX    A,@DPTR
002A57 FF                MOV     R7,A
002A58 904DCF            MOV     DPTR,#i
002A5B E0                MOVX    A,@DPTR
002A5C C3                CLR     C
002A5D 9F                SUBB    A,R7
002A5E 5046              JNC     ?C0039?LXPROTOCOL
  427: 		{
  428: 			temp = QueuePop();
002A60 910B              ACALL   QueuePop
002A62 904DC8            MOV     DPTR,#temp
002A65 EB                MOV     A,R3
002A66 F0                MOVX    @DPTR,A
002A67 A3                INC     DPTR
002A68 EA                MOV     A,R2
002A69 F0                MOVX    @DPTR,A
002A6A A3                INC     DPTR
002A6B E9                MOV     A,R1
002A6C F0                MOVX    @DPTR,A
  429: 			dmemcpy(LX_SEND_BUF + (sizeof(UserMeasureData) * i) + 8, (u8_t *)temp, sizeof(UserMeasureData));
002A6D 904DCF            MOV     DPTR,#i
002A70 E0                MOVX    A,@DPTR
002A71 75F006            MOV     B,#06H
002A74 A4                MUL     AB
002A75 24DA              ADD     A,#0DAH
002A77 FF                MOV     R7,A
002A78 E5F0              MOV     A,B
002A7A 3448              ADDC    A,#048H
002A7C FA                MOV     R2,A
002A7D A907              MOV     R1,AR7
002A7F 7B01              MOV     R3,#01H
002A81 C003              PUSH    AR3
002A83 C002              PUSH    AR2
002A85 904DC8            MOV     DPTR,#temp
002A88 E0                MOVX    A,@DPTR
002A89 FB                MOV     R3,A
002A8A A3                INC     DPTR
002A8B E0                MOVX    A,@DPTR
002A8C FA                MOV     R2,A
002A8D A3                INC     DPTR
002A8E E0                MOVX    A,@DPTR
002A8F 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
002A91 8A14              MOV     ?_dmemcpy?BYTE+04H,R2
002A93 F515              MOV     ?_dmemcpy?BYTE+05H,A
002A95 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
002A98 D002              POP     AR2
002A9A D003              POP     AR3
002A9C 3184              ACALL   _dmemcpy
  430: 		}
002A9E 904DCF            MOV     DPTR,#i
002AA1 E0                MOVX    A,@DPTR
002AA2 04                INC     A
002AA3 F0                MOVX    @DPTR,A
002AA4 80AD              SJMP    ?C0038?LXPROTOCOL
002AA6         ?C0039?LXPROTOCOL:
  431: 		crc32 = cal_crc32_multiple(0, LX_SEND_BUF, total_len - 4);
002AA6 7B01              MOV     R3,#01H
002AA8 7A48              MOV     R2,#048H
002AAA 79D2              MOV     R1,#0D2H
002AAC 904E6F            MOV     DPTR,#total_len
002AAF E0                MOVX    A,@DPTR
002AB0 24FC              ADD     A,#0FCH
002AB2 FF                MOV     R7,A
002AB3 E4                CLR     A
002AB4 34FF              ADDC    A,#0FFH
002AB6 FE                MOV     R6,A
002AB7 E4                CLR     A
002AB8 FC                MOV     R4,A
002AB9 FD                MOV     R5,A
002ABA 904D94            MOV     DPTR,#?_cal_crc32_multiple?BYTE+07H
002ABD 120332            LCALL   ?C?LSTXDATA
002AC0 7F00              MOV     R7,#00H
002AC2 7E00              MOV     R6,#00H
002AC4 7D00              MOV     R5,#00H
002AC6 7C00              MOV     R4,#00H
002AC8 B1CC              ACALL   _cal_crc32_multiple
002ACA 904DCB            MOV     DPTR,#crc32
002ACD 120332            LCALL   ?C?LSTXDATA
  432: 		dmemcpy(LX_SEND_BUF + (sizeof(UserMeasureData) * i) + 8, (u8_t *)&crc32, sizeof(crc32));
002AD0 904DCF            MOV     DPTR,#i
002AD3 E0                MOVX    A,@DPTR
002AD4 75F006            MOV     B,#06H
002AD7 A4                MUL     AB
002AD8 24DA              ADD     A,#0DAH
002ADA FF                MOV     R7,A
002ADB E5F0              MOV     A,B
002ADD 3448              ADDC    A,#048H
002ADF FA                MOV     R2,A
002AE0 A907              MOV     R1,AR7
002AE2 7B01              MOV     R3,#01H
002AE4 C003              PUSH    AR3
002AE6 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
002AE8 75144D            MOV     ?_dmemcpy?BYTE+04H,#HIGH crc32
002AEB 7515CB            MOV     ?_dmemcpy?BYTE+05H,#LOW crc32
002AEE 751604            MOV     ?_dmemcpy?BYTE+06H,#04H
002AF1 D003              POP     AR3
002AF3 3184              ACALL   _dmemcpy
  433: 		bigLittleEndianSwap(LX_SEND_BUF, total_len);
002AF5 7B01              MOV     R3,#01H
002AF7 7A48              MOV     R2,#048H
002AF9 79D2              MOV     R1,#0D2H
002AFB 904E6F            MOV     DPTR,#total_len
002AFE E0                MOVX    A,@DPTR
002AFF FD                MOV     R5,A
002B00 7C00              MOV     R4,#00H
002B02 9165              ACALL   _bigLittleEndianSwap
  434: 		
  435: 		for(i=0;i<pkgCnt;i++)
002B04 E4                CLR     A
002B05 904DCF            MOV     DPTR,#i
002B08 F0                MOVX    @DPTR,A
002B09         ?C0041?LXPROTOCOL:
002B09 904DD0            MOV     DPTR,#pkgCnt
002B0C E0                MOVX    A,@DPTR
002B0D FF                MOV     R7,A
002B0E 904DCF            MOV     DPTR,#i
002B11 E0                MOVX    A,@DPTR
002B12 FE                MOV     R6,A
002B13 C3                CLR     C
002B14 9F                SUBB    A,R7
002B15 4002              JC      $ + 4H
002B17 810A              AJMP    ?C0049?LXPROTOCOL
  436: 		{
  437: 			btCmdBuf.DATA[3] = (pkgCnt << 4) + i;
002B19 A3                INC     DPTR
002B1A E0                MOVX    A,@DPTR
002B1B FD                MOV     R5,A
002B1C C4                SWAP    A
002B1D 54F0              ANL     A,#0F0H
002B1F FF                MOV     R7,A
002B20 EE                MOV     A,R6
002B21 2F                ADD     A,R7
002B22 904C67            MOV     DPTR,#btCmdBuf+04H
002B25 F0                MOVX    @DPTR,A
  438: 			if(i == pkgCnt -1)
002B26 ED                MOV     A,R5
002B27 14                DEC     A
002B28 B5060A            CJNE    A,AR6,?C0044?LXPROTOCOL
  439: 			{
  440: 				btCmdBuf.DATA[4] = total_len;
002B2B 904E6F            MOV     DPTR,#total_len
002B2E E0                MOVX    A,@DPTR
002B2F 904C68            MOV     DPTR,#btCmdBuf+05H
002B32 F0                MOVX    @DPTR,A
  441: 			}
002B33 800D              SJMP    ?C0045?LXPROTOCOL
002B35         ?C0044?LXPROTOCOL:
  442: 			else
  443: 			{
  444: 				btCmdBuf.DATA[4] = 20 - 2;
002B35 904C68            MOV     DPTR,#btCmdBuf+05H
002B38 7412              MOV     A,#012H
002B3A F0                MOVX    @DPTR,A
  445: 				total_len -= 18;
002B3B 904E6F            MOV     DPTR,#total_len
002B3E E0                MOVX    A,@DPTR
002B3F 24EE              ADD     A,#0EEH
002B41 F0                MOVX    @DPTR,A
  446: 				
  447: 			}
002B42         ?C0045?LXPROTOCOL:
  448: 			btCmdBuf.DATA[7] = pkgCnt - i - 1;
002B42 904DCF            MOV     DPTR,#i
002B45 E0                MOVX    A,@DPTR
002B46 FD                MOV     R5,A
002B47 A3                INC     DPTR
002B48 E0                MOVX    A,@DPTR
002B49 C3                CLR     C
002B4A 9D                SUBB    A,R5
002B4B 14                DEC     A
002B4C 904C6B            MOV     DPTR,#btCmdBuf+08H
002B4F F0                MOVX    @DPTR,A
  449: 			btCmdBuf.len = 3 + 2 + btCmdBuf.DATA[4] ;
002B50 904C68            MOV     DPTR,#btCmdBuf+05H
002B53 E0                MOVX    A,@DPTR
002B54 2405              ADD     A,#05H
002B56 904C63            MOV     DPTR,#btCmdBuf
002B59 F0                MOVX    @DPTR,A
  450: 			dmemcpy(&btCmdBuf.DATA[5], (u8_t *)(LX_SEND_BUF+i*18), btCmdBuf.DATA[4] );
002B5A ED                MOV     A,R5
002B5B 75F012            MOV     B,#012H
002B5E A4                MUL     AB
002B5F 24D2              ADD     A,#0D2H
002B61 FF                MOV     R7,A
002B62 E5F0              MOV     A,B
002B64 3448              ADDC    A,#048H
002B66 A907              MOV     R1,AR7
002B68 751301            MOV     ?_dmemcpy?BYTE+03H,#01H
002B6B F514              MOV     ?_dmemcpy?BYTE+04H,A
002B6D 8915              MOV     ?_dmemcpy?BYTE+05H,R1
002B6F 904C68            MOV     DPTR,#btCmdBuf+05H
002B72 E0                MOVX    A,@DPTR
002B73 F516              MOV     ?_dmemcpy?BYTE+06H,A
002B75 7B01              MOV     R3,#01H
002B77 7A4C              MOV     R2,#HIGH btCmdBuf+06H
002B79 7969              MOV     R1,#LOW btCmdBuf+06H
002B7B 3184              ACALL   _dmemcpy
  451: 			BT_CmdFifoIn(&btCmdBuf);
002B7D 7B01              MOV     R3,#01H
002B7F 7A4C              MOV     R2,#HIGH btCmdBuf
002B81 7963              MOV     R1,#LOW btCmdBuf
002B83 1227F1            LCALL   _BT_CmdFifoIn
  452: 			YC_Delay10ms(12);
002B86 7F0C              MOV     R7,#0CH
002B88 121F94            LCALL   _YC_Delay10ms
  453: 		}
002B8B 904DCF            MOV     DPTR,#i
002B8E E0                MOVX    A,@DPTR
002B8F 04                INC     A
002B90 F0                MOVX    @DPTR,A
002B91 6109              AJMP    ?C0041?LXPROTOCOL
  454: 	}
002B93         ?C0037?LXPROTOCOL:
  455: 	else
  456: 	{
  457: 		btCmdBuf.len = 3 + 2 + SYNC_DATA_HDR_LEN + sizeof(UserMeasureData);
002B93 904C63            MOV     DPTR,#btCmdBuf
002B96 7413              MOV     A,#013H
002B98 F0                MOVX    @DPTR,A
  458: 		btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
002B99 904C67            MOV     DPTR,#btCmdBuf+04H
002B9C 7410              MOV     A,#010H
002B9E F0                MOVX    @DPTR,A
  459: 		btCmdBuf.DATA[4] = SYNC_DATA_HDR_LEN + sizeof(UserMeasureData);
002B9F A3                INC     DPTR
002BA0 740E              MOV     A,#0EH
002BA2 F0                MOVX    @DPTR,A
  460: 		temp = QueuePop();
002BA3 910B              ACALL   QueuePop
002BA5 904DC8            MOV     DPTR,#temp
002BA8 EB                MOV     A,R3
002BA9 F0                MOVX    @DPTR,A
002BAA A3                INC     DPTR
002BAB EA                MOV     A,R2
002BAC F0                MOVX    @DPTR,A
002BAD A3                INC     DPTR
002BAE E9                MOV     A,R1
002BAF F0                MOVX    @DPTR,A
  461: 		if(temp != NULL)
002BB0 4A                ORL     A,R2
002BB1 601D              JZ      ?C0047?LXPROTOCOL
  462: 		{
  463: 			dmemcpy(LX_SEND_BUF + 8, (u8_t *)temp, sizeof(UserMeasureData));
002BB3 904DC8            MOV     DPTR,#temp
002BB6 E0                MOVX    A,@DPTR
002BB7 FB                MOV     R3,A
002BB8 A3                INC     DPTR
002BB9 E0                MOVX    A,@DPTR
002BBA FA                MOV     R2,A
002BBB A3                INC     DPTR
002BBC E0                MOVX    A,@DPTR
002BBD 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
002BBF 8A14              MOV     ?_dmemcpy?BYTE+04H,R2
002BC1 F515              MOV     ?_dmemcpy?BYTE+05H,A
002BC3 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
002BC6 7B01              MOV     R3,#01H
002BC8 7A48              MOV     R2,#048H
002BCA 79DA              MOV     R1,#0DAH
002BCC 3184              ACALL   _dmemcpy
  464: 		}
002BCE 800B              SJMP    ?C0048?LXPROTOCOL
002BD0         ?C0047?LXPROTOCOL:
  465: 		else
  466: 		{
  467: 			xmemset(LX_SEND_BUF, 0, sizeof(UserMeasureData));
002BD0 7B06              MOV     R3,#06H
002BD2 E4                CLR     A
002BD3 FD                MOV     R5,A
002BD4 7FD2              MOV     R7,#0D2H
002BD6 7E48              MOV     R6,#048H
002BD8 121F1A            LCALL   _xmemset
  468: 		}
002BDB         ?C0048?LXPROTOCOL:
  469: 		dmemcpy(&(btCmdBuf.DATA[5]), LX_SEND_BUF, btCmdBuf.DATA[4]);
002BDB 751301            MOV     ?_dmemcpy?BYTE+03H,#01H
002BDE 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
002BE1 7515D2            MOV     ?_dmemcpy?BYTE+05H,#0D2H
002BE4 904C68            MOV     DPTR,#btCmdBuf+05H
002BE7 E0                MOVX    A,@DPTR
002BE8 F516              MOV     ?_dmemcpy?BYTE+06H,A
002BEA 7B01              MOV     R3,#01H
002BEC 7A4C              MOV     R2,#HIGH btCmdBuf+06H
002BEE 7969              MOV     R1,#LOW btCmdBuf+06H
002BF0 3184              ACALL   _dmemcpy
  470: 		bigLittleEndianSwap(&(btCmdBuf.DATA[5]), btCmdBuf.DATA[4]);
002BF2 7B01              MOV     R3,#01H
002BF4 7A4C              MOV     R2,#HIGH btCmdBuf+06H
002BF6 7969              MOV     R1,#LOW btCmdBuf+06H
002BF8 904C68            MOV     DPTR,#btCmdBuf+05H
002BFB E0                MOVX    A,@DPTR
002BFC FD                MOV     R5,A
002BFD 7C00              MOV     R4,#00H
002BFF 9165              ACALL   _bigLittleEndianSwap
  471: 		BT_CmdFifoIn(&btCmdBuf);
002C01 7B01              MOV     R3,#01H
002C03 7A4C              MOV     R2,#HIGH btCmdBuf
002C05 7963              MOV     R1,#LOW btCmdBuf
002C07 1227F1            LCALL   _BT_CmdFifoIn
  472: 	}
  473: }
002C0A         ?C0049?LXPROTOCOL:
002C0A 22                RET     
----- FUNCTION sendHistoryData (END) -------


----- FUNCTION QueuePop (BEGIN) -----
 FILE: 'lxProtocol.c'
  509: static UserMeasureData* QueuePop(void)
  510: {
  511: 	UserMeasureData *temp = NULL;
  512: 	
002C0B 904E5F            MOV     DPTR,#temp
002C0E E4                CLR     A
002C0F F0                MOVX    @DPTR,A
002C10 A3                INC     DPTR
002C11 F0                MOVX    @DPTR,A
002C12 A3                INC     DPTR
002C13 F0                MOVX    @DPTR,A
  513: 	if(QUEUE_IS_EMPTY)
002C14 904C12            MOV     DPTR,#historyUserData+02H
002C17 E0                MOVX    A,@DPTR
002C18 D3                SETB    C
002C19 9400              SUBB    A,#00H
002C1B 5007              JNC     ?C0055?LXPROTOCOL
  514: 		return NULL;
002C1D 7B00              MOV     R3,#00H
002C1F 7A00              MOV     R2,#00H
002C21 7900              MOV     R1,#00H
002C23 22                RET     
002C24         ?C0055?LXPROTOCOL:
  515: 
  516: 	temp = &(historyUserData.measureData[historyUserData.head]);
002C24 904C10            MOV     DPTR,#historyUserData
002C27 E0                MOVX    A,@DPTR
002C28 75F006            MOV     B,#06H
002C2B A4                MUL     AB
002C2C 2413              ADD     A,#LOW historyUserData+03H
002C2E F9                MOV     R1,A
002C2F 744C              MOV     A,#HIGH historyUserData+03H
002C31 35F0              ADDC    A,B
002C33 FA                MOV     R2,A
002C34 904E5F            MOV     DPTR,#temp
002C37 7401              MOV     A,#01H
002C39 F0                MOVX    @DPTR,A
002C3A A3                INC     DPTR
002C3B EA                MOV     A,R2
002C3C F0                MOVX    @DPTR,A
002C3D A3                INC     DPTR
002C3E E9                MOV     A,R1
002C3F F0                MOVX    @DPTR,A
  517: 	historyUserData.head = (historyUserData.head + 1)%MAX_SIZE;
002C40 904C10            MOV     DPTR,#historyUserData
002C43 E0                MOVX    A,@DPTR
002C44 2401              ADD     A,#01H
002C46 FF                MOV     R7,A
002C47 E4                CLR     A
002C48 33                RLC     A
002C49 FE                MOV     R6,A
002C4A 7C00              MOV     R4,#00H
002C4C 7D0A              MOV     R5,#0AH
002C4E 120173            LCALL   ?C?UIDIV
002C51 ED                MOV     A,R5
002C52 F0                MOVX    @DPTR,A
  518: 	historyUserData.size--;
002C53 904C12            MOV     DPTR,#historyUserData+02H
002C56 E0                MOVX    A,@DPTR
002C57 14                DEC     A
002C58 F0                MOVX    @DPTR,A
  519: 
  520: 	return temp;
002C59 904E5F            MOV     DPTR,#temp
002C5C E0                MOVX    A,@DPTR
002C5D FB                MOV     R3,A
002C5E A3                INC     DPTR
002C5F E0                MOVX    A,@DPTR
002C60 FA                MOV     R2,A
002C61 A3                INC     DPTR
002C62 E0                MOVX    A,@DPTR
002C63 F9                MOV     R1,A
  521: }
002C64 22                RET     
----- FUNCTION QueuePop (END) -------


----- FUNCTION _bigLittleEndianSwap (BEGIN) -----
 FILE: 'lxProtocol.c'
   18: static void bigLittleEndianSwap(u8_t *buf, u16_t len)
   19: {
002C65 904DBE            MOV     DPTR,#buf
002C68 EB                MOV     A,R3
002C69 F0                MOVX    @DPTR,A
002C6A A3                INC     DPTR
002C6B EA                MOV     A,R2
002C6C F0                MOVX    @DPTR,A
002C6D A3                INC     DPTR
002C6E E9                MOV     A,R1
002C6F F0                MOVX    @DPTR,A
002C70 A3                INC     DPTR
002C71 EC                MOV     A,R4
002C72 F0                MOVX    @DPTR,A
002C73 A3                INC     DPTR
002C74 ED                MOV     A,R5
002C75 F0                MOVX    @DPTR,A
   20: 	u16_t i, size;
   21: 	u8_t temp;
   22: 	
   23: 	size = len -1;
002C76 24FF              ADD     A,#0FFH
002C78 FE                MOV     R6,A
002C79 EC                MOV     A,R4
002C7A 34FF              ADDC    A,#0FFH
002C7C 904DC5            MOV     DPTR,#size
002C7F F0                MOVX    @DPTR,A
002C80 A3                INC     DPTR
002C81 CE                XCH     A,R6
002C82 F0                MOVX    @DPTR,A
   24: 	for(i=0; i<len/2; i++)
002C83 E4                CLR     A
002C84 904DC3            MOV     DPTR,#i
002C87 F0                MOVX    @DPTR,A
002C88 A3                INC     DPTR
002C89 F0                MOVX    @DPTR,A
002C8A         ?C0001?LXPROTOCOL:
002C8A 904DC1            MOV     DPTR,#len
002C8D E0                MOVX    A,@DPTR
002C8E C3                CLR     C
002C8F 13                RRC     A
002C90 FE                MOV     R6,A
002C91 A3                INC     DPTR
002C92 E0                MOVX    A,@DPTR
002C93 13                RRC     A
002C94 FF                MOV     R7,A
002C95 C3                CLR     C
002C96 904DC4            MOV     DPTR,#i+01H
002C99 E0                MOVX    A,@DPTR
002C9A 9F                SUBB    A,R7
002C9B 904DC3            MOV     DPTR,#i
002C9E E0                MOVX    A,@DPTR
002C9F 9E                SUBB    A,R6
002CA0 507D              JNC     ?C0004?LXPROTOCOL
   25: 	{
   26: 		temp = buf[i];
002CA2 904DBE            MOV     DPTR,#buf
002CA5 E0                MOVX    A,@DPTR
002CA6 FB                MOV     R3,A
002CA7 A3                INC     DPTR
002CA8 E0                MOVX    A,@DPTR
002CA9 FA                MOV     R2,A
002CAA A3                INC     DPTR
002CAB E0                MOVX    A,@DPTR
002CAC F9                MOV     R1,A
002CAD 904DC3            MOV     DPTR,#i
002CB0 E0                MOVX    A,@DPTR
002CB1 FE                MOV     R6,A
002CB2 A3                INC     DPTR
002CB3 E0                MOVX    A,@DPTR
002CB4 F582              MOV     DPL,A
002CB6 8E83              MOV     DPH,R6
002CB8 120112            LCALL   ?C?CLDOPTR
002CBB 904DC7            MOV     DPTR,#temp
002CBE F0                MOVX    @DPTR,A
   27: 		buf[i] = buf[size -i];
002CBF 904DC3            MOV     DPTR,#i
002CC2 E0                MOVX    A,@DPTR
002CC3 A3                INC     DPTR
002CC4 E0                MOVX    A,@DPTR
002CC5 FF                MOV     R7,A
002CC6 C3                CLR     C
002CC7 904DC6            MOV     DPTR,#size+01H
002CCA E0                MOVX    A,@DPTR
002CCB 9F                SUBB    A,R7
002CCC FF                MOV     R7,A
002CCD 904DC5            MOV     DPTR,#size
002CD0 E0                MOVX    A,@DPTR
002CD1 9E                SUBB    A,R6
002CD2 8F82              MOV     DPL,R7
002CD4 F583              MOV     DPH,A
002CD6 120112            LCALL   ?C?CLDOPTR
002CD9 FF                MOV     R7,A
002CDA 904DC3            MOV     DPTR,#i
002CDD E0                MOVX    A,@DPTR
002CDE FC                MOV     R4,A
002CDF A3                INC     DPTR
002CE0 E0                MOVX    A,@DPTR
002CE1 FD                MOV     R5,A
002CE2 F582              MOV     DPL,A
002CE4 8C83              MOV     DPH,R4
002CE6 EF                MOV     A,R7
002CE7 120151            LCALL   ?C?CSTOPTR
   28: 		buf[size -i] = temp;
002CEA 904DC7            MOV     DPTR,#temp
002CED E0                MOVX    A,@DPTR
002CEE FF                MOV     R7,A
002CEF C3                CLR     C
002CF0 904DC6            MOV     DPTR,#size+01H
002CF3 E0                MOVX    A,@DPTR
002CF4 9D                SUBB    A,R5
002CF5 FD                MOV     R5,A
002CF6 904DC5            MOV     DPTR,#size
002CF9 E0                MOVX    A,@DPTR
002CFA 9C                SUBB    A,R4
002CFB FC                MOV     R4,A
002CFC 904DBE            MOV     DPTR,#buf
002CFF E0                MOVX    A,@DPTR
002D00 FB                MOV     R3,A
002D01 A3                INC     DPTR
002D02 E0                MOVX    A,@DPTR
002D03 FA                MOV     R2,A
002D04 A3                INC     DPTR
002D05 E0                MOVX    A,@DPTR
002D06 F9                MOV     R1,A
002D07 8D82              MOV     DPL,R5
002D09 8C83              MOV     DPH,R4
002D0B EF                MOV     A,R7
002D0C 120151            LCALL   ?C?CSTOPTR
   29: 	}
002D0F 904DC4            MOV     DPTR,#i+01H
002D12 E0                MOVX    A,@DPTR
002D13 04                INC     A
002D14 F0                MOVX    @DPTR,A
002D15 7006              JNZ     ?C0059?LXPROTOCOL
002D17 904DC3            MOV     DPTR,#i
002D1A E0                MOVX    A,@DPTR
002D1B 04                INC     A
002D1C F0                MOVX    @DPTR,A
002D1D         ?C0059?LXPROTOCOL:
002D1D 818A              AJMP    ?C0001?LXPROTOCOL
   30: }
002D1F         ?C0004?LXPROTOCOL:
002D1F 22                RET     
----- FUNCTION _bigLittleEndianSwap (END) -------


----- FUNCTION _QueuePush (BEGIN) -----
 FILE: 'lxProtocol.c'
  523: static void QueuePush(UserMeasureData *userData)
  524: {
002D20 904E62            MOV     DPTR,#userData
002D23 EB                MOV     A,R3
002D24 F0                MOVX    @DPTR,A
002D25 A3                INC     DPTR
002D26 EA                MOV     A,R2
002D27 F0                MOVX    @DPTR,A
002D28 A3                INC     DPTR
002D29 E9                MOV     A,R1
002D2A F0                MOVX    @DPTR,A
  525: 	if(QUEUE_IS_FULL)
  526: 		QueuePop();
002D2B 904C12            MOV     DPTR,#historyUserData+02H
002D2E E0                MOVX    A,@DPTR
002D2F C3                CLR     C
002D30 940A              SUBB    A,#0AH
002D32 4002              JC      ?C0057?LXPROTOCOL
  527: 	
002D34 910B              ACALL   QueuePop
002D36         ?C0057?LXPROTOCOL:
  528: 	dmemcpy((u8_t *)&(historyUserData.measureData[historyUserData.tail]), (u8_t *)userData, sizeof(UserMeasureData))
>> ;
002D36 904C11            MOV     DPTR,#historyUserData+01H
002D39 E0                MOVX    A,@DPTR
002D3A 75F006            MOV     B,#06H
002D3D A4                MUL     AB
002D3E 2413              ADD     A,#LOW historyUserData+03H
002D40 F9                MOV     R1,A
002D41 744C              MOV     A,#HIGH historyUserData+03H
002D43 35F0              ADDC    A,B
002D45 FA                MOV     R2,A
002D46 7B01              MOV     R3,#01H
002D48 C003              PUSH    AR3
002D4A C002              PUSH    AR2
002D4C 904E62            MOV     DPTR,#userData
002D4F E0                MOVX    A,@DPTR
002D50 FB                MOV     R3,A
002D51 A3                INC     DPTR
002D52 E0                MOVX    A,@DPTR
002D53 FA                MOV     R2,A
002D54 A3                INC     DPTR
002D55 E0                MOVX    A,@DPTR
002D56 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
002D58 8A14              MOV     ?_dmemcpy?BYTE+04H,R2
002D5A F515              MOV     ?_dmemcpy?BYTE+05H,A
002D5C 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
002D5F D002              POP     AR2
002D61 D003              POP     AR3
002D63 3184              ACALL   _dmemcpy
  529: 	historyUserData.tail = (historyUserData.tail + 1)%MAX_SIZE;
002D65 904C11            MOV     DPTR,#historyUserData+01H
002D68 E0                MOVX    A,@DPTR
002D69 2401              ADD     A,#01H
002D6B FF                MOV     R7,A
002D6C E4                CLR     A
002D6D 33                RLC     A
002D6E FE                MOV     R6,A
002D6F 7C00              MOV     R4,#00H
002D71 7D0A              MOV     R5,#0AH
002D73 120173            LCALL   ?C?UIDIV
002D76 ED                MOV     A,R5
002D77 F0                MOVX    @DPTR,A
  530: 	historyUserData.size++;
002D78 A3                INC     DPTR
002D79 E0                MOVX    A,@DPTR
002D7A 04                INC     A
002D7B F0                MOVX    @DPTR,A
  531: }
002D7C 22                RET     
----- FUNCTION _QueuePush (END) -------


----- FUNCTION sendMeasureData (BEGIN) -----
 FILE: 'lxProtocol.c'
  382: void sendMeasureData(UserMeasureData userData)
  383: {
  384: 	QueuePush(&userData);
  385: }
002D7D 7B01              MOV     R3,#01H
002D7F 7A4E              MOV     R2,#HIGH userData
002D81 7934              MOV     R1,#LOW userData
002D83 809B              SJMP    _QueuePush
----- FUNCTION sendMeasureData (END) -------


----- FUNCTION _lxSettingDeviceRespone (BEGIN) -----
 FILE: 'lxProtocol.c'
  352: static void lxSettingDeviceRespone(u16_t cmd, u8_t state)
  353: {
;---- Variable 'cmd' assigned to Register 'R2/R3' ----
002D85 AB07              MOV     R3,AR7
002D87 AA06              MOV     R2,AR6
;---- Variable 'state' assigned to Register 'R5' ----
  354: 	btCmdBuf.len = DEVICE_RSP_DATA_LEN + 5;
  355: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
002D89 904C63            MOV     DPTR,#btCmdBuf
002D8C 740A              MOV     A,#0AH
002D8E F0                MOVX    @DPTR,A
  356: 	btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
002D8F A3                INC     DPTR
002D90 7430              MOV     A,#030H
002D92 F0                MOVX    @DPTR,A
  357: 	btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
002D93 A3                INC     DPTR
002D94 741C              MOV     A,#01CH
002D96 F0                MOVX    @DPTR,A
  358: 	btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
002D97 E4                CLR     A
002D98 A3                INC     DPTR
002D99 F0                MOVX    @DPTR,A
  359: 	btCmdBuf.DATA[4] = DEVICE_RSP_DATA_LEN;
002D9A A3                INC     DPTR
002D9B 7410              MOV     A,#010H
002D9D F0                MOVX    @DPTR,A
  360: 	btCmdBuf.DATA[5] = LO_UINT16(CMD_DEVICE_RSP);
002D9E A3                INC     DPTR
002D9F 7405              MOV     A,#05H
002DA1 F0                MOVX    @DPTR,A
  361: 	btCmdBuf.DATA[6] = HI_UINT16(CMD_DEVICE_RSP);
002DA2 E4                CLR     A
002DA3 A3                INC     DPTR
002DA4 F0                MOVX    @DPTR,A
  362: 	btCmdBuf.DATA[7] = LO_UINT16(cmd);
002DA5 A3                INC     DPTR
002DA6 7410              MOV     A,#010H
002DA8 F0                MOVX    @DPTR,A
  363: 	btCmdBuf.DATA[8] = HI_UINT16(cmd);
002DA9 EF                MOV     A,R7
002DAA A3                INC     DPTR
002DAB F0                MOVX    @DPTR,A
  364: 	btCmdBuf.DATA[9] = state;
002DAC EE                MOV     A,R6
002DAD A3                INC     DPTR
002DAE F0                MOVX    @DPTR,A
  365: 
002DAF A3                INC     DPTR
002DB0 ED                MOV     A,R5
002DB1 F0                MOVX    @DPTR,A
  366: 	bigLittleEndianSwap(&(btCmdBuf.DATA[5]), DEVICE_RSP_DATA_LEN);
002DB2 7B01              MOV     R3,#01H
002DB4 7A4C              MOV     R2,#HIGH btCmdBuf+06H
002DB6 7969              MOV     R1,#LOW btCmdBuf+06H
002DB8 7D05              MOV     R5,#05H
002DBA 7C00              MOV     R4,#00H
002DBC 9165              ACALL   _bigLittleEndianSwap
  367: 	BT_CmdFifoIn(&btCmdBuf);
002DBE 7B01              MOV     R3,#01H
002DC0 7A4C              MOV     R2,#HIGH btCmdBuf
002DC2 7963              MOV     R1,#LOW btCmdBuf
002DC4 1227F1            LCALL   _BT_CmdFifoIn
  368: 	YC_Delay10ms(10);
002DC7 7F0A              MOV     R7,#0AH
002DC9 021F94            LJMP    _YC_Delay10ms
  369: }
----- FUNCTION _lxSettingDeviceRespone (END) -------


----- FUNCTION _cal_crc32_multiple (BEGIN) -----
 FILE: 'Crc32.c'
   80: u32_t cal_crc32_multiple(u32_t crc, u8_t *buffer, u32_t size)
   81: {
002DCC 904D8D            MOV     DPTR,#crc
002DCF 120332            LCALL   ?C?LSTXDATA
002DD2 904D91            MOV     DPTR,#buffer
002DD5 EB                MOV     A,R3
002DD6 F0                MOVX    @DPTR,A
002DD7 A3                INC     DPTR
002DD8 EA                MOV     A,R2
002DD9 F0                MOVX    @DPTR,A
002DDA A3                INC     DPTR
002DDB E9                MOV     A,R1
002DDC F0                MOVX    @DPTR,A
   82:     u32_t i;
   83:     for (i = 0; i < size; ++i)
002DDD 904D98            MOV     DPTR,#i
002DE0 12033E            LCALL   ?C?LSTKXDATA
002DE3 00                DB      00H
002DE4 00                DB      00H
002DE5 00                DB      00H
002DE6 00                DB      00H
002DE7         ?C0001?CRC32:
002DE7 904D94            MOV     DPTR,#size
002DEA E0                MOVX    A,@DPTR
002DEB FC                MOV     R4,A
002DEC A3                INC     DPTR
002DED E0                MOVX    A,@DPTR
002DEE FD                MOV     R5,A
002DEF A3                INC     DPTR
002DF0 E0                MOVX    A,@DPTR
002DF1 FE                MOV     R6,A
002DF2 A3                INC     DPTR
002DF3 E0                MOVX    A,@DPTR
002DF4 FF                MOV     R7,A
002DF5 A3                INC     DPTR
002DF6 E0                MOVX    A,@DPTR
002DF7 F8                MOV     R0,A
002DF8 A3                INC     DPTR
002DF9 E0                MOVX    A,@DPTR
002DFA F9                MOV     R1,A
002DFB A3                INC     DPTR
002DFC E0                MOVX    A,@DPTR
002DFD FA                MOV     R2,A
002DFE A3                INC     DPTR
002DFF E0                MOVX    A,@DPTR
002E00 FB                MOV     R3,A
002E01 C3                CLR     C
002E02 1202FB            LCALL   ?C?ULCMP
002E05 4002              JC      $ + 4H
002E07 C1B9              AJMP    ?C0002?CRC32
   84:     {
   85:     	SPIFlashRead((u8_t *)&crc_table, CRC32_ADDR + (((crc ^ buffer[i]) & 0xff)*4), sizeof(crc_table));
002E09 904D98            MOV     DPTR,#i
002E0C E0                MOVX    A,@DPTR
002E0D A3                INC     DPTR
002E0E E0                MOVX    A,@DPTR
002E0F A3                INC     DPTR
002E10 E0                MOVX    A,@DPTR
002E11 FE                MOV     R6,A
002E12 A3                INC     DPTR
002E13 E0                MOVX    A,@DPTR
002E14 FF                MOV     R7,A
002E15 904D91            MOV     DPTR,#buffer
002E18 E0                MOVX    A,@DPTR
002E19 FB                MOV     R3,A
002E1A A3                INC     DPTR
002E1B E0                MOVX    A,@DPTR
002E1C FA                MOV     R2,A
002E1D A3                INC     DPTR
002E1E E0                MOVX    A,@DPTR
002E1F F9                MOV     R1,A
002E20 8F82              MOV     DPL,R7
002E22 8E83              MOV     DPH,R6
002E24 120112            LCALL   ?C?CLDOPTR
002E27 FF                MOV     R7,A
002E28 E4                CLR     A
002E29 904D8D            MOV     DPTR,#crc
002E2C E0                MOVX    A,@DPTR
002E2D F8                MOV     R0,A
002E2E A3                INC     DPTR
002E2F E0                MOVX    A,@DPTR
002E30 F9                MOV     R1,A
002E31 A3                INC     DPTR
002E32 E0                MOVX    A,@DPTR
002E33 FA                MOV     R2,A
002E34 A3                INC     DPTR
002E35 E0                MOVX    A,@DPTR
002E36 6F                XRL     A,R7
002E37 FF                MOV     R7,A
002E38 EA                MOV     A,R2
002E39 FE                MOV     R6,A
002E3A E9                MOV     A,R1
002E3B FD                MOV     R5,A
002E3C E8                MOV     A,R0
002E3D FC                MOV     R4,A
002E3E EF                MOV     A,R7
002E3F E4                CLR     A
002E40 FE                MOV     R6,A
002E41 FD                MOV     R5,A
002E42 FC                MOV     R4,A
002E43 7B04              MOV     R3,#04H
002E45 FA                MOV     R2,A
002E46 F9                MOV     R1,A
002E47 F8                MOV     R0,A
002E48 1201DE            LCALL   ?C?LMUL
002E4B E4                CLR     A
002E4C 2F                ADD     A,R7
002E4D FF                MOV     R7,A
002E4E EE                MOV     A,R6
002E4F 3480              ADDC    A,#080H
002E51 FE                MOV     R6,A
002E52 E4                CLR     A
002E53 3D                ADDC    A,R5
002E54 FD                MOV     R5,A
002E55 E4                CLR     A
002E56 3C                ADDC    A,R4
002E57 FC                MOV     R4,A
002E58 904DFA            MOV     DPTR,#?_SPIFlashRead?BYTE+07H
002E5B 7404              MOV     A,#04H
002E5D F0                MOVX    @DPTR,A
002E5E 7B01              MOV     R3,#01H
002E60 7A4E              MOV     R2,#HIGH crc_table
002E62 794C              MOV     R1,#LOW crc_table
002E64 122756            LCALL   _SPIFlashRead
   86:         crc = crc_table ^ (crc >> 8);
002E67 904D8D            MOV     DPTR,#crc
002E6A E0                MOVX    A,@DPTR
002E6B FC                MOV     R4,A
002E6C A3                INC     DPTR
002E6D E0                MOVX    A,@DPTR
002E6E FD                MOV     R5,A
002E6F A3                INC     DPTR
002E70 E0                MOVX    A,@DPTR
002E71 FE                MOV     R6,A
002E72 A3                INC     DPTR
002E73 E0                MOVX    A,@DPTR
002E74 FF                MOV     R7,A
002E75 7808              MOV     R0,#08H
002E77 12030C            LCALL   ?C?ULSHR
002E7A 904E4C            MOV     DPTR,#crc_table
002E7D E0                MOVX    A,@DPTR
002E7E F8                MOV     R0,A
002E7F A3                INC     DPTR
002E80 E0                MOVX    A,@DPTR
002E81 F9                MOV     R1,A
002E82 A3                INC     DPTR
002E83 E0                MOVX    A,@DPTR
002E84 FA                MOV     R2,A
002E85 A3                INC     DPTR
002E86 E0                MOVX    A,@DPTR
002E87 6F                XRL     A,R7
002E88 FF                MOV     R7,A
002E89 EA                MOV     A,R2
002E8A 6E                XRL     A,R6
002E8B FE                MOV     R6,A
002E8C E9                MOV     A,R1
002E8D 6D                XRL     A,R5
002E8E FD                MOV     R5,A
002E8F E8                MOV     A,R0
002E90 6C                XRL     A,R4
002E91 FC                MOV     R4,A
002E92 904D8D            MOV     DPTR,#crc
002E95 120332            LCALL   ?C?LSTXDATA
   87:     }
002E98 904D98            MOV     DPTR,#i
002E9B E0                MOVX    A,@DPTR
002E9C FC                MOV     R4,A
002E9D A3                INC     DPTR
002E9E E0                MOVX    A,@DPTR
002E9F FD                MOV     R5,A
002EA0 A3                INC     DPTR
002EA1 E0                MOVX    A,@DPTR
002EA2 FE                MOV     R6,A
002EA3 A3                INC     DPTR
002EA4 E0                MOVX    A,@DPTR
002EA5 2401              ADD     A,#01H
002EA7 FF                MOV     R7,A
002EA8 E4                CLR     A
002EA9 3E                ADDC    A,R6
002EAA FE                MOV     R6,A
002EAB E4                CLR     A
002EAC 3D                ADDC    A,R5
002EAD FD                MOV     R5,A
002EAE E4                CLR     A
002EAF 3C                ADDC    A,R4
002EB0 FC                MOV     R4,A
002EB1 904D98            MOV     DPTR,#i
002EB4 120332            LCALL   ?C?LSTXDATA
002EB7 A1E7              AJMP    ?C0001?CRC32
002EB9         ?C0002?CRC32:
   88: 
   89:     return crc;
002EB9 904D8D            MOV     DPTR,#crc
002EBC E0                MOVX    A,@DPTR
002EBD FC                MOV     R4,A
002EBE A3                INC     DPTR
002EBF E0                MOVX    A,@DPTR
002EC0 FD                MOV     R5,A
002EC1 A3                INC     DPTR
002EC2 E0                MOVX    A,@DPTR
002EC3 FE                MOV     R6,A
002EC4 A3                INC     DPTR
002EC5 E0                MOVX    A,@DPTR
002EC6 FF                MOV     R7,A
   90: }
002EC7 22                RET     
----- FUNCTION _cal_crc32_multiple (END) -------


----- FUNCTION _cmemcpy (BEGIN) -----
 FILE: 'YC_Utilities.c'
   28: void cmemcpy(pxbyte dest, const u8_t* src, u8_t len) small
   29: {
002EC8 8E21              MOV     dest,R6
002ECA 8F22              MOV     dest+01H,R7
002ECC 8B23              MOV     src,R3
002ECE 8A24              MOV     src+01H,R2
002ED0 8925              MOV     src+02H,R1
002ED2         ?C0011?YC_UTILITIES:
   30: 	while(len--)
002ED2 AF26              MOV     R7,len
002ED4 1526              DEC     len
002ED6 EF                MOV     A,R7
002ED7 6025              JZ      ?C0013?YC_UTILITIES
   31: 		*dest++ = (u8_t)(*src++);
002ED9 AB23              MOV     R3,src
002EDB 0525              INC     src+02H
002EDD E525              MOV     A,src+02H
002EDF AA24              MOV     R2,src+01H
002EE1 7002              JNZ     ?C0049?YC_UTILITIES
002EE3 0524              INC     src+01H
002EE5         ?C0049?YC_UTILITIES:
002EE5 14                DEC     A
002EE6 F9                MOV     R1,A
002EE7 1200F9            LCALL   ?C?CLDPTR
002EEA FF                MOV     R7,A
002EEB 0522              INC     dest+01H
002EED E522              MOV     A,dest+01H
002EEF AC21              MOV     R4,dest
002EF1 7002              JNZ     ?C0050?YC_UTILITIES
002EF3 0521              INC     dest
002EF5         ?C0050?YC_UTILITIES:
002EF5 14                DEC     A
002EF6 F582              MOV     DPL,A
002EF8 8C83              MOV     DPH,R4
002EFA EF                MOV     A,R7
002EFB F0                MOVX    @DPTR,A
002EFC 80D4              SJMP    ?C0011?YC_UTILITIES
   32: 	return;
   33: }
002EFE         ?C0013?YC_UTILITIES:
002EFE 22                RET     
----- FUNCTION _cmemcpy (END) -------


----- FUNCTION _YC_MemCheckEmpty (BEGIN) -----
 FILE: 'YC_Utilities.c'
   34: bool YC_MemCheckEmpty(u8_t *mem, u8_t len)
   35: {
002EFF 904E48            MOV     DPTR,#mem
002F02 EB                MOV     A,R3
002F03 F0                MOVX    @DPTR,A
002F04 A3                INC     DPTR
002F05 EA                MOV     A,R2
002F06 F0                MOVX    @DPTR,A
002F07 A3                INC     DPTR
002F08 E9                MOV     A,R1
002F09 F0                MOVX    @DPTR,A
002F0A A3                INC     DPTR
002F0B ED                MOV     A,R5
002F0C F0                MOVX    @DPTR,A
   36: 	int i;
   37: 	for(i=0;i<len;i++)
;---- Variable 'i' assigned to Register 'R6/R7' ----
002F0D E4                CLR     A
002F0E FF                MOV     R7,A
002F0F FE                MOV     R6,A
002F10         ?C0014?YC_UTILITIES:
002F10 904E4B            MOV     DPTR,#len
002F13 E0                MOVX    A,@DPTR
002F14 FD                MOV     R5,A
002F15 C3                CLR     C
002F16 EF                MOV     A,R7
002F17 9D                SUBB    A,R5
002F18 7480              MOV     A,#080H
002F1A F8                MOV     R0,A
002F1B 6E                XRL     A,R6
002F1C 98                SUBB    A,R0
002F1D 5034              JNC     ?C0015?YC_UTILITIES
   38: 	{
   39: 		if(mem[i])
002F1F 904E48            MOV     DPTR,#mem
002F22 E0                MOVX    A,@DPTR
002F23 FB                MOV     R3,A
002F24 A3                INC     DPTR
002F25 E0                MOVX    A,@DPTR
002F26 FA                MOV     R2,A
002F27 A3                INC     DPTR
002F28 E0                MOVX    A,@DPTR
002F29 F9                MOV     R1,A
002F2A 8F82              MOV     DPL,R7
002F2C 8E83              MOV     DPH,R6
002F2E 120112            LCALL   ?C?CLDOPTR
002F31 FD                MOV     R5,A
002F32 701F              JNZ     ?C0015?YC_UTILITIES
   40: 		{
   41: 			break;
   42: 		}
002F34         ?C0017?YC_UTILITIES:
   43: 		if(i==(len-1)&&mem[i]==0)
002F34 904E4B            MOV     DPTR,#len
002F37 E0                MOVX    A,@DPTR
002F38 24FF              ADD     A,#0FFH
002F3A FB                MOV     R3,A
002F3B E4                CLR     A
002F3C 34FF              ADDC    A,#0FFH
002F3E FA                MOV     R2,A
002F3F EB                MOV     A,R3
002F40 B50709            CJNE    A,AR7,?C0016?YC_UTILITIES
002F43 EA                MOV     A,R2
002F44 B50605            CJNE    A,AR6,?C0016?YC_UTILITIES
002F47 ED                MOV     A,R5
002F48 7002              JNZ     ?C0016?YC_UTILITIES
   44: 		{
   45: 			return 0;
002F4A C3                CLR     C
002F4B 22                RET     
   46: 		}
   47: 	}
002F4C         ?C0016?YC_UTILITIES:
002F4C 0F                INC     R7
002F4D BF0001            CJNE    R7,#00H,?C0052?YC_UTILITIES
002F50 0E                INC     R6
002F51         ?C0052?YC_UTILITIES:
002F51 80BD              SJMP    ?C0014?YC_UTILITIES
002F53         ?C0015?YC_UTILITIES:
   48: 	return 1;
002F53 D3                SETB    C
   49: }
002F54 22                RET     
----- FUNCTION _YC_MemCheckEmpty (END) -------


----- FUNCTION _YC_Delay1S (BEGIN) -----
 FILE: 'YC_Utilities.c'
   69: void YC_Delay1S(u8_t Time)
   70: {
;---- Variable 'Time' assigned to Register 'R7' ----
   71: 	u16_t j,k;
   72: 	for(;Time>0;Time--)
002F55         ?C0034?YC_UTILITIES:
002F55 EF                MOV     A,R7
002F56 D3                SETB    C
002F57 9400              SUBB    A,#00H
002F59 401F              JC      ?C0043?YC_UTILITIES
   73: 	{
   74: 		for(j=0;j<1000;j++)
;---- Variable 'j' assigned to Register 'R4/R5' ----
002F5B E4                CLR     A
002F5C FD                MOV     R5,A
002F5D FC                MOV     R4,A
002F5E         ?C0037?YC_UTILITIES:
   75: 		{
   76: 			for(k=0;k<1150;k++);
;---- Variable 'k' assigned to Register 'R2/R3' ----
002F5E E4                CLR     A
002F5F FB                MOV     R3,A
002F60 FA                MOV     R2,A
002F61         ?C0040?YC_UTILITIES:
002F61 0B                INC     R3
002F62 BB0001            CJNE    R3,#00H,?C0055?YC_UTILITIES
002F65 0A                INC     R2
002F66         ?C0055?YC_UTILITIES:
002F66 BA04F8            CJNE    R2,#04H,?C0040?YC_UTILITIES
002F69 BB7EF5            CJNE    R3,#07EH,?C0040?YC_UTILITIES
   77: 		}
002F6C         ?C0039?YC_UTILITIES:
002F6C 0D                INC     R5
002F6D BD0001            CJNE    R5,#00H,?C0056?YC_UTILITIES
002F70 0C                INC     R4
002F71         ?C0056?YC_UTILITIES:
002F71 BC03EA            CJNE    R4,#03H,?C0037?YC_UTILITIES
002F74 BDE8E7            CJNE    R5,#0E8H,?C0037?YC_UTILITIES
   78: 	}
002F77         ?C0036?YC_UTILITIES:
002F77 1F                DEC     R7
002F78 80DB              SJMP    ?C0034?YC_UTILITIES
   79: }
002F7A         ?C0043?YC_UTILITIES:
002F7A 22                RET     
----- FUNCTION _YC_Delay1S (END) -------


----- FUNCTION _CS_Scale_GetDeltaAD (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  215: u16_t CS_Scale_GetDeltaAD(u8_t option)
  216: {
002F7B 904E56            MOV     DPTR,#option
002F7E EF                MOV     A,R7
002F7F F0                MOVX    @DPTR,A
  217: 	static       u8_t xdata B_Weight_Pos;				//正负AD变化标志
  218: 	u16_t	ad_temp;
  219: 	u16_t      R_AD_Zero;
  220: 	R_AD_Zero = CS_Scale_ZeroProc(GetRunningZero,0);
002F80 E4                CLR     A
002F81 FD                MOV     R5,A
002F82 FC                MOV     R4,A
002F83 7F01              MOV     R7,#01H
002F85 1233BE            LCALL   _CS_Scale_ZeroProc
;---- Variable 'R_AD_Zero' assigned to Register 'R6/R7' ----
  221: 	if(R_AD_Original>R_AD_Zero)
002F88 904CD8            MOV     DPTR,#R_AD_Original
002F8B E0                MOVX    A,@DPTR
002F8C FC                MOV     R4,A
002F8D A3                INC     DPTR
002F8E E0                MOVX    A,@DPTR
002F8F FD                MOV     R5,A
002F90 D3                SETB    C
002F91 9F                SUBB    A,R7
002F92 EC                MOV     A,R4
002F93 9E                SUBB    A,R6
002F94 4014              JC      ?C0013?CS_SCALE_PROC
  222: 		{
  223: 		ad_temp = R_AD_Original - R_AD_Zero;
002F96 ED                MOV     A,R5
002F97 9F                SUBB    A,R7
002F98 FF                MOV     R7,A
002F99 EC                MOV     A,R4
002F9A 9E                SUBB    A,R6
002F9B 904E57            MOV     DPTR,#ad_temp
002F9E F0                MOVX    @DPTR,A
002F9F A3                INC     DPTR
002FA0 EF                MOV     A,R7
002FA1 F0                MOVX    @DPTR,A
  224: 		B_Weight_Pos = true;
002FA2 904C80            MOV     DPTR,#B_Weight_Pos
002FA5 7401              MOV     A,#01H
002FA7 F0                MOVX    @DPTR,A
  225: 
  226: 		}
002FA8 801A              SJMP    ?C0014?CS_SCALE_PROC
002FAA         ?C0013?CS_SCALE_PROC:
  227: 	else
  228: 		{
  229: 		ad_temp = R_AD_Zero - R_AD_Original;
002FAA 904CD8            MOV     DPTR,#R_AD_Original
002FAD E0                MOVX    A,@DPTR
002FAE FC                MOV     R4,A
002FAF A3                INC     DPTR
002FB0 E0                MOVX    A,@DPTR
002FB1 FD                MOV     R5,A
002FB2 C3                CLR     C
002FB3 EF                MOV     A,R7
002FB4 9D                SUBB    A,R5
002FB5 FF                MOV     R7,A
002FB6 EE                MOV     A,R6
002FB7 9C                SUBB    A,R4
002FB8 904E57            MOV     DPTR,#ad_temp
002FBB F0                MOVX    @DPTR,A
002FBC A3                INC     DPTR
002FBD EF                MOV     A,R7
002FBE F0                MOVX    @DPTR,A
  230: 		B_Weight_Pos = false;		
002FBF E4                CLR     A
002FC0 904C80            MOV     DPTR,#B_Weight_Pos
002FC3 F0                MOVX    @DPTR,A
  231: 		}
002FC4         ?C0014?CS_SCALE_PROC:
  232: 
  233: 	
  234: 	if(option == GetADDirection)
002FC4 904E56            MOV     DPTR,#option
002FC7 E0                MOVX    A,@DPTR
002FC8 B40108            CJNE    A,#01H,?C0015?CS_SCALE_PROC
  235: 		{
  236: 		return	B_Weight_Pos;
002FCB 904C80            MOV     DPTR,#B_Weight_Pos
002FCE E0                MOVX    A,@DPTR
002FCF FF                MOV     R7,A
002FD0 7E00              MOV     R6,#00H
002FD2 22                RET     
  237: 		}	
002FD3         ?C0015?CS_SCALE_PROC:
  238: 	return ad_temp;
002FD3 904E57            MOV     DPTR,#ad_temp
002FD6 E0                MOVX    A,@DPTR
002FD7 FE                MOV     R6,A
002FD8 A3                INC     DPTR
002FD9 E0                MOVX    A,@DPTR
002FDA FF                MOV     R7,A
  239: }
002FDB 22                RET     
----- FUNCTION _CS_Scale_GetDeltaAD (END) -------


----- FUNCTION _CS_Scale_AdcFilter (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  244: u16_t CS_Scale_AdcFilter(u8_t option,u16_t R_AD_BUF)
  245: {
002FDC 904E1B            MOV     DPTR,#R_AD_BUF
002FDF EC                MOV     A,R4
002FE0 F0                MOVX    @DPTR,A
002FE1 A3                INC     DPTR
002FE2 ED                MOV     A,R5
002FE3 F0                MOVX    @DPTR,A
002FE4 904E1A            MOV     DPTR,#option
002FE7 EF                MOV     A,R7
002FE8 F0                MOVX    @DPTR,A
  246: 	u32_t	ad_temp;
  247: 	static	u16_t xdata R_AD_FilTimes;
  248: 	static	u16_t xdata R_AD_BUF_OLD;
  249: 	static	u16_t xdata R_AD_F1;
  250: 	static	u16_t xdata R_AD_F2;
  251: 	static	u16_t xdata R_AD_F3;
  252: 	static	u16_t xdata R_AD_F4;
  253: 	static	u16_t xdata R_AD_F5;
  254: 	static	u16_t xdata R_AD_F6;
  255: 	static	u16_t xdata R_AD_F7;
  256: 	static	u16_t xdata R_AD_F8;	
  257: 		
  258: 	if(option==ScaleAdcFilterGetFilTimes)
002FE9 BF0209            CJNE    R7,#02H,?C0017?CS_SCALE_PROC
  259: 		{
  260: 		return  R_AD_FilTimes;
002FEC 904C81            MOV     DPTR,#R_AD_FilTimes
002FEF E0                MOVX    A,@DPTR
002FF0 FE                MOV     R6,A
002FF1 A3                INC     DPTR
002FF2 E0                MOVX    A,@DPTR
002FF3 FF                MOV     R7,A
002FF4 22                RET     
  261: 		}
002FF5         ?C0017?CS_SCALE_PROC:
  262: 	
  263: 	
  264: 	if(R_AD_BUF >R_AD_BUF_OLD)
002FF5 904C83            MOV     DPTR,#R_AD_BUF_OLD
002FF8 E0                MOVX    A,@DPTR
002FF9 FE                MOV     R6,A
002FFA A3                INC     DPTR
002FFB E0                MOVX    A,@DPTR
002FFC FF                MOV     R7,A
002FFD 904E1B            MOV     DPTR,#R_AD_BUF
003000 E0                MOVX    A,@DPTR
003001 FC                MOV     R4,A
003002 A3                INC     DPTR
003003 E0                MOVX    A,@DPTR
003004 FD                MOV     R5,A
003005 D3                SETB    C
003006 9F                SUBB    A,R7
003007 EC                MOV     A,R4
003008 9E                SUBB    A,R6
003009 4017              JC      ?C0019?CS_SCALE_PROC
  265: 		ad_temp = R_AD_BUF - R_AD_BUF_OLD;
00300B 904C83            MOV     DPTR,#R_AD_BUF_OLD
00300E E0                MOVX    A,@DPTR
00300F A3                INC     DPTR
003010 E0                MOVX    A,@DPTR
003011 ED                MOV     A,R5
003012 9F                SUBB    A,R7
003013 FF                MOV     R7,A
003014 EC                MOV     A,R4
003015 9E                SUBB    A,R6
003016 FE                MOV     R6,A
003017 E4                CLR     A
003018 FC                MOV     R4,A
003019 FD                MOV     R5,A
00301A 904E1D            MOV     DPTR,#ad_temp
00301D 120332            LCALL   ?C?LSTXDATA
003020 801E              SJMP    ?C0020?CS_SCALE_PROC
003022         ?C0019?CS_SCALE_PROC:
  266: 	else
  267: 		ad_temp = R_AD_BUF_OLD - R_AD_BUF;
003022 904E1B            MOV     DPTR,#R_AD_BUF
003025 E0                MOVX    A,@DPTR
003026 FE                MOV     R6,A
003027 A3                INC     DPTR
003028 E0                MOVX    A,@DPTR
003029 FF                MOV     R7,A
00302A C3                CLR     C
00302B 904C84            MOV     DPTR,#R_AD_BUF_OLD+01H
00302E E0                MOVX    A,@DPTR
00302F 9F                SUBB    A,R7
003030 FF                MOV     R7,A
003031 904C83            MOV     DPTR,#R_AD_BUF_OLD
003034 E0                MOVX    A,@DPTR
003035 9E                SUBB    A,R6
003036 FE                MOV     R6,A
003037 E4                CLR     A
003038 FC                MOV     R4,A
003039 FD                MOV     R5,A
00303A 904E1D            MOV     DPTR,#ad_temp
00303D 120332            LCALL   ?C?LSTXDATA
003040         ?C0020?CS_SCALE_PROC:
  268: 
  269: 	R_AD_BUF_OLD	=	R_AD_BUF;
003040 904E1B            MOV     DPTR,#R_AD_BUF
003043 E0                MOVX    A,@DPTR
003044 FF                MOV     R7,A
003045 A3                INC     DPTR
003046 E0                MOVX    A,@DPTR
003047 904C83            MOV     DPTR,#R_AD_BUF_OLD
00304A CF                XCH     A,R7
00304B F0                MOVX    @DPTR,A
00304C A3                INC     DPTR
00304D EF                MOV     A,R7
00304E F0                MOVX    @DPTR,A
  270: 	
  271: 	if((ad_temp > CS_Scale_FiterX) ||(option==ScaleAdcFilterReset))	
00304F E4                CLR     A
003050 7F05              MOV     R7,#05H
003052 FE                MOV     R6,A
003053 FD                MOV     R5,A
003054 FC                MOV     R4,A
003055 904E1D            MOV     DPTR,#ad_temp
003058 E0                MOVX    A,@DPTR
003059 F8                MOV     R0,A
00305A A3                INC     DPTR
00305B E0                MOVX    A,@DPTR
00305C F9                MOV     R1,A
00305D A3                INC     DPTR
00305E E0                MOVX    A,@DPTR
00305F FA                MOV     R2,A
003060 A3                INC     DPTR
003061 E0                MOVX    A,@DPTR
003062 FB                MOV     R3,A
003063 D3                SETB    C
003064 1202FB            LCALL   ?C?ULCMP
003067 5007              JNC     ?C0022?CS_SCALE_PROC
003069 904E1A            MOV     DPTR,#option
00306C E0                MOVX    A,@DPTR
00306D B4012B            CJNE    A,#01H,?C0021?CS_SCALE_PROC
003070         ?C0022?CS_SCALE_PROC:
  272: 		{						
  273: 		R_AD_FilTimes = 0;
003070 E4                CLR     A
003071 904C81            MOV     DPTR,#R_AD_FilTimes
003074 F0                MOVX    @DPTR,A
003075 A3                INC     DPTR
003076 F0                MOVX    @DPTR,A
  274: 		R_AD_F1 	    = 0;
003077 904C85            MOV     DPTR,#R_AD_F1
00307A F0                MOVX    @DPTR,A
00307B A3                INC     DPTR
00307C F0                MOVX    @DPTR,A
  275: 		R_AD_F2 	    = 0;
00307D A3                INC     DPTR
00307E F0                MOVX    @DPTR,A
00307F A3                INC     DPTR
003080 F0                MOVX    @DPTR,A
  276: 		R_AD_F3 	    = 0;
003081 A3                INC     DPTR
003082 F0                MOVX    @DPTR,A
003083 A3                INC     DPTR
003084 F0                MOVX    @DPTR,A
  277: 		R_AD_F4 	    = 0;
003085 A3                INC     DPTR
003086 F0                MOVX    @DPTR,A
003087 A3                INC     DPTR
003088 F0                MOVX    @DPTR,A
  278: 		R_AD_F5 	    = 0;
003089 A3                INC     DPTR
00308A F0                MOVX    @DPTR,A
00308B A3                INC     DPTR
00308C F0                MOVX    @DPTR,A
  279: 		R_AD_F6 	    = 0;
00308D A3                INC     DPTR
00308E F0                MOVX    @DPTR,A
00308F A3                INC     DPTR
003090 F0                MOVX    @DPTR,A
  280: 		R_AD_F7 	    = 0;
003091 A3                INC     DPTR
003092 F0                MOVX    @DPTR,A
003093 A3                INC     DPTR
003094 F0                MOVX    @DPTR,A
  281: 		R_AD_F8 	    = 0;
003095 A3                INC     DPTR
003096 F0                MOVX    @DPTR,A
003097 A3                INC     DPTR
003098 F0                MOVX    @DPTR,A
  282: 		}
003099 6183              AJMP    ?C0023?CS_SCALE_PROC
00309B         ?C0021?CS_SCALE_PROC:
  283: 	else
  284: 		{
  285: 		if(R_AD_FilTimes < 200 )
00309B C3                CLR     C
00309C 904C82            MOV     DPTR,#R_AD_FilTimes+01H
00309F E0                MOVX    A,@DPTR
0030A0 94C8              SUBB    A,#0C8H
0030A2 904C81            MOV     DPTR,#R_AD_FilTimes
0030A5 E0                MOVX    A,@DPTR
0030A6 9400              SUBB    A,#00H
0030A8 500C              JNC     ?C0024?CS_SCALE_PROC
  286: 		R_AD_FilTimes ++;	
0030AA A3                INC     DPTR
0030AB E0                MOVX    A,@DPTR
0030AC 04                INC     A
0030AD F0                MOVX    @DPTR,A
0030AE 7006              JNZ     ?C0233?CS_SCALE_PROC
0030B0 904C81            MOV     DPTR,#R_AD_FilTimes
0030B3 E0                MOVX    A,@DPTR
0030B4 04                INC     A
0030B5 F0                MOVX    @DPTR,A
0030B6         ?C0233?CS_SCALE_PROC:
0030B6         ?C0024?CS_SCALE_PROC:
  287: 
  288: 			if(R_AD_FilTimes<=1)
0030B6 904C81            MOV     DPTR,#R_AD_FilTimes
0030B9 E0                MOVX    A,@DPTR
0030BA FE                MOV     R6,A
0030BB A3                INC     DPTR
0030BC E0                MOVX    A,@DPTR
0030BD FF                MOV     R7,A
0030BE D3                SETB    C
0030BF 9401              SUBB    A,#01H
0030C1 EE                MOV     A,R6
0030C2 9400              SUBB    A,#00H
0030C4 500F              JNC     ?C0025?CS_SCALE_PROC
  289: 				R_AD_F1 = R_AD_BUF;	
0030C6 904E1B            MOV     DPTR,#R_AD_BUF
0030C9 E0                MOVX    A,@DPTR
0030CA FD                MOV     R5,A
0030CB A3                INC     DPTR
0030CC E0                MOVX    A,@DPTR
0030CD 904C85            MOV     DPTR,#R_AD_F1
0030D0 CD                XCH     A,R5
0030D1 F0                MOVX    @DPTR,A
0030D2 A3                INC     DPTR
0030D3 ED                MOV     A,R5
0030D4 F0                MOVX    @DPTR,A
0030D5         ?C0025?CS_SCALE_PROC:
  290: 			if(R_AD_FilTimes<=2)
0030D5 D3                SETB    C
0030D6 EF                MOV     A,R7
0030D7 9402              SUBB    A,#02H
0030D9 EE                MOV     A,R6
0030DA 9400              SUBB    A,#00H
0030DC 500F              JNC     ?C0026?CS_SCALE_PROC
  291: 				R_AD_F2 = R_AD_BUF;
0030DE 904E1B            MOV     DPTR,#R_AD_BUF
0030E1 E0                MOVX    A,@DPTR
0030E2 FF                MOV     R7,A
0030E3 A3                INC     DPTR
0030E4 E0                MOVX    A,@DPTR
0030E5 904C87            MOV     DPTR,#R_AD_F2
0030E8 CF                XCH     A,R7
0030E9 F0                MOVX    @DPTR,A
0030EA A3                INC     DPTR
0030EB EF                MOV     A,R7
0030EC F0                MOVX    @DPTR,A
0030ED         ?C0026?CS_SCALE_PROC:
  292: 			if(R_AD_FilTimes<=3)
0030ED D3                SETB    C
0030EE 904C82            MOV     DPTR,#R_AD_FilTimes+01H
0030F1 E0                MOVX    A,@DPTR
0030F2 9403              SUBB    A,#03H
0030F4 904C81            MOV     DPTR,#R_AD_FilTimes
0030F7 E0                MOVX    A,@DPTR
0030F8 9400              SUBB    A,#00H
0030FA 500F              JNC     ?C0027?CS_SCALE_PROC
  293: 				R_AD_F3 = R_AD_BUF;
0030FC 904E1B            MOV     DPTR,#R_AD_BUF
0030FF E0                MOVX    A,@DPTR
003100 FF                MOV     R7,A
003101 A3                INC     DPTR
003102 E0                MOVX    A,@DPTR
003103 904C89            MOV     DPTR,#R_AD_F3
003106 CF                XCH     A,R7
003107 F0                MOVX    @DPTR,A
003108 A3                INC     DPTR
003109 EF                MOV     A,R7
00310A F0                MOVX    @DPTR,A
00310B         ?C0027?CS_SCALE_PROC:
  294: 			if(R_AD_FilTimes<=4)
00310B 904C81            MOV     DPTR,#R_AD_FilTimes
00310E E0                MOVX    A,@DPTR
00310F FE                MOV     R6,A
003110 A3                INC     DPTR
003111 E0                MOVX    A,@DPTR
003112 FF                MOV     R7,A
003113 D3                SETB    C
003114 9404              SUBB    A,#04H
003116 EE                MOV     A,R6
003117 9400              SUBB    A,#00H
003119 500F              JNC     ?C0028?CS_SCALE_PROC
  295: 				R_AD_F4 = R_AD_BUF;
00311B 904E1B            MOV     DPTR,#R_AD_BUF
00311E E0                MOVX    A,@DPTR
00311F FD                MOV     R5,A
003120 A3                INC     DPTR
003121 E0                MOVX    A,@DPTR
003122 904C8B            MOV     DPTR,#R_AD_F4
003125 CD                XCH     A,R5
003126 F0                MOVX    @DPTR,A
003127 A3                INC     DPTR
003128 ED                MOV     A,R5
003129 F0                MOVX    @DPTR,A
00312A         ?C0028?CS_SCALE_PROC:
  296: 			if(R_AD_FilTimes<=5)
00312A D3                SETB    C
00312B EF                MOV     A,R7
00312C 9405              SUBB    A,#05H
00312E EE                MOV     A,R6
00312F 9400              SUBB    A,#00H
003131 500F              JNC     ?C0029?CS_SCALE_PROC
  297: 				R_AD_F5 = R_AD_BUF;
003133 904E1B            MOV     DPTR,#R_AD_BUF
003136 E0                MOVX    A,@DPTR
003137 FF                MOV     R7,A
003138 A3                INC     DPTR
003139 E0                MOVX    A,@DPTR
00313A 904C8D            MOV     DPTR,#R_AD_F5
00313D CF                XCH     A,R7
00313E F0                MOVX    @DPTR,A
00313F A3                INC     DPTR
003140 EF                MOV     A,R7
003141 F0                MOVX    @DPTR,A
003142         ?C0029?CS_SCALE_PROC:
  298: 			if(R_AD_FilTimes<=6)
003142 D3                SETB    C
003143 904C82            MOV     DPTR,#R_AD_FilTimes+01H
003146 E0                MOVX    A,@DPTR
003147 9406              SUBB    A,#06H
003149 904C81            MOV     DPTR,#R_AD_FilTimes
00314C E0                MOVX    A,@DPTR
00314D 9400              SUBB    A,#00H
00314F 500F              JNC     ?C0030?CS_SCALE_PROC
  299: 				R_AD_F6 = R_AD_BUF;
003151 904E1B            MOV     DPTR,#R_AD_BUF
003154 E0                MOVX    A,@DPTR
003155 FF                MOV     R7,A
003156 A3                INC     DPTR
003157 E0                MOVX    A,@DPTR
003158 904C8F            MOV     DPTR,#R_AD_F6
00315B CF                XCH     A,R7
00315C F0                MOVX    @DPTR,A
00315D A3                INC     DPTR
00315E EF                MOV     A,R7
00315F F0                MOVX    @DPTR,A
003160         ?C0030?CS_SCALE_PROC:
  300: 			if(R_AD_FilTimes<=7)
003160 904C81            MOV     DPTR,#R_AD_FilTimes
003163 E0                MOVX    A,@DPTR
003164 FE                MOV     R6,A
003165 A3                INC     DPTR
003166 E0                MOVX    A,@DPTR
003167 FF                MOV     R7,A
003168 D3                SETB    C
003169 9407              SUBB    A,#07H
00316B EE                MOV     A,R6
00316C 9400              SUBB    A,#00H
00316E 500F              JNC     ?C0031?CS_SCALE_PROC
  301: 				R_AD_F7 = R_AD_BUF;
003170 904E1B            MOV     DPTR,#R_AD_BUF
003173 E0                MOVX    A,@DPTR
003174 FD                MOV     R5,A
003175 A3                INC     DPTR
003176 E0                MOVX    A,@DPTR
003177 904C91            MOV     DPTR,#R_AD_F7
00317A CD                XCH     A,R5
00317B F0                MOVX    @DPTR,A
00317C A3                INC     DPTR
00317D ED                MOV     A,R5
00317E F0                MOVX    @DPTR,A
00317F         ?C0031?CS_SCALE_PROC:
  302: 			if(R_AD_FilTimes<=8)
00317F D3                SETB    C
003180 EF                MOV     A,R7
003181 9408              SUBB    A,#08H
003183 EE                MOV     A,R6
003184 9400              SUBB    A,#00H
003186 500F              JNC     ?C0032?CS_SCALE_PROC
  303: 				R_AD_F8 = R_AD_BUF;
003188 904E1B            MOV     DPTR,#R_AD_BUF
00318B E0                MOVX    A,@DPTR
00318C FF                MOV     R7,A
00318D A3                INC     DPTR
00318E E0                MOVX    A,@DPTR
00318F 904C93            MOV     DPTR,#R_AD_F8
003192 CF                XCH     A,R7
003193 F0                MOVX    @DPTR,A
003194 A3                INC     DPTR
003195 EF                MOV     A,R7
003196 F0                MOVX    @DPTR,A
003197         ?C0032?CS_SCALE_PROC:
  304: 			if(R_AD_FilTimes>8)
003197 D3                SETB    C
003198 904C82            MOV     DPTR,#R_AD_FilTimes+01H
00319B E0                MOVX    A,@DPTR
00319C 9408              SUBB    A,#08H
00319E 904C81            MOV     DPTR,#R_AD_FilTimes
0031A1 E0                MOVX    A,@DPTR
0031A2 9400              SUBB    A,#00H
0031A4 4078              JC      ?C0033?CS_SCALE_PROC
  305: 				{
  306: 				R_AD_F1 = R_AD_F2;
0031A6 904C87            MOV     DPTR,#R_AD_F2
0031A9 E0                MOVX    A,@DPTR
0031AA FF                MOV     R7,A
0031AB A3                INC     DPTR
0031AC E0                MOVX    A,@DPTR
0031AD 904C85            MOV     DPTR,#R_AD_F1
0031B0 CF                XCH     A,R7
0031B1 F0                MOVX    @DPTR,A
0031B2 A3                INC     DPTR
0031B3 EF                MOV     A,R7
0031B4 F0                MOVX    @DPTR,A
  307: 				R_AD_F2 = R_AD_F3;
0031B5 904C89            MOV     DPTR,#R_AD_F3
0031B8 E0                MOVX    A,@DPTR
0031B9 FF                MOV     R7,A
0031BA A3                INC     DPTR
0031BB E0                MOVX    A,@DPTR
0031BC 904C87            MOV     DPTR,#R_AD_F2
0031BF CF                XCH     A,R7
0031C0 F0                MOVX    @DPTR,A
0031C1 A3                INC     DPTR
0031C2 EF                MOV     A,R7
0031C3 F0                MOVX    @DPTR,A
  308: 				R_AD_F3 = R_AD_F4;
0031C4 904C8B            MOV     DPTR,#R_AD_F4
0031C7 E0                MOVX    A,@DPTR
0031C8 FF                MOV     R7,A
0031C9 A3                INC     DPTR
0031CA E0                MOVX    A,@DPTR
0031CB 904C89            MOV     DPTR,#R_AD_F3
0031CE CF                XCH     A,R7
0031CF F0                MOVX    @DPTR,A
0031D0 A3                INC     DPTR
0031D1 EF                MOV     A,R7
0031D2 F0                MOVX    @DPTR,A
  309: 				R_AD_F4 = R_AD_F5;
0031D3 904C8D            MOV     DPTR,#R_AD_F5
0031D6 E0                MOVX    A,@DPTR
0031D7 FF                MOV     R7,A
0031D8 A3                INC     DPTR
0031D9 E0                MOVX    A,@DPTR
0031DA 904C8B            MOV     DPTR,#R_AD_F4
0031DD CF                XCH     A,R7
0031DE F0                MOVX    @DPTR,A
0031DF A3                INC     DPTR
0031E0 EF                MOV     A,R7
0031E1 F0                MOVX    @DPTR,A
  310: 				R_AD_F5 = R_AD_F6;
0031E2 904C8F            MOV     DPTR,#R_AD_F6
0031E5 E0                MOVX    A,@DPTR
0031E6 FF                MOV     R7,A
0031E7 A3                INC     DPTR
0031E8 E0                MOVX    A,@DPTR
0031E9 904C8D            MOV     DPTR,#R_AD_F5
0031EC CF                XCH     A,R7
0031ED F0                MOVX    @DPTR,A
0031EE A3                INC     DPTR
0031EF EF                MOV     A,R7
0031F0 F0                MOVX    @DPTR,A
  311: 				R_AD_F6 = R_AD_F7;
0031F1 904C91            MOV     DPTR,#R_AD_F7
0031F4 E0                MOVX    A,@DPTR
0031F5 FF                MOV     R7,A
0031F6 A3                INC     DPTR
0031F7 E0                MOVX    A,@DPTR
0031F8 904C8F            MOV     DPTR,#R_AD_F6
0031FB CF                XCH     A,R7
0031FC F0                MOVX    @DPTR,A
0031FD A3                INC     DPTR
0031FE EF                MOV     A,R7
0031FF F0                MOVX    @DPTR,A
  312: 				R_AD_F7 = R_AD_F8;
003200 904C93            MOV     DPTR,#R_AD_F8
003203 E0                MOVX    A,@DPTR
003204 FF                MOV     R7,A
003205 A3                INC     DPTR
003206 E0                MOVX    A,@DPTR
003207 904C91            MOV     DPTR,#R_AD_F7
00320A CF                XCH     A,R7
00320B F0                MOVX    @DPTR,A
00320C A3                INC     DPTR
00320D EF                MOV     A,R7
00320E F0                MOVX    @DPTR,A
  313: 				R_AD_F8 = R_AD_BUF;
00320F 904E1B            MOV     DPTR,#R_AD_BUF
003212 E0                MOVX    A,@DPTR
003213 FF                MOV     R7,A
003214 A3                INC     DPTR
003215 E0                MOVX    A,@DPTR
003216 904C93            MOV     DPTR,#R_AD_F8
003219 CF                XCH     A,R7
00321A F0                MOVX    @DPTR,A
00321B A3                INC     DPTR
00321C EF                MOV     A,R7
00321D F0                MOVX    @DPTR,A
  314: 				}
00321E         ?C0033?CS_SCALE_PROC:
  315: 
  316: 		ad_temp	= R_AD_F1;
00321E 904C85            MOV     DPTR,#R_AD_F1
003221 E0                MOVX    A,@DPTR
003222 FE                MOV     R6,A
003223 A3                INC     DPTR
003224 E0                MOVX    A,@DPTR
003225 FF                MOV     R7,A
003226 E4                CLR     A
003227 FC                MOV     R4,A
003228 FD                MOV     R5,A
003229 904E1D            MOV     DPTR,#ad_temp
00322C 120332            LCALL   ?C?LSTXDATA
  317: 		ad_temp	+= R_AD_F2;
00322F 904E1D            MOV     DPTR,#ad_temp
003232 E0                MOVX    A,@DPTR
003233 F8                MOV     R0,A
003234 A3                INC     DPTR
003235 E0                MOVX    A,@DPTR
003236 F9                MOV     R1,A
003237 A3                INC     DPTR
003238 E0                MOVX    A,@DPTR
003239 FA                MOV     R2,A
00323A A3                INC     DPTR
00323B E0                MOVX    A,@DPTR
00323C FB                MOV     R3,A
00323D 904C87            MOV     DPTR,#R_AD_F2
003240 E0                MOVX    A,@DPTR
003241 FE                MOV     R6,A
003242 A3                INC     DPTR
003243 E0                MOVX    A,@DPTR
003244 FF                MOV     R7,A
003245 E4                CLR     A
003246 FC                MOV     R4,A
003247 FD                MOV     R5,A
003248 EB                MOV     A,R3
003249 2F                ADD     A,R7
00324A FF                MOV     R7,A
00324B EA                MOV     A,R2
00324C 3E                ADDC    A,R6
00324D FE                MOV     R6,A
00324E ED                MOV     A,R5
00324F 39                ADDC    A,R1
003250 FD                MOV     R5,A
003251 EC                MOV     A,R4
003252 38                ADDC    A,R0
003253 FC                MOV     R4,A
003254 904E1D            MOV     DPTR,#ad_temp
003257 120332            LCALL   ?C?LSTXDATA
  318: 		ad_temp	+= R_AD_F3;
00325A 904E1D            MOV     DPTR,#ad_temp
00325D E0                MOVX    A,@DPTR
00325E F8                MOV     R0,A
00325F A3                INC     DPTR
003260 E0                MOVX    A,@DPTR
003261 F9                MOV     R1,A
003262 A3                INC     DPTR
003263 E0                MOVX    A,@DPTR
003264 FA                MOV     R2,A
003265 A3                INC     DPTR
003266 E0                MOVX    A,@DPTR
003267 FB                MOV     R3,A
003268 904C89            MOV     DPTR,#R_AD_F3
00326B E0                MOVX    A,@DPTR
00326C FE                MOV     R6,A
00326D A3                INC     DPTR
00326E E0                MOVX    A,@DPTR
00326F FF                MOV     R7,A
003270 E4                CLR     A
003271 FC                MOV     R4,A
003272 FD                MOV     R5,A
003273 EB                MOV     A,R3
003274 2F                ADD     A,R7
003275 FF                MOV     R7,A
003276 EA                MOV     A,R2
003277 3E                ADDC    A,R6
003278 FE                MOV     R6,A
003279 ED                MOV     A,R5
00327A 39                ADDC    A,R1
00327B FD                MOV     R5,A
00327C EC                MOV     A,R4
00327D 38                ADDC    A,R0
00327E FC                MOV     R4,A
00327F 904E1D            MOV     DPTR,#ad_temp
003282 120332            LCALL   ?C?LSTXDATA
  319: 		ad_temp	+= R_AD_F4;
003285 904E1D            MOV     DPTR,#ad_temp
003288 E0                MOVX    A,@DPTR
003289 F8                MOV     R0,A
00328A A3                INC     DPTR
00328B E0                MOVX    A,@DPTR
00328C F9                MOV     R1,A
00328D A3                INC     DPTR
00328E E0                MOVX    A,@DPTR
00328F FA                MOV     R2,A
003290 A3                INC     DPTR
003291 E0                MOVX    A,@DPTR
003292 FB                MOV     R3,A
003293 904C8B            MOV     DPTR,#R_AD_F4
003296 E0                MOVX    A,@DPTR
003297 FE                MOV     R6,A
003298 A3                INC     DPTR
003299 E0                MOVX    A,@DPTR
00329A FF                MOV     R7,A
00329B E4                CLR     A
00329C FC                MOV     R4,A
00329D FD                MOV     R5,A
00329E EB                MOV     A,R3
00329F 2F                ADD     A,R7
0032A0 FF                MOV     R7,A
0032A1 EA                MOV     A,R2
0032A2 3E                ADDC    A,R6
0032A3 FE                MOV     R6,A
0032A4 ED                MOV     A,R5
0032A5 39                ADDC    A,R1
0032A6 FD                MOV     R5,A
0032A7 EC                MOV     A,R4
0032A8 38                ADDC    A,R0
0032A9 FC                MOV     R4,A
0032AA 904E1D            MOV     DPTR,#ad_temp
0032AD 120332            LCALL   ?C?LSTXDATA
  320: 		ad_temp	+= R_AD_F5;
0032B0 904E1D            MOV     DPTR,#ad_temp
0032B3 E0                MOVX    A,@DPTR
0032B4 F8                MOV     R0,A
0032B5 A3                INC     DPTR
0032B6 E0                MOVX    A,@DPTR
0032B7 F9                MOV     R1,A
0032B8 A3                INC     DPTR
0032B9 E0                MOVX    A,@DPTR
0032BA FA                MOV     R2,A
0032BB A3                INC     DPTR
0032BC E0                MOVX    A,@DPTR
0032BD FB                MOV     R3,A
0032BE 904C8D            MOV     DPTR,#R_AD_F5
0032C1 E0                MOVX    A,@DPTR
0032C2 FE                MOV     R6,A
0032C3 A3                INC     DPTR
0032C4 E0                MOVX    A,@DPTR
0032C5 FF                MOV     R7,A
0032C6 E4                CLR     A
0032C7 FC                MOV     R4,A
0032C8 FD                MOV     R5,A
0032C9 EB                MOV     A,R3
0032CA 2F                ADD     A,R7
0032CB FF                MOV     R7,A
0032CC EA                MOV     A,R2
0032CD 3E                ADDC    A,R6
0032CE FE                MOV     R6,A
0032CF ED                MOV     A,R5
0032D0 39                ADDC    A,R1
0032D1 FD                MOV     R5,A
0032D2 EC                MOV     A,R4
0032D3 38                ADDC    A,R0
0032D4 FC                MOV     R4,A
0032D5 904E1D            MOV     DPTR,#ad_temp
0032D8 120332            LCALL   ?C?LSTXDATA
  321: 		ad_temp	+= R_AD_F6;
0032DB 904E1D            MOV     DPTR,#ad_temp
0032DE E0                MOVX    A,@DPTR
0032DF F8                MOV     R0,A
0032E0 A3                INC     DPTR
0032E1 E0                MOVX    A,@DPTR
0032E2 F9                MOV     R1,A
0032E3 A3                INC     DPTR
0032E4 E0                MOVX    A,@DPTR
0032E5 FA                MOV     R2,A
0032E6 A3                INC     DPTR
0032E7 E0                MOVX    A,@DPTR
0032E8 FB                MOV     R3,A
0032E9 904C8F            MOV     DPTR,#R_AD_F6
0032EC E0                MOVX    A,@DPTR
0032ED FE                MOV     R6,A
0032EE A3                INC     DPTR
0032EF E0                MOVX    A,@DPTR
0032F0 FF                MOV     R7,A
0032F1 E4                CLR     A
0032F2 FC                MOV     R4,A
0032F3 FD                MOV     R5,A
0032F4 EB                MOV     A,R3
0032F5 2F                ADD     A,R7
0032F6 FF                MOV     R7,A
0032F7 EA                MOV     A,R2
0032F8 3E                ADDC    A,R6
0032F9 FE                MOV     R6,A
0032FA ED                MOV     A,R5
0032FB 39                ADDC    A,R1
0032FC FD                MOV     R5,A
0032FD EC                MOV     A,R4
0032FE 38                ADDC    A,R0
0032FF FC                MOV     R4,A
003300 904E1D            MOV     DPTR,#ad_temp
003303 120332            LCALL   ?C?LSTXDATA
  322: 		ad_temp	+= R_AD_F7;
003306 904E1D            MOV     DPTR,#ad_temp
003309 E0                MOVX    A,@DPTR
00330A F8                MOV     R0,A
00330B A3                INC     DPTR
00330C E0                MOVX    A,@DPTR
00330D F9                MOV     R1,A
00330E A3                INC     DPTR
00330F E0                MOVX    A,@DPTR
003310 FA                MOV     R2,A
003311 A3                INC     DPTR
003312 E0                MOVX    A,@DPTR
003313 FB                MOV     R3,A
003314 904C91            MOV     DPTR,#R_AD_F7
003317 E0                MOVX    A,@DPTR
003318 FE                MOV     R6,A
003319 A3                INC     DPTR
00331A E0                MOVX    A,@DPTR
00331B FF                MOV     R7,A
00331C E4                CLR     A
00331D FC                MOV     R4,A
00331E FD                MOV     R5,A
00331F EB                MOV     A,R3
003320 2F                ADD     A,R7
003321 FF                MOV     R7,A
003322 EA                MOV     A,R2
003323 3E                ADDC    A,R6
003324 FE                MOV     R6,A
003325 ED                MOV     A,R5
003326 39                ADDC    A,R1
003327 FD                MOV     R5,A
003328 EC                MOV     A,R4
003329 38                ADDC    A,R0
00332A FC                MOV     R4,A
00332B 904E1D            MOV     DPTR,#ad_temp
00332E 120332            LCALL   ?C?LSTXDATA
  323: 		ad_temp	+= R_AD_F8;
003331 904E1D            MOV     DPTR,#ad_temp
003334 E0                MOVX    A,@DPTR
003335 F8                MOV     R0,A
003336 A3                INC     DPTR
003337 E0                MOVX    A,@DPTR
003338 F9                MOV     R1,A
003339 A3                INC     DPTR
00333A E0                MOVX    A,@DPTR
00333B FA                MOV     R2,A
00333C A3                INC     DPTR
00333D E0                MOVX    A,@DPTR
00333E FB                MOV     R3,A
00333F 904C93            MOV     DPTR,#R_AD_F8
003342 E0                MOVX    A,@DPTR
003343 FE                MOV     R6,A
003344 A3                INC     DPTR
003345 E0                MOVX    A,@DPTR
003346 FF                MOV     R7,A
003347 E4                CLR     A
003348 FC                MOV     R4,A
003349 FD                MOV     R5,A
00334A EB                MOV     A,R3
00334B 2F                ADD     A,R7
00334C FF                MOV     R7,A
00334D EA                MOV     A,R2
00334E 3E                ADDC    A,R6
00334F FE                MOV     R6,A
003350 ED                MOV     A,R5
003351 39                ADDC    A,R1
003352 FD                MOV     R5,A
003353 EC                MOV     A,R4
003354 38                ADDC    A,R0
003355 FC                MOV     R4,A
003356 904E1D            MOV     DPTR,#ad_temp
003359 120332            LCALL   ?C?LSTXDATA
  324: 
  325: 		R_AD_BUF = ad_temp / 8 ;
00335C E4                CLR     A
00335D 7B08              MOV     R3,#08H
00335F FA                MOV     R2,A
003360 F9                MOV     R1,A
003361 F8                MOV     R0,A
003362 904E1D            MOV     DPTR,#ad_temp
003365 E0                MOVX    A,@DPTR
003366 FC                MOV     R4,A
003367 A3                INC     DPTR
003368 E0                MOVX    A,@DPTR
003369 FD                MOV     R5,A
00336A A3                INC     DPTR
00336B E0                MOVX    A,@DPTR
00336C FE                MOV     R6,A
00336D A3                INC     DPTR
00336E E0                MOVX    A,@DPTR
00336F FF                MOV     R7,A
003370 120269            LCALL   ?C?ULDIV
003373 904E1B            MOV     DPTR,#R_AD_BUF
003376 EE                MOV     A,R6
003377 F0                MOVX    @DPTR,A
003378 A3                INC     DPTR
003379 EF                MOV     A,R7
00337A F0                MOVX    @DPTR,A
  326: 		R_AD_BUF_OLD	=	R_AD_BUF;
00337B 904C83            MOV     DPTR,#R_AD_BUF_OLD
00337E EE                MOV     A,R6
00337F F0                MOVX    @DPTR,A
003380 A3                INC     DPTR
003381 EF                MOV     A,R7
003382 F0                MOVX    @DPTR,A
  327: 		}
003383         ?C0023?CS_SCALE_PROC:
  328: 	return	R_AD_BUF;
003383 904E1B            MOV     DPTR,#R_AD_BUF
003386 E0                MOVX    A,@DPTR
003387 FE                MOV     R6,A
003388 A3                INC     DPTR
003389 E0                MOVX    A,@DPTR
00338A FF                MOV     R7,A
  329: }
00338B 22                RET     
----- FUNCTION _CS_Scale_AdcFilter (END) -------


----- FUNCTION CS_Scale_ChangeUnit (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  367: void CS_Scale_ChangeUnit()
  368: {
  369: 	switch(R_Selet_Unit)
  370: 		{
00338C 904CC6            MOV     DPTR,#R_Selet_Unit
00338F E0                MOVX    A,@DPTR
003390 14                DEC     A
003391 6011              JZ      ?C0039?CS_SCALE_PROC
003393 14                DEC     A
003394 601C              JZ      ?C0041?CS_SCALE_PROC
003396 14                DEC     A
003397 6012              JZ      ?C0040?CS_SCALE_PROC
003399 2403              ADD     A,#03H
00339B 701B              JNZ     ?C0042?CS_SCALE_PROC
  371: 		case CS_ScaleDisplay_L_kg:
  372: 			R_Selet_Unit=CS_ScaleDisplay_L_lb;
00339D         ?C0038?CS_SCALE_PROC:
  373: 			break;
00339D 904CC6            MOV     DPTR,#R_Selet_Unit
0033A0 7401              MOV     A,#01H
0033A2 F0                MOVX    @DPTR,A
  374: 		case CS_ScaleDisplay_L_lb:
0033A3 22                RET     
  375: 			R_Selet_Unit=CS_ScaleDisplay_L_jin;
0033A4         ?C0039?CS_SCALE_PROC:
  376: 			break;
0033A4 904CC6            MOV     DPTR,#R_Selet_Unit
0033A7 7403              MOV     A,#03H
0033A9 F0                MOVX    @DPTR,A
  377: 		case CS_ScaleDisplay_L_jin:
0033AA 22                RET     
  378: 			R_Selet_Unit=CS_ScaleDisplay_L_gongjin;
0033AB         ?C0040?CS_SCALE_PROC:
  379: 			break;
0033AB 904CC6            MOV     DPTR,#R_Selet_Unit
0033AE 7402              MOV     A,#02H
0033B0 F0                MOVX    @DPTR,A
  380: 		case CS_ScaleDisplay_L_gongjin:
0033B1 22                RET     
  381: 			R_Selet_Unit=CS_ScaleDisplay_L_kg;
0033B2         ?C0041?CS_SCALE_PROC:
  382: 			break;
0033B2 E4                CLR     A
0033B3 904CC6            MOV     DPTR,#R_Selet_Unit
0033B6 F0                MOVX    @DPTR,A
  383: 		default :
0033B7 22                RET     
  384: 			R_Selet_Unit=CS_ScaleDisplay_L_kg;
0033B8         ?C0042?CS_SCALE_PROC:
  385: 			break;
0033B8 E4                CLR     A
0033B9 904CC6            MOV     DPTR,#R_Selet_Unit
0033BC F0                MOVX    @DPTR,A
  386: 		}
  387: }
  388: 
0033BD 22                RET     
----- FUNCTION CS_Scale_ChangeUnit (END) -------


----- FUNCTION _CS_Scale_ZeroProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  391: u16_t  CS_Scale_ZeroProc(u8_t option,u16_t setdata)
  392: {
;---- Variable 'setdata' assigned to Register 'R4/R5' ----
0033BE 904DFB            MOV     DPTR,#option
0033C1 EF                MOV     A,R7
0033C2 F0                MOVX    @DPTR,A
  393: 	static	u8_t	   xdata R_Weight_GetZeroTimeOut = 0;	
  394: 	static	u16_t  xdata R_AD_PowerOnZero;	//上电零点AD值
  395: 	static	u16_t  xdata R_AD_Zero;			//零点AD值
  396: 	static	u8_t    xdata B_Weight_Zero;		//处于零点标志
  397: 	static	u8_t    xdata B_Weight_ZeroOk;	//上电获取完零点标志
  398: 	static	u8_t	   xdata B_LockDownCheck;	//下秤后第一次稳定追零
  399: 	static	u8_t	   xdata B_WeightZeroErr;		//零点错误标志
  400: 	
  401: 	u16_t	R_AdFilTimes;
  402: 	u16_t	R_AD_BUF;
  403: 	u16_t	weight_temp;
  404: 	u16_t	R_Open_Weight;
  405: 	u8_t		B_Weight_Pos;
  406: 
  407: 	
  408: 	
  409: 	if(option==ZeroProcReset)
0033C3 BF0408            CJNE    R7,#04H,?C0044?CS_SCALE_PROC
  410: 		{
  411: 		B_Weight_ZeroOk = 0;
0033C6 E4                CLR     A
0033C7 904C9B            MOV     DPTR,#B_Weight_ZeroOk
0033CA F0                MOVX    @DPTR,A
  412: 		return 0;		
0033CB FE                MOV     R6,A
0033CC FF                MOV     R7,A
0033CD 22                RET     
  413: 		}
0033CE         ?C0044?CS_SCALE_PROC:
  414: 	if(option==SetPowerOnZero)
0033CE 904DFB            MOV     DPTR,#option
0033D1 E0                MOVX    A,@DPTR
0033D2 FB                MOV     R3,A
0033D3 B4050C            CJNE    A,#05H,?C0046?CS_SCALE_PROC
  415: 		{
  416: 		R_AD_PowerOnZero = setdata;
0033D6 904C96            MOV     DPTR,#R_AD_PowerOnZero
0033D9 EC                MOV     A,R4
0033DA F0                MOVX    @DPTR,A
0033DB A3                INC     DPTR
0033DC ED                MOV     A,R5
0033DD F0                MOVX    @DPTR,A
  417: 		return 0;		
0033DE E4                CLR     A
0033DF FE                MOV     R6,A
0033E0 FF                MOV     R7,A
0033E1 22                RET     
  418: 		}
0033E2         ?C0046?CS_SCALE_PROC:
  419: 	if(option==SetRunningZero)
0033E2 EB                MOV     A,R3
0033E3 B4060E            CJNE    A,#06H,?C0047?CS_SCALE_PROC
  420: 		{
  421: 		R_AD_Zero = setdata;
0033E6 AF05              MOV     R7,AR5
0033E8 904C98            MOV     DPTR,#R_AD_Zero
0033EB EC                MOV     A,R4
0033EC F0                MOVX    @DPTR,A
0033ED A3                INC     DPTR
0033EE EF                MOV     A,R7
0033EF F0                MOVX    @DPTR,A
  422: 		return 0;		
0033F0 E4                CLR     A
0033F1 FE                MOV     R6,A
0033F2 FF                MOV     R7,A
0033F3 22                RET     
  423: 		}
0033F4         ?C0047?CS_SCALE_PROC:
  424: 	if(option==ClrLockDownCheckFlag)
0033F4 904DFB            MOV     DPTR,#option
0033F7 E0                MOVX    A,@DPTR
0033F8 FD                MOV     R5,A
0033F9 B40808            CJNE    A,#08H,?C0048?CS_SCALE_PROC
  425: 		{
  426: 		B_LockDownCheck=false;
0033FC E4                CLR     A
0033FD 904C9C            MOV     DPTR,#B_LockDownCheck
003400 F0                MOVX    @DPTR,A
  427: 		return 0;
003401 FE                MOV     R6,A
003402 FF                MOV     R7,A
003403 22                RET     
  428: 		}
003404         ?C0048?CS_SCALE_PROC:
  429: 	
  430: 	if(option==FindPowerOnZero)
003404 ED                MOV     A,R5
003405 640A              XRL     A,#0AH
003407 7075              JNZ     ?C0049?CS_SCALE_PROC
  431: 	{
  432: 		
  433: 	
  434: 		if(R_Weight_GetZeroTimeOut <60)
003409 904C95            MOV     DPTR,#R_Weight_GetZeroTimeOut
00340C E0                MOVX    A,@DPTR
00340D C3                CLR     C
00340E 943C              SUBB    A,#03CH
003410 5052              JNC     ?C0050?CS_SCALE_PROC
  435: 		{
  436: 		R_Weight_GetZeroTimeOut ++;
003412 E0                MOVX    A,@DPTR
003413 04                INC     A
003414 F0                MOVX    @DPTR,A
  437: 		
  438: 		R_AD_BUF = R_AD_Original;
003415 904CD8            MOV     DPTR,#R_AD_Original
003418 E0                MOVX    A,@DPTR
003419 FE                MOV     R6,A
00341A A3                INC     DPTR
00341B E0                MOVX    A,@DPTR
00341C FF                MOV     R7,A
00341D 904DFC            MOV     DPTR,#R_AD_BUF
003420 EE                MOV     A,R6
003421 F0                MOVX    @DPTR,A
003422 FC                MOV     R4,A
003423 A3                INC     DPTR
003424 EF                MOV     A,R7
003425 F0                MOVX    @DPTR,A
003426 FD                MOV     R5,A
  439: 		R_AD_BUF=CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
003427 E4                CLR     A
003428 FF                MOV     R7,A
003429 122FDC            LCALL   _CS_Scale_AdcFilter
00342C 904DFC            MOV     DPTR,#R_AD_BUF
00342F EE                MOV     A,R6
003430 F0                MOVX    @DPTR,A
003431 FC                MOV     R4,A
003432 A3                INC     DPTR
003433 EF                MOV     A,R7
003434 F0                MOVX    @DPTR,A
003435 FD                MOV     R5,A
  440: 		R_AdFilTimes = CS_Scale_AdcFilter(ScaleAdcFilterGetFilTimes,R_AD_BUF);
003436 7F02              MOV     R7,#02H
003438 122FDC            LCALL   _CS_Scale_AdcFilter
;---- Variable 'R_AdFilTimes' assigned to Register 'R6/R7' ----
  441: 		
  442: 			if(R_AdFilTimes >=50)
00343B C3                CLR     C
00343C EF                MOV     A,R7
00343D 9432              SUBB    A,#032H
00343F EE                MOV     A,R6
003440 9400              SUBB    A,#00H
003442 403A              JC      ?C0049?CS_SCALE_PROC
  443: 				{
  444: 				R_AD_Zero	= R_AD_BUF;
003444 904DFC            MOV     DPTR,#R_AD_BUF
003447 E0                MOVX    A,@DPTR
003448 FE                MOV     R6,A
003449 A3                INC     DPTR
00344A E0                MOVX    A,@DPTR
00344B FF                MOV     R7,A
00344C 904C98            MOV     DPTR,#R_AD_Zero
00344F EE                MOV     A,R6
003450 F0                MOVX    @DPTR,A
003451 A3                INC     DPTR
003452 EF                MOV     A,R7
003453 F0                MOVX    @DPTR,A
  445: 				R_AD_PowerOnZero = R_AD_BUF;
003454 904C96            MOV     DPTR,#R_AD_PowerOnZero
003457 EE                MOV     A,R6
003458 F0                MOVX    @DPTR,A
003459 A3                INC     DPTR
00345A EF                MOV     A,R7
00345B F0                MOVX    @DPTR,A
  446: 				B_Weight_ZeroOk = true;
00345C 904C9B            MOV     DPTR,#B_Weight_ZeroOk
00345F 7401              MOV     A,#01H
003461 F0                MOVX    @DPTR,A
  447: 				}
  448: 		}
003462 801A              SJMP    ?C0049?CS_SCALE_PROC
003464         ?C0050?CS_SCALE_PROC:
  449: 		else
  450: 		{
  451: 		R_AD_Zero	= 4000;
003464 904C98            MOV     DPTR,#R_AD_Zero
003467 740F              MOV     A,#0FH
003469 F0                MOVX    @DPTR,A
00346A A3                INC     DPTR
00346B 74A0              MOV     A,#0A0H
00346D F0                MOVX    @DPTR,A
  452: 		R_AD_PowerOnZero = 4000;
00346E 904C96            MOV     DPTR,#R_AD_PowerOnZero
003471 740F              MOV     A,#0FH
003473 F0                MOVX    @DPTR,A
003474 A3                INC     DPTR
003475 74A0              MOV     A,#0A0H
003477 F0                MOVX    @DPTR,A
  453: 		B_Weight_ZeroOk = true;
003478 904C9B            MOV     DPTR,#B_Weight_ZeroOk
00347B 7401              MOV     A,#01H
00347D F0                MOVX    @DPTR,A
  454: 		}
  455: 
  456: 	}
00347E         ?C0049?CS_SCALE_PROC:
  457: 
  458: 	if(option==RunningZero)
00347E 904DFB            MOV     DPTR,#option
003481 E0                MOVX    A,@DPTR
003482 6407              XRL     A,#07H
003484 6002              JZ      $ + 4H
003486 A1B9              AJMP    ?C0053?CS_SCALE_PROC
  459: 	{
  460: 	B_Weight_Zero = false;		
003488 904C9A            MOV     DPTR,#B_Weight_Zero
00348B F0                MOVX    @DPTR,A
  461: 	//3kg以下才追零包括负重量
  462: 	B_Weight_Pos = CS_Scale_GetDeltaAD(GetADDirection);		//获取AD方向
00348C 7F01              MOV     R7,#01H
00348E 122F7B            LCALL   _CS_Scale_GetDeltaAD
003491 904E02            MOV     DPTR,#B_Weight_Pos
003494 EF                MOV     A,R7
003495 F0                MOVX    @DPTR,A
  463: 	R_Open_Weight = CS_Scale_CaliProc(CaliProcGetOpenWeight);	//获取开机重量值
003496 7F07              MOV     R7,#07H
003498 121135            LCALL   _CS_Scale_CaliProc
00349B 904E00            MOV     DPTR,#R_Open_Weight
00349E EE                MOV     A,R6
00349F F0                MOVX    @DPTR,A
0034A0 A3                INC     DPTR
0034A1 EF                MOV     A,R7
0034A2 F0                MOVX    @DPTR,A
  464: 	
  465: 	if(R_UnitWeight.origin <= 300 ||B_Weight_Pos ==false)	
0034A3 904CC9            MOV     DPTR,#R_UnitWeight
0034A6 E0                MOVX    A,@DPTR
0034A7 FE                MOV     R6,A
0034A8 A3                INC     DPTR
0034A9 E0                MOVX    A,@DPTR
0034AA FF                MOV     R7,A
0034AB D3                SETB    C
0034AC 942C              SUBB    A,#02CH
0034AE EE                MOV     A,R6
0034AF 9401              SUBB    A,#01H
0034B1 4006              JC      ?C0055?CS_SCALE_PROC
0034B3 904E02            MOV     DPTR,#B_Weight_Pos
0034B6 E0                MOVX    A,@DPTR
0034B7 7006              JNZ     ?C0054?CS_SCALE_PROC
0034B9         ?C0055?CS_SCALE_PROC:
  466: 		B_Weight_Zero = true;
0034B9 904C9A            MOV     DPTR,#B_Weight_Zero
0034BC 7401              MOV     A,#01H
0034BE F0                MOVX    @DPTR,A
0034BF         ?C0054?CS_SCALE_PROC:
  467: 
  468: 		if(R_UnitWeight.origin <= 200 || B_Weight_Pos==false)
0034BF D3                SETB    C
0034C0 EF                MOV     A,R7
0034C1 94C8              SUBB    A,#0C8H
0034C3 EE                MOV     A,R6
0034C4 9400              SUBB    A,#00H
0034C6 4008              JC      ?C0057?CS_SCALE_PROC
0034C8 904E02            MOV     DPTR,#B_Weight_Pos
0034CB E0                MOVX    A,@DPTR
0034CC 6002              JZ      $ + 4H
0034CE A1B5              AJMP    ?C0056?CS_SCALE_PROC
0034D0         ?C0057?CS_SCALE_PROC:
  469: 			{		
  470: 				if(CS_Scale_JudgeSteady(GetIfSmallSteady)==true)
0034D0 7F02              MOV     R7,#02H
0034D2 120BBB            LCALL   _CS_Scale_JudgeSteady
0034D5 EF                MOV     A,R7
0034D6 6401              XRL     A,#01H
0034D8 6002              JZ      $ + 4H
0034DA A1B5              AJMP    ?C0056?CS_SCALE_PROC
  471: 					{
  472: 
  473: 					CS_Scale_JudgeSteady(ResetSteady);
0034DC 7F01              MOV     R7,#01H
0034DE 120BBB            LCALL   _CS_Scale_JudgeSteady
  474: 					
  475: 					//非锁定状态正常追零
  476: 					if(CS_Scale_LockProc(GetIfLock)==false)	
0034E1 7F02              MOV     R7,#02H
0034E3 D105              ACALL   _CS_Scale_LockProc
0034E5 EF                MOV     A,R7
0034E6 7054              JNZ     ?C0059?CS_SCALE_PROC
  477: 						{
  478: 						if(R_AD_Original >= R_AD_PowerOnZero)
0034E8 904C96            MOV     DPTR,#R_AD_PowerOnZero
0034EB E0                MOVX    A,@DPTR
0034EC FE                MOV     R6,A
0034ED A3                INC     DPTR
0034EE E0                MOVX    A,@DPTR
0034EF FF                MOV     R7,A
0034F0 904CD8            MOV     DPTR,#R_AD_Original
0034F3 E0                MOVX    A,@DPTR
0034F4 FC                MOV     R4,A
0034F5 A3                INC     DPTR
0034F6 E0                MOVX    A,@DPTR
0034F7 FD                MOV     R5,A
0034F8 C3                CLR     C
0034F9 9F                SUBB    A,R7
0034FA EC                MOV     A,R4
0034FB 9E                SUBB    A,R6
0034FC 402D              JC      ?C0060?CS_SCALE_PROC
  479: 							{
  480: 							weight_temp = R_AD_Original - R_AD_PowerOnZero;
0034FE ED                MOV     A,R5
0034FF 9F                SUBB    A,R7
003500 FF                MOV     R7,A
003501 EC                MOV     A,R4
003502 9E                SUBB    A,R6
003503 FE                MOV     R6,A
003504 904DFE            MOV     DPTR,#weight_temp
003507 F0                MOVX    @DPTR,A
003508 A3                INC     DPTR
003509 EF                MOV     A,R7
00350A F0                MOVX    @DPTR,A
  481: 							if(weight_temp < R_Open_Weight)
00350B D3                SETB    C
00350C 904E01            MOV     DPTR,#R_Open_Weight+01H
00350F E0                MOVX    A,@DPTR
003510 9F                SUBB    A,R7
003511 904E00            MOV     DPTR,#R_Open_Weight
003514 E0                MOVX    A,@DPTR
003515 9E                SUBB    A,R6
003516 5002              JNC     $ + 4H
003518 A1B5              AJMP    ?C0056?CS_SCALE_PROC
  482: 								R_AD_Zero = R_AD_Original;
00351A 904CD8            MOV     DPTR,#R_AD_Original
00351D E0                MOVX    A,@DPTR
00351E FF                MOV     R7,A
00351F A3                INC     DPTR
003520 E0                MOVX    A,@DPTR
003521 904C98            MOV     DPTR,#R_AD_Zero
003524 CF                XCH     A,R7
003525 F0                MOVX    @DPTR,A
003526 A3                INC     DPTR
003527 EF                MOV     A,R7
003528 F0                MOVX    @DPTR,A
  483: 							}
003529 A1B5              AJMP    ?C0056?CS_SCALE_PROC
00352B         ?C0060?CS_SCALE_PROC:
  484: 						else
  485: 							R_AD_Zero = R_AD_Original;
00352B 904CD8            MOV     DPTR,#R_AD_Original
00352E E0                MOVX    A,@DPTR
00352F FF                MOV     R7,A
003530 A3                INC     DPTR
003531 E0                MOVX    A,@DPTR
003532 904C98            MOV     DPTR,#R_AD_Zero
003535 CF                XCH     A,R7
003536 F0                MOVX    @DPTR,A
003537 A3                INC     DPTR
003538 EF                MOV     A,R7
003539 F0                MOVX    @DPTR,A
  486: 						}
00353A 8079              SJMP    ?C0056?CS_SCALE_PROC
00353C         ?C0059?CS_SCALE_PROC:
  487: 					//锁定状态下秤第一次追零做防提起处理
  488: 					else			
  489: 						{
  490: 						if(B_LockDownCheck==false)
00353C 904C9C            MOV     DPTR,#B_LockDownCheck
00353F E0                MOVX    A,@DPTR
003540 7073              JNZ     ?C0056?CS_SCALE_PROC
  491: 							{
  492: 							if(R_AD_Original>R_AD_Zero)
003542 904C98            MOV     DPTR,#R_AD_Zero
003545 E0                MOVX    A,@DPTR
003546 FE                MOV     R6,A
003547 A3                INC     DPTR
003548 E0                MOVX    A,@DPTR
003549 FF                MOV     R7,A
00354A 904CD8            MOV     DPTR,#R_AD_Original
00354D E0                MOVX    A,@DPTR
00354E FC                MOV     R4,A
00354F A3                INC     DPTR
003550 E0                MOVX    A,@DPTR
003551 FD                MOV     R5,A
003552 D3                SETB    C
003553 9F                SUBB    A,R7
003554 EC                MOV     A,R4
003555 9E                SUBB    A,R6
003556 400E              JC      ?C0065?CS_SCALE_PROC
  493: 								weight_temp = R_AD_Original - R_AD_Zero;
003558 ED                MOV     A,R5
003559 9F                SUBB    A,R7
00355A FF                MOV     R7,A
00355B EC                MOV     A,R4
00355C 9E                SUBB    A,R6
00355D 904DFE            MOV     DPTR,#weight_temp
003560 F0                MOVX    @DPTR,A
003561 A3                INC     DPTR
003562 EF                MOV     A,R7
003563 F0                MOVX    @DPTR,A
003564 801B              SJMP    ?C0066?CS_SCALE_PROC
003566         ?C0065?CS_SCALE_PROC:
  494: 							else
  495: 								weight_temp = R_AD_Zero - R_AD_Original;
003566 904CD8            MOV     DPTR,#R_AD_Original
003569 E0                MOVX    A,@DPTR
00356A FE                MOV     R6,A
00356B A3                INC     DPTR
00356C E0                MOVX    A,@DPTR
00356D FF                MOV     R7,A
00356E C3                CLR     C
00356F 904C99            MOV     DPTR,#R_AD_Zero+01H
003572 E0                MOVX    A,@DPTR
003573 9F                SUBB    A,R7
003574 FF                MOV     R7,A
003575 904C98            MOV     DPTR,#R_AD_Zero
003578 E0                MOVX    A,@DPTR
003579 9E                SUBB    A,R6
00357A 904DFE            MOV     DPTR,#weight_temp
00357D F0                MOVX    @DPTR,A
00357E A3                INC     DPTR
00357F EF                MOV     A,R7
003580 F0                MOVX    @DPTR,A
003581         ?C0066?CS_SCALE_PROC:
  496: 
  497: 							//跟锁定前的零点做比较不等于一个秤体重量的处理
  498: 							//if(weight_temp<ScaleWeightMin&&weight_temp>ScaleWeightMax)
  499: 								//{
  500: 								R_AD_Zero = R_AD_Original;	//更新零点
003581 904CD8            MOV     DPTR,#R_AD_Original
003584 E0                MOVX    A,@DPTR
003585 FF                MOV     R7,A
003586 A3                INC     DPTR
003587 E0                MOVX    A,@DPTR
003588 904C98            MOV     DPTR,#R_AD_Zero
00358B CF                XCH     A,R7
00358C F0                MOVX    @DPTR,A
00358D A3                INC     DPTR
00358E EF                MOV     A,R7
00358F F0                MOVX    @DPTR,A
  501: 								if(weight_temp>SameZeroRange)
003590 D3                SETB    C
003591 904DFF            MOV     DPTR,#weight_temp+01H
003594 E0                MOVX    A,@DPTR
003595 940A              SUBB    A,#0AH
003597 904DFE            MOV     DPTR,#weight_temp
00359A E0                MOVX    A,@DPTR
00359B 9400              SUBB    A,#00H
00359D 4010              JC      ?C0067?CS_SCALE_PROC
  502: 									{
  503: 									//跟称重前不是一个零点报零点错并解锁
  504: 									B_WeightZeroErr=true;
00359F 904C9D            MOV     DPTR,#B_WeightZeroErr
0035A2 7401              MOV     A,#01H
0035A4 F0                MOVX    @DPTR,A
  505: 									R_Display_Err=CS_ScaleDisplay_L_err;
0035A5 904CC2            MOV     DPTR,#R_Display_Err
0035A8 7404              MOV     A,#04H
0035AA F0                MOVX    @DPTR,A
  506: 									CS_Scale_LockProc(LockProcUnLock);
0035AB 7F03              MOV     R7,#03H
0035AD D105              ACALL   _CS_Scale_LockProc
  507: 									}
0035AF         ?C0067?CS_SCALE_PROC:
  508: 								B_LockDownCheck=true;
0035AF 904C9C            MOV     DPTR,#B_LockDownCheck
0035B2 7401              MOV     A,#01H
0035B4 F0                MOVX    @DPTR,A
  509: 								//}
  510: 
  511: 							}						
  512: 						}
  513: 					
  514: 					}
  515: 			}
0035B5         ?C0056?CS_SCALE_PROC:
  516: 	return	0;		
0035B5 E4                CLR     A
0035B6 FE                MOV     R6,A
0035B7 FF                MOV     R7,A
0035B8 22                RET     
  517: 	}
0035B9         ?C0053?CS_SCALE_PROC:
  518: 
  519: 	if(option==GetPowerOnZero)
0035B9 904DFB            MOV     DPTR,#option
0035BC E0                MOVX    A,@DPTR
0035BD FD                MOV     R5,A
0035BE 7009              JNZ     ?C0068?CS_SCALE_PROC
  520: 		return	R_AD_PowerOnZero;
0035C0 904C96            MOV     DPTR,#R_AD_PowerOnZero
0035C3 E0                MOVX    A,@DPTR
0035C4 FE                MOV     R6,A
0035C5 A3                INC     DPTR
0035C6 E0                MOVX    A,@DPTR
0035C7 FF                MOV     R7,A
0035C8 22                RET     
0035C9         ?C0068?CS_SCALE_PROC:
  521: 	if(option==GetPowerOnZeroState)
0035C9 ED                MOV     A,R5
0035CA B40208            CJNE    A,#02H,?C0069?CS_SCALE_PROC
  522: 		return	B_Weight_ZeroOk;
0035CD 904C9B            MOV     DPTR,#B_Weight_ZeroOk
0035D0 E0                MOVX    A,@DPTR
0035D1 FF                MOV     R7,A
0035D2 7E00              MOV     R6,#00H
0035D4 22                RET     
0035D5         ?C0069?CS_SCALE_PROC:
  523: 	if(option==GetRunningZero)
0035D5 904DFB            MOV     DPTR,#option
0035D8 E0                MOVX    A,@DPTR
0035D9 FD                MOV     R5,A
0035DA B40109            CJNE    A,#01H,?C0070?CS_SCALE_PROC
  524: 		return	R_AD_Zero;
0035DD 904C98            MOV     DPTR,#R_AD_Zero
0035E0 E0                MOVX    A,@DPTR
0035E1 FE                MOV     R6,A
0035E2 A3                INC     DPTR
0035E3 E0                MOVX    A,@DPTR
0035E4 FF                MOV     R7,A
0035E5 22                RET     
0035E6         ?C0070?CS_SCALE_PROC:
  525: 	if(option==GetZeroState)
0035E6 ED                MOV     A,R5
0035E7 B40308            CJNE    A,#03H,?C0071?CS_SCALE_PROC
  526: 		return	B_Weight_Zero;
0035EA 904C9A            MOV     DPTR,#B_Weight_Zero
0035ED E0                MOVX    A,@DPTR
0035EE FF                MOV     R7,A
0035EF 7E00              MOV     R6,#00H
0035F1 22                RET     
0035F2         ?C0071?CS_SCALE_PROC:
  527: 	if(option==GetIfZeroErr)
0035F2 904DFB            MOV     DPTR,#option
0035F5 E0                MOVX    A,@DPTR
0035F6 B40908            CJNE    A,#09H,?C0072?CS_SCALE_PROC
  528: 		return   B_WeightZeroErr;
0035F9 904C9D            MOV     DPTR,#B_WeightZeroErr
0035FC E0                MOVX    A,@DPTR
0035FD FF                MOV     R7,A
0035FE 7E00              MOV     R6,#00H
003600 22                RET     
003601         ?C0072?CS_SCALE_PROC:
  529: 	
  530: 	return 0;	
003601 E4                CLR     A
003602 FE                MOV     R6,A
003603 FF                MOV     R7,A
  531: }
003604 22                RET     
----- FUNCTION _CS_Scale_ZeroProc (END) -------


----- FUNCTION _CS_Scale_LockProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  542: u8_t CS_Scale_LockProc(u8_t option)
  543: {
;---- Variable 'option' assigned to Register 'R7' ----
  544: 	static u8_t xdata B_Weight_Downing_Lock;		//下秤过程有重物在上面锁住
  545: 	
  546: 	if(option==SetDowningLock)
003605 EF                MOV     A,R7
003606 B40109            CJNE    A,#01H,?C0073?CS_SCALE_PROC
  547: 		{
  548: 		B_Weight_Downing_Lock =LockProcLock;
003609 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
00360C 7403              MOV     A,#03H
00360E F0                MOVX    @DPTR,A
  549: 		return 0;
00360F 7F00              MOV     R7,#00H
003611 22                RET     
  550: 		}
003612         ?C0073?CS_SCALE_PROC:
  551: 
  552: 	if(option==GetIfLock)
003612 EF                MOV     A,R7
003613 B40206            CJNE    A,#02H,?C0075?CS_SCALE_PROC
  553: 		{
  554: 		return B_Weight_Downing_Lock;
003616 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
003619 E0                MOVX    A,@DPTR
00361A FF                MOV     R7,A
00361B 22                RET     
  555: 		}
00361C         ?C0075?CS_SCALE_PROC:
  556: 	if(option==LockProcUnLock)
00361C EF                MOV     A,R7
00361D B40307            CJNE    A,#03H,?C0076?CS_SCALE_PROC
  557: 		{
  558: 		B_Weight_Downing_Lock =false;
003620 E4                CLR     A
003621 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
003624 F0                MOVX    @DPTR,A
  559: 		return 0;
003625 FF                MOV     R7,A
003626 22                RET     
  560: 		}
003627         ?C0076?CS_SCALE_PROC:
  561: 	
  562: 	if(CS_Scale_ZeroProc(GetZeroState,0)==true)		//处于零位
003627 E4                CLR     A
003628 FD                MOV     R5,A
003629 FC                MOV     R4,A
00362A 7F03              MOV     R7,#03H
00362C 71BE              ACALL   _CS_Scale_ZeroProc
00362E EF                MOV     A,R7
00362F 6401              XRL     A,#01H
003631 4E                ORL     A,R6
003632 701B              JNZ     ?C0077?CS_SCALE_PROC
  563: 		{
  564: 		B_Weight_Downing_Lock &=LockProcDownUnLock ;
003634 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
003637 E0                MOVX    A,@DPTR
003638 54FD              ANL     A,#0FDH
00363A F0                MOVX    @DPTR,A
  565: 		
  566: 		if(B_Weight_Downing_Lock&LockProcZeroLock)
00363B 30E031            JNB     ACC.0,?C0079?CS_SCALE_PROC
  567: 		R_UnitWeight.origin = R_Weight_Lock;
00363E 904CC0            MOV     DPTR,#R_Weight_Lock
003641 E0                MOVX    A,@DPTR
003642 FF                MOV     R7,A
003643 A3                INC     DPTR
003644 E0                MOVX    A,@DPTR
003645 904CC9            MOV     DPTR,#R_UnitWeight
003648 CF                XCH     A,R7
003649 F0                MOVX    @DPTR,A
00364A A3                INC     DPTR
00364B EF                MOV     A,R7
00364C F0                MOVX    @DPTR,A
  568: 		}
00364D 8020              SJMP    ?C0079?CS_SCALE_PROC
00364F         ?C0077?CS_SCALE_PROC:
  569: 	else
  570: 		{
  571: 		if(B_Weight_Downing_Lock&LockProcDownLock)
00364F 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
003652 E0                MOVX    A,@DPTR
003653 FF                MOV     R7,A
003654 30E111            JNB     ACC.1,?C0080?CS_SCALE_PROC
  572: 			R_UnitWeight.origin = R_Weight_Lock;
003657 904CC0            MOV     DPTR,#R_Weight_Lock
00365A E0                MOVX    A,@DPTR
00365B FD                MOV     R5,A
00365C A3                INC     DPTR
00365D E0                MOVX    A,@DPTR
00365E 904CC9            MOV     DPTR,#R_UnitWeight
003661 CD                XCH     A,R5
003662 F0                MOVX    @DPTR,A
003663 A3                INC     DPTR
003664 ED                MOV     A,R5
003665 F0                MOVX    @DPTR,A
003666 8007              SJMP    ?C0079?CS_SCALE_PROC
003668         ?C0080?CS_SCALE_PROC:
  573: 		else
  574: 			B_Weight_Downing_Lock &= LockProcZeroUnLock;
003668 EF                MOV     A,R7
003669 54FE              ANL     A,#0FEH
00366B 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
00366E F0                MOVX    @DPTR,A
  575: 		}
00366F         ?C0079?CS_SCALE_PROC:
  576: 
  577: 	return 0;
00366F 7F00              MOV     R7,#00H
  578: }
003671 22                RET     
----- FUNCTION _CS_Scale_LockProc (END) -------


----- FUNCTION CS_1186Com_ReadAdZero_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  340: void CS_1186Com_ReadAdZero_Proc(void)
  341: {
  342: 	u32_t	data_rec;
  343: 	u16_t	R_AD_Zero;
  344: 	
  345: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAdZero)
003672 904D50            MOV     DPTR,#R_Weight_Com_Coo
003675 E0                MOVX    A,@DPTR
003676 B4851F            CJNE    A,#085H,?C0051?CS_COMMTO1186
  346: 		{
  347: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadAdZero,0);
003679 7B00              MOV     R3,#00H
00367B 7A00              MOV     R2,#00H
00367D 7900              MOV     R1,#00H
00367F 7F85              MOV     R7,#085H
003681 123924            LCALL   _CS_CommTo1186_SendCmd
  348: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadAdZero;
003684 904D51            MOV     DPTR,#R_Weight_Com_Coo+01H
003687 7485              MOV     A,#085H
003689 F0                MOVX    @DPTR,A
  349: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadAdZeroStandby;
00368A 904D50            MOV     DPTR,#R_Weight_Com_Coo
00368D 7406              MOV     A,#06H
00368F F0                MOVX    @DPTR,A
  350: 		uartTimeoutCnt=0;
003690 E4                CLR     A
003691 904D64            MOV     DPTR,#uartTimeoutCnt
003694 F0                MOVX    @DPTR,A
  351: 		YC_UARTClearBuffer();
003695 120597            LCALL   YC_UARTClearBuffer
  352: 		}
003698         ?C0051?CS_COMMTO1186:
  353: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAdZeroStandby)
003698 904D50            MOV     DPTR,#R_Weight_Com_Coo
00369B E0                MOVX    A,@DPTR
00369C 6406              XRL     A,#06H
00369E 6002              JZ      $ + 4H
0036A0 E121              AJMP    ?C0056?CS_COMMTO1186
  354: 		{						
  355: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 8)==8)
0036A2 7B01              MOV     R3,#01H
0036A4 7A4D              MOV     R2,#HIGH uartRcvBuf
0036A6 7940              MOV     R1,#LOW uartRcvBuf
0036A8 7D08              MOV     R5,#08H
0036AA FC                MOV     R4,A
0036AB 1207E1            LCALL   _YC_UARTReciveDataExpected
0036AE EF                MOV     A,R7
0036AF 6408              XRL     A,#08H
0036B1 4E                ORL     A,R6
0036B2 706D              JNZ     ?C0056?CS_COMMTO1186
  356: 			{						
  357: 			if(uartRcvBuf[3] == CS_CommTo1186_ReadAdZero)   
0036B4 904D43            MOV     DPTR,#uartRcvBuf+03H
0036B7 E0                MOVX    A,@DPTR
0036B8 6485              XRL     A,#085H
0036BA 705F              JNZ     ?C0054?CS_COMMTO1186
  358: 				{
  359: 				data_rec = uartRcvBuf[4];
0036BC A3                INC     DPTR
0036BD E0                MOVX    A,@DPTR
0036BE FF                MOV     R7,A
0036BF E4                CLR     A
0036C0 FC                MOV     R4,A
0036C1 FD                MOV     R5,A
0036C2 FE                MOV     R6,A
;---- Variable 'data_rec' assigned to Register 'R4/R5/R6/R7' ----
  360: 				data_rec = (data_rec<<8) + uartRcvBuf[5];
0036C3 7808              MOV     R0,#08H
0036C5 12031F            LCALL   ?C?LSHL
0036C8 A804              MOV     R0,AR4
0036CA A905              MOV     R1,AR5
0036CC AA06              MOV     R2,AR6
0036CE AB07              MOV     R3,AR7
0036D0 A3                INC     DPTR
0036D1 E0                MOVX    A,@DPTR
0036D2 FF                MOV     R7,A
0036D3 E4                CLR     A
0036D4 FC                MOV     R4,A
0036D5 FD                MOV     R5,A
0036D6 FE                MOV     R6,A
0036D7 EB                MOV     A,R3
0036D8 2F                ADD     A,R7
0036D9 FF                MOV     R7,A
0036DA EE                MOV     A,R6
0036DB 3A                ADDC    A,R2
0036DC FE                MOV     R6,A
0036DD ED                MOV     A,R5
0036DE 39                ADDC    A,R1
0036DF FD                MOV     R5,A
0036E0 EC                MOV     A,R4
0036E1 38                ADDC    A,R0
0036E2 FC                MOV     R4,A
  361: 				data_rec = (data_rec<<8) + uartRcvBuf[6];
0036E3 7808              MOV     R0,#08H
0036E5 12031F            LCALL   ?C?LSHL
0036E8 A804              MOV     R0,AR4
0036EA A905              MOV     R1,AR5
0036EC AA06              MOV     R2,AR6
0036EE AB07              MOV     R3,AR7
0036F0 A3                INC     DPTR
0036F1 E0                MOVX    A,@DPTR
0036F2 FF                MOV     R7,A
0036F3 E4                CLR     A
0036F4 FC                MOV     R4,A
0036F5 FD                MOV     R5,A
0036F6 FE                MOV     R6,A
0036F7 EB                MOV     A,R3
0036F8 2F                ADD     A,R7
0036F9 FF                MOV     R7,A
0036FA EE                MOV     A,R6
0036FB 3A                ADDC    A,R2
0036FC FE                MOV     R6,A
0036FD ED                MOV     A,R5
0036FE 39                ADDC    A,R1
0036FF FD                MOV     R5,A
003700 EC                MOV     A,R4
003701 38                ADDC    A,R0
003702 FC                MOV     R4,A
  362: 				R_AD_Zero =data_rec >> 6;	
003703 7806              MOV     R0,#06H
003705 12030C            LCALL   ?C?ULSHR
;---- Variable 'R_AD_Zero' assigned to Register 'R6/R7' ----
  363: 				CS_Scale_ZeroProc(SetRunningZero,R_AD_Zero);
003708 AD07              MOV     R5,AR7
00370A AC06              MOV     R4,AR6
00370C 7F06              MOV     R7,#06H
00370E 71BE              ACALL   _CS_Scale_ZeroProc
  364: 				
  365: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
003710 E4                CLR     A
003711 904D50            MOV     DPTR,#R_Weight_Com_Coo
003714 F0                MOVX    @DPTR,A
  366: 				R_Weight_Com_Coo.sucess=true;
003715 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
003718 04                INC     A
003719 F0                MOVX    @DPTR,A
  367: 				
  368: 				}
00371A 22                RET     
00371B         ?C0054?CS_COMMTO1186:
  369: 			else
  370: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
00371B 904D64            MOV     DPTR,#uartTimeoutCnt
00371E 7415              MOV     A,#015H
003720 F0                MOVX    @DPTR,A
  371: 			}
  372: 		}
  373: }
003721         ?C0056?CS_COMMTO1186:
003721 22                RET     
----- FUNCTION CS_1186Com_ReadAdZero_Proc (END) -------


----- FUNCTION _CS_MemoryWeightClear_Timer (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  869: void CS_MemoryWeightClear_Timer(u8_t option)
  870: {
;---- Variable 'option' assigned to Register 'R7' ----
  871: 	static u8_t xdata timecount; 				//计时变量
  872: 	static u8_t xdata B_Timeout;
  873: 
  874: 	if(option==StartClearMemWeightTimer)
003722 EF                MOV     A,R7
003723 B40107            CJNE    A,#01H,?C0123?CS_SCALE_PROC
  875: 		{
  876: 		timecount=0;
003726 E4                CLR     A
003727 904CA9            MOV     DPTR,#timecount
00372A F0                MOVX    @DPTR,A
  877: 		B_Timeout = false;
00372B A3                INC     DPTR
00372C F0                MOVX    @DPTR,A
  878: 		}
00372D         ?C0123?CS_SCALE_PROC:
  879: 
  880: 	if(option==MemWeightTimerInc)
00372D EF                MOV     A,R7
00372E B4020C            CJNE    A,#02H,?C0124?CS_SCALE_PROC
  881: 		{
  882: 		if(timecount<255 ) 
003731 904CA9            MOV     DPTR,#timecount
003734 E0                MOVX    A,@DPTR
003735 C3                CLR     C
003736 94FF              SUBB    A,#0FFH
003738 5003              JNC     ?C0124?CS_SCALE_PROC
  883: 		timecount++;
00373A E0                MOVX    A,@DPTR
00373B 04                INC     A
00373C F0                MOVX    @DPTR,A
  884: 		}
00373D         ?C0124?CS_SCALE_PROC:
  885: 	
  886: 	if(B_Timeout == false)
00373D 904CAA            MOV     DPTR,#B_Timeout
003740 E0                MOVX    A,@DPTR
003741 7014              JNZ     ?C0128?CS_SCALE_PROC
  887: 		{
  888: 		if(timecount>SoftTimerTimeOut)
003743 904CA9            MOV     DPTR,#timecount
003746 E0                MOVX    A,@DPTR
003747 D3                SETB    C
003748 9496              SUBB    A,#096H
00374A 400B              JC      ?C0128?CS_SCALE_PROC
  889: 			{
  890: 			B_Timeout = true;
00374C A3                INC     DPTR
00374D 7401              MOV     A,#01H
00374F F0                MOVX    @DPTR,A
  891: 			R_Weight_Mem = 0;	//时间到清记忆重量
003750 E4                CLR     A
003751 904CC3            MOV     DPTR,#R_Weight_Mem
003754 F0                MOVX    @DPTR,A
003755 A3                INC     DPTR
003756 F0                MOVX    @DPTR,A
  892: 			}
  893: 		}
  894: }
003757         ?C0128?CS_SCALE_PROC:
003757 22                RET     
----- FUNCTION _CS_MemoryWeightClear_Timer (END) -------


----- FUNCTION CS_Scale_PowerOnProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1266: void CS_Scale_PowerOnProc(bool B_Reset)
 1267: {
 1268: 	static u8_t xdata comm_doing;
 1269: 	static u8_t xdata PowerOnState;
 1270: 	
 1271: 	
 1272: 	if(B_Reset)
003758 30000A            JNB     B_Reset,?C0183?CS_SCALE_PROC
 1273: 		{
 1274: 		PowerOnState=CS_PowerOn_State1_Reset;
00375B E4                CLR     A
00375C 904CB7            MOV     DPTR,#PowerOnState
00375F F0                MOVX    @DPTR,A
 1275: 		comm_doing=false;
003760 904CB6            MOV     DPTR,#comm_doing
003763 F0                MOVX    @DPTR,A
003764 22                RET     
 1276: 		return;
 1277: 		}
003765         ?C0183?CS_SCALE_PROC:
 1278: 	
 1279: 	//-----------S1
 1280: 	if(PowerOnState==CS_PowerOn_State1_Reset)
003765 904CB7            MOV     DPTR,#PowerOnState
003768 E0                MOVX    A,@DPTR
003769 7018              JNZ     ?C0185?CS_SCALE_PROC
 1281: 		{
 1282: 		if(comm_doing==false)
00376B 904CB6            MOV     DPTR,#comm_doing
00376E E0                MOVX    A,@DPTR
00376F 700A              JNZ     ?C0186?CS_SCALE_PROC
 1283: 			{
 1284: 			comm_doing=true;
003771 04                INC     A
003772 F0                MOVX    @DPTR,A
 1285: 			R_Weight_Com_Coo.now = CS_CommTo1186_Reset;
003773 904D50            MOV     DPTR,#R_Weight_Com_Coo
003776 74C5              MOV     A,#0C5H
003778 F0                MOVX    @DPTR,A
 1286: 			}
003779 8008              SJMP    ?C0185?CS_SCALE_PROC
00377B         ?C0186?CS_SCALE_PROC:
 1287: 		else
 1288: 			{
 1289: 			comm_doing=false;
00377B E4                CLR     A
00377C 904CB6            MOV     DPTR,#comm_doing
00377F F0                MOVX    @DPTR,A
 1290: 			PowerOnState	= CS_PowerOn_State2_ReadOtp;
003780 A3                INC     DPTR
003781 04                INC     A
003782 F0                MOVX    @DPTR,A
 1291: 			}		
 1292: 		}
003783         ?C0185?CS_SCALE_PROC:
 1293: 	//-----------S2
 1294: 	if(PowerOnState==CS_PowerOn_State2_ReadOtp)
003783 904CB7            MOV     DPTR,#PowerOnState
003786 E0                MOVX    A,@DPTR
003787 B40125            CJNE    A,#01H,?C0188?CS_SCALE_PROC
 1295: 		{
 1296: 		if(comm_doing==false)
00378A 904CB6            MOV     DPTR,#comm_doing
00378D E0                MOVX    A,@DPTR
00378E 700F              JNZ     ?C0189?CS_SCALE_PROC
 1297: 			{
 1298: 			comm_doing=true;
003790 04                INC     A
003791 F0                MOVX    @DPTR,A
 1299: 			R_Weight_Com_Coo.now = CS_CommTo1186_ReadOtp;
003792 904D50            MOV     DPTR,#R_Weight_Com_Coo
003795 7484              MOV     A,#084H
003797 F0                MOVX    @DPTR,A
 1300: 			R_Weight_Com_Coo.sucess=false;
003798 E4                CLR     A
003799 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
00379C F0                MOVX    @DPTR,A
 1301: 			R_Weight_Com_Coo.fail=false;
00379D A3                INC     DPTR
00379E F0                MOVX    @DPTR,A
 1302: 			}
00379F         ?C0189?CS_SCALE_PROC:
 1303: 		if(R_Weight_Com_Coo.sucess==true)
00379F 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
0037A2 E0                MOVX    A,@DPTR
0037A3 B40109            CJNE    A,#01H,?C0188?CS_SCALE_PROC
 1304: 			{
 1305: 			comm_doing=false;
0037A6 E4                CLR     A
0037A7 904CB6            MOV     DPTR,#comm_doing
0037AA F0                MOVX    @DPTR,A
 1306: 			PowerOnState =  CS_PowerOn_State3_ReadVersion;
0037AB A3                INC     DPTR
0037AC 7402              MOV     A,#02H
0037AE F0                MOVX    @DPTR,A
 1307: 			}
 1308: 		}
0037AF         ?C0188?CS_SCALE_PROC:
 1309: 	//-----------S3
 1310: 	if(PowerOnState==CS_PowerOn_State3_ReadVersion)
0037AF 904CB7            MOV     DPTR,#PowerOnState
0037B2 E0                MOVX    A,@DPTR
0037B3 B40203            CJNE    A,#02H,?C0191?CS_SCALE_PROC
 1311: 		{
 1312: 		PowerOnState =  CS_PowerOn_State4_ReadTime;		
0037B6 7403              MOV     A,#03H
0037B8 F0                MOVX    @DPTR,A
 1313: 		}
0037B9         ?C0191?CS_SCALE_PROC:
 1314: 	//-----------S4
 1315: 	if(PowerOnState==CS_PowerOn_State4_ReadTime)
0037B9 904CB7            MOV     DPTR,#PowerOnState
0037BC E0                MOVX    A,@DPTR
0037BD B40325            CJNE    A,#03H,?C0192?CS_SCALE_PROC
 1316: 		{
 1317: 		if(comm_doing==false)
0037C0 904CB6            MOV     DPTR,#comm_doing
0037C3 E0                MOVX    A,@DPTR
0037C4 700F              JNZ     ?C0193?CS_SCALE_PROC
 1318: 			{
 1319: 			comm_doing=true;
0037C6 04                INC     A
0037C7 F0                MOVX    @DPTR,A
 1320: 			R_Weight_Com_Coo.now = CS_CommTo1186_ReadTime;
0037C8 904D50            MOV     DPTR,#R_Weight_Com_Coo
0037CB 7482              MOV     A,#082H
0037CD F0                MOVX    @DPTR,A
 1321: 			R_Weight_Com_Coo.sucess=false;
0037CE E4                CLR     A
0037CF 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
0037D2 F0                MOVX    @DPTR,A
 1322: 			R_Weight_Com_Coo.fail=false;
0037D3 A3                INC     DPTR
0037D4 F0                MOVX    @DPTR,A
 1323: 			}
0037D5         ?C0193?CS_SCALE_PROC:
 1324: 		if(R_Weight_Com_Coo.sucess==true)
0037D5 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
0037D8 E0                MOVX    A,@DPTR
0037D9 B40109            CJNE    A,#01H,?C0192?CS_SCALE_PROC
 1325: 			{
 1326: 			comm_doing=false;
0037DC E4                CLR     A
0037DD 904CB6            MOV     DPTR,#comm_doing
0037E0 F0                MOVX    @DPTR,A
 1327: 			PowerOnState =  CS_PowerOn_State5_SetOpenWeight;	
0037E1 A3                INC     DPTR
0037E2 7404              MOV     A,#04H
0037E4 F0                MOVX    @DPTR,A
 1328: 			}
 1329: 		}
0037E5         ?C0192?CS_SCALE_PROC:
 1330: 	//-----------S5
 1331: 	if(PowerOnState==CS_PowerOn_State5_SetOpenWeight)
0037E5 904CB7            MOV     DPTR,#PowerOnState
0037E8 E0                MOVX    A,@DPTR
0037E9 B40425            CJNE    A,#04H,?C0195?CS_SCALE_PROC
 1332: 		{
 1333: 		if(comm_doing==false)
0037EC 904CB6            MOV     DPTR,#comm_doing
0037EF E0                MOVX    A,@DPTR
0037F0 700F              JNZ     ?C0196?CS_SCALE_PROC
 1334: 			{
 1335: 			comm_doing=true;
0037F2 04                INC     A
0037F3 F0                MOVX    @DPTR,A
 1336: 			R_Weight_Com_Coo.now = CS_CommTo1186_SetOpenWeight;
0037F4 904D50            MOV     DPTR,#R_Weight_Com_Coo
0037F7 74A1              MOV     A,#0A1H
0037F9 F0                MOVX    @DPTR,A
 1337: 			R_Weight_Com_Coo.sucess=false;
0037FA E4                CLR     A
0037FB 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
0037FE F0                MOVX    @DPTR,A
 1338: 			R_Weight_Com_Coo.fail=false;
0037FF A3                INC     DPTR
003800 F0                MOVX    @DPTR,A
 1339: 			}
003801         ?C0196?CS_SCALE_PROC:
 1340: 		if(R_Weight_Com_Coo.sucess==true)
003801 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
003804 E0                MOVX    A,@DPTR
003805 B40109            CJNE    A,#01H,?C0195?CS_SCALE_PROC
 1341: 			{
 1342: 			comm_doing=false;
003808 E4                CLR     A
003809 904CB6            MOV     DPTR,#comm_doing
00380C F0                MOVX    @DPTR,A
 1343: 			PowerOnState =  CS_PowerOn_State6_ShowOpenPic;
00380D A3                INC     DPTR
00380E 7405              MOV     A,#05H
003810 F0                MOVX    @DPTR,A
 1344: 			}
 1345: 		}
003811         ?C0195?CS_SCALE_PROC:
 1346: 	//-----------S6
 1347: 	if(PowerOnState==CS_PowerOn_State6_ShowOpenPic)
003811 904CB7            MOV     DPTR,#PowerOnState
003814 E0                MOVX    A,@DPTR
003815 6405              XRL     A,#05H
003817 7039              JNZ     ?C0198?CS_SCALE_PROC
 1348: 		{
 1349: 		if(comm_doing==false)
003819 904CB6            MOV     DPTR,#comm_doing
00381C E0                MOVX    A,@DPTR
00381D 7018              JNZ     ?C0199?CS_SCALE_PROC
 1350: 			{
 1351: 			comm_doing=true;	
00381F 04                INC     A
003820 F0                MOVX    @DPTR,A
 1352: 			CS_ScaleDisplay_FreshBuf(DisplayData,8888);
003821 7DB8              MOV     R5,#0B8H
003823 7C22              MOV     R4,#022H
003825 7F21              MOV     R7,#021H
003827 121612            LCALL   _CS_ScaleDisplay_FreshBuf
 1353: 			R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplay;
00382A 904D50            MOV     DPTR,#R_Weight_Com_Coo
00382D 74E0              MOV     A,#0E0H
00382F F0                MOVX    @DPTR,A
 1354: 			R_Weight_Com_Coo.sucess=false;
003830 E4                CLR     A
003831 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
003834 F0                MOVX    @DPTR,A
 1355: 			R_Weight_Com_Coo.fail=false;
003835 A3                INC     DPTR
003836 F0                MOVX    @DPTR,A
 1356: 			
 1357: 			}
003837         ?C0199?CS_SCALE_PROC:
 1358: 		if(R_Weight_Com_Coo.sucess==true)
003837 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
00383A E0                MOVX    A,@DPTR
00383B B40114            CJNE    A,#01H,?C0198?CS_SCALE_PROC
 1359: 			{	
 1360: 			comm_doing=false;
00383E E4                CLR     A
00383F 904CB6            MOV     DPTR,#comm_doing
003842 F0                MOVX    @DPTR,A
 1361: 			R_Weight_Com_Coo.sucess=false;
003843 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
003846 F0                MOVX    @DPTR,A
 1362: 			PowerOnState =	CS_PowerOn_State7_ShowOpenPicWait;
003847 904CB7            MOV     DPTR,#PowerOnState
00384A 7406              MOV     A,#06H
00384C F0                MOVX    @DPTR,A
 1363: 			CS_SoftTimer(ResetSoftTimer);
00384D 7F02              MOV     R7,#02H
00384F 120C9B            LCALL   _CS_SoftTimer
 1364: 			}		
 1365: 		}
003852         ?C0198?CS_SCALE_PROC:
 1366: 	//-----------S7
 1367: 	if(PowerOnState==CS_PowerOn_State7_ShowOpenPicWait)
003852 904CB7            MOV     DPTR,#PowerOnState
003855 E0                MOVX    A,@DPTR
003856 B40617            CJNE    A,#06H,?C0184?CS_SCALE_PROC
 1368: 		{
 1369: 		if(CS_SoftTimer(GetSoftTimerTime)>200)
003859 7F01              MOV     R7,#01H
00385B 120C9B            LCALL   _CS_SoftTimer
00385E EF                MOV     A,R7
00385F D3                SETB    C
003860 94C8              SUBB    A,#0C8H
003862 400C              JC      ?C0184?CS_SCALE_PROC
 1370: 			{
 1371: 			R_Scale_state = CS_Scale_state_weighting;
003864 904CC5            MOV     DPTR,#R_Scale_state
003867 7401              MOV     A,#01H
003869 F0                MOVX    @DPTR,A
 1372: 			R_Weight_Com_Coo.now = CS_CommTo1186_ReadAd;	
00386A 904D50            MOV     DPTR,#R_Weight_Com_Coo
00386D 7480              MOV     A,#080H
00386F F0                MOVX    @DPTR,A
 1373: 			}
 1374: 		}
 1375: 
 1376: }
003870         ?C0184?CS_SCALE_PROC:
003870 22                RET     
----- FUNCTION CS_Scale_PowerOnProc (END) -------


----- FUNCTION CS_1186Com_ReadMacAdress_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   73: void CS_1186Com_ReadMacAdress_Proc(void)
   74: {
   75: 	u8_t i;
   76: 	u8_t xdata * ptr;
   77: 
   78: 	i=0;
003871 E4                CLR     A
003872 904E59            MOV     DPTR,#i
003875 F0                MOVX    @DPTR,A
   79: 	ptr =&i;
003876 A3                INC     DPTR
003877 744E              MOV     A,#HIGH i
003879 F0                MOVX    @DPTR,A
00387A A3                INC     DPTR
00387B 7459              MOV     A,#LOW i
00387D F0                MOVX    @DPTR,A
   80: 	
   81: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadOtp)
00387E 904D50            MOV     DPTR,#R_Weight_Com_Coo
003881 E0                MOVX    A,@DPTR
003882 B4842C            CJNE    A,#084H,?C0011?CS_COMMTO1186
   82: 		{
   83: 		uartTxBuf[0]=6;		//read 6 byte MacAdress
003885 904D54            MOV     DPTR,#uartTxBuf
003888 7406              MOV     A,#06H
00388A F0                MOVX    @DPTR,A
   84: 		uartTxBuf[1]=0xF7;	//OTP  adress low 8bits
00388B A3                INC     DPTR
00388C 74F7              MOV     A,#0F7H
00388E F0                MOVX    @DPTR,A
   85: 		uartTxBuf[2]=0x0F;	//OTP  adress high 8bits
00388F A3                INC     DPTR
003890 740F              MOV     A,#0FH
003892 F0                MOVX    @DPTR,A
   86: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadOtp,uartTxBuf);
003893 7B01              MOV     R3,#01H
003895 7A4D              MOV     R2,#HIGH uartTxBuf
003897 7954              MOV     R1,#LOW uartTxBuf
003899 7F84              MOV     R7,#084H
00389B 3124              ACALL   _CS_CommTo1186_SendCmd
   87: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadOtp;
00389D 904D51            MOV     DPTR,#R_Weight_Com_Coo+01H
0038A0 7484              MOV     A,#084H
0038A2 F0                MOVX    @DPTR,A
   88: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadOtpStandby;
0038A3 904D50            MOV     DPTR,#R_Weight_Com_Coo
0038A6 7405              MOV     A,#05H
0038A8 F0                MOVX    @DPTR,A
   89: 		uartTimeoutCnt=0;
0038A9 E4                CLR     A
0038AA 904D64            MOV     DPTR,#uartTimeoutCnt
0038AD F0                MOVX    @DPTR,A
   90: 		YC_UARTClearBuffer();
0038AE 120597            LCALL   YC_UARTClearBuffer
   91: 		}
0038B1         ?C0011?CS_COMMTO1186:
   92: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadOtpStandby)
0038B1 904D50            MOV     DPTR,#R_Weight_Com_Coo
0038B4 E0                MOVX    A,@DPTR
0038B5 6405              XRL     A,#05H
0038B7 706A              JNZ     ?C0016?CS_COMMTO1186
   93: 		{
   94: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 11) == 11)
0038B9 7B01              MOV     R3,#01H
0038BB 7A4D              MOV     R2,#HIGH uartRcvBuf
0038BD 7940              MOV     R1,#LOW uartRcvBuf
0038BF 7D0B              MOV     R5,#0BH
0038C1 FC                MOV     R4,A
0038C2 1207E1            LCALL   _YC_UARTReciveDataExpected
0038C5 EF                MOV     A,R7
0038C6 640B              XRL     A,#0BH
0038C8 4E                ORL     A,R6
0038C9 7058              JNZ     ?C0016?CS_COMMTO1186
   95: 			{
   96: 			if(generateChecksum(uartRcvBuf,10) == uartRcvBuf[10] &&
0038CB 7B01              MOV     R3,#01H
0038CD 7A4D              MOV     R2,#HIGH uartRcvBuf
0038CF 7940              MOV     R1,#LOW uartRcvBuf
0038D1 7D0A              MOV     R5,#0AH
0038D3 121FE3            LCALL   _generateChecksum
0038D6 904D4A            MOV     DPTR,#uartRcvBuf+0AH
0038D9 E0                MOVX    A,@DPTR
0038DA 6F                XRL     A,R7
0038DB 7040              JNZ     ?C0014?CS_COMMTO1186
0038DD 904D42            MOV     DPTR,#uartRcvBuf+02H
0038E0 E0                MOVX    A,@DPTR
0038E1 6410              XRL     A,#010H
0038E3 7038              JNZ     ?C0014?CS_COMMTO1186
0038E5 A3                INC     DPTR
0038E6 E0                MOVX    A,@DPTR
0038E7 B48433            CJNE    A,#084H,?C0014?CS_COMMTO1186
   97: 			uartRcvBuf[2] == UART_EVENT_OK &&
   98: 			uartRcvBuf[3] == CS_CommTo1186_ReadOtp)
   99: 				{	
  100: 				//slave_state = SLAVE_ST_SET_PARAM;
  101: 				//R_Debug_temp= uartRcvBuf[5];	//测试用
  102: 
  103: 				//数据放错地址，部分数据手动赋值
  104: 				uartRcvBuf[9]= uartRcvBuf[6];
0038EA 904D46            MOV     DPTR,#uartRcvBuf+06H
0038ED E0                MOVX    A,@DPTR
0038EE 904D49            MOV     DPTR,#uartRcvBuf+09H
0038F1 F0                MOVX    @DPTR,A
  105: 				uartRcvBuf[8]=0x55;
0038F2 904D48            MOV     DPTR,#uartRcvBuf+08H
0038F5 7455              MOV     A,#055H
0038F7 F0                MOVX    @DPTR,A
  106: 				uartRcvBuf[7]=uartRcvBuf[5];
0038F8 904D45            MOV     DPTR,#uartRcvBuf+05H
0038FB E0                MOVX    A,@DPTR
0038FC 904D47            MOV     DPTR,#uartRcvBuf+07H
0038FF F0                MOVX    @DPTR,A
  107: 				uartRcvBuf[6]=0xbe;
003900 904D46            MOV     DPTR,#uartRcvBuf+06H
003903 74BE              MOV     A,#0BEH
003905 F0                MOVX    @DPTR,A
  108: 				uartRcvBuf[5]=uartRcvBuf[4];
003906 904D44            MOV     DPTR,#uartRcvBuf+04H
003909 E0                MOVX    A,@DPTR
00390A A3                INC     DPTR
00390B F0                MOVX    @DPTR,A
  109: 				uartRcvBuf[4]=0x08;
00390C 904D44            MOV     DPTR,#uartRcvBuf+04H
00390F 7408              MOV     A,#08H
003911 F0                MOVX    @DPTR,A
  110: 
  111: 				/*
  112: 				xmemcpy(mem_le_lap,&uartRcvBuf[4],6);
  113: 				if((*mem_adv_lap_ptr) != 0) 
  114: 					{
  115: 					for(i=0;i<6;i++) 
  116: 						{
  117: 						ptr = (u8_t xdata *)(ESWAP(*mem_adv_lap_ptr)+i);
  118: 						*ptr= uartRcvBuf[9-i];
  119: 						}
  120: 					}
  121: 				*/
  122: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
003912 E4                CLR     A
003913 904D50            MOV     DPTR,#R_Weight_Com_Coo
003916 F0                MOVX    @DPTR,A
  123: 				R_Weight_Com_Coo.sucess=true;
003917 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
00391A 04                INC     A
00391B F0                MOVX    @DPTR,A
  124: 				}
00391C 22                RET     
00391D         ?C0014?CS_COMMTO1186:
  125: 			else
  126: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
00391D 904D64            MOV     DPTR,#uartTimeoutCnt
003920 7415              MOV     A,#015H
003922 F0                MOVX    @DPTR,A
  127: 			}
  128: 		}
  129: }
003923         ?C0016?CS_COMMTO1186:
003923 22                RET     
----- FUNCTION CS_1186Com_ReadMacAdress_Proc (END) -------


----- FUNCTION _CS_CommTo1186_SendCmd (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  402: void CS_CommTo1186_SendCmd(u8_t cmd_code ,u8_t * databuf)
  403: {
003924 904D7E            MOV     DPTR,#cmd_code
003927 EF                MOV     A,R7
003928 F0                MOVX    @DPTR,A
003929 A3                INC     DPTR
00392A EB                MOV     A,R3
00392B F0                MOVX    @DPTR,A
00392C A3                INC     DPTR
00392D EA                MOV     A,R2
00392E F0                MOVX    @DPTR,A
00392F A3                INC     DPTR
003930 E9                MOV     A,R1
003931 F0                MOVX    @DPTR,A
  404: 	u8_t buf[10] = {0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,0x00,0x00};
  405:        u8_t len;
003932 7882              MOV     R0,#LOW buf
003934 7C4D              MOV     R4,#HIGH buf
003936 7D01              MOV     R5,#01H
003938 7BFF              MOV     R3,#0FFH
00393A 7A04              MOV     R2,#HIGH _?ix1000
00393C 79C2              MOV     R1,#LOW _?ix1000
00393E 7E00              MOV     R6,#00H
003940 7F0A              MOV     R7,#0AH
003942 1200D3            LCALL   ?C?COPY
  406: 
  407: 	 buf[0] = 0xc5;							//包头数据
003945 904D82            MOV     DPTR,#buf
003948 74C5              MOV     A,#0C5H
00394A F0                MOVX    @DPTR,A
  408: 	switch(cmd_code)
00394B 904D7E            MOV     DPTR,#cmd_code
00394E E0                MOVX    A,@DPTR
00394F 12036F            LCALL   ?C?CCASE
003952 398B              DW      ?C0065?CS_COMMTO1186
003954 80                DB      080H
003955 39A1              DW      ?C0066?CS_COMMTO1186
003957 81                DB      081H
003958 39B7              DW      ?C0067?CS_COMMTO1186
00395A 82                DB      082H
00395B 39CD              DW      ?C0068?CS_COMMTO1186
00395D 83                DB      083H
00395E 3A0A              DW      ?C0069?CS_COMMTO1186
003960 84                DB      084H
003961 3A51              DW      ?C0070?CS_COMMTO1186
003963 85                DB      085H
003964 3A67              DW      ?C0071?CS_COMMTO1186
003966 A0                DB      0A0H
003967 3AB8              DW      ?C0072?CS_COMMTO1186
003969 A1                DB      0A1H
00396A 3B13              DW      ?C0073?CS_COMMTO1186
00396C A2                DB      0A2H
00396D 3B64              DW      ?C0074?CS_COMMTO1186
00396F A3                DB      0A3H
003970 397A              DW      ?C0064?CS_COMMTO1186
003972 C5                DB      0C5H
003973 3BAB              DW      ?C0075?CS_COMMTO1186
003975 E0                DB      0E0H
003976 0000              DW      00H
003978 3C0E              DW      ?C0076?CS_COMMTO1186
  409: 		{
  410: 		case CS_CommTo1186_Reset:			//0
00397A         ?C0064?CS_COMMTO1186:
  411: 			buf[0] = 0x00;
00397A E4                CLR     A
00397B 904D82            MOV     DPTR,#buf
00397E F0                MOVX    @DPTR,A
  412: 			buf[1] = 0x00;
00397F A3                INC     DPTR
003980 F0                MOVX    @DPTR,A
  413: 			buf[2] = 0x00;
003981 A3                INC     DPTR
003982 F0                MOVX    @DPTR,A
  414: 			len  =  3;
003983 904D8C            MOV     DPTR,#len
003986 7403              MOV     A,#03H
003988 F0                MOVX    @DPTR,A
  415: 			break;
003989 8119              AJMP    ?C0063?CS_COMMTO1186
  416: 		case CS_CommTo1186_ReadAd:		 	// 1 
00398B         ?C0065?CS_COMMTO1186:
  417: 			buf[1] = 0x01;
00398B 904D83            MOV     DPTR,#buf+01H
00398E 7401              MOV     A,#01H
003990 F0                MOVX    @DPTR,A
  418: 			buf[2] = 0x80;
003991 A3                INC     DPTR
003992 7480              MOV     A,#080H
003994 F0                MOVX    @DPTR,A
  419: 			buf[3] = 0x44;
003995 A3                INC     DPTR
003996 7444              MOV     A,#044H
003998 F0                MOVX    @DPTR,A
  420: 			len  =  4;
003999 904D8C            MOV     DPTR,#len
00399C 7404              MOV     A,#04H
00399E F0                MOVX    @DPTR,A
  421: 			break;			
00399F 8119              AJMP    ?C0063?CS_COMMTO1186
  422: 		case CS_CommTo1186_ReadVersion:		 // 2 
0039A1         ?C0066?CS_COMMTO1186:
  423: 			buf[1] = 0x01;
0039A1 904D83            MOV     DPTR,#buf+01H
0039A4 7401              MOV     A,#01H
0039A6 F0                MOVX    @DPTR,A
  424: 			buf[2] = 0x81;
0039A7 A3                INC     DPTR
0039A8 7481              MOV     A,#081H
0039AA F0                MOVX    @DPTR,A
  425: 			buf[3] = 0x45;
0039AB A3                INC     DPTR
0039AC 7445              MOV     A,#045H
0039AE F0                MOVX    @DPTR,A
  426: 			len  =  4;
0039AF 904D8C            MOV     DPTR,#len
0039B2 7404              MOV     A,#04H
0039B4 F0                MOVX    @DPTR,A
  427: 			break;
0039B5 8119              AJMP    ?C0063?CS_COMMTO1186
  428: 		case CS_CommTo1186_ReadTime:		 // 3 
0039B7         ?C0067?CS_COMMTO1186:
  429: 			buf[1] = 0x01;
0039B7 904D83            MOV     DPTR,#buf+01H
0039BA 7401              MOV     A,#01H
0039BC F0                MOVX    @DPTR,A
  430: 			buf[2] = 0x82;
0039BD A3                INC     DPTR
0039BE 7482              MOV     A,#082H
0039C0 F0                MOVX    @DPTR,A
  431: 			buf[3] = 0x46;
0039C1 A3                INC     DPTR
0039C2 7446              MOV     A,#046H
0039C4 F0                MOVX    @DPTR,A
  432: 			len  =  4;
0039C5 904D8C            MOV     DPTR,#len
0039C8 7404              MOV     A,#04H
0039CA F0                MOVX    @DPTR,A
  433: 			break;
0039CB 8119              AJMP    ?C0063?CS_COMMTO1186
  434: 		case CS_CommTo1186_ReadRam:		 // 4 
0039CD         ?C0068?CS_COMMTO1186:
  435: 			buf[1] = 0x03;
0039CD 904D83            MOV     DPTR,#buf+01H
0039D0 7403              MOV     A,#03H
0039D2 F0                MOVX    @DPTR,A
  436: 			buf[2] = 0x83;
0039D3 A3                INC     DPTR
0039D4 7483              MOV     A,#083H
0039D6 F0                MOVX    @DPTR,A
  437: 			buf[3] = databuf[1];
0039D7 904D7F            MOV     DPTR,#databuf
0039DA E0                MOVX    A,@DPTR
0039DB FB                MOV     R3,A
0039DC A3                INC     DPTR
0039DD E0                MOVX    A,@DPTR
0039DE FA                MOV     R2,A
0039DF A3                INC     DPTR
0039E0 E0                MOVX    A,@DPTR
0039E1 F9                MOV     R1,A
0039E2 900001            MOV     DPTR,#01H
0039E5 120112            LCALL   ?C?CLDOPTR
0039E8 904D85            MOV     DPTR,#buf+03H
0039EB F0                MOVX    @DPTR,A
  438: 			buf[4] = databuf[0];	 
0039EC 1200F9            LCALL   ?C?CLDPTR
0039EF 904D86            MOV     DPTR,#buf+04H
0039F2 F0                MOVX    @DPTR,A
  439: 			buf[5] =  CS_CommTo1186_Xor(buf,5);
0039F3 7B01              MOV     R3,#01H
0039F5 7A4D              MOV     R2,#HIGH buf
0039F7 7982              MOV     R1,#LOW buf
0039F9 7D05              MOV     R5,#05H
0039FB 9129              ACALL   _CS_CommTo1186_Xor
0039FD 904D87            MOV     DPTR,#buf+05H
003A00 EF                MOV     A,R7
003A01 F0                MOVX    @DPTR,A
  440: 			len  =  6;
003A02 904D8C            MOV     DPTR,#len
003A05 7406              MOV     A,#06H
003A07 F0                MOVX    @DPTR,A
  441: 			break;
003A08 8119              AJMP    ?C0063?CS_COMMTO1186
  442: 		case CS_CommTo1186_ReadOtp:		 // 5 
003A0A         ?C0069?CS_COMMTO1186:
  443: 			buf[1] = 0x04;
003A0A 904D83            MOV     DPTR,#buf+01H
003A0D 7404              MOV     A,#04H
003A0F F0                MOVX    @DPTR,A
  444: 			buf[2] = 0x84;
003A10 A3                INC     DPTR
003A11 7484              MOV     A,#084H
003A13 F0                MOVX    @DPTR,A
  445: 			buf[3] = databuf[2];
003A14 904D7F            MOV     DPTR,#databuf
003A17 E0                MOVX    A,@DPTR
003A18 FB                MOV     R3,A
003A19 A3                INC     DPTR
003A1A E0                MOVX    A,@DPTR
003A1B FA                MOV     R2,A
003A1C A3                INC     DPTR
003A1D E0                MOVX    A,@DPTR
003A1E F9                MOV     R1,A
003A1F 900002            MOV     DPTR,#02H
003A22 120112            LCALL   ?C?CLDOPTR
003A25 904D85            MOV     DPTR,#buf+03H
003A28 F0                MOVX    @DPTR,A
  446: 			buf[4] = databuf[1];	
003A29 900001            MOV     DPTR,#01H
003A2C 120112            LCALL   ?C?CLDOPTR
003A2F 904D86            MOV     DPTR,#buf+04H
003A32 F0                MOVX    @DPTR,A
  447: 			buf[5] = databuf[0]; 
003A33 1200F9            LCALL   ?C?CLDPTR
003A36 904D87            MOV     DPTR,#buf+05H
003A39 F0                MOVX    @DPTR,A
  448: 			buf[6] = CS_CommTo1186_Xor(buf,6);
003A3A 7B01              MOV     R3,#01H
003A3C 7A4D              MOV     R2,#HIGH buf
003A3E 7982              MOV     R1,#LOW buf
003A40 7D06              MOV     R5,#06H
003A42 9129              ACALL   _CS_CommTo1186_Xor
003A44 904D88            MOV     DPTR,#buf+06H
003A47 EF                MOV     A,R7
003A48 F0                MOVX    @DPTR,A
  449: 			len  =  7;
003A49 904D8C            MOV     DPTR,#len
003A4C 7407              MOV     A,#07H
003A4E F0                MOVX    @DPTR,A
  450: 			break;
003A4F 8119              AJMP    ?C0063?CS_COMMTO1186
  451: 		case CS_CommTo1186_ReadAdZero:		 // 6 
003A51         ?C0070?CS_COMMTO1186:
  452: 			buf[1] = 0x01;
003A51 904D83            MOV     DPTR,#buf+01H
003A54 7401              MOV     A,#01H
003A56 F0                MOVX    @DPTR,A
  453: 			buf[2] = 0x85;
003A57 A3                INC     DPTR
003A58 7485              MOV     A,#085H
003A5A F0                MOVX    @DPTR,A
  454: 			buf[3] = 0x41;
003A5B A3                INC     DPTR
003A5C 7441              MOV     A,#041H
003A5E F0                MOVX    @DPTR,A
  455: 			len  =  4;
003A5F 904D8C            MOV     DPTR,#len
003A62 7404              MOV     A,#04H
003A64 F0                MOVX    @DPTR,A
  456: 			break;
003A65 8119              AJMP    ?C0063?CS_COMMTO1186
  457: 		case CS_CommTo1186_SetSleepMode:	 // 7 
003A67         ?C0071?CS_COMMTO1186:
  458: 			buf[1] = 0x05;
003A67 904D83            MOV     DPTR,#buf+01H
003A6A 7405              MOV     A,#05H
003A6C F0                MOVX    @DPTR,A
  459: 			buf[2] = 0xA0;
003A6D A3                INC     DPTR
003A6E 74A0              MOV     A,#0A0H
003A70 F0                MOVX    @DPTR,A
  460: 			buf[3] = databuf[3];
003A71 904D7F            MOV     DPTR,#databuf
003A74 E0                MOVX    A,@DPTR
003A75 FB                MOV     R3,A
003A76 A3                INC     DPTR
003A77 E0                MOVX    A,@DPTR
003A78 FA                MOV     R2,A
003A79 A3                INC     DPTR
003A7A E0                MOVX    A,@DPTR
003A7B F9                MOV     R1,A
003A7C 900003            MOV     DPTR,#03H
003A7F 120112            LCALL   ?C?CLDOPTR
003A82 904D85            MOV     DPTR,#buf+03H
003A85 F0                MOVX    @DPTR,A
  461: 			buf[4] = databuf[2];	
003A86 900002            MOV     DPTR,#02H
003A89 120112            LCALL   ?C?CLDOPTR
003A8C 904D86            MOV     DPTR,#buf+04H
003A8F F0                MOVX    @DPTR,A
  462: 			buf[5] = databuf[1];
003A90 900001            MOV     DPTR,#01H
003A93 120112            LCALL   ?C?CLDOPTR
003A96 904D87            MOV     DPTR,#buf+05H
003A99 F0                MOVX    @DPTR,A
  463: 			buf[6] = databuf[0]; 
003A9A 1200F9            LCALL   ?C?CLDPTR
003A9D 904D88            MOV     DPTR,#buf+06H
003AA0 F0                MOVX    @DPTR,A
  464: 			buf[7] = CS_CommTo1186_Xor(buf,7);
003AA1 7B01              MOV     R3,#01H
003AA3 7A4D              MOV     R2,#HIGH buf
003AA5 7982              MOV     R1,#LOW buf
003AA7 7D07              MOV     R5,#07H
003AA9 9129              ACALL   _CS_CommTo1186_Xor
003AAB 904D89            MOV     DPTR,#buf+07H
003AAE EF                MOV     A,R7
003AAF F0                MOVX    @DPTR,A
  465: 			len  =  8;
003AB0 904D8C            MOV     DPTR,#len
003AB3 7408              MOV     A,#08H
003AB5 F0                MOVX    @DPTR,A
  466: 			break;
003AB6 8119              AJMP    ?C0063?CS_COMMTO1186
  467: 		case CS_CommTo1186_SetOpenWeight:	 // 8 
003AB8         ?C0072?CS_COMMTO1186:
  468: 			buf[1] = 0x06;
003AB8 904D83            MOV     DPTR,#buf+01H
003ABB 7406              MOV     A,#06H
003ABD F0                MOVX    @DPTR,A
  469: 			buf[2] = 0xA1;
003ABE A3                INC     DPTR
003ABF 74A1              MOV     A,#0A1H
003AC1 F0                MOVX    @DPTR,A
  470: 			buf[3] = databuf[4];
003AC2 904D7F            MOV     DPTR,#databuf
003AC5 E0                MOVX    A,@DPTR
003AC6 FB                MOV     R3,A
003AC7 A3                INC     DPTR
003AC8 E0                MOVX    A,@DPTR
003AC9 FA                MOV     R2,A
003ACA A3                INC     DPTR
003ACB E0                MOVX    A,@DPTR
003ACC F9                MOV     R1,A
003ACD 900004            MOV     DPTR,#04H
003AD0 120112            LCALL   ?C?CLDOPTR
003AD3 904D85            MOV     DPTR,#buf+03H
003AD6 F0                MOVX    @DPTR,A
  471: 			buf[4] = databuf[3];	
003AD7 900003            MOV     DPTR,#03H
003ADA 120112            LCALL   ?C?CLDOPTR
003ADD 904D86            MOV     DPTR,#buf+04H
003AE0 F0                MOVX    @DPTR,A
  472: 			buf[5] = databuf[2];
003AE1 900002            MOV     DPTR,#02H
003AE4 120112            LCALL   ?C?CLDOPTR
003AE7 904D87            MOV     DPTR,#buf+05H
003AEA F0                MOVX    @DPTR,A
  473: 			buf[6] = databuf[1];
003AEB 900001            MOV     DPTR,#01H
003AEE 120112            LCALL   ?C?CLDOPTR
003AF1 904D88            MOV     DPTR,#buf+06H
003AF4 F0                MOVX    @DPTR,A
  474: 			buf[7] = databuf[0]; 
003AF5 1200F9            LCALL   ?C?CLDPTR
003AF8 904D89            MOV     DPTR,#buf+07H
003AFB F0                MOVX    @DPTR,A
  475: 			buf[8] = CS_CommTo1186_Xor(buf,8);
003AFC 7B01              MOV     R3,#01H
003AFE 7A4D              MOV     R2,#HIGH buf
003B00 7982              MOV     R1,#LOW buf
003B02 7D08              MOV     R5,#08H
003B04 9129              ACALL   _CS_CommTo1186_Xor
003B06 904D8A            MOV     DPTR,#buf+08H
003B09 EF                MOV     A,R7
003B0A F0                MOVX    @DPTR,A
  476: 			len  =  9;
003B0B 904D8C            MOV     DPTR,#len
003B0E 7409              MOV     A,#09H
003B10 F0                MOVX    @DPTR,A
  477: 			break;
003B11 8119              AJMP    ?C0063?CS_COMMTO1186
  478: 		case CS_CommTo1186_SetTime:		 // 9 
003B13         ?C0073?CS_COMMTO1186:
  479: 			buf[1] = 0x05;
003B13 904D83            MOV     DPTR,#buf+01H
003B16 7405              MOV     A,#05H
003B18 F0                MOVX    @DPTR,A
  480: 			buf[2] = 0xA2;
003B19 A3                INC     DPTR
003B1A 74A2              MOV     A,#0A2H
003B1C F0                MOVX    @DPTR,A
  481: 			buf[3] = databuf[3];
003B1D 904D7F            MOV     DPTR,#databuf
003B20 E0                MOVX    A,@DPTR
003B21 FB                MOV     R3,A
003B22 A3                INC     DPTR
003B23 E0                MOVX    A,@DPTR
003B24 FA                MOV     R2,A
003B25 A3                INC     DPTR
003B26 E0                MOVX    A,@DPTR
003B27 F9                MOV     R1,A
003B28 900003            MOV     DPTR,#03H
003B2B 120112            LCALL   ?C?CLDOPTR
003B2E 904D85            MOV     DPTR,#buf+03H
003B31 F0                MOVX    @DPTR,A
  482: 			buf[4] = databuf[2];	
003B32 900002            MOV     DPTR,#02H
003B35 120112            LCALL   ?C?CLDOPTR
003B38 904D86            MOV     DPTR,#buf+04H
003B3B F0                MOVX    @DPTR,A
  483: 			buf[5] = databuf[1];
003B3C 900001            MOV     DPTR,#01H
003B3F 120112            LCALL   ?C?CLDOPTR
003B42 904D87            MOV     DPTR,#buf+05H
003B45 F0                MOVX    @DPTR,A
  484: 			buf[6] = databuf[0]; 
003B46 1200F9            LCALL   ?C?CLDPTR
003B49 904D88            MOV     DPTR,#buf+06H
003B4C F0                MOVX    @DPTR,A
  485: 			buf[7] = CS_CommTo1186_Xor(buf,7);
003B4D 7B01              MOV     R3,#01H
003B4F 7A4D              MOV     R2,#HIGH buf
003B51 7982              MOV     R1,#LOW buf
003B53 7D07              MOV     R5,#07H
003B55 9129              ACALL   _CS_CommTo1186_Xor
003B57 904D89            MOV     DPTR,#buf+07H
003B5A EF                MOV     A,R7
003B5B F0                MOVX    @DPTR,A
  486: 			len  =  8;	
003B5C 904D8C            MOV     DPTR,#len
003B5F 7408              MOV     A,#08H
003B61 F0                MOVX    @DPTR,A
  487: 			break;
003B62 8119              AJMP    ?C0063?CS_COMMTO1186
  488: 		case CS_CommTo1186_SetRam:		 	// 10 
003B64         ?C0074?CS_COMMTO1186:
  489: 			buf[1] = 0x04;
003B64 904D83            MOV     DPTR,#buf+01H
003B67 7404              MOV     A,#04H
003B69 F0                MOVX    @DPTR,A
  490: 			buf[2] = 0xA3;
003B6A A3                INC     DPTR
003B6B 74A3              MOV     A,#0A3H
003B6D F0                MOVX    @DPTR,A
  491: 			buf[3] = databuf[2];
003B6E 904D7F            MOV     DPTR,#databuf
003B71 E0                MOVX    A,@DPTR
003B72 FB                MOV     R3,A
003B73 A3                INC     DPTR
003B74 E0                MOVX    A,@DPTR
003B75 FA                MOV     R2,A
003B76 A3                INC     DPTR
003B77 E0                MOVX    A,@DPTR
003B78 F9                MOV     R1,A
003B79 900002            MOV     DPTR,#02H
003B7C 120112            LCALL   ?C?CLDOPTR
003B7F 904D85            MOV     DPTR,#buf+03H
003B82 F0                MOVX    @DPTR,A
  492: 			buf[4] = databuf[1];	
003B83 900001            MOV     DPTR,#01H
003B86 120112            LCALL   ?C?CLDOPTR
003B89 904D86            MOV     DPTR,#buf+04H
003B8C F0                MOVX    @DPTR,A
  493: 			buf[5] = databuf[0]; 
003B8D 1200F9            LCALL   ?C?CLDPTR
003B90 904D87            MOV     DPTR,#buf+05H
003B93 F0                MOVX    @DPTR,A
  494: 			buf[6] = CS_CommTo1186_Xor(buf,6);
003B94 7B01              MOV     R3,#01H
003B96 7A4D              MOV     R2,#HIGH buf
003B98 7982              MOV     R1,#LOW buf
003B9A 7D06              MOV     R5,#06H
003B9C 9129              ACALL   _CS_CommTo1186_Xor
003B9E 904D88            MOV     DPTR,#buf+06H
003BA1 EF                MOV     A,R7
003BA2 F0                MOVX    @DPTR,A
  495: 			len  =  7;			
003BA3 904D8C            MOV     DPTR,#len
003BA6 7407              MOV     A,#07H
003BA8 F0                MOVX    @DPTR,A
  496: 			break;
003BA9 806E              SJMP    ?C0063?CS_COMMTO1186
  497: 		case CS_CommTo1186_LcdDisplay:		// 11 
003BAB         ?C0075?CS_COMMTO1186:
  498: 			buf[1] = 0x07;
003BAB 904D83            MOV     DPTR,#buf+01H
003BAE 7407              MOV     A,#07H
003BB0 F0                MOVX    @DPTR,A
  499: 			buf[2] = 0xe0;
003BB1 A3                INC     DPTR
003BB2 74E0              MOV     A,#0E0H
003BB4 F0                MOVX    @DPTR,A
  500: 			buf[3] = databuf[5];
003BB5 904D7F            MOV     DPTR,#databuf
003BB8 E0                MOVX    A,@DPTR
003BB9 FB                MOV     R3,A
003BBA A3                INC     DPTR
003BBB E0                MOVX    A,@DPTR
003BBC FA                MOV     R2,A
003BBD A3                INC     DPTR
003BBE E0                MOVX    A,@DPTR
003BBF F9                MOV     R1,A
003BC0 900005            MOV     DPTR,#05H
003BC3 120112            LCALL   ?C?CLDOPTR
003BC6 904D85            MOV     DPTR,#buf+03H
003BC9 F0                MOVX    @DPTR,A
  501: 			buf[4] = databuf[4];
003BCA 900004            MOV     DPTR,#04H
003BCD 120112            LCALL   ?C?CLDOPTR
003BD0 904D86            MOV     DPTR,#buf+04H
003BD3 F0                MOVX    @DPTR,A
  502: 			buf[5] = databuf[3];
003BD4 900003            MOV     DPTR,#03H
003BD7 120112            LCALL   ?C?CLDOPTR
003BDA 904D87            MOV     DPTR,#buf+05H
003BDD F0                MOVX    @DPTR,A
  503: 			buf[6] = databuf[2];
003BDE 900002            MOV     DPTR,#02H
003BE1 120112            LCALL   ?C?CLDOPTR
003BE4 904D88            MOV     DPTR,#buf+06H
003BE7 F0                MOVX    @DPTR,A
  504: 			buf[7] = databuf[1];
003BE8 900001            MOV     DPTR,#01H
003BEB 120112            LCALL   ?C?CLDOPTR
003BEE 904D89            MOV     DPTR,#buf+07H
003BF1 F0                MOVX    @DPTR,A
  505: 			buf[8] = databuf[0];		 
003BF2 1200F9            LCALL   ?C?CLDPTR
003BF5 904D8A            MOV     DPTR,#buf+08H
003BF8 F0                MOVX    @DPTR,A
  506: 			buf[9] = CS_CommTo1186_Xor(buf,9);
003BF9 7B01              MOV     R3,#01H
003BFB 7A4D              MOV     R2,#HIGH buf
003BFD 7982              MOV     R1,#LOW buf
003BFF 7D09              MOV     R5,#09H
003C01 9129              ACALL   _CS_CommTo1186_Xor
003C03 904D8B            MOV     DPTR,#buf+09H
003C06 EF                MOV     A,R7
003C07 F0                MOVX    @DPTR,A
  507: 			len  =  10;
003C08 A3                INC     DPTR
003C09 740A              MOV     A,#0AH
003C0B F0                MOVX    @DPTR,A
  508: 			break;
003C0C 800B              SJMP    ?C0063?CS_COMMTO1186
  509: 		default:		
003C0E         ?C0076?CS_COMMTO1186:
  510: 			buf[1] = 0x00;
003C0E E4                CLR     A
003C0F 904D83            MOV     DPTR,#buf+01H
003C12 F0                MOVX    @DPTR,A
  511: 			len   = 2;
003C13 904D8C            MOV     DPTR,#len
003C16 7402              MOV     A,#02H
003C18 F0                MOVX    @DPTR,A
  512: 			break;
  513: 		}
003C19         ?C0063?CS_COMMTO1186:
  514: 	YC_UARTSendData(buf, len);
003C19 7B01              MOV     R3,#01H
003C1B 7A4D              MOV     R2,#HIGH buf
003C1D 7982              MOV     R1,#LOW buf
003C1F 904D8C            MOV     DPTR,#len
003C22 E0                MOVX    A,@DPTR
003C23 FD                MOV     R5,A
003C24 7C00              MOV     R4,#00H
003C26 022480            LJMP    _YC_UARTSendData
  515: }
----- FUNCTION _CS_CommTo1186_SendCmd (END) -------


----- FUNCTION _CS_CommTo1186_Xor (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  392: u8_t CS_CommTo1186_Xor(u8_t * buf,u8_t len)
  393: {
003C29 904E5C            MOV     DPTR,#buf
003C2C EB                MOV     A,R3
003C2D F0                MOVX    @DPTR,A
003C2E A3                INC     DPTR
003C2F EA                MOV     A,R2
003C30 F0                MOVX    @DPTR,A
003C31 A3                INC     DPTR
003C32 E9                MOV     A,R1
003C33 F0                MOVX    @DPTR,A
;---- Variable 'len' assigned to Register 'R5' ----
  394: 	u8_t	i;
  395: 	for(i=0;i<len;i++)
;---- Variable 'i' assigned to Register 'R7' ----
003C34 E4                CLR     A
003C35 FF                MOV     R7,A
003C36         ?C0059?CS_COMMTO1186:
003C36 EF                MOV     A,R7
003C37 C3                CLR     C
003C38 9D                SUBB    A,R5
003C39 5035              JNC     ?C0060?CS_COMMTO1186
  396: 		{
  397: 		*(buf+9) = *(buf+9) ^	*(buf+i);
003C3B 904E5C            MOV     DPTR,#buf
003C3E E0                MOVX    A,@DPTR
003C3F FB                MOV     R3,A
003C40 A3                INC     DPTR
003C41 E0                MOVX    A,@DPTR
003C42 FA                MOV     R2,A
003C43 A3                INC     DPTR
003C44 E0                MOVX    A,@DPTR
003C45 2409              ADD     A,#09H
003C47 F9                MOV     R1,A
003C48 E4                CLR     A
003C49 3A                ADDC    A,R2
003C4A FA                MOV     R2,A
003C4B C002              PUSH    AR2
003C4D C001              PUSH    AR1
003C4F 1200F9            LCALL   ?C?CLDPTR
003C52 FE                MOV     R6,A
003C53 904E5C            MOV     DPTR,#buf
003C56 E0                MOVX    A,@DPTR
003C57 A3                INC     DPTR
003C58 E0                MOVX    A,@DPTR
003C59 FA                MOV     R2,A
003C5A A3                INC     DPTR
003C5B E0                MOVX    A,@DPTR
003C5C F9                MOV     R1,A
003C5D 8F82              MOV     DPL,R7
003C5F 758300            MOV     DPH,#00H
003C62 120112            LCALL   ?C?CLDOPTR
003C65 6E                XRL     A,R6
003C66 D001              POP     AR1
003C68 D002              POP     AR2
003C6A 12013F            LCALL   ?C?CSTPTR
  398: 		}
003C6D 0F                INC     R7
003C6E 80C6              SJMP    ?C0059?CS_COMMTO1186
003C70         ?C0060?CS_COMMTO1186:
  399: 	return *(buf+9);
003C70 904E5C            MOV     DPTR,#buf
003C73 E0                MOVX    A,@DPTR
003C74 FB                MOV     R3,A
003C75 A3                INC     DPTR
003C76 E0                MOVX    A,@DPTR
003C77 FA                MOV     R2,A
003C78 A3                INC     DPTR
003C79 E0                MOVX    A,@DPTR
003C7A F9                MOV     R1,A
003C7B 900009            MOV     DPTR,#09H
003C7E 120112            LCALL   ?C?CLDOPTR
003C81 FF                MOV     R7,A
  400: }
003C82 22                RET     
----- FUNCTION _CS_CommTo1186_Xor (END) -------


----- FUNCTION CS_ScaleDisplay_Debug (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
   54: void CS_ScaleDisplay_Debug()
   55: {
   56: 	u8_t buf[5];
   57: 	CS_ScaleDisplay_HexToBcd(R_Debug_temp,buf);
003C83 904CC7            MOV     DPTR,#R_Debug_temp
003C86 E0                MOVX    A,@DPTR
003C87 FE                MOV     R6,A
003C88 A3                INC     DPTR
003C89 E0                MOVX    A,@DPTR
003C8A FF                MOV     R7,A
003C8B 7B01              MOV     R3,#01H
003C8D 7A4E              MOV     R2,#HIGH buf
003C8F 793F              MOV     R1,#LOW buf
003C91 B10F              ACALL   _CS_ScaleDisplay_HexToBcd
   58: 		
   59: 	CS_Lcd_Send_Data[0] = CS_ScaleDisplay_LookUpTable(buf[1]);
003C93 904E40            MOV     DPTR,#buf+01H
003C96 E0                MOVX    A,@DPTR
003C97 FF                MOV     R7,A
003C98 1217CE            LCALL   _CS_ScaleDisplay_LookUpTable
003C9B 904D23            MOV     DPTR,#CS_Lcd_Send_Data
003C9E EF                MOV     A,R7
003C9F F0                MOVX    @DPTR,A
   60: 	CS_Lcd_Send_Data[1] = CS_ScaleDisplay_LookUpTable(buf[2]);
003CA0 904E41            MOV     DPTR,#buf+02H
003CA3 E0                MOVX    A,@DPTR
003CA4 FF                MOV     R7,A
003CA5 1217CE            LCALL   _CS_ScaleDisplay_LookUpTable
003CA8 904D24            MOV     DPTR,#CS_Lcd_Send_Data+01H
003CAB EF                MOV     A,R7
003CAC F0                MOVX    @DPTR,A
   61: 	CS_Lcd_Send_Data[2] = CS_ScaleDisplay_LookUpTable(buf[3]);
003CAD 904E42            MOV     DPTR,#buf+03H
003CB0 E0                MOVX    A,@DPTR
003CB1 FF                MOV     R7,A
003CB2 1217CE            LCALL   _CS_ScaleDisplay_LookUpTable
003CB5 904D25            MOV     DPTR,#CS_Lcd_Send_Data+02H
003CB8 EF                MOV     A,R7
003CB9 F0                MOVX    @DPTR,A
   62: 	CS_Lcd_Send_Data[3] = CS_ScaleDisplay_LookUpTable(buf[4]);	
003CBA 904E43            MOV     DPTR,#buf+04H
003CBD E0                MOVX    A,@DPTR
003CBE FF                MOV     R7,A
003CBF 1217CE            LCALL   _CS_ScaleDisplay_LookUpTable
003CC2 904D26            MOV     DPTR,#CS_Lcd_Send_Data+03H
003CC5 EF                MOV     A,R7
003CC6 F0                MOVX    @DPTR,A
   63: 		
   64: 	CS_ScaleDisplay_LcdBuf_rShift4();
003CC7 91D3              ACALL   CS_ScaleDisplay_LcdBuf_rShift4
   65: 
   66: 	CS_CommTo1186_SendCmd(CS_CommTo1186_LcdDisplay,CS_Lcd_Send_Data);
003CC9 7B01              MOV     R3,#01H
003CCB 7A4D              MOV     R2,#HIGH CS_Lcd_Send_Data
003CCD 7923              MOV     R1,#LOW CS_Lcd_Send_Data
003CCF 7FE0              MOV     R7,#0E0H
003CD1 2124              AJMP    _CS_CommTo1186_SendCmd
   67: 
----- FUNCTION CS_ScaleDisplay_Debug (END) -------


----- FUNCTION CS_ScaleDisplay_LcdBuf_rShift4 (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  195: void CS_ScaleDisplay_LcdBuf_rShift4()
  196: {
  197: 	CS_Lcd_Send_Data[4] = (CS_Lcd_Send_Data[4] & 0xf0) | (CS_Lcd_Send_Data[3] & 0x0f);
  198: 	CS_Lcd_Send_Data[3] = (CS_Lcd_Send_Data[3] & 0xf0) | (CS_Lcd_Send_Data[2] & 0x0f);
003CD3 904D26            MOV     DPTR,#CS_Lcd_Send_Data+03H
003CD6 E0                MOVX    A,@DPTR
003CD7 540F              ANL     A,#0FH
003CD9 FF                MOV     R7,A
003CDA A3                INC     DPTR
003CDB E0                MOVX    A,@DPTR
003CDC 54F0              ANL     A,#0F0H
003CDE 4F                ORL     A,R7
003CDF F0                MOVX    @DPTR,A
  199: 	CS_Lcd_Send_Data[2] = (CS_Lcd_Send_Data[2] & 0xf0) | (CS_Lcd_Send_Data[1] & 0x0f);
003CE0 904D25            MOV     DPTR,#CS_Lcd_Send_Data+02H
003CE3 E0                MOVX    A,@DPTR
003CE4 540F              ANL     A,#0FH
003CE6 FF                MOV     R7,A
003CE7 A3                INC     DPTR
003CE8 E0                MOVX    A,@DPTR
003CE9 54F0              ANL     A,#0F0H
003CEB 4F                ORL     A,R7
003CEC F0                MOVX    @DPTR,A
  200: 	CS_Lcd_Send_Data[1] = (CS_Lcd_Send_Data[1] & 0xf0) | (CS_Lcd_Send_Data[0] & 0x0f);
003CED 904D24            MOV     DPTR,#CS_Lcd_Send_Data+01H
003CF0 E0                MOVX    A,@DPTR
003CF1 540F              ANL     A,#0FH
003CF3 FF                MOV     R7,A
003CF4 A3                INC     DPTR
003CF5 E0                MOVX    A,@DPTR
003CF6 54F0              ANL     A,#0F0H
003CF8 4F                ORL     A,R7
003CF9 F0                MOVX    @DPTR,A
  201: 	CS_Lcd_Send_Data[0] = CS_Lcd_Send_Data[0] & 0xf0;
003CFA 904D23            MOV     DPTR,#CS_Lcd_Send_Data
003CFD E0                MOVX    A,@DPTR
003CFE 540F              ANL     A,#0FH
003D00 FF                MOV     R7,A
003D01 A3                INC     DPTR
003D02 E0                MOVX    A,@DPTR
003D03 54F0              ANL     A,#0F0H
003D05 4F                ORL     A,R7
003D06 F0                MOVX    @DPTR,A
  202: }
003D07 904D23            MOV     DPTR,#CS_Lcd_Send_Data
003D0A E0                MOVX    A,@DPTR
003D0B 54F0              ANL     A,#0F0H
003D0D F0                MOVX    @DPTR,A
  203: 
003D0E 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdBuf_rShift4 (END) -------


----- FUNCTION _CS_ScaleDisplay_HexToBcd (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  205: void CS_ScaleDisplay_HexToBcd(u16_t HexData,u8_t* buf)
  206: {
003D0F 904E28            MOV     DPTR,#HexData
003D12 EE                MOV     A,R6
003D13 F0                MOVX    @DPTR,A
003D14 A3                INC     DPTR
003D15 EF                MOV     A,R7
003D16 F0                MOVX    @DPTR,A
003D17 A3                INC     DPTR
003D18 EB                MOV     A,R3
003D19 F0                MOVX    @DPTR,A
003D1A A3                INC     DPTR
003D1B EA                MOV     A,R2
003D1C F0                MOVX    @DPTR,A
003D1D A3                INC     DPTR
003D1E E9                MOV     A,R1
003D1F F0                MOVX    @DPTR,A
  207: 	u8_t  i;
  208: 	for(i=0;i<5;i++)
003D20 E4                CLR     A
003D21 A3                INC     DPTR
003D22 F0                MOVX    @DPTR,A
003D23         ?C0036?CS_SCALEDISPLAY:
003D23 904E2D            MOV     DPTR,#i
003D26 E0                MOVX    A,@DPTR
003D27 FB                MOV     R3,A
003D28 C3                CLR     C
003D29 9405              SUBB    A,#05H
003D2B 504C              JNC     ?C0039?CS_SCALEDISPLAY
  209: 		{
  210: 		buf[4-i] =  HexData%10;
003D2D 904E28            MOV     DPTR,#HexData
003D30 E0                MOVX    A,@DPTR
003D31 FE                MOV     R6,A
003D32 A3                INC     DPTR
003D33 E0                MOVX    A,@DPTR
003D34 FF                MOV     R7,A
003D35 7C00              MOV     R4,#00H
003D37 7D0A              MOV     R5,#0AH
003D39 120173            LCALL   ?C?UIDIV
003D3C AF05              MOV     R7,AR5
003D3E EB                MOV     A,R3
003D3F FD                MOV     R5,A
003D40 C3                CLR     C
003D41 7404              MOV     A,#04H
003D43 9D                SUBB    A,R5
003D44 FD                MOV     R5,A
003D45 E4                CLR     A
003D46 9400              SUBB    A,#00H
003D48 FC                MOV     R4,A
003D49 A3                INC     DPTR
003D4A E0                MOVX    A,@DPTR
003D4B FB                MOV     R3,A
003D4C A3                INC     DPTR
003D4D E0                MOVX    A,@DPTR
003D4E FA                MOV     R2,A
003D4F A3                INC     DPTR
003D50 E0                MOVX    A,@DPTR
003D51 F9                MOV     R1,A
003D52 8D82              MOV     DPL,R5
003D54 8C83              MOV     DPH,R4
003D56 EF                MOV     A,R7
003D57 120151            LCALL   ?C?CSTOPTR
  211: 		HexData = HexData /10;
003D5A 904E28            MOV     DPTR,#HexData
003D5D E0                MOVX    A,@DPTR
003D5E FE                MOV     R6,A
003D5F A3                INC     DPTR
003D60 E0                MOVX    A,@DPTR
003D61 FF                MOV     R7,A
003D62 7C00              MOV     R4,#00H
003D64 7D0A              MOV     R5,#0AH
003D66 120173            LCALL   ?C?UIDIV
003D69 904E28            MOV     DPTR,#HexData
003D6C EE                MOV     A,R6
003D6D F0                MOVX    @DPTR,A
003D6E A3                INC     DPTR
003D6F EF                MOV     A,R7
003D70 F0                MOVX    @DPTR,A
  212: 		}	
003D71 904E2D            MOV     DPTR,#i
003D74 E0                MOVX    A,@DPTR
003D75 04                INC     A
003D76 F0                MOVX    @DPTR,A
003D77 80AA              SJMP    ?C0036?CS_SCALEDISPLAY
  213: }
003D79         ?C0039?CS_SCALEDISPLAY:
003D79 22                RET     
----- FUNCTION _CS_ScaleDisplay_HexToBcd (END) -------


----- FUNCTION CS_1186Com_ReadAdc_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  132: void CS_1186Com_ReadAdc_Proc(void)
  133: {
  134: 	u32_t	data_rec;
  135: 	
  136: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAd)
003D7A 904D50            MOV     DPTR,#R_Weight_Com_Coo
003D7D E0                MOVX    A,@DPTR
003D7E B4801E            CJNE    A,#080H,?C0017?CS_COMMTO1186
  137: 		{
  138: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadAd,0);
003D81 7B00              MOV     R3,#00H
003D83 7A00              MOV     R2,#00H
003D85 7900              MOV     R1,#00H
003D87 7F80              MOV     R7,#080H
003D89 3124              ACALL   _CS_CommTo1186_SendCmd
  139: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadAd;
003D8B 904D51            MOV     DPTR,#R_Weight_Com_Coo+01H
003D8E 7480              MOV     A,#080H
003D90 F0                MOVX    @DPTR,A
  140: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadAdStandby;
003D91 904D50            MOV     DPTR,#R_Weight_Com_Coo
003D94 7401              MOV     A,#01H
003D96 F0                MOVX    @DPTR,A
  141: 		uartTimeoutCnt=0;
003D97 E4                CLR     A
003D98 904D64            MOV     DPTR,#uartTimeoutCnt
003D9B F0                MOVX    @DPTR,A
  142: 		YC_UARTClearBuffer();
003D9C 120597            LCALL   YC_UARTClearBuffer
  143: 		}
003D9F         ?C0017?CS_COMMTO1186:
  144: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAdStandby)
003D9F 904D50            MOV     DPTR,#R_Weight_Com_Coo
003DA2 E0                MOVX    A,@DPTR
003DA3 6401              XRL     A,#01H
003DA5 6002              JZ      $ + 4H
003DA7 C147              AJMP    ?C0024?CS_COMMTO1186
  145: 		{						
  146: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 9)==9)
003DA9 7B01              MOV     R3,#01H
003DAB 7A4D              MOV     R2,#HIGH uartRcvBuf
003DAD 7940              MOV     R1,#LOW uartRcvBuf
003DAF 7D09              MOV     R5,#09H
003DB1 FC                MOV     R4,A
003DB2 1207E1            LCALL   _YC_UARTReciveDataExpected
003DB5 EF                MOV     A,R7
003DB6 6409              XRL     A,#09H
003DB8 4E                ORL     A,R6
003DB9 6002              JZ      $ + 4H
003DBB C147              AJMP    ?C0024?CS_COMMTO1186
  147: 			{						
  148: 			if(uartRcvBuf[3] == CS_CommTo1186_ReadAd)   
003DBD 904D43            MOV     DPTR,#uartRcvBuf+03H
003DC0 E0                MOVX    A,@DPTR
003DC1 6480              XRL     A,#080H
003DC3 707C              JNZ     ?C0020?CS_COMMTO1186
  149: 				{
  150: 				B_Weight_AdOk = true;
003DC5 904CD7            MOV     DPTR,#B_Weight_AdOk
003DC8 04                INC     A
003DC9 F0                MOVX    @DPTR,A
  151: 				data_rec = uartRcvBuf[4];
003DCA 904D44            MOV     DPTR,#uartRcvBuf+04H
003DCD E0                MOVX    A,@DPTR
003DCE FF                MOV     R7,A
003DCF E4                CLR     A
003DD0 FC                MOV     R4,A
003DD1 FD                MOV     R5,A
003DD2 FE                MOV     R6,A
;---- Variable 'data_rec' assigned to Register 'R4/R5/R6/R7' ----
  152: 				data_rec = (data_rec<<8) + uartRcvBuf[5];
003DD3 7808              MOV     R0,#08H
003DD5 12031F            LCALL   ?C?LSHL
003DD8 A804              MOV     R0,AR4
003DDA A905              MOV     R1,AR5
003DDC AA06              MOV     R2,AR6
003DDE AB07              MOV     R3,AR7
003DE0 A3                INC     DPTR
003DE1 E0                MOVX    A,@DPTR
003DE2 FF                MOV     R7,A
003DE3 E4                CLR     A
003DE4 FC                MOV     R4,A
003DE5 FD                MOV     R5,A
003DE6 FE                MOV     R6,A
003DE7 EB                MOV     A,R3
003DE8 2F                ADD     A,R7
003DE9 FF                MOV     R7,A
003DEA EE                MOV     A,R6
003DEB 3A                ADDC    A,R2
003DEC FE                MOV     R6,A
003DED ED                MOV     A,R5
003DEE 39                ADDC    A,R1
003DEF FD                MOV     R5,A
003DF0 EC                MOV     A,R4
003DF1 38                ADDC    A,R0
003DF2 FC                MOV     R4,A
  153: 				data_rec = (data_rec<<8) + uartRcvBuf[6];
003DF3 7808              MOV     R0,#08H
003DF5 12031F            LCALL   ?C?LSHL
003DF8 A804              MOV     R0,AR4
003DFA A905              MOV     R1,AR5
003DFC AA06              MOV     R2,AR6
003DFE AB07              MOV     R3,AR7
003E00 A3                INC     DPTR
003E01 E0                MOVX    A,@DPTR
003E02 FF                MOV     R7,A
003E03 E4                CLR     A
003E04 FC                MOV     R4,A
003E05 FD                MOV     R5,A
003E06 FE                MOV     R6,A
003E07 EB                MOV     A,R3
003E08 2F                ADD     A,R7
003E09 FF                MOV     R7,A
003E0A EE                MOV     A,R6
003E0B 3A                ADDC    A,R2
003E0C FE                MOV     R6,A
003E0D ED                MOV     A,R5
003E0E 39                ADDC    A,R1
003E0F FD                MOV     R5,A
003E10 EC                MOV     A,R4
003E11 38                ADDC    A,R0
003E12 FC                MOV     R4,A
  154: 				R_AD_Original =data_rec >> 6;	
003E13 7806              MOV     R0,#06H
003E15 12030C            LCALL   ?C?ULSHR
003E18 904CD8            MOV     DPTR,#R_AD_Original
003E1B EE                MOV     A,R6
003E1C F0                MOVX    @DPTR,A
003E1D A3                INC     DPTR
003E1E EF                MOV     A,R7
003E1F F0                MOVX    @DPTR,A
  155: 				R_1186sys_state = uartRcvBuf[7];
003E20 904D47            MOV     DPTR,#uartRcvBuf+07H
003E23 E0                MOVX    A,@DPTR
003E24 904CDA            MOV     DPTR,#R_1186sys_state
003E27 F0                MOVX    @DPTR,A
  156: 
  157: 				if(R_Scale_state==CS_Scale_state_init)
003E28 904CC5            MOV     DPTR,#R_Scale_state
003E2B E0                MOVX    A,@DPTR
003E2C 7006              JNZ     ?C0021?CS_COMMTO1186
  158: 					R_Weight_Com_Coo.now = CS_CommTo1186_Null;
003E2E 904D50            MOV     DPTR,#R_Weight_Com_Coo
003E31 F0                MOVX    @DPTR,A
003E32 8006              SJMP    ?C0022?CS_COMMTO1186
003E34         ?C0021?CS_COMMTO1186:
  159: 				else
  160: 					R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplay;
003E34 904D50            MOV     DPTR,#R_Weight_Com_Coo
003E37 74E0              MOV     A,#0E0H
003E39 F0                MOVX    @DPTR,A
003E3A         ?C0022?CS_COMMTO1186:
  161: 				R_Weight_Com_Coo.sucess=true;
003E3A 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
003E3D 7401              MOV     A,#01H
003E3F F0                MOVX    @DPTR,A
  162: 				
  163: 				}
003E40 22                RET     
003E41         ?C0020?CS_COMMTO1186:
  164: 			else
  165: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
003E41 904D64            MOV     DPTR,#uartTimeoutCnt
003E44 7415              MOV     A,#015H
003E46 F0                MOVX    @DPTR,A
  166: 			}
  167: 		}
  168: }
003E47         ?C0024?CS_COMMTO1186:
003E47 22                RET     
----- FUNCTION CS_1186Com_ReadAdc_Proc (END) -------


----- FUNCTION CS_ScaleDisplay_LcdShowNull (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  235: void CS_ScaleDisplay_LcdShowNull(void)
  236: {
  237: 	CS_Lcd_Send_Data[0] = 0x00;
  238: 	CS_Lcd_Send_Data[1] = 0x00;
003E48 E4                CLR     A
003E49 904D23            MOV     DPTR,#CS_Lcd_Send_Data
003E4C F0                MOVX    @DPTR,A
  239: 	CS_Lcd_Send_Data[2] = 0x00;
003E4D A3                INC     DPTR
003E4E F0                MOVX    @DPTR,A
  240: 	CS_Lcd_Send_Data[3] = 0x00;
003E4F A3                INC     DPTR
003E50 F0                MOVX    @DPTR,A
  241: 	CS_Lcd_Send_Data[4] = 0x00;
003E51 A3                INC     DPTR
003E52 F0                MOVX    @DPTR,A
  242: }
003E53 A3                INC     DPTR
003E54 F0                MOVX    @DPTR,A
  243: 
003E55 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdShowNull (END) -------


----- FUNCTION CS_ScaleDisplay_LcdShowAll (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  253: void CS_ScaleDisplay_LcdShowAll(void)
  254: {
  255: 	CS_Lcd_Send_Data[0] = 0xFF;
  256: 	CS_Lcd_Send_Data[1] = 0xFF;
003E56 904D23            MOV     DPTR,#CS_Lcd_Send_Data
003E59 74FF              MOV     A,#0FFH
003E5B F0                MOVX    @DPTR,A
  257: 	CS_Lcd_Send_Data[2] = 0xFF;
003E5C A3                INC     DPTR
003E5D F0                MOVX    @DPTR,A
  258: 	CS_Lcd_Send_Data[3] = 0xFF;
003E5E A3                INC     DPTR
003E5F F0                MOVX    @DPTR,A
  259: 	CS_Lcd_Send_Data[4] = 0xFF;
003E60 A3                INC     DPTR
003E61 F0                MOVX    @DPTR,A
  260: }
003E62 A3                INC     DPTR
003E63 F0                MOVX    @DPTR,A
  261: 
003E64 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdShowAll (END) -------


----- FUNCTION CS_ScaleDisplay_LcdBackup (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  263: void CS_ScaleDisplay_LcdBackup(void)
  264: {
  265: 	CS_Lcd_Send_Data_BAK[0] = CS_Lcd_Send_Data[0];
  266: 	CS_Lcd_Send_Data_BAK[1] = CS_Lcd_Send_Data[1];
003E65 904D23            MOV     DPTR,#CS_Lcd_Send_Data
003E68 E0                MOVX    A,@DPTR
003E69 904D1D            MOV     DPTR,#CS_Lcd_Send_Data_BAK
003E6C F0                MOVX    @DPTR,A
  267: 	CS_Lcd_Send_Data_BAK[2] = CS_Lcd_Send_Data[2];
003E6D 904D24            MOV     DPTR,#CS_Lcd_Send_Data+01H
003E70 E0                MOVX    A,@DPTR
003E71 904D1E            MOV     DPTR,#CS_Lcd_Send_Data_BAK+01H
003E74 F0                MOVX    @DPTR,A
  268: 	CS_Lcd_Send_Data_BAK[3] = CS_Lcd_Send_Data[3];
003E75 904D25            MOV     DPTR,#CS_Lcd_Send_Data+02H
003E78 E0                MOVX    A,@DPTR
003E79 904D1F            MOV     DPTR,#CS_Lcd_Send_Data_BAK+02H
003E7C F0                MOVX    @DPTR,A
  269: 	CS_Lcd_Send_Data_BAK[4] = CS_Lcd_Send_Data[4];	
003E7D 904D26            MOV     DPTR,#CS_Lcd_Send_Data+03H
003E80 E0                MOVX    A,@DPTR
003E81 904D20            MOV     DPTR,#CS_Lcd_Send_Data_BAK+03H
003E84 F0                MOVX    @DPTR,A
  270: }
003E85 904D27            MOV     DPTR,#CS_Lcd_Send_Data+04H
003E88 E0                MOVX    A,@DPTR
003E89 904D21            MOV     DPTR,#CS_Lcd_Send_Data_BAK+04H
003E8C F0                MOVX    @DPTR,A
  271: 
003E8D 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdBackup (END) -------


