LX51 LINKER/LOCATER V4.41                                                               03/23/2017  21:06:41  PAGE 1





ASSEMBLER CODE PACKING OF MODULE:  OUT\FW (MAIN)


----- FUNCTION main (BEGIN) -----
 FILE: 'main.c'
   20: void main()
   21: {
   22: 	R_Test++;
   23: 	systemInit();
0004C2 904C62            MOV     DPTR,#R_Test
0004C5 E0                MOVX    A,@DPTR
0004C6 04                INC     A
0004C7 F0                MOVX    @DPTR,A
   24: 	while(1) {
0004C8 120FF6            LCALL   systemInit
0004CB         ?C0001?MAIN:
   25: 		BTControlProcess();
   26: 		lxOptProcess();
0004CB 121FD1            LCALL   BTControlProcess
   27: 		//WechatProcess();
0004CE 122BD1            LCALL   lxOptProcess
   28: 		SysStatusProcess();
0004D1 B19E              ACALL   SysStatusProcess
   29: 		if(sys_state == SYS_ST_RUN) {
0004D3 904E57            MOV     DPTR,#sys_state
0004D6 E0                MOVX    A,@DPTR
0004D7 B402F1            CJNE    A,#02H,?C0001?MAIN
   30: 			YC_UtilTimerProcess();		
0004DA 1220B0            LCALL   YC_UtilTimerProcess
   31: 			CS_Scale_1186Com();		//1186通信处理
0004DD 91E5              ACALL   CS_Scale_1186Com
   32: 			CS_Scale_Proc();
0004DF 120F98            LCALL   CS_Scale_Proc
   33: 		}
   34: 	}
0004E2 80E7              SJMP    ?C0001?MAIN
0004E4 22                RET     
----- FUNCTION main (END) -------


----- FUNCTION CS_Scale_1186Com (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   19: void CS_Scale_1186Com(void)
   20: {	
   21: 	
   22: 	if(uartTimeoutCnt < CS_CommTo1186_TimeOut)	 
0004E5 904D64            MOV     DPTR,#uartTimeoutCnt
0004E8 E0                MOVX    A,@DPTR
0004E9 C3                CLR     C
0004EA 9415              SUBB    A,#015H
0004EC 502B              JNC     ?C0001?CS_COMMTO1186
   23: 		{
   24: 		
   25: 			switch(R_Scale_state)
0004EE 904CC5            MOV     DPTR,#R_Scale_state
0004F1 E0                MOVX    A,@DPTR
0004F2 24FE              ADD     A,#0FEH
0004F4 6014              JZ      ?C0004?CS_COMMTO1186
0004F6 04                INC     A
0004F7 24FC              ADD     A,#0FCH
0004F9 5016              JNC     ?C0007?CS_COMMTO1186
0004FB 2405              ADD     A,#05H
0004FD 7029              JNZ     ?C0010?CS_COMMTO1186
   26: 			{
   27: 			case CS_Scale_state_init:
0004FF         ?C0003?CS_COMMTO1186:
   28: 				CS_1186Com_Reset_Proc();			
0004FF D1FD              ACALL   CS_1186Com_Reset_Proc
   29: 				CS_1186Com_ReadMacAdress_Proc();
000501 121871            LCALL   CS_1186Com_ReadMacAdress_Proc
   30: 				CS_1186Com_ReadTime_Proc();
000504 B1DE              ACALL   CS_1186Com_ReadTime_Proc
   31: 				CS_1186Com_SetOpenWeight_Proc();
000506 F117              ACALL   CS_1186Com_SetOpenWeight_Proc
   32: 				CS_1186Com_SetLcd_Proc();
000508 801F              SJMP    CS_1186Com_SetLcd_Proc
   33: 				break;			
   34: 			case CS_Scale_state_standby:
00050A         ?C0004?CS_COMMTO1186:
   35: 				CS_1186Com_SetSleepMode_Proc();
00050A D169              ACALL   CS_1186Com_SetSleepMode_Proc
   36: 				CS_1186Com_ReadAdZero_Proc();
00050C 123DC1            LCALL   CS_1186Com_ReadAdZero_Proc
   37: 				CS_1186Com_SetLcd_Proc();
00050F 8018              SJMP    CS_1186Com_SetLcd_Proc
   38: 				break;
   39: 			case CS_Scale_state_weighting:
   40: 			case CS_Scale_state_caling:
   41: 			case CS_Scale_state_locking:
000511         ?C0007?CS_COMMTO1186:
   42: 				CS_1186Com_ReadTime_Proc();
000511 B1DE              ACALL   CS_1186Com_ReadTime_Proc
   43: 				CS_1186Com_ReadAdc_Proc();
000513 123CF2            LCALL   CS_1186Com_ReadAdc_Proc
   44: 				CS_1186Com_SetLcd_Proc();
000516 8011              SJMP    CS_1186Com_SetLcd_Proc
   45: 
   46: 				/*
   47: 				if(B_Weight_AdOk == true)
   48: 					{
   49: 					R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplay;
   50: 					B_Weight_LcdOk =false;
   51: 					}
   52: 				if(B_Weight_LcdOk == true)
   53: 					{
   54: 					R_Weight_Com_Coo.now = CS_CommTo1186_ReadAd;	
   55: 					}
   56: 				*/
   57: 				break;
   58: 			default:
   59: 				break;			
   60: 			}		
   61: 		}
000518 22                RET     
000519         ?C0001?CS_COMMTO1186:
   62: 	else
   63: 		{
   64: 		YC_UARTClearBuffer();	// fresh rec buffer
000519 B18E              ACALL   YC_UARTClearBuffer
   65: 		uartTimeoutCnt=0;
00051B E4                CLR     A
00051C 904D64            MOV     DPTR,#uartTimeoutCnt
00051F F0                MOVX    @DPTR,A
   66: 		R_Weight_Com_Coo.now = R_Weight_Com_Coo.pre;	//re send
000520 904D51            MOV     DPTR,#R_Weight_Com_Coo+01H
000523 E0                MOVX    A,@DPTR
000524 904D50            MOV     DPTR,#R_Weight_Com_Coo
000527 F0                MOVX    @DPTR,A
   67: 		}
   68: 
   69: }
000528         ?C0010?CS_COMMTO1186:
000528 22                RET     
----- FUNCTION CS_Scale_1186Com (END) -------


----- FUNCTION CS_1186Com_SetLcd_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  172: void CS_1186Com_SetLcd_Proc(void)
  173: {
  174: 
  175: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_LcdDisplay)
000529 904D50            MOV     DPTR,#R_Weight_Com_Coo
00052C E0                MOVX    A,@DPTR
00052D B4E01E            CJNE    A,#0E0H,?C0025?CS_COMMTO1186
  176: 		{
  177: 		CS_CommTo1186_SendCmd(CS_CommTo1186_LcdDisplay,CS_Lcd_Send_Data);
000530 7B01              MOV     R3,#01H
000532 7A4D              MOV     R2,#HIGH CS_Lcd_Send_Data
000534 7923              MOV     R1,#LOW CS_Lcd_Send_Data
000536 7FE0              MOV     R7,#0E0H
000538 121923            LCALL   _CS_CommTo1186_SendCmd
  178: 		R_Weight_Com_Coo.pre = CS_CommTo1186_LcdDisplay;
00053B 904D51            MOV     DPTR,#R_Weight_Com_Coo+01H
00053E 74E0              MOV     A,#0E0H
000540 F0                MOVX    @DPTR,A
  179: 		R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplayStandby;
000541 904D50            MOV     DPTR,#R_Weight_Com_Coo
000544 740B              MOV     A,#0BH
000546 F0                MOVX    @DPTR,A
  180: 		uartTimeoutCnt=0;
000547 E4                CLR     A
000548 904D64            MOV     DPTR,#uartTimeoutCnt
00054B F0                MOVX    @DPTR,A
  181: 		YC_UARTClearBuffer();
00054C B18E              ACALL   YC_UARTClearBuffer
  182: 		}
00054E         ?C0025?CS_COMMTO1186:
  183: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_LcdDisplayStandby)
00054E 904D50            MOV     DPTR,#R_Weight_Com_Coo
000551 E0                MOVX    A,@DPTR
000552 640B              XRL     A,#0BH
000554 7037              JNZ     ?C0032?CS_COMMTO1186
  184: 		{
  185: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 5)==5)
000556 7B01              MOV     R3,#01H
000558 7A4D              MOV     R2,#HIGH uartRcvBuf
00055A 7940              MOV     R1,#LOW uartRcvBuf
00055C 7D05              MOV     R5,#05H
00055E FC                MOV     R4,A
00055F F1A4              ACALL   _YC_UARTReciveDataExpected
000561 EF                MOV     A,R7
000562 6405              XRL     A,#05H
000564 4E                ORL     A,R6
000565 7026              JNZ     ?C0032?CS_COMMTO1186
  186: 			{
  187: 			if(uartRcvBuf[3] == CS_CommTo1186_LcdDisplay)    
000567 904D43            MOV     DPTR,#uartRcvBuf+03H
00056A E0                MOVX    A,@DPTR
00056B B4E019            CJNE    A,#0E0H,?C0028?CS_COMMTO1186
  188: 				{
  189: 				if(R_Scale_state==CS_Scale_state_init)
00056E 904CC5            MOV     DPTR,#R_Scale_state
000571 E0                MOVX    A,@DPTR
000572 7006              JNZ     ?C0029?CS_COMMTO1186
  190: 					R_Weight_Com_Coo.now = CS_CommTo1186_Null;
000574 904D50            MOV     DPTR,#R_Weight_Com_Coo
000577 F0                MOVX    @DPTR,A
000578 8006              SJMP    ?C0030?CS_COMMTO1186
00057A         ?C0029?CS_COMMTO1186:
  191: 				else
  192: 					R_Weight_Com_Coo.now = CS_CommTo1186_ReadAd;
00057A 904D50            MOV     DPTR,#R_Weight_Com_Coo
00057D 7480              MOV     A,#080H
00057F F0                MOVX    @DPTR,A
000580         ?C0030?CS_COMMTO1186:
  193: 				R_Weight_Com_Coo.sucess=true;		
000580 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
000583 7401              MOV     A,#01H
000585 F0                MOVX    @DPTR,A
  194: 				}
000586 22                RET     
000587         ?C0028?CS_COMMTO1186:
  195: 			else
  196: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
000587 904D64            MOV     DPTR,#uartTimeoutCnt
00058A 7415              MOV     A,#015H
00058C F0                MOVX    @DPTR,A
  197: 			}	
  198: 		}
  199: }
00058D         ?C0032?CS_COMMTO1186:
00058D 22                RET     
----- FUNCTION CS_1186Com_SetLcd_Proc (END) -------


----- FUNCTION YC_UARTClearBuffer (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  409: void YC_UARTClearBuffer(void)
  410: {
  411: 	REG_UART_RX_PTR_R = REG_UART_RX_PTR_W;
  412: 	//REG_UART_TX_PTR_W = REG_UART_TX_PTR_R;
00058E 908116            MOV     DPTR,#08116H
000591 E0                MOVX    A,@DPTR
000592 FF                MOV     R7,A
000593 A3                INC     DPTR
000594 E0                MOVX    A,@DPTR
000595 908058            MOV     DPTR,#08058H
000598 CF                XCH     A,R7
000599 F0                MOVX    @DPTR,A
00059A A3                INC     DPTR
00059B EF                MOV     A,R7
00059C F0                MOVX    @DPTR,A
  413: }
00059D 22                RET     
----- FUNCTION YC_UARTClearBuffer (END) -------


----- FUNCTION SysStatusProcess (BEGIN) -----
 FILE: 'system.c'
  174: void SysStatusProcess(void) 
  175: {
  176: 	if( sys_state == SYS_ST_IDLE) {	//can enter LPM
  177: 		if(bleConnStatus ==BLE_STATUS_DISCONN)
00059E 904E57            MOV     DPTR,#sys_state
0005A1 E0                MOVX    A,@DPTR
0005A2 B40121            CJNE    A,#01H,?C0029?SYSTEM
  178: 		{
0005A5 904C5B            MOV     DPTR,#bleConnStatus
0005A8 E0                MOVX    A,@DPTR
0005A9 7032              JNZ     ?C0034?SYSTEM
  179: 			YC_UARTWaitSendData();
  180: 			YC_UARTClearBuffer();
0005AB D157              ACALL   YC_UARTWaitSendData
  181: 		    	LPM_ENABLE();
0005AD B18E              ACALL   YC_UARTClearBuffer
  182: 
0005AF 9049FE            MOV     DPTR,#049FEH
0005B2 7401              MOV     A,#01H
0005B4 F0                MOVX    @DPTR,A
  183: 			btCmdBuf.len = 0x01;
0005B5 904C63            MOV     DPTR,#btCmdBuf
0005B8 F0                MOVX    @DPTR,A
  184: 			btCmdBuf.DATA[0] = CS_CMD_SLEEP_REQ;
0005B9 A3                INC     DPTR
0005BA 7420              MOV     A,#020H
0005BC F0                MOVX    @DPTR,A
  185: 			BT_CmdFifoIn(&btCmdBuf);
0005BD 7B01              MOV     R3,#01H
0005BF 7A4C              MOV     R2,#HIGH btCmdBuf
0005C1 7963              MOV     R1,#LOW btCmdBuf
0005C3 022680            LJMP    _BT_CmdFifoIn
  186: 
  187: 				
  188: 		}
  189: 	}
0005C6         ?C0029?SYSTEM:
  190: 	else if( sys_state == SYS_ST_SLEEP) {//can enter LPM
0005C6 904E57            MOV     DPTR,#sys_state
0005C9 E0                MOVX    A,@DPTR
0005CA B4030B            CJNE    A,#03H,?C0032?SYSTEM
  191: 		YC_UARTWaitSendData();
0005CD D157              ACALL   YC_UARTWaitSendData
  192: 		YC_UARTClearBuffer();
0005CF B18E              ACALL   YC_UARTClearBuffer
  193: 	    	LPM_ENABLE();
0005D1 9049FE            MOV     DPTR,#049FEH
0005D4 7401              MOV     A,#01H
0005D6 F0                MOVX    @DPTR,A
  194: 	} 
0005D7 22                RET     
0005D8         ?C0032?SYSTEM:
  195: 	else {
  196: 		LPM_DISABLE();
0005D8 9049FE            MOV     DPTR,#049FEH
0005DB E4                CLR     A
0005DC F0                MOVX    @DPTR,A
  197: 	}
  198: }
0005DD         ?C0034?SYSTEM:
0005DD 22                RET     
----- FUNCTION SysStatusProcess (END) -------


----- FUNCTION CS_1186Com_ReadTime_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  203: void CS_1186Com_ReadTime_Proc(void)
  204: {
  205: 	//static u8_t xdata temp=0;
  206: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadTime)
0005DE 904D50            MOV     DPTR,#R_Weight_Com_Coo
0005E1 E0                MOVX    A,@DPTR
0005E2 B4821E            CJNE    A,#082H,?C0033?CS_COMMTO1186
  207: 		{
  208: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadTime,0);
0005E5 7B00              MOV     R3,#00H
0005E7 7A00              MOV     R2,#00H
0005E9 7900              MOV     R1,#00H
0005EB 7F82              MOV     R7,#082H
0005ED 121923            LCALL   _CS_CommTo1186_SendCmd
  209: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadTime;
0005F0 904D51            MOV     DPTR,#R_Weight_Com_Coo+01H
0005F3 7482              MOV     A,#082H
0005F5 F0                MOVX    @DPTR,A
  210: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadTimeStandby;
0005F6 904D50            MOV     DPTR,#R_Weight_Com_Coo
0005F9 7403              MOV     A,#03H
0005FB F0                MOVX    @DPTR,A
  211: 		uartTimeoutCnt=0;
0005FC E4                CLR     A
0005FD 904D64            MOV     DPTR,#uartTimeoutCnt
000600 F0                MOVX    @DPTR,A
  212: 		YC_UARTClearBuffer();
000601 B18E              ACALL   YC_UARTClearBuffer
  213: 		}
000603         ?C0033?CS_COMMTO1186:
  214: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadTimeStandby)
000603 904D50            MOV     DPTR,#R_Weight_Com_Coo
000606 E0                MOVX    A,@DPTR
000607 6403              XRL     A,#03H
000609 704B              JNZ     ?C0038?CS_COMMTO1186
  215: 		{
  216: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 9)==9)
00060B 7B01              MOV     R3,#01H
00060D 7A4D              MOV     R2,#HIGH uartRcvBuf
00060F 7940              MOV     R1,#LOW uartRcvBuf
000611 7D09              MOV     R5,#09H
000613 FC                MOV     R4,A
000614 F1A4              ACALL   _YC_UARTReciveDataExpected
000616 EF                MOV     A,R7
000617 6409              XRL     A,#09H
000619 4E                ORL     A,R6
00061A 703A              JNZ     ?C0038?CS_COMMTO1186
  217: 			{
  218: 			if(uartRcvBuf[3] == CS_CommTo1186_ReadTime)    
00061C 904D43            MOV     DPTR,#uartRcvBuf+03H
00061F E0                MOVX    A,@DPTR
000620 B4822D            CJNE    A,#082H,?C0036?CS_COMMTO1186
  219: 				{			
  220: 				//读到时间的操作
  221: 				R_1186_RTC[3] = uartRcvBuf[4];
000623 A3                INC     DPTR
000624 E0                MOVX    A,@DPTR
000625 904CD6            MOV     DPTR,#R_1186_RTC+03H
000628 F0                MOVX    @DPTR,A
  222: 				R_1186_RTC[2] = uartRcvBuf[5];
000629 904D45            MOV     DPTR,#uartRcvBuf+05H
00062C E0                MOVX    A,@DPTR
00062D 904CD5            MOV     DPTR,#R_1186_RTC+02H
000630 F0                MOVX    @DPTR,A
  223: 				R_1186_RTC[1] = uartRcvBuf[6];
000631 904D46            MOV     DPTR,#uartRcvBuf+06H
000634 E0                MOVX    A,@DPTR
000635 904CD4            MOV     DPTR,#R_1186_RTC+01H
000638 F0                MOVX    @DPTR,A
  224: 				R_1186_RTC[0] = uartRcvBuf[7];
000639 904D47            MOV     DPTR,#uartRcvBuf+07H
00063C E0                MOVX    A,@DPTR
00063D 904CD3            MOV     DPTR,#R_1186_RTC
000640 F0                MOVX    @DPTR,A
  225: 
  226: 			
  227: 				/*
  228: 				R_Debug_temp=R_1186RTC.R_32;
  229: 				CS_ScaleDisplay_Debug();
  230: 				while(temp==2);
  231: 				temp=2;
  232: 				*/
  233: 				/*
  234: 				R_1186RTC.R_BYTE[3]=  uartRcvBuf[4];
  235: 				R_1186RTC.R_BYTE[2] = uartRcvBuf[5];
  236: 				R_1186RTC.R_BYTE[1] = uartRcvBuf[6];
  237: 				R_1186RTC.R_BYTE[0] = uartRcvBuf[7];
  238: 				/*
  239: 				R_1186_RTC = uartRcvBuf[4];
  240: 				R_1186_RTC = R_1186_RTC<<8;
  241: 				R_1186_RTC |= uartRcvBuf[5];
  242: 				R_1186_RTC = R_1186_RTC<<8;
  243: 				R_1186_RTC |= uartRcvBuf[6];
  244: 				R_1186_RTC = R_1186_RTC<<8;
  245: 				R_1186_RTC |= uartRcvBuf[7];
  246: 				*/
  247: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
000641 E4                CLR     A
000642 904D50            MOV     DPTR,#R_Weight_Com_Coo
000645 F0                MOVX    @DPTR,A
  248: 				R_Weight_Com_Coo.sucess=true;
000646 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
000649 04                INC     A
00064A F0                MOVX    @DPTR,A
  249: 				B_Weight_AdOk = true;
00064B 904CD7            MOV     DPTR,#B_Weight_AdOk
00064E F0                MOVX    @DPTR,A
  250: 						
  251: 				}
00064F 22                RET     
000650         ?C0036?CS_COMMTO1186:
  252: 			else
  253: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
000650 904D64            MOV     DPTR,#uartTimeoutCnt
000653 7415              MOV     A,#015H
000655 F0                MOVX    @DPTR,A
  254: 			}	
  255: 		}
  256: }
000656         ?C0038?CS_COMMTO1186:
000656 22                RET     
----- FUNCTION CS_1186Com_ReadTime_Proc (END) -------


----- FUNCTION YC_UARTWaitSendData (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  373: void YC_UARTWaitSendData(void)
  374: {
  375: 	while(ESWAP(REG_UART_TX_ITEMS));
000657         ?C0009?YC_PERIPHERAL:
  376: }
000657 90810E            MOV     DPTR,#0810EH
00065A A3                INC     DPTR
00065B E0                MOVX    A,@DPTR
00065C FC                MOV     R4,A
00065D 90810E            MOV     DPTR,#0810EH
000660 E0                MOVX    A,@DPTR
000661 FF                MOV     R7,A
000662 EC                MOV     A,R4
000663 FE                MOV     R6,A
000664 EF                MOV     A,R7
000665 4E                ORL     A,R6
000666 70EF              JNZ     ?C0009?YC_PERIPHERAL
  377: 
000668 22                RET     
----- FUNCTION YC_UARTWaitSendData (END) -------


----- FUNCTION CS_1186Com_SetSleepMode_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  260: void CS_1186Com_SetSleepMode_Proc(void)
  261: {
  262: 	u16_t	R_AD_Zero;
  263: 	
  264: 	R_AD_Zero = CS_Scale_ZeroProc(GetRunningZero,0);
000669 E4                CLR     A
00066A FD                MOV     R5,A
00066B FC                MOV     R4,A
00066C 7F01              MOV     R7,#01H
00066E 1212F7            LCALL   _CS_Scale_ZeroProc
;---- Variable 'R_AD_Zero' assigned to Register 'R4/R5' ----
000671 AD07              MOV     R5,AR7
000673 AC06              MOV     R4,AR6
  265: 		
  266: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetSleepMode)
000675 904D50            MOV     DPTR,#R_Weight_Com_Coo
000678 E0                MOVX    A,@DPTR
000679 64A0              XRL     A,#0A0H
00067B 704E              JNZ     ?C0039?CS_COMMTO1186
  267: 		{
  268: 		
  269: 		uartTxBuf[0]= 0x91;
00067D 904D54            MOV     DPTR,#uartTxBuf
000680 7491              MOV     A,#091H
000682 F0                MOVX    @DPTR,A
  270: 		uartTxBuf[1]= R_AD_Zero<<6;
000683 ED                MOV     A,R5
000684 7806              MOV     R0,#06H
000686         ?C0078?CS_COMMTO1186:
000686 C3                CLR     C
000687 33                RLC     A
000688 CE                XCH     A,R6
000689 33                RLC     A
00068A CE                XCH     A,R6
00068B D8F9              DJNZ    R0,?C0078?CS_COMMTO1186
00068D 904D55            MOV     DPTR,#uartTxBuf+01H
000690 F0                MOVX    @DPTR,A
  271: 		uartTxBuf[2]= R_AD_Zero>>2;
000691 ED                MOV     A,R5
000692 AE04              MOV     R6,AR4
000694 7802              MOV     R0,#02H
000696         ?C0079?CS_COMMTO1186:
000696 CE                XCH     A,R6
000697 C3                CLR     C
000698 13                RRC     A
000699 CE                XCH     A,R6
00069A 13                RRC     A
00069B D8F9              DJNZ    R0,?C0079?CS_COMMTO1186
00069D 904D56            MOV     DPTR,#uartTxBuf+02H
0006A0 F0                MOVX    @DPTR,A
  272: 		uartTxBuf[3]= R_AD_Zero>>10;
0006A1 EC                MOV     A,R4
0006A2 13                RRC     A
0006A3 13                RRC     A
0006A4 543F              ANL     A,#03FH
0006A6 A3                INC     DPTR
0006A7 F0                MOVX    @DPTR,A
  273: 		uartTxBuf[3]|= 0x80;
0006A8 4480              ORL     A,#080H
0006AA F0                MOVX    @DPTR,A
  274: 		CS_CommTo1186_SendCmd(CS_CommTo1186_SetSleepMode,uartTxBuf);
0006AB 7B01              MOV     R3,#01H
0006AD 7A4D              MOV     R2,#HIGH uartTxBuf
0006AF 7954              MOV     R1,#LOW uartTxBuf
0006B1 7FA0              MOV     R7,#0A0H
0006B3 121923            LCALL   _CS_CommTo1186_SendCmd
  275: 		
  276: 		YC_UARTWaitSendData();
0006B6 D157              ACALL   YC_UARTWaitSendData
  277: 		
  278: 		R_Weight_Com_Coo.pre = CS_CommTo1186_SetSleepMode;
0006B8 904D51            MOV     DPTR,#R_Weight_Com_Coo+01H
0006BB 74A0              MOV     A,#0A0H
0006BD F0                MOVX    @DPTR,A
  279: 		R_Weight_Com_Coo.now = CS_CommTo1186_SetSleepModeStandby;
0006BE 904D50            MOV     DPTR,#R_Weight_Com_Coo
0006C1 7407              MOV     A,#07H
0006C3 F0                MOVX    @DPTR,A
  280: 		uartTimeoutCnt=0;
0006C4 E4                CLR     A
0006C5 904D64            MOV     DPTR,#uartTimeoutCnt
0006C8 F0                MOVX    @DPTR,A
  281: 		YC_UARTClearBuffer();
0006C9 B18E              ACALL   YC_UARTClearBuffer
  282: 		}
0006CB         ?C0039?CS_COMMTO1186:
  283: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetSleepModeStandby)
0006CB 904D50            MOV     DPTR,#R_Weight_Com_Coo
0006CE E0                MOVX    A,@DPTR
0006CF B4072A            CJNE    A,#07H,?C0044?CS_COMMTO1186
  284: 		{
  285: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 5)==5)
0006D2 7B01              MOV     R3,#01H
0006D4 7A4D              MOV     R2,#HIGH uartRcvBuf
0006D6 7940              MOV     R1,#LOW uartRcvBuf
0006D8 7D05              MOV     R5,#05H
0006DA 7C00              MOV     R4,#00H
0006DC F1A4              ACALL   _YC_UARTReciveDataExpected
0006DE EF                MOV     A,R7
0006DF 6405              XRL     A,#05H
0006E1 4E                ORL     A,R6
0006E2 7018              JNZ     ?C0044?CS_COMMTO1186
  286: 			{
  287: 			if(uartRcvBuf[3] == CS_CommTo1186_SetSleepMode)    
0006E4 904D43            MOV     DPTR,#uartRcvBuf+03H
0006E7 E0                MOVX    A,@DPTR
0006E8 B4A00B            CJNE    A,#0A0H,?C0042?CS_COMMTO1186
  288: 				{			
  289: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
0006EB E4                CLR     A
0006EC 904D50            MOV     DPTR,#R_Weight_Com_Coo
0006EF F0                MOVX    @DPTR,A
  290: 				R_Weight_Com_Coo.sucess=true;	
0006F0 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
0006F3 04                INC     A
0006F4 F0                MOVX    @DPTR,A
  291: 				}
0006F5 22                RET     
0006F6         ?C0042?CS_COMMTO1186:
  292: 			else
  293: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
0006F6 904D64            MOV     DPTR,#uartTimeoutCnt
0006F9 7415              MOV     A,#015H
0006FB F0                MOVX    @DPTR,A
  294: 			}	
  295: 		}
  296: }
0006FC         ?C0044?CS_COMMTO1186:
0006FC 22                RET     
----- FUNCTION CS_1186Com_SetSleepMode_Proc (END) -------


----- FUNCTION CS_1186Com_Reset_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  377: void CS_1186Com_Reset_Proc(void)
  378: {
  379: 
  380: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_Reset)
0006FD 904D50            MOV     DPTR,#R_Weight_Com_Coo
000700 E0                MOVX    A,@DPTR
000701 B4C512            CJNE    A,#0C5H,?C0058?CS_COMMTO1186
  381: 		{
  382: 		CS_CommTo1186_SendCmd(CS_CommTo1186_Reset,0);
000704 7B00              MOV     R3,#00H
000706 7A00              MOV     R2,#00H
000708 7900              MOV     R1,#00H
00070A 7FC5              MOV     R7,#0C5H
00070C 121923            LCALL   _CS_CommTo1186_SendCmd
  383: 		YC_UARTClearBuffer();
00070F B18E              ACALL   YC_UARTClearBuffer
  384: 		R_Weight_Com_Coo.now=CS_CommTo1186_Null;
000711 E4                CLR     A
000712 904D50            MOV     DPTR,#R_Weight_Com_Coo
000715 F0                MOVX    @DPTR,A
  385: 		
  386: 		}
  387: 													
  388: }
000716         ?C0058?CS_COMMTO1186:
000716 22                RET     
----- FUNCTION CS_1186Com_Reset_Proc (END) -------


----- FUNCTION CS_1186Com_SetOpenWeight_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  301: void CS_1186Com_SetOpenWeight_Proc(void)
  302: {
  303: 	u16_t	R_Open_Weight;
  304: 	R_Open_Weight = CS_Scale_CaliProc(CaliProcGetOpenWeight);	//获取开机重量值
000717 7F07              MOV     R7,#07H
000719 120A04            LCALL   _CS_Scale_CaliProc
;---- Variable 'R_Open_Weight' assigned to Register 'R4/R5' ----
00071C AD07              MOV     R5,AR7
00071E AC06              MOV     R4,AR6
  305: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetOpenWeight)
000720 904D50            MOV     DPTR,#R_Weight_Com_Coo
000723 E0                MOVX    A,@DPTR
000724 64A1              XRL     A,#0A1H
000726 704A              JNZ     ?C0045?CS_COMMTO1186
  306: 		{
  307: 		uartTxBuf[0]= 0x20;
000728 904D54            MOV     DPTR,#uartTxBuf
00072B 7420              MOV     A,#020H
00072D F0                MOVX    @DPTR,A
  308: 		uartTxBuf[1]= R_Open_Weight<<6;
00072E ED                MOV     A,R5
00072F 7806              MOV     R0,#06H
000731         ?C0080?CS_COMMTO1186:
000731 C3                CLR     C
000732 33                RLC     A
000733 CE                XCH     A,R6
000734 33                RLC     A
000735 CE                XCH     A,R6
000736 D8F9              DJNZ    R0,?C0080?CS_COMMTO1186
000738 FB                MOV     R3,A
000739 904D55            MOV     DPTR,#uartTxBuf+01H
00073C F0                MOVX    @DPTR,A
  309: 		uartTxBuf[2]= R_Open_Weight>>2;
00073D ED                MOV     A,R5
00073E AE04              MOV     R6,AR4
000740 7802              MOV     R0,#02H
000742         ?C0081?CS_COMMTO1186:
000742 CE                XCH     A,R6
000743 C3                CLR     C
000744 13                RRC     A
000745 CE                XCH     A,R6
000746 13                RRC     A
000747 D8F9              DJNZ    R0,?C0081?CS_COMMTO1186
000749 FF                MOV     R7,A
00074A 904D56            MOV     DPTR,#uartTxBuf+02H
00074D F0                MOVX    @DPTR,A
  310: 		uartTxBuf[3]= R_Open_Weight<<6;
00074E A3                INC     DPTR
00074F EB                MOV     A,R3
000750 F0                MOVX    @DPTR,A
  311: 		uartTxBuf[4]= R_Open_Weight>>2;	
000751 A3                INC     DPTR
000752 EF                MOV     A,R7
000753 F0                MOVX    @DPTR,A
  312: 		CS_CommTo1186_SendCmd(CS_CommTo1186_SetOpenWeight,uartTxBuf);
000754 7B01              MOV     R3,#01H
000756 7A4D              MOV     R2,#HIGH uartTxBuf
000758 7954              MOV     R1,#LOW uartTxBuf
00075A 7FA1              MOV     R7,#0A1H
00075C 121923            LCALL   _CS_CommTo1186_SendCmd
  313: 		R_Weight_Com_Coo.pre = CS_CommTo1186_SetOpenWeight;
00075F 904D51            MOV     DPTR,#R_Weight_Com_Coo+01H
000762 74A1              MOV     A,#0A1H
000764 F0                MOVX    @DPTR,A
  314: 		R_Weight_Com_Coo.now = CS_CommTo1186_SetOpenWeightStandby;
000765 904D50            MOV     DPTR,#R_Weight_Com_Coo
000768 7408              MOV     A,#08H
00076A F0                MOVX    @DPTR,A
  315: 		uartTimeoutCnt=0;
00076B E4                CLR     A
00076C 904D64            MOV     DPTR,#uartTimeoutCnt
00076F F0                MOVX    @DPTR,A
  316: 		YC_UARTClearBuffer();
000770 B18E              ACALL   YC_UARTClearBuffer
  317: 		}
000772         ?C0045?CS_COMMTO1186:
  318: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_SetOpenWeightStandby)
000772 904D50            MOV     DPTR,#R_Weight_Com_Coo
000775 E0                MOVX    A,@DPTR
000776 B4082A            CJNE    A,#08H,?C0050?CS_COMMTO1186
  319: 		{
  320: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 5)==5)
000779 7B01              MOV     R3,#01H
00077B 7A4D              MOV     R2,#HIGH uartRcvBuf
00077D 7940              MOV     R1,#LOW uartRcvBuf
00077F 7D05              MOV     R5,#05H
000781 7C00              MOV     R4,#00H
000783 F1A4              ACALL   _YC_UARTReciveDataExpected
000785 EF                MOV     A,R7
000786 6405              XRL     A,#05H
000788 4E                ORL     A,R6
000789 7018              JNZ     ?C0050?CS_COMMTO1186
  321: 			{
  322: 			if(uartRcvBuf[3] == CS_CommTo1186_SetOpenWeight)    
00078B 904D43            MOV     DPTR,#uartRcvBuf+03H
00078E E0                MOVX    A,@DPTR
00078F B4A10B            CJNE    A,#0A1H,?C0048?CS_COMMTO1186
  323: 				{			
  324: 				//读到时间的操作
  325: 				//R_Debug_temp=uartRcvBuf[5];
  326: 				
  327: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
000792 E4                CLR     A
000793 904D50            MOV     DPTR,#R_Weight_Com_Coo
000796 F0                MOVX    @DPTR,A
  328: 				R_Weight_Com_Coo.sucess=true;
000797 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
00079A 04                INC     A
00079B F0                MOVX    @DPTR,A
  329: 				
  330: 						
  331: 				}
00079C 22                RET     
00079D         ?C0048?CS_COMMTO1186:
  332: 			else
  333: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
00079D 904D64            MOV     DPTR,#uartTimeoutCnt
0007A0 7415              MOV     A,#015H
0007A2 F0                MOVX    @DPTR,A
  334: 			}	
  335: 		}
  336: }
0007A3         ?C0050?CS_COMMTO1186:
0007A3 22                RET     
----- FUNCTION CS_1186Com_SetOpenWeight_Proc (END) -------


----- FUNCTION _YC_UARTReciveDataExpected (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  378: u16_t YC_UARTReciveDataExpected(u8_t* pbuff, u16_t len)
  379: {
0007A4 904DC8            MOV     DPTR,#pbuff
0007A7 EB                MOV     A,R3
0007A8 F0                MOVX    @DPTR,A
0007A9 A3                INC     DPTR
0007AA EA                MOV     A,R2
0007AB F0                MOVX    @DPTR,A
0007AC A3                INC     DPTR
0007AD E9                MOV     A,R1
0007AE F0                MOVX    @DPTR,A
0007AF A3                INC     DPTR
0007B0 EC                MOV     A,R4
0007B1 F0                MOVX    @DPTR,A
0007B2 A3                INC     DPTR
0007B3 ED                MOV     A,R5
0007B4 F0                MOVX    @DPTR,A
  380: 	int i = 0;
  381: 	u8_t xdata* rrptr = (u8_t *)ESWAP(REG_UART_RX_PTR_R);
0007B5 E4                CLR     A
0007B6 A3                INC     DPTR
0007B7 F0                MOVX    @DPTR,A
0007B8 A3                INC     DPTR
0007B9 F0                MOVX    @DPTR,A
  382: 
0007BA 908058            MOV     DPTR,#08058H
0007BD A3                INC     DPTR
0007BE E0                MOVX    A,@DPTR
0007BF FC                MOV     R4,A
0007C0 908058            MOV     DPTR,#08058H
0007C3 E0                MOVX    A,@DPTR
0007C4 FF                MOV     R7,A
0007C5 EC                MOV     A,R4
0007C6 FE                MOV     R6,A
0007C7 EF                MOV     A,R7
0007C8 904DCF            MOV     DPTR,#rrptr
0007CB EE                MOV     A,R6
0007CC F0                MOVX    @DPTR,A
0007CD A3                INC     DPTR
0007CE EF                MOV     A,R7
0007CF F0                MOVX    @DPTR,A
  383: 	if(ESWAP(REG_UART_RX_ITEMS)<len)
0007D0 908112            MOV     DPTR,#08112H
0007D3 A3                INC     DPTR
0007D4 E0                MOVX    A,@DPTR
0007D5 FC                MOV     R4,A
0007D6 908112            MOV     DPTR,#08112H
0007D9 E0                MOVX    A,@DPTR
0007DA FF                MOV     R7,A
0007DB EC                MOV     A,R4
0007DC FE                MOV     R6,A
0007DD EF                MOV     A,R7
0007DE D3                SETB    C
0007DF 904DCC            MOV     DPTR,#len+01H
0007E2 E0                MOVX    A,@DPTR
0007E3 9F                SUBB    A,R7
0007E4 904DCB            MOV     DPTR,#len
0007E7 E0                MOVX    A,@DPTR
0007E8 9E                SUBB    A,R6
0007E9 4004              JC      ?C0012?YC_PERIPHERAL
  384: 	{
  385: 		return false;
0007EB E4                CLR     A
0007EC FE                MOV     R6,A
0007ED FF                MOV     R7,A
0007EE 22                RET     
  386: 	}
0007EF         ?C0012?YC_PERIPHERAL:
  387: 
  388: 	for(i=0;i<len;i++)
0007EF E4                CLR     A
0007F0 904DCD            MOV     DPTR,#i
0007F3 F0                MOVX    @DPTR,A
0007F4 A3                INC     DPTR
0007F5 F0                MOVX    @DPTR,A
0007F6         ?C0014?YC_PERIPHERAL:
0007F6 904DCB            MOV     DPTR,#len
0007F9 E0                MOVX    A,@DPTR
0007FA FE                MOV     R6,A
0007FB A3                INC     DPTR
0007FC E0                MOVX    A,@DPTR
0007FD FF                MOV     R7,A
0007FE C3                CLR     C
0007FF 904DCE            MOV     DPTR,#i+01H
000802 E0                MOVX    A,@DPTR
000803 9F                SUBB    A,R7
000804 904DCD            MOV     DPTR,#i
000807 E0                MOVX    A,@DPTR
000808 9E                SUBB    A,R6
000809 4002              JC      $ + 4H
00080B 01C9              AJMP    ?C0015?YC_PERIPHERAL
  389: 	{
  390: 		memcpy(pbuff++, rrptr++, 1);
00080D 904DCF            MOV     DPTR,#rrptr
000810 E4                CLR     A
000811 75F001            MOV     B,#01H
000814 1201C8            LCALL   ?C?ILDIX
000817 FA                MOV     R2,A
000818 A9F0              MOV     R1,B
00081A 7B01              MOV     R3,#01H
00081C C003              PUSH    AR3
00081E 904DC8            MOV     DPTR,#pbuff
000821 E0                MOVX    A,@DPTR
000822 FB                MOV     R3,A
000823 A3                INC     DPTR
000824 E4                CLR     A
000825 75F001            MOV     B,#01H
000828 1201C8            LCALL   ?C?ILDIX
00082B A8F0              MOV     R0,B
00082D FC                MOV     R4,A
00082E AD03              MOV     R5,AR3
000830 D003              POP     AR3
000832 7E00              MOV     R6,#00H
000834 7F01              MOV     R7,#01H
000836 1200D3            LCALL   ?C?COPY
  391: 
  392: 		if((short)rrptr == ESWAP(REG_UART_RX_ADDR_E) + 1)		//rrptr reach the end of buffer
000839 908056            MOV     DPTR,#08056H
00083C A3                INC     DPTR
00083D E0                MOVX    A,@DPTR
00083E FC                MOV     R4,A
00083F 908056            MOV     DPTR,#08056H
000842 E0                MOVX    A,@DPTR
000843 FF                MOV     R7,A
000844 EC                MOV     A,R4
000845 FE                MOV     R6,A
000846 EF                MOV     A,R7
000847 2401              ADD     A,#01H
000849 FF                MOV     R7,A
00084A E4                CLR     A
00084B 3E                ADDC    A,R6
00084C FE                MOV     R6,A
00084D 904DCF            MOV     DPTR,#rrptr
000850 E0                MOVX    A,@DPTR
000851 FC                MOV     R4,A
000852 A3                INC     DPTR
000853 E0                MOVX    A,@DPTR
000854 B5071A            CJNE    A,AR7,?C0017?YC_PERIPHERAL
000857 EE                MOV     A,R6
000858 B50416            CJNE    A,AR4,?C0017?YC_PERIPHERAL
  393: 		{
  394: 			rrptr = (u8_t *)ESWAP(REG_UART_RX_ADDR_S);
00085B 908054            MOV     DPTR,#08054H
00085E A3                INC     DPTR
00085F E0                MOVX    A,@DPTR
000860 FC                MOV     R4,A
000861 908054            MOV     DPTR,#08054H
000864 E0                MOVX    A,@DPTR
000865 FF                MOV     R7,A
000866 EC                MOV     A,R4
000867 FE                MOV     R6,A
000868 EF                MOV     A,R7
000869 904DCF            MOV     DPTR,#rrptr
00086C EE                MOV     A,R6
00086D F0                MOVX    @DPTR,A
00086E A3                INC     DPTR
00086F EF                MOV     A,R7
000870 F0                MOVX    @DPTR,A
  395: 		}
000871         ?C0017?YC_PERIPHERAL:
  396: 
  397: 		if((short)rrptr == ESWAP(REG_UART_RX_PTR_W) )	//read all data already
000871 908116            MOV     DPTR,#08116H
000874 A3                INC     DPTR
000875 E0                MOVX    A,@DPTR
000876 FC                MOV     R4,A
000877 908116            MOV     DPTR,#08116H
00087A E0                MOVX    A,@DPTR
00087B FF                MOV     R7,A
00087C EC                MOV     A,R4
00087D FE                MOV     R6,A
00087E EF                MOV     A,R7
00087F 904DCF            MOV     DPTR,#rrptr
000882 E0                MOVX    A,@DPTR
000883 FC                MOV     R4,A
000884 A3                INC     DPTR
000885 E0                MOVX    A,@DPTR
000886 FD                MOV     R5,A
000887 EF                MOV     A,R7
000888 6D                XRL     A,R5
000889 7002              JNZ     ?C0025?YC_PERIPHERAL
00088B EE                MOV     A,R6
00088C 6C                XRL     A,R4
00088D         ?C0025?YC_PERIPHERAL:
00088D 7029              JNZ     ?C0016?YC_PERIPHERAL
  398: 		{
  399: 			REG_UART_RX_PTR_R = ESWAP((short)rrptr);
00088F 904DCF            MOV     DPTR,#rrptr
000892 E0                MOVX    A,@DPTR
000893 FE                MOV     R6,A
000894 A3                INC     DPTR
000895 E0                MOVX    A,@DPTR
000896 FF                MOV     R7,A
000897 EC                MOV     A,R4
000898 FF                MOV     R7,A
000899 33                RLC     A
00089A 95E0              SUBB    A,ACC
00089C AB07              MOV     R3,AR7
00089E ED                MOV     A,R5
00089F FF                MOV     R7,A
0008A0 EB                MOV     A,R3
0008A1 908058            MOV     DPTR,#08058H
0008A4 CF                XCH     A,R7
0008A5 F0                MOVX    @DPTR,A
0008A6 A3                INC     DPTR
0008A7 EF                MOV     A,R7
0008A8 F0                MOVX    @DPTR,A
  400: 			return (i+1);
0008A9 904DCE            MOV     DPTR,#i+01H
0008AC E0                MOVX    A,@DPTR
0008AD 2401              ADD     A,#01H
0008AF FF                MOV     R7,A
0008B0 904DCD            MOV     DPTR,#i
0008B3 E0                MOVX    A,@DPTR
0008B4 3400              ADDC    A,#00H
0008B6 FE                MOV     R6,A
0008B7 22                RET     
  401: 		}
  402: 	}
0008B8         ?C0016?YC_PERIPHERAL:
0008B8 904DCE            MOV     DPTR,#i+01H
0008BB E0                MOVX    A,@DPTR
0008BC 04                INC     A
0008BD F0                MOVX    @DPTR,A
0008BE 7006              JNZ     ?C0026?YC_PERIPHERAL
0008C0 904DCD            MOV     DPTR,#i
0008C3 E0                MOVX    A,@DPTR
0008C4 04                INC     A
0008C5 F0                MOVX    @DPTR,A
0008C6         ?C0026?YC_PERIPHERAL:
0008C6 0207F6            LJMP    ?C0014?YC_PERIPHERAL
0008C9         ?C0015?YC_PERIPHERAL:
  403: 
  404: 	REG_UART_RX_PTR_R = ESWAP((short)rrptr);
0008C9 904DCF            MOV     DPTR,#rrptr
0008CC E0                MOVX    A,@DPTR
0008CD FE                MOV     R6,A
0008CE A3                INC     DPTR
0008CF E0                MOVX    A,@DPTR
0008D0 FF                MOV     R7,A
0008D1 FD                MOV     R5,A
0008D2 AC06              MOV     R4,AR6
0008D4 EC                MOV     A,R4
0008D5 FF                MOV     R7,A
0008D6 33                RLC     A
0008D7 95E0              SUBB    A,ACC
0008D9 AB07              MOV     R3,AR7
0008DB ED                MOV     A,R5
0008DC FF                MOV     R7,A
0008DD EB                MOV     A,R3
0008DE 908058            MOV     DPTR,#08058H
0008E1 CF                XCH     A,R7
0008E2 F0                MOVX    @DPTR,A
0008E3 A3                INC     DPTR
0008E4 EF                MOV     A,R7
0008E5 F0                MOVX    @DPTR,A
  405: 	
  406: 	return len;
0008E6 904DCB            MOV     DPTR,#len
0008E9 E0                MOVX    A,@DPTR
0008EA FE                MOV     R6,A
0008EB A3                INC     DPTR
0008EC E0                MOVX    A,@DPTR
0008ED FF                MOV     R7,A
  407: }
0008EE 22                RET     
----- FUNCTION _YC_UARTReciveDataExpected (END) -------


----- FUNCTION SoftTimer_10mSCallback (BEGIN) -----
 FILE: 'system.c'
   44: void SoftTimer_10mSCallback(void)
   45: {
   46: 	static u8_t count;
   47: 	YC_UtilTimerStartMs(10, SoftTimer_10mSCallback, &SoftTimer_10msTimerID);
0008EF 7BFF              MOV     R3,#0FFH
0008F1 7A08              MOV     R2,#HIGH SoftTimer_10mSCallback
0008F3 79EF              MOV     R1,#LOW SoftTimer_10mSCallback
0008F5 904DD6            MOV     DPTR,#?_YC_UtilTimerStartMs?BYTE+05H
0008F8 744E              MOV     A,#HIGH SoftTimer_10msTimerID
0008FA F0                MOVX    @DPTR,A
0008FB A3                INC     DPTR
0008FC 743A              MOV     A,#LOW SoftTimer_10msTimerID
0008FE F0                MOVX    @DPTR,A
0008FF 7F0A              MOV     R7,#0AH
000901 7E00              MOV     R6,#00H
000903 121185            LCALL   _YC_UtilTimerStartMs
   48: 	//add user function
   49: 	if(uartTimeoutCnt<255) {
000906 904D64            MOV     DPTR,#uartTimeoutCnt
000909 E0                MOVX    A,@DPTR
00090A C3                CLR     C
00090B 94FF              SUBB    A,#0FFH
00090D 5003              JNC     ?C0001?SYSTEM
   50: 		uartTimeoutCnt++;
00090F E0                MOVX    A,@DPTR
000910 04                INC     A
000911 F0                MOVX    @DPTR,A
   51: 	}
000912         ?C0001?SYSTEM:
   52: 
   53: 
   54: 	if(count<100)
000912 904E38            MOV     DPTR,#count
000915 E0                MOVX    A,@DPTR
000916 C3                CLR     C
000917 9464              SUBB    A,#064H
000919 5005              JNC     ?C0002?SYSTEM
   55: 		count++;
00091B E0                MOVX    A,@DPTR
00091C 04                INC     A
00091D F0                MOVX    @DPTR,A
00091E 800F              SJMP    ?C0003?SYSTEM
000920         ?C0002?SYSTEM:
   56: 	else
   57: 		{
   58: 		count=0;
000920 E4                CLR     A
000921 904E38            MOV     DPTR,#count
000924 F0                MOVX    @DPTR,A
   59: 		CS_Scale_TimeOutProc(CS_SetTimeBase1S);
000925 7F07              MOV     R7,#07H
000927 12318E            LCALL   _CS_Scale_TimeOutProc
   60: 		CS_MemoryWeightClear_Timer(MemWeightTimerInc);
00092A 7F02              MOV     R7,#02H
00092C 123BA3            LCALL   _CS_MemoryWeightClear_Timer
   61: 		}
00092F         ?C0003?SYSTEM:
   62: 		
   63: 	CS_SoftTimer(SoftTimerInc);
00092F E4                CLR     A
000930 FF                MOV     R7,A
000931 D1E1              ACALL   _CS_SoftTimer
;----                  JMP     CS_KeyScan
   64: 
   65: 	CS_KeyScan();
   66: 
----- FUNCTION SoftTimer_10mSCallback (END) -------


----- FUNCTION CS_KeyScan (BEGIN) -----
 FILE: 'CS_ScaleKey.c'
   17: void CS_KeyScan(void)
   18: {
   19: 	u8_t  keyState;
   20: 	static u8_t xdata keyState_prev=1;
   21: 	static u8_t xdata keyStateCnt;
   22: 	static u8_t xdata KeyPressDeal=0;
   23: 	static u8_t xdata KeyLongPressDeal=0;
   24: 	static u8_t xdata ShortPressCount=0;
   25: 	static u8_t xdata PressTimesCount=0;
   26: 	static u8_t xdata Press;
   27: 	
   28: 	
   29: 	keyState = YC_GPIOGetInputStatus(5);	//GPIO5	
000933 7F05              MOV     R7,#05H
000935 12108D            LCALL   _YC_GPIOGetInputStatus
000938 E4                CLR     A
000939 33                RLC     A
00093A FF                MOV     R7,A
;---- Variable 'keyState' assigned to Register 'R7' ----
   30: 
   31: 	if(ShortPressCount<255)		//短按计时
00093B 904E13            MOV     DPTR,#ShortPressCount
00093E E0                MOVX    A,@DPTR
00093F C3                CLR     C
000940 94FF              SUBB    A,#0FFH
000942 5003              JNC     ?C0001?CS_SCALEKEY
   32: 		ShortPressCount++;
000944 E0                MOVX    A,@DPTR
000945 04                INC     A
000946 F0                MOVX    @DPTR,A
000947         ?C0001?CS_SCALEKEY:
   33: 	
   34: 	if(keyState ==KEY_UP)
000947 EF                MOV     A,R7
000948 6401              XRL     A,#01H
00094A 7043              JNZ     ?C0002?CS_SCALEKEY
   35: 		{
   36: 		keyState_prev = KEY_UP;	
00094C 904E0F            MOV     DPTR,#keyState_prev
00094F 04                INC     A
000950 F0                MOVX    @DPTR,A
   37: 		keyStateCnt = 0; 
000951 E4                CLR     A
000952 A3                INC     DPTR
000953 F0                MOVX    @DPTR,A
   38: 
   39: 		if(KeyLongPressDeal==1)
000954 904E12            MOV     DPTR,#KeyLongPressDeal
000957 E0                MOVX    A,@DPTR
000958 B40105            CJNE    A,#01H,?C0003?CS_SCALEKEY
   40: 			Press = false;
00095B E4                CLR     A
00095C 904E15            MOV     DPTR,#Press
00095F F0                MOVX    @DPTR,A
000960         ?C0003?CS_SCALEKEY:
   41: 		
   42: 		KeyPressDeal=0;
000960 E4                CLR     A
000961 904E11            MOV     DPTR,#KeyPressDeal
000964 F0                MOVX    @DPTR,A
   43: 		KeyLongPressDeal=0;
000965 A3                INC     DPTR
000966 F0                MOVX    @DPTR,A
   44: 		
   45: 		if(Press == true)
000967 904E15            MOV     DPTR,#Press
00096A E0                MOVX    A,@DPTR
00096B 6401              XRL     A,#01H
00096D 6002              JZ      $ + 4H
00096F 4103              AJMP    ?C0017?CS_SCALEKEY
   46: 			{
   47: 			Press = false;
000971 F0                MOVX    @DPTR,A
   48: 						
   49: 			//短按弹起处理
   50: 			if(ShortPressCount <KEY_SHORT_PRESS_TIME)
000972 904E13            MOV     DPTR,#ShortPressCount
000975 E0                MOVX    A,@DPTR
000976 C3                CLR     C
000977 940F              SUBB    A,#0FH
000979 5006              JNC     ?C0005?CS_SCALEKEY
   51: 				PressTimesCount++;
00097B A3                INC     DPTR
00097C E0                MOVX    A,@DPTR
00097D 04                INC     A
00097E F0                MOVX    @DPTR,A
00097F 8008              SJMP    ?C0006?CS_SCALEKEY
000981         ?C0005?CS_SCALEKEY:
   52: 			else
   53: 				{
   54: 				PressTimesCount = 0;
000981 E4                CLR     A
000982 904E14            MOV     DPTR,#PressTimesCount
000985 F0                MOVX    @DPTR,A
   55: 				CS_Scale_ChangeUnit();	
000986 123B71            LCALL   CS_Scale_ChangeUnit
   56: 				}
000989         ?C0006?CS_SCALEKEY:
   57: 			ShortPressCount =0;	
000989 E4                CLR     A
00098A 904E13            MOV     DPTR,#ShortPressCount
00098D F0                MOVX    @DPTR,A
   58: 			}
   59: 		}
00098E 22                RET     
00098F         ?C0002?CS_SCALEKEY:
   60: 	else
   61: 		{
   62: 		if(keyState_prev == KEY_DOWN)
00098F 904E0F            MOV     DPTR,#keyState_prev
000992 E0                MOVX    A,@DPTR
000993 7065              JNZ     ?C0008?CS_SCALEKEY
   63: 			{	
   64: 			if(keyStateCnt<255)
000995 A3                INC     DPTR
000996 E0                MOVX    A,@DPTR
000997 C3                CLR     C
000998 94FF              SUBB    A,#0FFH
00099A 5003              JNC     ?C0009?CS_SCALEKEY
   65: 				keyStateCnt++;
00099C E0                MOVX    A,@DPTR
00099D 04                INC     A
00099E F0                MOVX    @DPTR,A
00099F         ?C0009?CS_SCALEKEY:
   66: 			 if(keyStateCnt > KEY_SHORT_PUSH_CNT)
00099F 904E10            MOV     DPTR,#keyStateCnt
0009A2 E0                MOVX    A,@DPTR
0009A3 FF                MOV     R7,A
0009A4 D3                SETB    C
0009A5 9403              SUBB    A,#03H
0009A7 401F              JC      ?C0010?CS_SCALEKEY
   67: 			 	{
   68: 			 	Press =true;
0009A9 904E15            MOV     DPTR,#Press
0009AC 7401              MOV     A,#01H
0009AE F0                MOVX    @DPTR,A
   69: 				if(KeyPressDeal==0)
0009AF 904E11            MOV     DPTR,#KeyPressDeal
0009B2 E0                MOVX    A,@DPTR
0009B3 7013              JNZ     ?C0010?CS_SCALEKEY
   70: 					{
   71: 					KeyPressDeal=1;
0009B5 04                INC     A
0009B6 F0                MOVX    @DPTR,A
   72: 					//按键刚按下的处理
   73: 					if(ShortPressCount > KEY_SHORT_PRESS_TIME)
0009B7 904E13            MOV     DPTR,#ShortPressCount
0009BA E0                MOVX    A,@DPTR
0009BB D3                SETB    C
0009BC 940F              SUBB    A,#0FH
0009BE 4003              JC      ?C0012?CS_SCALEKEY
   74: 						PressTimesCount = 0;
0009C0 E4                CLR     A
0009C1 A3                INC     DPTR
0009C2 F0                MOVX    @DPTR,A
0009C3         ?C0012?CS_SCALEKEY:
   75: 					ShortPressCount=0;
0009C3 E4                CLR     A
0009C4 904E13            MOV     DPTR,#ShortPressCount
0009C7 F0                MOVX    @DPTR,A
   76: 					}
   77: 			 	}
0009C8         ?C0010?CS_SCALEKEY:
   78: 			 if(keyStateCnt > KEY_LONG_PUSH_CNT)
0009C8 EF                MOV     A,R7
0009C9 D3                SETB    C
0009CA 9432              SUBB    A,#032H
0009CC 4035              JC      ?C0017?CS_SCALEKEY
   79: 			 	{
   80: 				if(KeyLongPressDeal==0)
0009CE 904E12            MOV     DPTR,#KeyLongPressDeal
0009D1 E0                MOVX    A,@DPTR
0009D2 702F              JNZ     ?C0017?CS_SCALEKEY
   81: 					{
   82: 					//按键刚长按下的处理	
   83: 					KeyLongPressDeal=1;					
0009D4 04                INC     A
0009D5 F0                MOVX    @DPTR,A
   84: 					if(PressTimesCount==3)
0009D6 904E14            MOV     DPTR,#PressTimesCount
0009D9 E0                MOVX    A,@DPTR
0009DA B40313            CJNE    A,#03H,?C0015?CS_SCALEKEY
   85: 						{
   86: 						R_Scale_state = CS_Scale_state_caling;	
0009DD 904CC5            MOV     DPTR,#R_Scale_state
0009E0 7403              MOV     A,#03H
0009E2 F0                MOVX    @DPTR,A
   87: 						CS_Scale_CaliProc(CaliProcReset);
0009E3 7F05              MOV     R7,#05H
0009E5 5104              ACALL   _CS_Scale_CaliProc
   88: 						Press = false;
0009E7 E4                CLR     A
0009E8 904E15            MOV     DPTR,#Press
0009EB F0                MOVX    @DPTR,A
   89: 						keyStateCnt=0;
0009EC 904E10            MOV     DPTR,#keyStateCnt
0009EF F0                MOVX    @DPTR,A
   90: 						}
0009F0         ?C0015?CS_SCALEKEY:
   91: 					PressTimesCount = 0;
0009F0 E4                CLR     A
0009F1 904E14            MOV     DPTR,#PressTimesCount
0009F4 F0                MOVX    @DPTR,A
   92: 					ShortPressCount =0;
0009F5 904E13            MOV     DPTR,#ShortPressCount
0009F8 F0                MOVX    @DPTR,A
   93: 					}
   94: 			 	}
   95: 			}
0009F9 22                RET     
0009FA         ?C0008?CS_SCALEKEY:
   96: 		else
   97: 			{
   98: 			keyState_prev = KEY_DOWN;
0009FA E4                CLR     A
0009FB 904E0F            MOV     DPTR,#keyState_prev
0009FE F0                MOVX    @DPTR,A
   99: 			Press = false;
0009FF 904E15            MOV     DPTR,#Press
000A02 F0                MOVX    @DPTR,A
  100: 			}
  101: 		}
  102: }
000A03         ?C0017?CS_SCALEKEY:
000A03 22                RET     
----- FUNCTION CS_KeyScan (END) -------


----- FUNCTION _CS_Scale_CaliProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  926: u16_t CS_Scale_CaliProc(u8_t option)
  927: {
;---- Variable 'option' assigned to Register 'R5' ----
000A04 AD07              MOV     R5,AR7
  928: 	static	u16_t xdata R_AD_CaliDot1;		//第一个标定点AD值
  929: 	static	u16_t xdata R_AD_CaliDot2;		//第二个标定点AD值
  930: 	static	u16_t xdata R_AD_CaliDot3;		//第三个标定点AD值
  931: 	static	u8_t	  xdata R_CaliState;			//标定状态
  932: 	static	u16_t xdata R_OpenWeight_Ad;	//开机重量AD值
  933: 	
  934: 	u16_t	R_AdFilTimes;	
  935: 	u16_t	weight_temp;
  936: 	u16_t	R_AD_BUF;
  937: 	u16_t	R_AD_PowerOnZero;
  938: 
  939: 	if(option==CaliProcReset)
000A06 ED                MOV     A,R5
000A07 B40508            CJNE    A,#05H,?C0130?CS_SCALE_PROC
  940: 		{
  941: 		R_CaliState=CS_CaliState_GetZero;
000A0A E4                CLR     A
000A0B 904CB1            MOV     DPTR,#R_CaliState
000A0E F0                MOVX    @DPTR,A
  942: 		return	0;
000A0F FE                MOV     R6,A
000A10 FF                MOV     R7,A
000A11 22                RET     
  943: 		}
000A12         ?C0130?CS_SCALE_PROC:
  944: 	if(option==CaliProcSetCali)
000A12 ED                MOV     A,R5
000A13 6401              XRL     A,#01H
000A15 6002              JZ      $ + 4H
000A17 41F6              AJMP    ?C0132?CS_SCALE_PROC
  945: 		{
  946: /*
  947: 		*(mem_sensor_buf )= 12;
  948: 		*(mem_sensor_buf+1) = 12;
  949: 		*(mem_sensor_buf+2 )= 12;
  950: 		*(mem_sensor_buf+3) = 12;
  951: 		*(mem_sensor_buf+4 )= 12;
  952: 		*(mem_sensor_buf+5) = 12;
  953: 		SpiFlashOperator(CS_CMD_WRITE_FLASH);
  954: 		//YC_Delay10ms(10);
  955: 		
  956: 		*(mem_sensor_buf )= 0;
  957: 		*(mem_sensor_buf+1) = 0;
  958: 		*(mem_sensor_buf+2 )= 0;
  959: 		*(mem_sensor_buf+3) = 0;
  960: 		*(mem_sensor_buf+4 )= 0;
  961: 		*(mem_sensor_buf+5) = 0;
  962: 		
  963: 		
  964: 		SpiFlashOperator( CS_CMD_READ_FLASH);
  965: 		
  966: 		
  967: 		
  968: 		R_Debug_temp=(u16_t) *(mem_sensor_buf+2 ) ;
  969: 		CS_ScaleDisplay_Debug();
  970: 		while(1);
  971: 		*/
  972: 		//YC_Delay1S(1);
  973: 		
  974: 		R_AD_BUF = *(mem_sensor_buf );
000A19 904C08            MOV     DPTR,#04C08H
000A1C E0                MOVX    A,@DPTR
000A1D FF                MOV     R7,A
000A1E 904DFD            MOV     DPTR,#R_AD_BUF
000A21 E4                CLR     A
000A22 F0                MOVX    @DPTR,A
000A23 A3                INC     DPTR
000A24 EF                MOV     A,R7
000A25 F0                MOVX    @DPTR,A
  975: 		R_AD_CaliDot1 =R_AD_BUF<<8 |  (*(mem_sensor_buf+1));
000A26 E0                MOVX    A,@DPTR
000A27 FE                MOV     R6,A
000A28 904C09            MOV     DPTR,#04C09H
000A2B E0                MOVX    A,@DPTR
000A2C FB                MOV     R3,A
000A2D EE                MOV     A,R6
000A2E EB                MOV     A,R3
000A2F FF                MOV     R7,A
000A30 904CAB            MOV     DPTR,#R_AD_CaliDot1
000A33 EE                MOV     A,R6
000A34 F0                MOVX    @DPTR,A
000A35 A3                INC     DPTR
000A36 EF                MOV     A,R7
000A37 F0                MOVX    @DPTR,A
  976: 		R_AD_BUF = *(mem_sensor_buf+2 );
000A38 904C0A            MOV     DPTR,#04C0AH
000A3B E0                MOVX    A,@DPTR
000A3C FF                MOV     R7,A
000A3D 904DFD            MOV     DPTR,#R_AD_BUF
000A40 E4                CLR     A
000A41 F0                MOVX    @DPTR,A
000A42 A3                INC     DPTR
000A43 EF                MOV     A,R7
000A44 F0                MOVX    @DPTR,A
  977: 		R_AD_CaliDot2 =R_AD_BUF<<8 |  (*(mem_sensor_buf+3));
000A45 E0                MOVX    A,@DPTR
000A46 FE                MOV     R6,A
000A47 904C0B            MOV     DPTR,#04C0BH
000A4A E0                MOVX    A,@DPTR
000A4B FB                MOV     R3,A
000A4C EE                MOV     A,R6
000A4D EB                MOV     A,R3
000A4E FF                MOV     R7,A
000A4F 904CAD            MOV     DPTR,#R_AD_CaliDot2
000A52 EE                MOV     A,R6
000A53 F0                MOVX    @DPTR,A
000A54 A3                INC     DPTR
000A55 EF                MOV     A,R7
000A56 F0                MOVX    @DPTR,A
  978: 		R_AD_BUF = *(mem_sensor_buf+4 );
000A57 904C0C            MOV     DPTR,#04C0CH
000A5A E0                MOVX    A,@DPTR
000A5B FF                MOV     R7,A
000A5C 904DFD            MOV     DPTR,#R_AD_BUF
000A5F E4                CLR     A
000A60 F0                MOVX    @DPTR,A
000A61 A3                INC     DPTR
000A62 EF                MOV     A,R7
000A63 F0                MOVX    @DPTR,A
  979: 		R_AD_CaliDot3 =R_AD_BUF<<8 |  (*(mem_sensor_buf+5));	
000A64 E0                MOVX    A,@DPTR
000A65 FE                MOV     R6,A
000A66 904C0D            MOV     DPTR,#04C0DH
000A69 E0                MOVX    A,@DPTR
000A6A FB                MOV     R3,A
000A6B EE                MOV     A,R6
000A6C EB                MOV     A,R3
000A6D FF                MOV     R7,A
000A6E 904CAF            MOV     DPTR,#R_AD_CaliDot3
000A71 EE                MOV     A,R6
000A72 F0                MOVX    @DPTR,A
000A73 A3                INC     DPTR
000A74 EF                MOV     A,R7
000A75 F0                MOVX    @DPTR,A
  980: 
  981: 		
  982: 
  983: 		if(R_AD_CaliDot1<CS_CaliStateData_Down || R_AD_CaliDot1>CS_CaliStateData_Up)
000A76 904CAB            MOV     DPTR,#R_AD_CaliDot1
000A79 E0                MOVX    A,@DPTR
000A7A FE                MOV     R6,A
000A7B A3                INC     DPTR
000A7C E0                MOVX    A,@DPTR
000A7D FF                MOV     R7,A
000A7E C3                CLR     C
000A7F 94E8              SUBB    A,#0E8H
000A81 EE                MOV     A,R6
000A82 9403              SUBB    A,#03H
000A84 4009              JC      ?C0134?CS_SCALE_PROC
000A86 D3                SETB    C
000A87 EF                MOV     A,R7
000A88 9470              SUBB    A,#070H
000A8A EE                MOV     A,R6
000A8B 9417              SUBB    A,#017H
000A8D 404C              JC      ?C0133?CS_SCALE_PROC
000A8F         ?C0134?CS_SCALE_PROC:
  984: 			if(R_AD_CaliDot2<CS_CaliStateData_Down||R_AD_CaliDot2>CS_CaliStateData_Up)
000A8F 904CAD            MOV     DPTR,#R_AD_CaliDot2
000A92 E0                MOVX    A,@DPTR
000A93 FE                MOV     R6,A
000A94 A3                INC     DPTR
000A95 E0                MOVX    A,@DPTR
000A96 FF                MOV     R7,A
000A97 C3                CLR     C
000A98 94E8              SUBB    A,#0E8H
000A9A EE                MOV     A,R6
000A9B 9403              SUBB    A,#03H
000A9D 4009              JC      ?C0136?CS_SCALE_PROC
000A9F D3                SETB    C
000AA0 EF                MOV     A,R7
000AA1 9470              SUBB    A,#070H
000AA3 EE                MOV     A,R6
000AA4 9417              SUBB    A,#017H
000AA6 4033              JC      ?C0133?CS_SCALE_PROC
000AA8         ?C0136?CS_SCALE_PROC:
  985: 				if(R_AD_CaliDot3<CS_CaliStateData_Down||R_AD_CaliDot3>CS_CaliStateData_Up)
000AA8 904CAF            MOV     DPTR,#R_AD_CaliDot3
000AAB E0                MOVX    A,@DPTR
000AAC FE                MOV     R6,A
000AAD A3                INC     DPTR
000AAE E0                MOVX    A,@DPTR
000AAF FF                MOV     R7,A
000AB0 C3                CLR     C
000AB1 94E8              SUBB    A,#0E8H
000AB3 EE                MOV     A,R6
000AB4 9403              SUBB    A,#03H
000AB6 4009              JC      ?C0138?CS_SCALE_PROC
000AB8 D3                SETB    C
000AB9 EF                MOV     A,R7
000ABA 9470              SUBB    A,#070H
000ABC EE                MOV     A,R6
000ABD 9417              SUBB    A,#017H
000ABF 401A              JC      ?C0133?CS_SCALE_PROC
000AC1         ?C0138?CS_SCALE_PROC:
  986: 					{
  987: 					R_AD_CaliDot1	= 6000;
000AC1 904CAB            MOV     DPTR,#R_AD_CaliDot1
000AC4 7417              MOV     A,#017H
000AC6 F0                MOVX    @DPTR,A
000AC7 A3                INC     DPTR
000AC8 7470              MOV     A,#070H
000ACA F0                MOVX    @DPTR,A
  988: 					R_AD_CaliDot2	= 5000;
000ACB A3                INC     DPTR
000ACC 7413              MOV     A,#013H
000ACE F0                MOVX    @DPTR,A
000ACF A3                INC     DPTR
000AD0 7488              MOV     A,#088H
000AD2 F0                MOVX    @DPTR,A
  989: 					R_AD_CaliDot3	= 4000;	
000AD3 A3                INC     DPTR
000AD4 740F              MOV     A,#0FH
000AD6 F0                MOVX    @DPTR,A
000AD7 A3                INC     DPTR
000AD8 74A0              MOV     A,#0A0H
000ADA F0                MOVX    @DPTR,A
  990: 					}	
000ADB         ?C0133?CS_SCALE_PROC:
  991: 		
  992: 		
  993: 		R_OpenWeight_Ad	= R_AD_CaliDot1/10;
000ADB 904CAB            MOV     DPTR,#R_AD_CaliDot1
000ADE E0                MOVX    A,@DPTR
000ADF FE                MOV     R6,A
000AE0 A3                INC     DPTR
000AE1 E0                MOVX    A,@DPTR
000AE2 FF                MOV     R7,A
000AE3 7C00              MOV     R4,#00H
000AE5 7D0A              MOV     R5,#0AH
000AE7 120173            LCALL   ?C?UIDIV
000AEA 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000AED EE                MOV     A,R6
000AEE F0                MOVX    @DPTR,A
000AEF A3                INC     DPTR
000AF0 EF                MOV     A,R7
000AF1 F0                MOVX    @DPTR,A
  994: 		return	0;		
000AF2 E4                CLR     A
000AF3 FE                MOV     R6,A
000AF4 FF                MOV     R7,A
000AF5 22                RET     
  995: 		}
000AF6         ?C0132?CS_SCALE_PROC:
  996: 	if(option==CaliProcSetOpenWeight)
000AF6 ED                MOV     A,R5
000AF7 B4061B            CJNE    A,#06H,?C0139?CS_SCALE_PROC
  997: 		{
  998: 		R_OpenWeight_Ad	= R_AD_CaliDot1/10;
000AFA 904CAB            MOV     DPTR,#R_AD_CaliDot1
000AFD E0                MOVX    A,@DPTR
000AFE FE                MOV     R6,A
000AFF A3                INC     DPTR
000B00 E0                MOVX    A,@DPTR
000B01 FF                MOV     R7,A
000B02 7C00              MOV     R4,#00H
000B04 7D0A              MOV     R5,#0AH
000B06 120173            LCALL   ?C?UIDIV
000B09 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000B0C EE                MOV     A,R6
000B0D F0                MOVX    @DPTR,A
000B0E A3                INC     DPTR
000B0F EF                MOV     A,R7
000B10 F0                MOVX    @DPTR,A
  999: 		return	0;
000B11 E4                CLR     A
000B12 FE                MOV     R6,A
000B13 FF                MOV     R7,A
000B14 22                RET     
 1000: 		}
000B15         ?C0139?CS_SCALE_PROC:
 1001: 	
 1002: 	if(option==CaliProcGetOpenWeight)
000B15 ED                MOV     A,R5
000B16 B40709            CJNE    A,#07H,?C0140?CS_SCALE_PROC
 1003: 		return R_OpenWeight_Ad;
000B19 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000B1C E0                MOVX    A,@DPTR
000B1D FE                MOV     R6,A
000B1E A3                INC     DPTR
000B1F E0                MOVX    A,@DPTR
000B20 FF                MOV     R7,A
000B21 22                RET     
000B22         ?C0140?CS_SCALE_PROC:
 1004: 	if(option==CaliProcGetCaliDot1)
000B22 ED                MOV     A,R5
000B23 B40209            CJNE    A,#02H,?C0141?CS_SCALE_PROC
 1005: 		return R_AD_CaliDot1;
000B26 904CAB            MOV     DPTR,#R_AD_CaliDot1
000B29 E0                MOVX    A,@DPTR
000B2A FE                MOV     R6,A
000B2B A3                INC     DPTR
000B2C E0                MOVX    A,@DPTR
000B2D FF                MOV     R7,A
000B2E 22                RET     
000B2F         ?C0141?CS_SCALE_PROC:
 1006: 	if(option==CaliProcGetCaliDot2)
000B2F ED                MOV     A,R5
000B30 B40309            CJNE    A,#03H,?C0142?CS_SCALE_PROC
 1007: 		return R_AD_CaliDot2;
000B33 904CAD            MOV     DPTR,#R_AD_CaliDot2
000B36 E0                MOVX    A,@DPTR
000B37 FE                MOV     R6,A
000B38 A3                INC     DPTR
000B39 E0                MOVX    A,@DPTR
000B3A FF                MOV     R7,A
000B3B 22                RET     
000B3C         ?C0142?CS_SCALE_PROC:
 1008: 	if(option==CaliProcGetCaliDot3)
000B3C ED                MOV     A,R5
000B3D B40409            CJNE    A,#04H,?C0143?CS_SCALE_PROC
 1009: 		return R_AD_CaliDot3;
000B40 904CAF            MOV     DPTR,#R_AD_CaliDot3
000B43 E0                MOVX    A,@DPTR
000B44 FE                MOV     R6,A
000B45 A3                INC     DPTR
000B46 E0                MOVX    A,@DPTR
000B47 FF                MOV     R7,A
000B48 22                RET     
000B49         ?C0143?CS_SCALE_PROC:
 1010: 	
 1011: 	R_AD_BUF = R_AD_Original;
000B49 904CD8            MOV     DPTR,#R_AD_Original
000B4C E0                MOVX    A,@DPTR
000B4D FE                MOV     R6,A
000B4E A3                INC     DPTR
000B4F E0                MOVX    A,@DPTR
000B50 FF                MOV     R7,A
000B51 904DFD            MOV     DPTR,#R_AD_BUF
000B54 EE                MOV     A,R6
000B55 F0                MOVX    @DPTR,A
000B56 FC                MOV     R4,A
000B57 A3                INC     DPTR
000B58 EF                MOV     A,R7
000B59 F0                MOVX    @DPTR,A
000B5A FD                MOV     R5,A
 1012: 	R_AD_BUF=CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
000B5B E4                CLR     A
000B5C FF                MOV     R7,A
000B5D 1237C1            LCALL   _CS_Scale_AdcFilter
000B60 904DFD            MOV     DPTR,#R_AD_BUF
000B63 EE                MOV     A,R6
000B64 F0                MOVX    @DPTR,A
000B65 FC                MOV     R4,A
000B66 A3                INC     DPTR
000B67 EF                MOV     A,R7
000B68 F0                MOVX    @DPTR,A
000B69 FD                MOV     R5,A
 1013: 	R_AdFilTimes = CS_Scale_AdcFilter(ScaleAdcFilterGetFilTimes,R_AD_BUF);
000B6A 7F02              MOV     R7,#02H
000B6C 1237C1            LCALL   _CS_Scale_AdcFilter
000B6F 904DF9            MOV     DPTR,#R_AdFilTimes
000B72 EE                MOV     A,R6
000B73 F0                MOVX    @DPTR,A
000B74 A3                INC     DPTR
000B75 EF                MOV     A,R7
000B76 F0                MOVX    @DPTR,A
 1014: 	
 1015: 	
 1016: 
 1017: 	//数据稳定才处理
 1018: 		
 1019: 	if(R_CaliState==CS_CaliState_GetZero) 
000B77 904CB1            MOV     DPTR,#R_CaliState
000B7A E0                MOVX    A,@DPTR
000B7B 7048              JNZ     ?C0144?CS_SCALE_PROC
 1020: 		{	
 1021: 
 1022: 			R_AD_CaliDot1 = R_AD_BUF;	//暂存零点用于显示
000B7D 904DFD            MOV     DPTR,#R_AD_BUF
000B80 E0                MOVX    A,@DPTR
000B81 FC                MOV     R4,A
000B82 A3                INC     DPTR
000B83 E0                MOVX    A,@DPTR
000B84 FD                MOV     R5,A
000B85 904CAB            MOV     DPTR,#R_AD_CaliDot1
000B88 EC                MOV     A,R4
000B89 F0                MOVX    @DPTR,A
000B8A A3                INC     DPTR
000B8B ED                MOV     A,R5
000B8C F0                MOVX    @DPTR,A
 1023: 			if(R_AdFilTimes>=60)
000B8D C3                CLR     C
000B8E 904DFA            MOV     DPTR,#R_AdFilTimes+01H
000B91 E0                MOVX    A,@DPTR
000B92 943C              SUBB    A,#03CH
000B94 904DF9            MOV     DPTR,#R_AdFilTimes
000B97 E0                MOVX    A,@DPTR
000B98 9400              SUBB    A,#00H
000B9A 401C              JC      ?C0145?CS_SCALE_PROC
 1024: 				{
 1025: 			CS_Scale_ZeroProc(SetPowerOnZero,R_AD_BUF);	
000B9C 7F05              MOV     R7,#05H
000B9E 1212F7            LCALL   _CS_Scale_ZeroProc
 1026: 			CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000BA1 904DFD            MOV     DPTR,#R_AD_BUF
000BA4 E0                MOVX    A,@DPTR
000BA5 FC                MOV     R4,A
000BA6 A3                INC     DPTR
000BA7 E0                MOVX    A,@DPTR
000BA8 FD                MOV     R5,A
000BA9 7F01              MOV     R7,#01H
000BAB 1237C1            LCALL   _CS_Scale_AdcFilter
 1027: 			CS_SoftTimer(ResetSoftTimer);
000BAE 7F02              MOV     R7,#02H
000BB0 D1E1              ACALL   _CS_SoftTimer
 1028: 			R_CaliState = CS_CaliState_ShowCal1;
000BB2 904CB1            MOV     DPTR,#R_CaliState
000BB5 7401              MOV     A,#01H
000BB7 F0                MOVX    @DPTR,A
 1029: 				}
000BB8         ?C0145?CS_SCALE_PROC:
 1030: 		CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_BUF);
000BB8 904DFD            MOV     DPTR,#R_AD_BUF
000BBB E0                MOVX    A,@DPTR
000BBC FC                MOV     R4,A
000BBD A3                INC     DPTR
000BBE E0                MOVX    A,@DPTR
000BBF FD                MOV     R5,A
000BC0 7F21              MOV     R7,#021H
000BC2 1215FE            LCALL   _CS_ScaleDisplay_FreshBuf
 1031: 		}
000BC5         ?C0144?CS_SCALE_PROC:
 1032: 	
 1033: 	if(R_CaliState == CS_CaliState_ShowCal1)
000BC5 904CB1            MOV     DPTR,#R_CaliState
000BC8 E0                MOVX    A,@DPTR
000BC9 B40118            CJNE    A,#01H,?C0146?CS_SCALE_PROC
 1034: 		{
 1035: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 	
000BCC 7F01              MOV     R7,#01H
000BCE D1E1              ACALL   _CS_SoftTimer
000BD0 EF                MOV     A,R7
000BD1 D3                SETB    C
000BD2 94C8              SUBB    A,#0C8H
000BD4 4006              JC      ?C0147?CS_SCALE_PROC
 1036: 			R_CaliState = CS_CaliState_GetCal1;
000BD6 904CB1            MOV     DPTR,#R_CaliState
000BD9 7402              MOV     A,#02H
000BDB F0                MOVX    @DPTR,A
000BDC         ?C0147?CS_SCALE_PROC:
 1037: 		CS_ScaleDisplay_FreshBuf(DisplayCal1,0);
000BDC E4                CLR     A
000BDD FD                MOV     R5,A
000BDE FC                MOV     R4,A
000BDF 7F81              MOV     R7,#081H
000BE1 1215FE            LCALL   _CS_ScaleDisplay_FreshBuf
 1038: 		}
000BE4         ?C0146?CS_SCALE_PROC:
 1039: 
 1040: 	if(R_CaliState==CS_CaliState_GetCal1)
000BE4 904CB1            MOV     DPTR,#R_CaliState
000BE7 E0                MOVX    A,@DPTR
000BE8 6402              XRL     A,#02H
000BEA 6002              JZ      $ + 4H
000BEC 81A5              AJMP    ?C0148?CS_SCALE_PROC
 1041: 		{	
 1042: 			R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);	
000BEE FD                MOV     R5,A
000BEF FC                MOV     R4,A
000BF0 FF                MOV     R7,A
000BF1 1212F7            LCALL   _CS_Scale_ZeroProc
000BF4 904DFF            MOV     DPTR,#R_AD_PowerOnZero
000BF7 EE                MOV     A,R6
000BF8 F0                MOVX    @DPTR,A
000BF9 A3                INC     DPTR
000BFA EF                MOV     A,R7
000BFB F0                MOVX    @DPTR,A
 1043: 			R_AD_CaliDot1 = R_AD_BUF - R_AD_PowerOnZero;
000BFC C3                CLR     C
000BFD 904DFE            MOV     DPTR,#R_AD_BUF+01H
000C00 E0                MOVX    A,@DPTR
000C01 9F                SUBB    A,R7
000C02 FF                MOV     R7,A
000C03 904DFD            MOV     DPTR,#R_AD_BUF
000C06 E0                MOVX    A,@DPTR
000C07 9E                SUBB    A,R6
000C08 FE                MOV     R6,A
000C09 904CAB            MOV     DPTR,#R_AD_CaliDot1
000C0C F0                MOVX    @DPTR,A
000C0D A3                INC     DPTR
000C0E EF                MOV     A,R7
000C0F F0                MOVX    @DPTR,A
 1044: 				
 1045: 			if((R_AD_CaliDot1 < R_OpenWeight_Ad)||(R_AD_BUF < R_AD_PowerOnZero))
000C10 D3                SETB    C
000C11 904CB3            MOV     DPTR,#R_OpenWeight_Ad+01H
000C14 E0                MOVX    A,@DPTR
000C15 9F                SUBB    A,R7
000C16 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000C19 E0                MOVX    A,@DPTR
000C1A 9E                SUBB    A,R6
000C1B 5015              JNC     ?C0150?CS_SCALE_PROC
000C1D 904DFF            MOV     DPTR,#R_AD_PowerOnZero
000C20 E0                MOVX    A,@DPTR
000C21 FE                MOV     R6,A
000C22 A3                INC     DPTR
000C23 E0                MOVX    A,@DPTR
000C24 FF                MOV     R7,A
000C25 C3                CLR     C
000C26 904DFE            MOV     DPTR,#R_AD_BUF+01H
000C29 E0                MOVX    A,@DPTR
000C2A 9F                SUBB    A,R7
000C2B 904DFD            MOV     DPTR,#R_AD_BUF
000C2E E0                MOVX    A,@DPTR
000C2F 9E                SUBB    A,R6
000C30 5032              JNC     ?C0149?CS_SCALE_PROC
000C32         ?C0150?CS_SCALE_PROC:
 1046: 				{
 1047: 				if(R_AdFilTimes>=60)
000C32 C3                CLR     C
000C33 904DFA            MOV     DPTR,#R_AdFilTimes+01H
000C36 E0                MOVX    A,@DPTR
000C37 943C              SUBB    A,#03CH
000C39 904DF9            MOV     DPTR,#R_AdFilTimes
000C3C E0                MOVX    A,@DPTR
000C3D 9400              SUBB    A,#00H
000C3F 401A              JC      ?C0151?CS_SCALE_PROC
 1048: 					{
 1049: 					CS_Scale_ZeroProc(SetPowerOnZero,R_AD_BUF);	
000C41 904DFD            MOV     DPTR,#R_AD_BUF
000C44 E0                MOVX    A,@DPTR
000C45 FC                MOV     R4,A
000C46 A3                INC     DPTR
000C47 E0                MOVX    A,@DPTR
000C48 FD                MOV     R5,A
000C49 7F05              MOV     R7,#05H
000C4B 1212F7            LCALL   _CS_Scale_ZeroProc
 1050: 					CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000C4E 904DFD            MOV     DPTR,#R_AD_BUF
000C51 E0                MOVX    A,@DPTR
000C52 FC                MOV     R4,A
000C53 A3                INC     DPTR
000C54 E0                MOVX    A,@DPTR
000C55 FD                MOV     R5,A
000C56 7F01              MOV     R7,#01H
000C58 1237C1            LCALL   _CS_Scale_AdcFilter
 1051: 					}
000C5B         ?C0151?CS_SCALE_PROC:
 1052: 				R_AD_CaliDot1 = 0;
000C5B E4                CLR     A
000C5C 904CAB            MOV     DPTR,#R_AD_CaliDot1
000C5F F0                MOVX    @DPTR,A
000C60 A3                INC     DPTR
000C61 F0                MOVX    @DPTR,A
 1053: 				}
000C62 8034              SJMP    ?C0152?CS_SCALE_PROC
000C64         ?C0149?CS_SCALE_PROC:
 1054: 			else
 1055: 				{
 1056: 				if((R_AD_CaliDot1> 750)&&(R_AdFilTimes>=60))
000C64 D3                SETB    C
000C65 904CAC            MOV     DPTR,#R_AD_CaliDot1+01H
000C68 E0                MOVX    A,@DPTR
000C69 94EE              SUBB    A,#0EEH
000C6B 904CAB            MOV     DPTR,#R_AD_CaliDot1
000C6E E0                MOVX    A,@DPTR
000C6F 9402              SUBB    A,#02H
000C71 4025              JC      ?C0152?CS_SCALE_PROC
000C73 904DFA            MOV     DPTR,#R_AdFilTimes+01H
000C76 E0                MOVX    A,@DPTR
000C77 943C              SUBB    A,#03CH
000C79 904DF9            MOV     DPTR,#R_AdFilTimes
000C7C E0                MOVX    A,@DPTR
000C7D 9400              SUBB    A,#00H
000C7F 4017              JC      ?C0152?CS_SCALE_PROC
 1057: 					{				
 1058: 					CS_SoftTimer(ResetSoftTimer);
000C81 7F02              MOV     R7,#02H
000C83 D1E1              ACALL   _CS_SoftTimer
 1059: 					CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000C85 904DFD            MOV     DPTR,#R_AD_BUF
000C88 E0                MOVX    A,@DPTR
000C89 FC                MOV     R4,A
000C8A A3                INC     DPTR
000C8B E0                MOVX    A,@DPTR
000C8C FD                MOV     R5,A
000C8D 7F01              MOV     R7,#01H
000C8F 1237C1            LCALL   _CS_Scale_AdcFilter
 1060: 					R_CaliState = CS_CaliState_ShowCal2;
000C92 904CB1            MOV     DPTR,#R_CaliState
000C95 7403              MOV     A,#03H
000C97 F0                MOVX    @DPTR,A
 1061: 					}
 1062: 				}
000C98         ?C0152?CS_SCALE_PROC:
 1063: 			CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_CaliDot1);
000C98 904CAB            MOV     DPTR,#R_AD_CaliDot1
000C9B E0                MOVX    A,@DPTR
000C9C FC                MOV     R4,A
000C9D A3                INC     DPTR
000C9E E0                MOVX    A,@DPTR
000C9F FD                MOV     R5,A
000CA0 7F21              MOV     R7,#021H
000CA2 1215FE            LCALL   _CS_ScaleDisplay_FreshBuf
 1064: 			
 1065: 		}
000CA5         ?C0148?CS_SCALE_PROC:
 1066: 
 1067: 	if(R_CaliState == CS_CaliState_ShowCal2)
000CA5 904CB1            MOV     DPTR,#R_CaliState
000CA8 E0                MOVX    A,@DPTR
000CA9 B40318            CJNE    A,#03H,?C0154?CS_SCALE_PROC
 1068: 		{
 1069: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 	
000CAC 7F01              MOV     R7,#01H
000CAE D1E1              ACALL   _CS_SoftTimer
000CB0 EF                MOV     A,R7
000CB1 D3                SETB    C
000CB2 94C8              SUBB    A,#0C8H
000CB4 4006              JC      ?C0155?CS_SCALE_PROC
 1070: 			R_CaliState = CS_CaliState_GetCal2;
000CB6 904CB1            MOV     DPTR,#R_CaliState
000CB9 7404              MOV     A,#04H
000CBB F0                MOVX    @DPTR,A
000CBC         ?C0155?CS_SCALE_PROC:
 1071: 		CS_ScaleDisplay_FreshBuf(DisplayCal2,0);
000CBC E4                CLR     A
000CBD FD                MOV     R5,A
000CBE FC                MOV     R4,A
000CBF 7F82              MOV     R7,#082H
000CC1 1215FE            LCALL   _CS_ScaleDisplay_FreshBuf
 1072: 		}
000CC4         ?C0154?CS_SCALE_PROC:
 1073: 	
 1074: 	if(R_CaliState==CS_CaliState_GetCal2)
000CC4 904CB1            MOV     DPTR,#R_CaliState
000CC7 E0                MOVX    A,@DPTR
000CC8 6404              XRL     A,#04H
000CCA 6002              JZ      $ + 4H
000CCC A16A              AJMP    ?C0156?CS_SCALE_PROC
 1075: 		{		
 1076: 			R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);		
000CCE FD                MOV     R5,A
000CCF FC                MOV     R4,A
000CD0 FF                MOV     R7,A
000CD1 1212F7            LCALL   _CS_Scale_ZeroProc
000CD4 904DFF            MOV     DPTR,#R_AD_PowerOnZero
000CD7 EE                MOV     A,R6
000CD8 F0                MOVX    @DPTR,A
000CD9 A3                INC     DPTR
000CDA EF                MOV     A,R7
000CDB F0                MOVX    @DPTR,A
 1077: 			weight_temp = R_AD_BUF - R_AD_PowerOnZero;
000CDC C3                CLR     C
000CDD 904DFE            MOV     DPTR,#R_AD_BUF+01H
000CE0 E0                MOVX    A,@DPTR
000CE1 9F                SUBB    A,R7
000CE2 FF                MOV     R7,A
000CE3 904DFD            MOV     DPTR,#R_AD_BUF
000CE6 E0                MOVX    A,@DPTR
000CE7 9E                SUBB    A,R6
000CE8 FE                MOV     R6,A
000CE9 904DFB            MOV     DPTR,#weight_temp
000CEC F0                MOVX    @DPTR,A
000CED A3                INC     DPTR
000CEE EF                MOV     A,R7
000CEF F0                MOVX    @DPTR,A
 1078: 					
 1079: 			if((weight_temp < R_AD_CaliDot1)||(R_AD_BUF < R_AD_PowerOnZero))
000CF0 904CAB            MOV     DPTR,#R_AD_CaliDot1
000CF3 E0                MOVX    A,@DPTR
000CF4 FC                MOV     R4,A
000CF5 A3                INC     DPTR
000CF6 E0                MOVX    A,@DPTR
000CF7 FD                MOV     R5,A
000CF8 D3                SETB    C
000CF9 9F                SUBB    A,R7
000CFA EC                MOV     A,R4
000CFB 9E                SUBB    A,R6
000CFC 5015              JNC     ?C0158?CS_SCALE_PROC
000CFE 904DFF            MOV     DPTR,#R_AD_PowerOnZero
000D01 E0                MOVX    A,@DPTR
000D02 FE                MOV     R6,A
000D03 A3                INC     DPTR
000D04 E0                MOVX    A,@DPTR
000D05 FF                MOV     R7,A
000D06 C3                CLR     C
000D07 904DFE            MOV     DPTR,#R_AD_BUF+01H
000D0A E0                MOVX    A,@DPTR
000D0B 9F                SUBB    A,R7
000D0C 904DFD            MOV     DPTR,#R_AD_BUF
000D0F E0                MOVX    A,@DPTR
000D10 9E                SUBB    A,R6
000D11 5009              JNC     ?C0157?CS_SCALE_PROC
000D13         ?C0158?CS_SCALE_PROC:
 1080: 				{
 1081: 				R_AD_CaliDot2 = 0;
000D13 E4                CLR     A
000D14 904CAD            MOV     DPTR,#R_AD_CaliDot2
000D17 F0                MOVX    @DPTR,A
000D18 A3                INC     DPTR
000D19 F0                MOVX    @DPTR,A
 1082: 				}
000D1A 8041              SJMP    ?C0159?CS_SCALE_PROC
000D1C         ?C0157?CS_SCALE_PROC:
 1083: 			else
 1084: 				{
 1085: 				R_AD_CaliDot2 = weight_temp -R_AD_CaliDot1;
000D1C C3                CLR     C
000D1D 904DFC            MOV     DPTR,#weight_temp+01H
000D20 E0                MOVX    A,@DPTR
000D21 9D                SUBB    A,R5
000D22 FF                MOV     R7,A
000D23 904DFB            MOV     DPTR,#weight_temp
000D26 E0                MOVX    A,@DPTR
000D27 9C                SUBB    A,R4
000D28 FE                MOV     R6,A
000D29 904CAD            MOV     DPTR,#R_AD_CaliDot2
000D2C F0                MOVX    @DPTR,A
000D2D A3                INC     DPTR
000D2E EF                MOV     A,R7
000D2F F0                MOVX    @DPTR,A
 1086: 			
 1087: 				if((R_AD_CaliDot2> 750)&& (R_AdFilTimes>=60))
000D30 D3                SETB    C
000D31 94EE              SUBB    A,#0EEH
000D33 EE                MOV     A,R6
000D34 9402              SUBB    A,#02H
000D36 4025              JC      ?C0159?CS_SCALE_PROC
000D38 904DFA            MOV     DPTR,#R_AdFilTimes+01H
000D3B E0                MOVX    A,@DPTR
000D3C 943C              SUBB    A,#03CH
000D3E 904DF9            MOV     DPTR,#R_AdFilTimes
000D41 E0                MOVX    A,@DPTR
000D42 9400              SUBB    A,#00H
000D44 4017              JC      ?C0159?CS_SCALE_PROC
 1088: 					{
 1089: 					CS_Scale_AdcFilter(ScaleAdcFilterReset,R_AD_BUF);
000D46 904DFD            MOV     DPTR,#R_AD_BUF
000D49 E0                MOVX    A,@DPTR
000D4A FC                MOV     R4,A
000D4B A3                INC     DPTR
000D4C E0                MOVX    A,@DPTR
000D4D FD                MOV     R5,A
000D4E 7F01              MOV     R7,#01H
000D50 1237C1            LCALL   _CS_Scale_AdcFilter
 1090: 					CS_SoftTimer(ResetSoftTimer);
000D53 7F02              MOV     R7,#02H
000D55 D1E1              ACALL   _CS_SoftTimer
 1091: 					R_CaliState = CS_CaliState_ShowCal3;
000D57 904CB1            MOV     DPTR,#R_CaliState
000D5A 7405              MOV     A,#05H
000D5C F0                MOVX    @DPTR,A
 1092: 					}
 1093: 				}
000D5D         ?C0159?CS_SCALE_PROC:
 1094: 			CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_CaliDot2);
000D5D 904CAD            MOV     DPTR,#R_AD_CaliDot2
000D60 E0                MOVX    A,@DPTR
000D61 FC                MOV     R4,A
000D62 A3                INC     DPTR
000D63 E0                MOVX    A,@DPTR
000D64 FD                MOV     R5,A
000D65 7F21              MOV     R7,#021H
000D67 1215FE            LCALL   _CS_ScaleDisplay_FreshBuf
 1095: 		}
000D6A         ?C0156?CS_SCALE_PROC:
 1096: 
 1097: 	if(R_CaliState == CS_CaliState_ShowCal3)
000D6A 904CB1            MOV     DPTR,#R_CaliState
000D6D E0                MOVX    A,@DPTR
000D6E B40518            CJNE    A,#05H,?C0161?CS_SCALE_PROC
 1098: 		{
 1099: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 	
000D71 7F01              MOV     R7,#01H
000D73 D1E1              ACALL   _CS_SoftTimer
000D75 EF                MOV     A,R7
000D76 D3                SETB    C
000D77 94C8              SUBB    A,#0C8H
000D79 4006              JC      ?C0162?CS_SCALE_PROC
 1100: 			R_CaliState = CS_CaliState_GetCal3;
000D7B 904CB1            MOV     DPTR,#R_CaliState
000D7E 7406              MOV     A,#06H
000D80 F0                MOVX    @DPTR,A
000D81         ?C0162?CS_SCALE_PROC:
 1101: 		CS_ScaleDisplay_FreshBuf(DisplayCal3,0);
000D81 E4                CLR     A
000D82 FD                MOV     R5,A
000D83 FC                MOV     R4,A
000D84 7F83              MOV     R7,#083H
000D86 1215FE            LCALL   _CS_ScaleDisplay_FreshBuf
 1102: 		}
000D89         ?C0161?CS_SCALE_PROC:
 1103: 	
 1104: 	if(R_CaliState==CS_CaliState_GetCal3)
000D89 904CB1            MOV     DPTR,#R_CaliState
000D8C E0                MOVX    A,@DPTR
000D8D 6406              XRL     A,#06H
000D8F 6002              JZ      $ + 4H
000D91 C148              AJMP    ?C0163?CS_SCALE_PROC
 1105: 		{		
 1106: 			R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);		
000D93 FD                MOV     R5,A
000D94 FC                MOV     R4,A
000D95 FF                MOV     R7,A
000D96 1212F7            LCALL   _CS_Scale_ZeroProc
000D99 904DFF            MOV     DPTR,#R_AD_PowerOnZero
000D9C EE                MOV     A,R6
000D9D F0                MOVX    @DPTR,A
000D9E A3                INC     DPTR
000D9F EF                MOV     A,R7
000DA0 F0                MOVX    @DPTR,A
 1107: 			weight_temp = R_AD_BUF - R_AD_PowerOnZero;
000DA1 C3                CLR     C
000DA2 904DFE            MOV     DPTR,#R_AD_BUF+01H
000DA5 E0                MOVX    A,@DPTR
000DA6 9F                SUBB    A,R7
000DA7 FF                MOV     R7,A
000DA8 904DFD            MOV     DPTR,#R_AD_BUF
000DAB E0                MOVX    A,@DPTR
000DAC 9E                SUBB    A,R6
000DAD FE                MOV     R6,A
000DAE 904DFB            MOV     DPTR,#weight_temp
000DB1 F0                MOVX    @DPTR,A
000DB2 A3                INC     DPTR
000DB3 EF                MOV     A,R7
000DB4 F0                MOVX    @DPTR,A
 1108: 					
 1109: 			if((weight_temp < R_AD_CaliDot1)||(R_AD_BUF < R_AD_PowerOnZero))
000DB5 904CAB            MOV     DPTR,#R_AD_CaliDot1
000DB8 E0                MOVX    A,@DPTR
000DB9 FC                MOV     R4,A
000DBA A3                INC     DPTR
000DBB E0                MOVX    A,@DPTR
000DBC FD                MOV     R5,A
000DBD D3                SETB    C
000DBE 9F                SUBB    A,R7
000DBF EC                MOV     A,R4
000DC0 9E                SUBB    A,R6
000DC1 5015              JNC     ?C0165?CS_SCALE_PROC
000DC3 904DFF            MOV     DPTR,#R_AD_PowerOnZero
000DC6 E0                MOVX    A,@DPTR
000DC7 FE                MOV     R6,A
000DC8 A3                INC     DPTR
000DC9 E0                MOVX    A,@DPTR
000DCA FF                MOV     R7,A
000DCB C3                CLR     C
000DCC 904DFE            MOV     DPTR,#R_AD_BUF+01H
000DCF E0                MOVX    A,@DPTR
000DD0 9F                SUBB    A,R7
000DD1 904DFD            MOV     DPTR,#R_AD_BUF
000DD4 E0                MOVX    A,@DPTR
000DD5 9E                SUBB    A,R6
000DD6 5009              JNC     ?C0164?CS_SCALE_PROC
000DD8         ?C0165?CS_SCALE_PROC:
 1110: 				{
 1111: 				R_AD_CaliDot3 = 0;
000DD8 E4                CLR     A
000DD9 904CAF            MOV     DPTR,#R_AD_CaliDot3
000DDC F0                MOVX    @DPTR,A
000DDD A3                INC     DPTR
000DDE F0                MOVX    @DPTR,A
 1112: 				}
000DDF 805A              SJMP    ?C0166?CS_SCALE_PROC
000DE1         ?C0164?CS_SCALE_PROC:
 1113: 			else
 1114: 				{
 1115: 				weight_temp = weight_temp -R_AD_CaliDot1;
000DE1 C3                CLR     C
000DE2 904DFC            MOV     DPTR,#weight_temp+01H
000DE5 E0                MOVX    A,@DPTR
000DE6 9D                SUBB    A,R5
000DE7 FF                MOV     R7,A
000DE8 904DFB            MOV     DPTR,#weight_temp
000DEB E0                MOVX    A,@DPTR
000DEC 9C                SUBB    A,R4
000DED FE                MOV     R6,A
000DEE F0                MOVX    @DPTR,A
000DEF A3                INC     DPTR
000DF0 EF                MOV     A,R7
000DF1 F0                MOVX    @DPTR,A
 1116: 
 1117: 				if(weight_temp < R_AD_CaliDot2)
000DF2 904CAD            MOV     DPTR,#R_AD_CaliDot2
000DF5 E0                MOVX    A,@DPTR
000DF6 FC                MOV     R4,A
000DF7 A3                INC     DPTR
000DF8 E0                MOVX    A,@DPTR
000DF9 FD                MOV     R5,A
000DFA D3                SETB    C
000DFB 9F                SUBB    A,R7
000DFC EC                MOV     A,R4
000DFD 9E                SUBB    A,R6
000DFE 4007              JC      ?C0167?CS_SCALE_PROC
 1118: 					{
 1119: 					R_AD_CaliDot3 = 0;
000E00 E4                CLR     A
000E01 A3                INC     DPTR
000E02 F0                MOVX    @DPTR,A
000E03 A3                INC     DPTR
000E04 F0                MOVX    @DPTR,A
 1120: 					
 1121: 					}
000E05 8034              SJMP    ?C0166?CS_SCALE_PROC
000E07         ?C0167?CS_SCALE_PROC:
 1122: 				else
 1123: 					{
 1124: 				R_AD_CaliDot3 = weight_temp -R_AD_CaliDot2;
000E07 C3                CLR     C
000E08 904DFC            MOV     DPTR,#weight_temp+01H
000E0B E0                MOVX    A,@DPTR
000E0C 9D                SUBB    A,R5
000E0D FF                MOV     R7,A
000E0E 904DFB            MOV     DPTR,#weight_temp
000E11 E0                MOVX    A,@DPTR
000E12 9C                SUBB    A,R4
000E13 FE                MOV     R6,A
000E14 904CAF            MOV     DPTR,#R_AD_CaliDot3
000E17 F0                MOVX    @DPTR,A
000E18 A3                INC     DPTR
000E19 EF                MOV     A,R7
000E1A F0                MOVX    @DPTR,A
 1125: 			
 1126: 				if((R_AD_CaliDot3> 750)&& (R_AdFilTimes>=60))
000E1B D3                SETB    C
000E1C 94EE              SUBB    A,#0EEH
000E1E EE                MOV     A,R6
000E1F 9402              SUBB    A,#02H
000E21 4018              JC      ?C0166?CS_SCALE_PROC
000E23 904DFA            MOV     DPTR,#R_AdFilTimes+01H
000E26 E0                MOVX    A,@DPTR
000E27 943C              SUBB    A,#03CH
000E29 904DF9            MOV     DPTR,#R_AdFilTimes
000E2C E0                MOVX    A,@DPTR
000E2D 9400              SUBB    A,#00H
000E2F 400A              JC      ?C0166?CS_SCALE_PROC
 1127: 					{
 1128: 					CS_SoftTimer(ResetSoftTimer);
000E31 7F02              MOV     R7,#02H
000E33 D1E1              ACALL   _CS_SoftTimer
 1129: 					R_CaliState = CS_CaliState_ShowCal4;
000E35 904CB1            MOV     DPTR,#R_CaliState
000E38 7407              MOV     A,#07H
000E3A F0                MOVX    @DPTR,A
 1130: 					}
 1131: 					}
 1132: 				}
000E3B         ?C0166?CS_SCALE_PROC:
 1133: 			CS_ScaleDisplay_FreshBuf(DisplayData,R_AD_CaliDot3);
000E3B 904CAF            MOV     DPTR,#R_AD_CaliDot3
000E3E E0                MOVX    A,@DPTR
000E3F FC                MOV     R4,A
000E40 A3                INC     DPTR
000E41 E0                MOVX    A,@DPTR
000E42 FD                MOV     R5,A
000E43 7F21              MOV     R7,#021H
000E45 1215FE            LCALL   _CS_ScaleDisplay_FreshBuf
 1134: 		}
000E48         ?C0163?CS_SCALE_PROC:
 1135: 	
 1136: 	if(R_CaliState == CS_CaliState_ShowCal4)
000E48 904CB1            MOV     DPTR,#R_CaliState
000E4B E0                MOVX    A,@DPTR
000E4C B40718            CJNE    A,#07H,?C0170?CS_SCALE_PROC
 1137: 		{
 1138: 		if(CS_SoftTimer(GetSoftTimerTime)>200) 
000E4F 7F01              MOV     R7,#01H
000E51 D1E1              ACALL   _CS_SoftTimer
000E53 EF                MOV     A,R7
000E54 D3                SETB    C
000E55 94C8              SUBB    A,#0C8H
000E57 4006              JC      ?C0171?CS_SCALE_PROC
 1139: 			R_CaliState = CS_CaliState_SaveData;
000E59 904CB1            MOV     DPTR,#R_CaliState
000E5C 7408              MOV     A,#08H
000E5E F0                MOVX    @DPTR,A
000E5F         ?C0171?CS_SCALE_PROC:
 1140: 		CS_ScaleDisplay_FreshBuf(DisplayCal4,0);
000E5F E4                CLR     A
000E60 FD                MOV     R5,A
000E61 FC                MOV     R4,A
000E62 7F84              MOV     R7,#084H
000E64 1215FE            LCALL   _CS_ScaleDisplay_FreshBuf
 1141: 		}
000E67         ?C0170?CS_SCALE_PROC:
 1142: 	
 1143: 	if(R_CaliState==CS_CaliState_SaveData)
000E67 904CB1            MOV     DPTR,#R_CaliState
000E6A E0                MOVX    A,@DPTR
000E6B 6408              XRL     A,#08H
000E6D 706E              JNZ     ?C0172?CS_SCALE_PROC
 1144: 		{
 1145: 		
 1146: 		R_AD_PowerOnZero =CS_Scale_ZeroProc(GetPowerOnZero,0);
000E6F FD                MOV     R5,A
000E70 FC                MOV     R4,A
000E71 FF                MOV     R7,A
000E72 1212F7            LCALL   _CS_Scale_ZeroProc
000E75 904DFF            MOV     DPTR,#R_AD_PowerOnZero
000E78 EE                MOV     A,R6
000E79 F0                MOVX    @DPTR,A
000E7A A3                INC     DPTR
000E7B EF                MOV     A,R7
000E7C F0                MOVX    @DPTR,A
 1147: 		CS_Scale_ZeroProc(SetRunningZero,R_AD_PowerOnZero);
000E7D 904DFF            MOV     DPTR,#R_AD_PowerOnZero
000E80 E0                MOVX    A,@DPTR
000E81 FC                MOV     R4,A
000E82 A3                INC     DPTR
000E83 E0                MOVX    A,@DPTR
000E84 FD                MOV     R5,A
000E85 7F06              MOV     R7,#06H
000E87 1212F7            LCALL   _CS_Scale_ZeroProc
 1148: 		R_Scale_state = CS_Scale_state_weighting;
000E8A 904CC5            MOV     DPTR,#R_Scale_state
000E8D 7401              MOV     A,#01H
000E8F F0                MOVX    @DPTR,A
 1149: 		R_OpenWeight_Ad	=  R_AD_CaliDot1/10;
000E90 904CAB            MOV     DPTR,#R_AD_CaliDot1
000E93 E0                MOVX    A,@DPTR
000E94 FA                MOV     R2,A
000E95 A3                INC     DPTR
000E96 E0                MOVX    A,@DPTR
000E97 7C00              MOV     R4,#00H
000E99 7D0A              MOV     R5,#0AH
000E9B FF                MOV     R7,A
000E9C AE02              MOV     R6,AR2
000E9E 120173            LCALL   ?C?UIDIV
000EA1 904CB2            MOV     DPTR,#R_OpenWeight_Ad
000EA4 EE                MOV     A,R6
000EA5 F0                MOVX    @DPTR,A
000EA6 A3                INC     DPTR
000EA7 EF                MOV     A,R7
000EA8 F0                MOVX    @DPTR,A
 1150: 
 1151: 		/*
 1152: 		R_Debug_temp=R_AD_CaliDot2;
 1153: 		CS_ScaleDisplay_Debug();
 1154: 		while(1);
 1155: 		*/
 1156: 		
 1157: 		*(mem_sensor_buf )= HI_UINT16(R_AD_CaliDot1);
000EA9 EA                MOV     A,R2
000EAA 904C08            MOV     DPTR,#04C08H
000EAD F0                MOVX    @DPTR,A
 1158: 		*(mem_sensor_buf+1) = LO_UINT16(R_AD_CaliDot1);
000EAE 904CAB            MOV     DPTR,#R_AD_CaliDot1
000EB1 E0                MOVX    A,@DPTR
000EB2 A3                INC     DPTR
000EB3 E0                MOVX    A,@DPTR
000EB4 904C09            MOV     DPTR,#04C09H
000EB7 F0                MOVX    @DPTR,A
 1159: 		*(mem_sensor_buf+2 )= HI_UINT16(R_AD_CaliDot2);
000EB8 904CAD            MOV     DPTR,#R_AD_CaliDot2
000EBB E0                MOVX    A,@DPTR
000EBC FC                MOV     R4,A
000EBD A3                INC     DPTR
000EBE E0                MOVX    A,@DPTR
000EBF FD                MOV     R5,A
000EC0 EC                MOV     A,R4
000EC1 904C0A            MOV     DPTR,#04C0AH
000EC4 F0                MOVX    @DPTR,A
 1160: 		*(mem_sensor_buf+3) = LO_UINT16(R_AD_CaliDot2);
000EC5 ED                MOV     A,R5
000EC6 A3                INC     DPTR
000EC7 F0                MOVX    @DPTR,A
 1161: 		*(mem_sensor_buf+4 )= HI_UINT16(R_AD_CaliDot3);
000EC8 904CAF            MOV     DPTR,#R_AD_CaliDot3
000ECB E0                MOVX    A,@DPTR
000ECC FC                MOV     R4,A
000ECD A3                INC     DPTR
000ECE E0                MOVX    A,@DPTR
000ECF FD                MOV     R5,A
000ED0 EC                MOV     A,R4
000ED1 904C0C            MOV     DPTR,#04C0CH
000ED4 F0                MOVX    @DPTR,A
 1162: 		*(mem_sensor_buf+5) = LO_UINT16(R_AD_CaliDot3);
000ED5 ED                MOV     A,R5
000ED6 A3                INC     DPTR
000ED7 F0                MOVX    @DPTR,A
 1163: 		SpiFlashOperator(CS_CMD_WRITE_FLASH);
000ED8 7F41              MOV     R7,#041H
000EDA 121F32            LCALL   _SpiFlashOperator
 1164: 
 1165: 		
 1166: 
 1167: 		}
000EDD         ?C0172?CS_SCALE_PROC:
 1168: 	return 0;
000EDD E4                CLR     A
000EDE FE                MOV     R6,A
000EDF FF                MOV     R7,A
 1169: 	
 1170: }
000EE0 22                RET     
----- FUNCTION _CS_Scale_CaliProc (END) -------


----- FUNCTION _CS_SoftTimer (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1397: u8_t CS_SoftTimer(u8_t option)
 1398: {
;---- Variable 'option' assigned to Register 'R7' ----
 1399: 	static u8_t xdata timecount; 				//计时变量
 1400: 	static u8_t xdata B_Timeout;
 1401: 
 1402: 	if(option==ResetSoftTimer)
000EE1 EF                MOV     A,R7
000EE2 B40207            CJNE    A,#02H,?C0204?CS_SCALE_PROC
 1403: 		{
 1404: 		timecount=0;
000EE5 E4                CLR     A
000EE6 904CB8            MOV     DPTR,#timecount
000EE9 F0                MOVX    @DPTR,A
 1405: 		B_Timeout = false;
000EEA A3                INC     DPTR
000EEB F0                MOVX    @DPTR,A
 1406: 		}
000EEC         ?C0204?CS_SCALE_PROC:
 1407: 
 1408: 	if(option==GetSoftTimerTime)
000EEC EF                MOV     A,R7
000EED B40106            CJNE    A,#01H,?C0205?CS_SCALE_PROC
 1409: 		return	timecount;
000EF0 904CB8            MOV     DPTR,#timecount
000EF3 E0                MOVX    A,@DPTR
000EF4 FF                MOV     R7,A
000EF5 22                RET     
000EF6         ?C0205?CS_SCALE_PROC:
 1410: 
 1411: 	if(option==SoftTimerInc)
000EF6 EF                MOV     A,R7
000EF7 700C              JNZ     ?C0207?CS_SCALE_PROC
 1412: 		{
 1413: 		if(timecount<255 ) 
000EF9 904CB8            MOV     DPTR,#timecount
000EFC E0                MOVX    A,@DPTR
000EFD C3                CLR     C
000EFE 94FF              SUBB    A,#0FFH
000F00 5003              JNC     ?C0207?CS_SCALE_PROC
 1414: 		timecount++;
000F02 E0                MOVX    A,@DPTR
000F03 04                INC     A
000F04 F0                MOVX    @DPTR,A
 1415: 		}
000F05         ?C0207?CS_SCALE_PROC:
 1416: 	
 1417: 	
 1418: 	if(timecount>SoftTimerTimeOut)
000F05 904CB8            MOV     DPTR,#timecount
000F08 E0                MOVX    A,@DPTR
000F09 D3                SETB    C
000F0A 9496              SUBB    A,#096H
000F0C 4004              JC      ?C0209?CS_SCALE_PROC
 1419: 		B_Timeout = true;
000F0E A3                INC     DPTR
000F0F 7401              MOV     A,#01H
000F11 F0                MOVX    @DPTR,A
000F12         ?C0209?CS_SCALE_PROC:
 1420: 
 1421: 	if(option==GetIfTimeOut)
000F12 EF                MOV     A,R7
000F13 B40306            CJNE    A,#03H,?C0210?CS_SCALE_PROC
 1422: 		return	B_Timeout;
000F16 904CB9            MOV     DPTR,#B_Timeout
000F19 E0                MOVX    A,@DPTR
000F1A FF                MOV     R7,A
000F1B 22                RET     
000F1C         ?C0210?CS_SCALE_PROC:
 1423: 	
 1424: 	return 0;
000F1C 7F00              MOV     R7,#00H
 1425: 
 1426: }
000F1E 22                RET     
----- FUNCTION _CS_SoftTimer (END) -------


----- FUNCTION CS_ScaleDisplay_SteadyFlash (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  283: void CS_ScaleDisplay_SteadyFlash(void)
  284: {	 
  285: 
  286: 	u8_t xdata R_Weight_FlashTime;
  287: 
  288: 	
  289: 	if(CS_SoftTimer(GetIfTimeOut) == false)
000F1F 7F03              MOV     R7,#03H
000F21 D1E1              ACALL   _CS_SoftTimer
000F23 EF                MOV     A,R7
000F24 702D              JNZ     ?C0056?CS_SCALEDISPLAY
  290: 		{
  291: 		R_Weight_FlashTime = CS_SoftTimer(GetSoftTimerTime);
000F26 7F01              MOV     R7,#01H
000F28 D1E1              ACALL   _CS_SoftTimer
;---- Variable 'R_Weight_FlashTime' assigned to Register 'R7' ----
  292: 		   if(R_Weight_FlashTime<30) 
000F2A EF                MOV     A,R7
000F2B C3                CLR     C
000F2C 941E              SUBB    A,#01EH
000F2E 5003              JNC     ?C0047?CS_SCALEDISPLAY
  293: 		   	CS_ScaleDisplay_LcdBackup();
000F30 023F87            LJMP    CS_ScaleDisplay_LcdBackup
000F33         ?C0047?CS_SCALEDISPLAY:
  294: 		    else if(R_Weight_FlashTime<60) 
000F33 EF                MOV     A,R7
000F34 C3                CLR     C
000F35 943C              SUBB    A,#03CH
000F37 5002              JNC     ?C0049?CS_SCALEDISPLAY
  295: 				CS_ScaleDisplay_LcdShowNoDigit();
000F39 8019              SJMP    CS_ScaleDisplay_LcdShowNoDigit
000F3B         ?C0049?CS_SCALEDISPLAY:
  296: 		    		else if(R_Weight_FlashTime<90)
000F3B EF                MOV     A,R7
000F3C C3                CLR     C
000F3D 945A              SUBB    A,#05AH
000F3F 5002              JNC     ?C0051?CS_SCALEDISPLAY
  297: 					CS_ScaleDisplay_LcdRestore();
000F41 802C              SJMP    CS_ScaleDisplay_LcdRestore
000F43         ?C0051?CS_SCALEDISPLAY:
  298: 		     			else if(R_Weight_FlashTime<120) 
000F43 EF                MOV     A,R7
000F44 C3                CLR     C
000F45 9478              SUBB    A,#078H
000F47 5002              JNC     ?C0053?CS_SCALEDISPLAY
  299: 						CS_ScaleDisplay_LcdShowNoDigit();
000F49 8009              SJMP    CS_ScaleDisplay_LcdShowNoDigit
000F4B         ?C0053?CS_SCALEDISPLAY:
  300: 		   			 	else if(R_Weight_FlashTime<150)
000F4B EF                MOV     A,R7
000F4C C3                CLR     C
000F4D 9496              SUBB    A,#096H
000F4F 5002              JNC     ?C0056?CS_SCALEDISPLAY
  301: 							CS_ScaleDisplay_LcdRestore();		
000F51 F16F              ACALL   CS_ScaleDisplay_LcdRestore
  302: 		}
  303: }
000F53         ?C0056?CS_SCALEDISPLAY:
000F53 22                RET     
----- FUNCTION CS_ScaleDisplay_SteadyFlash (END) -------


----- FUNCTION CS_ScaleDisplay_LcdShowNoDigit (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  244: void CS_ScaleDisplay_LcdShowNoDigit(void)
  245: {
  246: 	CS_Lcd_Send_Data[0] &= 0x0f;
  247: 	CS_Lcd_Send_Data[1] &= 0x00;
000F54 904D23            MOV     DPTR,#CS_Lcd_Send_Data
000F57 E0                MOVX    A,@DPTR
000F58 540F              ANL     A,#0FH
000F5A F0                MOVX    @DPTR,A
  248: 	CS_Lcd_Send_Data[2] &= 0x08;
000F5B A3                INC     DPTR
000F5C E0                MOVX    A,@DPTR
000F5D E4                CLR     A
000F5E F0                MOVX    @DPTR,A
  249: 	CS_Lcd_Send_Data[3] &= 0x08;
000F5F A3                INC     DPTR
000F60 E0                MOVX    A,@DPTR
000F61 5408              ANL     A,#08H
000F63 F0                MOVX    @DPTR,A
  250: 	CS_Lcd_Send_Data[4] &= 0xf0;
000F64 A3                INC     DPTR
000F65 E0                MOVX    A,@DPTR
000F66 5408              ANL     A,#08H
000F68 F0                MOVX    @DPTR,A
  251: }
000F69 A3                INC     DPTR
000F6A E0                MOVX    A,@DPTR
000F6B 54F0              ANL     A,#0F0H
000F6D F0                MOVX    @DPTR,A
  252: 
000F6E 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdShowNoDigit (END) -------


----- FUNCTION CS_ScaleDisplay_LcdRestore (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  273: void CS_ScaleDisplay_LcdRestore(void)
  274: {
  275: 	CS_Lcd_Send_Data[0] = CS_Lcd_Send_Data_BAK[0];
  276: 	CS_Lcd_Send_Data[1] = CS_Lcd_Send_Data_BAK[1];
000F6F 904D1D            MOV     DPTR,#CS_Lcd_Send_Data_BAK
000F72 E0                MOVX    A,@DPTR
000F73 904D23            MOV     DPTR,#CS_Lcd_Send_Data
000F76 F0                MOVX    @DPTR,A
  277: 	CS_Lcd_Send_Data[2] = CS_Lcd_Send_Data_BAK[2];
000F77 904D1E            MOV     DPTR,#CS_Lcd_Send_Data_BAK+01H
000F7A E0                MOVX    A,@DPTR
000F7B 904D24            MOV     DPTR,#CS_Lcd_Send_Data+01H
000F7E F0                MOVX    @DPTR,A
  278: 	CS_Lcd_Send_Data[3] = CS_Lcd_Send_Data_BAK[3];
000F7F 904D1F            MOV     DPTR,#CS_Lcd_Send_Data_BAK+02H
000F82 E0                MOVX    A,@DPTR
000F83 904D25            MOV     DPTR,#CS_Lcd_Send_Data+02H
000F86 F0                MOVX    @DPTR,A
  279: 	CS_Lcd_Send_Data[4] = CS_Lcd_Send_Data_BAK[4];
000F87 904D20            MOV     DPTR,#CS_Lcd_Send_Data_BAK+03H
000F8A E0                MOVX    A,@DPTR
000F8B 904D26            MOV     DPTR,#CS_Lcd_Send_Data+03H
000F8E F0                MOVX    @DPTR,A
  280: }
000F8F 904D21            MOV     DPTR,#CS_Lcd_Send_Data_BAK+04H
000F92 E0                MOVX    A,@DPTR
000F93 904D27            MOV     DPTR,#CS_Lcd_Send_Data+04H
000F96 F0                MOVX    @DPTR,A
  281: 
000F97 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdRestore (END) -------


----- FUNCTION CS_Scale_Proc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  122: void CS_Scale_Proc(void)
  123: {
  124: 	if(R_Scale_state == CS_Scale_state_init)
  125: 		{	
000F98 904CC5            MOV     DPTR,#R_Scale_state
000F9B E0                MOVX    A,@DPTR
000F9C 7005              JNZ     ?C0001?CS_SCALE_PROC
  126: 		CS_Scale_PowerOnProc(0);
  127: 		}
000F9E C200              CLR     ?CS_Scale_PowerOnProc?BIT
000FA0 123BD9            LCALL   CS_Scale_PowerOnProc
  128: 	if(R_Scale_state == CS_Scale_state_standby)
000FA3         ?C0001?CS_SCALE_PROC:
  129: 		{
000FA3 904CC5            MOV     DPTR,#R_Scale_state
000FA6 E0                MOVX    A,@DPTR
000FA7 B40205            CJNE    A,#02H,?C0002?CS_SCALE_PROC
  130: 		CS_Scale_StandbyProc(0);		
  131: 		}
000FAA E4                CLR     A
000FAB FF                MOV     R7,A
000FAC 1232B4            LCALL   _CS_Scale_StandbyProc
  132: 		
000FAF         ?C0002?CS_SCALE_PROC:
  133: 	if(B_Weight_AdOk == true)
000FAF 904CD7            MOV     DPTR,#B_Weight_AdOk
000FB2 E0                MOVX    A,@DPTR
000FB3 6401              XRL     A,#01H
000FB5 703E              JNZ     ?C0009?CS_SCALE_PROC
  134: 		{		
  135: 		B_Weight_AdOk = false;	
000FB7 F0                MOVX    @DPTR,A
  136: 		
  137: 		if(CS_Scale_ZeroProc(GetPowerOnZeroState,0)== false)	//还没上电取零点先取零点
000FB8 FD                MOV     R5,A
000FB9 FC                MOV     R4,A
000FBA 7F02              MOV     R7,#02H
000FBC 1212F7            LCALL   _CS_Scale_ZeroProc
000FBF EF                MOV     A,R7
000FC0 4E                ORL     A,R6
000FC1 7007              JNZ     ?C0004?CS_SCALE_PROC
  138: 			{
  139: 			CS_Scale_ZeroProc(FindPowerOnZero,0);
000FC3 FD                MOV     R5,A
000FC4 FC                MOV     R4,A
000FC5 7F0A              MOV     R7,#0AH
000FC7 0212F7            LJMP    _CS_Scale_ZeroProc
  140: 			}
000FCA         ?C0004?CS_SCALE_PROC:
  141: 		else
  142: 			{
  143: 				
  144: 			if(R_Scale_state == CS_Scale_state_weighting)
000FCA 904CC5            MOV     DPTR,#R_Scale_state
000FCD E0                MOVX    A,@DPTR
000FCE B40106            CJNE    A,#01H,?C0006?CS_SCALE_PROC
  145: 				{
  146: 				CS_Scale_WeightProc();
000FD1 123088            LCALL   CS_Scale_WeightProc
  147: 				CS_ScaleDisplay();
000FD4 12153F            LCALL   CS_ScaleDisplay
  148: 				}
000FD7         ?C0006?CS_SCALE_PROC:
  149: 			if(R_Scale_state == CS_Scale_state_locking)
000FD7 904CC5            MOV     DPTR,#R_Scale_state
000FDA E0                MOVX    A,@DPTR
000FDB B40407            CJNE    A,#04H,?C0007?CS_SCALE_PROC
  150: 				{					
  151: 				CS_ScaleDisplay_SteadyFlash();
000FDE F11F              ACALL   CS_ScaleDisplay_SteadyFlash
  152: 				CS_Scale_SteadyProc(SteadyProcRun);
000FE0 7F01              MOV     R7,#01H
000FE2 12335F            LCALL   _CS_Scale_SteadyProc
  153: 				}
000FE5         ?C0007?CS_SCALE_PROC:
  154: 			if(R_Scale_state == CS_Scale_state_caling)
000FE5 904CC5            MOV     DPTR,#R_Scale_state
000FE8 E0                MOVX    A,@DPTR
000FE9 B40304            CJNE    A,#03H,?C0008?CS_SCALE_PROC
  155: 				{
  156: 				CS_Scale_CaliProc(CaliProcRun);
000FEC E4                CLR     A
000FED FF                MOV     R7,A
000FEE 5104              ACALL   _CS_Scale_CaliProc
  157: 				}	
000FF0         ?C0008?CS_SCALE_PROC:
  158: 			
  159: 			CS_Scale_TimeOutProc(0);
000FF0 E4                CLR     A
000FF1 FF                MOV     R7,A
000FF2 12318E            LCALL   _CS_Scale_TimeOutProc
  160: 			}
  161: 		}
  162: }	
000FF5         ?C0009?CS_SCALE_PROC:
000FF5 22                RET     
----- FUNCTION CS_Scale_Proc (END) -------


----- FUNCTION systemInit (BEGIN) -----
 FILE: 'system.c'
   69: void systemInit(void)
   70: {
   71: 	LPM_DISABLE();
   72: 	if(*mem_poweron_flag == CS_POWERON_FLAG		//poweron or reset
000FF6 9049FE            MOV     DPTR,#049FEH
000FF9 E4                CLR     A
000FFA F0                MOVX    @DPTR,A
   73: 	/*|| *mem_poweron_flag == CS_IOWAKE_FLAG*/) {		//iowake from sleep
000FFB 9049FC            MOV     DPTR,#049FCH
000FFE E0                MOVX    A,@DPTR
000FFF 6410              XRL     A,#010H
001001 704E              JNZ     ?C0005?SYSTEM
   74: 		sys_state = SYS_ST_RUN;
   75: 		R_Scale_state = CS_Scale_state_init;
001003 904E57            MOV     DPTR,#sys_state
001006 7402              MOV     A,#02H
001008 F0                MOVX    @DPTR,A
   76: 
001009 E4                CLR     A
00100A 904CC5            MOV     DPTR,#R_Scale_state
00100D F0                MOVX    @DPTR,A
   77: 		QueueInit();
00100E F1CA              ACALL   QueueInit
   78: 		//read spiflash data,save to buffer
   79: 		SpiFlashOperator(CS_CMD_READ_FLASH);
001010 7F40              MOV     R7,#040H
001012 121F32            LCALL   _SpiFlashOperator
   80: 		bleConnStatus = BLE_STATUS_DISCONN;
001015 E4                CLR     A
001016 904C5B            MOV     DPTR,#bleConnStatus
001019 F0                MOVX    @DPTR,A
   81: 		if(deviceInfo.registerFlag != DEVICE_REGISTERED)
00101A 904C06            MOV     DPTR,#deviceInfo
00101D E0                MOVX    A,@DPTR
00101E 6401              XRL     A,#01H
001020 600B              JZ      ?C0006?SYSTEM
   82: 		{
   83: 			xmemset(mem_register_buf, 0, sizeof(deviceInfo));
001022 7B0A              MOV     R3,#0AH
001024 E4                CLR     A
001025 FD                MOV     R5,A
001026 7F0E              MOV     R7,#0EH
001028 7E4C              MOV     R6,#04CH
00102A 121F93            LCALL   _xmemset
   84: 		}
00102D         ?C0006?SYSTEM:
   85: 		*(mem_le_adv_data + 13) = deviceInfo.registerFlag;
00102D 904C06            MOV     DPTR,#deviceInfo
001030 E0                MOVX    A,@DPTR
001031 9043E7            MOV     DPTR,#043E7H
001034 F0                MOVX    @DPTR,A
   86: 			
   87: 		YC_UtilTimerInit();
001035 11C2              ACALL   YC_UtilTimerInit
   88: 		//YC_UtilTimerStart(1, SoftTimer_1SCallback, &SoftTimer_1STimerID);
   89: 		YC_UtilTimerStartMs(10, SoftTimer_10mSCallback, &SoftTimer_10msTimerID);
001037 7BFF              MOV     R3,#0FFH
001039 7A08              MOV     R2,#HIGH SoftTimer_10mSCallback
00103B 79EF              MOV     R1,#LOW SoftTimer_10mSCallback
00103D 904DD6            MOV     DPTR,#?_YC_UtilTimerStartMs?BYTE+05H
001040 744E              MOV     A,#HIGH SoftTimer_10msTimerID
001042 F0                MOVX    @DPTR,A
001043 A3                INC     DPTR
001044 743A              MOV     A,#LOW SoftTimer_10msTimerID
001046 F0                MOVX    @DPTR,A
001047 7F0A              MOV     R7,#0AH
001049 7E00              MOV     R6,#00H
00104B 3185              ACALL   _YC_UtilTimerStartMs
   90: 		CS_Scale_PowerOn();	
00104D 51C4              ACALL   CS_Scale_PowerOn
   91: 		
   92: 	}
00104F 8036              SJMP    ?C0007?SYSTEM
001051         ?C0005?SYSTEM:
   93: 	else {	//wake from LPM mode
   94: 		if(YC_GPIOGetInputStatus(5) == 0 ||	//GPIO5, key is  down	
001051 7F05              MOV     R7,#05H
001053 118D              ACALL   _YC_GPIOGetInputStatus
001055 5006              JNC     ?C0009?SYSTEM
001057 7F1B              MOV     R7,#01BH
001059 118D              ACALL   _YC_GPIOGetInputStatus
00105B 4024              JC      ?C0008?SYSTEM
00105D         ?C0009?SYSTEM:
   95: 		YC_GPIOGetInputStatus(27) == 0) {	//GPIO27, scale wakeup
   96: 			sys_state = SYS_ST_RUN;
00105D 904E57            MOV     DPTR,#sys_state
001060 7402              MOV     A,#02H
001062 F0                MOVX    @DPTR,A
   97: 			R_Scale_state = CS_Scale_state_standby;
001063 904CC5            MOV     DPTR,#R_Scale_state
001066 F0                MOVX    @DPTR,A
   98: 			YC_UtilTimerInit();
001067 11C2              ACALL   YC_UtilTimerInit
   99: 			//YC_UtilTimerStart(1, SoftTimer_1SCallback, &SoftTimer_1STimerID);
  100: 			YC_UtilTimerStartMs(10, SoftTimer_10mSCallback, &SoftTimer_10msTimerID);
001069 7BFF              MOV     R3,#0FFH
00106B 7A08              MOV     R2,#HIGH SoftTimer_10mSCallback
00106D 79EF              MOV     R1,#LOW SoftTimer_10mSCallback
00106F 904DD6            MOV     DPTR,#?_YC_UtilTimerStartMs?BYTE+05H
001072 744E              MOV     A,#HIGH SoftTimer_10msTimerID
001074 F0                MOVX    @DPTR,A
001075 A3                INC     DPTR
001076 743A              MOV     A,#LOW SoftTimer_10msTimerID
001078 F0                MOVX    @DPTR,A
001079 7F0A              MOV     R7,#0AH
00107B 7E00              MOV     R6,#00H
00107D 3185              ACALL   _YC_UtilTimerStartMs
  101: 			//CS_Scale_PowerOn();	
  102: 
  103: 			//R_Debug_temp=R_Scale_state;
  104: 			//CS_ScaleDisplay_Debug();
  105: 			//while(1);
  106: 		}
00107F 8006              SJMP    ?C0007?SYSTEM
001081         ?C0008?SYSTEM:
  107: 		else {	//remote bluetooth wakeup
  108: 			sys_state = SYS_ST_IDLE;
001081 904E57            MOV     DPTR,#sys_state
001084 7401              MOV     A,#01H
001086 F0                MOVX    @DPTR,A
  109: 		}
  110: 	}
001087         ?C0007?SYSTEM:
  111: 	*mem_poweron_flag = CS_NULL_FLAG;
001087 9049FC            MOV     DPTR,#049FCH
00108A E4                CLR     A
00108B F0                MOVX    @DPTR,A
  112: }
00108C 22                RET     
----- FUNCTION systemInit (END) -------


----- FUNCTION _YC_GPIOGetInputStatus (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  140: bool YC_GPIOGetInputStatus(u8_t gpio_num)
  141: {
;---- Variable 'gpio_num' assigned to Register 'R7' ----
  142: 	u8_t queue, group;
  143: 
  144: 	queue = (gpio_num & 7);
00108D EF                MOV     A,R7
00108E 5407              ANL     A,#07H
001090 FE                MOV     R6,A
;---- Variable 'queue' assigned to Register 'R6' ----
  145: 	group = (gpio_num>>3 & 3);
001091 EF                MOV     A,R7
001092 13                RRC     A
001093 13                RRC     A
001094 13                RRC     A
001095 5403              ANL     A,#03H
001097 FF                MOV     R7,A
;---- Variable 'group' assigned to Register 'R7' ----
  146: 
  147: 	return (REG_GPIO_IN(group) & (1<<queue));
001098 241C              ADD     A,#01CH
00109A FD                MOV     R5,A
00109B E4                CLR     A
00109C 3481              ADDC    A,#081H
00109E 8D82              MOV     DPL,R5
0010A0 F583              MOV     DPH,A
0010A2 E0                MOVX    A,@DPTR
0010A3 FD                MOV     R5,A
0010A4 7C00              MOV     R4,#00H
0010A6 AF06              MOV     R7,AR6
0010A8 7401              MOV     A,#01H
0010AA 7E00              MOV     R6,#00H
0010AC A807              MOV     R0,AR7
0010AE 08                INC     R0
0010AF 8005              SJMP    ?C0021?YC_PERIPHERAL
0010B1         ?C0020?YC_PERIPHERAL:
0010B1 C3                CLR     C
0010B2 33                RLC     A
0010B3 CE                XCH     A,R6
0010B4 33                RLC     A
0010B5 CE                XCH     A,R6
0010B6         ?C0021?YC_PERIPHERAL:
0010B6 D8F9              DJNZ    R0,?C0020?YC_PERIPHERAL
0010B8 FF                MOV     R7,A
0010B9 EE                MOV     A,R6
0010BA 5C                ANL     A,R4
0010BB FE                MOV     R6,A
0010BC EF                MOV     A,R7
0010BD 5D                ANL     A,R5
0010BE 4E                ORL     A,R6
0010BF 24FF              ADD     A,#0FFH
  148: }
0010C1 22                RET     
----- FUNCTION _YC_GPIOGetInputStatus (END) -------


----- FUNCTION YC_UtilTimerInit (BEGIN) -----
 FILE: 'YC_Sys.c'
    8: void YC_UtilTimerInit(void)
    9: {
   10: 	u8_t i;
   11: 	
   12: 	YC_UtilTimer.timer_flages = 0;
0010C2 E4                CLR     A
0010C3 904CDB            MOV     DPTR,#YC_UtilTimer
0010C6 F0                MOVX    @DPTR,A
   13: 	YC_UtilTimer.last_timer = YC_CLK_N;
0010C7 908101            MOV     DPTR,#08101H
0010CA E0                MOVX    A,@DPTR
0010CB FF                MOV     R7,A
0010CC E4                CLR     A
0010CD FC                MOV     R4,A
0010CE FD                MOV     R5,A
0010CF FE                MOV     R6,A
0010D0 7808              MOV     R0,#08H
0010D2 12031F            LCALL   ?C?LSHL
0010D5 A804              MOV     R0,AR4
0010D7 A905              MOV     R1,AR5
0010D9 AA06              MOV     R2,AR6
0010DB AB07              MOV     R3,AR7
0010DD 908100            MOV     DPTR,#08100H
0010E0 E0                MOVX    A,@DPTR
0010E1 FF                MOV     R7,A
0010E2 E4                CLR     A
0010E3 EB                MOV     A,R3
0010E4 4F                ORL     A,R7
0010E5 FF                MOV     R7,A
0010E6 EA                MOV     A,R2
0010E7 FE                MOV     R6,A
0010E8 E9                MOV     A,R1
0010E9 FD                MOV     R5,A
0010EA E8                MOV     A,R0
0010EB FC                MOV     R4,A
0010EC C004              PUSH    AR4
0010EE C005              PUSH    AR5
0010F0 C006              PUSH    AR6
0010F2 C007              PUSH    AR7
0010F4 908102            MOV     DPTR,#08102H
0010F7 E0                MOVX    A,@DPTR
0010F8 FF                MOV     R7,A
0010F9 E4                CLR     A
0010FA FC                MOV     R4,A
0010FB FD                MOV     R5,A
0010FC FE                MOV     R6,A
0010FD 7810              MOV     R0,#010H
0010FF 12031F            LCALL   ?C?LSHL
001102 D003              POP     AR3
001104 D002              POP     AR2
001106 D001              POP     AR1
001108 D000              POP     AR0
00110A EF                MOV     A,R7
00110B 4B                ORL     A,R3
00110C FF                MOV     R7,A
00110D EE                MOV     A,R6
00110E 4A                ORL     A,R2
00110F FE                MOV     R6,A
001110 ED                MOV     A,R5
001111 49                ORL     A,R1
001112 FD                MOV     R5,A
001113 EC                MOV     A,R4
001114 48                ORL     A,R0
001115 FC                MOV     R4,A
001116 C004              PUSH    AR4
001118 C005              PUSH    AR5
00111A C006              PUSH    AR6
00111C C007              PUSH    AR7
00111E A3                INC     DPTR
00111F E0                MOVX    A,@DPTR
001120 FF                MOV     R7,A
001121 E4                CLR     A
001122 FC                MOV     R4,A
001123 FD                MOV     R5,A
001124 FE                MOV     R6,A
001125 7818              MOV     R0,#018H
001127 12031F            LCALL   ?C?LSHL
00112A D003              POP     AR3
00112C D002              POP     AR2
00112E D001              POP     AR1
001130 D000              POP     AR0
001132 EF                MOV     A,R7
001133 4B                ORL     A,R3
001134 FF                MOV     R7,A
001135 EE                MOV     A,R6
001136 4A                ORL     A,R2
001137 FE                MOV     R6,A
001138 ED                MOV     A,R5
001139 49                ORL     A,R1
00113A FD                MOV     R5,A
00113B EC                MOV     A,R4
00113C 48                ORL     A,R0
00113D FC                MOV     R4,A
00113E 904D14            MOV     DPTR,#YC_UtilTimer+039H
001141 120332            LCALL   ?C?LSTXDATA
   14: 	for(i = 0; i < YC_UTIL_TIMER_NUM; i++){
001144 E4                CLR     A
001145 904E54            MOV     DPTR,#i
001148 F0                MOVX    @DPTR,A
001149         ?C0001?YC_SYS:
001149 904E54            MOV     DPTR,#i
00114C E0                MOVX    A,@DPTR
00114D FF                MOV     R7,A
00114E C3                CLR     C
00114F 9408              SUBB    A,#08H
001151 5031              JNC     ?C0004?YC_SYS
   15: 		YC_UtilTimer.callback[i] = 0;
001153 EF                MOV     A,R7
001154 75F003            MOV     B,#03H
001157 A4                MUL     AB
001158 24DC              ADD     A,#LOW YC_UtilTimer+01H
00115A F582              MOV     DPL,A
00115C E4                CLR     A
00115D 344C              ADDC    A,#HIGH YC_UtilTimer+01H
00115F F583              MOV     DPH,A
001161 E4                CLR     A
001162 F0                MOVX    @DPTR,A
001163 A3                INC     DPTR
001164 F0                MOVX    @DPTR,A
001165 A3                INC     DPTR
001166 F0                MOVX    @DPTR,A
   16: 		YC_UtilTimer.timer_end[i] = 0;
001167 EF                MOV     A,R7
001168 25E0              ADD     A,ACC
00116A 25E0              ADD     A,ACC
00116C 24F4              ADD     A,#LOW YC_UtilTimer+019H
00116E F582              MOV     DPL,A
001170 E4                CLR     A
001171 344C              ADDC    A,#HIGH YC_UtilTimer+019H
001173 F583              MOV     DPH,A
001175 12033E            LCALL   ?C?LSTKXDATA
001178 00                DB      00H
001179 00                DB      00H
00117A 00                DB      00H
00117B 00                DB      00H
   17: 	}
00117C 904E54            MOV     DPTR,#i
00117F E0                MOVX    A,@DPTR
001180 04                INC     A
001181 F0                MOVX    @DPTR,A
001182 80C5              SJMP    ?C0001?YC_SYS
   18: 	return;
   19: }
001184         ?C0004?YC_SYS:
001184 22                RET     
----- FUNCTION YC_UtilTimerInit (END) -------


----- FUNCTION _YC_UtilTimerStartMs (BEGIN) -----
 FILE: 'YC_Sys.c'
   44: bool YC_UtilTimerStartMs(u16_t time_in_ms, p_TimerCallback callback, pxbyte timer_id)
   45: {
001185 904DD1            MOV     DPTR,#time_in_ms
001188 EE                MOV     A,R6
001189 F0                MOVX    @DPTR,A
00118A A3                INC     DPTR
00118B EF                MOV     A,R7
00118C F0                MOVX    @DPTR,A
;---- Variable 'callback' assigned to Register 'R1/R2/R3' ----
   46: 	u8_t i = 0;
   47: 	
00118D E4                CLR     A
00118E 904DD8            MOV     DPTR,#i
001191 F0                MOVX    @DPTR,A
   48: 	//do we have enough timers?
   49: 	if(YC_UtilTimer.timer_flages == 0xff){
001192 904CDB            MOV     DPTR,#YC_UtilTimer
001195 E0                MOVX    A,@DPTR
001196 B4FF02            CJNE    A,#0FFH,?C0007?YC_SYS
   50: 		return false;
001199 C3                CLR     C
00119A 22                RET     
   51: 	}
00119B         ?C0007?YC_SYS:
   52: 	while(i < YC_UTIL_TIMER_NUM){
00119B 904DD8            MOV     DPTR,#i
00119E E0                MOVX    A,@DPTR
00119F FF                MOV     R7,A
0011A0 C3                CLR     C
0011A1 9408              SUBB    A,#08H
0011A3 502D              JNC     ?C0008?YC_SYS
   53: 		if(!((YC_UtilTimer.timer_flages >> i) & 1)){
0011A5 904CDB            MOV     DPTR,#YC_UtilTimer
0011A8 E0                MOVX    A,@DPTR
0011A9 FE                MOV     R6,A
0011AA A807              MOV     R0,AR7
0011AC 08                INC     R0
0011AD 8002              SJMP    ?C0026?YC_SYS
0011AF         ?C0025?YC_SYS:
0011AF C3                CLR     C
0011B0 13                RRC     A
0011B1         ?C0026?YC_SYS:
0011B1 D8FC              DJNZ    R0,?C0025?YC_SYS
0011B3 20E014            JB      ACC.0,?C0009?YC_SYS
   54: 			if(timer_id)
0011B6 904DD6            MOV     DPTR,#timer_id
0011B9 E0                MOVX    A,@DPTR
0011BA FE                MOV     R6,A
0011BB A3                INC     DPTR
0011BC E0                MOVX    A,@DPTR
0011BD FF                MOV     R7,A
0011BE 4E                ORL     A,R6
0011BF 6011              JZ      ?C0008?YC_SYS
   55: 				*timer_id = i;
0011C1 A3                INC     DPTR
0011C2 E0                MOVX    A,@DPTR
0011C3 8F82              MOV     DPL,R7
0011C5 8E83              MOV     DPH,R6
0011C7 F0                MOVX    @DPTR,A
   56: 			break;
0011C8 8008              SJMP    ?C0008?YC_SYS
   57: 		}
0011CA         ?C0009?YC_SYS:
   58: 		++i;
0011CA 904DD8            MOV     DPTR,#i
0011CD E0                MOVX    A,@DPTR
0011CE 04                INC     A
0011CF F0                MOVX    @DPTR,A
   59: 	}
0011D0 80C9              SJMP    ?C0007?YC_SYS
0011D2         ?C0008?YC_SYS:
   60: 	YC_UtilTimer.timer_flages |= 1 << i;
0011D2 904CDB            MOV     DPTR,#YC_UtilTimer
0011D5 E0                MOVX    A,@DPTR
0011D6 FF                MOV     R7,A
0011D7 904DD8            MOV     DPTR,#i
0011DA E0                MOVX    A,@DPTR
0011DB FE                MOV     R6,A
0011DC 7401              MOV     A,#01H
0011DE A806              MOV     R0,AR6
0011E0 08                INC     R0
0011E1 8002              SJMP    ?C0028?YC_SYS
0011E3         ?C0027?YC_SYS:
0011E3 C3                CLR     C
0011E4 33                RLC     A
0011E5         ?C0028?YC_SYS:
0011E5 D8FC              DJNZ    R0,?C0027?YC_SYS
0011E7 4F                ORL     A,R7
0011E8 904CDB            MOV     DPTR,#YC_UtilTimer
0011EB F0                MOVX    @DPTR,A
   61: 	YC_UtilTimer.callback[i] = callback;
0011EC EE                MOV     A,R6
0011ED 75F003            MOV     B,#03H
0011F0 A4                MUL     AB
0011F1 24DC              ADD     A,#LOW YC_UtilTimer+01H
0011F3 F582              MOV     DPL,A
0011F5 E4                CLR     A
0011F6 344C              ADDC    A,#HIGH YC_UtilTimer+01H
0011F8 F583              MOV     DPH,A
0011FA EB                MOV     A,R3
0011FB F0                MOVX    @DPTR,A
0011FC A3                INC     DPTR
0011FD EA                MOV     A,R2
0011FE F0                MOVX    @DPTR,A
0011FF A3                INC     DPTR
001200 E9                MOV     A,R1
001201 F0                MOVX    @DPTR,A
   62: 	YC_UtilTimer.timer_end[i] = YC_CLK_N + ((u32_t)time_in_ms << 4)/5;
001202 908101            MOV     DPTR,#08101H
001205 E0                MOVX    A,@DPTR
001206 FF                MOV     R7,A
001207 E4                CLR     A
001208 FC                MOV     R4,A
001209 FD                MOV     R5,A
00120A FE                MOV     R6,A
00120B 7808              MOV     R0,#08H
00120D 12031F            LCALL   ?C?LSHL
001210 A804              MOV     R0,AR4
001212 A905              MOV     R1,AR5
001214 AA06              MOV     R2,AR6
001216 AB07              MOV     R3,AR7
001218 908100            MOV     DPTR,#08100H
00121B E0                MOVX    A,@DPTR
00121C FF                MOV     R7,A
00121D E4                CLR     A
00121E EB                MOV     A,R3
00121F 4F                ORL     A,R7
001220 FF                MOV     R7,A
001221 EA                MOV     A,R2
001222 FE                MOV     R6,A
001223 E9                MOV     A,R1
001224 FD                MOV     R5,A
001225 E8                MOV     A,R0
001226 FC                MOV     R4,A
001227 C004              PUSH    AR4
001229 C005              PUSH    AR5
00122B C006              PUSH    AR6
00122D C007              PUSH    AR7
00122F 908102            MOV     DPTR,#08102H
001232 E0                MOVX    A,@DPTR
001233 FF                MOV     R7,A
001234 E4                CLR     A
001235 FC                MOV     R4,A
001236 FD                MOV     R5,A
001237 FE                MOV     R6,A
001238 7810              MOV     R0,#010H
00123A 12031F            LCALL   ?C?LSHL
00123D D003              POP     AR3
00123F D002              POP     AR2
001241 D001              POP     AR1
001243 D000              POP     AR0
001245 EF                MOV     A,R7
001246 4B                ORL     A,R3
001247 FF                MOV     R7,A
001248 EE                MOV     A,R6
001249 4A                ORL     A,R2
00124A FE                MOV     R6,A
00124B ED                MOV     A,R5
00124C 49                ORL     A,R1
00124D FD                MOV     R5,A
00124E EC                MOV     A,R4
00124F 48                ORL     A,R0
001250 FC                MOV     R4,A
001251 C004              PUSH    AR4
001253 C005              PUSH    AR5
001255 C006              PUSH    AR6
001257 C007              PUSH    AR7
001259 A3                INC     DPTR
00125A E0                MOVX    A,@DPTR
00125B FF                MOV     R7,A
00125C E4                CLR     A
00125D FC                MOV     R4,A
00125E FD                MOV     R5,A
00125F FE                MOV     R6,A
001260 7818              MOV     R0,#018H
001262 12031F            LCALL   ?C?LSHL
001265 D003              POP     AR3
001267 D002              POP     AR2
001269 D001              POP     AR1
00126B D000              POP     AR0
00126D EF                MOV     A,R7
00126E 4B                ORL     A,R3
00126F FF                MOV     R7,A
001270 EE                MOV     A,R6
001271 4A                ORL     A,R2
001272 FE                MOV     R6,A
001273 ED                MOV     A,R5
001274 49                ORL     A,R1
001275 FD                MOV     R5,A
001276 EC                MOV     A,R4
001277 48                ORL     A,R0
001278 FC                MOV     R4,A
001279 C004              PUSH    AR4
00127B C005              PUSH    AR5
00127D C006              PUSH    AR6
00127F C007              PUSH    AR7
001281 904DD1            MOV     DPTR,#time_in_ms
001284 E0                MOVX    A,@DPTR
001285 FE                MOV     R6,A
001286 A3                INC     DPTR
001287 E0                MOVX    A,@DPTR
001288 FF                MOV     R7,A
001289 E4                CLR     A
00128A FC                MOV     R4,A
00128B FD                MOV     R5,A
00128C 7804              MOV     R0,#04H
00128E 12031F            LCALL   ?C?LSHL
001291 E4                CLR     A
001292 7B05              MOV     R3,#05H
001294 FA                MOV     R2,A
001295 F9                MOV     R1,A
001296 F8                MOV     R0,A
001297 120269            LCALL   ?C?ULDIV
00129A D003              POP     AR3
00129C D002              POP     AR2
00129E D001              POP     AR1
0012A0 D000              POP     AR0
0012A2 EF                MOV     A,R7
0012A3 2B                ADD     A,R3
0012A4 FF                MOV     R7,A
0012A5 EE                MOV     A,R6
0012A6 3A                ADDC    A,R2
0012A7 FE                MOV     R6,A
0012A8 ED                MOV     A,R5
0012A9 39                ADDC    A,R1
0012AA FD                MOV     R5,A
0012AB EC                MOV     A,R4
0012AC 38                ADDC    A,R0
0012AD FC                MOV     R4,A
0012AE 904DD8            MOV     DPTR,#i
0012B1 E0                MOVX    A,@DPTR
0012B2 25E0              ADD     A,ACC
0012B4 25E0              ADD     A,ACC
0012B6 24F4              ADD     A,#LOW YC_UtilTimer+019H
0012B8 F582              MOV     DPL,A
0012BA E4                CLR     A
0012BB 344C              ADDC    A,#HIGH YC_UtilTimer+019H
0012BD F583              MOV     DPH,A
0012BF 120332            LCALL   ?C?LSTXDATA
   63: 	return true;
0012C2 D3                SETB    C
   64: }
0012C3 22                RET     
----- FUNCTION _YC_UtilTimerStartMs (END) -------


----- FUNCTION CS_Scale_PowerOn (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  170: void CS_Scale_PowerOn(void)
  171: {
  172: 	
  173: 	if(R_Scale_state == CS_Scale_state_init)
0012C4 904CC5            MOV     DPTR,#R_Scale_state
0012C7 E0                MOVX    A,@DPTR
0012C8 702C              JNZ     ?C0011?CS_SCALE_PROC
  174: 		{
  175: 		B_Weight_AdOk = false;
0012CA 904CD7            MOV     DPTR,#B_Weight_AdOk
0012CD F0                MOVX    @DPTR,A
  176: 		R_Weight_Com_Coo.pre =CS_CommTo1186_Null;	
0012CE 904D51            MOV     DPTR,#R_Weight_Com_Coo+01H
0012D1 F0                MOVX    @DPTR,A
  177: 		R_Weight_Com_Coo.now = CS_CommTo1186_Null;	
0012D2 904D50            MOV     DPTR,#R_Weight_Com_Coo
0012D5 F0                MOVX    @DPTR,A
  178: 		//R_Scale_state =	CS_Scale_state_weighting;
  179: 		R_Selet_Unit = CS_ScaleDisplay_L_kg;
0012D6 904CC6            MOV     DPTR,#R_Selet_Unit
0012D9 F0                MOVX    @DPTR,A
  180: 
  181: 		R_Debug_temp = 0;
0012DA A3                INC     DPTR
0012DB F0                MOVX    @DPTR,A
0012DC A3                INC     DPTR
0012DD F0                MOVX    @DPTR,A
  182: 		B_Debug_Test =false;
0012DE C201              CLR     B_Debug_Test
  183: 		
  184: 		CS_Scale_CaliProc(CaliProcSetCali);		
0012E0 7F01              MOV     R7,#01H
0012E2 120A04            LCALL   _CS_Scale_CaliProc
  185: 		CS_Scale_ZeroProc(ZeroProcReset,0);	
0012E5 E4                CLR     A
0012E6 FD                MOV     R5,A
0012E7 FC                MOV     R4,A
0012E8 7F04              MOV     R7,#04H
0012EA 51F7              ACALL   _CS_Scale_ZeroProc
  186: 		
  187: 		CS_Scale_TimeOutProc(CS_Reset_AllTime);
0012EC 7F06              MOV     R7,#06H
0012EE 12318E            LCALL   _CS_Scale_TimeOutProc
  188: 		CS_Scale_PowerOnProc(1);
0012F1 D200              SETB    ?CS_Scale_PowerOnProc?BIT
0012F3 123BD9            LCALL   CS_Scale_PowerOnProc
  189: 		}
  190: }
0012F6         ?C0011?CS_SCALE_PROC:
0012F6 22                RET     
----- FUNCTION CS_Scale_PowerOn (END) -------


----- FUNCTION _CS_Scale_ZeroProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  392: u16_t  CS_Scale_ZeroProc(u8_t option,u16_t setdata)
  393: {
;---- Variable 'setdata' assigned to Register 'R4/R5' ----
0012F7 904DE9            MOV     DPTR,#option
0012FA EF                MOV     A,R7
0012FB F0                MOVX    @DPTR,A
  394: 	static	u8_t	   xdata R_Weight_GetZeroTimeOut = 0;	
  395: 	static	u16_t  xdata R_AD_PowerOnZero;	//上电零点AD值
  396: 	static	u16_t  xdata R_AD_Zero;			//零点AD值
  397: 	static	u8_t    xdata B_Weight_Zero;		//处于零点标志
  398: 	static	u8_t    xdata B_Weight_ZeroOk;	//上电获取完零点标志
  399: 	static	u8_t	   xdata B_LockDownCheck;	//下秤后第一次稳定追零
  400: 	static	u8_t	   xdata B_WeightZeroErr;		//零点错误标志
  401: 	
  402: 	u16_t	R_AdFilTimes;
  403: 	u16_t	R_AD_BUF;
  404: 	u16_t	weight_temp;
  405: 	u16_t	R_Open_Weight;
  406: 	u8_t		B_Weight_Pos;
  407: 
  408: 	
  409: 	
  410: 	if(option==ZeroProcReset)
0012FC BF0408            CJNE    R7,#04H,?C0044?CS_SCALE_PROC
  411: 		{
  412: 		B_Weight_ZeroOk = 0;
0012FF E4                CLR     A
001300 904C9B            MOV     DPTR,#B_Weight_ZeroOk
001303 F0                MOVX    @DPTR,A
  413: 		return 0;		
001304 FE                MOV     R6,A
001305 FF                MOV     R7,A
001306 22                RET     
  414: 		}
001307         ?C0044?CS_SCALE_PROC:
  415: 	if(option==SetPowerOnZero)
001307 904DE9            MOV     DPTR,#option
00130A E0                MOVX    A,@DPTR
00130B FB                MOV     R3,A
00130C B4050C            CJNE    A,#05H,?C0046?CS_SCALE_PROC
  416: 		{
  417: 		R_AD_PowerOnZero = setdata;
00130F 904C96            MOV     DPTR,#R_AD_PowerOnZero
001312 EC                MOV     A,R4
001313 F0                MOVX    @DPTR,A
001314 A3                INC     DPTR
001315 ED                MOV     A,R5
001316 F0                MOVX    @DPTR,A
  418: 		return 0;		
001317 E4                CLR     A
001318 FE                MOV     R6,A
001319 FF                MOV     R7,A
00131A 22                RET     
  419: 		}
00131B         ?C0046?CS_SCALE_PROC:
  420: 	if(option==SetRunningZero)
00131B EB                MOV     A,R3
00131C B4060E            CJNE    A,#06H,?C0047?CS_SCALE_PROC
  421: 		{
  422: 		R_AD_Zero = setdata;
00131F AF05              MOV     R7,AR5
001321 904C98            MOV     DPTR,#R_AD_Zero
001324 EC                MOV     A,R4
001325 F0                MOVX    @DPTR,A
001326 A3                INC     DPTR
001327 EF                MOV     A,R7
001328 F0                MOVX    @DPTR,A
  423: 		return 0;		
001329 E4                CLR     A
00132A FE                MOV     R6,A
00132B FF                MOV     R7,A
00132C 22                RET     
  424: 		}
00132D         ?C0047?CS_SCALE_PROC:
  425: 	if(option==ClrLockDownCheckFlag)
00132D 904DE9            MOV     DPTR,#option
001330 E0                MOVX    A,@DPTR
001331 FD                MOV     R5,A
001332 B40808            CJNE    A,#08H,?C0048?CS_SCALE_PROC
  426: 		{
  427: 		B_LockDownCheck=false;
001335 E4                CLR     A
001336 904C9C            MOV     DPTR,#B_LockDownCheck
001339 F0                MOVX    @DPTR,A
  428: 		return 0;
00133A FE                MOV     R6,A
00133B FF                MOV     R7,A
00133C 22                RET     
  429: 		}
00133D         ?C0048?CS_SCALE_PROC:
  430: 	
  431: 	if(option==FindPowerOnZero)
00133D ED                MOV     A,R5
00133E 640A              XRL     A,#0AH
001340 7075              JNZ     ?C0049?CS_SCALE_PROC
  432: 	{
  433: 		
  434: 	
  435: 		if(R_Weight_GetZeroTimeOut <60)
001342 904C95            MOV     DPTR,#R_Weight_GetZeroTimeOut
001345 E0                MOVX    A,@DPTR
001346 C3                CLR     C
001347 943C              SUBB    A,#03CH
001349 5052              JNC     ?C0050?CS_SCALE_PROC
  436: 		{
  437: 		R_Weight_GetZeroTimeOut ++;
00134B E0                MOVX    A,@DPTR
00134C 04                INC     A
00134D F0                MOVX    @DPTR,A
  438: 		
  439: 		R_AD_BUF = R_AD_Original;
00134E 904CD8            MOV     DPTR,#R_AD_Original
001351 E0                MOVX    A,@DPTR
001352 FE                MOV     R6,A
001353 A3                INC     DPTR
001354 E0                MOVX    A,@DPTR
001355 FF                MOV     R7,A
001356 904DEA            MOV     DPTR,#R_AD_BUF
001359 EE                MOV     A,R6
00135A F0                MOVX    @DPTR,A
00135B FC                MOV     R4,A
00135C A3                INC     DPTR
00135D EF                MOV     A,R7
00135E F0                MOVX    @DPTR,A
00135F FD                MOV     R5,A
  440: 		R_AD_BUF=CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
001360 E4                CLR     A
001361 FF                MOV     R7,A
001362 1237C1            LCALL   _CS_Scale_AdcFilter
001365 904DEA            MOV     DPTR,#R_AD_BUF
001368 EE                MOV     A,R6
001369 F0                MOVX    @DPTR,A
00136A FC                MOV     R4,A
00136B A3                INC     DPTR
00136C EF                MOV     A,R7
00136D F0                MOVX    @DPTR,A
00136E FD                MOV     R5,A
  441: 		R_AdFilTimes = CS_Scale_AdcFilter(ScaleAdcFilterGetFilTimes,R_AD_BUF);
00136F 7F02              MOV     R7,#02H
001371 1237C1            LCALL   _CS_Scale_AdcFilter
;---- Variable 'R_AdFilTimes' assigned to Register 'R6/R7' ----
  442: 		
  443: 			if(R_AdFilTimes >=50)
001374 C3                CLR     C
001375 EF                MOV     A,R7
001376 9432              SUBB    A,#032H
001378 EE                MOV     A,R6
001379 9400              SUBB    A,#00H
00137B 403A              JC      ?C0049?CS_SCALE_PROC
  444: 				{
  445: 				R_AD_Zero	= R_AD_BUF;
00137D 904DEA            MOV     DPTR,#R_AD_BUF
001380 E0                MOVX    A,@DPTR
001381 FE                MOV     R6,A
001382 A3                INC     DPTR
001383 E0                MOVX    A,@DPTR
001384 FF                MOV     R7,A
001385 904C98            MOV     DPTR,#R_AD_Zero
001388 EE                MOV     A,R6
001389 F0                MOVX    @DPTR,A
00138A A3                INC     DPTR
00138B EF                MOV     A,R7
00138C F0                MOVX    @DPTR,A
  446: 				R_AD_PowerOnZero = R_AD_BUF;
00138D 904C96            MOV     DPTR,#R_AD_PowerOnZero
001390 EE                MOV     A,R6
001391 F0                MOVX    @DPTR,A
001392 A3                INC     DPTR
001393 EF                MOV     A,R7
001394 F0                MOVX    @DPTR,A
  447: 				B_Weight_ZeroOk = true;
001395 904C9B            MOV     DPTR,#B_Weight_ZeroOk
001398 7401              MOV     A,#01H
00139A F0                MOVX    @DPTR,A
  448: 				}
  449: 		}
00139B 801A              SJMP    ?C0049?CS_SCALE_PROC
00139D         ?C0050?CS_SCALE_PROC:
  450: 		else
  451: 		{
  452: 		R_AD_Zero	= 4000;
00139D 904C98            MOV     DPTR,#R_AD_Zero
0013A0 740F              MOV     A,#0FH
0013A2 F0                MOVX    @DPTR,A
0013A3 A3                INC     DPTR
0013A4 74A0              MOV     A,#0A0H
0013A6 F0                MOVX    @DPTR,A
  453: 		R_AD_PowerOnZero = 4000;
0013A7 904C96            MOV     DPTR,#R_AD_PowerOnZero
0013AA 740F              MOV     A,#0FH
0013AC F0                MOVX    @DPTR,A
0013AD A3                INC     DPTR
0013AE 74A0              MOV     A,#0A0H
0013B0 F0                MOVX    @DPTR,A
  454: 		B_Weight_ZeroOk = true;
0013B1 904C9B            MOV     DPTR,#B_Weight_ZeroOk
0013B4 7401              MOV     A,#01H
0013B6 F0                MOVX    @DPTR,A
  455: 		}
  456: 
  457: 	}
0013B7         ?C0049?CS_SCALE_PROC:
  458: 
  459: 	if(option==RunningZero)
0013B7 904DE9            MOV     DPTR,#option
0013BA E0                MOVX    A,@DPTR
0013BB 6407              XRL     A,#07H
0013BD 6002              JZ      $ + 4H
0013BF 81F3              AJMP    ?C0053?CS_SCALE_PROC
  460: 	{
  461: 	B_Weight_Zero = false;		
0013C1 904C9A            MOV     DPTR,#B_Weight_Zero
0013C4 F0                MOVX    @DPTR,A
  462: 	//3kg以下才追零包括负重量
  463: 	B_Weight_Pos = CS_Scale_GetDeltaAD(GetADDirection);		//获取AD方向
0013C5 7F01              MOV     R7,#01H
0013C7 F1E6              ACALL   _CS_Scale_GetDeltaAD
0013C9 904DF0            MOV     DPTR,#B_Weight_Pos
0013CC EF                MOV     A,R7
0013CD F0                MOVX    @DPTR,A
  464: 	R_Open_Weight = CS_Scale_CaliProc(CaliProcGetOpenWeight);	//获取开机重量值
0013CE 7F07              MOV     R7,#07H
0013D0 120A04            LCALL   _CS_Scale_CaliProc
0013D3 904DEE            MOV     DPTR,#R_Open_Weight
0013D6 EE                MOV     A,R6
0013D7 F0                MOVX    @DPTR,A
0013D8 A3                INC     DPTR
0013D9 EF                MOV     A,R7
0013DA F0                MOVX    @DPTR,A
  465: 	
  466: 	if(R_UnitWeight.origin <= 300 ||B_Weight_Pos ==false)	
0013DB 904CC9            MOV     DPTR,#R_UnitWeight
0013DE E0                MOVX    A,@DPTR
0013DF FE                MOV     R6,A
0013E0 A3                INC     DPTR
0013E1 E0                MOVX    A,@DPTR
0013E2 FF                MOV     R7,A
0013E3 D3                SETB    C
0013E4 942C              SUBB    A,#02CH
0013E6 EE                MOV     A,R6
0013E7 9401              SUBB    A,#01H
0013E9 4006              JC      ?C0055?CS_SCALE_PROC
0013EB 904DF0            MOV     DPTR,#B_Weight_Pos
0013EE E0                MOVX    A,@DPTR
0013EF 7006              JNZ     ?C0054?CS_SCALE_PROC
0013F1         ?C0055?CS_SCALE_PROC:
  467: 		B_Weight_Zero = true;
0013F1 904C9A            MOV     DPTR,#B_Weight_Zero
0013F4 7401              MOV     A,#01H
0013F6 F0                MOVX    @DPTR,A
0013F7         ?C0054?CS_SCALE_PROC:
  468: 
  469: 		if(R_UnitWeight.origin <= 200 || B_Weight_Pos==false)
0013F7 D3                SETB    C
0013F8 EF                MOV     A,R7
0013F9 94C8              SUBB    A,#0C8H
0013FB EE                MOV     A,R6
0013FC 9400              SUBB    A,#00H
0013FE 4008              JC      ?C0057?CS_SCALE_PROC
001400 904DF0            MOV     DPTR,#B_Weight_Pos
001403 E0                MOVX    A,@DPTR
001404 6002              JZ      $ + 4H
001406 81EF              AJMP    ?C0056?CS_SCALE_PROC
001408         ?C0057?CS_SCALE_PROC:
  470: 			{		
  471: 				if(CS_Scale_JudgeSteady(GetIfSmallSteady)==true)
001408 7F02              MOV     R7,#02H
00140A 1230AE            LCALL   _CS_Scale_JudgeSteady
00140D EF                MOV     A,R7
00140E 6401              XRL     A,#01H
001410 6002              JZ      $ + 4H
001412 81EF              AJMP    ?C0056?CS_SCALE_PROC
  472: 					{
  473: 
  474: 					CS_Scale_JudgeSteady(ResetSteady);
001414 7F01              MOV     R7,#01H
001416 1230AE            LCALL   _CS_Scale_JudgeSteady
  475: 					
  476: 					//非锁定状态正常追零
  477: 					if(CS_Scale_LockProc(GetIfLock)==false)	
001419 7F02              MOV     R7,#02H
00141B 1234FF            LCALL   _CS_Scale_LockProc
00141E EF                MOV     A,R7
00141F 7054              JNZ     ?C0059?CS_SCALE_PROC
  478: 						{
  479: 						if(R_AD_Original >= R_AD_PowerOnZero)
001421 904C96            MOV     DPTR,#R_AD_PowerOnZero
001424 E0                MOVX    A,@DPTR
001425 FE                MOV     R6,A
001426 A3                INC     DPTR
001427 E0                MOVX    A,@DPTR
001428 FF                MOV     R7,A
001429 904CD8            MOV     DPTR,#R_AD_Original
00142C E0                MOVX    A,@DPTR
00142D FC                MOV     R4,A
00142E A3                INC     DPTR
00142F E0                MOVX    A,@DPTR
001430 FD                MOV     R5,A
001431 C3                CLR     C
001432 9F                SUBB    A,R7
001433 EC                MOV     A,R4
001434 9E                SUBB    A,R6
001435 402D              JC      ?C0060?CS_SCALE_PROC
  480: 							{
  481: 							weight_temp = R_AD_Original - R_AD_PowerOnZero;
001437 ED                MOV     A,R5
001438 9F                SUBB    A,R7
001439 FF                MOV     R7,A
00143A EC                MOV     A,R4
00143B 9E                SUBB    A,R6
00143C FE                MOV     R6,A
00143D 904DEC            MOV     DPTR,#weight_temp
001440 F0                MOVX    @DPTR,A
001441 A3                INC     DPTR
001442 EF                MOV     A,R7
001443 F0                MOVX    @DPTR,A
  482: 							if(weight_temp < R_Open_Weight)
001444 D3                SETB    C
001445 904DEF            MOV     DPTR,#R_Open_Weight+01H
001448 E0                MOVX    A,@DPTR
001449 9F                SUBB    A,R7
00144A 904DEE            MOV     DPTR,#R_Open_Weight
00144D E0                MOVX    A,@DPTR
00144E 9E                SUBB    A,R6
00144F 5002              JNC     $ + 4H
001451 81EF              AJMP    ?C0056?CS_SCALE_PROC
  483: 								R_AD_Zero = R_AD_Original;
001453 904CD8            MOV     DPTR,#R_AD_Original
001456 E0                MOVX    A,@DPTR
001457 FF                MOV     R7,A
001458 A3                INC     DPTR
001459 E0                MOVX    A,@DPTR
00145A 904C98            MOV     DPTR,#R_AD_Zero
00145D CF                XCH     A,R7
00145E F0                MOVX    @DPTR,A
00145F A3                INC     DPTR
001460 EF                MOV     A,R7
001461 F0                MOVX    @DPTR,A
  484: 							}
001462 81EF              AJMP    ?C0056?CS_SCALE_PROC
001464         ?C0060?CS_SCALE_PROC:
  485: 						else
  486: 							R_AD_Zero = R_AD_Original;
001464 904CD8            MOV     DPTR,#R_AD_Original
001467 E0                MOVX    A,@DPTR
001468 FF                MOV     R7,A
001469 A3                INC     DPTR
00146A E0                MOVX    A,@DPTR
00146B 904C98            MOV     DPTR,#R_AD_Zero
00146E CF                XCH     A,R7
00146F F0                MOVX    @DPTR,A
001470 A3                INC     DPTR
001471 EF                MOV     A,R7
001472 F0                MOVX    @DPTR,A
  487: 						}
001473 807A              SJMP    ?C0056?CS_SCALE_PROC
001475         ?C0059?CS_SCALE_PROC:
  488: 					//锁定状态下秤第一次追零做防提起处理
  489: 					else			
  490: 						{
  491: 						if(B_LockDownCheck==false)
001475 904C9C            MOV     DPTR,#B_LockDownCheck
001478 E0                MOVX    A,@DPTR
001479 7074              JNZ     ?C0056?CS_SCALE_PROC
  492: 							{
  493: 							if(R_AD_Original>R_AD_Zero)
00147B 904C98            MOV     DPTR,#R_AD_Zero
00147E E0                MOVX    A,@DPTR
00147F FE                MOV     R6,A
001480 A3                INC     DPTR
001481 E0                MOVX    A,@DPTR
001482 FF                MOV     R7,A
001483 904CD8            MOV     DPTR,#R_AD_Original
001486 E0                MOVX    A,@DPTR
001487 FC                MOV     R4,A
001488 A3                INC     DPTR
001489 E0                MOVX    A,@DPTR
00148A FD                MOV     R5,A
00148B D3                SETB    C
00148C 9F                SUBB    A,R7
00148D EC                MOV     A,R4
00148E 9E                SUBB    A,R6
00148F 400E              JC      ?C0065?CS_SCALE_PROC
  494: 								weight_temp = R_AD_Original - R_AD_Zero;
001491 ED                MOV     A,R5
001492 9F                SUBB    A,R7
001493 FF                MOV     R7,A
001494 EC                MOV     A,R4
001495 9E                SUBB    A,R6
001496 904DEC            MOV     DPTR,#weight_temp
001499 F0                MOVX    @DPTR,A
00149A A3                INC     DPTR
00149B EF                MOV     A,R7
00149C F0                MOVX    @DPTR,A
00149D 801B              SJMP    ?C0066?CS_SCALE_PROC
00149F         ?C0065?CS_SCALE_PROC:
  495: 							else
  496: 								weight_temp = R_AD_Zero - R_AD_Original;
00149F 904CD8            MOV     DPTR,#R_AD_Original
0014A2 E0                MOVX    A,@DPTR
0014A3 FE                MOV     R6,A
0014A4 A3                INC     DPTR
0014A5 E0                MOVX    A,@DPTR
0014A6 FF                MOV     R7,A
0014A7 C3                CLR     C
0014A8 904C99            MOV     DPTR,#R_AD_Zero+01H
0014AB E0                MOVX    A,@DPTR
0014AC 9F                SUBB    A,R7
0014AD FF                MOV     R7,A
0014AE 904C98            MOV     DPTR,#R_AD_Zero
0014B1 E0                MOVX    A,@DPTR
0014B2 9E                SUBB    A,R6
0014B3 904DEC            MOV     DPTR,#weight_temp
0014B6 F0                MOVX    @DPTR,A
0014B7 A3                INC     DPTR
0014B8 EF                MOV     A,R7
0014B9 F0                MOVX    @DPTR,A
0014BA         ?C0066?CS_SCALE_PROC:
  497: 
  498: 							//跟锁定前的零点做比较不等于一个秤体重量的处理
  499: 							//if(weight_temp<ScaleWeightMin&&weight_temp>ScaleWeightMax)
  500: 								//{
  501: 								R_AD_Zero = R_AD_Original;	//更新零点
0014BA 904CD8            MOV     DPTR,#R_AD_Original
0014BD E0                MOVX    A,@DPTR
0014BE FF                MOV     R7,A
0014BF A3                INC     DPTR
0014C0 E0                MOVX    A,@DPTR
0014C1 904C98            MOV     DPTR,#R_AD_Zero
0014C4 CF                XCH     A,R7
0014C5 F0                MOVX    @DPTR,A
0014C6 A3                INC     DPTR
0014C7 EF                MOV     A,R7
0014C8 F0                MOVX    @DPTR,A
  502: 								if(weight_temp>SameZeroRange)
0014C9 D3                SETB    C
0014CA 904DED            MOV     DPTR,#weight_temp+01H
0014CD E0                MOVX    A,@DPTR
0014CE 940A              SUBB    A,#0AH
0014D0 904DEC            MOV     DPTR,#weight_temp
0014D3 E0                MOVX    A,@DPTR
0014D4 9400              SUBB    A,#00H
0014D6 4011              JC      ?C0067?CS_SCALE_PROC
  503: 									{
  504: 									//跟称重前不是一个零点报零点错并解锁
  505: 									B_WeightZeroErr=true;
0014D8 904C9D            MOV     DPTR,#B_WeightZeroErr
0014DB 7401              MOV     A,#01H
0014DD F0                MOVX    @DPTR,A
  506: 									R_Display_Err=CS_ScaleDisplay_L_err;
0014DE 904CC2            MOV     DPTR,#R_Display_Err
0014E1 7404              MOV     A,#04H
0014E3 F0                MOVX    @DPTR,A
  507: 									CS_Scale_LockProc(LockProcUnLock);
0014E4 7F03              MOV     R7,#03H
0014E6 1234FF            LCALL   _CS_Scale_LockProc
  508: 									}
0014E9         ?C0067?CS_SCALE_PROC:
  509: 								B_LockDownCheck=true;
0014E9 904C9C            MOV     DPTR,#B_LockDownCheck
0014EC 7401              MOV     A,#01H
0014EE F0                MOVX    @DPTR,A
  510: 								//}
  511: 
  512: 							}						
  513: 						}
  514: 					
  515: 					}
  516: 			}
0014EF         ?C0056?CS_SCALE_PROC:
  517: 	return	0;		
0014EF E4                CLR     A
0014F0 FE                MOV     R6,A
0014F1 FF                MOV     R7,A
0014F2 22                RET     
  518: 	}
0014F3         ?C0053?CS_SCALE_PROC:
  519: 
  520: 	if(option==GetPowerOnZero)
0014F3 904DE9            MOV     DPTR,#option
0014F6 E0                MOVX    A,@DPTR
0014F7 FD                MOV     R5,A
0014F8 7009              JNZ     ?C0068?CS_SCALE_PROC
  521: 		return	R_AD_PowerOnZero;
0014FA 904C96            MOV     DPTR,#R_AD_PowerOnZero
0014FD E0                MOVX    A,@DPTR
0014FE FE                MOV     R6,A
0014FF A3                INC     DPTR
001500 E0                MOVX    A,@DPTR
001501 FF                MOV     R7,A
001502 22                RET     
001503         ?C0068?CS_SCALE_PROC:
  522: 	if(option==GetPowerOnZeroState)
001503 ED                MOV     A,R5
001504 B40208            CJNE    A,#02H,?C0069?CS_SCALE_PROC
  523: 		return	B_Weight_ZeroOk;
001507 904C9B            MOV     DPTR,#B_Weight_ZeroOk
00150A E0                MOVX    A,@DPTR
00150B FF                MOV     R7,A
00150C 7E00              MOV     R6,#00H
00150E 22                RET     
00150F         ?C0069?CS_SCALE_PROC:
  524: 	if(option==GetRunningZero)
00150F 904DE9            MOV     DPTR,#option
001512 E0                MOVX    A,@DPTR
001513 FD                MOV     R5,A
001514 B40109            CJNE    A,#01H,?C0070?CS_SCALE_PROC
  525: 		return	R_AD_Zero;
001517 904C98            MOV     DPTR,#R_AD_Zero
00151A E0                MOVX    A,@DPTR
00151B FE                MOV     R6,A
00151C A3                INC     DPTR
00151D E0                MOVX    A,@DPTR
00151E FF                MOV     R7,A
00151F 22                RET     
001520         ?C0070?CS_SCALE_PROC:
  526: 	if(option==GetZeroState)
001520 ED                MOV     A,R5
001521 B40308            CJNE    A,#03H,?C0071?CS_SCALE_PROC
  527: 		return	B_Weight_Zero;
001524 904C9A            MOV     DPTR,#B_Weight_Zero
001527 E0                MOVX    A,@DPTR
001528 FF                MOV     R7,A
001529 7E00              MOV     R6,#00H
00152B 22                RET     
00152C         ?C0071?CS_SCALE_PROC:
  528: 	if(option==GetIfZeroErr)
00152C 904DE9            MOV     DPTR,#option
00152F E0                MOVX    A,@DPTR
001530 B40908            CJNE    A,#09H,?C0072?CS_SCALE_PROC
  529: 		return   B_WeightZeroErr;
001533 904C9D            MOV     DPTR,#B_WeightZeroErr
001536 E0                MOVX    A,@DPTR
001537 FF                MOV     R7,A
001538 7E00              MOV     R6,#00H
00153A 22                RET     
00153B         ?C0072?CS_SCALE_PROC:
  530: 	
  531: 	return 0;	
00153B E4                CLR     A
00153C FE                MOV     R6,A
00153D FF                MOV     R7,A
  532: }
00153E 22                RET     
----- FUNCTION _CS_Scale_ZeroProc (END) -------


----- FUNCTION CS_ScaleDisplay (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
   13: void CS_ScaleDisplay()
   14: {
   15: 	u32_t weight_temp;
   16: 	
   17: 	if(R_Display_Err==CS_ScaleDisplay_L_err)	//提示信息显示
00153F 904CC2            MOV     DPTR,#R_Display_Err
001542 E0                MOVX    A,@DPTR
001543 6404              XRL     A,#04H
001545 7032              JNZ     ?C0001?CS_SCALEDISPLAY
   18: 		{
   19: 		if(CS_Scale_JudgeOverLoad(GetIfOverLoad)== true)	
001547 7F01              MOV     R7,#01H
001549 12356D            LCALL   _CS_Scale_JudgeOverLoad
00154C BF0107            CJNE    R7,#01H,?C0002?CS_SCALEDISPLAY
   20: 			CS_ScaleDisplay_FreshBuf(DisplayOverLoad,0);			
00154F E4                CLR     A
001550 FD                MOV     R5,A
001551 FC                MOV     R4,A
001552 7F85              MOV     R7,#085H
001554 B1FE              ACALL   _CS_ScaleDisplay_FreshBuf
001556         ?C0002?CS_SCALEDISPLAY:
   21: 		if(CS_Scale_JudgeLowBat(GetIfLowBat)== true)
001556 7F01              MOV     R7,#01H
001558 F1D4              ACALL   _CS_Scale_JudgeLowBat
00155A BF0107            CJNE    R7,#01H,?C0003?CS_SCALEDISPLAY
   22: 			CS_ScaleDisplay_FreshBuf(DisplayLowBat,0);	
00155D E4                CLR     A
00155E FD                MOV     R5,A
00155F FC                MOV     R4,A
001560 7F86              MOV     R7,#086H
001562 B1FE              ACALL   _CS_ScaleDisplay_FreshBuf
001564         ?C0003?CS_SCALEDISPLAY:
   23: 		if(CS_Scale_ZeroProc(GetIfZeroErr,0)==true)
001564 E4                CLR     A
001565 FD                MOV     R5,A
001566 FC                MOV     R4,A
001567 7F09              MOV     R7,#09H
001569 51F7              ACALL   _CS_Scale_ZeroProc
00156B EF                MOV     A,R7
00156C 6401              XRL     A,#01H
00156E 4E                ORL     A,R6
00156F 6002              JZ      $ + 4H
001571 A1FD              AJMP    ?C0005?CS_SCALEDISPLAY
   24: 			CS_ScaleDisplay_FreshBuf(DisplayZeroErr,0);
001573 FD                MOV     R5,A
001574 FC                MOV     R4,A
001575 7F87              MOV     R7,#087H
001577 A1FE              AJMP    _CS_ScaleDisplay_FreshBuf
   25: 		return;
   26: 		}
001579         ?C0001?CS_SCALEDISPLAY:
   27: 	if(R_Selet_Unit == CS_ScaleDisplay_L_kg)
001579 904CC6            MOV     DPTR,#R_Selet_Unit
00157C E0                MOVX    A,@DPTR
00157D 7014              JNZ     ?C0006?CS_SCALEDISPLAY
   28: 		{
   29: 		R_UnitWeight.kg = R_UnitWeight.origin;
00157F 904CC9            MOV     DPTR,#R_UnitWeight
001582 E0                MOVX    A,@DPTR
001583 FE                MOV     R6,A
001584 A3                INC     DPTR
001585 E0                MOVX    A,@DPTR
001586 FF                MOV     R7,A
001587 A3                INC     DPTR
001588 EE                MOV     A,R6
001589 F0                MOVX    @DPTR,A
00158A FC                MOV     R4,A
00158B A3                INC     DPTR
00158C EF                MOV     A,R7
00158D F0                MOVX    @DPTR,A
00158E FD                MOV     R5,A
   30: 		CS_ScaleDisplay_FreshBuf(Displaykg,R_UnitWeight.kg);
00158F 7F41              MOV     R7,#041H
001591 B1FE              ACALL   _CS_ScaleDisplay_FreshBuf
   31: 		}
001593         ?C0006?CS_SCALEDISPLAY:
   32: 	if(R_Selet_Unit == CS_ScaleDisplay_L_gongjin)
001593 904CC6            MOV     DPTR,#R_Selet_Unit
001596 E0                MOVX    A,@DPTR
001597 B40214            CJNE    A,#02H,?C0007?CS_SCALEDISPLAY
   33: 		{
   34: 		R_UnitWeight.kg = R_UnitWeight.origin;
00159A 904CC9            MOV     DPTR,#R_UnitWeight
00159D E0                MOVX    A,@DPTR
00159E FE                MOV     R6,A
00159F A3                INC     DPTR
0015A0 E0                MOVX    A,@DPTR
0015A1 FF                MOV     R7,A
0015A2 A3                INC     DPTR
0015A3 EE                MOV     A,R6
0015A4 F0                MOVX    @DPTR,A
0015A5 FC                MOV     R4,A
0015A6 A3                INC     DPTR
0015A7 EF                MOV     A,R7
0015A8 F0                MOVX    @DPTR,A
0015A9 FD                MOV     R5,A
   35: 		CS_ScaleDisplay_FreshBuf(Displaygongjin,R_UnitWeight.kg);
0015AA 7F44              MOV     R7,#044H
0015AC B1FE              ACALL   _CS_ScaleDisplay_FreshBuf
   36: 		}
0015AE         ?C0007?CS_SCALEDISPLAY:
   37: 	if(R_Selet_Unit == CS_ScaleDisplay_L_jin)
0015AE 904CC6            MOV     DPTR,#R_Selet_Unit
0015B1 E0                MOVX    A,@DPTR
0015B2 B4031A            CJNE    A,#03H,?C0008?CS_SCALEDISPLAY
   38: 		{
   39: 		R_UnitWeight.jin = R_UnitWeight.origin *2;
0015B5 904CCA            MOV     DPTR,#R_UnitWeight+01H
0015B8 E0                MOVX    A,@DPTR
0015B9 25E0              ADD     A,ACC
0015BB FF                MOV     R7,A
0015BC 904CC9            MOV     DPTR,#R_UnitWeight
0015BF E0                MOVX    A,@DPTR
0015C0 33                RLC     A
0015C1 FE                MOV     R6,A
0015C2 904CD1            MOV     DPTR,#R_UnitWeight+08H
0015C5 F0                MOVX    @DPTR,A
0015C6 FC                MOV     R4,A
0015C7 A3                INC     DPTR
0015C8 EF                MOV     A,R7
0015C9 F0                MOVX    @DPTR,A
0015CA FD                MOV     R5,A
   40: 		CS_ScaleDisplay_FreshBuf(Displayjin,R_UnitWeight.jin);
0015CB 7F43              MOV     R7,#043H
0015CD B1FE              ACALL   _CS_ScaleDisplay_FreshBuf
   41: 		}				
0015CF         ?C0008?CS_SCALEDISPLAY:
   42:        if(R_Selet_Unit == CS_ScaleDisplay_L_lb )
0015CF 904CC6            MOV     DPTR,#R_Selet_Unit
0015D2 E0                MOVX    A,@DPTR
0015D3 B40127            CJNE    A,#01H,?C0005?CS_SCALEDISPLAY
   43:        	{
   44: 		weight_temp   = (u32_t) R_UnitWeight.origin *22046;
0015D6 904CC9            MOV     DPTR,#R_UnitWeight
0015D9 E0                MOVX    A,@DPTR
0015DA FE                MOV     R6,A
0015DB A3                INC     DPTR
0015DC E0                MOVX    A,@DPTR
0015DD FF                MOV     R7,A
0015DE 7C56              MOV     R4,#056H
0015E0 7D1E              MOV     R5,#01EH
0015E2 1203C8            LCALL   ?C?LIMUL
;---- Variable 'weight_temp' assigned to Register 'R4/R5/R6/R7' ----
   45: 		R_UnitWeight.lb = weight_temp / 10000;
0015E5 E4                CLR     A
0015E6 7B10              MOV     R3,#010H
0015E8 7A27              MOV     R2,#027H
0015EA F9                MOV     R1,A
0015EB F8                MOV     R0,A
0015EC 120269            LCALL   ?C?ULDIV
0015EF 904CCD            MOV     DPTR,#R_UnitWeight+04H
0015F2 EE                MOV     A,R6
0015F3 F0                MOVX    @DPTR,A
0015F4 FC                MOV     R4,A
0015F5 A3                INC     DPTR
0015F6 EF                MOV     A,R7
0015F7 F0                MOVX    @DPTR,A
0015F8 FD                MOV     R5,A
   46: 		CS_ScaleDisplay_FreshBuf(Displaylb,R_UnitWeight.lb);
0015F9 7F42              MOV     R7,#042H
0015FB B1FE              ACALL   _CS_ScaleDisplay_FreshBuf
   47:        	}		
   48: }
0015FD         ?C0005?CS_SCALEDISPLAY:
0015FD 22                RET     
----- FUNCTION CS_ScaleDisplay (END) -------


----- FUNCTION _CS_ScaleDisplay_FreshBuf (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
   72: void CS_ScaleDisplay_FreshBuf(u8_t option,u16_t showdata)
   73: {
;---- Variable 'showdata' assigned to Register 'R4/R5' ----
0015FE 904E56            MOV     DPTR,#option
001601 EF                MOV     A,R7
001602 F0                MOVX    @DPTR,A
   74: 	static	u8_t	data_buf[5];
   75: 
   76: 	//////////////////////////////////////////
   77: 	//数字部分赋值
   78: 	if(option==DisplayOverLoad)
001603 BF850F            CJNE    R7,#085H,?C0011?CS_SCALEDISPLAY
   79: 	{
   80: 	data_buf[0]=Lcdnull_Num;
001606 904D18            MOV     DPTR,#data_buf
001609 7415              MOV     A,#015H
00160B F0                MOVX    @DPTR,A
   81: 	data_buf[1]=Lcdup_Num;
00160C A3                INC     DPTR
00160D 04                INC     A
00160E F0                MOVX    @DPTR,A
   82: 	data_buf[2]=Lcdup_Num;
00160F A3                INC     DPTR
001610 F0                MOVX    @DPTR,A
   83: 	data_buf[3]=Lcdup_Num;
001611 A3                INC     DPTR
001612 F0                MOVX    @DPTR,A
   84: 	data_buf[4]=Lcdup_Num;
001613 A3                INC     DPTR
001614 F0                MOVX    @DPTR,A
   85: 	}
001615         ?C0011?CS_SCALEDISPLAY:
   86: 
   87: 	if(option==DisplayLowBat)
001615 904E56            MOV     DPTR,#option
001618 E0                MOVX    A,@DPTR
001619 FF                MOV     R7,A
00161A B48614            CJNE    A,#086H,?C0012?CS_SCALEDISPLAY
   88: 	{
   89: 	data_buf[0]=0;
00161D E4                CLR     A
00161E 904D18            MOV     DPTR,#data_buf
001621 F0                MOVX    @DPTR,A
   90: 	data_buf[1]=Lcdnull_Num;
001622 A3                INC     DPTR
001623 7415              MOV     A,#015H
001625 F0                MOVX    @DPTR,A
   91: 	data_buf[2]=LcdchL_Num;
001626 A3                INC     DPTR
001627 7410              MOV     A,#010H
001629 F0                MOVX    @DPTR,A
   92: 	data_buf[3]=Lcdcho_Num;
00162A A3                INC     DPTR
00162B 04                INC     A
00162C F0                MOVX    @DPTR,A
   93: 	data_buf[4]=Lcdnull_Num;
00162D A3                INC     DPTR
00162E 7415              MOV     A,#015H
001630 F0                MOVX    @DPTR,A
   94: 	}
001631         ?C0012?CS_SCALEDISPLAY:
   95: 
   96: 	if(option==DisplayZeroErr)
001631 EF                MOV     A,R7
001632 B48712            CJNE    A,#087H,?C0013?CS_SCALEDISPLAY
   97: 	{
   98: 	data_buf[0]=Lcdnull_Num;
001635 904D18            MOV     DPTR,#data_buf
001638 7415              MOV     A,#015H
00163A F0                MOVX    @DPTR,A
   99: 	data_buf[1]=Lcdnull_Num;
00163B A3                INC     DPTR
00163C F0                MOVX    @DPTR,A
  100: 	data_buf[2]=LcdchC_Num;
00163D A3                INC     DPTR
00163E 740C              MOV     A,#0CH
001640 F0                MOVX    @DPTR,A
  101: 	data_buf[3]=Lcdnull_Num;
001641 A3                INC     DPTR
001642 7415              MOV     A,#015H
001644 F0                MOVX    @DPTR,A
  102: 	data_buf[4]=Lcdnull_Num;
001645 A3                INC     DPTR
001646 F0                MOVX    @DPTR,A
  103: 	}
001647         ?C0013?CS_SCALEDISPLAY:
  104: 	
  105: 	if(option==DisplayCal1||option==DisplayCal2||option==DisplayCal3||option==DisplayCal4)
001647 EF                MOV     A,R7
001648 6481              XRL     A,#081H
00164A 600F              JZ      ?C0015?CS_SCALEDISPLAY
00164C EF                MOV     A,R7
00164D 6482              XRL     A,#082H
00164F 600A              JZ      ?C0015?CS_SCALEDISPLAY
001651 EF                MOV     A,R7
001652 6483              XRL     A,#083H
001654 6005              JZ      ?C0015?CS_SCALEDISPLAY
001656 EF                MOV     A,R7
001657 6484              XRL     A,#084H
001659 703E              JNZ     ?C0014?CS_SCALEDISPLAY
00165B         ?C0015?CS_SCALEDISPLAY:
  106: 	{
  107: 	data_buf[0]=0;
00165B E4                CLR     A
00165C 904D18            MOV     DPTR,#data_buf
00165F F0                MOVX    @DPTR,A
  108: 	data_buf[1]=LcdchC_Num;
001660 A3                INC     DPTR
001661 740C              MOV     A,#0CH
001663 F0                MOVX    @DPTR,A
  109: 	data_buf[2]=LcdchA_Num;
001664 A3                INC     DPTR
001665 740A              MOV     A,#0AH
001667 F0                MOVX    @DPTR,A
  110: 	data_buf[3]=LcdchL_Num;
001668 A3                INC     DPTR
001669 7410              MOV     A,#010H
00166B F0                MOVX    @DPTR,A
  111: 		if(option==DisplayCal1)
00166C EF                MOV     A,R7
00166D B48104            CJNE    A,#081H,?C0016?CS_SCALEDISPLAY
  112: 			data_buf[4]=1;
001670 A3                INC     DPTR
001671 7401              MOV     A,#01H
001673 F0                MOVX    @DPTR,A
001674         ?C0016?CS_SCALEDISPLAY:
  113: 		if(option==DisplayCal2)
001674 904E56            MOV     DPTR,#option
001677 E0                MOVX    A,@DPTR
001678 B48206            CJNE    A,#082H,?C0017?CS_SCALEDISPLAY
  114: 			data_buf[4]=2;
00167B 904D1C            MOV     DPTR,#data_buf+04H
00167E 7402              MOV     A,#02H
001680 F0                MOVX    @DPTR,A
001681         ?C0017?CS_SCALEDISPLAY:
  115: 		if(option==DisplayCal3)
001681 904E56            MOV     DPTR,#option
001684 E0                MOVX    A,@DPTR
001685 FF                MOV     R7,A
001686 B48306            CJNE    A,#083H,?C0018?CS_SCALEDISPLAY
  116: 			data_buf[4]=3;
001689 904D1C            MOV     DPTR,#data_buf+04H
00168C 7403              MOV     A,#03H
00168E F0                MOVX    @DPTR,A
00168F         ?C0018?CS_SCALEDISPLAY:
  117: 		if(option==DisplayCal4)
00168F EF                MOV     A,R7
001690 B48406            CJNE    A,#084H,?C0014?CS_SCALEDISPLAY
  118: 			data_buf[4]=4;
001693 904D1C            MOV     DPTR,#data_buf+04H
001696 7404              MOV     A,#04H
001698 F0                MOVX    @DPTR,A
  119: 	}
001699         ?C0014?CS_SCALEDISPLAY:
  120: 
  121: 	if(option==DisplayData||option==Displaykg||option==Displaylb||option==Displayjin||option==Displaygongjin)
001699 904E56            MOV     DPTR,#option
00169C E0                MOVX    A,@DPTR
00169D FF                MOV     R7,A
00169E 6421              XRL     A,#021H
0016A0 6014              JZ      ?C0021?CS_SCALEDISPLAY
0016A2 EF                MOV     A,R7
0016A3 6441              XRL     A,#041H
0016A5 600F              JZ      ?C0021?CS_SCALEDISPLAY
0016A7 EF                MOV     A,R7
0016A8 6442              XRL     A,#042H
0016AA 600A              JZ      ?C0021?CS_SCALEDISPLAY
0016AC EF                MOV     A,R7
0016AD 6443              XRL     A,#043H
0016AF 6005              JZ      ?C0021?CS_SCALEDISPLAY
0016B1 EF                MOV     A,R7
0016B2 6444              XRL     A,#044H
0016B4 705F              JNZ     ?C0020?CS_SCALEDISPLAY
0016B6         ?C0021?CS_SCALEDISPLAY:
  122: 	{
  123: 	CS_ScaleDisplay_HexToBcd(showdata,data_buf);
0016B6 AE04              MOV     R6,AR4
0016B8 AF05              MOV     R7,AR5
0016BA 7B01              MOV     R3,#01H
0016BC 7A4D              MOV     R2,#HIGH data_buf
0016BE 7918              MOV     R1,#LOW data_buf
0016C0 123EFF            LCALL   _CS_ScaleDisplay_HexToBcd
  124: 	
  125: 	if(option&showhigh4)		//显示高4位
0016C3 904E56            MOV     DPTR,#option
0016C6 E0                MOVX    A,@DPTR
0016C7 FF                MOV     R7,A
0016C8 30E61D            JNB     ACC.6,?C0022?CS_SCALEDISPLAY
  126: 		{
  127: 		data_buf[4]=data_buf[3];
0016CB 904D1B            MOV     DPTR,#data_buf+03H
0016CE E0                MOVX    A,@DPTR
0016CF A3                INC     DPTR
0016D0 F0                MOVX    @DPTR,A
  128: 		data_buf[3]=data_buf[2];
0016D1 904D1A            MOV     DPTR,#data_buf+02H
0016D4 E0                MOVX    A,@DPTR
0016D5 A3                INC     DPTR
0016D6 F0                MOVX    @DPTR,A
  129: 		data_buf[2]=data_buf[1];
0016D7 904D19            MOV     DPTR,#data_buf+01H
0016DA E0                MOVX    A,@DPTR
0016DB A3                INC     DPTR
0016DC F0                MOVX    @DPTR,A
  130: 		data_buf[1]=data_buf[0];
0016DD 904D18            MOV     DPTR,#data_buf
0016E0 E0                MOVX    A,@DPTR
0016E1 A3                INC     DPTR
0016E2 F0                MOVX    @DPTR,A
  131: 		data_buf[0]=0;
0016E3 E4                CLR     A
0016E4 904D18            MOV     DPTR,#data_buf
0016E7 F0                MOVX    @DPTR,A
  132: 		}
0016E8         ?C0022?CS_SCALEDISPLAY:
  133: 
  134: 		if(data_buf[0]==0 && data_buf[1]==0 )	
0016E8 904D18            MOV     DPTR,#data_buf
0016EB E0                MOVX    A,@DPTR
0016EC 7007              JNZ     ?C0023?CS_SCALEDISPLAY
0016EE A3                INC     DPTR
0016EF E0                MOVX    A,@DPTR
0016F0 7003              JNZ     ?C0023?CS_SCALEDISPLAY
  135: 			data_buf[1]=Lcdnull_Num;
0016F2 7415              MOV     A,#015H
0016F4 F0                MOVX    @DPTR,A
0016F5         ?C0023?CS_SCALEDISPLAY:
  136: 		if(data_buf[1]==Lcdnull_Num && data_buf[2]==0 )	
0016F5 904D19            MOV     DPTR,#data_buf+01H
0016F8 E0                MOVX    A,@DPTR
0016F9 B41507            CJNE    A,#015H,?C0024?CS_SCALEDISPLAY
0016FC A3                INC     DPTR
0016FD E0                MOVX    A,@DPTR
0016FE 7003              JNZ     ?C0024?CS_SCALEDISPLAY
  137: 			data_buf[2]=Lcdnull_Num;
001700 7415              MOV     A,#015H
001702 F0                MOVX    @DPTR,A
001703         ?C0024?CS_SCALEDISPLAY:
  138: 
  139: 		if(option&ShowNoDot)	//没有小数点还要判断多一位数字为0时是否不显示
001703 EF                MOV     A,R7
001704 30E50E            JNB     ACC.5,?C0020?CS_SCALEDISPLAY
  140: 			{
  141: 			if(data_buf[2]==Lcdnull_Num && data_buf[3]==0 )	
001707 904D1A            MOV     DPTR,#data_buf+02H
00170A E0                MOVX    A,@DPTR
00170B B41507            CJNE    A,#015H,?C0020?CS_SCALEDISPLAY
00170E A3                INC     DPTR
00170F E0                MOVX    A,@DPTR
001710 7003              JNZ     ?C0020?CS_SCALEDISPLAY
  142: 				data_buf[3]=Lcdnull_Num;
001712 7415              MOV     A,#015H
001714 F0                MOVX    @DPTR,A
  143: 			}
  144: 	}
001715         ?C0020?CS_SCALEDISPLAY:
  145: 	
  146: 	CS_Lcd_Send_Data[0] = CS_ScaleDisplay_LookUpTable(data_buf[1]);
001715 904D19            MOV     DPTR,#data_buf+01H
001718 E0                MOVX    A,@DPTR
001719 FF                MOV     R7,A
00171A F1BA              ACALL   _CS_ScaleDisplay_LookUpTable
00171C 904D23            MOV     DPTR,#CS_Lcd_Send_Data
00171F EF                MOV     A,R7
001720 F0                MOVX    @DPTR,A
  147: 	CS_Lcd_Send_Data[1] = CS_ScaleDisplay_LookUpTable(data_buf[2]);
001721 904D1A            MOV     DPTR,#data_buf+02H
001724 E0                MOVX    A,@DPTR
001725 FF                MOV     R7,A
001726 F1BA              ACALL   _CS_ScaleDisplay_LookUpTable
001728 904D24            MOV     DPTR,#CS_Lcd_Send_Data+01H
00172B EF                MOV     A,R7
00172C F0                MOVX    @DPTR,A
  148: 	CS_Lcd_Send_Data[2] = CS_ScaleDisplay_LookUpTable(data_buf[3]);
00172D 904D1B            MOV     DPTR,#data_buf+03H
001730 E0                MOVX    A,@DPTR
001731 FF                MOV     R7,A
001732 F1BA              ACALL   _CS_ScaleDisplay_LookUpTable
001734 904D25            MOV     DPTR,#CS_Lcd_Send_Data+02H
001737 EF                MOV     A,R7
001738 F0                MOVX    @DPTR,A
  149: 	CS_Lcd_Send_Data[3] = CS_ScaleDisplay_LookUpTable(data_buf[4]);
001739 904D1C            MOV     DPTR,#data_buf+04H
00173C E0                MOVX    A,@DPTR
00173D FF                MOV     R7,A
00173E F1BA              ACALL   _CS_ScaleDisplay_LookUpTable
001740 904D26            MOV     DPTR,#CS_Lcd_Send_Data+03H
001743 EF                MOV     A,R7
001744 F0                MOVX    @DPTR,A
  150: 			
  151: 	CS_ScaleDisplay_LcdBuf_rShift4();	//显示缓存跟实际液晶的逻辑对应有出入还要微调
001745 123EC3            LCALL   CS_ScaleDisplay_LcdBuf_rShift4
  152: 										//显示缓存数字还有符号部分的位置
  153: 
  154: 	//////////////////////////////////////////
  155: 	//符号部分赋值
  156: 	CS_Lcd_Send_Data[4]&=0x0f;			//最高位用蓝牙标志辅助显示
001748 904D27            MOV     DPTR,#CS_Lcd_Send_Data+04H
00174B E0                MOVX    A,@DPTR
00174C 540F              ANL     A,#0FH
00174E F0                MOVX    @DPTR,A
  157: 	if(option==DisplayData)
00174F 904E56            MOV     DPTR,#option
001752 E0                MOVX    A,@DPTR
001753 FD                MOV     R5,A
001754 B4210D            CJNE    A,#021H,?C0027?CS_SCALEDISPLAY
  158: 		{		
  159: 		if(data_buf[0]!=0)
001757 904D18            MOV     DPTR,#data_buf
00175A E0                MOVX    A,@DPTR
00175B 6007              JZ      ?C0027?CS_SCALEDISPLAY
  160: 		CS_Lcd_Buf_SIGN |=S_BLE;
00175D 904D23            MOV     DPTR,#CS_Lcd_Send_Data
001760 E0                MOVX    A,@DPTR
001761 4402              ORL     A,#02H
001763 F0                MOVX    @DPTR,A
  161: 		}	
001764         ?C0027?CS_SCALEDISPLAY:
  162: 	
  163: 	if(option==Displaykg)
001764 ED                MOV     A,R5
001765 B4410C            CJNE    A,#041H,?C0029?CS_SCALEDISPLAY
  164: 		{
  165: 		CS_Lcd_Buf_DOT2	|= S_DOT;
001768 904D26            MOV     DPTR,#CS_Lcd_Send_Data+03H
00176B E0                MOVX    A,@DPTR
00176C 4408              ORL     A,#08H
00176E F0                MOVX    @DPTR,A
  166: 		CS_Lcd_Buf_Unit	|= S_KG;							
00176F A3                INC     DPTR
001770 E0                MOVX    A,@DPTR
001771 4410              ORL     A,#010H
001773 F0                MOVX    @DPTR,A
  167: 		}	
001774         ?C0029?CS_SCALEDISPLAY:
  168: 
  169: 	if(option==Displaylb)
001774 904E56            MOV     DPTR,#option
001777 E0                MOVX    A,@DPTR
001778 B4420C            CJNE    A,#042H,?C0030?CS_SCALEDISPLAY
  170: 		{
  171: 		CS_Lcd_Buf_DOT2	|= S_DOT;
00177B 904D26            MOV     DPTR,#CS_Lcd_Send_Data+03H
00177E E0                MOVX    A,@DPTR
00177F 4408              ORL     A,#08H
001781 F0                MOVX    @DPTR,A
  172: 		CS_Lcd_Buf_Unit	|= S_LB;							
001782 A3                INC     DPTR
001783 E0                MOVX    A,@DPTR
001784 4420              ORL     A,#020H
001786 F0                MOVX    @DPTR,A
  173: 		}
001787         ?C0030?CS_SCALEDISPLAY:
  174: 	if(option==Displayjin)
001787 904E56            MOV     DPTR,#option
00178A E0                MOVX    A,@DPTR
00178B FD                MOV     R5,A
00178C B4430C            CJNE    A,#043H,?C0031?CS_SCALEDISPLAY
  175: 		{
  176: 		CS_Lcd_Buf_DOT2	|= S_DOT;
00178F 904D26            MOV     DPTR,#CS_Lcd_Send_Data+03H
001792 E0                MOVX    A,@DPTR
001793 4408              ORL     A,#08H
001795 F0                MOVX    @DPTR,A
  177: 		CS_Lcd_Buf_Unit	|= S_JIN;							
001796 A3                INC     DPTR
001797 E0                MOVX    A,@DPTR
001798 4480              ORL     A,#080H
00179A F0                MOVX    @DPTR,A
  178: 		}
00179B         ?C0031?CS_SCALEDISPLAY:
  179: 	
  180: 	if(option==Displaygongjin)
00179B ED                MOV     A,R5
00179C B4440C            CJNE    A,#044H,?C0032?CS_SCALEDISPLAY
  181: 		{
  182: 		CS_Lcd_Buf_DOT2	|= S_DOT;
00179F 904D26            MOV     DPTR,#CS_Lcd_Send_Data+03H
0017A2 E0                MOVX    A,@DPTR
0017A3 4408              ORL     A,#08H
0017A5 F0                MOVX    @DPTR,A
  183: 		CS_Lcd_Buf_Unit	|= S_GONG | S_JIN;							
0017A6 A3                INC     DPTR
0017A7 E0                MOVX    A,@DPTR
0017A8 44C0              ORL     A,#0C0H
0017AA F0                MOVX    @DPTR,A
  184: 		}
0017AB         ?C0032?CS_SCALEDISPLAY:
  185: 
  186: 	if(bleConnStatus==BLE_STATUS_CONN)
0017AB 904C5B            MOV     DPTR,#bleConnStatus
0017AE E0                MOVX    A,@DPTR
0017AF B40107            CJNE    A,#01H,?C0034?CS_SCALEDISPLAY
  187: 		{
  188: 		CS_Lcd_Buf_SIGN |=S_BLE;
0017B2 904D23            MOV     DPTR,#CS_Lcd_Send_Data
0017B5 E0                MOVX    A,@DPTR
0017B6 4402              ORL     A,#02H
0017B8 F0                MOVX    @DPTR,A
  189: 		}
  190: 	
  191: }
0017B9         ?C0034?CS_SCALEDISPLAY:
0017B9 22                RET     
----- FUNCTION _CS_ScaleDisplay_FreshBuf (END) -------


----- FUNCTION _CS_ScaleDisplay_LookUpTable (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  225: u8_t CS_ScaleDisplay_LookUpTable(u8_t NumData)
  226: {
;---- Variable 'NumData' assigned to Register 'R7' ----
  227: 	u8_t	 * data_ptr;
  228: 	data_ptr = CS_Lcd_Table;
0017BA 7B01              MOV     R3,#01H
0017BC 7A4D              MOV     R2,#HIGH CS_Lcd_Table
0017BE 7929              MOV     R1,#LOW CS_Lcd_Table
;---- Variable 'data_ptr' assigned to Register 'R1/R2/R3' ----
  229: 	return 	*(data_ptr + NumData);
0017C0 8F82              MOV     DPL,R7
0017C2 758300            MOV     DPH,#00H
0017C5 120112            LCALL   ?C?CLDOPTR
0017C8 FF                MOV     R7,A
  230: }
0017C9 22                RET     
----- FUNCTION _CS_ScaleDisplay_LookUpTable (END) -------


----- FUNCTION QueueInit (BEGIN) -----
 FILE: 'lxProtocol.c'
  496: void QueueInit(void)
  497: {
  498: 	historyUserData.head = 0;
  499: 	historyUserData.tail = 0;
0017CA E4                CLR     A
0017CB 904C10            MOV     DPTR,#historyUserData
0017CE F0                MOVX    @DPTR,A
  500: 	historyUserData.size = 0;
0017CF A3                INC     DPTR
0017D0 F0                MOVX    @DPTR,A
  501: }
0017D1 A3                INC     DPTR
0017D2 F0                MOVX    @DPTR,A
  502: 
0017D3 22                RET     
----- FUNCTION QueueInit (END) -------


----- FUNCTION _CS_Scale_JudgeLowBat (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  622: u8_t CS_Scale_JudgeLowBat(u8_t option)
  623: {
;---- Variable 'option' assigned to Register 'R7' ----
  624: 	static	u8_t xdata B_Weight_LowBat;			//低电标志
  625: 	
  626: 	if(R_1186sys_state&CS_Scale_LowBatBit==false)
  627: 		{
  628: 		B_Weight_LowBat = true;
  629: 		R_Display_Err=CS_ScaleDisplay_L_err;
  630: 		}
0017D4         ?C0082?CS_SCALE_PROC:
  631: 	else
  632: 		B_Weight_LowBat = false;
0017D4 E4                CLR     A
0017D5 904C9F            MOV     DPTR,#B_Weight_LowBat
0017D8 F0                MOVX    @DPTR,A
0017D9         ?C0083?CS_SCALE_PROC:
  633: 
  634: 	if(option==GetIfLowBat)
0017D9 EF                MOV     A,R7
0017DA B40106            CJNE    A,#01H,?C0084?CS_SCALE_PROC
  635: 		return B_Weight_LowBat;
0017DD 904C9F            MOV     DPTR,#B_Weight_LowBat
0017E0 E0                MOVX    A,@DPTR
0017E1 FF                MOV     R7,A
0017E2 22                RET     
0017E3         ?C0084?CS_SCALE_PROC:
  636: 	
  637: 		return 0;	
0017E3 7F00              MOV     R7,#00H
  638: }
0017E5 22                RET     
----- FUNCTION _CS_Scale_JudgeLowBat (END) -------


----- FUNCTION _CS_Scale_GetDeltaAD (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  216: u16_t CS_Scale_GetDeltaAD(u8_t option)
  217: {
0017E6 904E41            MOV     DPTR,#option
0017E9 EF                MOV     A,R7
0017EA F0                MOVX    @DPTR,A
  218: 	static       u8_t xdata B_Weight_Pos;				//正负AD变化标志
  219: 	u16_t	ad_temp;
  220: 	u16_t      R_AD_Zero;
  221: 	R_AD_Zero = CS_Scale_ZeroProc(GetRunningZero,0);
0017EB E4                CLR     A
0017EC FD                MOV     R5,A
0017ED FC                MOV     R4,A
0017EE 7F01              MOV     R7,#01H
0017F0 51F7              ACALL   _CS_Scale_ZeroProc
;---- Variable 'R_AD_Zero' assigned to Register 'R6/R7' ----
  222: 	if(R_AD_Original>R_AD_Zero)
0017F2 904CD8            MOV     DPTR,#R_AD_Original
0017F5 E0                MOVX    A,@DPTR
0017F6 FC                MOV     R4,A
0017F7 A3                INC     DPTR
0017F8 E0                MOVX    A,@DPTR
0017F9 FD                MOV     R5,A
0017FA D3                SETB    C
0017FB 9F                SUBB    A,R7
0017FC EC                MOV     A,R4
0017FD 9E                SUBB    A,R6
0017FE 4014              JC      ?C0013?CS_SCALE_PROC
  223: 		{
  224: 		ad_temp = R_AD_Original - R_AD_Zero;
001800 ED                MOV     A,R5
001801 9F                SUBB    A,R7
001802 FF                MOV     R7,A
001803 EC                MOV     A,R4
001804 9E                SUBB    A,R6
001805 904E42            MOV     DPTR,#ad_temp
001808 F0                MOVX    @DPTR,A
001809 A3                INC     DPTR
00180A EF                MOV     A,R7
00180B F0                MOVX    @DPTR,A
  225: 		B_Weight_Pos = true;
00180C 904C80            MOV     DPTR,#B_Weight_Pos
00180F 7401              MOV     A,#01H
001811 F0                MOVX    @DPTR,A
  226: 
  227: 		}
001812 801A              SJMP    ?C0014?CS_SCALE_PROC
001814         ?C0013?CS_SCALE_PROC:
  228: 	else
  229: 		{
  230: 		ad_temp = R_AD_Zero - R_AD_Original;
001814 904CD8            MOV     DPTR,#R_AD_Original
001817 E0                MOVX    A,@DPTR
001818 FC                MOV     R4,A
001819 A3                INC     DPTR
00181A E0                MOVX    A,@DPTR
00181B FD                MOV     R5,A
00181C C3                CLR     C
00181D EF                MOV     A,R7
00181E 9D                SUBB    A,R5
00181F FF                MOV     R7,A
001820 EE                MOV     A,R6
001821 9C                SUBB    A,R4
001822 904E42            MOV     DPTR,#ad_temp
001825 F0                MOVX    @DPTR,A
001826 A3                INC     DPTR
001827 EF                MOV     A,R7
001828 F0                MOVX    @DPTR,A
  231: 		B_Weight_Pos = false;		
001829 E4                CLR     A
00182A 904C80            MOV     DPTR,#B_Weight_Pos
00182D F0                MOVX    @DPTR,A
  232: 		}
00182E         ?C0014?CS_SCALE_PROC:
  233: 
  234: 	
  235: 	if(option == GetADDirection)
00182E 904E41            MOV     DPTR,#option
001831 E0                MOVX    A,@DPTR
001832 B40108            CJNE    A,#01H,?C0015?CS_SCALE_PROC
  236: 		{
  237: 		return	B_Weight_Pos;
001835 904C80            MOV     DPTR,#B_Weight_Pos
001838 E0                MOVX    A,@DPTR
001839 FF                MOV     R7,A
00183A 7E00              MOV     R6,#00H
00183C 22                RET     
  238: 		}	
00183D         ?C0015?CS_SCALE_PROC:
  239: 	return ad_temp;
00183D 904E42            MOV     DPTR,#ad_temp
001840 E0                MOVX    A,@DPTR
001841 FE                MOV     R6,A
001842 A3                INC     DPTR
001843 E0                MOVX    A,@DPTR
001844 FF                MOV     R7,A
  240: }
001845 22                RET     
----- FUNCTION _CS_Scale_GetDeltaAD (END) -------


----- FUNCTION _generateChecksum (BEGIN) -----
 FILE: 'system.c'
  114: u8_t generateChecksum(u8_t *buf,u8_t len)
  115: {
001846 904E3B            MOV     DPTR,#buf
001849 EB                MOV     A,R3
00184A F0                MOVX    @DPTR,A
00184B A3                INC     DPTR
00184C EA                MOV     A,R2
00184D F0                MOVX    @DPTR,A
00184E A3                INC     DPTR
00184F E9                MOV     A,R1
001850 F0                MOVX    @DPTR,A
;---- Variable 'len' assigned to Register 'R5' ----
  116: 	u8_t result;
  117: 	result = 0;
;---- Variable 'result' assigned to Register 'R7' ----
001851 E4                CLR     A
001852 FF                MOV     R7,A
001853         ?C0012?SYSTEM:
  118: 	while(len--) {
001853 AE05              MOV     R6,AR5
001855 1D                DEC     R5
001856 EE                MOV     A,R6
001857 6017              JZ      ?C0013?SYSTEM
  119: 		result^=*buf++;
001859 904E3B            MOV     DPTR,#buf
00185C E0                MOVX    A,@DPTR
00185D FB                MOV     R3,A
00185E A3                INC     DPTR
00185F E4                CLR     A
001860 75F001            MOV     B,#01H
001863 1201C8            LCALL   ?C?ILDIX
001866 A9F0              MOV     R1,B
001868 FA                MOV     R2,A
001869 1200F9            LCALL   ?C?CLDPTR
00186C 6F                XRL     A,R7
00186D FF                MOV     R7,A
  120: 	}
00186E 80E3              SJMP    ?C0012?SYSTEM
001870         ?C0013?SYSTEM:
  121: 	return result;
  122: }
001870 22                RET     
----- FUNCTION _generateChecksum (END) -------


----- FUNCTION CS_1186Com_ReadMacAdress_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
   73: void CS_1186Com_ReadMacAdress_Proc(void)
   74: {
   75: 	u8_t i;
   76: 	u8_t xdata * ptr;
   77: 
   78: 	i=0;
001871 E4                CLR     A
001872 904E44            MOV     DPTR,#i
001875 F0                MOVX    @DPTR,A
   79: 	ptr =&i;
001876 A3                INC     DPTR
001877 744E              MOV     A,#HIGH i
001879 F0                MOVX    @DPTR,A
00187A A3                INC     DPTR
00187B 7444              MOV     A,#LOW i
00187D F0                MOVX    @DPTR,A
   80: 	
   81: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadOtp)
00187E 904D50            MOV     DPTR,#R_Weight_Com_Coo
001881 E0                MOVX    A,@DPTR
001882 B4842C            CJNE    A,#084H,?C0011?CS_COMMTO1186
   82: 		{
   83: 		uartTxBuf[0]=6;		//read 6 byte MacAdress
001885 904D54            MOV     DPTR,#uartTxBuf
001888 7406              MOV     A,#06H
00188A F0                MOVX    @DPTR,A
   84: 		uartTxBuf[1]=0xF7;	//OTP  adress low 8bits
00188B A3                INC     DPTR
00188C 74F7              MOV     A,#0F7H
00188E F0                MOVX    @DPTR,A
   85: 		uartTxBuf[2]=0x0F;	//OTP  adress high 8bits
00188F A3                INC     DPTR
001890 740F              MOV     A,#0FH
001892 F0                MOVX    @DPTR,A
   86: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadOtp,uartTxBuf);
001893 7B01              MOV     R3,#01H
001895 7A4D              MOV     R2,#HIGH uartTxBuf
001897 7954              MOV     R1,#LOW uartTxBuf
001899 7F84              MOV     R7,#084H
00189B 3123              ACALL   _CS_CommTo1186_SendCmd
   87: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadOtp;
00189D 904D51            MOV     DPTR,#R_Weight_Com_Coo+01H
0018A0 7484              MOV     A,#084H
0018A2 F0                MOVX    @DPTR,A
   88: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadOtpStandby;
0018A3 904D50            MOV     DPTR,#R_Weight_Com_Coo
0018A6 7405              MOV     A,#05H
0018A8 F0                MOVX    @DPTR,A
   89: 		uartTimeoutCnt=0;
0018A9 E4                CLR     A
0018AA 904D64            MOV     DPTR,#uartTimeoutCnt
0018AD F0                MOVX    @DPTR,A
   90: 		YC_UARTClearBuffer();
0018AE 12058E            LCALL   YC_UARTClearBuffer
   91: 		}
0018B1         ?C0011?CS_COMMTO1186:
   92: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadOtpStandby)
0018B1 904D50            MOV     DPTR,#R_Weight_Com_Coo
0018B4 E0                MOVX    A,@DPTR
0018B5 6405              XRL     A,#05H
0018B7 7069              JNZ     ?C0016?CS_COMMTO1186
   93: 		{
   94: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 11) == 11)
0018B9 7B01              MOV     R3,#01H
0018BB 7A4D              MOV     R2,#HIGH uartRcvBuf
0018BD 7940              MOV     R1,#LOW uartRcvBuf
0018BF 7D0B              MOV     R5,#0BH
0018C1 FC                MOV     R4,A
0018C2 1207A4            LCALL   _YC_UARTReciveDataExpected
0018C5 EF                MOV     A,R7
0018C6 640B              XRL     A,#0BH
0018C8 4E                ORL     A,R6
0018C9 7057              JNZ     ?C0016?CS_COMMTO1186
   95: 			{
   96: 			if(generateChecksum(uartRcvBuf,10) == uartRcvBuf[10] &&
0018CB 7B01              MOV     R3,#01H
0018CD 7A4D              MOV     R2,#HIGH uartRcvBuf
0018CF 7940              MOV     R1,#LOW uartRcvBuf
0018D1 7D0A              MOV     R5,#0AH
0018D3 1146              ACALL   _generateChecksum
0018D5 904D4A            MOV     DPTR,#uartRcvBuf+0AH
0018D8 E0                MOVX    A,@DPTR
0018D9 6F                XRL     A,R7
0018DA 7040              JNZ     ?C0014?CS_COMMTO1186
0018DC 904D42            MOV     DPTR,#uartRcvBuf+02H
0018DF E0                MOVX    A,@DPTR
0018E0 6410              XRL     A,#010H
0018E2 7038              JNZ     ?C0014?CS_COMMTO1186
0018E4 A3                INC     DPTR
0018E5 E0                MOVX    A,@DPTR
0018E6 B48433            CJNE    A,#084H,?C0014?CS_COMMTO1186
   97: 			uartRcvBuf[2] == UART_EVENT_OK &&
   98: 			uartRcvBuf[3] == CS_CommTo1186_ReadOtp)
   99: 				{	
  100: 				//slave_state = SLAVE_ST_SET_PARAM;
  101: 				//R_Debug_temp= uartRcvBuf[5];	//测试用
  102: 
  103: 				//数据放错地址，部分数据手动赋值
  104: 				uartRcvBuf[9]= uartRcvBuf[6];
0018E9 904D46            MOV     DPTR,#uartRcvBuf+06H
0018EC E0                MOVX    A,@DPTR
0018ED 904D49            MOV     DPTR,#uartRcvBuf+09H
0018F0 F0                MOVX    @DPTR,A
  105: 				uartRcvBuf[8]=0x55;
0018F1 904D48            MOV     DPTR,#uartRcvBuf+08H
0018F4 7455              MOV     A,#055H
0018F6 F0                MOVX    @DPTR,A
  106: 				uartRcvBuf[7]=uartRcvBuf[5];
0018F7 904D45            MOV     DPTR,#uartRcvBuf+05H
0018FA E0                MOVX    A,@DPTR
0018FB 904D47            MOV     DPTR,#uartRcvBuf+07H
0018FE F0                MOVX    @DPTR,A
  107: 				uartRcvBuf[6]=0xbe;
0018FF 904D46            MOV     DPTR,#uartRcvBuf+06H
001902 74BE              MOV     A,#0BEH
001904 F0                MOVX    @DPTR,A
  108: 				uartRcvBuf[5]=uartRcvBuf[4];
001905 904D44            MOV     DPTR,#uartRcvBuf+04H
001908 E0                MOVX    A,@DPTR
001909 A3                INC     DPTR
00190A F0                MOVX    @DPTR,A
  109: 				uartRcvBuf[4]=0x08;
00190B 904D44            MOV     DPTR,#uartRcvBuf+04H
00190E 7408              MOV     A,#08H
001910 F0                MOVX    @DPTR,A
  110: 
  111: 				/*
  112: 				xmemcpy(mem_le_lap,&uartRcvBuf[4],6);
  113: 				if((*mem_adv_lap_ptr) != 0) 
  114: 					{
  115: 					for(i=0;i<6;i++) 
  116: 						{
  117: 						ptr = (u8_t xdata *)(ESWAP(*mem_adv_lap_ptr)+i);
  118: 						*ptr= uartRcvBuf[9-i];
  119: 						}
  120: 					}
  121: 				*/
  122: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
001911 E4                CLR     A
001912 904D50            MOV     DPTR,#R_Weight_Com_Coo
001915 F0                MOVX    @DPTR,A
  123: 				R_Weight_Com_Coo.sucess=true;
001916 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
001919 04                INC     A
00191A F0                MOVX    @DPTR,A
  124: 				}
00191B 22                RET     
00191C         ?C0014?CS_COMMTO1186:
  125: 			else
  126: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
00191C 904D64            MOV     DPTR,#uartTimeoutCnt
00191F 7415              MOV     A,#015H
001921 F0                MOVX    @DPTR,A
  127: 			}
  128: 		}
  129: }
001922         ?C0016?CS_COMMTO1186:
001922 22                RET     
----- FUNCTION CS_1186Com_ReadMacAdress_Proc (END) -------


----- FUNCTION _CS_CommTo1186_SendCmd (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  402: void CS_CommTo1186_SendCmd(u8_t cmd_code ,u8_t * databuf)
  403: {
001923 904D7E            MOV     DPTR,#cmd_code
001926 EF                MOV     A,R7
001927 F0                MOVX    @DPTR,A
001928 A3                INC     DPTR
001929 EB                MOV     A,R3
00192A F0                MOVX    @DPTR,A
00192B A3                INC     DPTR
00192C EA                MOV     A,R2
00192D F0                MOVX    @DPTR,A
00192E A3                INC     DPTR
00192F E9                MOV     A,R1
001930 F0                MOVX    @DPTR,A
  404: 	u8_t buf[10] = {0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,0x00,0x00};
  405:        u8_t len;
001931 7882              MOV     R0,#LOW buf
001933 7C4D              MOV     R4,#HIGH buf
001935 7D01              MOV     R5,#01H
001937 7BFF              MOV     R3,#0FFH
001939 7A04              MOV     R2,#HIGH _?ix1000
00193B 79B8              MOV     R1,#LOW _?ix1000
00193D 7E00              MOV     R6,#00H
00193F 7F0A              MOV     R7,#0AH
001941 1200D3            LCALL   ?C?COPY
  406: 
  407: 	 buf[0] = 0xc5;							//包头数据
001944 904D82            MOV     DPTR,#buf
001947 74C5              MOV     A,#0C5H
001949 F0                MOVX    @DPTR,A
  408: 	switch(cmd_code)
00194A 904D7E            MOV     DPTR,#cmd_code
00194D E0                MOVX    A,@DPTR
00194E 12036F            LCALL   ?C?CCASE
001951 198A              DW      ?C0065?CS_COMMTO1186
001953 80                DB      080H
001954 19A0              DW      ?C0066?CS_COMMTO1186
001956 81                DB      081H
001957 19B6              DW      ?C0067?CS_COMMTO1186
001959 82                DB      082H
00195A 19CC              DW      ?C0068?CS_COMMTO1186
00195C 83                DB      083H
00195D 1A09              DW      ?C0069?CS_COMMTO1186
00195F 84                DB      084H
001960 1A50              DW      ?C0070?CS_COMMTO1186
001962 85                DB      085H
001963 1A66              DW      ?C0071?CS_COMMTO1186
001965 A0                DB      0A0H
001966 1AB7              DW      ?C0072?CS_COMMTO1186
001968 A1                DB      0A1H
001969 1B12              DW      ?C0073?CS_COMMTO1186
00196B A2                DB      0A2H
00196C 1B63              DW      ?C0074?CS_COMMTO1186
00196E A3                DB      0A3H
00196F 1979              DW      ?C0064?CS_COMMTO1186
001971 C5                DB      0C5H
001972 1BAA              DW      ?C0075?CS_COMMTO1186
001974 E0                DB      0E0H
001975 0000              DW      00H
001977 1C0D              DW      ?C0076?CS_COMMTO1186
  409: 		{
  410: 		case CS_CommTo1186_Reset:			//0
001979         ?C0064?CS_COMMTO1186:
  411: 			buf[0] = 0x00;
001979 E4                CLR     A
00197A 904D82            MOV     DPTR,#buf
00197D F0                MOVX    @DPTR,A
  412: 			buf[1] = 0x00;
00197E A3                INC     DPTR
00197F F0                MOVX    @DPTR,A
  413: 			buf[2] = 0x00;
001980 A3                INC     DPTR
001981 F0                MOVX    @DPTR,A
  414: 			len  =  3;
001982 904D8C            MOV     DPTR,#len
001985 7403              MOV     A,#03H
001987 F0                MOVX    @DPTR,A
  415: 			break;
001988 8118              AJMP    ?C0063?CS_COMMTO1186
  416: 		case CS_CommTo1186_ReadAd:		 	// 1 
00198A         ?C0065?CS_COMMTO1186:
  417: 			buf[1] = 0x01;
00198A 904D83            MOV     DPTR,#buf+01H
00198D 7401              MOV     A,#01H
00198F F0                MOVX    @DPTR,A
  418: 			buf[2] = 0x80;
001990 A3                INC     DPTR
001991 7480              MOV     A,#080H
001993 F0                MOVX    @DPTR,A
  419: 			buf[3] = 0x44;
001994 A3                INC     DPTR
001995 7444              MOV     A,#044H
001997 F0                MOVX    @DPTR,A
  420: 			len  =  4;
001998 904D8C            MOV     DPTR,#len
00199B 7404              MOV     A,#04H
00199D F0                MOVX    @DPTR,A
  421: 			break;			
00199E 8118              AJMP    ?C0063?CS_COMMTO1186
  422: 		case CS_CommTo1186_ReadVersion:		 // 2 
0019A0         ?C0066?CS_COMMTO1186:
  423: 			buf[1] = 0x01;
0019A0 904D83            MOV     DPTR,#buf+01H
0019A3 7401              MOV     A,#01H
0019A5 F0                MOVX    @DPTR,A
  424: 			buf[2] = 0x81;
0019A6 A3                INC     DPTR
0019A7 7481              MOV     A,#081H
0019A9 F0                MOVX    @DPTR,A
  425: 			buf[3] = 0x45;
0019AA A3                INC     DPTR
0019AB 7445              MOV     A,#045H
0019AD F0                MOVX    @DPTR,A
  426: 			len  =  4;
0019AE 904D8C            MOV     DPTR,#len
0019B1 7404              MOV     A,#04H
0019B3 F0                MOVX    @DPTR,A
  427: 			break;
0019B4 8118              AJMP    ?C0063?CS_COMMTO1186
  428: 		case CS_CommTo1186_ReadTime:		 // 3 
0019B6         ?C0067?CS_COMMTO1186:
  429: 			buf[1] = 0x01;
0019B6 904D83            MOV     DPTR,#buf+01H
0019B9 7401              MOV     A,#01H
0019BB F0                MOVX    @DPTR,A
  430: 			buf[2] = 0x82;
0019BC A3                INC     DPTR
0019BD 7482              MOV     A,#082H
0019BF F0                MOVX    @DPTR,A
  431: 			buf[3] = 0x46;
0019C0 A3                INC     DPTR
0019C1 7446              MOV     A,#046H
0019C3 F0                MOVX    @DPTR,A
  432: 			len  =  4;
0019C4 904D8C            MOV     DPTR,#len
0019C7 7404              MOV     A,#04H
0019C9 F0                MOVX    @DPTR,A
  433: 			break;
0019CA 8118              AJMP    ?C0063?CS_COMMTO1186
  434: 		case CS_CommTo1186_ReadRam:		 // 4 
0019CC         ?C0068?CS_COMMTO1186:
  435: 			buf[1] = 0x03;
0019CC 904D83            MOV     DPTR,#buf+01H
0019CF 7403              MOV     A,#03H
0019D1 F0                MOVX    @DPTR,A
  436: 			buf[2] = 0x83;
0019D2 A3                INC     DPTR
0019D3 7483              MOV     A,#083H
0019D5 F0                MOVX    @DPTR,A
  437: 			buf[3] = databuf[1];
0019D6 904D7F            MOV     DPTR,#databuf
0019D9 E0                MOVX    A,@DPTR
0019DA FB                MOV     R3,A
0019DB A3                INC     DPTR
0019DC E0                MOVX    A,@DPTR
0019DD FA                MOV     R2,A
0019DE A3                INC     DPTR
0019DF E0                MOVX    A,@DPTR
0019E0 F9                MOV     R1,A
0019E1 900001            MOV     DPTR,#01H
0019E4 120112            LCALL   ?C?CLDOPTR
0019E7 904D85            MOV     DPTR,#buf+03H
0019EA F0                MOVX    @DPTR,A
  438: 			buf[4] = databuf[0];	 
0019EB 1200F9            LCALL   ?C?CLDPTR
0019EE 904D86            MOV     DPTR,#buf+04H
0019F1 F0                MOVX    @DPTR,A
  439: 			buf[5] =  CS_CommTo1186_Xor(buf,5);
0019F2 7B01              MOV     R3,#01H
0019F4 7A4D              MOV     R2,#HIGH buf
0019F6 7982              MOV     R1,#LOW buf
0019F8 7D05              MOV     R5,#05H
0019FA B123              ACALL   _CS_CommTo1186_Xor
0019FC 904D87            MOV     DPTR,#buf+05H
0019FF EF                MOV     A,R7
001A00 F0                MOVX    @DPTR,A
  440: 			len  =  6;
001A01 904D8C            MOV     DPTR,#len
001A04 7406              MOV     A,#06H
001A06 F0                MOVX    @DPTR,A
  441: 			break;
001A07 8118              AJMP    ?C0063?CS_COMMTO1186
  442: 		case CS_CommTo1186_ReadOtp:		 // 5 
001A09         ?C0069?CS_COMMTO1186:
  443: 			buf[1] = 0x04;
001A09 904D83            MOV     DPTR,#buf+01H
001A0C 7404              MOV     A,#04H
001A0E F0                MOVX    @DPTR,A
  444: 			buf[2] = 0x84;
001A0F A3                INC     DPTR
001A10 7484              MOV     A,#084H
001A12 F0                MOVX    @DPTR,A
  445: 			buf[3] = databuf[2];
001A13 904D7F            MOV     DPTR,#databuf
001A16 E0                MOVX    A,@DPTR
001A17 FB                MOV     R3,A
001A18 A3                INC     DPTR
001A19 E0                MOVX    A,@DPTR
001A1A FA                MOV     R2,A
001A1B A3                INC     DPTR
001A1C E0                MOVX    A,@DPTR
001A1D F9                MOV     R1,A
001A1E 900002            MOV     DPTR,#02H
001A21 120112            LCALL   ?C?CLDOPTR
001A24 904D85            MOV     DPTR,#buf+03H
001A27 F0                MOVX    @DPTR,A
  446: 			buf[4] = databuf[1];	
001A28 900001            MOV     DPTR,#01H
001A2B 120112            LCALL   ?C?CLDOPTR
001A2E 904D86            MOV     DPTR,#buf+04H
001A31 F0                MOVX    @DPTR,A
  447: 			buf[5] = databuf[0]; 
001A32 1200F9            LCALL   ?C?CLDPTR
001A35 904D87            MOV     DPTR,#buf+05H
001A38 F0                MOVX    @DPTR,A
  448: 			buf[6] = CS_CommTo1186_Xor(buf,6);
001A39 7B01              MOV     R3,#01H
001A3B 7A4D              MOV     R2,#HIGH buf
001A3D 7982              MOV     R1,#LOW buf
001A3F 7D06              MOV     R5,#06H
001A41 B123              ACALL   _CS_CommTo1186_Xor
001A43 904D88            MOV     DPTR,#buf+06H
001A46 EF                MOV     A,R7
001A47 F0                MOVX    @DPTR,A
  449: 			len  =  7;
001A48 904D8C            MOV     DPTR,#len
001A4B 7407              MOV     A,#07H
001A4D F0                MOVX    @DPTR,A
  450: 			break;
001A4E 8118              AJMP    ?C0063?CS_COMMTO1186
  451: 		case CS_CommTo1186_ReadAdZero:		 // 6 
001A50         ?C0070?CS_COMMTO1186:
  452: 			buf[1] = 0x01;
001A50 904D83            MOV     DPTR,#buf+01H
001A53 7401              MOV     A,#01H
001A55 F0                MOVX    @DPTR,A
  453: 			buf[2] = 0x85;
001A56 A3                INC     DPTR
001A57 7485              MOV     A,#085H
001A59 F0                MOVX    @DPTR,A
  454: 			buf[3] = 0x41;
001A5A A3                INC     DPTR
001A5B 7441              MOV     A,#041H
001A5D F0                MOVX    @DPTR,A
  455: 			len  =  4;
001A5E 904D8C            MOV     DPTR,#len
001A61 7404              MOV     A,#04H
001A63 F0                MOVX    @DPTR,A
  456: 			break;
001A64 8118              AJMP    ?C0063?CS_COMMTO1186
  457: 		case CS_CommTo1186_SetSleepMode:	 // 7 
001A66         ?C0071?CS_COMMTO1186:
  458: 			buf[1] = 0x05;
001A66 904D83            MOV     DPTR,#buf+01H
001A69 7405              MOV     A,#05H
001A6B F0                MOVX    @DPTR,A
  459: 			buf[2] = 0xA0;
001A6C A3                INC     DPTR
001A6D 74A0              MOV     A,#0A0H
001A6F F0                MOVX    @DPTR,A
  460: 			buf[3] = databuf[3];
001A70 904D7F            MOV     DPTR,#databuf
001A73 E0                MOVX    A,@DPTR
001A74 FB                MOV     R3,A
001A75 A3                INC     DPTR
001A76 E0                MOVX    A,@DPTR
001A77 FA                MOV     R2,A
001A78 A3                INC     DPTR
001A79 E0                MOVX    A,@DPTR
001A7A F9                MOV     R1,A
001A7B 900003            MOV     DPTR,#03H
001A7E 120112            LCALL   ?C?CLDOPTR
001A81 904D85            MOV     DPTR,#buf+03H
001A84 F0                MOVX    @DPTR,A
  461: 			buf[4] = databuf[2];	
001A85 900002            MOV     DPTR,#02H
001A88 120112            LCALL   ?C?CLDOPTR
001A8B 904D86            MOV     DPTR,#buf+04H
001A8E F0                MOVX    @DPTR,A
  462: 			buf[5] = databuf[1];
001A8F 900001            MOV     DPTR,#01H
001A92 120112            LCALL   ?C?CLDOPTR
001A95 904D87            MOV     DPTR,#buf+05H
001A98 F0                MOVX    @DPTR,A
  463: 			buf[6] = databuf[0]; 
001A99 1200F9            LCALL   ?C?CLDPTR
001A9C 904D88            MOV     DPTR,#buf+06H
001A9F F0                MOVX    @DPTR,A
  464: 			buf[7] = CS_CommTo1186_Xor(buf,7);
001AA0 7B01              MOV     R3,#01H
001AA2 7A4D              MOV     R2,#HIGH buf
001AA4 7982              MOV     R1,#LOW buf
001AA6 7D07              MOV     R5,#07H
001AA8 B123              ACALL   _CS_CommTo1186_Xor
001AAA 904D89            MOV     DPTR,#buf+07H
001AAD EF                MOV     A,R7
001AAE F0                MOVX    @DPTR,A
  465: 			len  =  8;
001AAF 904D8C            MOV     DPTR,#len
001AB2 7408              MOV     A,#08H
001AB4 F0                MOVX    @DPTR,A
  466: 			break;
001AB5 8118              AJMP    ?C0063?CS_COMMTO1186
  467: 		case CS_CommTo1186_SetOpenWeight:	 // 8 
001AB7         ?C0072?CS_COMMTO1186:
  468: 			buf[1] = 0x06;
001AB7 904D83            MOV     DPTR,#buf+01H
001ABA 7406              MOV     A,#06H
001ABC F0                MOVX    @DPTR,A
  469: 			buf[2] = 0xA1;
001ABD A3                INC     DPTR
001ABE 74A1              MOV     A,#0A1H
001AC0 F0                MOVX    @DPTR,A
  470: 			buf[3] = databuf[4];
001AC1 904D7F            MOV     DPTR,#databuf
001AC4 E0                MOVX    A,@DPTR
001AC5 FB                MOV     R3,A
001AC6 A3                INC     DPTR
001AC7 E0                MOVX    A,@DPTR
001AC8 FA                MOV     R2,A
001AC9 A3                INC     DPTR
001ACA E0                MOVX    A,@DPTR
001ACB F9                MOV     R1,A
001ACC 900004            MOV     DPTR,#04H
001ACF 120112            LCALL   ?C?CLDOPTR
001AD2 904D85            MOV     DPTR,#buf+03H
001AD5 F0                MOVX    @DPTR,A
  471: 			buf[4] = databuf[3];	
001AD6 900003            MOV     DPTR,#03H
001AD9 120112            LCALL   ?C?CLDOPTR
001ADC 904D86            MOV     DPTR,#buf+04H
001ADF F0                MOVX    @DPTR,A
  472: 			buf[5] = databuf[2];
001AE0 900002            MOV     DPTR,#02H
001AE3 120112            LCALL   ?C?CLDOPTR
001AE6 904D87            MOV     DPTR,#buf+05H
001AE9 F0                MOVX    @DPTR,A
  473: 			buf[6] = databuf[1];
001AEA 900001            MOV     DPTR,#01H
001AED 120112            LCALL   ?C?CLDOPTR
001AF0 904D88            MOV     DPTR,#buf+06H
001AF3 F0                MOVX    @DPTR,A
  474: 			buf[7] = databuf[0]; 
001AF4 1200F9            LCALL   ?C?CLDPTR
001AF7 904D89            MOV     DPTR,#buf+07H
001AFA F0                MOVX    @DPTR,A
  475: 			buf[8] = CS_CommTo1186_Xor(buf,8);
001AFB 7B01              MOV     R3,#01H
001AFD 7A4D              MOV     R2,#HIGH buf
001AFF 7982              MOV     R1,#LOW buf
001B01 7D08              MOV     R5,#08H
001B03 B123              ACALL   _CS_CommTo1186_Xor
001B05 904D8A            MOV     DPTR,#buf+08H
001B08 EF                MOV     A,R7
001B09 F0                MOVX    @DPTR,A
  476: 			len  =  9;
001B0A 904D8C            MOV     DPTR,#len
001B0D 7409              MOV     A,#09H
001B0F F0                MOVX    @DPTR,A
  477: 			break;
001B10 8118              AJMP    ?C0063?CS_COMMTO1186
  478: 		case CS_CommTo1186_SetTime:		 // 9 
001B12         ?C0073?CS_COMMTO1186:
  479: 			buf[1] = 0x05;
001B12 904D83            MOV     DPTR,#buf+01H
001B15 7405              MOV     A,#05H
001B17 F0                MOVX    @DPTR,A
  480: 			buf[2] = 0xA2;
001B18 A3                INC     DPTR
001B19 74A2              MOV     A,#0A2H
001B1B F0                MOVX    @DPTR,A
  481: 			buf[3] = databuf[3];
001B1C 904D7F            MOV     DPTR,#databuf
001B1F E0                MOVX    A,@DPTR
001B20 FB                MOV     R3,A
001B21 A3                INC     DPTR
001B22 E0                MOVX    A,@DPTR
001B23 FA                MOV     R2,A
001B24 A3                INC     DPTR
001B25 E0                MOVX    A,@DPTR
001B26 F9                MOV     R1,A
001B27 900003            MOV     DPTR,#03H
001B2A 120112            LCALL   ?C?CLDOPTR
001B2D 904D85            MOV     DPTR,#buf+03H
001B30 F0                MOVX    @DPTR,A
  482: 			buf[4] = databuf[2];	
001B31 900002            MOV     DPTR,#02H
001B34 120112            LCALL   ?C?CLDOPTR
001B37 904D86            MOV     DPTR,#buf+04H
001B3A F0                MOVX    @DPTR,A
  483: 			buf[5] = databuf[1];
001B3B 900001            MOV     DPTR,#01H
001B3E 120112            LCALL   ?C?CLDOPTR
001B41 904D87            MOV     DPTR,#buf+05H
001B44 F0                MOVX    @DPTR,A
  484: 			buf[6] = databuf[0]; 
001B45 1200F9            LCALL   ?C?CLDPTR
001B48 904D88            MOV     DPTR,#buf+06H
001B4B F0                MOVX    @DPTR,A
  485: 			buf[7] = CS_CommTo1186_Xor(buf,7);
001B4C 7B01              MOV     R3,#01H
001B4E 7A4D              MOV     R2,#HIGH buf
001B50 7982              MOV     R1,#LOW buf
001B52 7D07              MOV     R5,#07H
001B54 B123              ACALL   _CS_CommTo1186_Xor
001B56 904D89            MOV     DPTR,#buf+07H
001B59 EF                MOV     A,R7
001B5A F0                MOVX    @DPTR,A
  486: 			len  =  8;	
001B5B 904D8C            MOV     DPTR,#len
001B5E 7408              MOV     A,#08H
001B60 F0                MOVX    @DPTR,A
  487: 			break;
001B61 8118              AJMP    ?C0063?CS_COMMTO1186
  488: 		case CS_CommTo1186_SetRam:		 	// 10 
001B63         ?C0074?CS_COMMTO1186:
  489: 			buf[1] = 0x04;
001B63 904D83            MOV     DPTR,#buf+01H
001B66 7404              MOV     A,#04H
001B68 F0                MOVX    @DPTR,A
  490: 			buf[2] = 0xA3;
001B69 A3                INC     DPTR
001B6A 74A3              MOV     A,#0A3H
001B6C F0                MOVX    @DPTR,A
  491: 			buf[3] = databuf[2];
001B6D 904D7F            MOV     DPTR,#databuf
001B70 E0                MOVX    A,@DPTR
001B71 FB                MOV     R3,A
001B72 A3                INC     DPTR
001B73 E0                MOVX    A,@DPTR
001B74 FA                MOV     R2,A
001B75 A3                INC     DPTR
001B76 E0                MOVX    A,@DPTR
001B77 F9                MOV     R1,A
001B78 900002            MOV     DPTR,#02H
001B7B 120112            LCALL   ?C?CLDOPTR
001B7E 904D85            MOV     DPTR,#buf+03H
001B81 F0                MOVX    @DPTR,A
  492: 			buf[4] = databuf[1];	
001B82 900001            MOV     DPTR,#01H
001B85 120112            LCALL   ?C?CLDOPTR
001B88 904D86            MOV     DPTR,#buf+04H
001B8B F0                MOVX    @DPTR,A
  493: 			buf[5] = databuf[0]; 
001B8C 1200F9            LCALL   ?C?CLDPTR
001B8F 904D87            MOV     DPTR,#buf+05H
001B92 F0                MOVX    @DPTR,A
  494: 			buf[6] = CS_CommTo1186_Xor(buf,6);
001B93 7B01              MOV     R3,#01H
001B95 7A4D              MOV     R2,#HIGH buf
001B97 7982              MOV     R1,#LOW buf
001B99 7D06              MOV     R5,#06H
001B9B B123              ACALL   _CS_CommTo1186_Xor
001B9D 904D88            MOV     DPTR,#buf+06H
001BA0 EF                MOV     A,R7
001BA1 F0                MOVX    @DPTR,A
  495: 			len  =  7;			
001BA2 904D8C            MOV     DPTR,#len
001BA5 7407              MOV     A,#07H
001BA7 F0                MOVX    @DPTR,A
  496: 			break;
001BA8 806E              SJMP    ?C0063?CS_COMMTO1186
  497: 		case CS_CommTo1186_LcdDisplay:		// 11 
001BAA         ?C0075?CS_COMMTO1186:
  498: 			buf[1] = 0x07;
001BAA 904D83            MOV     DPTR,#buf+01H
001BAD 7407              MOV     A,#07H
001BAF F0                MOVX    @DPTR,A
  499: 			buf[2] = 0xe0;
001BB0 A3                INC     DPTR
001BB1 74E0              MOV     A,#0E0H
001BB3 F0                MOVX    @DPTR,A
  500: 			buf[3] = databuf[5];
001BB4 904D7F            MOV     DPTR,#databuf
001BB7 E0                MOVX    A,@DPTR
001BB8 FB                MOV     R3,A
001BB9 A3                INC     DPTR
001BBA E0                MOVX    A,@DPTR
001BBB FA                MOV     R2,A
001BBC A3                INC     DPTR
001BBD E0                MOVX    A,@DPTR
001BBE F9                MOV     R1,A
001BBF 900005            MOV     DPTR,#05H
001BC2 120112            LCALL   ?C?CLDOPTR
001BC5 904D85            MOV     DPTR,#buf+03H
001BC8 F0                MOVX    @DPTR,A
  501: 			buf[4] = databuf[4];
001BC9 900004            MOV     DPTR,#04H
001BCC 120112            LCALL   ?C?CLDOPTR
001BCF 904D86            MOV     DPTR,#buf+04H
001BD2 F0                MOVX    @DPTR,A
  502: 			buf[5] = databuf[3];
001BD3 900003            MOV     DPTR,#03H
001BD6 120112            LCALL   ?C?CLDOPTR
001BD9 904D87            MOV     DPTR,#buf+05H
001BDC F0                MOVX    @DPTR,A
  503: 			buf[6] = databuf[2];
001BDD 900002            MOV     DPTR,#02H
001BE0 120112            LCALL   ?C?CLDOPTR
001BE3 904D88            MOV     DPTR,#buf+06H
001BE6 F0                MOVX    @DPTR,A
  504: 			buf[7] = databuf[1];
001BE7 900001            MOV     DPTR,#01H
001BEA 120112            LCALL   ?C?CLDOPTR
001BED 904D89            MOV     DPTR,#buf+07H
001BF0 F0                MOVX    @DPTR,A
  505: 			buf[8] = databuf[0];		 
001BF1 1200F9            LCALL   ?C?CLDPTR
001BF4 904D8A            MOV     DPTR,#buf+08H
001BF7 F0                MOVX    @DPTR,A
  506: 			buf[9] = CS_CommTo1186_Xor(buf,9);
001BF8 7B01              MOV     R3,#01H
001BFA 7A4D              MOV     R2,#HIGH buf
001BFC 7982              MOV     R1,#LOW buf
001BFE 7D09              MOV     R5,#09H
001C00 B123              ACALL   _CS_CommTo1186_Xor
001C02 904D8B            MOV     DPTR,#buf+09H
001C05 EF                MOV     A,R7
001C06 F0                MOVX    @DPTR,A
  507: 			len  =  10;
001C07 A3                INC     DPTR
001C08 740A              MOV     A,#0AH
001C0A F0                MOVX    @DPTR,A
  508: 			break;
001C0B 800B              SJMP    ?C0063?CS_COMMTO1186
  509: 		default:		
001C0D         ?C0076?CS_COMMTO1186:
  510: 			buf[1] = 0x00;
001C0D E4                CLR     A
001C0E 904D83            MOV     DPTR,#buf+01H
001C11 F0                MOVX    @DPTR,A
  511: 			len   = 2;
001C12 904D8C            MOV     DPTR,#len
001C15 7402              MOV     A,#02H
001C17 F0                MOVX    @DPTR,A
  512: 			break;
  513: 		}
001C18         ?C0063?CS_COMMTO1186:
  514: 	YC_UARTSendData(buf, len);
001C18 7B01              MOV     R3,#01H
001C1A 7A4D              MOV     R2,#HIGH buf
001C1C 7982              MOV     R1,#LOW buf
001C1E 904D8C            MOV     DPTR,#len
001C21 E0                MOVX    A,@DPTR
001C22 FD                MOV     R5,A
001C23 7C00              MOV     R4,#00H
;----                  JMP     _YC_UARTSendData
  515: }
----- FUNCTION _CS_CommTo1186_SendCmd (END) -------


----- FUNCTION _YC_UARTSendData (BEGIN) -----
 FILE: 'YC_Peripheral.c'
  351: void YC_UARTSendData(u8_t* pbuff, u16_t len)
  352: {
001C25 904DAA            MOV     DPTR,#pbuff
001C28 EB                MOV     A,R3
001C29 F0                MOVX    @DPTR,A
001C2A A3                INC     DPTR
001C2B EA                MOV     A,R2
001C2C F0                MOVX    @DPTR,A
001C2D A3                INC     DPTR
001C2E E9                MOV     A,R1
001C2F F0                MOVX    @DPTR,A
001C30 A3                INC     DPTR
001C31 EC                MOV     A,R4
001C32 F0                MOVX    @DPTR,A
001C33 A3                INC     DPTR
001C34 ED                MOV     A,R5
001C35 F0                MOVX    @DPTR,A
  353: 	int i;
  354: 	u8_t *twptr = (u8_t *)ESWAP(REG_UART_TX_PTR_W);
001C36 90805E            MOV     DPTR,#0805EH
001C39 A3                INC     DPTR
001C3A E0                MOVX    A,@DPTR
001C3B FC                MOV     R4,A
001C3C 90805E            MOV     DPTR,#0805EH
001C3F E0                MOVX    A,@DPTR
001C40 FF                MOV     R7,A
001C41 EC                MOV     A,R4
001C42 FE                MOV     R6,A
001C43 EF                MOV     A,R7
001C44 AA06              MOV     R2,AR6
001C46 F9                MOV     R1,A
001C47 904DB1            MOV     DPTR,#twptr
001C4A E4                CLR     A
001C4B F0                MOVX    @DPTR,A
001C4C A3                INC     DPTR
001C4D EA                MOV     A,R2
001C4E F0                MOVX    @DPTR,A
001C4F A3                INC     DPTR
001C50 E9                MOV     A,R1
001C51 F0                MOVX    @DPTR,A
  355: 
  356: 	for(i=0;i<len;i++)
001C52 E4                CLR     A
001C53 904DAF            MOV     DPTR,#i
001C56 F0                MOVX    @DPTR,A
001C57 A3                INC     DPTR
001C58 F0                MOVX    @DPTR,A
001C59         ?C0002?YC_PERIPHERAL:
001C59 904DAD            MOV     DPTR,#len
001C5C E0                MOVX    A,@DPTR
001C5D FE                MOV     R6,A
001C5E A3                INC     DPTR
001C5F E0                MOVX    A,@DPTR
001C60 FF                MOV     R7,A
001C61 C3                CLR     C
001C62 904DB0            MOV     DPTR,#i+01H
001C65 E0                MOVX    A,@DPTR
001C66 9F                SUBB    A,R7
001C67 904DAF            MOV     DPTR,#i
001C6A E0                MOVX    A,@DPTR
001C6B 9E                SUBB    A,R6
001C6C 4002              JC      $ + 4H
001C6E A104              AJMP    ?C0003?YC_PERIPHERAL
  357: 	{
  358: 		xmemcpy(twptr++, pbuff++, 1);
001C70 904DB1            MOV     DPTR,#twptr
001C73 E0                MOVX    A,@DPTR
001C74 A3                INC     DPTR
001C75 E4                CLR     A
001C76 75F001            MOV     B,#01H
001C79 1201C8            LCALL   ?C?ILDIX
001C7C FE                MOV     R6,A
001C7D AFF0              MOV     R7,B
001C7F 904DAA            MOV     DPTR,#pbuff
001C82 E0                MOVX    A,@DPTR
001C83 FB                MOV     R3,A
001C84 A3                INC     DPTR
001C85 E4                CLR     A
001C86 75F001            MOV     B,#01H
001C89 1201C8            LCALL   ?C?ILDIX
001C8C A9F0              MOV     R1,B
001C8E FA                MOV     R2,A
001C8F 751C01            MOV     ?_xmemcpy?BYTE+05H,#01H
001C92 B17D              ACALL   _xmemcpy
  359: 
  360: 		if(((short)twptr-1)==ESWAP(REG_UART_TX_ADDR_E))	//twptr reach the end of buffer
001C94 90805C            MOV     DPTR,#0805CH
001C97 A3                INC     DPTR
001C98 E0                MOVX    A,@DPTR
001C99 FC                MOV     R4,A
001C9A 90805C            MOV     DPTR,#0805CH
001C9D E0                MOVX    A,@DPTR
001C9E FF                MOV     R7,A
001C9F EC                MOV     A,R4
001CA0 FE                MOV     R6,A
001CA1 EF                MOV     A,R7
001CA2 904DB1            MOV     DPTR,#twptr
001CA5 E0                MOVX    A,@DPTR
001CA6 A3                INC     DPTR
001CA7 E0                MOVX    A,@DPTR
001CA8 FA                MOV     R2,A
001CA9 A3                INC     DPTR
001CAA E0                MOVX    A,@DPTR
001CAB 24FF              ADD     A,#0FFH
001CAD FD                MOV     R5,A
001CAE EA                MOV     A,R2
001CAF 34FF              ADDC    A,#0FFH
001CB1 FC                MOV     R4,A
001CB2 EF                MOV     A,R7
001CB3 6D                XRL     A,R5
001CB4 7002              JNZ     ?C0022?YC_PERIPHERAL
001CB6 EE                MOV     A,R6
001CB7 6C                XRL     A,R4
001CB8         ?C0022?YC_PERIPHERAL:
001CB8 703A              JNZ     ?C0004?YC_PERIPHERAL
  361: 		{
  362: 			REG_UART_TX_PTR_W = REG_UART_TX_ADDR_E;
001CBA 90805C            MOV     DPTR,#0805CH
001CBD E0                MOVX    A,@DPTR
001CBE FF                MOV     R7,A
001CBF A3                INC     DPTR
001CC0 E0                MOVX    A,@DPTR
001CC1 A3                INC     DPTR
001CC2 CF                XCH     A,R7
001CC3 F0                MOVX    @DPTR,A
001CC4 A3                INC     DPTR
001CC5 EF                MOV     A,R7
001CC6 F0                MOVX    @DPTR,A
001CC7         ?C0006?YC_PERIPHERAL:
  363: 			while(ESWAP(REG_UART_TX_ITEMS));
001CC7 90810E            MOV     DPTR,#0810EH
001CCA A3                INC     DPTR
001CCB E0                MOVX    A,@DPTR
001CCC FC                MOV     R4,A
001CCD 90810E            MOV     DPTR,#0810EH
001CD0 E0                MOVX    A,@DPTR
001CD1 FF                MOV     R7,A
001CD2 EC                MOV     A,R4
001CD3 FE                MOV     R6,A
001CD4 EF                MOV     A,R7
001CD5 4E                ORL     A,R6
001CD6 70EF              JNZ     ?C0006?YC_PERIPHERAL
001CD8         ?C0007?YC_PERIPHERAL:
  364: 			
  365: 			twptr = (u8_t *)ESWAP(REG_UART_TX_ADDR_S);	//reset twptr
001CD8 90805A            MOV     DPTR,#0805AH
001CDB A3                INC     DPTR
001CDC E0                MOVX    A,@DPTR
001CDD FC                MOV     R4,A
001CDE 90805A            MOV     DPTR,#0805AH
001CE1 E0                MOVX    A,@DPTR
001CE2 FF                MOV     R7,A
001CE3 EC                MOV     A,R4
001CE4 FE                MOV     R6,A
001CE5 EF                MOV     A,R7
001CE6 AA06              MOV     R2,AR6
001CE8 F9                MOV     R1,A
001CE9 904DB1            MOV     DPTR,#twptr
001CEC E4                CLR     A
001CED F0                MOVX    @DPTR,A
001CEE A3                INC     DPTR
001CEF EA                MOV     A,R2
001CF0 F0                MOVX    @DPTR,A
001CF1 A3                INC     DPTR
001CF2 E9                MOV     A,R1
001CF3 F0                MOVX    @DPTR,A
  366: 		}	
  367: 	}	
001CF4         ?C0004?YC_PERIPHERAL:
001CF4 904DB0            MOV     DPTR,#i+01H
001CF7 E0                MOVX    A,@DPTR
001CF8 04                INC     A
001CF9 F0                MOVX    @DPTR,A
001CFA 7006              JNZ     ?C0023?YC_PERIPHERAL
001CFC 904DAF            MOV     DPTR,#i
001CFF E0                MOVX    A,@DPTR
001D00 04                INC     A
001D01 F0                MOVX    @DPTR,A
001D02         ?C0023?YC_PERIPHERAL:
001D02 8159              AJMP    ?C0002?YC_PERIPHERAL
001D04         ?C0003?YC_PERIPHERAL:
  368: 
  369: 	REG_UART_TX_PTR_W = ESWAP((short)twptr);
001D04 904DB1            MOV     DPTR,#twptr
001D07 E0                MOVX    A,@DPTR
001D08 A3                INC     DPTR
001D09 E0                MOVX    A,@DPTR
001D0A FA                MOV     R2,A
001D0B A3                INC     DPTR
001D0C E0                MOVX    A,@DPTR
001D0D AC02              MOV     R4,AR2
001D0F FD                MOV     R5,A
001D10 EC                MOV     A,R4
001D11 FF                MOV     R7,A
001D12 33                RLC     A
001D13 95E0              SUBB    A,ACC
001D15 AB07              MOV     R3,AR7
001D17 ED                MOV     A,R5
001D18 FF                MOV     R7,A
001D19 EB                MOV     A,R3
001D1A 90805E            MOV     DPTR,#0805EH
001D1D CF                XCH     A,R7
001D1E F0                MOVX    @DPTR,A
001D1F A3                INC     DPTR
001D20 EF                MOV     A,R7
001D21 F0                MOVX    @DPTR,A
  370: 	//YC_UARTWaitSendData();
  371: }
001D22 22                RET     
----- FUNCTION _YC_UARTSendData (END) -------


----- FUNCTION _CS_CommTo1186_Xor (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  392: u8_t CS_CommTo1186_Xor(u8_t * buf,u8_t len)
  393: {
001D23 904E47            MOV     DPTR,#buf
001D26 EB                MOV     A,R3
001D27 F0                MOVX    @DPTR,A
001D28 A3                INC     DPTR
001D29 EA                MOV     A,R2
001D2A F0                MOVX    @DPTR,A
001D2B A3                INC     DPTR
001D2C E9                MOV     A,R1
001D2D F0                MOVX    @DPTR,A
;---- Variable 'len' assigned to Register 'R5' ----
  394: 	u8_t	i;
  395: 	for(i=0;i<len;i++)
;---- Variable 'i' assigned to Register 'R7' ----
001D2E E4                CLR     A
001D2F FF                MOV     R7,A
001D30         ?C0059?CS_COMMTO1186:
001D30 EF                MOV     A,R7
001D31 C3                CLR     C
001D32 9D                SUBB    A,R5
001D33 5035              JNC     ?C0060?CS_COMMTO1186
  396: 		{
  397: 		*(buf+9) = *(buf+9) ^	*(buf+i);
001D35 904E47            MOV     DPTR,#buf
001D38 E0                MOVX    A,@DPTR
001D39 FB                MOV     R3,A
001D3A A3                INC     DPTR
001D3B E0                MOVX    A,@DPTR
001D3C FA                MOV     R2,A
001D3D A3                INC     DPTR
001D3E E0                MOVX    A,@DPTR
001D3F 2409              ADD     A,#09H
001D41 F9                MOV     R1,A
001D42 E4                CLR     A
001D43 3A                ADDC    A,R2
001D44 FA                MOV     R2,A
001D45 C002              PUSH    AR2
001D47 C001              PUSH    AR1
001D49 1200F9            LCALL   ?C?CLDPTR
001D4C FE                MOV     R6,A
001D4D 904E47            MOV     DPTR,#buf
001D50 E0                MOVX    A,@DPTR
001D51 A3                INC     DPTR
001D52 E0                MOVX    A,@DPTR
001D53 FA                MOV     R2,A
001D54 A3                INC     DPTR
001D55 E0                MOVX    A,@DPTR
001D56 F9                MOV     R1,A
001D57 8F82              MOV     DPL,R7
001D59 758300            MOV     DPH,#00H
001D5C 120112            LCALL   ?C?CLDOPTR
001D5F 6E                XRL     A,R6
001D60 D001              POP     AR1
001D62 D002              POP     AR2
001D64 12013F            LCALL   ?C?CSTPTR
  398: 		}
001D67 0F                INC     R7
001D68 80C6              SJMP    ?C0059?CS_COMMTO1186
001D6A         ?C0060?CS_COMMTO1186:
  399: 	return *(buf+9);
001D6A 904E47            MOV     DPTR,#buf
001D6D E0                MOVX    A,@DPTR
001D6E FB                MOV     R3,A
001D6F A3                INC     DPTR
001D70 E0                MOVX    A,@DPTR
001D71 FA                MOV     R2,A
001D72 A3                INC     DPTR
001D73 E0                MOVX    A,@DPTR
001D74 F9                MOV     R1,A
001D75 900009            MOV     DPTR,#09H
001D78 120112            LCALL   ?C?CLDOPTR
001D7B FF                MOV     R7,A
  400: }
001D7C 22                RET     
----- FUNCTION _CS_CommTo1186_Xor (END) -------


----- FUNCTION _xmemcpy (BEGIN) -----
 FILE: 'YC_Utilities.c'
   16: void xmemcpy(pxbyte dest, u8_t* src, u8_t len) small
   17: {
001D7D 8E17              MOV     dest,R6
001D7F 8F18              MOV     dest+01H,R7
001D81 8B19              MOV     src,R3
001D83 8A1A              MOV     src+01H,R2
001D85 891B              MOV     src+02H,R1
001D87         ?C0005?YC_UTILITIES:
   18: 	while(len--)
001D87 AF1C              MOV     R7,len
001D89 151C              DEC     len
001D8B EF                MOV     A,R7
001D8C 6025              JZ      ?C0007?YC_UTILITIES
   19: 		*dest++ = *src++;
001D8E AB19              MOV     R3,src
001D90 051B              INC     src+02H
001D92 E51B              MOV     A,src+02H
001D94 AA1A              MOV     R2,src+01H
001D96 7002              JNZ     ?C0045?YC_UTILITIES
001D98 051A              INC     src+01H
001D9A         ?C0045?YC_UTILITIES:
001D9A 14                DEC     A
001D9B F9                MOV     R1,A
001D9C 1200F9            LCALL   ?C?CLDPTR
001D9F FF                MOV     R7,A
001DA0 0518              INC     dest+01H
001DA2 E518              MOV     A,dest+01H
001DA4 AC17              MOV     R4,dest
001DA6 7002              JNZ     ?C0046?YC_UTILITIES
001DA8 0517              INC     dest
001DAA         ?C0046?YC_UTILITIES:
001DAA 14                DEC     A
001DAB F582              MOV     DPL,A
001DAD 8C83              MOV     DPH,R4
001DAF EF                MOV     A,R7
001DB0 F0                MOVX    @DPTR,A
001DB1 80D4              SJMP    ?C0005?YC_UTILITIES
   20: 	return;
   21: }
001DB3         ?C0007?YC_UTILITIES:
001DB3 22                RET     
----- FUNCTION _xmemcpy (END) -------


----- FUNCTION _lxRecvDataFromApp (BEGIN) -----
 FILE: 'lxProtocol.c'
   50: void lxRecvDataFromApp(BT_EVENTFIFO_t *event)
   51: {
001DB4 904E1C            MOV     DPTR,#event
001DB7 EB                MOV     A,R3
001DB8 F0                MOVX    @DPTR,A
001DB9 A3                INC     DPTR
001DBA EA                MOV     A,R2
001DBB F0                MOVX    @DPTR,A
001DBC A3                INC     DPTR
001DBD E9                MOV     A,R1
001DBE F0                MOVX    @DPTR,A
   52: 	//data[0]:total length, data[1~2]:handle
   53: 	//data[3]:frame control,data[4]:length,data[5~N]:content
   54: 	u8_t frameControl = event->DATA[3];
001DBF 904E1C            MOV     DPTR,#event
001DC2 E0                MOVX    A,@DPTR
001DC3 FB                MOV     R3,A
001DC4 A3                INC     DPTR
001DC5 E0                MOVX    A,@DPTR
001DC6 FA                MOV     R2,A
001DC7 A3                INC     DPTR
001DC8 E0                MOVX    A,@DPTR
001DC9 F9                MOV     R1,A
001DCA 900004            MOV     DPTR,#04H
001DCD 120112            LCALL   ?C?CLDOPTR
001DD0 904E1F            MOV     DPTR,#frameControl
001DD3 F0                MOVX    @DPTR,A
   55: 	u16_t cmd;
   56: 	
   57: 	bigLittleEndianSwap(&(event->DATA[5]), event->DATA[4]);
001DD4 E9                MOV     A,R1
001DD5 2406              ADD     A,#06H
001DD7 F9                MOV     R1,A
001DD8 E4                CLR     A
001DD9 3A                ADDC    A,R2
001DDA FA                MOV     R2,A
001DDB C002              PUSH    AR2
001DDD C001              PUSH    AR1
001DDF 904E1C            MOV     DPTR,#event
001DE2 E0                MOVX    A,@DPTR
001DE3 A3                INC     DPTR
001DE4 E0                MOVX    A,@DPTR
001DE5 FA                MOV     R2,A
001DE6 A3                INC     DPTR
001DE7 E0                MOVX    A,@DPTR
001DE8 F9                MOV     R1,A
001DE9 900005            MOV     DPTR,#05H
001DEC 120112            LCALL   ?C?CLDOPTR
001DEF FD                MOV     R5,A
001DF0 7C00              MOV     R4,#00H
001DF2 D001              POP     AR1
001DF4 D002              POP     AR2
001DF6 122ED3            LCALL   _bigLittleEndianSwap
   58: 	cmd = event->DATA[5] | (event->DATA[6] << 8);
001DF9 904E1C            MOV     DPTR,#event
001DFC E0                MOVX    A,@DPTR
001DFD FB                MOV     R3,A
001DFE A3                INC     DPTR
001DFF E0                MOVX    A,@DPTR
001E00 FA                MOV     R2,A
001E01 A3                INC     DPTR
001E02 E0                MOVX    A,@DPTR
001E03 F9                MOV     R1,A
001E04 900007            MOV     DPTR,#07H
001E07 120112            LCALL   ?C?CLDOPTR
001E0A FE                MOV     R6,A
001E0B 900006            MOV     DPTR,#06H
001E0E 120112            LCALL   ?C?CLDOPTR
001E11 FD                MOV     R5,A
001E12 EE                MOV     A,R6
001E13 ED                MOV     A,R5
001E14 FF                MOV     R7,A
001E15 904E20            MOV     DPTR,#cmd
001E18 EE                MOV     A,R6
001E19 F0                MOVX    @DPTR,A
001E1A A3                INC     DPTR
001E1B EF                MOV     A,R7
001E1C F0                MOVX    @DPTR,A
   59: 	
   60: 	//numTotalFrames == 1
   61: 	if(frameControl == FRAME_CONTROL_SINGLE)
001E1D 904E1F            MOV     DPTR,#frameControl
001E20 E0                MOVX    A,@DPTR
001E21 6410              XRL     A,#010H
001E23 6002              JZ      $ + 4H
001E25 C1AF              AJMP    ?C0007?LXPROTOCOL
   62: 	{
   63: 		//send ack
   64: 		lxSendRecvDataACK(HANDLE_UUIDA625_NOTIFY, RECV_ACK_SUCCESS);
001E27 7D01              MOV     R5,#01H
001E29 7F25              MOV     R7,#025H
001E2B FE                MOV     R6,A
001E2C D1FF              ACALL   _lxSendRecvDataACK
   65: 
   66: 		//copy data
   67: 		xmemcpy(LX_RECV_BUF, &(event->DATA[5]), event->DATA[4]);
001E2E 904E1C            MOV     DPTR,#event
001E31 E0                MOVX    A,@DPTR
001E32 FB                MOV     R3,A
001E33 A3                INC     DPTR
001E34 E0                MOVX    A,@DPTR
001E35 FA                MOV     R2,A
001E36 A3                INC     DPTR
001E37 E0                MOVX    A,@DPTR
001E38 2406              ADD     A,#06H
001E3A F9                MOV     R1,A
001E3B E4                CLR     A
001E3C 3A                ADDC    A,R2
001E3D FA                MOV     R2,A
001E3E C002              PUSH    AR2
001E40 C001              PUSH    AR1
001E42 904E1C            MOV     DPTR,#event
001E45 E0                MOVX    A,@DPTR
001E46 A3                INC     DPTR
001E47 E0                MOVX    A,@DPTR
001E48 FA                MOV     R2,A
001E49 A3                INC     DPTR
001E4A E0                MOVX    A,@DPTR
001E4B F9                MOV     R1,A
001E4C 900005            MOV     DPTR,#05H
001E4F 120112            LCALL   ?C?CLDOPTR
001E52 F51C              MOV     ?_xmemcpy?BYTE+05H,A
001E54 D001              POP     AR1
001E56 D002              POP     AR2
001E58 7FA0              MOV     R7,#0A0H
001E5A 7E48              MOV     R6,#048H
001E5C B17D              ACALL   _xmemcpy
   68: 		
   69: 		switch(cmd)
001E5E 904E20            MOV     DPTR,#cmd
001E61 E0                MOVX    A,@DPTR
001E62 FE                MOV     R6,A
001E63 A3                INC     DPTR
001E64 E0                MOVX    A,@DPTR
001E65 8EF0              MOV     B,R6
001E67 120395            LCALL   ?C?ICASE
001E6A 1E8E              DW      ?C0009?LXPROTOCOL
001E6C 0001              DW      01H
001E6E 1E92              DW      ?C0010?LXPROTOCOL
001E70 0003              DW      03H
001E72 1E96              DW      ?C0011?LXPROTOCOL
001E74 0008              DW      08H
001E76 1E9A              DW      ?C0012?LXPROTOCOL
001E78 000A              DW      0AH
001E7A 1E9E              DW      ?C0013?LXPROTOCOL
001E7C 1002              DW      01002H
001E7E 1EA2              DW      ?C0014?LXPROTOCOL
001E80 1004              DW      01004H
001E82 1EA6              DW      ?C0015?LXPROTOCOL
001E84 1005              DW      01005H
001E86 1EAA              DW      ?C0016?LXPROTOCOL
001E88 4801              DW      04801H
001E8A 0000              DW      00H
001E8C 1EF5              DW      ?C0023?LXPROTOCOL
   70: 		{
   71: 			case CMD_REGISTRATION_REQ:
001E8E         ?C0009?LXPROTOCOL:
   72: 				changeLxOptStatus(OPT_REGISTER_REQ);
001E8E 7F10              MOV     R7,#010H
001E90 8064              SJMP    _changeLxOptStatus
   73: 				break;
   74: 			case CMD_BIND_REQ:
001E92         ?C0010?LXPROTOCOL:
   75: 				changeLxOptStatus(OPT_BIND_REQ);
001E92 7F13              MOV     R7,#013H
001E94 8060              SJMP    _changeLxOptStatus
   76: 				break;
   77: 			case CMD_LOGIN_RSP:
001E96         ?C0011?LXPROTOCOL:
   78: 				changeLxOptStatus(OPT_LOGIN_RSP);
001E96 7F18              MOV     R7,#018H
001E98 805C              SJMP    _changeLxOptStatus
   79: 				break;
   80: 			case CMD_INIT_RSP:
001E9A         ?C0012?LXPROTOCOL:
   81: 				changeLxOptStatus(OPT_INIT_RSP);
001E9A 7F22              MOV     R7,#022H
001E9C 8058              SJMP    _changeLxOptStatus
   82: 				break;
   83: 				
   84: 			case CMD_TIME_SETTING_REQ:
001E9E         ?C0013?LXPROTOCOL:
   85: 				changeLxOptStatus(OPT_TIME_SETTING_REQ);
001E9E 7F25              MOV     R7,#025H
001EA0 8054              SJMP    _changeLxOptStatus
   86: 				break;
   87: 			case CMD_UNIT_SETTING_REQ:
001EA2         ?C0014?LXPROTOCOL:
   88: 				changeLxOptStatus(OPT_UNIT_SETTING_REQ);
001EA2 7F28              MOV     R7,#028H
001EA4 8050              SJMP    _changeLxOptStatus
   89: 				break;
   90: 			case CMD_DATA_CLEAR_SETTING_REQ:
001EA6         ?C0015?LXPROTOCOL:
   91: 				changeLxOptStatus(OPT_DATA_DEL_SETTING_REQ);
001EA6 7F31              MOV     R7,#031H
001EA8 804C              SJMP    _changeLxOptStatus
   92: 				break;
   93: 				
   94: 			case CMD_SYNC_DATA_REQ:
001EAA         ?C0016?LXPROTOCOL:
   95: 				changeLxOptStatus(OPT_SYNC_DATA_REQ);
001EAA 7F35              MOV     R7,#035H
001EAC 8048              SJMP    _changeLxOptStatus
   96: 				break;
   97: 		}
   98: 		
   99: 	}
001EAE 22                RET     
001EAF         ?C0007?LXPROTOCOL:
  100: 	//ACK:numTotalFrames == 0
  101: 	else if(frameControl == FRAME_CONTROL_ACK)
001EAF 904E1F            MOV     DPTR,#frameControl
001EB2 E0                MOVX    A,@DPTR
001EB3 7040              JNZ     ?C0023?LXPROTOCOL
  102: 	{
  103: 		if(event->DATA[5] == RECV_ACK_SUCCESS)
001EB5 904E1C            MOV     DPTR,#event
001EB8 E0                MOVX    A,@DPTR
001EB9 FB                MOV     R3,A
001EBA A3                INC     DPTR
001EBB E0                MOVX    A,@DPTR
001EBC FA                MOV     R2,A
001EBD A3                INC     DPTR
001EBE E0                MOVX    A,@DPTR
001EBF F9                MOV     R1,A
001EC0 900006            MOV     DPTR,#06H
001EC3 120112            LCALL   ?C?CLDOPTR
001EC6 B40111            CJNE    A,#01H,?C0019?LXPROTOCOL
  104: 		{
  105: 			if(lxOptStatus == OPT_REGISTER_RSP_WAIT_ACK)
001EC9 904C5C            MOV     DPTR,#lxOptStatus
001ECC E0                MOVX    A,@DPTR
001ECD B41104            CJNE    A,#011H,?C0020?LXPROTOCOL
  106: 			{
  107: 				SpiFlashOperator(CS_CMD_WRITE_FLASH);
001ED0 7F41              MOV     R7,#041H
001ED2 F132              ACALL   _SpiFlashOperator
  108: 			}
001ED4         ?C0020?LXPROTOCOL:
  109: 			
  110: 			lxOptStatus = OPT_IDLE;
001ED4 E4                CLR     A
001ED5 904C5C            MOV     DPTR,#lxOptStatus
001ED8 F0                MOVX    @DPTR,A
  111: 		}
001ED9 22                RET     
001EDA         ?C0019?LXPROTOCOL:
  112: 		else
  113: 		{
  114: 			if(lxOptStatus == OPT_REGISTER_RSP_WAIT_ACK)
001EDA 904C5C            MOV     DPTR,#lxOptStatus
001EDD E0                MOVX    A,@DPTR
001EDE B4110F            CJNE    A,#011H,?C0022?LXPROTOCOL
  115: 			{
  116: 				xmemset(mem_register_buf , 0, 10);
001EE1 7B0A              MOV     R3,#0AH
001EE3 E4                CLR     A
001EE4 FD                MOV     R5,A
001EE5 7F0E              MOV     R7,#0EH
001EE7 7E4C              MOV     R6,#04CH
001EE9 F193              ACALL   _xmemset
  117: 				//update adv flag
  118: 				*(mem_le_adv_data + 13) = 0;
001EEB 9043E7            MOV     DPTR,#043E7H
001EEE E4                CLR     A
001EEF F0                MOVX    @DPTR,A
  119: 			}
001EF0         ?C0022?LXPROTOCOL:
  120: 			lxOptStatus = OPT_IDLE;
001EF0 E4                CLR     A
001EF1 904C5C            MOV     DPTR,#lxOptStatus
001EF4 F0                MOVX    @DPTR,A
  121: 		}
  122: 	}
  123: }
001EF5         ?C0023?LXPROTOCOL:
001EF5 22                RET     
----- FUNCTION _lxRecvDataFromApp (END) -------


----- FUNCTION _changeLxOptStatus (BEGIN) -----
 FILE: 'lxProtocol.c'
  125: void changeLxOptStatus(u8_t opt)
  126: {
;---- Variable 'opt' assigned to Register 'R7' ----
  127: 	if(lxOptStatus == OPT_IDLE)
  128: 	{
001EF6 904C5C            MOV     DPTR,#lxOptStatus
001EF9 E0                MOVX    A,@DPTR
001EFA 7002              JNZ     ?C0025?LXPROTOCOL
  129: 		lxOptStatus = opt;
  130: 	}
001EFC EF                MOV     A,R7
001EFD F0                MOVX    @DPTR,A
  131: }
  132: 
001EFE         ?C0025?LXPROTOCOL:
001EFE 22                RET     
----- FUNCTION _changeLxOptStatus (END) -------


----- FUNCTION _lxSendRecvDataACK (BEGIN) -----
 FILE: 'lxProtocol.c'
   31: static void lxSendRecvDataACK(u16_t handle, u8_t state)
   32: {
;---- Variable 'handle' assigned to Register 'R2/R3' ----
001EFF AB07              MOV     R3,AR7
001F01 AA06              MOV     R2,AR6
;---- Variable 'state' assigned to Register 'R5' ----
   33: 	if(notifyValueUUIDA625 != NOTIFY_ENABLE)
   34: 	{
001F03 904C5A            MOV     DPTR,#notifyValueUUIDA625
001F06 E0                MOVX    A,@DPTR
001F07 6401              XRL     A,#01H
001F09 7026              JNZ     ?C0006?LXPROTOCOL
   35: 		return;
   36: 	}
001F0B         ?C0005?LXPROTOCOL:
   37: 
   38: 	btCmdBuf.len = 0x06;
001F0B 904C63            MOV     DPTR,#btCmdBuf
001F0E 7406              MOV     A,#06H
001F10 F0                MOVX    @DPTR,A
   39: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
001F11 A3                INC     DPTR
001F12 7430              MOV     A,#030H
001F14 F0                MOVX    @DPTR,A
   40: 	btCmdBuf.DATA[1] = LO_UINT16(handle);
001F15 EB                MOV     A,R3
001F16 A3                INC     DPTR
001F17 F0                MOVX    @DPTR,A
   41: 	btCmdBuf.DATA[2] = HI_UINT16(handle);
001F18 EA                MOV     A,R2
001F19 A3                INC     DPTR
001F1A F0                MOVX    @DPTR,A
   42: 	btCmdBuf.DATA[3] = ACK_FRAME;
001F1B E4                CLR     A
001F1C A3                INC     DPTR
001F1D F0                MOVX    @DPTR,A
   43: 	btCmdBuf.DATA[4] = RECV_ACK_FRAME_LEN;
001F1E A3                INC     DPTR
001F1F 04                INC     A
001F20 F0                MOVX    @DPTR,A
   44: 	btCmdBuf.DATA[5] = state;
001F21 A3                INC     DPTR
001F22 ED                MOV     A,R5
001F23 F0                MOVX    @DPTR,A
   45: 	
   46: 	BT_CmdFifoIn(&btCmdBuf);
001F24 7B01              MOV     R3,#01H
001F26 7A4C              MOV     R2,#HIGH btCmdBuf
001F28 7963              MOV     R1,#LOW btCmdBuf
001F2A 122680            LCALL   _BT_CmdFifoIn
   47: 	YC_Delay10ms(10);
001F2D 7F0A              MOV     R7,#0AH
001F2F F17B              ACALL   _YC_Delay10ms
   48: }
001F31         ?C0006?LXPROTOCOL:
001F31 22                RET     
----- FUNCTION _lxSendRecvDataACK (END) -------


----- FUNCTION _SpiFlashOperator (BEGIN) -----
 FILE: 'lxProtocol.c'
  469: void SpiFlashOperator(u8_t opt)
  470: {
001F32 904E5A            MOV     DPTR,#opt
001F35 EF                MOV     A,R7
001F36 F0                MOVX    @DPTR,A
  471: #if 1
  472: 	if(CS_CMD_READ_FLASH == opt)
001F37 BF4017            CJNE    R7,#040H,?C0083?LXPROTOCOL
  473: 	{
  474: 		SPIFlashRead(mem_spiflash_buf, SPIFLASH_DATA_ADDR, SPIFLASH_READ_LENGTH);
001F3A 7B01              MOV     R3,#01H
001F3C 7A4C              MOV     R2,#04CH
001F3E 7900              MOV     R1,#00H
001F40 904DE8            MOV     DPTR,#?_SPIFlashRead?BYTE+07H
001F43 744C              MOV     A,#04CH
001F45 F0                MOVX    @DPTR,A
001F46 7F00              MOV     R7,#00H
001F48 7EA0              MOV     R6,#0A0H
001F4A 7D00              MOV     R5,#00H
001F4C 7C00              MOV     R4,#00H
001F4E 0224EA            LJMP    _SPIFlashRead
  475: 	}
001F51         ?C0083?LXPROTOCOL:
  476: 	else if(CS_CMD_WRITE_FLASH == opt)
001F51 904E5A            MOV     DPTR,#opt
001F54 E0                MOVX    A,@DPTR
001F55 B44122            CJNE    A,#041H,?C0086?LXPROTOCOL
  477: 	{
  478: 		SPIFlashEraseSector(SPIFLASH_DATA_ADDR);
001F58 7F00              MOV     R7,#00H
001F5A 7EA0              MOV     R6,#0A0H
001F5C 7D00              MOV     R5,#00H
001F5E 7C00              MOV     R4,#00H
001F60 12236F            LCALL   _SPIFlashEraseSector
  479: 		SPIFlashWrite(mem_spiflash_buf, SPIFLASH_DATA_ADDR, SPIFLASH_READ_LENGTH);
001F63 7B01              MOV     R3,#01H
001F65 7A4C              MOV     R2,#04CH
001F67 7900              MOV     R1,#00H
001F69 904DE0            MOV     DPTR,#?_SPIFlashWrite?BYTE+07H
001F6C 744C              MOV     A,#04CH
001F6E F0                MOVX    @DPTR,A
001F6F 7F00              MOV     R7,#00H
001F71 7EA0              MOV     R6,#0A0H
001F73 7D00              MOV     R5,#00H
001F75 7C00              MOV     R4,#00H
001F77 1223E5            LCALL   _SPIFlashWrite
  480: 	}
  481: #else
  482: 	btCmdBuf.len = 1;
  483: 	btCmdBuf.DATA[0] = opt;
  484: 	BT_CmdFifoIn(&btCmdBuf);
  485: 	YC_Delay10ms(10);
  486: #endif
  487: }
001F7A         ?C0086?LXPROTOCOL:
001F7A 22                RET     
----- FUNCTION _SpiFlashOperator (END) -------


----- FUNCTION _YC_Delay10ms (BEGIN) -----
 FILE: 'YC_Utilities.c'
   60: void YC_Delay10ms(u8_t Time)
   61: {
;---- Variable 'Time' assigned to Register 'R7' ----
   62: 	u16_t j; 
   63: 	for(;Time>0;Time--)
001F7B         ?C0027?YC_UTILITIES:
001F7B EF                MOV     A,R7
001F7C D3                SETB    C
001F7D 9400              SUBB    A,#00H
001F7F 4011              JC      ?C0033?YC_UTILITIES
   64: 	{
   65: 		for(j=0;j<11900;j++);
;---- Variable 'j' assigned to Register 'R4/R5' ----
001F81 E4                CLR     A
001F82 FD                MOV     R5,A
001F83 FC                MOV     R4,A
001F84         ?C0030?YC_UTILITIES:
001F84 0D                INC     R5
001F85 BD0001            CJNE    R5,#00H,?C0054?YC_UTILITIES
001F88 0C                INC     R4
001F89         ?C0054?YC_UTILITIES:
001F89 BC2EF8            CJNE    R4,#02EH,?C0030?YC_UTILITIES
001F8C BD7CF5            CJNE    R5,#07CH,?C0030?YC_UTILITIES
   66: 	}
001F8F         ?C0029?YC_UTILITIES:
001F8F 1F                DEC     R7
001F90 80E9              SJMP    ?C0027?YC_UTILITIES
   67: }
001F92         ?C0033?YC_UTILITIES:
001F92 22                RET     
----- FUNCTION _YC_Delay10ms (END) -------


----- FUNCTION _xmemset (BEGIN) -----
 FILE: 'YC_Utilities.c'
   10: void xmemset(pxbyte addr, u8_t value, u8_t len) small
   11: {
001F93 8E1D              MOV     addr,R6
001F95 8F1E              MOV     addr+01H,R7
;---- Variable 'len' assigned to Register 'R3' ----
;---- Variable 'value' assigned to Register 'R5' ----
001F97         ?C0002?YC_UTILITIES:
   12: 	while(len--)
001F97 AF03              MOV     R7,AR3
001F99 1B                DEC     R3
001F9A EF                MOV     A,R7
001F9B 6013              JZ      ?C0004?YC_UTILITIES
   13: 		*addr++ = value;
001F9D 051E              INC     addr+01H
001F9F E51E              MOV     A,addr+01H
001FA1 AE1D              MOV     R6,addr
001FA3 7002              JNZ     ?C0044?YC_UTILITIES
001FA5 051D              INC     addr
001FA7         ?C0044?YC_UTILITIES:
001FA7 14                DEC     A
001FA8 F582              MOV     DPL,A
001FAA 8E83              MOV     DPH,R6
001FAC ED                MOV     A,R5
001FAD F0                MOVX    @DPTR,A
001FAE 80E7              SJMP    ?C0002?YC_UTILITIES
   14: 	return;
   15: }
001FB0         ?C0004?YC_UTILITIES:
001FB0 22                RET     
----- FUNCTION _xmemset (END) -------


----- FUNCTION delUserData (BEGIN) -----
 FILE: 'lxProtocol.c'
  370: static void delUserData(void)
  371: {
  372: 	//(mem_register_buf) = DEVICE_UNREGISTERED;
  373: 	//*(mem_le_adv_data + 13) = *(mem_register_buf);
  374: 	xmemset((u8_t *)&deviceInfo, 0, sizeof(DeviceInfo_t));
001FB1 7E4C              MOV     R6,#HIGH deviceInfo
001FB3 7F06              MOV     R7,#LOW deviceInfo
001FB5 7B0A              MOV     R3,#0AH
001FB7 E4                CLR     A
001FB8 FD                MOV     R5,A
001FB9 F193              ACALL   _xmemset
  375: 	QueueInit();
001FBB 1217CA            LCALL   QueueInit
  376: 	*(mem_le_adv_data + 13) = DEVICE_UNREGISTERED;
001FBE 9043E7            MOV     DPTR,#043E7H
001FC1 E4                CLR     A
001FC2 F0                MOVX    @DPTR,A
  377: 	UTCTime = 0;
001FC3 904C5E            MOV     DPTR,#UTCTime
001FC6 12033E            LCALL   ?C?LSTKXDATA
001FC9 00                DB      00H
001FCA 00                DB      00H
001FCB 00                DB      00H
001FCC 00                DB      00H
  378: 	SpiFlashOperator(CS_CMD_WRITE_FLASH);
001FCD 7F41              MOV     R7,#041H
001FCF E132              AJMP    _SpiFlashOperator
  379: }
----- FUNCTION delUserData (END) -------


----- FUNCTION BTControlProcess (BEGIN) -----
 FILE: 'system.c'
  124: void BTControlProcess(void)
  125: {
  126: 	BT_EVENTFIFO_t event;
  127: 	//normal process
  128: 	BT_EventFifoOut(&event);
001FD1 7B01              MOV     R3,#01H
001FD3 7A4D              MOV     R2,#HIGH event
001FD5 7965              MOV     R1,#LOW event
001FD7 1227D7            LCALL   _BT_EventFifoOut
  129: 	if(event.len != 0)
001FDA 904D65            MOV     DPTR,#event
001FDD E0                MOVX    A,@DPTR
001FDE 6076              JZ      ?C0028?SYSTEM
  130: 	{
  131: 		//YC_UARTSendData(event.DATA, event.len);
  132: 		switch(event.DATA[0]) {
001FE0 A3                INC     DPTR
001FE1 E0                MOVX    A,@DPTR
001FE2 24EE              ADD     A,#0EEH
001FE4 601C              JZ      ?C0019?SYSTEM
001FE6 14                DEC     A
001FE7 6024              JZ      ?C0020?SYSTEM
001FE9 14                DEC     A
001FEA 602A              JZ      ?C0021?SYSTEM
001FEC 24FC              ADD     A,#0FCH
001FEE 6060              JZ      ?C0027?SYSTEM
001FF0 2407              ADD     A,#07H
001FF2 7062              JNZ     ?C0028?SYSTEM
  133: 			case CS_NOTIFY_POWERON:
  134: 				break;
  135: 			case CS_NOTIFY_DISC:		//bluetooth disconnect
001FF4         ?C0018?SYSTEM:
  136: 				notifyValueUUIDA621 = NOTIFY_INDICATE_DISABLE;
001FF4 E4                CLR     A
001FF5 904C59            MOV     DPTR,#notifyValueUUIDA621
001FF8 F0                MOVX    @DPTR,A
  137: 				notifyValueUUIDA625 = NOTIFY_INDICATE_DISABLE;
001FF9 904C5A            MOV     DPTR,#notifyValueUUIDA625
001FFC F0                MOVX    @DPTR,A
  138: 				bleConnStatus= BLE_STATUS_DISCONN;
001FFD 904C5B            MOV     DPTR,#bleConnStatus
002000 F0                MOVX    @DPTR,A
  139: 				break;
002001 22                RET     
  140: 			case CS_NOTIFY_CONN:	//bluetooth connected
002002         ?C0019?SYSTEM:
  141: 				lxOptStatus = OPT_IDLE;
002002 E4                CLR     A
002003 904C5C            MOV     DPTR,#lxOptStatus
002006 F0                MOVX    @DPTR,A
  142: 				bleConnStatus= BLE_STATUS_CONN;
002007 904C5B            MOV     DPTR,#bleConnStatus
00200A 04                INC     A
00200B F0                MOVX    @DPTR,A
  143: 				break;
00200C 22                RET     
  144: 			case CS_NOTIFY_DATA:	//receive data
00200D         ?C0020?SYSTEM:
  145: 				lxRecvDataFromApp(&event);
00200D 7B01              MOV     R3,#01H
00200F 7A4D              MOV     R2,#HIGH event
002011 7965              MOV     R1,#LOW event
002013 021DB4            LJMP    _lxRecvDataFromApp
  146: 				break; 
  147: 			case CS_NOTIFY_OPENHANDLE:
002016         ?C0021?SYSTEM:
  148: 				if(event.DATA[1] == HANDLE_UUIDA621_NOTIFY)
002016 904D67            MOV     DPTR,#event+02H
002019 E0                MOVX    A,@DPTR
00201A FF                MOV     R7,A
00201B B41C0A            CJNE    A,#01CH,?C0022?SYSTEM
  149: 				{
  150: 					notifyValueUUIDA621 = event.DATA[3];
00201E 904D69            MOV     DPTR,#event+04H
002021 E0                MOVX    A,@DPTR
002022 904C59            MOV     DPTR,#notifyValueUUIDA621
002025 F0                MOVX    @DPTR,A
  151: 				}
002026 800C              SJMP    ?C0023?SYSTEM
002028         ?C0022?SYSTEM:
  152: 				else if(event.DATA[1] == HANDLE_UUIDA625_NOTIFY)
002028 EF                MOV     A,R7
002029 B42508            CJNE    A,#025H,?C0023?SYSTEM
  153: 				{
  154: 					notifyValueUUIDA625 = event.DATA[3];
00202C 904D69            MOV     DPTR,#event+04H
00202F E0                MOVX    A,@DPTR
002030 904C5A            MOV     DPTR,#notifyValueUUIDA625
002033 F0                MOVX    @DPTR,A
  155: 				}
002034         ?C0023?SYSTEM:
  156: 
  157: 				if(*mem_register_buf == DEVICE_REGISTERED &&
002034 904C0E            MOV     DPTR,#04C0EH
002037 E0                MOVX    A,@DPTR
002038 B4011B            CJNE    A,#01H,?C0028?SYSTEM
00203B 904C59            MOV     DPTR,#notifyValueUUIDA621
00203E E0                MOVX    A,@DPTR
00203F B40114            CJNE    A,#01H,?C0028?SYSTEM
002042 904C5A            MOV     DPTR,#notifyValueUUIDA625
002045 E0                MOVX    A,@DPTR
002046 B4010D            CJNE    A,#01H,?C0028?SYSTEM
  158: 					notifyValueUUIDA621 == NOTIFY_ENABLE &&
  159: 					notifyValueUUIDA625 == NOTIFY_ENABLE)
  160: 				{
  161: 					lxOptStatus = OPT_LOGIN_REQ;
002049 904C5C            MOV     DPTR,#lxOptStatus
00204C 7416              MOV     A,#016H
00204E F0                MOVX    @DPTR,A
  162: 				}
  163: 				break;
00204F 22                RET     
  164: 			case CS_NOTIFY_READ_REQ:
  165: 				break;
  166: 			case CS_NOTIFY_INDICATE_CONFIRM:
002050         ?C0027?SYSTEM:
  167: 				handleIndicationConfirm = 1;
002050 904C5D            MOV     DPTR,#handleIndicationConfirm
002053 7401              MOV     A,#01H
002055 F0                MOVX    @DPTR,A
  168: 				break;
  169: 		}
  170: 	}
  171: }
002056         ?C0028?SYSTEM:
002056 22                RET     
----- FUNCTION BTControlProcess (END) -------


----- FUNCTION _YC_UtilTimerStop (BEGIN) -----
 FILE: 'YC_Sys.c'
   66: bool YC_UtilTimerStop( u8_t timer_id) large
   67: {
;---- Variable 'timer_id' assigned to Register 'R4' ----
002057 AC07              MOV     R4,AR7
   68: 	if((timer_id > 8) ||!((YC_UtilTimer.timer_flages >> timer_id) & 1))
002059 EF                MOV     A,R7
00205A D3                SETB    C
00205B 9408              SUBB    A,#08H
00205D 5011              JNC     ?C0012?YC_SYS
00205F 904CDB            MOV     DPTR,#YC_UtilTimer
002062 E0                MOVX    A,@DPTR
002063 FE                MOV     R6,A
002064 A807              MOV     R0,AR7
002066 08                INC     R0
002067 8002              SJMP    ?C0030?YC_SYS
002069         ?C0029?YC_SYS:
002069 C3                CLR     C
00206A 13                RRC     A
00206B         ?C0030?YC_SYS:
00206B D8FC              DJNZ    R0,?C0029?YC_SYS
00206D 20E002            JB      ACC.0,?C0011?YC_SYS
002070         ?C0012?YC_SYS:
   69: 		return false;
002070 C3                CLR     C
002071 22                RET     
002072         ?C0011?YC_SYS:
   70: 	YC_UtilTimer.timer_flages &= ~( 1<< timer_id);
002072 AF04              MOV     R7,AR4
002074 7401              MOV     A,#01H
002076 A807              MOV     R0,AR7
002078 08                INC     R0
002079 8002              SJMP    ?C0032?YC_SYS
00207B         ?C0031?YC_SYS:
00207B C3                CLR     C
00207C 33                RLC     A
00207D         ?C0032?YC_SYS:
00207D D8FC              DJNZ    R0,?C0031?YC_SYS
00207F F4                CPL     A
002080 5E                ANL     A,R6
002081 904CDB            MOV     DPTR,#YC_UtilTimer
002084 F0                MOVX    @DPTR,A
   71: 	YC_UtilTimer.callback[timer_id] = 0;
002085 EC                MOV     A,R4
002086 75F003            MOV     B,#03H
002089 A4                MUL     AB
00208A 24DC              ADD     A,#LOW YC_UtilTimer+01H
00208C F582              MOV     DPL,A
00208E E4                CLR     A
00208F 344C              ADDC    A,#HIGH YC_UtilTimer+01H
002091 F583              MOV     DPH,A
002093 E4                CLR     A
002094 F0                MOVX    @DPTR,A
002095 A3                INC     DPTR
002096 F0                MOVX    @DPTR,A
002097 A3                INC     DPTR
002098 F0                MOVX    @DPTR,A
   72: 	YC_UtilTimer.timer_end[timer_id] = 0;
002099 EC                MOV     A,R4
00209A 25E0              ADD     A,ACC
00209C 25E0              ADD     A,ACC
00209E 24F4              ADD     A,#LOW YC_UtilTimer+019H
0020A0 F582              MOV     DPL,A
0020A2 E4                CLR     A
0020A3 344C              ADDC    A,#HIGH YC_UtilTimer+019H
0020A5 F583              MOV     DPH,A
0020A7 12033E            LCALL   ?C?LSTKXDATA
0020AA 00                DB      00H
0020AB 00                DB      00H
0020AC 00                DB      00H
0020AD 00                DB      00H
   73: 	return true;
0020AE D3                SETB    C
   74: }
0020AF 22                RET     
----- FUNCTION _YC_UtilTimerStop (END) -------


----- FUNCTION YC_UtilTimerProcess (BEGIN) -----
 FILE: 'YC_Sys.c'
   76: void YC_UtilTimerProcess(void) small
   77: {
   78: 	u8_t i;
   79: 
   80: 	if(YC_UtilTimer.last_timer > (YC_CLK_N + 0x1000)){
0020B0 908101            MOV     DPTR,#08101H
0020B3 E0                MOVX    A,@DPTR
0020B4 FF                MOV     R7,A
0020B5 E4                CLR     A
0020B6 FC                MOV     R4,A
0020B7 FD                MOV     R5,A
0020B8 FE                MOV     R6,A
0020B9 7808              MOV     R0,#08H
0020BB 12031F            LCALL   ?C?LSHL
0020BE A804              MOV     R0,AR4
0020C0 A905              MOV     R1,AR5
0020C2 AA06              MOV     R2,AR6
0020C4 AB07              MOV     R3,AR7
0020C6 908100            MOV     DPTR,#08100H
0020C9 E0                MOVX    A,@DPTR
0020CA FF                MOV     R7,A
0020CB E4                CLR     A
0020CC EB                MOV     A,R3
0020CD 4F                ORL     A,R7
0020CE FF                MOV     R7,A
0020CF EA                MOV     A,R2
0020D0 FE                MOV     R6,A
0020D1 E9                MOV     A,R1
0020D2 FD                MOV     R5,A
0020D3 E8                MOV     A,R0
0020D4 FC                MOV     R4,A
0020D5 C004              PUSH    AR4
0020D7 C005              PUSH    AR5
0020D9 C006              PUSH    AR6
0020DB C007              PUSH    AR7
0020DD 908102            MOV     DPTR,#08102H
0020E0 E0                MOVX    A,@DPTR
0020E1 FF                MOV     R7,A
0020E2 E4                CLR     A
0020E3 FC                MOV     R4,A
0020E4 FD                MOV     R5,A
0020E5 FE                MOV     R6,A
0020E6 7810              MOV     R0,#010H
0020E8 12031F            LCALL   ?C?LSHL
0020EB D003              POP     AR3
0020ED D002              POP     AR2
0020EF D001              POP     AR1
0020F1 D000              POP     AR0
0020F3 EF                MOV     A,R7
0020F4 4B                ORL     A,R3
0020F5 FF                MOV     R7,A
0020F6 EE                MOV     A,R6
0020F7 4A                ORL     A,R2
0020F8 FE                MOV     R6,A
0020F9 ED                MOV     A,R5
0020FA 49                ORL     A,R1
0020FB FD                MOV     R5,A
0020FC EC                MOV     A,R4
0020FD 48                ORL     A,R0
0020FE FC                MOV     R4,A
0020FF C004              PUSH    AR4
002101 C005              PUSH    AR5
002103 C006              PUSH    AR6
002105 C007              PUSH    AR7
002107 A3                INC     DPTR
002108 E0                MOVX    A,@DPTR
002109 FF                MOV     R7,A
00210A E4                CLR     A
00210B FC                MOV     R4,A
00210C FD                MOV     R5,A
00210D FE                MOV     R6,A
00210E 7818              MOV     R0,#018H
002110 12031F            LCALL   ?C?LSHL
002113 D003              POP     AR3
002115 D002              POP     AR2
002117 D001              POP     AR1
002119 D000              POP     AR0
00211B EF                MOV     A,R7
00211C 4B                ORL     A,R3
00211D FF                MOV     R7,A
00211E EE                MOV     A,R6
00211F 4A                ORL     A,R2
002120 FE                MOV     R6,A
002121 ED                MOV     A,R5
002122 49                ORL     A,R1
002123 FD                MOV     R5,A
002124 EC                MOV     A,R4
002125 48                ORL     A,R0
002126 FC                MOV     R4,A
002127 E4                CLR     A
002128 2F                ADD     A,R7
002129 FF                MOV     R7,A
00212A EE                MOV     A,R6
00212B 3410              ADDC    A,#010H
00212D FE                MOV     R6,A
00212E E4                CLR     A
00212F 3D                ADDC    A,R5
002130 FD                MOV     R5,A
002131 E4                CLR     A
002132 3C                ADDC    A,R4
002133 FC                MOV     R4,A
002134 904D14            MOV     DPTR,#YC_UtilTimer+039H
002137 E0                MOVX    A,@DPTR
002138 F8                MOV     R0,A
002139 A3                INC     DPTR
00213A E0                MOVX    A,@DPTR
00213B F9                MOV     R1,A
00213C A3                INC     DPTR
00213D E0                MOVX    A,@DPTR
00213E FA                MOV     R2,A
00213F A3                INC     DPTR
002140 E0                MOVX    A,@DPTR
002141 FB                MOV     R3,A
002142 D3                SETB    C
002143 1202FB            LCALL   ?C?ULCMP
002146 405D              JC      ?C0014?YC_SYS
   81: 		for(i = 0; i < YC_UTIL_TIMER_NUM; ++i){
002148 E4                CLR     A
002149 F51F              MOV     i,A
00214B         ?C0015?YC_SYS:
   82: 			if((YC_UtilTimer.timer_flages >> i) & 1){
00214B AF1F              MOV     R7,i
00214D 904CDB            MOV     DPTR,#YC_UtilTimer
002150 E0                MOVX    A,@DPTR
002151 FE                MOV     R6,A
002152 A807              MOV     R0,AR7
002154 08                INC     R0
002155 8002              SJMP    ?C0034?YC_SYS
002157         ?C0033?YC_SYS:
002157 C3                CLR     C
002158 13                RRC     A
002159         ?C0034?YC_SYS:
002159 D8FC              DJNZ    R0,?C0033?YC_SYS
00215B 30E040            JNB     ACC.0,?C0017?YC_SYS
   83: 				YC_UtilTimer.timer_end[i] -= YC_UtilTimer.last_timer;
00215E E51F              MOV     A,i
002160 25E0              ADD     A,ACC
002162 25E0              ADD     A,ACC
002164 24F4              ADD     A,#LOW YC_UtilTimer+019H
002166 F582              MOV     DPL,A
002168 E4                CLR     A
002169 344C              ADDC    A,#HIGH YC_UtilTimer+019H
00216B F583              MOV     DPH,A
00216D C083              PUSH    DPH
00216F C082              PUSH    DPL
002171 E0                MOVX    A,@DPTR
002172 FC                MOV     R4,A
002173 A3                INC     DPTR
002174 E0                MOVX    A,@DPTR
002175 FD                MOV     R5,A
002176 A3                INC     DPTR
002177 E0                MOVX    A,@DPTR
002178 FE                MOV     R6,A
002179 A3                INC     DPTR
00217A E0                MOVX    A,@DPTR
00217B FF                MOV     R7,A
00217C 904D14            MOV     DPTR,#YC_UtilTimer+039H
00217F E0                MOVX    A,@DPTR
002180 F8                MOV     R0,A
002181 A3                INC     DPTR
002182 E0                MOVX    A,@DPTR
002183 F9                MOV     R1,A
002184 A3                INC     DPTR
002185 E0                MOVX    A,@DPTR
002186 FA                MOV     R2,A
002187 A3                INC     DPTR
002188 E0                MOVX    A,@DPTR
002189 FB                MOV     R3,A
00218A C3                CLR     C
00218B EF                MOV     A,R7
00218C 9B                SUBB    A,R3
00218D FF                MOV     R7,A
00218E EE                MOV     A,R6
00218F 9A                SUBB    A,R2
002190 FE                MOV     R6,A
002191 ED                MOV     A,R5
002192 99                SUBB    A,R1
002193 FD                MOV     R5,A
002194 EC                MOV     A,R4
002195 98                SUBB    A,R0
002196 FC                MOV     R4,A
002197 D082              POP     DPL
002199 D083              POP     DPH
00219B 120332            LCALL   ?C?LSTXDATA
   84: 			}
   85: 		}
00219E         ?C0017?YC_SYS:
00219E 051F              INC     i
0021A0 E51F              MOV     A,i
0021A2 B408A6            CJNE    A,#08H,?C0015?YC_SYS
   86: 	}
0021A5         ?C0014?YC_SYS:
   87: 	YC_UtilTimer.last_timer = YC_CLK_N;
0021A5 908101            MOV     DPTR,#08101H
0021A8 E0                MOVX    A,@DPTR
0021A9 FF                MOV     R7,A
0021AA E4                CLR     A
0021AB FC                MOV     R4,A
0021AC FD                MOV     R5,A
0021AD FE                MOV     R6,A
0021AE 7808              MOV     R0,#08H
0021B0 12031F            LCALL   ?C?LSHL
0021B3 A804              MOV     R0,AR4
0021B5 A905              MOV     R1,AR5
0021B7 AA06              MOV     R2,AR6
0021B9 AB07              MOV     R3,AR7
0021BB 908100            MOV     DPTR,#08100H
0021BE E0                MOVX    A,@DPTR
0021BF FF                MOV     R7,A
0021C0 E4                CLR     A
0021C1 EB                MOV     A,R3
0021C2 4F                ORL     A,R7
0021C3 FF                MOV     R7,A
0021C4 EA                MOV     A,R2
0021C5 FE                MOV     R6,A
0021C6 E9                MOV     A,R1
0021C7 FD                MOV     R5,A
0021C8 E8                MOV     A,R0
0021C9 FC                MOV     R4,A
0021CA C004              PUSH    AR4
0021CC C005              PUSH    AR5
0021CE C006              PUSH    AR6
0021D0 C007              PUSH    AR7
0021D2 908102            MOV     DPTR,#08102H
0021D5 E0                MOVX    A,@DPTR
0021D6 FF                MOV     R7,A
0021D7 E4                CLR     A
0021D8 FC                MOV     R4,A
0021D9 FD                MOV     R5,A
0021DA FE                MOV     R6,A
0021DB 7810              MOV     R0,#010H
0021DD 12031F            LCALL   ?C?LSHL
0021E0 D003              POP     AR3
0021E2 D002              POP     AR2
0021E4 D001              POP     AR1
0021E6 D000              POP     AR0
0021E8 EF                MOV     A,R7
0021E9 4B                ORL     A,R3
0021EA FF                MOV     R7,A
0021EB EE                MOV     A,R6
0021EC 4A                ORL     A,R2
0021ED FE                MOV     R6,A
0021EE ED                MOV     A,R5
0021EF 49                ORL     A,R1
0021F0 FD                MOV     R5,A
0021F1 EC                MOV     A,R4
0021F2 48                ORL     A,R0
0021F3 FC                MOV     R4,A
0021F4 C004              PUSH    AR4
0021F6 C005              PUSH    AR5
0021F8 C006              PUSH    AR6
0021FA C007              PUSH    AR7
0021FC A3                INC     DPTR
0021FD E0                MOVX    A,@DPTR
0021FE FF                MOV     R7,A
0021FF E4                CLR     A
002200 FC                MOV     R4,A
002201 FD                MOV     R5,A
002202 FE                MOV     R6,A
002203 7818              MOV     R0,#018H
002205 12031F            LCALL   ?C?LSHL
002208 D003              POP     AR3
00220A D002              POP     AR2
00220C D001              POP     AR1
00220E D000              POP     AR0
002210 EF                MOV     A,R7
002211 4B                ORL     A,R3
002212 FF                MOV     R7,A
002213 EE                MOV     A,R6
002214 4A                ORL     A,R2
002215 FE                MOV     R6,A
002216 ED                MOV     A,R5
002217 49                ORL     A,R1
002218 FD                MOV     R5,A
002219 EC                MOV     A,R4
00221A 48                ORL     A,R0
00221B FC                MOV     R4,A
00221C 904D14            MOV     DPTR,#YC_UtilTimer+039H
00221F 120332            LCALL   ?C?LSTXDATA
   88: 	for(i = 0; i < YC_UTIL_TIMER_NUM; ++i){
002222 E4                CLR     A
002223 F51F              MOV     i,A
002225         ?C0019?YC_SYS:
   89: 		if((YC_UtilTimer.timer_flages >> i) & 1){
002225 AF1F              MOV     R7,i
002227 904CDB            MOV     DPTR,#YC_UtilTimer
00222A E0                MOVX    A,@DPTR
00222B FE                MOV     R6,A
00222C A807              MOV     R0,AR7
00222E 08                INC     R0
00222F 8002              SJMP    ?C0036?YC_SYS
002231         ?C0035?YC_SYS:
002231 C3                CLR     C
002232 13                RRC     A
002233         ?C0036?YC_SYS:
002233 D8FC              DJNZ    R0,?C0035?YC_SYS
002235 20E002            JB      ACC.0,$ + 5H
002238 6107              AJMP    ?C0021?YC_SYS
   90: 			if(YC_UtilTimer.timer_end[i] < YC_CLK_N){
00223A 908101            MOV     DPTR,#08101H
00223D E0                MOVX    A,@DPTR
00223E FF                MOV     R7,A
00223F E4                CLR     A
002240 FC                MOV     R4,A
002241 FD                MOV     R5,A
002242 FE                MOV     R6,A
002243 7808              MOV     R0,#08H
002245 12031F            LCALL   ?C?LSHL
002248 A804              MOV     R0,AR4
00224A A905              MOV     R1,AR5
00224C AA06              MOV     R2,AR6
00224E AB07              MOV     R3,AR7
002250 908100            MOV     DPTR,#08100H
002253 E0                MOVX    A,@DPTR
002254 FF                MOV     R7,A
002255 E4                CLR     A
002256 EB                MOV     A,R3
002257 4F                ORL     A,R7
002258 FF                MOV     R7,A
002259 EA                MOV     A,R2
00225A FE                MOV     R6,A
00225B E9                MOV     A,R1
00225C FD                MOV     R5,A
00225D E8                MOV     A,R0
00225E FC                MOV     R4,A
00225F C004              PUSH    AR4
002261 C005              PUSH    AR5
002263 C006              PUSH    AR6
002265 C007              PUSH    AR7
002267 908102            MOV     DPTR,#08102H
00226A E0                MOVX    A,@DPTR
00226B FF                MOV     R7,A
00226C E4                CLR     A
00226D FC                MOV     R4,A
00226E FD                MOV     R5,A
00226F FE                MOV     R6,A
002270 7810              MOV     R0,#010H
002272 12031F            LCALL   ?C?LSHL
002275 D003              POP     AR3
002277 D002              POP     AR2
002279 D001              POP     AR1
00227B D000              POP     AR0
00227D EF                MOV     A,R7
00227E 4B                ORL     A,R3
00227F FF                MOV     R7,A
002280 EE                MOV     A,R6
002281 4A                ORL     A,R2
002282 FE                MOV     R6,A
002283 ED                MOV     A,R5
002284 49                ORL     A,R1
002285 FD                MOV     R5,A
002286 EC                MOV     A,R4
002287 48                ORL     A,R0
002288 FC                MOV     R4,A
002289 C004              PUSH    AR4
00228B C005              PUSH    AR5
00228D C006              PUSH    AR6
00228F C007              PUSH    AR7
002291 A3                INC     DPTR
002292 E0                MOVX    A,@DPTR
002293 FF                MOV     R7,A
002294 E4                CLR     A
002295 FC                MOV     R4,A
002296 FD                MOV     R5,A
002297 FE                MOV     R6,A
002298 7818              MOV     R0,#018H
00229A 12031F            LCALL   ?C?LSHL
00229D D003              POP     AR3
00229F D002              POP     AR2
0022A1 D001              POP     AR1
0022A3 D000              POP     AR0
0022A5 EF                MOV     A,R7
0022A6 4B                ORL     A,R3
0022A7 FF                MOV     R7,A
0022A8 EE                MOV     A,R6
0022A9 4A                ORL     A,R2
0022AA FE                MOV     R6,A
0022AB ED                MOV     A,R5
0022AC 49                ORL     A,R1
0022AD FD                MOV     R5,A
0022AE EC                MOV     A,R4
0022AF 48                ORL     A,R0
0022B0 FC                MOV     R4,A
0022B1 E51F              MOV     A,i
0022B3 25E0              ADD     A,ACC
0022B5 25E0              ADD     A,ACC
0022B7 24F4              ADD     A,#LOW YC_UtilTimer+019H
0022B9 F582              MOV     DPL,A
0022BB E4                CLR     A
0022BC 344C              ADDC    A,#HIGH YC_UtilTimer+019H
0022BE F583              MOV     DPH,A
0022C0 E0                MOVX    A,@DPTR
0022C1 F8                MOV     R0,A
0022C2 A3                INC     DPTR
0022C3 E0                MOVX    A,@DPTR
0022C4 F9                MOV     R1,A
0022C5 A3                INC     DPTR
0022C6 E0                MOVX    A,@DPTR
0022C7 FA                MOV     R2,A
0022C8 A3                INC     DPTR
0022C9 E0                MOVX    A,@DPTR
0022CA FB                MOV     R3,A
0022CB C3                CLR     C
0022CC 1202FB            LCALL   ?C?ULCMP
0022CF 5036              JNC     ?C0021?YC_SYS
   91: 				YC_UtilTimer.timer_flages &=~( 1<< i); // clear the flag
0022D1 904CDB            MOV     DPTR,#YC_UtilTimer
0022D4 E0                MOVX    A,@DPTR
0022D5 FF                MOV     R7,A
0022D6 AE1F              MOV     R6,i
0022D8 7401              MOV     A,#01H
0022DA A806              MOV     R0,AR6
0022DC 08                INC     R0
0022DD 8002              SJMP    ?C0038?YC_SYS
0022DF         ?C0037?YC_SYS:
0022DF C3                CLR     C
0022E0 33                RLC     A
0022E1         ?C0038?YC_SYS:
0022E1 D8FC              DJNZ    R0,?C0037?YC_SYS
0022E3 F4                CPL     A
0022E4 5F                ANL     A,R7
0022E5 904CDB            MOV     DPTR,#YC_UtilTimer
0022E8 F0                MOVX    @DPTR,A
   92: 				YC_UtilTimer.callback[i](i);			
0022E9 E51F              MOV     A,i
0022EB 75F003            MOV     B,#03H
0022EE A4                MUL     AB
0022EF 24DC              ADD     A,#LOW YC_UtilTimer+01H
0022F1 F582              MOV     DPL,A
0022F3 E4                CLR     A
0022F4 344C              ADDC    A,#HIGH YC_UtilTimer+01H
0022F6 F583              MOV     DPH,A
0022F8 E0                MOVX    A,@DPTR
0022F9 A3                INC     DPTR
0022FA E0                MOVX    A,@DPTR
0022FB FA                MOV     R2,A
0022FC A3                INC     DPTR
0022FD E0                MOVX    A,@DPTR
0022FE F582              MOV     DPL,A
002300 8A83              MOV     DPH,R2
002302 AF1F              MOV     R7,i
002304 1203C6            LCALL   ?C?ICALL2
   93: 			}
   94: 		}
   95: 	}
002307         ?C0021?YC_SYS:
002307 051F              INC     i
002309 E51F              MOV     A,i
00230B C3                CLR     C
00230C 9408              SUBB    A,#08H
00230E 5002              JNC     $ + 4H
002310 4125              AJMP    ?C0019?YC_SYS
   96: 	return;
   97: }
002312 22                RET     
----- FUNCTION YC_UtilTimerProcess (END) -------


----- FUNCTION SPIFlashReadSR (BEGIN) -----
 FILE: 'spiflash.c'
   21: u8_t SPIFlashReadSR(void)
   22: {
   23: 	u8_t status;
   24: 	status = 0xff;
002313 904E55            MOV     DPTR,#status
002316 74FF              MOV     A,#0FFH
002318 F0                MOVX    @DPTR,A
   25: 	REG_SPID_RXLEN = ESWAP(1);
002319 90808E            MOV     DPTR,#0808EH
00231C 7401              MOV     A,#01H
00231E F0                MOVX    @DPTR,A
00231F A3                INC     DPTR
002320 E4                CLR     A
002321 F0                MOVX    @DPTR,A
   26: 	REG_SPID_TXLEN = ESWAP(1);
002322 908088            MOV     DPTR,#08088H
002325 04                INC     A
002326 F0                MOVX    @DPTR,A
002327 A3                INC     DPTR
002328 E4                CLR     A
002329 F0                MOVX    @DPTR,A
   27: 	*SF_TX_BUF = SF_READ_STATUS_REG;
00232A 9001BC            MOV     DPTR,#01BCH
00232D 7405              MOV     A,#05H
00232F F0                MOVX    @DPTR,A
   28: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
002330 90808A            MOV     DPTR,#0808AH
002333 74BC              MOV     A,#0BCH
002335 F0                MOVX    @DPTR,A
002336 A3                INC     DPTR
002337 7401              MOV     A,#01H
002339 F0                MOVX    @DPTR,A
   29: 	REG_SPID_RXADDR = ESWAP((u16_t)(&status));
00233A 7D55              MOV     R5,#LOW status
00233C ED                MOV     A,R5
00233D FA                MOV     R2,A
00233E 744E              MOV     A,#HIGH status
002340 FF                MOV     R7,A
002341 EA                MOV     A,R2
002342 FE                MOV     R6,A
002343 EF                MOV     A,R7
002344 A3                INC     DPTR
002345 EE                MOV     A,R6
002346 F0                MOVX    @DPTR,A
002347 A3                INC     DPTR
002348 EF                MOV     A,R7
002349 F0                MOVX    @DPTR,A
   30: 	REG_MISC_CTRL = SPID_START;
00234A 908006            MOV     DPTR,#08006H
00234D 7402              MOV     A,#02H
00234F F0                MOVX    @DPTR,A
002350         ?C0001?SPIFLASH:
   31: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
002350 90812C            MOV     DPTR,#0812CH
002353 E0                MOVX    A,@DPTR
002354 30E3F9            JNB     ACC.3,?C0001?SPIFLASH
002357         ?C0002?SPIFLASH:
   32: 	//YC_UARTSendData(&status, 1);
   33: 	return status;
002357 904E55            MOV     DPTR,#status
00235A E0                MOVX    A,@DPTR
00235B FF                MOV     R7,A
   34: }
00235C 22                RET     
----- FUNCTION SPIFlashReadSR (END) -------


----- FUNCTION ?L?COM0001 (BEGIN) -----
00235D 120332            LCALL   ?C?LSTXDATA
002360 91A6              ACALL   SPIFlashWriteEnable
----- FUNCTION SPIFlashWaitBusy (BEGIN) -----
 FILE: 'spiflash.c'
   44: void SPIFlashWaitBusy(void)
   45: {
   46: 	while((SPIFlashReadSR()&0x01) == 0x01) {	//wait for BUSY
002362         ?C0007?SPIFLASH:
   47: 		YC_Delay1ms(1);
002362 7113              ACALL   SPIFlashReadSR
002364 EF                MOV     A,R7
002365 30E006            JNB     ACC.0,?C0009?SPIFLASH
   48: 	}
002368 7F01              MOV     R7,#01H
00236A 91D2              ACALL   _YC_Delay1ms
   49: }
00236C 80F4              SJMP    ?C0007?SPIFLASH
   50: void SPIFlashEraseSector(u32_t addr)
00236E         ?C0009?SPIFLASH:
00236E 22                RET     
----- FUNCTION SPIFlashWaitBusy (END) -------


----- FUNCTION _SPIFlashEraseSector (BEGIN) -----
 FILE: 'spiflash.c'
   50: void SPIFlashEraseSector(u32_t addr)
   51: {
00236F 904E2C            MOV     DPTR,#addr
002372 715D              ACALL   ?L?COM0001
   52: 	SPIFlashWriteEnable();
   53: 	SPIFlashWaitBusy();
   54: 	*(SF_TX_BUF) = SF_SECTOR_ERASE;
002374 9001BC            MOV     DPTR,#01BCH
002377 7420              MOV     A,#020H
002379 F0                MOVX    @DPTR,A
   55: 	*(SF_TX_BUF+1) = (addr>>16);
00237A 904E2C            MOV     DPTR,#addr
00237D E0                MOVX    A,@DPTR
00237E FC                MOV     R4,A
00237F A3                INC     DPTR
002380 E0                MOVX    A,@DPTR
002381 FD                MOV     R5,A
002382 A3                INC     DPTR
002383 E0                MOVX    A,@DPTR
002384 FE                MOV     R6,A
002385 A3                INC     DPTR
002386 E0                MOVX    A,@DPTR
002387 FF                MOV     R7,A
002388 7810              MOV     R0,#010H
00238A 12030C            LCALL   ?C?ULSHR
00238D 9001BD            MOV     DPTR,#01BDH
002390 EF                MOV     A,R7
002391 F0                MOVX    @DPTR,A
   56: 	*(SF_TX_BUF+2) = (addr>>8);
002392 904E2C            MOV     DPTR,#addr
002395 E0                MOVX    A,@DPTR
002396 FC                MOV     R4,A
002397 A3                INC     DPTR
002398 E0                MOVX    A,@DPTR
002399 FD                MOV     R5,A
00239A A3                INC     DPTR
00239B E0                MOVX    A,@DPTR
00239C FE                MOV     R6,A
00239D A3                INC     DPTR
00239E E0                MOVX    A,@DPTR
00239F FF                MOV     R7,A
0023A0 7808              MOV     R0,#08H
0023A2 12030C            LCALL   ?C?ULSHR
0023A5 9001BE            MOV     DPTR,#01BEH
0023A8 EF                MOV     A,R7
0023A9 F0                MOVX    @DPTR,A
   57: 	*(SF_TX_BUF+3) = (addr&0xff);
0023AA 904E2C            MOV     DPTR,#addr
0023AD E0                MOVX    A,@DPTR
0023AE FC                MOV     R4,A
0023AF A3                INC     DPTR
0023B0 E0                MOVX    A,@DPTR
0023B1 FD                MOV     R5,A
0023B2 A3                INC     DPTR
0023B3 E0                MOVX    A,@DPTR
0023B4 FE                MOV     R6,A
0023B5 A3                INC     DPTR
0023B6 E0                MOVX    A,@DPTR
0023B7 FF                MOV     R7,A
0023B8 E4                CLR     A
0023B9 9001BF            MOV     DPTR,#01BFH
0023BC EF                MOV     A,R7
0023BD F0                MOVX    @DPTR,A
   58: 	REG_SPID_TXLEN = ESWAP(4);
0023BE 908088            MOV     DPTR,#08088H
0023C1 7404              MOV     A,#04H
0023C3 F0                MOVX    @DPTR,A
0023C4 A3                INC     DPTR
0023C5 E4                CLR     A
0023C6 F0                MOVX    @DPTR,A
   59: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
0023C7 A3                INC     DPTR
0023C8 74BC              MOV     A,#0BCH
0023CA F0                MOVX    @DPTR,A
0023CB A3                INC     DPTR
0023CC 7401              MOV     A,#01H
0023CE F0                MOVX    @DPTR,A
   60: 	REG_SPID_RXLEN = ESWAP(0);
0023CF 90808E            MOV     DPTR,#0808EH
0023D2 E4                CLR     A
0023D3 F0                MOVX    @DPTR,A
0023D4 A3                INC     DPTR
0023D5 F0                MOVX    @DPTR,A
   61: 	REG_MISC_CTRL = SPID_START;
0023D6 908006            MOV     DPTR,#08006H
0023D9 7402              MOV     A,#02H
0023DB F0                MOVX    @DPTR,A
0023DC         ?C0010?SPIFLASH:
   62: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
0023DC 90812C            MOV     DPTR,#0812CH
0023DF E0                MOVX    A,@DPTR
0023E0 30E3F9            JNB     ACC.3,?C0010?SPIFLASH
0023E3         ?C0011?SPIFLASH:
   63: 	SPIFlashWaitBusy();
0023E3 6162              AJMP    SPIFlashWaitBusy
   64: }
----- FUNCTION _SPIFlashEraseSector (END) -------


----- FUNCTION _SPIFlashWrite (BEGIN) -----
 FILE: 'spiflash.c'
   65: void SPIFlashWrite(u8_t *buf, u32_t addr, u8_t len)
   66: {
0023E5 904DD9            MOV     DPTR,#buf
0023E8 EB                MOV     A,R3
0023E9 F0                MOVX    @DPTR,A
0023EA A3                INC     DPTR
0023EB EA                MOV     A,R2
0023EC F0                MOVX    @DPTR,A
0023ED A3                INC     DPTR
0023EE E9                MOV     A,R1
0023EF F0                MOVX    @DPTR,A
0023F0 A3                INC     DPTR
0023F1 715D              ACALL   ?L?COM0001
   67: 	u8_t i;
   68: 	SPIFlashWriteEnable();
   69: 	SPIFlashWaitBusy();
   70: 	for(i=0;i<len;i++) {
;---- Variable 'i' assigned to Register 'R7' ----
0023F3 E4                CLR     A
0023F4 FF                MOV     R7,A
0023F5         ?C0013?SPIFLASH:
0023F5 904DE0            MOV     DPTR,#len
0023F8 E0                MOVX    A,@DPTR
0023F9 FE                MOV     R6,A
0023FA EF                MOV     A,R7
0023FB C3                CLR     C
0023FC 9E                SUBB    A,R6
0023FD 5023              JNC     ?C0014?SPIFLASH
   71: 		*(SF_TX_BUF+4+i) = buf[i];
0023FF 904DD9            MOV     DPTR,#buf
002402 E0                MOVX    A,@DPTR
002403 FB                MOV     R3,A
002404 A3                INC     DPTR
002405 E0                MOVX    A,@DPTR
002406 FA                MOV     R2,A
002407 A3                INC     DPTR
002408 E0                MOVX    A,@DPTR
002409 F9                MOV     R1,A
00240A 8F82              MOV     DPL,R7
00240C 758300            MOV     DPH,#00H
00240F 120112            LCALL   ?C?CLDOPTR
002412 FE                MOV     R6,A
002413 74C0              MOV     A,#0C0H
002415 2F                ADD     A,R7
002416 F582              MOV     DPL,A
002418 E4                CLR     A
002419 3401              ADDC    A,#01H
00241B F583              MOV     DPH,A
00241D EE                MOV     A,R6
00241E F0                MOVX    @DPTR,A
   72: 	}
00241F 0F                INC     R7
002420 80D3              SJMP    ?C0013?SPIFLASH
002422         ?C0014?SPIFLASH:
   73: 	*(SF_TX_BUF) = SF_PAGE_PROGRAM;
002422 9001BC            MOV     DPTR,#01BCH
002425 7402              MOV     A,#02H
002427 F0                MOVX    @DPTR,A
   74: 	*(SF_TX_BUF+1) = (addr>>16);
002428 904DDC            MOV     DPTR,#addr
00242B E0                MOVX    A,@DPTR
00242C FC                MOV     R4,A
00242D A3                INC     DPTR
00242E E0                MOVX    A,@DPTR
00242F FD                MOV     R5,A
002430 A3                INC     DPTR
002431 E0                MOVX    A,@DPTR
002432 FE                MOV     R6,A
002433 A3                INC     DPTR
002434 E0                MOVX    A,@DPTR
002435 FF                MOV     R7,A
002436 7810              MOV     R0,#010H
002438 12030C            LCALL   ?C?ULSHR
00243B 9001BD            MOV     DPTR,#01BDH
00243E EF                MOV     A,R7
00243F F0                MOVX    @DPTR,A
   75: 	*(SF_TX_BUF+2) = (addr>>8);
002440 904DDC            MOV     DPTR,#addr
002443 E0                MOVX    A,@DPTR
002444 FC                MOV     R4,A
002445 A3                INC     DPTR
002446 E0                MOVX    A,@DPTR
002447 FD                MOV     R5,A
002448 A3                INC     DPTR
002449 E0                MOVX    A,@DPTR
00244A FE                MOV     R6,A
00244B A3                INC     DPTR
00244C E0                MOVX    A,@DPTR
00244D FF                MOV     R7,A
00244E 7808              MOV     R0,#08H
002450 12030C            LCALL   ?C?ULSHR
002453 9001BE            MOV     DPTR,#01BEH
002456 EF                MOV     A,R7
002457 F0                MOVX    @DPTR,A
   76: 	*(SF_TX_BUF+3) = (addr&0xff);
002458 904DDC            MOV     DPTR,#addr
00245B E0                MOVX    A,@DPTR
00245C FC                MOV     R4,A
00245D A3                INC     DPTR
00245E E0                MOVX    A,@DPTR
00245F FD                MOV     R5,A
002460 A3                INC     DPTR
002461 E0                MOVX    A,@DPTR
002462 FE                MOV     R6,A
002463 A3                INC     DPTR
002464 E0                MOVX    A,@DPTR
002465 FF                MOV     R7,A
002466 E4                CLR     A
002467 9001BF            MOV     DPTR,#01BFH
00246A EF                MOV     A,R7
00246B F0                MOVX    @DPTR,A
   77: 	REG_SPID_TXLEN = ESWAP(len+4);
00246C 904DE0            MOV     DPTR,#len
00246F E0                MOVX    A,@DPTR
002470 2404              ADD     A,#04H
002472 FD                MOV     R5,A
002473 E4                CLR     A
002474 33                RLC     A
002475 FC                MOV     R4,A
002476 ED                MOV     A,R5
002477 FA                MOV     R2,A
002478 EC                MOV     A,R4
002479 FF                MOV     R7,A
00247A 33                RLC     A
00247B 95E0              SUBB    A,ACC
00247D EA                MOV     A,R2
00247E FE                MOV     R6,A
00247F EF                MOV     A,R7
002480 908088            MOV     DPTR,#08088H
002483 EE                MOV     A,R6
002484 F0                MOVX    @DPTR,A
002485 A3                INC     DPTR
002486 EF                MOV     A,R7
002487 F0                MOVX    @DPTR,A
   78: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
002488 A3                INC     DPTR
002489 74BC              MOV     A,#0BCH
00248B F0                MOVX    @DPTR,A
00248C A3                INC     DPTR
00248D 7401              MOV     A,#01H
00248F F0                MOVX    @DPTR,A
   79: 	REG_SPID_RXLEN = ESWAP(0);
002490 90808E            MOV     DPTR,#0808EH
002493 E4                CLR     A
002494 F0                MOVX    @DPTR,A
002495 A3                INC     DPTR
002496 F0                MOVX    @DPTR,A
   80: 	REG_MISC_CTRL = SPID_START;
002497 908006            MOV     DPTR,#08006H
00249A 7402              MOV     A,#02H
00249C F0                MOVX    @DPTR,A
00249D         ?C0016?SPIFLASH:
   81: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
00249D 90812C            MOV     DPTR,#0812CH
0024A0 E0                MOVX    A,@DPTR
0024A1 30E3F9            JNB     ACC.3,?C0016?SPIFLASH
0024A4         ?C0017?SPIFLASH:
   82: 	SPIFlashWaitBusy();
0024A4 6162              AJMP    SPIFlashWaitBusy
   83: }
----- FUNCTION _SPIFlashWrite (END) -------


----- FUNCTION SPIFlashWriteEnable (BEGIN) -----
 FILE: 'spiflash.c'
   35: void SPIFlashWriteEnable(void)
   36: {
   37: 	REG_SPID_RXLEN = ESWAP(0);
   38: 	REG_SPID_TXLEN = ESWAP(1);
0024A6 90808E            MOV     DPTR,#0808EH
0024A9 E4                CLR     A
0024AA F0                MOVX    @DPTR,A
0024AB A3                INC     DPTR
0024AC F0                MOVX    @DPTR,A
   39: 	*SF_TX_BUF = SF_WRITE_ENABLE;
0024AD 908088            MOV     DPTR,#08088H
0024B0 04                INC     A
0024B1 F0                MOVX    @DPTR,A
0024B2 A3                INC     DPTR
0024B3 E4                CLR     A
0024B4 F0                MOVX    @DPTR,A
   40: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
0024B5 9001BC            MOV     DPTR,#01BCH
0024B8 7406              MOV     A,#06H
0024BA F0                MOVX    @DPTR,A
   41: 	REG_MISC_CTRL = SPID_START;
0024BB 90808A            MOV     DPTR,#0808AH
0024BE 74BC              MOV     A,#0BCH
0024C0 F0                MOVX    @DPTR,A
0024C1 A3                INC     DPTR
0024C2 7401              MOV     A,#01H
0024C4 F0                MOVX    @DPTR,A
   42: 	while((REG_DMA_STATUS&(1<<3)) == 0);
0024C5 908006            MOV     DPTR,#08006H
0024C8 04                INC     A
0024C9 F0                MOVX    @DPTR,A
0024CA         ?C0004?SPIFLASH:
   43: }
0024CA 90812C            MOV     DPTR,#0812CH
0024CD E0                MOVX    A,@DPTR
0024CE 30E3F9            JNB     ACC.3,?C0004?SPIFLASH
   44: void SPIFlashWaitBusy(void)
0024D1 22                RET     
----- FUNCTION SPIFlashWriteEnable (END) -------


----- FUNCTION _YC_Delay1ms (BEGIN) -----
 FILE: 'YC_Utilities.c'
   51: void YC_Delay1ms(u8_t Time)
   52: {
;---- Variable 'Time' assigned to Register 'R7' ----
   53: 	u16_t j; 
   54: 	for(;Time>0;Time--)
0024D2         ?C0020?YC_UTILITIES:
0024D2 EF                MOV     A,R7
0024D3 D3                SETB    C
0024D4 9400              SUBB    A,#00H
0024D6 4011              JC      ?C0026?YC_UTILITIES
   55: 	{
   56: 		for(j=0;j<1160;j++);
;---- Variable 'j' assigned to Register 'R4/R5' ----
0024D8 E4                CLR     A
0024D9 FD                MOV     R5,A
0024DA FC                MOV     R4,A
0024DB         ?C0023?YC_UTILITIES:
0024DB 0D                INC     R5
0024DC BD0001            CJNE    R5,#00H,?C0053?YC_UTILITIES
0024DF 0C                INC     R4
0024E0         ?C0053?YC_UTILITIES:
0024E0 BC04F8            CJNE    R4,#04H,?C0023?YC_UTILITIES
0024E3 BD88F5            CJNE    R5,#088H,?C0023?YC_UTILITIES
   57: 	}
0024E6         ?C0022?YC_UTILITIES:
0024E6 1F                DEC     R7
0024E7 80E9              SJMP    ?C0020?YC_UTILITIES
   58: }
0024E9         ?C0026?YC_UTILITIES:
0024E9 22                RET     
----- FUNCTION _YC_Delay1ms (END) -------


----- FUNCTION _SPIFlashRead (BEGIN) -----
 FILE: 'spiflash.c'
   84: void SPIFlashRead(u8_t *buf, u32_t addr, u8_t len)
   85: {
0024EA 904DE4            MOV     DPTR,#addr
0024ED 120332            LCALL   ?C?LSTXDATA
;---- Variable 'buf' assigned to Register 'R1/R2/R3' ----
   86: 	REG_SPID_RXLEN = ESWAP(len);
   87: 	REG_SPID_TXLEN = ESWAP(4);
0024F0 904DE8            MOV     DPTR,#len
0024F3 E0                MOVX    A,@DPTR
0024F4 FD                MOV     R5,A
0024F5 FE                MOV     R6,A
0024F6 E4                CLR     A
0024F7 90808E            MOV     DPTR,#0808EH
0024FA EE                MOV     A,R6
0024FB F0                MOVX    @DPTR,A
0024FC A3                INC     DPTR
0024FD E4                CLR     A
0024FE F0                MOVX    @DPTR,A
   88: 	*SF_TX_BUF = SF_READ_DATA;
0024FF 908088            MOV     DPTR,#08088H
002502 7404              MOV     A,#04H
002504 F0                MOVX    @DPTR,A
002505 A3                INC     DPTR
002506 E4                CLR     A
002507 F0                MOVX    @DPTR,A
   89: 	*(SF_TX_BUF+1) = (addr>>16);
002508 9001BC            MOV     DPTR,#01BCH
00250B 7403              MOV     A,#03H
00250D F0                MOVX    @DPTR,A
   90: 	*(SF_TX_BUF+2) = (addr>>8);
00250E 904DE4            MOV     DPTR,#addr
002511 E0                MOVX    A,@DPTR
002512 FC                MOV     R4,A
002513 A3                INC     DPTR
002514 E0                MOVX    A,@DPTR
002515 FD                MOV     R5,A
002516 A3                INC     DPTR
002517 E0                MOVX    A,@DPTR
002518 FE                MOV     R6,A
002519 A3                INC     DPTR
00251A E0                MOVX    A,@DPTR
00251B FF                MOV     R7,A
00251C 7810              MOV     R0,#010H
00251E 12030C            LCALL   ?C?ULSHR
002521 9001BD            MOV     DPTR,#01BDH
002524 EF                MOV     A,R7
002525 F0                MOVX    @DPTR,A
   91: 	*(SF_TX_BUF+3) = (addr&0xff);
002526 904DE4            MOV     DPTR,#addr
002529 E0                MOVX    A,@DPTR
00252A FC                MOV     R4,A
00252B A3                INC     DPTR
00252C E0                MOVX    A,@DPTR
00252D FD                MOV     R5,A
00252E A3                INC     DPTR
00252F E0                MOVX    A,@DPTR
002530 FE                MOV     R6,A
002531 A3                INC     DPTR
002532 E0                MOVX    A,@DPTR
002533 FF                MOV     R7,A
002534 7808              MOV     R0,#08H
002536 12030C            LCALL   ?C?ULSHR
002539 9001BE            MOV     DPTR,#01BEH
00253C EF                MOV     A,R7
00253D F0                MOVX    @DPTR,A
   92: 	REG_SPID_TXADDR = ESWAP((u16_t)SF_TX_BUF);
00253E 904DE4            MOV     DPTR,#addr
002541 E0                MOVX    A,@DPTR
002542 FC                MOV     R4,A
002543 A3                INC     DPTR
002544 E0                MOVX    A,@DPTR
002545 FD                MOV     R5,A
002546 A3                INC     DPTR
002547 E0                MOVX    A,@DPTR
002548 FE                MOV     R6,A
002549 A3                INC     DPTR
00254A E0                MOVX    A,@DPTR
00254B FF                MOV     R7,A
00254C E4                CLR     A
00254D 9001BF            MOV     DPTR,#01BFH
002550 EF                MOV     A,R7
002551 F0                MOVX    @DPTR,A
   93: 	REG_SPID_RXADDR = ESWAP((u16_t)buf);
002552 90808A            MOV     DPTR,#0808AH
002555 74BC              MOV     A,#0BCH
002557 F0                MOVX    @DPTR,A
002558 A3                INC     DPTR
002559 7401              MOV     A,#01H
00255B F0                MOVX    @DPTR,A
   94: 	REG_SPID_CTRL  |=  (1<<6);
00255C E9                MOV     A,R1
00255D FC                MOV     R4,A
00255E EA                MOV     A,R2
00255F FF                MOV     R7,A
002560 EC                MOV     A,R4
002561 FE                MOV     R6,A
002562 EF                MOV     A,R7
002563 A3                INC     DPTR
002564 EE                MOV     A,R6
002565 F0                MOVX    @DPTR,A
002566 A3                INC     DPTR
002567 EF                MOV     A,R7
002568 F0                MOVX    @DPTR,A
   95: 	REG_MISC_CTRL = SPID_START;
002569 908086            MOV     DPTR,#08086H
00256C E0                MOVX    A,@DPTR
00256D 4440              ORL     A,#040H
00256F F0                MOVX    @DPTR,A
   96: 	//spi_read_flash_wait
002570 908006            MOV     DPTR,#08006H
002573 7402              MOV     A,#02H
002575 F0                MOVX    @DPTR,A
002576         ?C0019?SPIFLASH:
   97: 	while(REG_DMA_STATUS&(1<<7));	//waiting for spid write
002576 90812C            MOV     DPTR,#0812CH
002579 E0                MOVX    A,@DPTR
00257A 20E7F9            JB      ACC.7,?C0019?SPIFLASH
00257D         ?C0020?SPIFLASH:
00257D         ?C0021?SPIFLASH:
   98: 	while((REG_DMA_STATUS&(1<<3)) == 0);		//wait_spid_done
00257D 90812C            MOV     DPTR,#0812CH
002580 E0                MOVX    A,@DPTR
002581 30E3F9            JNB     ACC.3,?C0021?SPIFLASH
   99: 	return;
  100: }
002584 22                RET     
----- FUNCTION _SPIFlashRead (END) -------


----- FUNCTION _cal_crc32_multiple (BEGIN) -----
 FILE: 'Crc32.c'
   80: u32_t cal_crc32_multiple(u32_t crc, u8_t *buffer, u32_t size)
   81: {
002585 904D8D            MOV     DPTR,#crc
002588 120332            LCALL   ?C?LSTXDATA
00258B 904D91            MOV     DPTR,#buffer
00258E EB                MOV     A,R3
00258F F0                MOVX    @DPTR,A
002590 A3                INC     DPTR
002591 EA                MOV     A,R2
002592 F0                MOVX    @DPTR,A
002593 A3                INC     DPTR
002594 E9                MOV     A,R1
002595 F0                MOVX    @DPTR,A
   82:     u32_t i;
   83:     for (i = 0; i < size; ++i)
002596 904D98            MOV     DPTR,#i
002599 12033E            LCALL   ?C?LSTKXDATA
00259C 00                DB      00H
00259D 00                DB      00H
00259E 00                DB      00H
00259F 00                DB      00H
0025A0         ?C0001?CRC32:
0025A0 904D94            MOV     DPTR,#size
0025A3 E0                MOVX    A,@DPTR
0025A4 FC                MOV     R4,A
0025A5 A3                INC     DPTR
0025A6 E0                MOVX    A,@DPTR
0025A7 FD                MOV     R5,A
0025A8 A3                INC     DPTR
0025A9 E0                MOVX    A,@DPTR
0025AA FE                MOV     R6,A
0025AB A3                INC     DPTR
0025AC E0                MOVX    A,@DPTR
0025AD FF                MOV     R7,A
0025AE A3                INC     DPTR
0025AF E0                MOVX    A,@DPTR
0025B0 F8                MOV     R0,A
0025B1 A3                INC     DPTR
0025B2 E0                MOVX    A,@DPTR
0025B3 F9                MOV     R1,A
0025B4 A3                INC     DPTR
0025B5 E0                MOVX    A,@DPTR
0025B6 FA                MOV     R2,A
0025B7 A3                INC     DPTR
0025B8 E0                MOVX    A,@DPTR
0025B9 FB                MOV     R3,A
0025BA C3                CLR     C
0025BB 1202FB            LCALL   ?C?ULCMP
0025BE 4002              JC      $ + 4H
0025C0 C171              AJMP    ?C0002?CRC32
   84:     {
   85:     	SPIFlashRead((u8_t *)&crc_table, CRC32_ADDR + (((crc ^ buffer[i]) & 0xff)*4), sizeof(crc_table));
0025C2 904D98            MOV     DPTR,#i
0025C5 E0                MOVX    A,@DPTR
0025C6 A3                INC     DPTR
0025C7 E0                MOVX    A,@DPTR
0025C8 A3                INC     DPTR
0025C9 E0                MOVX    A,@DPTR
0025CA FE                MOV     R6,A
0025CB A3                INC     DPTR
0025CC E0                MOVX    A,@DPTR
0025CD FF                MOV     R7,A
0025CE 904D91            MOV     DPTR,#buffer
0025D1 E0                MOVX    A,@DPTR
0025D2 FB                MOV     R3,A
0025D3 A3                INC     DPTR
0025D4 E0                MOVX    A,@DPTR
0025D5 FA                MOV     R2,A
0025D6 A3                INC     DPTR
0025D7 E0                MOVX    A,@DPTR
0025D8 F9                MOV     R1,A
0025D9 8F82              MOV     DPL,R7
0025DB 8E83              MOV     DPH,R6
0025DD 120112            LCALL   ?C?CLDOPTR
0025E0 FF                MOV     R7,A
0025E1 E4                CLR     A
0025E2 904D8D            MOV     DPTR,#crc
0025E5 E0                MOVX    A,@DPTR
0025E6 F8                MOV     R0,A
0025E7 A3                INC     DPTR
0025E8 E0                MOVX    A,@DPTR
0025E9 F9                MOV     R1,A
0025EA A3                INC     DPTR
0025EB E0                MOVX    A,@DPTR
0025EC FA                MOV     R2,A
0025ED A3                INC     DPTR
0025EE E0                MOVX    A,@DPTR
0025EF 6F                XRL     A,R7
0025F0 FF                MOV     R7,A
0025F1 EA                MOV     A,R2
0025F2 FE                MOV     R6,A
0025F3 E9                MOV     A,R1
0025F4 FD                MOV     R5,A
0025F5 E8                MOV     A,R0
0025F6 FC                MOV     R4,A
0025F7 EF                MOV     A,R7
0025F8 E4                CLR     A
0025F9 FE                MOV     R6,A
0025FA FD                MOV     R5,A
0025FB FC                MOV     R4,A
0025FC 7B04              MOV     R3,#04H
0025FE FA                MOV     R2,A
0025FF F9                MOV     R1,A
002600 F8                MOV     R0,A
002601 1201DE            LCALL   ?C?LMUL
002604 E4                CLR     A
002605 2F                ADD     A,R7
002606 FF                MOV     R7,A
002607 EE                MOV     A,R6
002608 3480              ADDC    A,#080H
00260A FE                MOV     R6,A
00260B E4                CLR     A
00260C 3D                ADDC    A,R5
00260D FD                MOV     R5,A
00260E E4                CLR     A
00260F 3C                ADDC    A,R4
002610 FC                MOV     R4,A
002611 904DE8            MOV     DPTR,#?_SPIFlashRead?BYTE+07H
002614 7404              MOV     A,#04H
002616 F0                MOVX    @DPTR,A
002617 7B01              MOV     R3,#01H
002619 7A4E              MOV     R2,#HIGH crc_table
00261B 7934              MOV     R1,#LOW crc_table
00261D 91EA              ACALL   _SPIFlashRead
   86:         crc = crc_table ^ (crc >> 8);
00261F 904D8D            MOV     DPTR,#crc
002622 E0                MOVX    A,@DPTR
002623 FC                MOV     R4,A
002624 A3                INC     DPTR
002625 E0                MOVX    A,@DPTR
002626 FD                MOV     R5,A
002627 A3                INC     DPTR
002628 E0                MOVX    A,@DPTR
002629 FE                MOV     R6,A
00262A A3                INC     DPTR
00262B E0                MOVX    A,@DPTR
00262C FF                MOV     R7,A
00262D 7808              MOV     R0,#08H
00262F 12030C            LCALL   ?C?ULSHR
002632 904E34            MOV     DPTR,#crc_table
002635 E0                MOVX    A,@DPTR
002636 F8                MOV     R0,A
002637 A3                INC     DPTR
002638 E0                MOVX    A,@DPTR
002639 F9                MOV     R1,A
00263A A3                INC     DPTR
00263B E0                MOVX    A,@DPTR
00263C FA                MOV     R2,A
00263D A3                INC     DPTR
00263E E0                MOVX    A,@DPTR
00263F 6F                XRL     A,R7
002640 FF                MOV     R7,A
002641 EA                MOV     A,R2
002642 6E                XRL     A,R6
002643 FE                MOV     R6,A
002644 E9                MOV     A,R1
002645 6D                XRL     A,R5
002646 FD                MOV     R5,A
002647 E8                MOV     A,R0
002648 6C                XRL     A,R4
002649 FC                MOV     R4,A
00264A 904D8D            MOV     DPTR,#crc
00264D 120332            LCALL   ?C?LSTXDATA
   87:     }
002650 904D98            MOV     DPTR,#i
002653 E0                MOVX    A,@DPTR
002654 FC                MOV     R4,A
002655 A3                INC     DPTR
002656 E0                MOVX    A,@DPTR
002657 FD                MOV     R5,A
002658 A3                INC     DPTR
002659 E0                MOVX    A,@DPTR
00265A FE                MOV     R6,A
00265B A3                INC     DPTR
00265C E0                MOVX    A,@DPTR
00265D 2401              ADD     A,#01H
00265F FF                MOV     R7,A
002660 E4                CLR     A
002661 3E                ADDC    A,R6
002662 FE                MOV     R6,A
002663 E4                CLR     A
002664 3D                ADDC    A,R5
002665 FD                MOV     R5,A
002666 E4                CLR     A
002667 3C                ADDC    A,R4
002668 FC                MOV     R4,A
002669 904D98            MOV     DPTR,#i
00266C 120332            LCALL   ?C?LSTXDATA
00266F A1A0              AJMP    ?C0001?CRC32
002671         ?C0002?CRC32:
   88: 
   89:     return crc;
002671 904D8D            MOV     DPTR,#crc
002674 E0                MOVX    A,@DPTR
002675 FC                MOV     R4,A
002676 A3                INC     DPTR
002677 E0                MOVX    A,@DPTR
002678 FD                MOV     R5,A
002679 A3                INC     DPTR
00267A E0                MOVX    A,@DPTR
00267B FE                MOV     R6,A
00267C A3                INC     DPTR
00267D E0                MOVX    A,@DPTR
00267E FF                MOV     R7,A
   90: }
00267F 22                RET     
----- FUNCTION _cal_crc32_multiple (END) -------


----- FUNCTION _BT_CmdFifoIn (BEGIN) -----
 FILE: 'BT_IPC.c'
    7: bool BT_CmdFifoIn(BT_CMDFIFO_t *pFIFO)
    8: {
002680 904E01            MOV     DPTR,#pFIFO
002683 EB                MOV     A,R3
002684 F0                MOVX    @DPTR,A
002685 A3                INC     DPTR
002686 EA                MOV     A,R2
002687 F0                MOVX    @DPTR,A
002688 A3                INC     DPTR
002689 E9                MOV     A,R1
00268A F0                MOVX    @DPTR,A
    9: 	u16_t new_wprt,new_cmd_len,i;
   10: 	if( pFIFO->len ==0 )
00268B 1200F9            LCALL   ?C?CLDPTR
00268E 7002              JNZ     ?C0001?BT_IPC
   11: 		return false;
002690 C3                CLR     C
002691 22                RET     
002692         ?C0001?BT_IPC:
   12: 	new_cmd_len = BT_GetCmdFifoDepth()+pFIFO->len+2;
002692 F1A0              ACALL   BT_GetCmdFifoDepth
002694 904E01            MOV     DPTR,#pFIFO
002697 E0                MOVX    A,@DPTR
002698 FB                MOV     R3,A
002699 A3                INC     DPTR
00269A E0                MOVX    A,@DPTR
00269B FA                MOV     R2,A
00269C A3                INC     DPTR
00269D E0                MOVX    A,@DPTR
00269E F9                MOV     R1,A
00269F 1200F9            LCALL   ?C?CLDPTR
0026A2 FD                MOV     R5,A
0026A3 2F                ADD     A,R7
0026A4 FF                MOV     R7,A
0026A5 E4                CLR     A
0026A6 33                RLC     A
0026A7 CF                XCH     A,R7
0026A8 2402              ADD     A,#02H
0026AA CF                XCH     A,R7
0026AB 3400              ADDC    A,#00H
0026AD FE                MOV     R6,A
;---- Variable 'new_cmd_len' assigned to Register 'R6/R7' ----
   13: 	if(new_cmd_len<=BT_CMD_BUF_LEN)
0026AE D3                SETB    C
0026AF EF                MOV     A,R7
0026B0 9480              SUBB    A,#080H
0026B2 EE                MOV     A,R6
0026B3 9400              SUBB    A,#00H
0026B5 4002              JC      $ + 4H
0026B7 E19E              AJMP    ?C0003?BT_IPC
   14: 	{
   15: 		new_wprt = ESWAP(BT_CmdWptr);
0026B9 904A03            MOV     DPTR,#BT_CmdWptr+01H
0026BC E0                MOVX    A,@DPTR
0026BD FA                MOV     R2,A
0026BE 904A02            MOV     DPTR,#BT_CmdWptr
0026C1 E0                MOVX    A,@DPTR
0026C2 FF                MOV     R7,A
0026C3 EA                MOV     A,R2
0026C4 FE                MOV     R6,A
0026C5 EF                MOV     A,R7
0026C6 904E04            MOV     DPTR,#new_wprt
0026C9 EE                MOV     A,R6
0026CA F0                MOVX    @DPTR,A
0026CB A3                INC     DPTR
0026CC EF                MOV     A,R7
0026CD F0                MOVX    @DPTR,A
   16: 		HWRITE(new_wprt++,CS_PREFIX_CMD);
0026CE 904E04            MOV     DPTR,#new_wprt
0026D1 E4                CLR     A
0026D2 75F001            MOV     B,#01H
0026D5 1201C8            LCALL   ?C?ILDIX
0026D8 85F082            MOV     DPL,B
0026DB F583              MOV     DPH,A
0026DD 74C5              MOV     A,#0C5H
0026DF F0                MOVX    @DPTR,A
   17: 		if(new_wprt == (mem_cmd_buf_end + 1))
0026E0 904E04            MOV     DPTR,#new_wprt
0026E3 E0                MOVX    A,@DPTR
0026E4 B44F0E            CJNE    A,#04FH,?C0004?BT_IPC
0026E7 A3                INC     DPTR
0026E8 E0                MOVX    A,@DPTR
0026E9 B48009            CJNE    A,#080H,?C0004?BT_IPC
   18: 		{
   19: 			new_wprt = mem_cmd_buf;
0026EC 904E04            MOV     DPTR,#new_wprt
0026EF 744F              MOV     A,#04FH
0026F1 F0                MOVX    @DPTR,A
0026F2 A3                INC     DPTR
0026F3 E4                CLR     A
0026F4 F0                MOVX    @DPTR,A
   20: 		}
0026F5         ?C0004?BT_IPC:
   21: 		HWRITE(new_wprt++,pFIFO->len);
0026F5 904E04            MOV     DPTR,#new_wprt
0026F8 E4                CLR     A
0026F9 75F001            MOV     B,#01H
0026FC 1201C8            LCALL   ?C?ILDIX
0026FF 85F082            MOV     DPL,B
002702 F583              MOV     DPH,A
002704 ED                MOV     A,R5
002705 F0                MOVX    @DPTR,A
   22: 		if(new_wprt == (mem_cmd_buf_end + 1))
002706 904E04            MOV     DPTR,#new_wprt
002709 E0                MOVX    A,@DPTR
00270A B44F0E            CJNE    A,#04FH,?C0005?BT_IPC
00270D A3                INC     DPTR
00270E E0                MOVX    A,@DPTR
00270F B48009            CJNE    A,#080H,?C0005?BT_IPC
   23: 		{
   24: 			new_wprt = mem_cmd_buf;
002712 904E04            MOV     DPTR,#new_wprt
002715 744F              MOV     A,#04FH
002717 F0                MOVX    @DPTR,A
002718 A3                INC     DPTR
002719 E4                CLR     A
00271A F0                MOVX    @DPTR,A
   25: 		}
00271B         ?C0005?BT_IPC:
   26: 		for(i=0;i<pFIFO->len;i++)
00271B E4                CLR     A
00271C 904E06            MOV     DPTR,#i
00271F F0                MOVX    @DPTR,A
002720 A3                INC     DPTR
002721 F0                MOVX    @DPTR,A
002722         ?C0006?BT_IPC:
002722 904E01            MOV     DPTR,#pFIFO
002725 E0                MOVX    A,@DPTR
002726 FB                MOV     R3,A
002727 A3                INC     DPTR
002728 E0                MOVX    A,@DPTR
002729 FA                MOV     R2,A
00272A A3                INC     DPTR
00272B E0                MOVX    A,@DPTR
00272C F9                MOV     R1,A
00272D 1200F9            LCALL   ?C?CLDPTR
002730 FF                MOV     R7,A
002731 904E06            MOV     DPTR,#i
002734 E0                MOVX    A,@DPTR
002735 FC                MOV     R4,A
002736 A3                INC     DPTR
002737 E0                MOVX    A,@DPTR
002738 FD                MOV     R5,A
002739 C3                CLR     C
00273A 9F                SUBB    A,R7
00273B EC                MOV     A,R4
00273C 9400              SUBB    A,#00H
00273E 5047              JNC     ?C0007?BT_IPC
   27: 		{
   28: 			HWRITE(new_wprt++,pFIFO->DATA[i]);
002740 E9                MOV     A,R1
002741 2401              ADD     A,#01H
002743 F9                MOV     R1,A
002744 E4                CLR     A
002745 3A                ADDC    A,R2
002746 FA                MOV     R2,A
002747 E9                MOV     A,R1
002748 2D                ADD     A,R5
002749 F9                MOV     R1,A
00274A EA                MOV     A,R2
00274B 3C                ADDC    A,R4
00274C FA                MOV     R2,A
00274D 1200F9            LCALL   ?C?CLDPTR
002750 FF                MOV     R7,A
002751 904E04            MOV     DPTR,#new_wprt
002754 E4                CLR     A
002755 75F001            MOV     B,#01H
002758 1201C8            LCALL   ?C?ILDIX
00275B 85F082            MOV     DPL,B
00275E F583              MOV     DPH,A
002760 EF                MOV     A,R7
002761 F0                MOVX    @DPTR,A
   29: 			if(new_wprt == (mem_cmd_buf_end + 1))
002762 904E04            MOV     DPTR,#new_wprt
002765 E0                MOVX    A,@DPTR
002766 B44F0E            CJNE    A,#04FH,?C0008?BT_IPC
002769 A3                INC     DPTR
00276A E0                MOVX    A,@DPTR
00276B B48009            CJNE    A,#080H,?C0008?BT_IPC
   30: 			{
   31: 				new_wprt = mem_cmd_buf;
00276E 904E04            MOV     DPTR,#new_wprt
002771 744F              MOV     A,#04FH
002773 F0                MOVX    @DPTR,A
002774 A3                INC     DPTR
002775 E4                CLR     A
002776 F0                MOVX    @DPTR,A
   32: 			}
   33: 		}
002777         ?C0008?BT_IPC:
002777 904E07            MOV     DPTR,#i+01H
00277A E0                MOVX    A,@DPTR
00277B 04                INC     A
00277C F0                MOVX    @DPTR,A
00277D 7006              JNZ     ?C0030?BT_IPC
00277F 904E06            MOV     DPTR,#i
002782 E0                MOVX    A,@DPTR
002783 04                INC     A
002784 F0                MOVX    @DPTR,A
002785         ?C0030?BT_IPC:
002785 809B              SJMP    ?C0006?BT_IPC
002787         ?C0007?BT_IPC:
   34: 		BT_CmdWptr = ESWAP(new_wprt);
002787 904E04            MOV     DPTR,#new_wprt
00278A E0                MOVX    A,@DPTR
00278B FC                MOV     R4,A
00278C A3                INC     DPTR
00278D E0                MOVX    A,@DPTR
00278E FA                MOV     R2,A
00278F EC                MOV     A,R4
002790 FF                MOV     R7,A
002791 EA                MOV     A,R2
002792 FE                MOV     R6,A
002793 EF                MOV     A,R7
002794 904A02            MOV     DPTR,#BT_CmdWptr
002797 EE                MOV     A,R6
002798 F0                MOVX    @DPTR,A
002799 A3                INC     DPTR
00279A EF                MOV     A,R7
00279B F0                MOVX    @DPTR,A
   35: 		return true;
00279C D3                SETB    C
00279D 22                RET     
   36: 	}
00279E         ?C0003?BT_IPC:
   37: 	else
   38: 	{
   39: 		return false;
00279E C3                CLR     C
   40: 	}
   41: }
00279F 22                RET     
----- FUNCTION _BT_CmdFifoIn (END) -------


----- FUNCTION BT_GetCmdFifoDepth (BEGIN) -----
 FILE: 'BT_IPC.c'
   78: u8_t BT_GetCmdFifoDepth(void)
   79: {
   80: 	u16_t wptr,rptr,len;
   81: 	wptr = ESWAP(BT_CmdWptr);
0027A0 904A03            MOV     DPTR,#BT_CmdWptr+01H
0027A3 E0                MOVX    A,@DPTR
0027A4 FC                MOV     R4,A
0027A5 904A02            MOV     DPTR,#BT_CmdWptr
0027A8 E0                MOVX    A,@DPTR
0027A9 FF                MOV     R7,A
0027AA EC                MOV     A,R4
0027AB EF                MOV     A,R7
;---- Variable 'wptr' assigned to Register 'R4/R5' ----
0027AC FD                MOV     R5,A
   82: 	rptr = ESWAP(BT_CmdRptr);
0027AD 904A01            MOV     DPTR,#BT_CmdRptr+01H
0027B0 E0                MOVX    A,@DPTR
0027B1 FA                MOV     R2,A
0027B2 904A00            MOV     DPTR,#BT_CmdRptr
0027B5 E0                MOVX    A,@DPTR
0027B6 FF                MOV     R7,A
0027B7 EA                MOV     A,R2
0027B8 FE                MOV     R6,A
0027B9 EF                MOV     A,R7
;---- Variable 'rptr' assigned to Register 'R6/R7' ----
   83: 	len = (wptr + BT_CMD_BUF_LEN - rptr)&(BT_CMD_BUF_LEN-1);
0027BA ED                MOV     A,R5
0027BB 2480              ADD     A,#080H
0027BD FD                MOV     R5,A
0027BE E4                CLR     A
0027BF 3C                ADDC    A,R4
0027C0 FC                MOV     R4,A
0027C1 C3                CLR     C
0027C2 ED                MOV     A,R5
0027C3 9F                SUBB    A,R7
0027C4 FF                MOV     R7,A
0027C5 EC                MOV     A,R4
0027C6 9E                SUBB    A,R6
0027C7 7E00              MOV     R6,#00H
0027C9 EF                MOV     A,R7
0027CA 547F              ANL     A,#07FH
0027CC FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R6/R7' ----
   84: 	return len&0xff;
   85: }
0027CD 22                RET     
----- FUNCTION BT_GetCmdFifoDepth (END) -------


----- FUNCTION BT_CmdFifoEmpty (BEGIN) -----
 FILE: 'BT_IPC.c'
   96: bool BT_CmdFifoEmpty(void)
   97: {
   98: 	if(BT_GetCmdFifoDepth()==0)
   99: 	{
0027CE F1A0              ACALL   BT_GetCmdFifoDepth
0027D0 EF                MOV     A,R7
0027D1 7002              JNZ     ?C0023?BT_IPC
  100: 		return true;
  101: 	}
0027D3 D3                SETB    C
0027D4 22                RET     
  102: 	return false;
0027D5         ?C0023?BT_IPC:
  103: }
0027D5 C3                CLR     C
  104: 
0027D6 22                RET     
----- FUNCTION BT_CmdFifoEmpty (END) -------


----- FUNCTION _BT_EventFifoOut (BEGIN) -----
 FILE: 'BT_IPC.c'
   43: void BT_EventFifoOut(BT_EVENTFIFO_t * event)
   44: {
0027D7 904E22            MOV     DPTR,#event
0027DA EB                MOV     A,R3
0027DB F0                MOVX    @DPTR,A
0027DC A3                INC     DPTR
0027DD EA                MOV     A,R2
0027DE F0                MOVX    @DPTR,A
0027DF A3                INC     DPTR
0027E0 E9                MOV     A,R1
0027E1 F0                MOVX    @DPTR,A
   45: 	u16_t new_rprt,i;
   46: 	u8_t event_prefix;
   47: 	if(BT_GetEvtFifoDepth()>2)
0027E2 1228DC            LCALL   BT_GetEvtFifoDepth
0027E5 EF                MOV     A,R7
0027E6 D3                SETB    C
0027E7 9402              SUBB    A,#02H
0027E9 5003              JNC     $ + 5H
0027EB 0228CD            LJMP    ?C0011?BT_IPC
   48: 	{//event is not empty
   49: 		new_rprt = ESWAP(BT_EventRptr);
0027EE 904A05            MOV     DPTR,#BT_EventRptr+01H
0027F1 E0                MOVX    A,@DPTR
0027F2 FC                MOV     R4,A
0027F3 904A04            MOV     DPTR,#BT_EventRptr
0027F6 E0                MOVX    A,@DPTR
0027F7 FF                MOV     R7,A
0027F8 EC                MOV     A,R4
0027F9 FE                MOV     R6,A
0027FA EF                MOV     A,R7
0027FB 904E25            MOV     DPTR,#new_rprt
0027FE EE                MOV     A,R6
0027FF F0                MOVX    @DPTR,A
002800 A3                INC     DPTR
002801 EF                MOV     A,R7
002802 F0                MOVX    @DPTR,A
   50: 		event_prefix = HREAD(new_rprt++);
002803 904E25            MOV     DPTR,#new_rprt
002806 E4                CLR     A
002807 75F001            MOV     B,#01H
00280A 1201C8            LCALL   ?C?ILDIX
00280D 85F082            MOV     DPL,B
002810 F583              MOV     DPH,A
002812 E0                MOVX    A,@DPTR
002813 FF                MOV     R7,A
;---- Variable 'event_prefix' assigned to Register 'R7' ----
   51: 		if(event_prefix == CS_PREFIX_EVENT) {
002814 64C6              XRL     A,#0C6H
002816 6002              JZ      $ + 4H
002818 01A8              AJMP    ?C0012?BT_IPC
   52: 			event->len = HREAD(new_rprt++);
00281A 904E25            MOV     DPTR,#new_rprt
00281D 75F001            MOV     B,#01H
002820 1201C8            LCALL   ?C?ILDIX
002823 85F082            MOV     DPL,B
002826 F583              MOV     DPH,A
002828 E0                MOVX    A,@DPTR
002829 FF                MOV     R7,A
00282A 904E22            MOV     DPTR,#event
00282D E0                MOVX    A,@DPTR
00282E FB                MOV     R3,A
00282F A3                INC     DPTR
002830 E0                MOVX    A,@DPTR
002831 FA                MOV     R2,A
002832 A3                INC     DPTR
002833 E0                MOVX    A,@DPTR
002834 F9                MOV     R1,A
002835 EF                MOV     A,R7
002836 12013F            LCALL   ?C?CSTPTR
   53: 			if( new_rprt == (mem_event_buf_end+1) )
002839 904E25            MOV     DPTR,#new_rprt
00283C E0                MOVX    A,@DPTR
00283D B4500F            CJNE    A,#050H,?C0013?BT_IPC
002840 A3                INC     DPTR
002841 E0                MOVX    A,@DPTR
002842 B4000A            CJNE    A,#00H,?C0013?BT_IPC
   54: 			{
   55: 				new_rprt = mem_event_buf;
002845 904E25            MOV     DPTR,#new_rprt
002848 744F              MOV     A,#04FH
00284A F0                MOVX    @DPTR,A
00284B A3                INC     DPTR
00284C 7480              MOV     A,#080H
00284E F0                MOVX    @DPTR,A
   56: 			}
00284F         ?C0013?BT_IPC:
   57: 			for(i=0;i<event->len;i++)
;---- Variable 'i' assigned to Register 'R6/R7' ----
00284F E4                CLR     A
002850 FF                MOV     R7,A
002851 FE                MOV     R6,A
002852         ?C0014?BT_IPC:
002852 904E22            MOV     DPTR,#event
002855 E0                MOVX    A,@DPTR
002856 FB                MOV     R3,A
002857 A3                INC     DPTR
002858 E0                MOVX    A,@DPTR
002859 FA                MOV     R2,A
00285A A3                INC     DPTR
00285B E0                MOVX    A,@DPTR
00285C F9                MOV     R1,A
00285D 1200F9            LCALL   ?C?CLDPTR
002860 FD                MOV     R5,A
002861 C3                CLR     C
002862 EF                MOV     A,R7
002863 9D                SUBB    A,R5
002864 EE                MOV     A,R6
002865 9400              SUBB    A,#00H
002867 504E              JNC     ?C0018?BT_IPC
   58: 			{
   59: 				event->DATA[i] = HREAD(new_rprt++);
002869 904E25            MOV     DPTR,#new_rprt
00286C E4                CLR     A
00286D 75F001            MOV     B,#01H
002870 1201C8            LCALL   ?C?ILDIX
002873 85F082            MOV     DPL,B
002876 F583              MOV     DPH,A
002878 E0                MOVX    A,@DPTR
002879 FD                MOV     R5,A
00287A E9                MOV     A,R1
00287B 2401              ADD     A,#01H
00287D F9                MOV     R1,A
00287E E4                CLR     A
00287F 3A                ADDC    A,R2
002880 FA                MOV     R2,A
002881 E9                MOV     A,R1
002882 2F                ADD     A,R7
002883 F9                MOV     R1,A
002884 EA                MOV     A,R2
002885 3E                ADDC    A,R6
002886 FA                MOV     R2,A
002887 ED                MOV     A,R5
002888 12013F            LCALL   ?C?CSTPTR
   60: 				if( new_rprt == (mem_event_buf_end+1) )
00288B 904E25            MOV     DPTR,#new_rprt
00288E E0                MOVX    A,@DPTR
00288F B4500F            CJNE    A,#050H,?C0016?BT_IPC
002892 A3                INC     DPTR
002893 E0                MOVX    A,@DPTR
002894 B4000A            CJNE    A,#00H,?C0016?BT_IPC
   61: 				{
   62: 					new_rprt = mem_event_buf;
002897 904E25            MOV     DPTR,#new_rprt
00289A 744F              MOV     A,#04FH
00289C F0                MOVX    @DPTR,A
00289D A3                INC     DPTR
00289E 7480              MOV     A,#080H
0028A0 F0                MOVX    @DPTR,A
   63: 				}
   64: 			}
0028A1         ?C0016?BT_IPC:
0028A1 0F                INC     R7
0028A2 BF0001            CJNE    R7,#00H,?C0033?BT_IPC
0028A5 0E                INC     R6
0028A6         ?C0033?BT_IPC:
0028A6 80AA              SJMP    ?C0014?BT_IPC
   65: 		}
0028A8         ?C0012?BT_IPC:
   66: 		else {
   67: 			event->len = 0;
0028A8 904E22            MOV     DPTR,#event
0028AB E0                MOVX    A,@DPTR
0028AC FB                MOV     R3,A
0028AD A3                INC     DPTR
0028AE E0                MOVX    A,@DPTR
0028AF FA                MOV     R2,A
0028B0 A3                INC     DPTR
0028B1 E0                MOVX    A,@DPTR
0028B2 F9                MOV     R1,A
0028B3 E4                CLR     A
0028B4 12013F            LCALL   ?C?CSTPTR
   68: 		}
0028B7         ?C0018?BT_IPC:
   69: 		BT_EventRptr = ESWAP(new_rprt);
0028B7 904E25            MOV     DPTR,#new_rprt
0028BA E0                MOVX    A,@DPTR
0028BB FC                MOV     R4,A
0028BC A3                INC     DPTR
0028BD E0                MOVX    A,@DPTR
0028BE FA                MOV     R2,A
0028BF EC                MOV     A,R4
0028C0 FF                MOV     R7,A
0028C1 EA                MOV     A,R2
0028C2 FE                MOV     R6,A
0028C3 EF                MOV     A,R7
0028C4 904A04            MOV     DPTR,#BT_EventRptr
0028C7 EE                MOV     A,R6
0028C8 F0                MOVX    @DPTR,A
0028C9 A3                INC     DPTR
0028CA EF                MOV     A,R7
0028CB F0                MOVX    @DPTR,A
   70: 	}
0028CC 22                RET     
0028CD         ?C0011?BT_IPC:
   71: 	else
   72: 	{
   73: 		event->len = 0;
0028CD 904E22            MOV     DPTR,#event
0028D0 E0                MOVX    A,@DPTR
0028D1 FB                MOV     R3,A
0028D2 A3                INC     DPTR
0028D3 E0                MOVX    A,@DPTR
0028D4 FA                MOV     R2,A
0028D5 A3                INC     DPTR
0028D6 E0                MOVX    A,@DPTR
0028D7 F9                MOV     R1,A
0028D8 E4                CLR     A
0028D9 02013F            LJMP    ?C?CSTPTR
   74: 	}
----- FUNCTION _BT_EventFifoOut (END) -------


----- FUNCTION BT_GetEvtFifoDepth (BEGIN) -----
 FILE: 'BT_IPC.c'
   87: u8_t BT_GetEvtFifoDepth(void)
   88: {
   89: 	u16_t wptr,rptr,len;
   90: 	wptr = ESWAP(BT_EventWptr);
0028DC 904A07            MOV     DPTR,#BT_EventWptr+01H
0028DF E0                MOVX    A,@DPTR
0028E0 FC                MOV     R4,A
0028E1 904A06            MOV     DPTR,#BT_EventWptr
0028E4 E0                MOVX    A,@DPTR
0028E5 FF                MOV     R7,A
0028E6 EC                MOV     A,R4
0028E7 EF                MOV     A,R7
;---- Variable 'wptr' assigned to Register 'R4/R5' ----
0028E8 FD                MOV     R5,A
   91: 	rptr = ESWAP(BT_EventRptr);
0028E9 904A05            MOV     DPTR,#BT_EventRptr+01H
0028EC E0                MOVX    A,@DPTR
0028ED FA                MOV     R2,A
0028EE 904A04            MOV     DPTR,#BT_EventRptr
0028F1 E0                MOVX    A,@DPTR
0028F2 FF                MOV     R7,A
0028F3 EA                MOV     A,R2
0028F4 FE                MOV     R6,A
0028F5 EF                MOV     A,R7
;---- Variable 'rptr' assigned to Register 'R6/R7' ----
   92: 	len = (wptr + BT_EVT_BUF_LEN - rptr)&(BT_EVT_BUF_LEN-1);
0028F6 ED                MOV     A,R5
0028F7 2480              ADD     A,#080H
0028F9 FD                MOV     R5,A
0028FA E4                CLR     A
0028FB 3C                ADDC    A,R4
0028FC FC                MOV     R4,A
0028FD C3                CLR     C
0028FE ED                MOV     A,R5
0028FF 9F                SUBB    A,R7
002900 FF                MOV     R7,A
002901 EC                MOV     A,R4
002902 9E                SUBB    A,R6
002903 7E00              MOV     R6,#00H
002905 EF                MOV     A,R7
002906 547F              ANL     A,#07FH
002908 FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R6/R7' ----
   93: 	return len&0xff;
   94: }
002909 22                RET     
----- FUNCTION BT_GetEvtFifoDepth (END) -------


----- FUNCTION _BT_CmdFifoFull (BEGIN) -----
 FILE: 'BT_IPC.c'
  105: bool BT_CmdFifoFull(BT_CMDFIFO_t *pFIFO)
  106: {
00290A 904E3E            MOV     DPTR,#pFIFO
00290D EB                MOV     A,R3
00290E F0                MOVX    @DPTR,A
00290F A3                INC     DPTR
002910 EA                MOV     A,R2
002911 F0                MOVX    @DPTR,A
002912 A3                INC     DPTR
002913 E9                MOV     A,R1
002914 F0                MOVX    @DPTR,A
  107: 	if((BT_GetCmdFifoDepth()+pFIFO->len+1) > BT_CMD_BUF_LEN)
  108: 		return true;
002915 1227A0            LCALL   BT_GetCmdFifoDepth
002918 904E3E            MOV     DPTR,#pFIFO
00291B E0                MOVX    A,@DPTR
00291C FB                MOV     R3,A
00291D A3                INC     DPTR
00291E E0                MOVX    A,@DPTR
00291F FA                MOV     R2,A
002920 A3                INC     DPTR
002921 E0                MOVX    A,@DPTR
002922 F9                MOV     R1,A
002923 1200F9            LCALL   ?C?CLDPTR
002926 2F                ADD     A,R7
002927 FF                MOV     R7,A
002928 E4                CLR     A
002929 33                RLC     A
00292A CF                XCH     A,R7
00292B 2401              ADD     A,#01H
00292D CF                XCH     A,R7
00292E 3400              ADDC    A,#00H
002930 FE                MOV     R6,A
002931 D3                SETB    C
002932 EF                MOV     A,R7
002933 9480              SUBB    A,#080H
002935 EE                MOV     A,R6
002936 6480              XRL     A,#080H
002938 9480              SUBB    A,#080H
00293A 4002              JC      ?C0025?BT_IPC
  109: 	return false;
00293C D3                SETB    C
00293D 22                RET     
00293E         ?C0025?BT_IPC:
  110: }
00293E C3                CLR     C
  110: 
00293F 22                RET     
----- FUNCTION _BT_CmdFifoFull (END) -------


----- FUNCTION YC_Ice_break (BEGIN) -----
 FILE: 'YC_Utilities.c'
    4: void YC_Ice_break()
    5: {
    6: 	CPUB_ICE_CTRL = 1;
    7: 	return;
002940 908280            MOV     DPTR,#08280H
002943 7401              MOV     A,#01H
002945 F0                MOVX    @DPTR,A
    8: }
002946 22                RET     
----- FUNCTION YC_Ice_break (END) -------


----- FUNCTION _dmemcpy (BEGIN) -----
 FILE: 'YC_Utilities.c'
   22: void dmemcpy(u8_t *dest, u8_t* src, u8_t len) small
   23: {
002947 8B10              MOV     dest,R3
002949 8A11              MOV     dest+01H,R2
00294B 8912              MOV     dest+02H,R1
00294D         ?C0008?YC_UTILITIES:
   24: 	while(len--)
00294D AF16              MOV     R7,len
00294F 1516              DEC     len
002951 EF                MOV     A,R7
002952 6026              JZ      ?C0010?YC_UTILITIES
   25: 		*dest++ = *src++;
002954 AB13              MOV     R3,src
002956 0515              INC     src+02H
002958 E515              MOV     A,src+02H
00295A AA14              MOV     R2,src+01H
00295C 7002              JNZ     ?C0047?YC_UTILITIES
00295E 0514              INC     src+01H
002960         ?C0047?YC_UTILITIES:
002960 14                DEC     A
002961 F9                MOV     R1,A
002962 1200F9            LCALL   ?C?CLDPTR
002965 FF                MOV     R7,A
002966 AB10              MOV     R3,dest
002968 0512              INC     dest+02H
00296A E512              MOV     A,dest+02H
00296C AA11              MOV     R2,dest+01H
00296E 7002              JNZ     ?C0048?YC_UTILITIES
002970 0511              INC     dest+01H
002972         ?C0048?YC_UTILITIES:
002972 14                DEC     A
002973 F9                MOV     R1,A
002974 EF                MOV     A,R7
002975 12013F            LCALL   ?C?CSTPTR
002978 80D3              SJMP    ?C0008?YC_UTILITIES
   26: 	return;
   27: }
00297A         ?C0010?YC_UTILITIES:
00297A 22                RET     
----- FUNCTION _dmemcpy (END) -------


----- FUNCTION sendHistoryData (BEGIN) -----
 FILE: 'lxProtocol.c'
  383: static void sendHistoryData(void)
  384: {
  385: 	static u8_t total_len = 0;
  386: 	UserMeasureData *temp = NULL;
00297B 904DBE            MOV     DPTR,#temp
00297E E4                CLR     A
00297F F0                MOVX    @DPTR,A
002980 A3                INC     DPTR
002981 F0                MOVX    @DPTR,A
002982 A3                INC     DPTR
002983 F0                MOVX    @DPTR,A
  387: 	u32_t crc32;
  388: 	u8_t i=0;
002984 904DC5            MOV     DPTR,#i
002987 F0                MOVX    @DPTR,A
  389: 	u8_t pkgCnt; 
  390: 	u8_t size;
  391: 	/*
  392: 	UserMeasureData temp1;
  393: 	temp1.UTCTime[0] = 0x12;
  394: 	temp1.UTCTime[0] = 0x34;
  395: 	temp1.UTCTime[0] = 0x56;
  396: 	temp1.UTCTime[0] = 0x78;
  397: 	temp1.weight = 0xabba;
  398: 	QueuePush(&temp1);
  399: 	QueuePush(&temp1);
  400: 	*/
  401: 	
  402: 	size = historyUserData.size;
002988 904C12            MOV     DPTR,#historyUserData+02H
00298B E0                MOVX    A,@DPTR
00298C 904DC7            MOV     DPTR,#size
00298F F0                MOVX    @DPTR,A
  403: 	pkgCnt = (8 + historyUserData.size * 6 + 4)/18 + (((8 + historyUserData.size * 6 + 4)%18)>0?1:0);
002990 75F006            MOV     B,#06H
002993 A4                MUL     AB
002994 240C              ADD     A,#0CH
002996 FF                MOV     R7,A
002997 E4                CLR     A
002998 35F0              ADDC    A,B
00299A FE                MOV     R6,A
00299B 7C00              MOV     R4,#00H
00299D 7D12              MOV     R5,#012H
00299F 120173            LCALL   ?C?UIDIV
0029A2 ED                MOV     A,R5
0029A3 D3                SETB    C
0029A4 9400              SUBB    A,#00H
0029A6 4006              JC      ?C0068?LXPROTOCOL
0029A8 7F01              MOV     R7,#01H
0029AA 7B01              MOV     R3,#01H
0029AC 8004              SJMP    ?C0069?LXPROTOCOL
0029AE         ?C0068?LXPROTOCOL:
0029AE 7F00              MOV     R7,#00H
0029B0 7B00              MOV     R3,#00H
0029B2         ?C0069?LXPROTOCOL:
0029B2 904C12            MOV     DPTR,#historyUserData+02H
0029B5 E0                MOVX    A,@DPTR
0029B6 FA                MOV     R2,A
0029B7 75F006            MOV     B,#06H
0029BA A4                MUL     AB
0029BB 240C              ADD     A,#0CH
0029BD FF                MOV     R7,A
0029BE E4                CLR     A
0029BF 35F0              ADDC    A,B
0029C1 FE                MOV     R6,A
0029C2 7C00              MOV     R4,#00H
0029C4 7D12              MOV     R5,#012H
0029C6 120173            LCALL   ?C?UIDIV
0029C9 EB                MOV     A,R3
0029CA 2F                ADD     A,R7
0029CB 904DC6            MOV     DPTR,#pkgCnt
0029CE F0                MOVX    @DPTR,A
  404: 	total_len = 8 + historyUserData.size * 6 + 4;
0029CF EA                MOV     A,R2
0029D0 75F006            MOV     B,#06H
0029D3 A4                MUL     AB
0029D4 240C              ADD     A,#0CH
0029D6 904E59            MOV     DPTR,#total_len
0029D9 F0                MOVX    @DPTR,A
  405: 	
  406: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
0029DA 904C64            MOV     DPTR,#btCmdBuf+01H
0029DD 7430              MOV     A,#030H
0029DF F0                MOVX    @DPTR,A
  407: 	btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
0029E0 A3                INC     DPTR
0029E1 741C              MOV     A,#01CH
0029E3 F0                MOVX    @DPTR,A
  408: 	btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
0029E4 E4                CLR     A
0029E5 A3                INC     DPTR
0029E6 F0                MOVX    @DPTR,A
  409: 
  410: 	*(LX_SEND_BUF+0) = LO_UINT16(CMD_SYNC_DATA_RSP);
0029E7 9048D2            MOV     DPTR,#048D2H
0029EA 7402              MOV     A,#02H
0029EC F0                MOVX    @DPTR,A
  411: 	*(LX_SEND_BUF+1) = HI_UINT16(CMD_SYNC_DATA_RSP);
0029ED A3                INC     DPTR
0029EE 7448              MOV     A,#048H
0029F0 F0                MOVX    @DPTR,A
  412: 	*(LX_SEND_BUF+2) = pkgCnt - 1;
0029F1 904DC6            MOV     DPTR,#pkgCnt
0029F4 E0                MOVX    A,@DPTR
0029F5 FF                MOV     R7,A
0029F6 14                DEC     A
0029F7 9048D4            MOV     DPTR,#048D4H
0029FA F0                MOVX    @DPTR,A
  413: 	*(LX_SEND_BUF+3) = 0;
0029FB A3                INC     DPTR
0029FC E4                CLR     A
0029FD F0                MOVX    @DPTR,A
  414: 	*(LX_SEND_BUF+4) = WEIGHT_UTC_FLAG;
0029FE A3                INC     DPTR
0029FF 7405              MOV     A,#05H
002A01 F0                MOVX    @DPTR,A
  415: 	*(LX_SEND_BUF+5) = 0;
002A02 A3                INC     DPTR
002A03 E4                CLR     A
002A04 F0                MOVX    @DPTR,A
  416: 	*(LX_SEND_BUF+6) = 0;
002A05 A3                INC     DPTR
002A06 F0                MOVX    @DPTR,A
  417: 	*(LX_SEND_BUF+7) = 0;
002A07 A3                INC     DPTR
002A08 F0                MOVX    @DPTR,A
  418: 	if(pkgCnt > 1)
002A09 EF                MOV     A,R7
002A0A D3                SETB    C
002A0B 9401              SUBB    A,#01H
002A0D 5002              JNC     $ + 4H
002A0F 6158              AJMP    ?C0070?LXPROTOCOL
  419: 	{
  420: 		for(i=0;i<size;i++)
002A11 E4                CLR     A
002A12 904DC5            MOV     DPTR,#i
002A15 F0                MOVX    @DPTR,A
002A16         ?C0071?LXPROTOCOL:
002A16 904DC7            MOV     DPTR,#size
002A19 E0                MOVX    A,@DPTR
002A1A FF                MOV     R7,A
002A1B 904DC5            MOV     DPTR,#i
002A1E E0                MOVX    A,@DPTR
002A1F C3                CLR     C
002A20 9F                SUBB    A,R7
002A21 5047              JNC     ?C0072?LXPROTOCOL
  421: 		{
  422: 			temp = QueuePop();
002A23 123616            LCALL   QueuePop
002A26 904DBE            MOV     DPTR,#temp
002A29 EB                MOV     A,R3
002A2A F0                MOVX    @DPTR,A
002A2B A3                INC     DPTR
002A2C EA                MOV     A,R2
002A2D F0                MOVX    @DPTR,A
002A2E A3                INC     DPTR
002A2F E9                MOV     A,R1
002A30 F0                MOVX    @DPTR,A
  423: 			dmemcpy(LX_SEND_BUF + (sizeof(UserMeasureData) * i) + 8, (u8_t *)temp, sizeof(UserMeasureData));
002A31 904DC5            MOV     DPTR,#i
002A34 E0                MOVX    A,@DPTR
002A35 75F006            MOV     B,#06H
002A38 A4                MUL     AB
002A39 24DA              ADD     A,#0DAH
002A3B FF                MOV     R7,A
002A3C E5F0              MOV     A,B
002A3E 3448              ADDC    A,#048H
002A40 FA                MOV     R2,A
002A41 A907              MOV     R1,AR7
002A43 7B01              MOV     R3,#01H
002A45 C003              PUSH    AR3
002A47 C002              PUSH    AR2
002A49 904DBE            MOV     DPTR,#temp
002A4C E0                MOVX    A,@DPTR
002A4D FB                MOV     R3,A
002A4E A3                INC     DPTR
002A4F E0                MOVX    A,@DPTR
002A50 FA                MOV     R2,A
002A51 A3                INC     DPTR
002A52 E0                MOVX    A,@DPTR
002A53 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
002A55 8A14              MOV     ?_dmemcpy?BYTE+04H,R2
002A57 F515              MOV     ?_dmemcpy?BYTE+05H,A
002A59 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
002A5C D002              POP     AR2
002A5E D003              POP     AR3
002A60 3147              ACALL   _dmemcpy
  424: 		}
002A62 904DC5            MOV     DPTR,#i
002A65 E0                MOVX    A,@DPTR
002A66 04                INC     A
002A67 F0                MOVX    @DPTR,A
002A68 80AC              SJMP    ?C0071?LXPROTOCOL
002A6A         ?C0072?LXPROTOCOL:
  425: 		crc32 = cal_crc32_multiple(0, LX_SEND_BUF, total_len - 4);
002A6A 7B01              MOV     R3,#01H
002A6C 7A48              MOV     R2,#048H
002A6E 79D2              MOV     R1,#0D2H
002A70 904E59            MOV     DPTR,#total_len
002A73 E0                MOVX    A,@DPTR
002A74 24FC              ADD     A,#0FCH
002A76 FF                MOV     R7,A
002A77 E4                CLR     A
002A78 34FF              ADDC    A,#0FFH
002A7A FE                MOV     R6,A
002A7B E4                CLR     A
002A7C FC                MOV     R4,A
002A7D FD                MOV     R5,A
002A7E 904D94            MOV     DPTR,#?_cal_crc32_multiple?BYTE+07H
002A81 120332            LCALL   ?C?LSTXDATA
002A84 7F00              MOV     R7,#00H
002A86 7E00              MOV     R6,#00H
002A88 7D00              MOV     R5,#00H
002A8A 7C00              MOV     R4,#00H
002A8C 122585            LCALL   _cal_crc32_multiple
002A8F 904DC1            MOV     DPTR,#crc32
002A92 120332            LCALL   ?C?LSTXDATA
  426: 		dmemcpy(LX_SEND_BUF + (sizeof(UserMeasureData) * i) + 8, (u8_t *)&crc32, sizeof(crc32));
002A95 904DC5            MOV     DPTR,#i
002A98 E0                MOVX    A,@DPTR
002A99 75F006            MOV     B,#06H
002A9C A4                MUL     AB
002A9D 24DA              ADD     A,#0DAH
002A9F FF                MOV     R7,A
002AA0 E5F0              MOV     A,B
002AA2 3448              ADDC    A,#048H
002AA4 FA                MOV     R2,A
002AA5 A907              MOV     R1,AR7
002AA7 7B01              MOV     R3,#01H
002AA9 C003              PUSH    AR3
002AAB 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
002AAD 75144D            MOV     ?_dmemcpy?BYTE+04H,#HIGH crc32
002AB0 7515C1            MOV     ?_dmemcpy?BYTE+05H,#LOW crc32
002AB3 751604            MOV     ?_dmemcpy?BYTE+06H,#04H
002AB6 D003              POP     AR3
002AB8 3147              ACALL   _dmemcpy
  427: 		bigLittleEndianSwap(LX_SEND_BUF, total_len);
002ABA 7B01              MOV     R3,#01H
002ABC 7A48              MOV     R2,#048H
002ABE 79D2              MOV     R1,#0D2H
002AC0 904E59            MOV     DPTR,#total_len
002AC3 E0                MOVX    A,@DPTR
002AC4 FD                MOV     R5,A
002AC5 7C00              MOV     R4,#00H
002AC7 D1D3              ACALL   _bigLittleEndianSwap
  428: 		
  429: 		for(i=0;i<pkgCnt;i++)
002AC9 E4                CLR     A
002ACA 904DC5            MOV     DPTR,#i
002ACD F0                MOVX    @DPTR,A
002ACE         ?C0074?LXPROTOCOL:
002ACE 904DC6            MOV     DPTR,#pkgCnt
002AD1 E0                MOVX    A,@DPTR
002AD2 FF                MOV     R7,A
002AD3 904DC5            MOV     DPTR,#i
002AD6 E0                MOVX    A,@DPTR
002AD7 FE                MOV     R6,A
002AD8 C3                CLR     C
002AD9 9F                SUBB    A,R7
002ADA 4002              JC      $ + 4H
002ADC 61D0              AJMP    ?C0082?LXPROTOCOL
  430: 		{
  431: 			btCmdBuf.DATA[3] = (pkgCnt << 4) + i;
002ADE A3                INC     DPTR
002ADF E0                MOVX    A,@DPTR
002AE0 FD                MOV     R5,A
002AE1 C4                SWAP    A
002AE2 54F0              ANL     A,#0F0H
002AE4 FF                MOV     R7,A
002AE5 EE                MOV     A,R6
002AE6 2F                ADD     A,R7
002AE7 904C67            MOV     DPTR,#btCmdBuf+04H
002AEA F0                MOVX    @DPTR,A
  432: 			if(i == pkgCnt -1)
002AEB ED                MOV     A,R5
002AEC 14                DEC     A
002AED B5060A            CJNE    A,AR6,?C0077?LXPROTOCOL
  433: 			{
  434: 				btCmdBuf.DATA[4] = total_len;
002AF0 904E59            MOV     DPTR,#total_len
002AF3 E0                MOVX    A,@DPTR
002AF4 904C68            MOV     DPTR,#btCmdBuf+05H
002AF7 F0                MOVX    @DPTR,A
  435: 			}
002AF8 800D              SJMP    ?C0078?LXPROTOCOL
002AFA         ?C0077?LXPROTOCOL:
  436: 			else
  437: 			{
  438: 				btCmdBuf.DATA[4] = 20 - 2;
002AFA 904C68            MOV     DPTR,#btCmdBuf+05H
002AFD 7412              MOV     A,#012H
002AFF F0                MOVX    @DPTR,A
  439: 				total_len -= 18;
002B00 904E59            MOV     DPTR,#total_len
002B03 E0                MOVX    A,@DPTR
002B04 24EE              ADD     A,#0EEH
002B06 F0                MOVX    @DPTR,A
  440: 				
  441: 			}
002B07         ?C0078?LXPROTOCOL:
  442: 			btCmdBuf.DATA[7] = pkgCnt - i - 1;
002B07 904DC5            MOV     DPTR,#i
002B0A E0                MOVX    A,@DPTR
002B0B FD                MOV     R5,A
002B0C A3                INC     DPTR
002B0D E0                MOVX    A,@DPTR
002B0E C3                CLR     C
002B0F 9D                SUBB    A,R5
002B10 14                DEC     A
002B11 904C6B            MOV     DPTR,#btCmdBuf+08H
002B14 F0                MOVX    @DPTR,A
  443: 			btCmdBuf.len = 3 + 2 + btCmdBuf.DATA[4] ;
002B15 904C68            MOV     DPTR,#btCmdBuf+05H
002B18 E0                MOVX    A,@DPTR
002B19 2405              ADD     A,#05H
002B1B 904C63            MOV     DPTR,#btCmdBuf
002B1E F0                MOVX    @DPTR,A
  444: 			dmemcpy(&btCmdBuf.DATA[5], (u8_t *)(LX_SEND_BUF+i*18), btCmdBuf.DATA[4] );
002B1F ED                MOV     A,R5
002B20 75F012            MOV     B,#012H
002B23 A4                MUL     AB
002B24 24D2              ADD     A,#0D2H
002B26 FF                MOV     R7,A
002B27 E5F0              MOV     A,B
002B29 3448              ADDC    A,#048H
002B2B A907              MOV     R1,AR7
002B2D 751301            MOV     ?_dmemcpy?BYTE+03H,#01H
002B30 F514              MOV     ?_dmemcpy?BYTE+04H,A
002B32 8915              MOV     ?_dmemcpy?BYTE+05H,R1
002B34 904C68            MOV     DPTR,#btCmdBuf+05H
002B37 E0                MOVX    A,@DPTR
002B38 F516              MOV     ?_dmemcpy?BYTE+06H,A
002B3A 7B01              MOV     R3,#01H
002B3C 7A4C              MOV     R2,#HIGH btCmdBuf+06H
002B3E 7969              MOV     R1,#LOW btCmdBuf+06H
002B40 3147              ACALL   _dmemcpy
  445: 			BT_CmdFifoIn(&btCmdBuf);
002B42 7B01              MOV     R3,#01H
002B44 7A4C              MOV     R2,#HIGH btCmdBuf
002B46 7963              MOV     R1,#LOW btCmdBuf
002B48 122680            LCALL   _BT_CmdFifoIn
  446: 			YC_Delay10ms(12);
002B4B 7F0C              MOV     R7,#0CH
002B4D 121F7B            LCALL   _YC_Delay10ms
  447: 		}
002B50 904DC5            MOV     DPTR,#i
002B53 E0                MOVX    A,@DPTR
002B54 04                INC     A
002B55 F0                MOVX    @DPTR,A
002B56 41CE              AJMP    ?C0074?LXPROTOCOL
  448: 	}
002B58         ?C0070?LXPROTOCOL:
  449: 	else
  450: 	{
  451: 		btCmdBuf.len = 3 + 2 + SYNC_DATA_HDR_LEN + sizeof(UserMeasureData);
002B58 904C63            MOV     DPTR,#btCmdBuf
002B5B 7413              MOV     A,#013H
002B5D F0                MOVX    @DPTR,A
  452: 		btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
002B5E 904C67            MOV     DPTR,#btCmdBuf+04H
002B61 7410              MOV     A,#010H
002B63 F0                MOVX    @DPTR,A
  453: 		btCmdBuf.DATA[4] = SYNC_DATA_HDR_LEN + sizeof(UserMeasureData);
002B64 A3                INC     DPTR
002B65 740E              MOV     A,#0EH
002B67 F0                MOVX    @DPTR,A
  454: 		temp = QueuePop();
002B68 123616            LCALL   QueuePop
002B6B 904DBE            MOV     DPTR,#temp
002B6E EB                MOV     A,R3
002B6F F0                MOVX    @DPTR,A
002B70 A3                INC     DPTR
002B71 EA                MOV     A,R2
002B72 F0                MOVX    @DPTR,A
002B73 A3                INC     DPTR
002B74 E9                MOV     A,R1
002B75 F0                MOVX    @DPTR,A
  455: 		if(temp != NULL)
002B76 4A                ORL     A,R2
002B77 601D              JZ      ?C0080?LXPROTOCOL
  456: 		{
  457: 			dmemcpy(LX_SEND_BUF + 8, (u8_t *)temp, sizeof(UserMeasureData));
002B79 904DBE            MOV     DPTR,#temp
002B7C E0                MOVX    A,@DPTR
002B7D FB                MOV     R3,A
002B7E A3                INC     DPTR
002B7F E0                MOVX    A,@DPTR
002B80 FA                MOV     R2,A
002B81 A3                INC     DPTR
002B82 E0                MOVX    A,@DPTR
002B83 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
002B85 8A14              MOV     ?_dmemcpy?BYTE+04H,R2
002B87 F515              MOV     ?_dmemcpy?BYTE+05H,A
002B89 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
002B8C 7B01              MOV     R3,#01H
002B8E 7A48              MOV     R2,#048H
002B90 79DA              MOV     R1,#0DAH
002B92 3147              ACALL   _dmemcpy
  458: 		}
002B94 800B              SJMP    ?C0081?LXPROTOCOL
002B96         ?C0080?LXPROTOCOL:
  459: 		else
  460: 		{
  461: 			xmemset(LX_SEND_BUF, 0, sizeof(UserMeasureData));
002B96 7B06              MOV     R3,#06H
002B98 E4                CLR     A
002B99 FD                MOV     R5,A
002B9A 7FD2              MOV     R7,#0D2H
002B9C 7E48              MOV     R6,#048H
002B9E 121F93            LCALL   _xmemset
  462: 		}
002BA1         ?C0081?LXPROTOCOL:
  463: 		dmemcpy(&(btCmdBuf.DATA[5]), LX_SEND_BUF, btCmdBuf.DATA[4]);
002BA1 751301            MOV     ?_dmemcpy?BYTE+03H,#01H
002BA4 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
002BA7 7515D2            MOV     ?_dmemcpy?BYTE+05H,#0D2H
002BAA 904C68            MOV     DPTR,#btCmdBuf+05H
002BAD E0                MOVX    A,@DPTR
002BAE F516              MOV     ?_dmemcpy?BYTE+06H,A
002BB0 7B01              MOV     R3,#01H
002BB2 7A4C              MOV     R2,#HIGH btCmdBuf+06H
002BB4 7969              MOV     R1,#LOW btCmdBuf+06H
002BB6 3147              ACALL   _dmemcpy
  464: 		bigLittleEndianSwap(&(btCmdBuf.DATA[5]), btCmdBuf.DATA[4]);
002BB8 7B01              MOV     R3,#01H
002BBA 7A4C              MOV     R2,#HIGH btCmdBuf+06H
002BBC 7969              MOV     R1,#LOW btCmdBuf+06H
002BBE 904C68            MOV     DPTR,#btCmdBuf+05H
002BC1 E0                MOVX    A,@DPTR
002BC2 FD                MOV     R5,A
002BC3 7C00              MOV     R4,#00H
002BC5 D1D3              ACALL   _bigLittleEndianSwap
  465: 		BT_CmdFifoIn(&btCmdBuf);
002BC7 7B01              MOV     R3,#01H
002BC9 7A4C              MOV     R2,#HIGH btCmdBuf
002BCB 7963              MOV     R1,#LOW btCmdBuf
002BCD 122680            LCALL   _BT_CmdFifoIn
  466: 	}
  467: }
002BD0         ?C0082?LXPROTOCOL:
002BD0 22                RET     
----- FUNCTION sendHistoryData (END) -------


----- FUNCTION lxOptProcess (BEGIN) -----
 FILE: 'lxProtocol.c'
  133: void lxOptProcess(void)
  134: {
  135: 	u8_t i;
  136: 
  137: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
002BD1 904C64            MOV     DPTR,#btCmdBuf+01H
002BD4 7430              MOV     A,#030H
002BD6 F0                MOVX    @DPTR,A
  138: 	btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
002BD7 A3                INC     DPTR
002BD8 741C              MOV     A,#01CH
002BDA F0                MOVX    @DPTR,A
  139: 	btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
002BDB E4                CLR     A
002BDC A3                INC     DPTR
002BDD F0                MOVX    @DPTR,A
  140: 	switch(lxOptStatus)
002BDE 904C5C            MOV     DPTR,#lxOptStatus
002BE1 E0                MOVX    A,@DPTR
002BE2 12036F            LCALL   ?C?CCASE
002BE5 2C0A              DW      ?C0027?LXPROTOCOL
002BE7 10                DB      010H
002BE8 2C75              DW      ?C0031?LXPROTOCOL
002BEA 13                DB      013H
002BEB 2CE2              DW      ?C0034?LXPROTOCOL
002BED 16                DB      016H
002BEE 2D73              DW      ?C0040?LXPROTOCOL
002BF0 18                DB      018H
002BF1 2DE7              DW      ?C0050?LXPROTOCOL
002BF3 20                DB      020H
002BF4 2E27              DW      ?C0051?LXPROTOCOL
002BF6 22                DB      022H
002BF7 2E4B              DW      ?C0053?LXPROTOCOL
002BF9 25                DB      025H
002BFA 2E78              DW      ?C0055?LXPROTOCOL
002BFC 28                DB      028H
002BFD 2E9F              DW      ?C0058?LXPROTOCOL
002BFF 31                DB      031H
002C00 2EB8              DW      ?C0062?LXPROTOCOL
002C02 35                DB      035H
002C03 2ECA              DW      ?C0065?LXPROTOCOL
002C05 36                DB      036H
002C06 0000              DW      00H
002C08 2ED2              DW      ?C0049?LXPROTOCOL
  141: 	{
  142: #if 1
  143: 		case OPT_REGISTER_REQ:
002C0A         ?C0027?LXPROTOCOL:
  144: 			if(*(LX_RECV_BUF + 8) == DEVICE_ID_UNREGISTERED ||
  145: 				*(LX_RECV_BUF + 8) == DEVICE_ID_REGISTERED)
002C0A 9048A8            MOV     DPTR,#048A8H
002C0D E0                MOVX    A,@DPTR
002C0E 6401              XRL     A,#01H
002C10 6004              JZ      ?C0029?LXPROTOCOL
002C12 E0                MOVX    A,@DPTR
002C13 B40220            CJNE    A,#02H,?C0028?LXPROTOCOL
002C16         ?C0029?LXPROTOCOL:
  146: 			{
  147: 				//save deviceID
  148: 				dmemcpy(deviceInfo.deviceID, LX_RECV_BUF + 2, DEVICE_ID_LENGTH);
002C16 751301            MOV     ?_dmemcpy?BYTE+03H,#01H
002C19 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
002C1C 7515A2            MOV     ?_dmemcpy?BYTE+05H,#0A2H
002C1F 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
002C22 7B01              MOV     R3,#01H
002C24 7A4C              MOV     R2,#HIGH deviceInfo+04H
002C26 790A              MOV     R1,#LOW deviceInfo+04H
002C28 3147              ACALL   _dmemcpy
  149: 				//register success
  150: 				deviceInfo.registerFlag = DEVICE_REGISTERED;
002C2A 904C06            MOV     DPTR,#deviceInfo
002C2D 7401              MOV     A,#01H
002C2F F0                MOVX    @DPTR,A
  151: 				//update adv flag
  152: 				*(mem_le_adv_data + 13) = DEVICE_REGISTERED;
002C30 9043E7            MOV     DPTR,#043E7H
002C33 F0                MOVX    @DPTR,A
  153: 			}
002C34 8005              SJMP    ?C0030?LXPROTOCOL
002C36         ?C0028?LXPROTOCOL:
  154: 			else// if(*(LX_RECV_BUF + 8) == DEVICE_ID_ILLEGALED)
  155: 			{
  156: 				deviceInfo.registerFlag = DEVICE_UNREGISTERED;
002C36 E4                CLR     A
002C37 904C06            MOV     DPTR,#deviceInfo
002C3A F0                MOVX    @DPTR,A
  157: 			}
002C3B         ?C0030?LXPROTOCOL:
  158: 			
  159: 			btCmdBuf.len = 0x08;
002C3B 904C63            MOV     DPTR,#btCmdBuf
002C3E 7408              MOV     A,#08H
002C40 F0                MOVX    @DPTR,A
  160: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
002C41 904C67            MOV     DPTR,#btCmdBuf+04H
002C44 7410              MOV     A,#010H
002C46 F0                MOVX    @DPTR,A
  161: 			btCmdBuf.DATA[4] = REGISTER_RSP_DATA_LEN;
002C47 A3                INC     DPTR
002C48 7403              MOV     A,#03H
002C4A F0                MOVX    @DPTR,A
  162: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_REGISTER_RSP);
002C4B A3                INC     DPTR
002C4C 14                DEC     A
002C4D F0                MOVX    @DPTR,A
  163: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_REGISTER_RSP);
002C4E E4                CLR     A
002C4F A3                INC     DPTR
002C50 F0                MOVX    @DPTR,A
  164: 			btCmdBuf.DATA[7] = deviceInfo.registerFlag;
002C51 904C06            MOV     DPTR,#deviceInfo
002C54 E0                MOVX    A,@DPTR
002C55 904C6B            MOV     DPTR,#btCmdBuf+08H
002C58 F0                MOVX    @DPTR,A
  165: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), REGISTER_RSP_DATA_LEN);
002C59 7B01              MOV     R3,#01H
002C5B 7A4C              MOV     R2,#HIGH btCmdBuf+06H
002C5D 7969              MOV     R1,#LOW btCmdBuf+06H
002C5F 7D03              MOV     R5,#03H
002C61 7C00              MOV     R4,#00H
002C63 D1D3              ACALL   _bigLittleEndianSwap
  166: 			BT_CmdFifoIn(&btCmdBuf);
002C65 7B01              MOV     R3,#01H
002C67 7A4C              MOV     R2,#HIGH btCmdBuf
002C69 7963              MOV     R1,#LOW btCmdBuf
002C6B 122680            LCALL   _BT_CmdFifoIn
  167: 			lxOptStatus = OPT_REGISTER_RSP_WAIT_ACK;
002C6E 904C5C            MOV     DPTR,#lxOptStatus
002C71 7411              MOV     A,#011H
002C73 F0                MOVX    @DPTR,A
  168: 			break;
002C74 22                RET     
  169: 			
  170: 		case OPT_BIND_REQ:
002C75         ?C0031?LXPROTOCOL:
  171: 			//bind success
  172: 			if(*(LX_RECV_BUF + 2) >= 1 && *(LX_RECV_BUF + 2) <= 4 && *(LX_RECV_BUF + 3) == 1)
002C75 9048A2            MOV     DPTR,#048A2H
002C78 E0                MOVX    A,@DPTR
002C79 C3                CLR     C
002C7A 9401              SUBB    A,#01H
002C7C 401B              JC      ?C0032?LXPROTOCOL
002C7E E0                MOVX    A,@DPTR
002C7F D3                SETB    C
002C80 9404              SUBB    A,#04H
002C82 5015              JNC     ?C0032?LXPROTOCOL
002C84 A3                INC     DPTR
002C85 E0                MOVX    A,@DPTR
002C86 B40110            CJNE    A,#01H,?C0032?LXPROTOCOL
  173: 			{
  174: 				//save user number
  175: 				deviceInfo.userNum = *(LX_RECV_BUF + 2);
002C89 9048A2            MOV     DPTR,#048A2H
002C8C E0                MOVX    A,@DPTR
002C8D 904C09            MOV     DPTR,#deviceInfo+03H
002C90 F0                MOVX    @DPTR,A
  176: 				//lcd display result
  177: 				deviceInfo.bindFlag = BIND_SUCCESS;
002C91 904C07            MOV     DPTR,#deviceInfo+01H
002C94 7401              MOV     A,#01H
002C96 F0                MOVX    @DPTR,A
  178: 			}
002C97 8006              SJMP    ?C0033?LXPROTOCOL
002C99         ?C0032?LXPROTOCOL:
  179: 			else
  180: 			{
  181: 				deviceInfo.bindFlag =  BIND_FAIL;
002C99 904C07            MOV     DPTR,#deviceInfo+01H
002C9C 7402              MOV     A,#02H
002C9E F0                MOVX    @DPTR,A
  182: 			}
002C9F         ?C0033?LXPROTOCOL:
  183: 			
  184: 			btCmdBuf.len = 0x08;
002C9F 904C63            MOV     DPTR,#btCmdBuf
002CA2 7408              MOV     A,#08H
002CA4 F0                MOVX    @DPTR,A
  185: 			btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
002CA5 A3                INC     DPTR
002CA6 7430              MOV     A,#030H
002CA8 F0                MOVX    @DPTR,A
  186: 			btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
002CA9 A3                INC     DPTR
002CAA 741C              MOV     A,#01CH
002CAC F0                MOVX    @DPTR,A
  187: 			btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
002CAD E4                CLR     A
002CAE A3                INC     DPTR
002CAF F0                MOVX    @DPTR,A
  188: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
002CB0 A3                INC     DPTR
002CB1 7410              MOV     A,#010H
002CB3 F0                MOVX    @DPTR,A
  189: 			btCmdBuf.DATA[4] = BIND_RSP_DATA_LEN;
002CB4 A3                INC     DPTR
002CB5 7403              MOV     A,#03H
002CB7 F0                MOVX    @DPTR,A
  190: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_BIND_RSP);
002CB8 A3                INC     DPTR
002CB9 04                INC     A
002CBA F0                MOVX    @DPTR,A
  191: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_BIND_RSP);
002CBB E4                CLR     A
002CBC A3                INC     DPTR
002CBD F0                MOVX    @DPTR,A
  192: 			btCmdBuf.DATA[7] = deviceInfo.bindFlag;
002CBE 904C07            MOV     DPTR,#deviceInfo+01H
002CC1 E0                MOVX    A,@DPTR
002CC2 904C6B            MOV     DPTR,#btCmdBuf+08H
002CC5 F0                MOVX    @DPTR,A
  193: 
  194: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), BIND_RSP_DATA_LEN);
002CC6 7B01              MOV     R3,#01H
002CC8 7A4C              MOV     R2,#HIGH btCmdBuf+06H
002CCA 7969              MOV     R1,#LOW btCmdBuf+06H
002CCC 7D03              MOV     R5,#03H
002CCE 7C00              MOV     R4,#00H
002CD0 D1D3              ACALL   _bigLittleEndianSwap
  195: 			BT_CmdFifoIn(&btCmdBuf);
002CD2 7B01              MOV     R3,#01H
002CD4 7A4C              MOV     R2,#HIGH btCmdBuf
002CD6 7963              MOV     R1,#LOW btCmdBuf
002CD8 122680            LCALL   _BT_CmdFifoIn
  196: 			lxOptStatus = OPT_BIND_RSP_WAIT_ACK;
002CDB 904C5C            MOV     DPTR,#lxOptStatus
002CDE 7414              MOV     A,#014H
002CE0 F0                MOVX    @DPTR,A
  197: 			break;
002CE1 22                RET     
  198: 		
  199: 		case OPT_LOGIN_REQ:
002CE2         ?C0034?LXPROTOCOL:
  200: 			btCmdBuf.len = 0x0f;
002CE2 904C63            MOV     DPTR,#btCmdBuf
002CE5 740F              MOV     A,#0FH
002CE7 F0                MOVX    @DPTR,A
  201: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
002CE8 904C67            MOV     DPTR,#btCmdBuf+04H
002CEB 04                INC     A
002CEC F0                MOVX    @DPTR,A
  202: 			btCmdBuf.DATA[4] = LOGIN_REQ_DATA_LEN;
002CED A3                INC     DPTR
002CEE 740A              MOV     A,#0AH
002CF0 F0                MOVX    @DPTR,A
  203: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_LOGIN_REQ);
002CF1 A3                INC     DPTR
002CF2 7407              MOV     A,#07H
002CF4 F0                MOVX    @DPTR,A
  204: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_LOGIN_REQ);
002CF5 E4                CLR     A
002CF6 A3                INC     DPTR
002CF7 F0                MOVX    @DPTR,A
  205: 			//Verification code:6bytes deviceID XOR MAC
  206: 			for(i=0;i<6;i++)
002CF8 904E58            MOV     DPTR,#i
002CFB F0                MOVX    @DPTR,A
002CFC         ?C0035?LXPROTOCOL:
002CFC 904E58            MOV     DPTR,#i
002CFF E0                MOVX    A,@DPTR
002D00 FF                MOV     R7,A
002D01 C3                CLR     C
002D02 9406              SUBB    A,#06H
002D04 502E              JNC     ?C0036?LXPROTOCOL
  207: 			{
  208: 				btCmdBuf.DATA[7+i] = deviceInfo.deviceID[i] ^ (*(mem_le_mac+i));
002D06 E0                MOVX    A,@DPTR
002D07 FE                MOV     R6,A
002D08 24E8              ADD     A,#0E8H
002D0A F582              MOV     DPL,A
002D0C E4                CLR     A
002D0D 3443              ADDC    A,#043H
002D0F F583              MOV     DPH,A
002D11 E0                MOVX    A,@DPTR
002D12 FD                MOV     R5,A
002D13 740A              MOV     A,#LOW deviceInfo+04H
002D15 2E                ADD     A,R6
002D16 F582              MOV     DPL,A
002D18 E4                CLR     A
002D19 344C              ADDC    A,#HIGH deviceInfo+04H
002D1B F583              MOV     DPH,A
002D1D E0                MOVX    A,@DPTR
002D1E 6D                XRL     A,R5
002D1F FE                MOV     R6,A
002D20 746B              MOV     A,#LOW btCmdBuf+08H
002D22 2F                ADD     A,R7
002D23 F582              MOV     DPL,A
002D25 E4                CLR     A
002D26 344C              ADDC    A,#HIGH btCmdBuf+08H
002D28 F583              MOV     DPH,A
002D2A EE                MOV     A,R6
002D2B F0                MOVX    @DPTR,A
  209: 			}
002D2C 904E58            MOV     DPTR,#i
002D2F E0                MOVX    A,@DPTR
002D30 04                INC     A
002D31 F0                MOVX    @DPTR,A
002D32 80C8              SJMP    ?C0035?LXPROTOCOL
002D34         ?C0036?LXPROTOCOL:
  210: 			
  211: 			//user number:1bytes
  212: 			btCmdBuf.DATA[13] = deviceInfo.userNum;
002D34 904C09            MOV     DPTR,#deviceInfo+03H
002D37 E0                MOVX    A,@DPTR
002D38 904C71            MOV     DPTR,#btCmdBuf+0EH
002D3B F0                MOVX    @DPTR,A
  213: 			//battery:1bytes
  214: 			if(CS_Scale_JudgeLowBat(GetIfLowBat) == true)
002D3C 7F01              MOV     R7,#01H
002D3E 1217D4            LCALL   _CS_Scale_JudgeLowBat
002D41 BF0108            CJNE    R7,#01H,?C0038?LXPROTOCOL
  215: 				btCmdBuf.DATA[14] = 10;
002D44 904C72            MOV     DPTR,#btCmdBuf+0FH
002D47 740A              MOV     A,#0AH
002D49 F0                MOVX    @DPTR,A
002D4A 8006              SJMP    ?C0039?LXPROTOCOL
002D4C         ?C0038?LXPROTOCOL:
  216: 			else
  217: 				btCmdBuf.DATA[14] = 100;
002D4C 904C72            MOV     DPTR,#btCmdBuf+0FH
002D4F 7464              MOV     A,#064H
002D51 F0                MOVX    @DPTR,A
002D52         ?C0039?LXPROTOCOL:
  218: 
  219: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), LOGIN_REQ_DATA_LEN);
002D52 7B01              MOV     R3,#01H
002D54 7A4C              MOV     R2,#HIGH btCmdBuf+06H
002D56 7969              MOV     R1,#LOW btCmdBuf+06H
002D58 7D0A              MOV     R5,#0AH
002D5A 7C00              MOV     R4,#00H
002D5C D1D3              ACALL   _bigLittleEndianSwap
  220: 			BT_CmdFifoIn(&btCmdBuf);
002D5E 7B01              MOV     R3,#01H
002D60 7A4C              MOV     R2,#HIGH btCmdBuf
002D62 7963              MOV     R1,#LOW btCmdBuf
002D64 122680            LCALL   _BT_CmdFifoIn
  221: 			YC_Delay10ms(10);
002D67 7F0A              MOV     R7,#0AH
002D69 121F7B            LCALL   _YC_Delay10ms
  222: 			lxOptStatus = OPT_LOGIN_REQ_WAIT_ACK;
002D6C 904C5C            MOV     DPTR,#lxOptStatus
002D6F 7417              MOV     A,#017H
002D71 F0                MOVX    @DPTR,A
  223: 			break;
002D72 22                RET     
  224: 		case OPT_LOGIN_RSP:
002D73         ?C0040?LXPROTOCOL:
  225: 			*(mem_register_buf + 2) = *(LX_RECV_BUF + 2);
002D73 9048A2            MOV     DPTR,#048A2H
002D76 E0                MOVX    A,@DPTR
002D77 904C10            MOV     DPTR,#04C10H
002D7A F0                MOVX    @DPTR,A
  226: 			if(*(mem_register_buf + 2) == LOGIN_SUCCESS)
002D7B E0                MOVX    A,@DPTR
002D7C 6401              XRL     A,#01H
002D7E 7050              JNZ     ?C0041?LXPROTOCOL
  227: 			{
  228: 				//Verification code:6bytes deviceID XOR MAC
  229: 				for(i=0;i<6;i++)
002D80 904E58            MOV     DPTR,#i
002D83 F0                MOVX    @DPTR,A
002D84         ?C0042?LXPROTOCOL:
  230: 				{
  231: 					if(*(LX_RECV_BUF + 3+i) != *(mem_register_buf + 4 + i) ^ (*(mem_le_mac+i)))
002D84 904E58            MOV     DPTR,#i
002D87 E0                MOVX    A,@DPTR
002D88 FF                MOV     R7,A
002D89 2412              ADD     A,#012H
002D8B F582              MOV     DPL,A
002D8D E4                CLR     A
002D8E 344C              ADDC    A,#04CH
002D90 F583              MOV     DPH,A
002D92 E0                MOVX    A,@DPTR
002D93 FE                MOV     R6,A
002D94 74A3              MOV     A,#0A3H
002D96 2F                ADD     A,R7
002D97 F582              MOV     DPL,A
002D99 E4                CLR     A
002D9A 3448              ADDC    A,#048H
002D9C F583              MOV     DPH,A
002D9E E0                MOVX    A,@DPTR
002D9F 6E                XRL     A,R6
002DA0 6004              JZ      ?C0046?LXPROTOCOL
002DA2 7F01              MOV     R7,#01H
002DA4 8002              SJMP    ?C0047?LXPROTOCOL
002DA6         ?C0046?LXPROTOCOL:
002DA6 7F00              MOV     R7,#00H
002DA8         ?C0047?LXPROTOCOL:
002DA8 904E58            MOV     DPTR,#i
002DAB E0                MOVX    A,@DPTR
002DAC 24E8              ADD     A,#0E8H
002DAE F582              MOV     DPL,A
002DB0 E4                CLR     A
002DB1 3443              ADDC    A,#043H
002DB3 F583              MOV     DPH,A
002DB5 E0                MOVX    A,@DPTR
002DB6 6F                XRL     A,R7
002DB7 6006              JZ      ?C0044?LXPROTOCOL
  232: 					{
  233: 						//disconnected
  234: 						btCmdBuf.len = 0x01;
002DB9 904C63            MOV     DPTR,#btCmdBuf
002DBC 7401              MOV     A,#01H
002DBE F0                MOVX    @DPTR,A
  235: 						//btCmdBuf.DATA[0] = CS_CMD_LE_DISC_REQ;
  236: 						//BT_CmdFifoIn(&btCmdBuf);
  237: 						//return;
  238: 					}
  239: 				}
002DBF         ?C0044?LXPROTOCOL:
002DBF 904E58            MOV     DPTR,#i
002DC2 E0                MOVX    A,@DPTR
002DC3 04                INC     A
002DC4 F0                MOVX    @DPTR,A
002DC5 E0                MOVX    A,@DPTR
002DC6 B406BB            CJNE    A,#06H,?C0042?LXPROTOCOL
002DC9         ?C0043?LXPROTOCOL:
  240: 				//login success:sync time
  241: 				lxOptStatus = OPT_INIT_REQ;
002DC9 904C5C            MOV     DPTR,#lxOptStatus
002DCC 7420              MOV     A,#020H
002DCE F0                MOVX    @DPTR,A
  242: 			}
002DCF 22                RET     
002DD0         ?C0041?LXPROTOCOL:
  243: 			else
  244: 			{
  245: 				lxOptStatus = OPT_IDLE;
002DD0 E4                CLR     A
002DD1 904C5C            MOV     DPTR,#lxOptStatus
002DD4 F0                MOVX    @DPTR,A
  246: 				//disconnected
  247: 				btCmdBuf.len = 0x01;
002DD5 904C63            MOV     DPTR,#btCmdBuf
002DD8 04                INC     A
002DD9 F0                MOVX    @DPTR,A
  248: 				btCmdBuf.DATA[0] = CS_CMD_LE_DISC_REQ;
002DDA A3                INC     DPTR
002DDB 7429              MOV     A,#029H
002DDD F0                MOVX    @DPTR,A
  249: 				BT_CmdFifoIn(&btCmdBuf);
002DDE 7B01              MOV     R3,#01H
002DE0 7A4C              MOV     R2,#HIGH btCmdBuf
002DE2 7963              MOV     R1,#LOW btCmdBuf
002DE4 022680            LJMP    _BT_CmdFifoIn
  250: 				return;
  251: 			}
  252: 			break;
  253: 			
  254: 		case OPT_INIT_REQ:
002DE7         ?C0050?LXPROTOCOL:
  255: 			btCmdBuf.len = 0x08;
002DE7 904C63            MOV     DPTR,#btCmdBuf
002DEA 7408              MOV     A,#08H
002DEC F0                MOVX    @DPTR,A
  256: 			btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
002DED A3                INC     DPTR
002DEE 7430              MOV     A,#030H
002DF0 F0                MOVX    @DPTR,A
  257: 			btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
002DF1 A3                INC     DPTR
002DF2 741C              MOV     A,#01CH
002DF4 F0                MOVX    @DPTR,A
  258: 			btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
002DF5 E4                CLR     A
002DF6 A3                INC     DPTR
002DF7 F0                MOVX    @DPTR,A
  259: 			btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
002DF8 A3                INC     DPTR
002DF9 7410              MOV     A,#010H
002DFB F0                MOVX    @DPTR,A
  260: 			btCmdBuf.DATA[4] = INIT_REQ_DATA_LEN;
002DFC A3                INC     DPTR
002DFD 7403              MOV     A,#03H
002DFF F0                MOVX    @DPTR,A
  261: 			btCmdBuf.DATA[5] = LO_UINT16(CMD_INIT_REQ);
002E00 A3                INC     DPTR
002E01 7409              MOV     A,#09H
002E03 F0                MOVX    @DPTR,A
  262: 			btCmdBuf.DATA[6] = HI_UINT16(CMD_INIT_REQ);
002E04 E4                CLR     A
002E05 A3                INC     DPTR
002E06 F0                MOVX    @DPTR,A
  263: 			btCmdBuf.DATA[7] = 0x08;
002E07 A3                INC     DPTR
002E08 7408              MOV     A,#08H
002E0A F0                MOVX    @DPTR,A
  264: 			
  265: 			bigLittleEndianSwap(&(btCmdBuf.DATA[5]), INIT_REQ_DATA_LEN);
002E0B 7B01              MOV     R3,#01H
002E0D 7A4C              MOV     R2,#HIGH btCmdBuf+06H
002E0F 7969              MOV     R1,#LOW btCmdBuf+06H
002E11 7D03              MOV     R5,#03H
002E13 7C00              MOV     R4,#00H
002E15 D1D3              ACALL   _bigLittleEndianSwap
  266: 			BT_CmdFifoIn(&btCmdBuf);
002E17 7B01              MOV     R3,#01H
002E19 7A4C              MOV     R2,#HIGH btCmdBuf
002E1B 7963              MOV     R1,#LOW btCmdBuf
002E1D 122680            LCALL   _BT_CmdFifoIn
  267: 			lxOptStatus = OPT_INIT_REQ_WAIT_ACK;
002E20 904C5C            MOV     DPTR,#lxOptStatus
002E23 7421              MOV     A,#021H
002E25 F0                MOVX    @DPTR,A
  268: 			break;
002E26 22                RET     
  269: 		case OPT_INIT_RSP:
002E27         ?C0051?LXPROTOCOL:
  270: 			if(*(LX_RECV_BUF + 2) == 0x08)
002E27 9048A2            MOV     DPTR,#048A2H
002E2A E0                MOVX    A,@DPTR
002E2B B40817            CJNE    A,#08H,?C0052?LXPROTOCOL
  271: 			{
  272: 				//save UTC time
  273: 				dmemcpy((pxbyte)&UTCTime, LX_RECV_BUF + 3, 4);
002E2E 7A4C              MOV     R2,#HIGH UTCTime
002E30 795E              MOV     R1,#LOW UTCTime
002E32 7B01              MOV     R3,#01H
002E34 C003              PUSH    AR3
002E36 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
002E38 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
002E3B 7515A3            MOV     ?_dmemcpy?BYTE+05H,#0A3H
002E3E 751604            MOV     ?_dmemcpy?BYTE+06H,#04H
002E41 D003              POP     AR3
002E43 3147              ACALL   _dmemcpy
  274: 			}
002E45         ?C0052?LXPROTOCOL:
  275: 			lxOptStatus = OPT_IDLE;
002E45 E4                CLR     A
002E46 904C5C            MOV     DPTR,#lxOptStatus
002E49 F0                MOVX    @DPTR,A
  276: 			break;
002E4A 22                RET     
  277: 			
  278: 		case OPT_TIME_SETTING_REQ:
002E4B         ?C0053?LXPROTOCOL:
  279: 			if(*(LX_RECV_BUF+2) &0x01 == 1)
002E4B 9048A2            MOV     DPTR,#048A2H
002E4E E0                MOVX    A,@DPTR
002E4F 30E017            JNB     ACC.0,?C0054?LXPROTOCOL
  280: 			{
  281: 				dmemcpy((pxbyte)&UTCTime, LX_RECV_BUF + 3, 4);
002E52 7A4C              MOV     R2,#HIGH UTCTime
002E54 795E              MOV     R1,#LOW UTCTime
002E56 7B01              MOV     R3,#01H
002E58 C003              PUSH    AR3
002E5A 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
002E5C 751448            MOV     ?_dmemcpy?BYTE+04H,#048H
002E5F 7515A3            MOV     ?_dmemcpy?BYTE+05H,#0A3H
002E62 751604            MOV     ?_dmemcpy?BYTE+06H,#04H
002E65 D003              POP     AR3
002E67 3147              ACALL   _dmemcpy
  282: 			}
002E69         ?C0054?LXPROTOCOL:
  283: 			/*
  284: 			if(*(LX_RECV_BUF+2) &0x02 == 1)
  285: 			{
  286: 
  287: 			}
  288: 			*/
  289: 			lxSettingDeviceRespone(CMD_TIME_SETTING_REQ, DEVICE_RSP_SUCCESS);
002E69 7D01              MOV     R5,#01H
002E6B 7F02              MOV     R7,#02H
002E6D 7E10              MOV     R6,#010H
002E6F F18E              ACALL   _lxSettingDeviceRespone
  290: 			lxOptStatus = OPT_TIME_SETTING_RSP_WAIT_ACK;
002E71 904C5C            MOV     DPTR,#lxOptStatus
002E74 7426              MOV     A,#026H
002E76 F0                MOVX    @DPTR,A
  291: 			break;
002E77 22                RET     
  292: 		
  293: 		case OPT_UNIT_SETTING_REQ:
002E78         ?C0055?LXPROTOCOL:
  294: 			//save
  295: 			if(*(LX_RECV_BUF + 2) <= 3)
002E78 9048A2            MOV     DPTR,#048A2H
002E7B E0                MOVX    A,@DPTR
002E7C D3                SETB    C
002E7D 9403              SUBB    A,#03H
002E7F 500F              JNC     ?C0056?LXPROTOCOL
  296: 			{
  297: 				R_Selet_Unit = *(LX_RECV_BUF + 2);
002E81 E0                MOVX    A,@DPTR
002E82 904CC6            MOV     DPTR,#R_Selet_Unit
002E85 F0                MOVX    @DPTR,A
  298: 				lxSettingDeviceRespone(CMD_UNIT_SETTING_REQ, DEVICE_RSP_SUCCESS);
002E86 7D01              MOV     R5,#01H
002E88 7F04              MOV     R7,#04H
002E8A 7E10              MOV     R6,#010H
002E8C F18E              ACALL   _lxSettingDeviceRespone
  299: 			}
002E8E 8008              SJMP    ?C0057?LXPROTOCOL
002E90         ?C0056?LXPROTOCOL:
  300: 			else
  301: 			{
  302: 				lxSettingDeviceRespone(CMD_UNIT_SETTING_REQ, DEVICE_RSP_FAIL);
002E90 7D02              MOV     R5,#02H
002E92 7F04              MOV     R7,#04H
002E94 7E10              MOV     R6,#010H
002E96 F18E              ACALL   _lxSettingDeviceRespone
  303: 			}
002E98         ?C0057?LXPROTOCOL:
  304: 			lxOptStatus = OPT_UNIT_SETTING_RSP_WAIT_ACK;
002E98 904C5C            MOV     DPTR,#lxOptStatus
002E9B 7429              MOV     A,#029H
002E9D F0                MOVX    @DPTR,A
  305: 			break;
002E9E 22                RET     
  306: 
  307: 		case OPT_DATA_DEL_SETTING_REQ:
002E9F         ?C0058?LXPROTOCOL:
  308: 			if(*(LX_RECV_BUF + 3)&0x01 == 1)
002E9F 9048A3            MOV     DPTR,#048A3H
002EA2 E0                MOVX    A,@DPTR
002EA3 30E003            JNB     ACC.0,?C0061?LXPROTOCOL
  309: 			{
  310: 				delUserData();
002EA6 121FB1            LCALL   delUserData
  311: 			}
  312: 			if(*(LX_RECV_BUF + 3)&0x04 == 1)
  313: 			{
  314: 				UTCTime = 0;
  315: 				R_Selet_Unit = CS_ScaleDisplay_L_kg;
  316: 			}
  317: 			if(*(LX_RECV_BUF + 3)&0x08 == 1)
  318: 			{
  319: 				QueueInit();
  320: 			}
002EA9         ?C0061?LXPROTOCOL:
  321: 			
  322: 			lxSettingDeviceRespone(CMD_DATA_CLEAR_SETTING_REQ, DEVICE_RSP_SUCCESS);
002EA9 7D01              MOV     R5,#01H
002EAB 7F05              MOV     R7,#05H
002EAD 7E10              MOV     R6,#010H
002EAF F18E              ACALL   _lxSettingDeviceRespone
  323: 			lxOptStatus = OPT_DATA_DEL_SETTING_RSP_WAIT_ACK;
002EB1 904C5C            MOV     DPTR,#lxOptStatus
002EB4 7432              MOV     A,#032H
002EB6 F0                MOVX    @DPTR,A
  324: 			break;
002EB7 22                RET     
  325: #endif
  326: 		case OPT_SYNC_DATA_REQ:
002EB8         ?C0062?LXPROTOCOL:
  327: 			//forbidden
  328: 			if(*(LX_RECV_BUF + 3) == 0)
002EB8 9048A3            MOV     DPTR,#048A3H
002EBB E0                MOVX    A,@DPTR
002EBC 7005              JNZ     ?C0063?LXPROTOCOL
  329: 			{
  330: 				lxOptStatus = OPT_IDLE;
002EBE 904C5C            MOV     DPTR,#lxOptStatus
002EC1 F0                MOVX    @DPTR,A
  331: 			}
002EC2 22                RET     
002EC3         ?C0063?LXPROTOCOL:
  332: 			else
  333: 			{
  334: 				lxOptStatus = OPT_SYNC_DATA_RSP;
002EC3 904C5C            MOV     DPTR,#lxOptStatus
002EC6 7436              MOV     A,#036H
002EC8 F0                MOVX    @DPTR,A
  335: 			}
  336: 			break;
002EC9 22                RET     
  337: 		case OPT_SYNC_DATA_RSP:
002ECA         ?C0065?LXPROTOCOL:
  338: 			//send measuredata
  339: 			sendHistoryData();
002ECA 317B              ACALL   sendHistoryData
  340: 			lxOptStatus = OPT_SYNC_DATA_RSP_WAIT_ACK;
002ECC 904C5C            MOV     DPTR,#lxOptStatus
002ECF 7437              MOV     A,#037H
002ED1 F0                MOVX    @DPTR,A
  341: 			break;
  342: 		/*
  343: 		case LX_OPT_STATUS_RESEND:
  344: 			BT_CmdFifoIn(&btCmdBuf);
  345: 			lxOptStatus = OPT_IDLE;
  346: 			break;
  347: 			*/
  348: 	}
  349: }
002ED2         ?C0049?LXPROTOCOL:
002ED2 22                RET     
----- FUNCTION lxOptProcess (END) -------


----- FUNCTION _bigLittleEndianSwap (BEGIN) -----
 FILE: 'lxProtocol.c'
   17: static void bigLittleEndianSwap(u8_t *buf, u16_t len)
   18: {
002ED3 904DB4            MOV     DPTR,#buf
002ED6 EB                MOV     A,R3
002ED7 F0                MOVX    @DPTR,A
002ED8 A3                INC     DPTR
002ED9 EA                MOV     A,R2
002EDA F0                MOVX    @DPTR,A
002EDB A3                INC     DPTR
002EDC E9                MOV     A,R1
002EDD F0                MOVX    @DPTR,A
002EDE A3                INC     DPTR
002EDF EC                MOV     A,R4
002EE0 F0                MOVX    @DPTR,A
002EE1 A3                INC     DPTR
002EE2 ED                MOV     A,R5
002EE3 F0                MOVX    @DPTR,A
   19: 	u16_t i, size;
   20: 	u8_t temp;
   21: 	
   22: 	size = len -1;
002EE4 24FF              ADD     A,#0FFH
002EE6 FE                MOV     R6,A
002EE7 EC                MOV     A,R4
002EE8 34FF              ADDC    A,#0FFH
002EEA 904DBB            MOV     DPTR,#size
002EED F0                MOVX    @DPTR,A
002EEE A3                INC     DPTR
002EEF CE                XCH     A,R6
002EF0 F0                MOVX    @DPTR,A
   23: 	for(i=0; i<len/2; i++)
002EF1 E4                CLR     A
002EF2 904DB9            MOV     DPTR,#i
002EF5 F0                MOVX    @DPTR,A
002EF6 A3                INC     DPTR
002EF7 F0                MOVX    @DPTR,A
002EF8         ?C0001?LXPROTOCOL:
002EF8 904DB7            MOV     DPTR,#len
002EFB E0                MOVX    A,@DPTR
002EFC C3                CLR     C
002EFD 13                RRC     A
002EFE FE                MOV     R6,A
002EFF A3                INC     DPTR
002F00 E0                MOVX    A,@DPTR
002F01 13                RRC     A
002F02 FF                MOV     R7,A
002F03 C3                CLR     C
002F04 904DBA            MOV     DPTR,#i+01H
002F07 E0                MOVX    A,@DPTR
002F08 9F                SUBB    A,R7
002F09 904DB9            MOV     DPTR,#i
002F0C E0                MOVX    A,@DPTR
002F0D 9E                SUBB    A,R6
002F0E 507D              JNC     ?C0004?LXPROTOCOL
   24: 	{
   25: 		temp = buf[i];
002F10 904DB4            MOV     DPTR,#buf
002F13 E0                MOVX    A,@DPTR
002F14 FB                MOV     R3,A
002F15 A3                INC     DPTR
002F16 E0                MOVX    A,@DPTR
002F17 FA                MOV     R2,A
002F18 A3                INC     DPTR
002F19 E0                MOVX    A,@DPTR
002F1A F9                MOV     R1,A
002F1B 904DB9            MOV     DPTR,#i
002F1E E0                MOVX    A,@DPTR
002F1F FE                MOV     R6,A
002F20 A3                INC     DPTR
002F21 E0                MOVX    A,@DPTR
002F22 F582              MOV     DPL,A
002F24 8E83              MOV     DPH,R6
002F26 120112            LCALL   ?C?CLDOPTR
002F29 904DBD            MOV     DPTR,#temp
002F2C F0                MOVX    @DPTR,A
   26: 		buf[i] = buf[size -i];
002F2D 904DB9            MOV     DPTR,#i
002F30 E0                MOVX    A,@DPTR
002F31 A3                INC     DPTR
002F32 E0                MOVX    A,@DPTR
002F33 FF                MOV     R7,A
002F34 C3                CLR     C
002F35 904DBC            MOV     DPTR,#size+01H
002F38 E0                MOVX    A,@DPTR
002F39 9F                SUBB    A,R7
002F3A FF                MOV     R7,A
002F3B 904DBB            MOV     DPTR,#size
002F3E E0                MOVX    A,@DPTR
002F3F 9E                SUBB    A,R6
002F40 8F82              MOV     DPL,R7
002F42 F583              MOV     DPH,A
002F44 120112            LCALL   ?C?CLDOPTR
002F47 FF                MOV     R7,A
002F48 904DB9            MOV     DPTR,#i
002F4B E0                MOVX    A,@DPTR
002F4C FC                MOV     R4,A
002F4D A3                INC     DPTR
002F4E E0                MOVX    A,@DPTR
002F4F FD                MOV     R5,A
002F50 F582              MOV     DPL,A
002F52 8C83              MOV     DPH,R4
002F54 EF                MOV     A,R7
002F55 120151            LCALL   ?C?CSTOPTR
   27: 		buf[size -i] = temp;
002F58 904DBD            MOV     DPTR,#temp
002F5B E0                MOVX    A,@DPTR
002F5C FF                MOV     R7,A
002F5D C3                CLR     C
002F5E 904DBC            MOV     DPTR,#size+01H
002F61 E0                MOVX    A,@DPTR
002F62 9D                SUBB    A,R5
002F63 FD                MOV     R5,A
002F64 904DBB            MOV     DPTR,#size
002F67 E0                MOVX    A,@DPTR
002F68 9C                SUBB    A,R4
002F69 FC                MOV     R4,A
002F6A 904DB4            MOV     DPTR,#buf
002F6D E0                MOVX    A,@DPTR
002F6E FB                MOV     R3,A
002F6F A3                INC     DPTR
002F70 E0                MOVX    A,@DPTR
002F71 FA                MOV     R2,A
002F72 A3                INC     DPTR
002F73 E0                MOVX    A,@DPTR
002F74 F9                MOV     R1,A
002F75 8D82              MOV     DPL,R5
002F77 8C83              MOV     DPH,R4
002F79 EF                MOV     A,R7
002F7A 120151            LCALL   ?C?CSTOPTR
   28: 	}
002F7D 904DBA            MOV     DPTR,#i+01H
002F80 E0                MOVX    A,@DPTR
002F81 04                INC     A
002F82 F0                MOVX    @DPTR,A
002F83 7006              JNZ     ?C0092?LXPROTOCOL
002F85 904DB9            MOV     DPTR,#i
002F88 E0                MOVX    A,@DPTR
002F89 04                INC     A
002F8A F0                MOVX    @DPTR,A
002F8B         ?C0092?LXPROTOCOL:
002F8B C1F8              AJMP    ?C0001?LXPROTOCOL
   29: }
002F8D         ?C0004?LXPROTOCOL:
002F8D 22                RET     
----- FUNCTION _bigLittleEndianSwap (END) -------


----- FUNCTION _lxSettingDeviceRespone (BEGIN) -----
 FILE: 'lxProtocol.c'
  351: static void lxSettingDeviceRespone(u16_t cmd, u8_t state)
  352: {
;---- Variable 'cmd' assigned to Register 'R2/R3' ----
002F8E AB07              MOV     R3,AR7
002F90 AA06              MOV     R2,AR6
;---- Variable 'state' assigned to Register 'R5' ----
  353: 	btCmdBuf.len = DEVICE_RSP_DATA_LEN + 5;
  354: 	btCmdBuf.DATA[0] = CS_CMD_LE_TX_DAT;
002F92 904C63            MOV     DPTR,#btCmdBuf
002F95 740A              MOV     A,#0AH
002F97 F0                MOVX    @DPTR,A
  355: 	btCmdBuf.DATA[1] = LO_UINT16(HANDLE_UUIDA621_NOTIFY);
002F98 A3                INC     DPTR
002F99 7430              MOV     A,#030H
002F9B F0                MOVX    @DPTR,A
  356: 	btCmdBuf.DATA[2] = HI_UINT16(HANDLE_UUIDA621_NOTIFY);
002F9C A3                INC     DPTR
002F9D 741C              MOV     A,#01CH
002F9F F0                MOVX    @DPTR,A
  357: 	btCmdBuf.DATA[3] = TOTAL_FRAMES_SINGLE << 4;
002FA0 E4                CLR     A
002FA1 A3                INC     DPTR
002FA2 F0                MOVX    @DPTR,A
  358: 	btCmdBuf.DATA[4] = DEVICE_RSP_DATA_LEN;
002FA3 A3                INC     DPTR
002FA4 7410              MOV     A,#010H
002FA6 F0                MOVX    @DPTR,A
  359: 	btCmdBuf.DATA[5] = LO_UINT16(CMD_DEVICE_RSP);
002FA7 A3                INC     DPTR
002FA8 7405              MOV     A,#05H
002FAA F0                MOVX    @DPTR,A
  360: 	btCmdBuf.DATA[6] = HI_UINT16(CMD_DEVICE_RSP);
002FAB E4                CLR     A
002FAC A3                INC     DPTR
002FAD F0                MOVX    @DPTR,A
  361: 	btCmdBuf.DATA[7] = LO_UINT16(cmd);
002FAE A3                INC     DPTR
002FAF 7410              MOV     A,#010H
002FB1 F0                MOVX    @DPTR,A
  362: 	btCmdBuf.DATA[8] = HI_UINT16(cmd);
002FB2 EF                MOV     A,R7
002FB3 A3                INC     DPTR
002FB4 F0                MOVX    @DPTR,A
  363: 	btCmdBuf.DATA[9] = state;
002FB5 EE                MOV     A,R6
002FB6 A3                INC     DPTR
002FB7 F0                MOVX    @DPTR,A
  364: 
002FB8 A3                INC     DPTR
002FB9 ED                MOV     A,R5
002FBA F0                MOVX    @DPTR,A
  365: 	bigLittleEndianSwap(&(btCmdBuf.DATA[5]), DEVICE_RSP_DATA_LEN);
002FBB 7B01              MOV     R3,#01H
002FBD 7A4C              MOV     R2,#HIGH btCmdBuf+06H
002FBF 7969              MOV     R1,#LOW btCmdBuf+06H
002FC1 7D05              MOV     R5,#05H
002FC3 7C00              MOV     R4,#00H
002FC5 D1D3              ACALL   _bigLittleEndianSwap
  366: 	BT_CmdFifoIn(&btCmdBuf);
002FC7 7B01              MOV     R3,#01H
002FC9 7A4C              MOV     R2,#HIGH btCmdBuf
002FCB 7963              MOV     R1,#LOW btCmdBuf
002FCD 122680            LCALL   _BT_CmdFifoIn
  367: 	YC_Delay10ms(10);
002FD0 7F0A              MOV     R7,#0AH
002FD2 021F7B            LJMP    _YC_Delay10ms
  368: }
----- FUNCTION _lxSettingDeviceRespone (END) -------


----- FUNCTION _cmemcpy (BEGIN) -----
 FILE: 'YC_Utilities.c'
   28: void cmemcpy(pxbyte dest, const u8_t* src, u8_t len) small
   29: {
002FD5 8E21              MOV     dest,R6
002FD7 8F22              MOV     dest+01H,R7
002FD9 8B23              MOV     src,R3
002FDB 8A24              MOV     src+01H,R2
002FDD 8925              MOV     src+02H,R1
002FDF         ?C0011?YC_UTILITIES:
   30: 	while(len--)
002FDF AF26              MOV     R7,len
002FE1 1526              DEC     len
002FE3 EF                MOV     A,R7
002FE4 6025              JZ      ?C0013?YC_UTILITIES
   31: 		*dest++ = (u8_t)(*src++);
002FE6 AB23              MOV     R3,src
002FE8 0525              INC     src+02H
002FEA E525              MOV     A,src+02H
002FEC AA24              MOV     R2,src+01H
002FEE 7002              JNZ     ?C0049?YC_UTILITIES
002FF0 0524              INC     src+01H
002FF2         ?C0049?YC_UTILITIES:
002FF2 14                DEC     A
002FF3 F9                MOV     R1,A
002FF4 1200F9            LCALL   ?C?CLDPTR
002FF7 FF                MOV     R7,A
002FF8 0522              INC     dest+01H
002FFA E522              MOV     A,dest+01H
002FFC AC21              MOV     R4,dest
002FFE 7002              JNZ     ?C0050?YC_UTILITIES
003000 0521              INC     dest
003002         ?C0050?YC_UTILITIES:
003002 14                DEC     A
003003 F582              MOV     DPL,A
003005 8C83              MOV     DPH,R4
003007 EF                MOV     A,R7
003008 F0                MOVX    @DPTR,A
003009 80D4              SJMP    ?C0011?YC_UTILITIES
   32: 	return;
   33: }
00300B         ?C0013?YC_UTILITIES:
00300B 22                RET     
----- FUNCTION _cmemcpy (END) -------


----- FUNCTION _YC_MemCheckEmpty (BEGIN) -----
 FILE: 'YC_Utilities.c'
   34: bool YC_MemCheckEmpty(u8_t *mem, u8_t len)
   35: {
00300C 904E30            MOV     DPTR,#mem
00300F EB                MOV     A,R3
003010 F0                MOVX    @DPTR,A
003011 A3                INC     DPTR
003012 EA                MOV     A,R2
003013 F0                MOVX    @DPTR,A
003014 A3                INC     DPTR
003015 E9                MOV     A,R1
003016 F0                MOVX    @DPTR,A
003017 A3                INC     DPTR
003018 ED                MOV     A,R5
003019 F0                MOVX    @DPTR,A
   36: 	int i;
   37: 	for(i=0;i<len;i++)
;---- Variable 'i' assigned to Register 'R6/R7' ----
00301A E4                CLR     A
00301B FF                MOV     R7,A
00301C FE                MOV     R6,A
00301D         ?C0014?YC_UTILITIES:
00301D 904E33            MOV     DPTR,#len
003020 E0                MOVX    A,@DPTR
003021 FD                MOV     R5,A
003022 C3                CLR     C
003023 EF                MOV     A,R7
003024 9D                SUBB    A,R5
003025 7480              MOV     A,#080H
003027 F8                MOV     R0,A
003028 6E                XRL     A,R6
003029 98                SUBB    A,R0
00302A 5034              JNC     ?C0015?YC_UTILITIES
   38: 	{
   39: 		if(mem[i])
00302C 904E30            MOV     DPTR,#mem
00302F E0                MOVX    A,@DPTR
003030 FB                MOV     R3,A
003031 A3                INC     DPTR
003032 E0                MOVX    A,@DPTR
003033 FA                MOV     R2,A
003034 A3                INC     DPTR
003035 E0                MOVX    A,@DPTR
003036 F9                MOV     R1,A
003037 8F82              MOV     DPL,R7
003039 8E83              MOV     DPH,R6
00303B 120112            LCALL   ?C?CLDOPTR
00303E FD                MOV     R5,A
00303F 701F              JNZ     ?C0015?YC_UTILITIES
   40: 		{
   41: 			break;
   42: 		}
003041         ?C0017?YC_UTILITIES:
   43: 		if(i==(len-1)&&mem[i]==0)
003041 904E33            MOV     DPTR,#len
003044 E0                MOVX    A,@DPTR
003045 24FF              ADD     A,#0FFH
003047 FB                MOV     R3,A
003048 E4                CLR     A
003049 34FF              ADDC    A,#0FFH
00304B FA                MOV     R2,A
00304C EB                MOV     A,R3
00304D B50709            CJNE    A,AR7,?C0016?YC_UTILITIES
003050 EA                MOV     A,R2
003051 B50605            CJNE    A,AR6,?C0016?YC_UTILITIES
003054 ED                MOV     A,R5
003055 7002              JNZ     ?C0016?YC_UTILITIES
   44: 		{
   45: 			return 0;
003057 C3                CLR     C
003058 22                RET     
   46: 		}
   47: 	}
003059         ?C0016?YC_UTILITIES:
003059 0F                INC     R7
00305A BF0001            CJNE    R7,#00H,?C0052?YC_UTILITIES
00305D 0E                INC     R6
00305E         ?C0052?YC_UTILITIES:
00305E 80BD              SJMP    ?C0014?YC_UTILITIES
003060         ?C0015?YC_UTILITIES:
   48: 	return 1;
003060 D3                SETB    C
   49: }
003061 22                RET     
----- FUNCTION _YC_MemCheckEmpty (END) -------


----- FUNCTION _YC_Delay1S (BEGIN) -----
 FILE: 'YC_Utilities.c'
   69: void YC_Delay1S(u8_t Time)
   70: {
;---- Variable 'Time' assigned to Register 'R7' ----
   71: 	u16_t j,k;
   72: 	for(;Time>0;Time--)
003062         ?C0034?YC_UTILITIES:
003062 EF                MOV     A,R7
003063 D3                SETB    C
003064 9400              SUBB    A,#00H
003066 401F              JC      ?C0043?YC_UTILITIES
   73: 	{
   74: 		for(j=0;j<1000;j++)
;---- Variable 'j' assigned to Register 'R4/R5' ----
003068 E4                CLR     A
003069 FD                MOV     R5,A
00306A FC                MOV     R4,A
00306B         ?C0037?YC_UTILITIES:
   75: 		{
   76: 			for(k=0;k<1150;k++);
;---- Variable 'k' assigned to Register 'R2/R3' ----
00306B E4                CLR     A
00306C FB                MOV     R3,A
00306D FA                MOV     R2,A
00306E         ?C0040?YC_UTILITIES:
00306E 0B                INC     R3
00306F BB0001            CJNE    R3,#00H,?C0055?YC_UTILITIES
003072 0A                INC     R2
003073         ?C0055?YC_UTILITIES:
003073 BA04F8            CJNE    R2,#04H,?C0040?YC_UTILITIES
003076 BB7EF5            CJNE    R3,#07EH,?C0040?YC_UTILITIES
   77: 		}
003079         ?C0039?YC_UTILITIES:
003079 0D                INC     R5
00307A BD0001            CJNE    R5,#00H,?C0056?YC_UTILITIES
00307D 0C                INC     R4
00307E         ?C0056?YC_UTILITIES:
00307E BC03EA            CJNE    R4,#03H,?C0037?YC_UTILITIES
003081 BDE8E7            CJNE    R5,#0E8H,?C0037?YC_UTILITIES
   78: 	}
003084         ?C0036?YC_UTILITIES:
003084 1F                DEC     R7
003085 80DB              SJMP    ?C0034?YC_UTILITIES
   79: }
003087         ?C0043?YC_UTILITIES:
003087 22                RET     
----- FUNCTION _YC_Delay1S (END) -------


----- FUNCTION CS_Scale_WeightProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  199: void CS_Scale_WeightProc(void)
  200: {
  201: 	u16_t	R_AD_BUF;
  202: 	
  203: 	R_AD_BUF = CS_Scale_GetDeltaAD(GetDeltaAD);
003088 E4                CLR     A
003089 FF                MOV     R7,A
00308A 1217E6            LCALL   _CS_Scale_GetDeltaAD
;---- Variable 'R_AD_BUF' assigned to Register 'R6/R7' ----
  204: 	R_AD_BUF = CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
00308D AD07              MOV     R5,AR7
00308F AC06              MOV     R4,AR6
003091 E4                CLR     A
003092 FF                MOV     R7,A
003093 F1C1              ACALL   _CS_Scale_AdcFilter
  205: 	CS_Scale_GetWeight(R_AD_BUF);
003095 D170              ACALL   _CS_Scale_GetWeight
  206: 	CS_Scale_ZeroProc(RunningZero,0);
003097 E4                CLR     A
003098 FD                MOV     R5,A
003099 FC                MOV     R4,A
00309A 7F07              MOV     R7,#07H
00309C 1212F7            LCALL   _CS_Scale_ZeroProc
  207: 	CS_Scale_LockProc(LockProcRun);
00309F E4                CLR     A
0030A0 FF                MOV     R7,A
0030A1 91FF              ACALL   _CS_Scale_LockProc
  208: 	CS_Scale_JudgeOverLoad(0);
0030A3 E4                CLR     A
0030A4 FF                MOV     R7,A
0030A5 B16D              ACALL   _CS_Scale_JudgeOverLoad
  209: 	CS_Scale_JudgeLowBat(0);
0030A7 E4                CLR     A
0030A8 FF                MOV     R7,A
0030A9 1217D4            LCALL   _CS_Scale_JudgeLowBat
  210: 	CS_Scale_JudgeSteady(JudgeSteadyRun);
0030AC E4                CLR     A
0030AD FF                MOV     R7,A
;----                  JMP     _CS_Scale_JudgeSteady
  211: 	
----- FUNCTION CS_Scale_WeightProc (END) -------


----- FUNCTION _CS_Scale_JudgeSteady (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  673: u8_t CS_Scale_JudgeSteady(u8_t option)
  674: {
;---- Variable 'option' assigned to Register 'R7' ----
  675: 
  676: 	u16_t	weight_temp;
  677: 	static	u16_t xdata R_Weight_kg_old;
  678: 	static	u8_t	  xdata R_Weight_SameTimes;
  679: 	static	u8_t xdata B_Weight_SmallSteady;		//小重量稳定标志
  680: 	static	u8_t xdata B_Weight_HeavySteady;	//大重量稳定标志
  681: 	
  682: 	if(option==ResetSteady)
0030AE EF                MOV     A,R7
0030AF B4010B            CJNE    A,#01H,?C0092?CS_SCALE_PROC
  683: 		{
  684: 		R_Weight_SameTimes = 0;
0030B2 E4                CLR     A
0030B3 904CA4            MOV     DPTR,#R_Weight_SameTimes
0030B6 F0                MOVX    @DPTR,A
  685: 		B_Weight_SmallSteady = false;
0030B7 A3                INC     DPTR
0030B8 F0                MOVX    @DPTR,A
  686: 		B_Weight_HeavySteady = false;
0030B9 A3                INC     DPTR
0030BA F0                MOVX    @DPTR,A
  687: 		return 0;
0030BB FF                MOV     R7,A
0030BC 22                RET     
  688: 		}	
0030BD         ?C0092?CS_SCALE_PROC:
  689: 
  690: 	if(option==GetIfSmallSteady)
0030BD EF                MOV     A,R7
0030BE B40206            CJNE    A,#02H,?C0094?CS_SCALE_PROC
  691: 		return B_Weight_SmallSteady;
0030C1 904CA5            MOV     DPTR,#B_Weight_SmallSteady
0030C4 E0                MOVX    A,@DPTR
0030C5 FF                MOV     R7,A
0030C6 22                RET     
0030C7         ?C0094?CS_SCALE_PROC:
  692: 
  693: 	if(option==GetIfHeavySteady)
0030C7 EF                MOV     A,R7
0030C8 B40306            CJNE    A,#03H,?C0095?CS_SCALE_PROC
  694: 		return B_Weight_HeavySteady;
0030CB 904CA6            MOV     DPTR,#B_Weight_HeavySteady
0030CE E0                MOVX    A,@DPTR
0030CF FF                MOV     R7,A
0030D0 22                RET     
0030D1         ?C0095?CS_SCALE_PROC:
  695: 	
  696: 	if(CS_Scale_LockProc(GetIfLock)==false)
0030D1 7F02              MOV     R7,#02H
0030D3 91FF              ACALL   _CS_Scale_LockProc
0030D5 EF                MOV     A,R7
0030D6 6002              JZ      $ + 4H
0030D8 218B              AJMP    ?C0096?CS_SCALE_PROC
  697: 		{
  698: 	
  699: 		if(R_UnitWeight.origin > R_Weight_kg_old)
0030DA 904CA2            MOV     DPTR,#R_Weight_kg_old
0030DD E0                MOVX    A,@DPTR
0030DE FE                MOV     R6,A
0030DF A3                INC     DPTR
0030E0 E0                MOVX    A,@DPTR
0030E1 FF                MOV     R7,A
0030E2 904CC9            MOV     DPTR,#R_UnitWeight
0030E5 E0                MOVX    A,@DPTR
0030E6 FC                MOV     R4,A
0030E7 A3                INC     DPTR
0030E8 E0                MOVX    A,@DPTR
0030E9 FD                MOV     R5,A
0030EA D3                SETB    C
0030EB 9F                SUBB    A,R7
0030EC EC                MOV     A,R4
0030ED 9E                SUBB    A,R6
0030EE 400E              JC      ?C0097?CS_SCALE_PROC
  700: 			weight_temp = R_UnitWeight.origin -R_Weight_kg_old;
0030F0 ED                MOV     A,R5
0030F1 9F                SUBB    A,R7
0030F2 FF                MOV     R7,A
0030F3 EC                MOV     A,R4
0030F4 9E                SUBB    A,R6
0030F5 904E50            MOV     DPTR,#weight_temp
0030F8 F0                MOVX    @DPTR,A
0030F9 A3                INC     DPTR
0030FA EF                MOV     A,R7
0030FB F0                MOVX    @DPTR,A
0030FC 801B              SJMP    ?C0098?CS_SCALE_PROC
0030FE         ?C0097?CS_SCALE_PROC:
  701: 		else
  702: 			weight_temp = R_Weight_kg_old -R_UnitWeight.origin;
0030FE 904CC9            MOV     DPTR,#R_UnitWeight
003101 E0                MOVX    A,@DPTR
003102 FE                MOV     R6,A
003103 A3                INC     DPTR
003104 E0                MOVX    A,@DPTR
003105 FF                MOV     R7,A
003106 C3                CLR     C
003107 904CA3            MOV     DPTR,#R_Weight_kg_old+01H
00310A E0                MOVX    A,@DPTR
00310B 9F                SUBB    A,R7
00310C FF                MOV     R7,A
00310D 904CA2            MOV     DPTR,#R_Weight_kg_old
003110 E0                MOVX    A,@DPTR
003111 9E                SUBB    A,R6
003112 904E50            MOV     DPTR,#weight_temp
003115 F0                MOVX    @DPTR,A
003116 A3                INC     DPTR
003117 EF                MOV     A,R7
003118 F0                MOVX    @DPTR,A
003119         ?C0098?CS_SCALE_PROC:
  703: 		
  704: 		if(weight_temp <  CS_Scale_SameWeightRange)
003119 C3                CLR     C
00311A 904E51            MOV     DPTR,#weight_temp+01H
00311D E0                MOVX    A,@DPTR
00311E 940A              SUBB    A,#0AH
003120 904E50            MOV     DPTR,#weight_temp
003123 E0                MOVX    A,@DPTR
003124 9400              SUBB    A,#00H
003126 500E              JNC     ?C0099?CS_SCALE_PROC
  705: 			{
  706: 			if(R_Weight_SameTimes<255)
003128 904CA4            MOV     DPTR,#R_Weight_SameTimes
00312B E0                MOVX    A,@DPTR
00312C C3                CLR     C
00312D 94FF              SUBB    A,#0FFH
00312F 500A              JNC     ?C0101?CS_SCALE_PROC
  707: 				R_Weight_SameTimes++;
003131 E0                MOVX    A,@DPTR
003132 04                INC     A
003133 F0                MOVX    @DPTR,A
  708: 			}
003134 8005              SJMP    ?C0101?CS_SCALE_PROC
003136         ?C0099?CS_SCALE_PROC:
  709: 		else
  710: 			R_Weight_SameTimes = 0;
003136 E4                CLR     A
003137 904CA4            MOV     DPTR,#R_Weight_SameTimes
00313A F0                MOVX    @DPTR,A
00313B         ?C0101?CS_SCALE_PROC:
  711: 	
  712: 		
  713: 		R_Weight_kg_old = R_UnitWeight.origin;
00313B 904CC9            MOV     DPTR,#R_UnitWeight
00313E E0                MOVX    A,@DPTR
00313F FE                MOV     R6,A
003140 A3                INC     DPTR
003141 E0                MOVX    A,@DPTR
003142 FF                MOV     R7,A
003143 904CA2            MOV     DPTR,#R_Weight_kg_old
003146 EE                MOV     A,R6
003147 F0                MOVX    @DPTR,A
003148 A3                INC     DPTR
003149 EF                MOV     A,R7
00314A F0                MOVX    @DPTR,A
  714: 
  715: 		B_Weight_SmallSteady = false;
00314B E4                CLR     A
00314C 904CA5            MOV     DPTR,#B_Weight_SmallSteady
00314F F0                MOVX    @DPTR,A
  716: 		B_Weight_HeavySteady = false;
003150 A3                INC     DPTR
003151 F0                MOVX    @DPTR,A
  717: 		
  718: 		if(R_UnitWeight.origin < CS_Scale_MinLockWeight)
003152 C3                CLR     C
003153 EF                MOV     A,R7
003154 94FA              SUBB    A,#0FAH
003156 EE                MOV     A,R6
003157 9400              SUBB    A,#00H
003159 500E              JNC     ?C0102?CS_SCALE_PROC
  719: 			{
  720: 			if(R_Weight_SameTimes>40)
00315B 904CA4            MOV     DPTR,#R_Weight_SameTimes
00315E E0                MOVX    A,@DPTR
00315F 9428              SUBB    A,#028H
003161 4028              JC      ?C0096?CS_SCALE_PROC
  721: 				B_Weight_SmallSteady = true;		
003163 A3                INC     DPTR
003164 7401              MOV     A,#01H
003166 F0                MOVX    @DPTR,A
  722: 			}
003167 8022              SJMP    ?C0096?CS_SCALE_PROC
003169         ?C0102?CS_SCALE_PROC:
  723: 		else
  724: 			{			
  725: 			if(R_Weight_SameTimes>40)
003169 904CA4            MOV     DPTR,#R_Weight_SameTimes
00316C E0                MOVX    A,@DPTR
00316D D3                SETB    C
00316E 9428              SUBB    A,#028H
003170 4019              JC      ?C0096?CS_SCALE_PROC
  726: 				{
  727: 				B_Weight_HeavySteady = true;		
003172 904CA6            MOV     DPTR,#B_Weight_HeavySteady
003175 7401              MOV     A,#01H
003177 F0                MOVX    @DPTR,A
  728: 				R_Scale_state = CS_Scale_state_locking;
003178 904CC5            MOV     DPTR,#R_Scale_state
00317B 7404              MOV     A,#04H
00317D F0                MOVX    @DPTR,A
  729: 				CS_SoftTimer(ResetSoftTimer);		//软件定时器开始用于锁定闪显示计时
00317E 7F02              MOV     R7,#02H
003180 120EE1            LCALL   _CS_SoftTimer
  730: 				CS_Scale_SteadyProc(SteadyProcReset);
003183 E4                CLR     A
003184 FF                MOV     R7,A
003185 715F              ACALL   _CS_Scale_SteadyProc
  731: 				CS_Scale_TimeOutProc(CS_Reset_AllTime);
003187 7F06              MOV     R7,#06H
003189 318E              ACALL   _CS_Scale_TimeOutProc
  732: 				}
  733: 			}
  734: 		}
00318B         ?C0096?CS_SCALE_PROC:
  735: 	return 0;
00318B 7F00              MOV     R7,#00H
  736: }
00318D 22                RET     
----- FUNCTION _CS_Scale_JudgeSteady (END) -------


----- FUNCTION _CS_Scale_TimeOutProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1445: void CS_Scale_TimeOutProc(u8_t option)
 1446: {
;---- Variable 'option' assigned to Register 'R7' ----
 1447: 	static	CS_TimeOut_T xdata R_TimeOut;
 1448: 	static	u8_t xdata B_TimeBase_1s;		//1s时基
 1449: 
 1450: 	if(option==CS_SetTimeBase1S)
00318E EF                MOV     A,R7
00318F B40707            CJNE    A,#07H,?C0211?CS_SCALE_PROC
 1451: 		{
 1452: 		B_TimeBase_1s = true;
003192 904CBF            MOV     DPTR,#B_TimeBase_1s
003195 7401              MOV     A,#01H
003197 F0                MOVX    @DPTR,A
003198 22                RET     
 1453: 		return;
 1454: 		}
003199         ?C0211?CS_SCALE_PROC:
 1455: 	//超时计数器复位
 1456: 	if(option)
003199 EF                MOV     A,R7
00319A 6040              JZ      ?C0213?CS_SCALE_PROC
 1457: 	{
 1458: 	if(option==CS_Reset_ZeroTime)
00319C B40105            CJNE    A,#01H,?C0214?CS_SCALE_PROC
 1459: 		R_TimeOut.zero=0;
00319F E4                CLR     A
0031A0 904CBA            MOV     DPTR,#R_TimeOut
0031A3 F0                MOVX    @DPTR,A
0031A4         ?C0214?CS_SCALE_PROC:
 1460: 	if(option==CS_Reset_LockTime)
0031A4 EF                MOV     A,R7
0031A5 B40205            CJNE    A,#02H,?C0215?CS_SCALE_PROC
 1461: 		R_TimeOut.lock=0;
0031A8 E4                CLR     A
0031A9 904CBB            MOV     DPTR,#R_TimeOut+01H
0031AC F0                MOVX    @DPTR,A
0031AD         ?C0215?CS_SCALE_PROC:
 1462: 	if(option==CS_Reset_UnstableTime)
0031AD EF                MOV     A,R7
0031AE B40305            CJNE    A,#03H,?C0216?CS_SCALE_PROC
 1463: 		R_TimeOut.unstable=0;
0031B1 E4                CLR     A
0031B2 904CBC            MOV     DPTR,#R_TimeOut+02H
0031B5 F0                MOVX    @DPTR,A
0031B6         ?C0216?CS_SCALE_PROC:
 1464: 	if(option==CS_Reset_OverLoadTime)
0031B6 EF                MOV     A,R7
0031B7 B40405            CJNE    A,#04H,?C0217?CS_SCALE_PROC
 1465: 		R_TimeOut.overload=0;
0031BA E4                CLR     A
0031BB 904CBD            MOV     DPTR,#R_TimeOut+03H
0031BE F0                MOVX    @DPTR,A
0031BF         ?C0217?CS_SCALE_PROC:
 1466: 	if(option==CS_Reset_LowBatTime)
0031BF EF                MOV     A,R7
0031C0 B40505            CJNE    A,#05H,?C0218?CS_SCALE_PROC
 1467: 		R_TimeOut.lowbat=0;
0031C3 E4                CLR     A
0031C4 904CBE            MOV     DPTR,#R_TimeOut+04H
0031C7 F0                MOVX    @DPTR,A
0031C8         ?C0218?CS_SCALE_PROC:
 1468: 	if(option==CS_Reset_AllTime)
0031C8 EF                MOV     A,R7
0031C9 6406              XRL     A,#06H
0031CB 6002              JZ      $ + 4H
0031CD 41B3              AJMP    ?C0212?CS_SCALE_PROC
 1469: 		{
 1470: 		R_TimeOut.zero=0;
0031CF 904CBA            MOV     DPTR,#R_TimeOut
0031D2 F0                MOVX    @DPTR,A
 1471: 		R_TimeOut.lock=0;
0031D3 A3                INC     DPTR
0031D4 F0                MOVX    @DPTR,A
 1472: 		R_TimeOut.unstable=0;
0031D5 A3                INC     DPTR
0031D6 F0                MOVX    @DPTR,A
 1473: 		R_TimeOut.overload=0;
0031D7 A3                INC     DPTR
0031D8 F0                MOVX    @DPTR,A
 1474: 		R_TimeOut.lowbat=0;
0031D9 A3                INC     DPTR
0031DA F0                MOVX    @DPTR,A
 1475: 		}
0031DB 22                RET     
 1476: 	return;
 1477: 	}
0031DC         ?C0213?CS_SCALE_PROC:
 1478: 		
 1479: 	if(B_TimeBase_1s == true)
0031DC 904CBF            MOV     DPTR,#B_TimeBase_1s
0031DF E0                MOVX    A,@DPTR
0031E0 6401              XRL     A,#01H
0031E2 6002              JZ      $ + 4H
0031E4 41B3              AJMP    ?C0212?CS_SCALE_PROC
 1480: 	{
 1481: 		B_TimeBase_1s = false;
0031E6 F0                MOVX    @DPTR,A
 1482: 
 1483: 		//低电超时处理
 1484: 		if(CS_Scale_JudgeLowBat(GetIfLowBat) == true)
0031E7 7F01              MOV     R7,#01H
0031E9 1217D4            LCALL   _CS_Scale_JudgeLowBat
0031EC BF011E            CJNE    R7,#01H,?C0221?CS_SCALE_PROC
 1485: 		{
 1486: 			R_TimeOut.lowbat++;
0031EF 904CBE            MOV     DPTR,#R_TimeOut+04H
0031F2 E0                MOVX    A,@DPTR
0031F3 04                INC     A
0031F4 F0                MOVX    @DPTR,A
 1487: 
 1488: 			if(R_TimeOut.lowbat>=CS_Scale_TimeOut_LowBat)
0031F5 E0                MOVX    A,@DPTR
0031F6 C3                CLR     C
0031F7 9403              SUBB    A,#03H
0031F9 5002              JNC     $ + 4H
0031FB 41B3              AJMP    ?C0212?CS_SCALE_PROC
 1489: 			{
 1490: 				R_Scale_state = CS_Scale_state_standby;
0031FD 904CC5            MOV     DPTR,#R_Scale_state
003200 7402              MOV     A,#02H
003202 F0                MOVX    @DPTR,A
 1491: 				CS_Scale_StandbyProc(1);
003203 7F01              MOV     R7,#01H
003205 51B4              ACALL   _CS_Scale_StandbyProc
 1492: 				R_TimeOut.lowbat=0;
003207 E4                CLR     A
003208 904CBE            MOV     DPTR,#R_TimeOut+04H
00320B F0                MOVX    @DPTR,A
 1493: 			}
00320C 22                RET     
 1494: 		return;			
 1495: 		}
00320D         ?C0221?CS_SCALE_PROC:
 1496: 
 1497: 		//超载超时处理
 1498: 		if(CS_Scale_JudgeOverLoad(GetIfOverLoad)== true)
00320D 7F01              MOV     R7,#01H
00320F B16D              ACALL   _CS_Scale_JudgeOverLoad
003211 BF011E            CJNE    R7,#01H,?C0223?CS_SCALE_PROC
 1499: 		{
 1500: 			R_TimeOut.overload++;
003214 904CBD            MOV     DPTR,#R_TimeOut+03H
003217 E0                MOVX    A,@DPTR
003218 04                INC     A
003219 F0                MOVX    @DPTR,A
 1501: 
 1502: 			if(R_TimeOut.overload>=CS_Scale_TimeOut_OverLoad)
00321A E0                MOVX    A,@DPTR
00321B C3                CLR     C
00321C 9403              SUBB    A,#03H
00321E 5002              JNC     $ + 4H
003220 41B3              AJMP    ?C0212?CS_SCALE_PROC
 1503: 			{
 1504: 				R_Scale_state = CS_Scale_state_standby;
003222 904CC5            MOV     DPTR,#R_Scale_state
003225 7402              MOV     A,#02H
003227 F0                MOVX    @DPTR,A
 1505: 				CS_Scale_StandbyProc(1);
003228 7F01              MOV     R7,#01H
00322A 51B4              ACALL   _CS_Scale_StandbyProc
 1506: 				R_TimeOut.overload=0;
00322C E4                CLR     A
00322D 904CBD            MOV     DPTR,#R_TimeOut+03H
003230 F0                MOVX    @DPTR,A
 1507: 			}
003231 22                RET     
 1508: 		return;	
 1509: 
 1510: 		}
003232         ?C0223?CS_SCALE_PROC:
 1511: 		
 1512: 		
 1513: 		//称重模式下的超时处理
 1514: 		if(R_Scale_state == CS_Scale_state_weighting)
003232 904CC5            MOV     DPTR,#R_Scale_state
003235 E0                MOVX    A,@DPTR
003236 6401              XRL     A,#01H
003238 7052              JNZ     ?C0225?CS_SCALE_PROC
 1515: 		{
 1516: 		
 1517: 		if(CS_Scale_ZeroProc(GetZeroState,0) != false)
00323A FD                MOV     R5,A
00323B FC                MOV     R4,A
00323C 7F03              MOV     R7,#03H
00323E 1212F7            LCALL   _CS_Scale_ZeroProc
003241 EF                MOV     A,R7
003242 4E                ORL     A,R6
003243 6008              JZ      ?C0226?CS_SCALE_PROC
 1518: 			{
 1519: 			R_TimeOut.zero++;
003245 904CBA            MOV     DPTR,#R_TimeOut
003248 E0                MOVX    A,@DPTR
003249 04                INC     A
00324A F0                MOVX    @DPTR,A
 1520: 			}
00324B 8005              SJMP    ?C0227?CS_SCALE_PROC
00324D         ?C0226?CS_SCALE_PROC:
 1521: 		else
 1522: 			{
 1523: 			//R_Debug_temp=R_TimeOut.zero;
 1524: 			//CS_ScaleDisplay_Debug();
 1525: 			//while(1);
 1526: 			R_TimeOut.zero=0;
00324D E4                CLR     A
00324E 904CBA            MOV     DPTR,#R_TimeOut
003251 F0                MOVX    @DPTR,A
 1527: 			}
003252         ?C0227?CS_SCALE_PROC:
 1528: 
 1529: 		if(CS_Scale_JudgeSteady(GetIfSmallSteady)==true)
003252 7F02              MOV     R7,#02H
003254 11AE              ACALL   _CS_Scale_JudgeSteady
003256 BF0107            CJNE    R7,#01H,?C0228?CS_SCALE_PROC
 1530: 			R_TimeOut.unstable=0;
003259 E4                CLR     A
00325A 904CBC            MOV     DPTR,#R_TimeOut+02H
00325D F0                MOVX    @DPTR,A
00325E 8006              SJMP    ?C0229?CS_SCALE_PROC
003260         ?C0228?CS_SCALE_PROC:
 1531: 		else
 1532: 			R_TimeOut.unstable++;
003260 904CBC            MOV     DPTR,#R_TimeOut+02H
003263 E0                MOVX    A,@DPTR
003264 04                INC     A
003265 F0                MOVX    @DPTR,A
003266         ?C0229?CS_SCALE_PROC:
 1533: 
 1534: 
 1535: 		if(R_TimeOut.zero >=CS_Scale_TimeOut_Zero||R_TimeOut.unstable>=CS_Scale_TimeOut_Unstable)
003266 904CBA            MOV     DPTR,#R_TimeOut
003269 E0                MOVX    A,@DPTR
00326A C3                CLR     C
00326B 940F              SUBB    A,#0FH
00326D 5009              JNC     ?C0231?CS_SCALE_PROC
00326F 904CBC            MOV     DPTR,#R_TimeOut+02H
003272 E0                MOVX    A,@DPTR
003273 C3                CLR     C
003274 940F              SUBB    A,#0FH
003276 403B              JC      ?C0212?CS_SCALE_PROC
003278         ?C0231?CS_SCALE_PROC:
 1536: 			{
 1537: 				R_Scale_state = CS_Scale_state_standby;
003278 904CC5            MOV     DPTR,#R_Scale_state
00327B 7402              MOV     A,#02H
00327D F0                MOVX    @DPTR,A
 1538: 				CS_Scale_StandbyProc(1);
00327E 7F01              MOV     R7,#01H
003280 51B4              ACALL   _CS_Scale_StandbyProc
 1539: 				R_TimeOut.zero=0;
003282 E4                CLR     A
003283 904CBA            MOV     DPTR,#R_TimeOut
003286 F0                MOVX    @DPTR,A
 1540: 				R_TimeOut.unstable=0;
003287 904CBC            MOV     DPTR,#R_TimeOut+02H
00328A F0                MOVX    @DPTR,A
 1541: 			}
00328B 22                RET     
 1542: 		return;
 1543: 
 1544: 		}
00328C         ?C0225?CS_SCALE_PROC:
 1545: 		
 1546: 
 1547: 		//锁定模式下的超时处理
 1548: 		if(R_Scale_state == CS_Scale_state_locking)
00328C 904CC5            MOV     DPTR,#R_Scale_state
00328F E0                MOVX    A,@DPTR
003290 B40420            CJNE    A,#04H,?C0212?CS_SCALE_PROC
 1549: 		{
 1550: 			R_TimeOut.unstable=0;
003293 E4                CLR     A
003294 904CBC            MOV     DPTR,#R_TimeOut+02H
003297 F0                MOVX    @DPTR,A
 1551: 			R_TimeOut.lock++;
003298 904CBB            MOV     DPTR,#R_TimeOut+01H
00329B E0                MOVX    A,@DPTR
00329C 04                INC     A
00329D F0                MOVX    @DPTR,A
 1552: 			
 1553: 			if(R_TimeOut.lock>=CS_Scale_TimeOut_Lock)
00329E E0                MOVX    A,@DPTR
00329F C3                CLR     C
0032A0 940F              SUBB    A,#0FH
0032A2 400F              JC      ?C0212?CS_SCALE_PROC
 1554: 			{
 1555: 				R_Scale_state = CS_Scale_state_standby;
0032A4 904CC5            MOV     DPTR,#R_Scale_state
0032A7 7402              MOV     A,#02H
0032A9 F0                MOVX    @DPTR,A
 1556: 				CS_Scale_StandbyProc(1);
0032AA 7F01              MOV     R7,#01H
0032AC 51B4              ACALL   _CS_Scale_StandbyProc
 1557: 				R_TimeOut.lock=0;
0032AE E4                CLR     A
0032AF 904CBB            MOV     DPTR,#R_TimeOut+01H
0032B2 F0                MOVX    @DPTR,A
 1558: 			}
 1559: 		return;
 1560: 		}		
 1561: 		
 1562: 
 1563: 	}
 1564: 
 1565: }
0032B3         ?C0212?CS_SCALE_PROC:
0032B3 22                RET     
----- FUNCTION _CS_Scale_TimeOutProc (END) -------


----- FUNCTION _CS_Scale_StandbyProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1182: void CS_Scale_StandbyProc(u8_t B_Reset)
 1183: {
;---- Variable 'B_Reset' assigned to Register 'R7' ----
 1184: 	static u8_t xdata comm_doing;
 1185: 	static u8_t xdata StandbyState;
 1186: 
 1187: 	if(B_Reset==1)
0032B4 EF                MOV     A,R7
0032B5 B4010A            CJNE    A,#01H,?C0173?CS_SCALE_PROC
 1188: 		{
 1189: 		StandbyState=CS_Standby_S1_ToSleep;
0032B8 E4                CLR     A
0032B9 904CB5            MOV     DPTR,#StandbyState
0032BC F0                MOVX    @DPTR,A
 1190: 		comm_doing=false;
0032BD 904CB4            MOV     DPTR,#comm_doing
0032C0 F0                MOVX    @DPTR,A
0032C1 22                RET     
 1191: 		return;
 1192: 		}
0032C2         ?C0173?CS_SCALE_PROC:
 1193: 
 1194: 	if(B_Reset==2)
0032C2 EF                MOV     A,R7
0032C3 B4020C            CJNE    A,#02H,?C0175?CS_SCALE_PROC
 1195: 		{
 1196: 		StandbyState=CS_Standby_S2_WakeUp;
0032C6 904CB5            MOV     DPTR,#StandbyState
0032C9 7401              MOV     A,#01H
0032CB F0                MOVX    @DPTR,A
 1197: 		comm_doing=false;
0032CC E4                CLR     A
0032CD 904CB4            MOV     DPTR,#comm_doing
0032D0 F0                MOVX    @DPTR,A
0032D1 22                RET     
 1198: 		return;
 1199: 		}
0032D2         ?C0175?CS_SCALE_PROC:
 1200: 	
 1201: 	switch(StandbyState)
0032D2 904CB5            MOV     DPTR,#StandbyState
0032D5 E0                MOVX    A,@DPTR
0032D6 14                DEC     A
0032D7 603F              JZ      ?C0180?CS_SCALE_PROC
0032D9 04                INC     A
0032DA 707D              JNZ     ?C0183?CS_SCALE_PROC
 1202: 	{
 1203: 	case CS_Standby_S1_ToSleep:
0032DC         ?C0177?CS_SCALE_PROC:
 1204: 		if(comm_doing==false)
0032DC 904CB4            MOV     DPTR,#comm_doing
0032DF E0                MOVX    A,@DPTR
0032E0 700F              JNZ     ?C0178?CS_SCALE_PROC
 1205: 			{
 1206: 			comm_doing=true;
0032E2 04                INC     A
0032E3 F0                MOVX    @DPTR,A
 1207: 			R_Weight_Com_Coo.now = CS_CommTo1186_SetSleepMode;
0032E4 904D50            MOV     DPTR,#R_Weight_Com_Coo
0032E7 74A0              MOV     A,#0A0H
0032E9 F0                MOVX    @DPTR,A
 1208: 			R_Weight_Com_Coo.sucess=false;
0032EA E4                CLR     A
0032EB 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
0032EE F0                MOVX    @DPTR,A
 1209: 			R_Weight_Com_Coo.fail=false;
0032EF A3                INC     DPTR
0032F0 F0                MOVX    @DPTR,A
 1210: 			//sys_state = SYS_ST_IDLE;			//系统进入睡眠
 1211: 			}
0032F1         ?C0178?CS_SCALE_PROC:
 1212: 		if(R_Weight_Com_Coo.sucess==true)
0032F1 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
0032F4 E0                MOVX    A,@DPTR
0032F5 6401              XRL     A,#01H
0032F7 7065              JNZ     ?C0174?CS_SCALE_PROC
 1213: 			{
 1214: 			comm_doing=false;
0032F9 904CB4            MOV     DPTR,#comm_doing
0032FC F0                MOVX    @DPTR,A
 1215: 			StandbyState =  CS_Standby_S2_WakeUp;
0032FD A3                INC     DPTR
0032FE 04                INC     A
0032FF F0                MOVX    @DPTR,A
 1216: 
 1217: 			btCmdBuf.len = 0x01;
003300 904C63            MOV     DPTR,#btCmdBuf
003303 F0                MOVX    @DPTR,A
 1218: 			btCmdBuf.DATA[0] = CS_CMD_SLEEP_REQ;
003304 A3                INC     DPTR
003305 7420              MOV     A,#020H
003307 F0                MOVX    @DPTR,A
 1219: 			BT_CmdFifoIn(&btCmdBuf);
003308 7B01              MOV     R3,#01H
00330A 7A4C              MOV     R2,#HIGH btCmdBuf
00330C 7963              MOV     R1,#LOW btCmdBuf
00330E 122680            LCALL   _BT_CmdFifoIn
 1220: 
 1221: 			//btCmdBuf.len = 2;
 1222: 			//btCmdBuf.DATA[0] = 0x20;
 1223: 			//btCmdBuf.DATA[1] = 0;
 1224: 			//BT_CmdFifoIn(&btCmdBuf);
 1225: 			
 1226: 			 
 1227: 			sys_state = SYS_ST_IDLE;  //SYS_ST_SLEEP;			//系统进入睡眠
003311 904E57            MOV     DPTR,#sys_state
003314 7401              MOV     A,#01H
003316 F0                MOVX    @DPTR,A
 1228: 					
 1229: 			}	
 1230: 		break;
003317 22                RET     
 1231: 	case CS_Standby_S2_WakeUp:
003318         ?C0180?CS_SCALE_PROC:
 1232: 		if(comm_doing==false)
003318 904CB4            MOV     DPTR,#comm_doing
00331B E0                MOVX    A,@DPTR
00331C 700F              JNZ     ?C0181?CS_SCALE_PROC
 1233: 			{
 1234: 			comm_doing=true;
00331E 04                INC     A
00331F F0                MOVX    @DPTR,A
 1235: 			R_Weight_Com_Coo.now = CS_CommTo1186_ReadAdZero;
003320 904D50            MOV     DPTR,#R_Weight_Com_Coo
003323 7485              MOV     A,#085H
003325 F0                MOVX    @DPTR,A
 1236: 			R_Weight_Com_Coo.sucess=false;
003326 E4                CLR     A
003327 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
00332A F0                MOVX    @DPTR,A
 1237: 			R_Weight_Com_Coo.fail=false;
00332B A3                INC     DPTR
00332C F0                MOVX    @DPTR,A
 1238: 			}
00332D         ?C0181?CS_SCALE_PROC:
 1239: 		if(R_Weight_Com_Coo.sucess==true)
00332D 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
003330 E0                MOVX    A,@DPTR
003331 B4012A            CJNE    A,#01H,?C0174?CS_SCALE_PROC
 1240: 			{
 1241: 			comm_doing=false;
003334 E4                CLR     A
003335 904CB4            MOV     DPTR,#comm_doing
003338 F0                MOVX    @DPTR,A
 1242: 			StandbyState =  CS_Standby_S1_ToSleep;	
003339 A3                INC     DPTR
00333A F0                MOVX    @DPTR,A
 1243: 			sys_state = SYS_ST_RUN;
00333B 904E57            MOV     DPTR,#sys_state
00333E 7402              MOV     A,#02H
003340 F0                MOVX    @DPTR,A
 1244: 
 1245: 			/*
 1246: 			while(1)
 1247: 			{
 1248: 			R_Debug_temp = R_AD_Zero;
 1249: 			CS_ScaleDisplay_Debug();
 1250: 			}
 1251: 			*/
 1252: 			//清除异常状态
 1253: 			CS_Scale_JudgeOverLoad(ResetOverLoad);
003341 FF                MOV     R7,A
003342 B16D              ACALL   _CS_Scale_JudgeOverLoad
 1254: 			CS_Scale_TimeOutProc(CS_Reset_AllTime);
003344 7F06              MOV     R7,#06H
003346 318E              ACALL   _CS_Scale_TimeOutProc
 1255: 			R_Display_Err = 0;
003348 E4                CLR     A
003349 904CC2            MOV     DPTR,#R_Display_Err
00334C F0                MOVX    @DPTR,A
 1256: 			
 1257: 			R_Scale_state = CS_Scale_state_weighting;
00334D 904CC5            MOV     DPTR,#R_Scale_state
003350 04                INC     A
003351 F0                MOVX    @DPTR,A
 1258: 			R_Weight_Com_Coo.now = CS_CommTo1186_ReadAd;	
003352 904D50            MOV     DPTR,#R_Weight_Com_Coo
003355 7480              MOV     A,#080H
003357 F0                MOVX    @DPTR,A
 1259: 			}
 1260: 		break;
003358 22                RET     
 1261: 	default:
003359         ?C0183?CS_SCALE_PROC:
 1262: 		StandbyState = CS_Standby_S1_ToSleep;
003359 E4                CLR     A
00335A 904CB5            MOV     DPTR,#StandbyState
00335D F0                MOVX    @DPTR,A
 1263: 		break;
 1264: 	}
 1265: 	
 1266: 	//R_Debug_temp = 456;
 1267: 
 1268: }
00335E         ?C0174?CS_SCALE_PROC:
00335E 22                RET     
----- FUNCTION _CS_Scale_StandbyProc (END) -------


----- FUNCTION _CS_Scale_SteadyProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  745: void CS_Scale_SteadyProc(u8_t option)
  746: {
;---- Variable 'option' assigned to Register 'R7' ----
  747: 	u16_t	R_AD_BUF;	
  748: 	u16_t	R_Weight_Temp;
  749: 	static	u8_t xdata B_Debug_Send;	
  750: 	static 	u8_t xdata ReadUTC;
  751: 	UserMeasureData SendData;
  752: 
  753: 	if(option==SteadyProcReset)
00335F EF                MOV     A,R7
003360 7005              JNZ     ?C0106?CS_SCALE_PROC
  754: 		{
  755: 		B_Debug_Send=false;
003362 904CA7            MOV     DPTR,#B_Debug_Send
003365 F0                MOVX    @DPTR,A
003366 22                RET     
  756: 		return;
  757: 		}
003367         ?C0106?CS_SCALE_PROC:
  758: 	
  759: 	if(CS_SoftTimer(GetIfTimeOut) == true)	//锁定闪现时间到
003367 7F03              MOV     R7,#03H
003369 120EE1            LCALL   _CS_SoftTimer
00336C EF                MOV     A,R7
00336D 6401              XRL     A,#01H
00336F 6002              JZ      $ + 4H
003371 8197              AJMP    ?C0107?CS_SCALE_PROC
  760: 		{
  761: 		if(CS_Scale_JudgeSteady(GetIfHeavySteady) == true)
003373 7F03              MOV     R7,#03H
003375 11AE              ACALL   _CS_Scale_JudgeSteady
003377 EF                MOV     A,R7
003378 6401              XRL     A,#01H
00337A 6002              JZ      $ + 4H
00337C 8113              AJMP    ?C0109?CS_SCALE_PROC
  762: 			{
  763: 			
  764: 			CS_Scale_JudgeSteady(ResetSteady);
00337E 7F01              MOV     R7,#01H
003380 11AE              ACALL   _CS_Scale_JudgeSteady
  765: 
  766: 			if(R_UnitWeight.origin>R_Weight_Mem)
003382 904CC3            MOV     DPTR,#R_Weight_Mem
003385 E0                MOVX    A,@DPTR
003386 FE                MOV     R6,A
003387 A3                INC     DPTR
003388 E0                MOVX    A,@DPTR
003389 FF                MOV     R7,A
00338A 904CC9            MOV     DPTR,#R_UnitWeight
00338D E0                MOVX    A,@DPTR
00338E FC                MOV     R4,A
00338F A3                INC     DPTR
003390 E0                MOVX    A,@DPTR
003391 FD                MOV     R5,A
003392 D3                SETB    C
003393 9F                SUBB    A,R7
003394 EC                MOV     A,R4
003395 9E                SUBB    A,R6
003396 400E              JC      ?C0110?CS_SCALE_PROC
  767: 				R_Weight_Temp = R_UnitWeight.origin -R_Weight_Mem;
003398 ED                MOV     A,R5
003399 9F                SUBB    A,R7
00339A FF                MOV     R7,A
00339B EC                MOV     A,R4
00339C 9E                SUBB    A,R6
00339D 904DF1            MOV     DPTR,#R_Weight_Temp
0033A0 F0                MOVX    @DPTR,A
0033A1 A3                INC     DPTR
0033A2 EF                MOV     A,R7
0033A3 F0                MOVX    @DPTR,A
0033A4 801B              SJMP    ?C0111?CS_SCALE_PROC
0033A6         ?C0110?CS_SCALE_PROC:
  768: 			else
  769: 				R_Weight_Temp = R_Weight_Mem - R_UnitWeight.origin;
0033A6 904CC9            MOV     DPTR,#R_UnitWeight
0033A9 E0                MOVX    A,@DPTR
0033AA FE                MOV     R6,A
0033AB A3                INC     DPTR
0033AC E0                MOVX    A,@DPTR
0033AD FF                MOV     R7,A
0033AE C3                CLR     C
0033AF 904CC4            MOV     DPTR,#R_Weight_Mem+01H
0033B2 E0                MOVX    A,@DPTR
0033B3 9F                SUBB    A,R7
0033B4 FF                MOV     R7,A
0033B5 904CC3            MOV     DPTR,#R_Weight_Mem
0033B8 E0                MOVX    A,@DPTR
0033B9 9E                SUBB    A,R6
0033BA 904DF1            MOV     DPTR,#R_Weight_Temp
0033BD F0                MOVX    @DPTR,A
0033BE A3                INC     DPTR
0033BF EF                MOV     A,R7
0033C0 F0                MOVX    @DPTR,A
0033C1         ?C0111?CS_SCALE_PROC:
  770: 
  771: 			//在记忆范围内记忆
  772: 			if(R_UnitWeight.origin > ScaleStartMemoryWeight)
0033C1 D3                SETB    C
0033C2 904CCA            MOV     DPTR,#R_UnitWeight+01H
0033C5 E0                MOVX    A,@DPTR
0033C6 9458              SUBB    A,#058H
0033C8 904CC9            MOV     DPTR,#R_UnitWeight
0033CB E0                MOVX    A,@DPTR
0033CC 9402              SUBB    A,#02H
0033CE 401D              JC      ?C0112?CS_SCALE_PROC
  773: 				{
  774: 				if(R_Weight_Temp<CS_MemoryRange)
0033D0 904DF2            MOV     DPTR,#R_Weight_Temp+01H
0033D3 E0                MOVX    A,@DPTR
0033D4 9419              SUBB    A,#019H
0033D6 904DF1            MOV     DPTR,#R_Weight_Temp
0033D9 E0                MOVX    A,@DPTR
0033DA 9400              SUBB    A,#00H
0033DC 500F              JNC     ?C0112?CS_SCALE_PROC
  775: 					R_UnitWeight.origin = R_Weight_Mem;
0033DE 904CC3            MOV     DPTR,#R_Weight_Mem
0033E1 E0                MOVX    A,@DPTR
0033E2 FF                MOV     R7,A
0033E3 A3                INC     DPTR
0033E4 E0                MOVX    A,@DPTR
0033E5 904CC9            MOV     DPTR,#R_UnitWeight
0033E8 CF                XCH     A,R7
0033E9 F0                MOVX    @DPTR,A
0033EA A3                INC     DPTR
0033EB EF                MOV     A,R7
0033EC F0                MOVX    @DPTR,A
  776: 				}
0033ED         ?C0112?CS_SCALE_PROC:
  777: 			
  778: 			R_Weight_Lock = R_UnitWeight.origin;
0033ED 904CC9            MOV     DPTR,#R_UnitWeight
0033F0 E0                MOVX    A,@DPTR
0033F1 FE                MOV     R6,A
0033F2 A3                INC     DPTR
0033F3 E0                MOVX    A,@DPTR
0033F4 FF                MOV     R7,A
0033F5 904CC0            MOV     DPTR,#R_Weight_Lock
0033F8 EE                MOV     A,R6
0033F9 F0                MOVX    @DPTR,A
0033FA A3                INC     DPTR
0033FB EF                MOV     A,R7
0033FC F0                MOVX    @DPTR,A
  779: 			R_Weight_Mem = R_UnitWeight.origin;
0033FD 904CC3            MOV     DPTR,#R_Weight_Mem
003400 EE                MOV     A,R6
003401 F0                MOVX    @DPTR,A
003402 A3                INC     DPTR
003403 EF                MOV     A,R7
003404 F0                MOVX    @DPTR,A
  780: 			CS_Scale_ZeroProc(ClrLockDownCheckFlag,0);
003405 E4                CLR     A
003406 FD                MOV     R5,A
003407 FC                MOV     R4,A
003408 7F08              MOV     R7,#08H
00340A 1212F7            LCALL   _CS_Scale_ZeroProc
  781: 			ReadUTC = false;	//初始化读ADC
00340D E4                CLR     A
00340E 904CA8            MOV     DPTR,#ReadUTC
003411 F0                MOVX    @DPTR,A
  782: 			}
003412 22                RET     
003413         ?C0109?CS_SCALE_PROC:
  783: 		else
  784: 			{
  785: 			
  786: 			/*
  787: 			if(wechatStatus == WECHAT_ST_OK&&B_Debug_Send==false)
  788: 				{
  789: 				sendMeasureData();
  790: 				B_Debug_Send=true;
  791: 				}
  792: 			*/		
  793: 			if(B_Debug_Send==false)
003413 904CA7            MOV     DPTR,#B_Debug_Send
003416 E0                MOVX    A,@DPTR
003417 706D              JNZ     ?C0115?CS_SCALE_PROC
  794: 				{
  795: 				
  796: 				if(ReadUTC==false)
003419 A3                INC     DPTR
00341A E0                MOVX    A,@DPTR
00341B 700F              JNZ     ?C0116?CS_SCALE_PROC
  797: 					{
  798: 					ReadUTC=true;
00341D 04                INC     A
00341E F0                MOVX    @DPTR,A
  799: 					R_Weight_Com_Coo.sucess=false;
00341F E4                CLR     A
003420 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
003423 F0                MOVX    @DPTR,A
  800: 					R_Weight_Com_Coo.fail=false;
003424 A3                INC     DPTR
003425 F0                MOVX    @DPTR,A
  801: 					R_Weight_Com_Coo.now = CS_CommTo1186_ReadTime;		
003426 904D50            MOV     DPTR,#R_Weight_Com_Coo
003429 7482              MOV     A,#082H
00342B F0                MOVX    @DPTR,A
  802: 					}
00342C         ?C0116?CS_SCALE_PROC:
  803: 				
  804: 				if(R_Weight_Com_Coo.sucess==true)
00342C 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
00342F E0                MOVX    A,@DPTR
003430 6401              XRL     A,#01H
003432 7063              JNZ     ?C0107?CS_SCALE_PROC
  805: 					{
  806: 					
  807: 					
  808: 					ReadUTC=false;
003434 904CA8            MOV     DPTR,#ReadUTC
003437 F0                MOVX    @DPTR,A
  809: 					R_Weight_Com_Coo.sucess=false;
003438 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
00343B F0                MOVX    @DPTR,A
  810: 					
  811: 					SendData.UTCTime[0]=R_1186_RTC[0];
00343C 904CD3            MOV     DPTR,#R_1186_RTC
00343F E0                MOVX    A,@DPTR
003440 904DF5            MOV     DPTR,#SendData+02H
003443 F0                MOVX    @DPTR,A
  812: 					SendData.UTCTime[1]=R_1186_RTC[1];	
003444 904CD4            MOV     DPTR,#R_1186_RTC+01H
003447 E0                MOVX    A,@DPTR
003448 904DF6            MOV     DPTR,#SendData+03H
00344B F0                MOVX    @DPTR,A
  813: 					SendData.UTCTime[2]=R_1186_RTC[2];	
00344C 904CD5            MOV     DPTR,#R_1186_RTC+02H
00344F E0                MOVX    A,@DPTR
003450 904DF7            MOV     DPTR,#SendData+04H
003453 F0                MOVX    @DPTR,A
  814: 					SendData.UTCTime[3]=R_1186_RTC[3];	
003454 904CD6            MOV     DPTR,#R_1186_RTC+03H
003457 E0                MOVX    A,@DPTR
003458 904DF8            MOV     DPTR,#SendData+05H
00345B F0                MOVX    @DPTR,A
  815: 					SendData.weight=ESWAP(R_UnitWeight.origin);
00345C 904CC9            MOV     DPTR,#R_UnitWeight
00345F E0                MOVX    A,@DPTR
003460 FC                MOV     R4,A
003461 A3                INC     DPTR
003462 E0                MOVX    A,@DPTR
003463 FA                MOV     R2,A
003464 EC                MOV     A,R4
003465 FF                MOV     R7,A
003466 EA                MOV     A,R2
003467 FE                MOV     R6,A
003468 EF                MOV     A,R7
003469 904DF3            MOV     DPTR,#SendData
00346C EE                MOV     A,R6
00346D F0                MOVX    @DPTR,A
00346E A3                INC     DPTR
00346F EF                MOV     A,R7
003470 F0                MOVX    @DPTR,A
  816: 					QueuePush(&SendData);
003471 7B01              MOV     R3,#01H
003473 7A4D              MOV     R2,#HIGH SendData
003475 79F3              MOV     R1,#LOW SendData
003477 B1B8              ACALL   _QueuePush
  817: 					B_Debug_Send=true;
003479 904CA7            MOV     DPTR,#B_Debug_Send
00347C 7401              MOV     A,#01H
00347E F0                MOVX    @DPTR,A
  818: 					R_Weight_Com_Coo.now = CS_CommTo1186_ReadAd;
00347F 904D50            MOV     DPTR,#R_Weight_Com_Coo
003482 7480              MOV     A,#080H
003484 F0                MOVX    @DPTR,A
  819: 					//CS_SoftTimer(ResetSoftTimer);	
  820: 					
  821: 					}
  822: 				}
003485 22                RET     
003486         ?C0115?CS_SCALE_PROC:
  823: 			else
  824: 				{
  825: 				R_AD_BUF = CS_Scale_GetDeltaAD(GetDeltaAD);
003486 E4                CLR     A
003487 FF                MOV     R7,A
003488 1217E6            LCALL   _CS_Scale_GetDeltaAD
;---- Variable 'R_AD_BUF' assigned to Register 'R6/R7' ----
  826: 				R_AD_BUF = CS_Scale_AdcFilter(ScaleAdcFilterRun,R_AD_BUF);
00348B AD07              MOV     R5,AR7
00348D AC06              MOV     R4,AR6
00348F E4                CLR     A
003490 FF                MOV     R7,A
003491 F1C1              ACALL   _CS_Scale_AdcFilter
  827: 				CS_Scale_GetWeight(R_AD_BUF);				
003493 D170              ACALL   _CS_Scale_GetWeight
  828: 				CS_Scale_ReturnLock();
003495 9198              ACALL   CS_Scale_ReturnLock
  829: 				}
  830: 			}
  831: 		}
  832: 
  833: 			/*
  834: 			if(CS_SoftTimer(GetSoftTimerTime)<200)
  835: 				{
  836: 			R_Debug_temp=SendData.UTCTime;
  837: 			CS_ScaleDisplay_Debug();			
  838: 			return;
  839: 				}
  840: 			*/	
  841: 			/* B_Debug_Test =true;
  842: 			if(B_Debug_Test)
  843: 				{
  844: 				R_Debug_temp=888;
  845: 				CS_ScaleDisplay_Debug();
  846: 				while(1);
  847: 				}
  848: 			*/
  849: }
003497         ?C0107?CS_SCALE_PROC:
003497 22                RET     
----- FUNCTION _CS_Scale_SteadyProc (END) -------


----- FUNCTION CS_Scale_ReturnLock (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  853: void CS_Scale_ReturnLock(void)
  854: {
  855: 	u16_t	weight_temp;
  856: 	
  857: 	if( R_UnitWeight.origin > R_Weight_Lock)
003498 904CC0            MOV     DPTR,#R_Weight_Lock
00349B E0                MOVX    A,@DPTR
00349C FE                MOV     R6,A
00349D A3                INC     DPTR
00349E E0                MOVX    A,@DPTR
00349F FF                MOV     R7,A
0034A0 904CC9            MOV     DPTR,#R_UnitWeight
0034A3 E0                MOVX    A,@DPTR
0034A4 FC                MOV     R4,A
0034A5 A3                INC     DPTR
0034A6 E0                MOVX    A,@DPTR
0034A7 FD                MOV     R5,A
0034A8 D3                SETB    C
0034A9 9F                SUBB    A,R7
0034AA EC                MOV     A,R4
0034AB 9E                SUBB    A,R6
0034AC 401F              JC      ?C0119?CS_SCALE_PROC
  858: 		{
  859: 		weight_temp = R_UnitWeight.origin -R_Weight_Lock;
0034AE ED                MOV     A,R5
0034AF 9F                SUBB    A,R7
0034B0 FF                MOV     R7,A
0034B1 EC                MOV     A,R4
0034B2 9E                SUBB    A,R6
0034B3 FE                MOV     R6,A
0034B4 904E52            MOV     DPTR,#weight_temp
0034B7 F0                MOVX    @DPTR,A
0034B8 A3                INC     DPTR
0034B9 EF                MOV     A,R7
0034BA F0                MOVX    @DPTR,A
  860: 		if(weight_temp >= CS_Scale_RetLockWeightInc)
0034BB C3                CLR     C
0034BC 94E8              SUBB    A,#0E8H
0034BE EE                MOV     A,R6
0034BF 9403              SUBB    A,#03H
0034C1 403B              JC      ?C0123?CS_SCALE_PROC
  861: 			{
  862: 			R_Scale_state = CS_Scale_state_weighting;
0034C3 904CC5            MOV     DPTR,#R_Scale_state
0034C6 7401              MOV     A,#01H
0034C8 F0                MOVX    @DPTR,A
  863: 			CS_Scale_TimeOutProc(CS_Reset_AllTime);
0034C9 7F06              MOV     R7,#06H
0034CB 218E              AJMP    _CS_Scale_TimeOutProc
  864: 			}
  865: 		}
0034CD         ?C0119?CS_SCALE_PROC:
  866: 	else
  867: 		{
  868: 		weight_temp = R_Weight_Lock -R_UnitWeight.origin;
0034CD 904CC9            MOV     DPTR,#R_UnitWeight
0034D0 E0                MOVX    A,@DPTR
0034D1 FE                MOV     R6,A
0034D2 A3                INC     DPTR
0034D3 E0                MOVX    A,@DPTR
0034D4 FF                MOV     R7,A
0034D5 C3                CLR     C
0034D6 904CC1            MOV     DPTR,#R_Weight_Lock+01H
0034D9 E0                MOVX    A,@DPTR
0034DA 9F                SUBB    A,R7
0034DB FF                MOV     R7,A
0034DC 904CC0            MOV     DPTR,#R_Weight_Lock
0034DF E0                MOVX    A,@DPTR
0034E0 9E                SUBB    A,R6
0034E1 FE                MOV     R6,A
0034E2 904E52            MOV     DPTR,#weight_temp
0034E5 F0                MOVX    @DPTR,A
0034E6 A3                INC     DPTR
0034E7 EF                MOV     A,R7
0034E8 F0                MOVX    @DPTR,A
  869: 		if(weight_temp >= CS_Scale_RetLockWeightDec)
0034E9 C3                CLR     C
0034EA 942C              SUBB    A,#02CH
0034EC EE                MOV     A,R6
0034ED 9401              SUBB    A,#01H
0034EF 400D              JC      ?C0123?CS_SCALE_PROC
  870: 			{
  871: 			
  872: 			R_Scale_state = CS_Scale_state_weighting;
0034F1 904CC5            MOV     DPTR,#R_Scale_state
0034F4 7401              MOV     A,#01H
0034F6 F0                MOVX    @DPTR,A
  873: 			CS_Scale_LockProc(SetDowningLock);
0034F7 FF                MOV     R7,A
0034F8 91FF              ACALL   _CS_Scale_LockProc
  874: 			CS_Scale_TimeOutProc(CS_Reset_AllTime);
0034FA 7F06              MOV     R7,#06H
0034FC 318E              ACALL   _CS_Scale_TimeOutProc
  875: 			
  876: 			}
  877: 		}
  878: 
  879: }
0034FE         ?C0123?CS_SCALE_PROC:
0034FE 22                RET     
----- FUNCTION CS_Scale_ReturnLock (END) -------


----- FUNCTION _CS_Scale_LockProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  543: u8_t CS_Scale_LockProc(u8_t option)
  544: {
;---- Variable 'option' assigned to Register 'R7' ----
  545: 	static u8_t xdata B_Weight_Downing_Lock;		//下秤过程有重物在上面锁住
  546: 	
  547: 	if(option==SetDowningLock)
0034FF EF                MOV     A,R7
003500 B40109            CJNE    A,#01H,?C0073?CS_SCALE_PROC
  548: 		{
  549: 		B_Weight_Downing_Lock =LockProcLock;
003503 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
003506 7403              MOV     A,#03H
003508 F0                MOVX    @DPTR,A
  550: 		return 0;
003509 7F00              MOV     R7,#00H
00350B 22                RET     
  551: 		}
00350C         ?C0073?CS_SCALE_PROC:
  552: 
  553: 	if(option==GetIfLock)
00350C EF                MOV     A,R7
00350D B40206            CJNE    A,#02H,?C0075?CS_SCALE_PROC
  554: 		{
  555: 		return B_Weight_Downing_Lock;
003510 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
003513 E0                MOVX    A,@DPTR
003514 FF                MOV     R7,A
003515 22                RET     
  556: 		}
003516         ?C0075?CS_SCALE_PROC:
  557: 	if(option==LockProcUnLock)
003516 EF                MOV     A,R7
003517 B40307            CJNE    A,#03H,?C0076?CS_SCALE_PROC
  558: 		{
  559: 		B_Weight_Downing_Lock =false;
00351A E4                CLR     A
00351B 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
00351E F0                MOVX    @DPTR,A
  560: 		return 0;
00351F FF                MOV     R7,A
003520 22                RET     
  561: 		}
003521         ?C0076?CS_SCALE_PROC:
  562: 	
  563: 	if(CS_Scale_ZeroProc(GetZeroState,0)==true)		//处于零位
003521 E4                CLR     A
003522 FD                MOV     R5,A
003523 FC                MOV     R4,A
003524 7F03              MOV     R7,#03H
003526 1212F7            LCALL   _CS_Scale_ZeroProc
003529 EF                MOV     A,R7
00352A 6401              XRL     A,#01H
00352C 4E                ORL     A,R6
00352D 701B              JNZ     ?C0077?CS_SCALE_PROC
  564: 		{
  565: 		B_Weight_Downing_Lock &=LockProcDownUnLock ;
00352F 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
003532 E0                MOVX    A,@DPTR
003533 54FD              ANL     A,#0FDH
003535 F0                MOVX    @DPTR,A
  566: 		
  567: 		if(B_Weight_Downing_Lock&LockProcZeroLock)
003536 30E031            JNB     ACC.0,?C0079?CS_SCALE_PROC
  568: 		R_UnitWeight.origin = R_Weight_Lock;
003539 904CC0            MOV     DPTR,#R_Weight_Lock
00353C E0                MOVX    A,@DPTR
00353D FF                MOV     R7,A
00353E A3                INC     DPTR
00353F E0                MOVX    A,@DPTR
003540 904CC9            MOV     DPTR,#R_UnitWeight
003543 CF                XCH     A,R7
003544 F0                MOVX    @DPTR,A
003545 A3                INC     DPTR
003546 EF                MOV     A,R7
003547 F0                MOVX    @DPTR,A
  569: 		}
003548 8020              SJMP    ?C0079?CS_SCALE_PROC
00354A         ?C0077?CS_SCALE_PROC:
  570: 	else
  571: 		{
  572: 		if(B_Weight_Downing_Lock&LockProcDownLock)
00354A 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
00354D E0                MOVX    A,@DPTR
00354E FF                MOV     R7,A
00354F 30E111            JNB     ACC.1,?C0080?CS_SCALE_PROC
  573: 			R_UnitWeight.origin = R_Weight_Lock;
003552 904CC0            MOV     DPTR,#R_Weight_Lock
003555 E0                MOVX    A,@DPTR
003556 FD                MOV     R5,A
003557 A3                INC     DPTR
003558 E0                MOVX    A,@DPTR
003559 904CC9            MOV     DPTR,#R_UnitWeight
00355C CD                XCH     A,R5
00355D F0                MOVX    @DPTR,A
00355E A3                INC     DPTR
00355F ED                MOV     A,R5
003560 F0                MOVX    @DPTR,A
003561 8007              SJMP    ?C0079?CS_SCALE_PROC
003563         ?C0080?CS_SCALE_PROC:
  574: 		else
  575: 			B_Weight_Downing_Lock &= LockProcZeroUnLock;
003563 EF                MOV     A,R7
003564 54FE              ANL     A,#0FEH
003566 904C9E            MOV     DPTR,#B_Weight_Downing_Lock
003569 F0                MOVX    @DPTR,A
  576: 		}
00356A         ?C0079?CS_SCALE_PROC:
  577: 
  578: 	return 0;
00356A 7F00              MOV     R7,#00H
  579: }
00356C 22                RET     
----- FUNCTION _CS_Scale_LockProc (END) -------


----- FUNCTION _CS_Scale_JudgeOverLoad (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  641: u8_t CS_Scale_JudgeOverLoad(u8_t option)
  642: {
;---- Variable 'option' assigned to Register 'R7' ----
  643: 
  644: 	static	u8_t	  xdata R_Weight_OverLoadTimes;
  645: 	static	u8_t  xdata  B_Weight_OverLoad;			//超载标志
  646: 	if(option==ResetOverLoad)
00356D EF                MOV     A,R7
00356E B40209            CJNE    A,#02H,?C0086?CS_SCALE_PROC
  647: 		{
  648: 		R_Weight_OverLoadTimes = 0;
003571 E4                CLR     A
003572 904CA0            MOV     DPTR,#R_Weight_OverLoadTimes
003575 F0                MOVX    @DPTR,A
  649: 		B_Weight_OverLoad = false;
003576 A3                INC     DPTR
003577 F0                MOVX    @DPTR,A
  650: 		return 0;
003578 FF                MOV     R7,A
003579 22                RET     
  651: 		}
00357A         ?C0086?CS_SCALE_PROC:
  652: 	
  653: 	if(R_UnitWeight.origin > CS_Scale_MaxWeight)
00357A D3                SETB    C
00357B 904CCA            MOV     DPTR,#R_UnitWeight+01H
00357E E0                MOVX    A,@DPTR
00357F 94C4              SUBB    A,#0C4H
003581 904CC9            MOV     DPTR,#R_UnitWeight
003584 E0                MOVX    A,@DPTR
003585 943B              SUBB    A,#03BH
003587 4006              JC      ?C0088?CS_SCALE_PROC
  654: 		R_Weight_OverLoadTimes++;
003589 904CA0            MOV     DPTR,#R_Weight_OverLoadTimes
00358C E0                MOVX    A,@DPTR
00358D 04                INC     A
00358E F0                MOVX    @DPTR,A
00358F         ?C0088?CS_SCALE_PROC:
  655: 	if(R_Weight_OverLoadTimes >=2)
00358F 904CA0            MOV     DPTR,#R_Weight_OverLoadTimes
003592 E0                MOVX    A,@DPTR
003593 C3                CLR     C
003594 9402              SUBB    A,#02H
003596 400E              JC      ?C0089?CS_SCALE_PROC
  656: 		{
  657: 		R_Weight_OverLoadTimes = 2;
003598 7402              MOV     A,#02H
00359A F0                MOVX    @DPTR,A
  658: 		B_Weight_OverLoad = true;
00359B A3                INC     DPTR
00359C 14                DEC     A
00359D F0                MOVX    @DPTR,A
  659: 		R_Display_Err=CS_ScaleDisplay_L_err;
00359E 904CC2            MOV     DPTR,#R_Display_Err
0035A1 7404              MOV     A,#04H
0035A3 F0                MOVX    @DPTR,A
  660: 		}
0035A4 8005              SJMP    ?C0090?CS_SCALE_PROC
0035A6         ?C0089?CS_SCALE_PROC:
  661: 	else
  662: 		B_Weight_OverLoad = false;
0035A6 E4                CLR     A
0035A7 904CA1            MOV     DPTR,#B_Weight_OverLoad
0035AA F0                MOVX    @DPTR,A
0035AB         ?C0090?CS_SCALE_PROC:
  663: 
  664: 	if(option==GetIfOverLoad)
0035AB EF                MOV     A,R7
0035AC B40106            CJNE    A,#01H,?C0091?CS_SCALE_PROC
  665: 		return B_Weight_OverLoad;
0035AF 904CA1            MOV     DPTR,#B_Weight_OverLoad
0035B2 E0                MOVX    A,@DPTR
0035B3 FF                MOV     R7,A
0035B4 22                RET     
0035B5         ?C0091?CS_SCALE_PROC:
  666: 	
  667: 		return 0;
0035B5 7F00              MOV     R7,#00H
  668: }
0035B7 22                RET     
----- FUNCTION _CS_Scale_JudgeOverLoad (END) -------


----- FUNCTION _QueuePush (BEGIN) -----
 FILE: 'lxProtocol.c'
  517: void QueuePush(UserMeasureData *userData)
  518: {
0035B8 904E4D            MOV     DPTR,#userData
0035BB EB                MOV     A,R3
0035BC F0                MOVX    @DPTR,A
0035BD A3                INC     DPTR
0035BE EA                MOV     A,R2
0035BF F0                MOVX    @DPTR,A
0035C0 A3                INC     DPTR
0035C1 E9                MOV     A,R1
0035C2 F0                MOVX    @DPTR,A
  519: 	if(QUEUE_IS_FULL)
  520: 		QueuePop();
0035C3 904C12            MOV     DPTR,#historyUserData+02H
0035C6 E0                MOVX    A,@DPTR
0035C7 C3                CLR     C
0035C8 940A              SUBB    A,#0AH
0035CA 4002              JC      ?C0090?LXPROTOCOL
  521: 	
0035CC D116              ACALL   QueuePop
0035CE         ?C0090?LXPROTOCOL:
  522: 	dmemcpy((u8_t *)&(historyUserData.measureData[historyUserData.tail]), (u8_t *)userData, sizeof(UserMeasureData))
>> ;
0035CE 904C11            MOV     DPTR,#historyUserData+01H
0035D1 E0                MOVX    A,@DPTR
0035D2 75F006            MOV     B,#06H
0035D5 A4                MUL     AB
0035D6 2413              ADD     A,#LOW historyUserData+03H
0035D8 F9                MOV     R1,A
0035D9 744C              MOV     A,#HIGH historyUserData+03H
0035DB 35F0              ADDC    A,B
0035DD FA                MOV     R2,A
0035DE 7B01              MOV     R3,#01H
0035E0 C003              PUSH    AR3
0035E2 C002              PUSH    AR2
0035E4 904E4D            MOV     DPTR,#userData
0035E7 E0                MOVX    A,@DPTR
0035E8 FB                MOV     R3,A
0035E9 A3                INC     DPTR
0035EA E0                MOVX    A,@DPTR
0035EB FA                MOV     R2,A
0035EC A3                INC     DPTR
0035ED E0                MOVX    A,@DPTR
0035EE 8B13              MOV     ?_dmemcpy?BYTE+03H,R3
0035F0 8A14              MOV     ?_dmemcpy?BYTE+04H,R2
0035F2 F515              MOV     ?_dmemcpy?BYTE+05H,A
0035F4 751606            MOV     ?_dmemcpy?BYTE+06H,#06H
0035F7 D002              POP     AR2
0035F9 D003              POP     AR3
0035FB 122947            LCALL   _dmemcpy
  523: 	historyUserData.tail = (historyUserData.tail + 1)%MAX_SIZE;
0035FE 904C11            MOV     DPTR,#historyUserData+01H
003601 E0                MOVX    A,@DPTR
003602 2401              ADD     A,#01H
003604 FF                MOV     R7,A
003605 E4                CLR     A
003606 33                RLC     A
003607 FE                MOV     R6,A
003608 7C00              MOV     R4,#00H
00360A 7D0A              MOV     R5,#0AH
00360C 120173            LCALL   ?C?UIDIV
00360F ED                MOV     A,R5
003610 F0                MOVX    @DPTR,A
  524: 	historyUserData.size++;
003611 A3                INC     DPTR
003612 E0                MOVX    A,@DPTR
003613 04                INC     A
003614 F0                MOVX    @DPTR,A
  525: }
003615 22                RET     
----- FUNCTION _QueuePush (END) -------


----- FUNCTION QueuePop (BEGIN) -----
 FILE: 'lxProtocol.c'
  503: static UserMeasureData* QueuePop(void)
  504: {
  505: 	UserMeasureData *temp = NULL;
  506: 	
003616 904E4A            MOV     DPTR,#temp
003619 E4                CLR     A
00361A F0                MOVX    @DPTR,A
00361B A3                INC     DPTR
00361C F0                MOVX    @DPTR,A
00361D A3                INC     DPTR
00361E F0                MOVX    @DPTR,A
  507: 	if(QUEUE_IS_EMPTY)
00361F 904C12            MOV     DPTR,#historyUserData+02H
003622 E0                MOVX    A,@DPTR
003623 D3                SETB    C
003624 9400              SUBB    A,#00H
003626 5007              JNC     ?C0088?LXPROTOCOL
  508: 		return NULL;
003628 7B00              MOV     R3,#00H
00362A 7A00              MOV     R2,#00H
00362C 7900              MOV     R1,#00H
00362E 22                RET     
00362F         ?C0088?LXPROTOCOL:
  509: 
  510: 	temp = &(historyUserData.measureData[historyUserData.head]);
00362F 904C10            MOV     DPTR,#historyUserData
003632 E0                MOVX    A,@DPTR
003633 75F006            MOV     B,#06H
003636 A4                MUL     AB
003637 2413              ADD     A,#LOW historyUserData+03H
003639 F9                MOV     R1,A
00363A 744C              MOV     A,#HIGH historyUserData+03H
00363C 35F0              ADDC    A,B
00363E FA                MOV     R2,A
00363F 904E4A            MOV     DPTR,#temp
003642 7401              MOV     A,#01H
003644 F0                MOVX    @DPTR,A
003645 A3                INC     DPTR
003646 EA                MOV     A,R2
003647 F0                MOVX    @DPTR,A
003648 A3                INC     DPTR
003649 E9                MOV     A,R1
00364A F0                MOVX    @DPTR,A
  511: 	historyUserData.head = (historyUserData.head + 1)%MAX_SIZE;
00364B 904C10            MOV     DPTR,#historyUserData
00364E E0                MOVX    A,@DPTR
00364F 2401              ADD     A,#01H
003651 FF                MOV     R7,A
003652 E4                CLR     A
003653 33                RLC     A
003654 FE                MOV     R6,A
003655 7C00              MOV     R4,#00H
003657 7D0A              MOV     R5,#0AH
003659 120173            LCALL   ?C?UIDIV
00365C ED                MOV     A,R5
00365D F0                MOVX    @DPTR,A
  512: 	historyUserData.size--;
00365E 904C12            MOV     DPTR,#historyUserData+02H
003661 E0                MOVX    A,@DPTR
003662 14                DEC     A
003663 F0                MOVX    @DPTR,A
  513: 
  514: 	return temp;
003664 904E4A            MOV     DPTR,#temp
003667 E0                MOVX    A,@DPTR
003668 FB                MOV     R3,A
003669 A3                INC     DPTR
00366A E0                MOVX    A,@DPTR
00366B FA                MOV     R2,A
00366C A3                INC     DPTR
00366D E0                MOVX    A,@DPTR
00366E F9                MOV     R1,A
  515: }
00366F 22                RET     
----- FUNCTION QueuePop (END) -------


----- FUNCTION _CS_Scale_GetWeight (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  335: void CS_Scale_GetWeight(u16_t R_AD_BUF)
  336: {
003670 904D9C            MOV     DPTR,#R_AD_BUF
003673 EE                MOV     A,R6
003674 F0                MOVX    @DPTR,A
003675 A3                INC     DPTR
003676 EF                MOV     A,R7
003677 F0                MOVX    @DPTR,A
  337: 	u32_t	ad_temp;
  338: 	u16_t	ad_cal;
  339: 	u16_t	CaliDot1,CaliDot2,CaliDot3;
  340: 	
  341: 	CaliDot1 =CS_Scale_CaliProc(CaliProcGetCaliDot1);
003678 7F02              MOV     R7,#02H
00367A 120A04            LCALL   _CS_Scale_CaliProc
00367D 904DA4            MOV     DPTR,#CaliDot1
003680 EE                MOV     A,R6
003681 F0                MOVX    @DPTR,A
003682 A3                INC     DPTR
003683 EF                MOV     A,R7
003684 F0                MOVX    @DPTR,A
  342: 	CaliDot2 =CS_Scale_CaliProc(CaliProcGetCaliDot2);
003685 7F03              MOV     R7,#03H
003687 120A04            LCALL   _CS_Scale_CaliProc
00368A 904DA6            MOV     DPTR,#CaliDot2
00368D EE                MOV     A,R6
00368E F0                MOVX    @DPTR,A
00368F A3                INC     DPTR
003690 EF                MOV     A,R7
003691 F0                MOVX    @DPTR,A
  343: 	CaliDot3 =CS_Scale_CaliProc(CaliProcGetCaliDot3);
003692 7F04              MOV     R7,#04H
003694 120A04            LCALL   _CS_Scale_CaliProc
003697 904DA8            MOV     DPTR,#CaliDot3
00369A EE                MOV     A,R6
00369B F0                MOVX    @DPTR,A
00369C A3                INC     DPTR
00369D EF                MOV     A,R7
00369E F0                MOVX    @DPTR,A
  344: 	
  345: 	if(R_AD_BUF <= CaliDot1 )
00369F 904DA4            MOV     DPTR,#CaliDot1
0036A2 E0                MOVX    A,@DPTR
0036A3 FE                MOV     R6,A
0036A4 A3                INC     DPTR
0036A5 E0                MOVX    A,@DPTR
0036A6 FF                MOV     R7,A
0036A7 904D9C            MOV     DPTR,#R_AD_BUF
0036AA E0                MOVX    A,@DPTR
0036AB FC                MOV     R4,A
0036AC A3                INC     DPTR
0036AD E0                MOVX    A,@DPTR
0036AE FD                MOV     R5,A
0036AF D3                SETB    C
0036B0 9F                SUBB    A,R7
0036B1 EC                MOV     A,R4
0036B2 9E                SUBB    A,R6
0036B3 5033              JNC     ?C0034?CS_SCALE_PROC
  346: 		{
  347: 		ad_temp = (u32_t)R_AD_BUF  * 5000;	
0036B5 7E13              MOV     R6,#013H
0036B7 7F88              MOV     R7,#088H
0036B9 1203C8            LCALL   ?C?LIMUL
0036BC A3                INC     DPTR
0036BD 120332            LCALL   ?C?LSTXDATA
  348: 		R_UnitWeight.origin = ad_temp / CaliDot1;
0036C0 904DA4            MOV     DPTR,#CaliDot1
0036C3 E0                MOVX    A,@DPTR
0036C4 FE                MOV     R6,A
0036C5 A3                INC     DPTR
0036C6 E0                MOVX    A,@DPTR
0036C7 FF                MOV     R7,A
0036C8 FB                MOV     R3,A
0036C9 AA06              MOV     R2,AR6
0036CB E4                CLR     A
0036CC F9                MOV     R1,A
0036CD F8                MOV     R0,A
0036CE 904D9E            MOV     DPTR,#ad_temp
0036D1 E0                MOVX    A,@DPTR
0036D2 FC                MOV     R4,A
0036D3 A3                INC     DPTR
0036D4 E0                MOVX    A,@DPTR
0036D5 FD                MOV     R5,A
0036D6 A3                INC     DPTR
0036D7 E0                MOVX    A,@DPTR
0036D8 FE                MOV     R6,A
0036D9 A3                INC     DPTR
0036DA E0                MOVX    A,@DPTR
0036DB FF                MOV     R7,A
0036DC 120269            LCALL   ?C?ULDIV
0036DF 904CC9            MOV     DPTR,#R_UnitWeight
0036E2 EE                MOV     A,R6
0036E3 F0                MOVX    @DPTR,A
0036E4 A3                INC     DPTR
0036E5 EF                MOV     A,R7
0036E6 F0                MOVX    @DPTR,A
0036E7 22                RET     
  349: 		return;
  350: 		}
0036E8         ?C0034?CS_SCALE_PROC:
  351: 	ad_cal = R_AD_BUF - CaliDot1;
0036E8 904DA4            MOV     DPTR,#CaliDot1
0036EB E0                MOVX    A,@DPTR
0036EC FE                MOV     R6,A
0036ED A3                INC     DPTR
0036EE E0                MOVX    A,@DPTR
0036EF FF                MOV     R7,A
0036F0 C3                CLR     C
0036F1 904D9D            MOV     DPTR,#R_AD_BUF+01H
0036F4 E0                MOVX    A,@DPTR
0036F5 9F                SUBB    A,R7
0036F6 FF                MOV     R7,A
0036F7 904D9C            MOV     DPTR,#R_AD_BUF
0036FA E0                MOVX    A,@DPTR
0036FB 9E                SUBB    A,R6
0036FC FE                MOV     R6,A
0036FD 904DA2            MOV     DPTR,#ad_cal
003700 F0                MOVX    @DPTR,A
003701 A3                INC     DPTR
003702 EF                MOV     A,R7
003703 F0                MOVX    @DPTR,A
  352: 
  353: 	if(ad_cal <=CaliDot2)
003704 C3                CLR     C
003705 904DA7            MOV     DPTR,#CaliDot2+01H
003708 E0                MOVX    A,@DPTR
003709 9F                SUBB    A,R7
00370A 904DA6            MOV     DPTR,#CaliDot2
00370D E0                MOVX    A,@DPTR
00370E 9E                SUBB    A,R6
00370F 4043              JC      ?C0036?CS_SCALE_PROC
  354: 		{
  355: 		ad_temp = (u32_t)ad_cal  * 5000;	
003711 904DA2            MOV     DPTR,#ad_cal
003714 E0                MOVX    A,@DPTR
003715 FE                MOV     R6,A
003716 A3                INC     DPTR
003717 E0                MOVX    A,@DPTR
003718 FF                MOV     R7,A
003719 7C13              MOV     R4,#013H
00371B 7D88              MOV     R5,#088H
00371D 1203C8            LCALL   ?C?LIMUL
003720 904D9E            MOV     DPTR,#ad_temp
003723 120332            LCALL   ?C?LSTXDATA
  356: 		R_UnitWeight.origin = ad_temp / CaliDot2 +5000 ;
003726 904DA6            MOV     DPTR,#CaliDot2
003729 E0                MOVX    A,@DPTR
00372A FE                MOV     R6,A
00372B A3                INC     DPTR
00372C E0                MOVX    A,@DPTR
00372D FF                MOV     R7,A
00372E FB                MOV     R3,A
00372F AA06              MOV     R2,AR6
003731 E4                CLR     A
003732 F9                MOV     R1,A
003733 F8                MOV     R0,A
003734 904D9E            MOV     DPTR,#ad_temp
003737 E0                MOVX    A,@DPTR
003738 FC                MOV     R4,A
003739 A3                INC     DPTR
00373A E0                MOVX    A,@DPTR
00373B FD                MOV     R5,A
00373C A3                INC     DPTR
00373D E0                MOVX    A,@DPTR
00373E FE                MOV     R6,A
00373F A3                INC     DPTR
003740 E0                MOVX    A,@DPTR
003741 FF                MOV     R7,A
003742 120269            LCALL   ?C?ULDIV
003745 EF                MOV     A,R7
003746 2488              ADD     A,#088H
003748 FF                MOV     R7,A
003749 EE                MOV     A,R6
00374A 3413              ADDC    A,#013H
00374C 904CC9            MOV     DPTR,#R_UnitWeight
00374F F0                MOVX    @DPTR,A
003750 A3                INC     DPTR
003751 EF                MOV     A,R7
003752 F0                MOVX    @DPTR,A
003753 22                RET     
  357: 		return;
  358: 		}
003754         ?C0036?CS_SCALE_PROC:
  359: 	
  360: 	ad_cal  = R_AD_BUF - CaliDot1 - CaliDot2 ;	
003754 904DA4            MOV     DPTR,#CaliDot1
003757 E0                MOVX    A,@DPTR
003758 FE                MOV     R6,A
003759 A3                INC     DPTR
00375A E0                MOVX    A,@DPTR
00375B FF                MOV     R7,A
00375C C3                CLR     C
00375D 904D9D            MOV     DPTR,#R_AD_BUF+01H
003760 E0                MOVX    A,@DPTR
003761 9F                SUBB    A,R7
003762 FF                MOV     R7,A
003763 904D9C            MOV     DPTR,#R_AD_BUF
003766 E0                MOVX    A,@DPTR
003767 9E                SUBB    A,R6
003768 FE                MOV     R6,A
003769 904DA6            MOV     DPTR,#CaliDot2
00376C E0                MOVX    A,@DPTR
00376D FC                MOV     R4,A
00376E A3                INC     DPTR
00376F E0                MOVX    A,@DPTR
003770 FD                MOV     R5,A
003771 C3                CLR     C
003772 EF                MOV     A,R7
003773 9D                SUBB    A,R5
003774 FF                MOV     R7,A
003775 EE                MOV     A,R6
003776 9C                SUBB    A,R4
003777 904DA2            MOV     DPTR,#ad_cal
00377A F0                MOVX    @DPTR,A
00377B A3                INC     DPTR
00377C EF                MOV     A,R7
00377D F0                MOVX    @DPTR,A
  361: 	ad_temp = (u32_t)ad_cal  * 5000;	
00377E 904DA2            MOV     DPTR,#ad_cal
003781 E0                MOVX    A,@DPTR
003782 FE                MOV     R6,A
003783 A3                INC     DPTR
003784 E0                MOVX    A,@DPTR
003785 FF                MOV     R7,A
003786 7C13              MOV     R4,#013H
003788 7D88              MOV     R5,#088H
00378A 1203C8            LCALL   ?C?LIMUL
00378D 904D9E            MOV     DPTR,#ad_temp
003790 120332            LCALL   ?C?LSTXDATA
  362: 	R_UnitWeight.origin = ad_temp /CaliDot3 +10000 ;
003793 904DA8            MOV     DPTR,#CaliDot3
003796 E0                MOVX    A,@DPTR
003797 FE                MOV     R6,A
003798 A3                INC     DPTR
003799 E0                MOVX    A,@DPTR
00379A FF                MOV     R7,A
00379B FB                MOV     R3,A
00379C AA06              MOV     R2,AR6
00379E E4                CLR     A
00379F F9                MOV     R1,A
0037A0 F8                MOV     R0,A
0037A1 904D9E            MOV     DPTR,#ad_temp
0037A4 E0                MOVX    A,@DPTR
0037A5 FC                MOV     R4,A
0037A6 A3                INC     DPTR
0037A7 E0                MOVX    A,@DPTR
0037A8 FD                MOV     R5,A
0037A9 A3                INC     DPTR
0037AA E0                MOVX    A,@DPTR
0037AB FE                MOV     R6,A
0037AC A3                INC     DPTR
0037AD E0                MOVX    A,@DPTR
0037AE FF                MOV     R7,A
0037AF 120269            LCALL   ?C?ULDIV
0037B2 EF                MOV     A,R7
0037B3 2410              ADD     A,#010H
0037B5 FF                MOV     R7,A
0037B6 EE                MOV     A,R6
0037B7 3427              ADDC    A,#027H
0037B9 904CC9            MOV     DPTR,#R_UnitWeight
0037BC F0                MOVX    @DPTR,A
0037BD A3                INC     DPTR
0037BE EF                MOV     A,R7
0037BF F0                MOVX    @DPTR,A
  363: 
  364: 	
  365: }
0037C0 22                RET     
----- FUNCTION _CS_Scale_GetWeight (END) -------


----- FUNCTION _CS_Scale_AdcFilter (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  245: u16_t CS_Scale_AdcFilter(u8_t option,u16_t R_AD_BUF)
  246: {
0037C1 904E09            MOV     DPTR,#R_AD_BUF
0037C4 EC                MOV     A,R4
0037C5 F0                MOVX    @DPTR,A
0037C6 A3                INC     DPTR
0037C7 ED                MOV     A,R5
0037C8 F0                MOVX    @DPTR,A
0037C9 904E08            MOV     DPTR,#option
0037CC EF                MOV     A,R7
0037CD F0                MOVX    @DPTR,A
  247: 	u32_t	ad_temp;
  248: 	static	u16_t xdata R_AD_FilTimes;
  249: 	static	u16_t xdata R_AD_BUF_OLD;
  250: 	static	u16_t xdata R_AD_F1;
  251: 	static	u16_t xdata R_AD_F2;
  252: 	static	u16_t xdata R_AD_F3;
  253: 	static	u16_t xdata R_AD_F4;
  254: 	static	u16_t xdata R_AD_F5;
  255: 	static	u16_t xdata R_AD_F6;
  256: 	static	u16_t xdata R_AD_F7;
  257: 	static	u16_t xdata R_AD_F8;	
  258: 		
  259: 	if(option==ScaleAdcFilterGetFilTimes)
0037CE BF0209            CJNE    R7,#02H,?C0017?CS_SCALE_PROC
  260: 		{
  261: 		return  R_AD_FilTimes;
0037D1 904C81            MOV     DPTR,#R_AD_FilTimes
0037D4 E0                MOVX    A,@DPTR
0037D5 FE                MOV     R6,A
0037D6 A3                INC     DPTR
0037D7 E0                MOVX    A,@DPTR
0037D8 FF                MOV     R7,A
0037D9 22                RET     
  262: 		}
0037DA         ?C0017?CS_SCALE_PROC:
  263: 	
  264: 	
  265: 	if(R_AD_BUF >R_AD_BUF_OLD)
0037DA 904C83            MOV     DPTR,#R_AD_BUF_OLD
0037DD E0                MOVX    A,@DPTR
0037DE FE                MOV     R6,A
0037DF A3                INC     DPTR
0037E0 E0                MOVX    A,@DPTR
0037E1 FF                MOV     R7,A
0037E2 904E09            MOV     DPTR,#R_AD_BUF
0037E5 E0                MOVX    A,@DPTR
0037E6 FC                MOV     R4,A
0037E7 A3                INC     DPTR
0037E8 E0                MOVX    A,@DPTR
0037E9 FD                MOV     R5,A
0037EA D3                SETB    C
0037EB 9F                SUBB    A,R7
0037EC EC                MOV     A,R4
0037ED 9E                SUBB    A,R6
0037EE 4017              JC      ?C0019?CS_SCALE_PROC
  266: 		ad_temp = R_AD_BUF - R_AD_BUF_OLD;
0037F0 904C83            MOV     DPTR,#R_AD_BUF_OLD
0037F3 E0                MOVX    A,@DPTR
0037F4 A3                INC     DPTR
0037F5 E0                MOVX    A,@DPTR
0037F6 ED                MOV     A,R5
0037F7 9F                SUBB    A,R7
0037F8 FF                MOV     R7,A
0037F9 EC                MOV     A,R4
0037FA 9E                SUBB    A,R6
0037FB FE                MOV     R6,A
0037FC E4                CLR     A
0037FD FC                MOV     R4,A
0037FE FD                MOV     R5,A
0037FF 904E0B            MOV     DPTR,#ad_temp
003802 120332            LCALL   ?C?LSTXDATA
003805 801E              SJMP    ?C0020?CS_SCALE_PROC
003807         ?C0019?CS_SCALE_PROC:
  267: 	else
  268: 		ad_temp = R_AD_BUF_OLD - R_AD_BUF;
003807 904E09            MOV     DPTR,#R_AD_BUF
00380A E0                MOVX    A,@DPTR
00380B FE                MOV     R6,A
00380C A3                INC     DPTR
00380D E0                MOVX    A,@DPTR
00380E FF                MOV     R7,A
00380F C3                CLR     C
003810 904C84            MOV     DPTR,#R_AD_BUF_OLD+01H
003813 E0                MOVX    A,@DPTR
003814 9F                SUBB    A,R7
003815 FF                MOV     R7,A
003816 904C83            MOV     DPTR,#R_AD_BUF_OLD
003819 E0                MOVX    A,@DPTR
00381A 9E                SUBB    A,R6
00381B FE                MOV     R6,A
00381C E4                CLR     A
00381D FC                MOV     R4,A
00381E FD                MOV     R5,A
00381F 904E0B            MOV     DPTR,#ad_temp
003822 120332            LCALL   ?C?LSTXDATA
003825         ?C0020?CS_SCALE_PROC:
  269: 
  270: 	R_AD_BUF_OLD	=	R_AD_BUF;
003825 904E09            MOV     DPTR,#R_AD_BUF
003828 E0                MOVX    A,@DPTR
003829 FF                MOV     R7,A
00382A A3                INC     DPTR
00382B E0                MOVX    A,@DPTR
00382C 904C83            MOV     DPTR,#R_AD_BUF_OLD
00382F CF                XCH     A,R7
003830 F0                MOVX    @DPTR,A
003831 A3                INC     DPTR
003832 EF                MOV     A,R7
003833 F0                MOVX    @DPTR,A
  271: 	
  272: 	if((ad_temp > CS_Scale_FiterX) ||(option==ScaleAdcFilterReset))	
003834 E4                CLR     A
003835 7F05              MOV     R7,#05H
003837 FE                MOV     R6,A
003838 FD                MOV     R5,A
003839 FC                MOV     R4,A
00383A 904E0B            MOV     DPTR,#ad_temp
00383D E0                MOVX    A,@DPTR
00383E F8                MOV     R0,A
00383F A3                INC     DPTR
003840 E0                MOVX    A,@DPTR
003841 F9                MOV     R1,A
003842 A3                INC     DPTR
003843 E0                MOVX    A,@DPTR
003844 FA                MOV     R2,A
003845 A3                INC     DPTR
003846 E0                MOVX    A,@DPTR
003847 FB                MOV     R3,A
003848 D3                SETB    C
003849 1202FB            LCALL   ?C?ULCMP
00384C 5007              JNC     ?C0022?CS_SCALE_PROC
00384E 904E08            MOV     DPTR,#option
003851 E0                MOVX    A,@DPTR
003852 B4012B            CJNE    A,#01H,?C0021?CS_SCALE_PROC
003855         ?C0022?CS_SCALE_PROC:
  273: 		{						
  274: 		R_AD_FilTimes = 0;
003855 E4                CLR     A
003856 904C81            MOV     DPTR,#R_AD_FilTimes
003859 F0                MOVX    @DPTR,A
00385A A3                INC     DPTR
00385B F0                MOVX    @DPTR,A
  275: 		R_AD_F1 	    = 0;
00385C 904C85            MOV     DPTR,#R_AD_F1
00385F F0                MOVX    @DPTR,A
003860 A3                INC     DPTR
003861 F0                MOVX    @DPTR,A
  276: 		R_AD_F2 	    = 0;
003862 A3                INC     DPTR
003863 F0                MOVX    @DPTR,A
003864 A3                INC     DPTR
003865 F0                MOVX    @DPTR,A
  277: 		R_AD_F3 	    = 0;
003866 A3                INC     DPTR
003867 F0                MOVX    @DPTR,A
003868 A3                INC     DPTR
003869 F0                MOVX    @DPTR,A
  278: 		R_AD_F4 	    = 0;
00386A A3                INC     DPTR
00386B F0                MOVX    @DPTR,A
00386C A3                INC     DPTR
00386D F0                MOVX    @DPTR,A
  279: 		R_AD_F5 	    = 0;
00386E A3                INC     DPTR
00386F F0                MOVX    @DPTR,A
003870 A3                INC     DPTR
003871 F0                MOVX    @DPTR,A
  280: 		R_AD_F6 	    = 0;
003872 A3                INC     DPTR
003873 F0                MOVX    @DPTR,A
003874 A3                INC     DPTR
003875 F0                MOVX    @DPTR,A
  281: 		R_AD_F7 	    = 0;
003876 A3                INC     DPTR
003877 F0                MOVX    @DPTR,A
003878 A3                INC     DPTR
003879 F0                MOVX    @DPTR,A
  282: 		R_AD_F8 	    = 0;
00387A A3                INC     DPTR
00387B F0                MOVX    @DPTR,A
00387C A3                INC     DPTR
00387D F0                MOVX    @DPTR,A
  283: 		}
00387E 6168              AJMP    ?C0023?CS_SCALE_PROC
003880         ?C0021?CS_SCALE_PROC:
  284: 	else
  285: 		{
  286: 		if(R_AD_FilTimes < 200 )
003880 C3                CLR     C
003881 904C82            MOV     DPTR,#R_AD_FilTimes+01H
003884 E0                MOVX    A,@DPTR
003885 94C8              SUBB    A,#0C8H
003887 904C81            MOV     DPTR,#R_AD_FilTimes
00388A E0                MOVX    A,@DPTR
00388B 9400              SUBB    A,#00H
00388D 500C              JNC     ?C0024?CS_SCALE_PROC
  287: 		R_AD_FilTimes ++;	
00388F A3                INC     DPTR
003890 E0                MOVX    A,@DPTR
003891 04                INC     A
003892 F0                MOVX    @DPTR,A
003893 7006              JNZ     ?C0234?CS_SCALE_PROC
003895 904C81            MOV     DPTR,#R_AD_FilTimes
003898 E0                MOVX    A,@DPTR
003899 04                INC     A
00389A F0                MOVX    @DPTR,A
00389B         ?C0234?CS_SCALE_PROC:
00389B         ?C0024?CS_SCALE_PROC:
  288: 
  289: 			if(R_AD_FilTimes<=1)
00389B 904C81            MOV     DPTR,#R_AD_FilTimes
00389E E0                MOVX    A,@DPTR
00389F FE                MOV     R6,A
0038A0 A3                INC     DPTR
0038A1 E0                MOVX    A,@DPTR
0038A2 FF                MOV     R7,A
0038A3 D3                SETB    C
0038A4 9401              SUBB    A,#01H
0038A6 EE                MOV     A,R6
0038A7 9400              SUBB    A,#00H
0038A9 500F              JNC     ?C0025?CS_SCALE_PROC
  290: 				R_AD_F1 = R_AD_BUF;	
0038AB 904E09            MOV     DPTR,#R_AD_BUF
0038AE E0                MOVX    A,@DPTR
0038AF FD                MOV     R5,A
0038B0 A3                INC     DPTR
0038B1 E0                MOVX    A,@DPTR
0038B2 904C85            MOV     DPTR,#R_AD_F1
0038B5 CD                XCH     A,R5
0038B6 F0                MOVX    @DPTR,A
0038B7 A3                INC     DPTR
0038B8 ED                MOV     A,R5
0038B9 F0                MOVX    @DPTR,A
0038BA         ?C0025?CS_SCALE_PROC:
  291: 			if(R_AD_FilTimes<=2)
0038BA D3                SETB    C
0038BB EF                MOV     A,R7
0038BC 9402              SUBB    A,#02H
0038BE EE                MOV     A,R6
0038BF 9400              SUBB    A,#00H
0038C1 500F              JNC     ?C0026?CS_SCALE_PROC
  292: 				R_AD_F2 = R_AD_BUF;
0038C3 904E09            MOV     DPTR,#R_AD_BUF
0038C6 E0                MOVX    A,@DPTR
0038C7 FF                MOV     R7,A
0038C8 A3                INC     DPTR
0038C9 E0                MOVX    A,@DPTR
0038CA 904C87            MOV     DPTR,#R_AD_F2
0038CD CF                XCH     A,R7
0038CE F0                MOVX    @DPTR,A
0038CF A3                INC     DPTR
0038D0 EF                MOV     A,R7
0038D1 F0                MOVX    @DPTR,A
0038D2         ?C0026?CS_SCALE_PROC:
  293: 			if(R_AD_FilTimes<=3)
0038D2 D3                SETB    C
0038D3 904C82            MOV     DPTR,#R_AD_FilTimes+01H
0038D6 E0                MOVX    A,@DPTR
0038D7 9403              SUBB    A,#03H
0038D9 904C81            MOV     DPTR,#R_AD_FilTimes
0038DC E0                MOVX    A,@DPTR
0038DD 9400              SUBB    A,#00H
0038DF 500F              JNC     ?C0027?CS_SCALE_PROC
  294: 				R_AD_F3 = R_AD_BUF;
0038E1 904E09            MOV     DPTR,#R_AD_BUF
0038E4 E0                MOVX    A,@DPTR
0038E5 FF                MOV     R7,A
0038E6 A3                INC     DPTR
0038E7 E0                MOVX    A,@DPTR
0038E8 904C89            MOV     DPTR,#R_AD_F3
0038EB CF                XCH     A,R7
0038EC F0                MOVX    @DPTR,A
0038ED A3                INC     DPTR
0038EE EF                MOV     A,R7
0038EF F0                MOVX    @DPTR,A
0038F0         ?C0027?CS_SCALE_PROC:
  295: 			if(R_AD_FilTimes<=4)
0038F0 904C81            MOV     DPTR,#R_AD_FilTimes
0038F3 E0                MOVX    A,@DPTR
0038F4 FE                MOV     R6,A
0038F5 A3                INC     DPTR
0038F6 E0                MOVX    A,@DPTR
0038F7 FF                MOV     R7,A
0038F8 D3                SETB    C
0038F9 9404              SUBB    A,#04H
0038FB EE                MOV     A,R6
0038FC 9400              SUBB    A,#00H
0038FE 500F              JNC     ?C0028?CS_SCALE_PROC
  296: 				R_AD_F4 = R_AD_BUF;
003900 904E09            MOV     DPTR,#R_AD_BUF
003903 E0                MOVX    A,@DPTR
003904 FD                MOV     R5,A
003905 A3                INC     DPTR
003906 E0                MOVX    A,@DPTR
003907 904C8B            MOV     DPTR,#R_AD_F4
00390A CD                XCH     A,R5
00390B F0                MOVX    @DPTR,A
00390C A3                INC     DPTR
00390D ED                MOV     A,R5
00390E F0                MOVX    @DPTR,A
00390F         ?C0028?CS_SCALE_PROC:
  297: 			if(R_AD_FilTimes<=5)
00390F D3                SETB    C
003910 EF                MOV     A,R7
003911 9405              SUBB    A,#05H
003913 EE                MOV     A,R6
003914 9400              SUBB    A,#00H
003916 500F              JNC     ?C0029?CS_SCALE_PROC
  298: 				R_AD_F5 = R_AD_BUF;
003918 904E09            MOV     DPTR,#R_AD_BUF
00391B E0                MOVX    A,@DPTR
00391C FF                MOV     R7,A
00391D A3                INC     DPTR
00391E E0                MOVX    A,@DPTR
00391F 904C8D            MOV     DPTR,#R_AD_F5
003922 CF                XCH     A,R7
003923 F0                MOVX    @DPTR,A
003924 A3                INC     DPTR
003925 EF                MOV     A,R7
003926 F0                MOVX    @DPTR,A
003927         ?C0029?CS_SCALE_PROC:
  299: 			if(R_AD_FilTimes<=6)
003927 D3                SETB    C
003928 904C82            MOV     DPTR,#R_AD_FilTimes+01H
00392B E0                MOVX    A,@DPTR
00392C 9406              SUBB    A,#06H
00392E 904C81            MOV     DPTR,#R_AD_FilTimes
003931 E0                MOVX    A,@DPTR
003932 9400              SUBB    A,#00H
003934 500F              JNC     ?C0030?CS_SCALE_PROC
  300: 				R_AD_F6 = R_AD_BUF;
003936 904E09            MOV     DPTR,#R_AD_BUF
003939 E0                MOVX    A,@DPTR
00393A FF                MOV     R7,A
00393B A3                INC     DPTR
00393C E0                MOVX    A,@DPTR
00393D 904C8F            MOV     DPTR,#R_AD_F6
003940 CF                XCH     A,R7
003941 F0                MOVX    @DPTR,A
003942 A3                INC     DPTR
003943 EF                MOV     A,R7
003944 F0                MOVX    @DPTR,A
003945         ?C0030?CS_SCALE_PROC:
  301: 			if(R_AD_FilTimes<=7)
003945 904C81            MOV     DPTR,#R_AD_FilTimes
003948 E0                MOVX    A,@DPTR
003949 FE                MOV     R6,A
00394A A3                INC     DPTR
00394B E0                MOVX    A,@DPTR
00394C FF                MOV     R7,A
00394D D3                SETB    C
00394E 9407              SUBB    A,#07H
003950 EE                MOV     A,R6
003951 9400              SUBB    A,#00H
003953 500F              JNC     ?C0031?CS_SCALE_PROC
  302: 				R_AD_F7 = R_AD_BUF;
003955 904E09            MOV     DPTR,#R_AD_BUF
003958 E0                MOVX    A,@DPTR
003959 FD                MOV     R5,A
00395A A3                INC     DPTR
00395B E0                MOVX    A,@DPTR
00395C 904C91            MOV     DPTR,#R_AD_F7
00395F CD                XCH     A,R5
003960 F0                MOVX    @DPTR,A
003961 A3                INC     DPTR
003962 ED                MOV     A,R5
003963 F0                MOVX    @DPTR,A
003964         ?C0031?CS_SCALE_PROC:
  303: 			if(R_AD_FilTimes<=8)
003964 D3                SETB    C
003965 EF                MOV     A,R7
003966 9408              SUBB    A,#08H
003968 EE                MOV     A,R6
003969 9400              SUBB    A,#00H
00396B 500F              JNC     ?C0032?CS_SCALE_PROC
  304: 				R_AD_F8 = R_AD_BUF;
00396D 904E09            MOV     DPTR,#R_AD_BUF
003970 E0                MOVX    A,@DPTR
003971 FF                MOV     R7,A
003972 A3                INC     DPTR
003973 E0                MOVX    A,@DPTR
003974 904C93            MOV     DPTR,#R_AD_F8
003977 CF                XCH     A,R7
003978 F0                MOVX    @DPTR,A
003979 A3                INC     DPTR
00397A EF                MOV     A,R7
00397B F0                MOVX    @DPTR,A
00397C         ?C0032?CS_SCALE_PROC:
  305: 			if(R_AD_FilTimes>8)
00397C D3                SETB    C
00397D 904C82            MOV     DPTR,#R_AD_FilTimes+01H
003980 E0                MOVX    A,@DPTR
003981 9408              SUBB    A,#08H
003983 904C81            MOV     DPTR,#R_AD_FilTimes
003986 E0                MOVX    A,@DPTR
003987 9400              SUBB    A,#00H
003989 4078              JC      ?C0033?CS_SCALE_PROC
  306: 				{
  307: 				R_AD_F1 = R_AD_F2;
00398B 904C87            MOV     DPTR,#R_AD_F2
00398E E0                MOVX    A,@DPTR
00398F FF                MOV     R7,A
003990 A3                INC     DPTR
003991 E0                MOVX    A,@DPTR
003992 904C85            MOV     DPTR,#R_AD_F1
003995 CF                XCH     A,R7
003996 F0                MOVX    @DPTR,A
003997 A3                INC     DPTR
003998 EF                MOV     A,R7
003999 F0                MOVX    @DPTR,A
  308: 				R_AD_F2 = R_AD_F3;
00399A 904C89            MOV     DPTR,#R_AD_F3
00399D E0                MOVX    A,@DPTR
00399E FF                MOV     R7,A
00399F A3                INC     DPTR
0039A0 E0                MOVX    A,@DPTR
0039A1 904C87            MOV     DPTR,#R_AD_F2
0039A4 CF                XCH     A,R7
0039A5 F0                MOVX    @DPTR,A
0039A6 A3                INC     DPTR
0039A7 EF                MOV     A,R7
0039A8 F0                MOVX    @DPTR,A
  309: 				R_AD_F3 = R_AD_F4;
0039A9 904C8B            MOV     DPTR,#R_AD_F4
0039AC E0                MOVX    A,@DPTR
0039AD FF                MOV     R7,A
0039AE A3                INC     DPTR
0039AF E0                MOVX    A,@DPTR
0039B0 904C89            MOV     DPTR,#R_AD_F3
0039B3 CF                XCH     A,R7
0039B4 F0                MOVX    @DPTR,A
0039B5 A3                INC     DPTR
0039B6 EF                MOV     A,R7
0039B7 F0                MOVX    @DPTR,A
  310: 				R_AD_F4 = R_AD_F5;
0039B8 904C8D            MOV     DPTR,#R_AD_F5
0039BB E0                MOVX    A,@DPTR
0039BC FF                MOV     R7,A
0039BD A3                INC     DPTR
0039BE E0                MOVX    A,@DPTR
0039BF 904C8B            MOV     DPTR,#R_AD_F4
0039C2 CF                XCH     A,R7
0039C3 F0                MOVX    @DPTR,A
0039C4 A3                INC     DPTR
0039C5 EF                MOV     A,R7
0039C6 F0                MOVX    @DPTR,A
  311: 				R_AD_F5 = R_AD_F6;
0039C7 904C8F            MOV     DPTR,#R_AD_F6
0039CA E0                MOVX    A,@DPTR
0039CB FF                MOV     R7,A
0039CC A3                INC     DPTR
0039CD E0                MOVX    A,@DPTR
0039CE 904C8D            MOV     DPTR,#R_AD_F5
0039D1 CF                XCH     A,R7
0039D2 F0                MOVX    @DPTR,A
0039D3 A3                INC     DPTR
0039D4 EF                MOV     A,R7
0039D5 F0                MOVX    @DPTR,A
  312: 				R_AD_F6 = R_AD_F7;
0039D6 904C91            MOV     DPTR,#R_AD_F7
0039D9 E0                MOVX    A,@DPTR
0039DA FF                MOV     R7,A
0039DB A3                INC     DPTR
0039DC E0                MOVX    A,@DPTR
0039DD 904C8F            MOV     DPTR,#R_AD_F6
0039E0 CF                XCH     A,R7
0039E1 F0                MOVX    @DPTR,A
0039E2 A3                INC     DPTR
0039E3 EF                MOV     A,R7
0039E4 F0                MOVX    @DPTR,A
  313: 				R_AD_F7 = R_AD_F8;
0039E5 904C93            MOV     DPTR,#R_AD_F8
0039E8 E0                MOVX    A,@DPTR
0039E9 FF                MOV     R7,A
0039EA A3                INC     DPTR
0039EB E0                MOVX    A,@DPTR
0039EC 904C91            MOV     DPTR,#R_AD_F7
0039EF CF                XCH     A,R7
0039F0 F0                MOVX    @DPTR,A
0039F1 A3                INC     DPTR
0039F2 EF                MOV     A,R7
0039F3 F0                MOVX    @DPTR,A
  314: 				R_AD_F8 = R_AD_BUF;
0039F4 904E09            MOV     DPTR,#R_AD_BUF
0039F7 E0                MOVX    A,@DPTR
0039F8 FF                MOV     R7,A
0039F9 A3                INC     DPTR
0039FA E0                MOVX    A,@DPTR
0039FB 904C93            MOV     DPTR,#R_AD_F8
0039FE CF                XCH     A,R7
0039FF F0                MOVX    @DPTR,A
003A00 A3                INC     DPTR
003A01 EF                MOV     A,R7
003A02 F0                MOVX    @DPTR,A
  315: 				}
003A03         ?C0033?CS_SCALE_PROC:
  316: 
  317: 		ad_temp	= R_AD_F1;
003A03 904C85            MOV     DPTR,#R_AD_F1
003A06 E0                MOVX    A,@DPTR
003A07 FE                MOV     R6,A
003A08 A3                INC     DPTR
003A09 E0                MOVX    A,@DPTR
003A0A FF                MOV     R7,A
003A0B E4                CLR     A
003A0C FC                MOV     R4,A
003A0D FD                MOV     R5,A
003A0E 904E0B            MOV     DPTR,#ad_temp
003A11 120332            LCALL   ?C?LSTXDATA
  318: 		ad_temp	+= R_AD_F2;
003A14 904E0B            MOV     DPTR,#ad_temp
003A17 E0                MOVX    A,@DPTR
003A18 F8                MOV     R0,A
003A19 A3                INC     DPTR
003A1A E0                MOVX    A,@DPTR
003A1B F9                MOV     R1,A
003A1C A3                INC     DPTR
003A1D E0                MOVX    A,@DPTR
003A1E FA                MOV     R2,A
003A1F A3                INC     DPTR
003A20 E0                MOVX    A,@DPTR
003A21 FB                MOV     R3,A
003A22 904C87            MOV     DPTR,#R_AD_F2
003A25 E0                MOVX    A,@DPTR
003A26 FE                MOV     R6,A
003A27 A3                INC     DPTR
003A28 E0                MOVX    A,@DPTR
003A29 FF                MOV     R7,A
003A2A E4                CLR     A
003A2B FC                MOV     R4,A
003A2C FD                MOV     R5,A
003A2D EB                MOV     A,R3
003A2E 2F                ADD     A,R7
003A2F FF                MOV     R7,A
003A30 EA                MOV     A,R2
003A31 3E                ADDC    A,R6
003A32 FE                MOV     R6,A
003A33 ED                MOV     A,R5
003A34 39                ADDC    A,R1
003A35 FD                MOV     R5,A
003A36 EC                MOV     A,R4
003A37 38                ADDC    A,R0
003A38 FC                MOV     R4,A
003A39 904E0B            MOV     DPTR,#ad_temp
003A3C 120332            LCALL   ?C?LSTXDATA
  319: 		ad_temp	+= R_AD_F3;
003A3F 904E0B            MOV     DPTR,#ad_temp
003A42 E0                MOVX    A,@DPTR
003A43 F8                MOV     R0,A
003A44 A3                INC     DPTR
003A45 E0                MOVX    A,@DPTR
003A46 F9                MOV     R1,A
003A47 A3                INC     DPTR
003A48 E0                MOVX    A,@DPTR
003A49 FA                MOV     R2,A
003A4A A3                INC     DPTR
003A4B E0                MOVX    A,@DPTR
003A4C FB                MOV     R3,A
003A4D 904C89            MOV     DPTR,#R_AD_F3
003A50 E0                MOVX    A,@DPTR
003A51 FE                MOV     R6,A
003A52 A3                INC     DPTR
003A53 E0                MOVX    A,@DPTR
003A54 FF                MOV     R7,A
003A55 E4                CLR     A
003A56 FC                MOV     R4,A
003A57 FD                MOV     R5,A
003A58 EB                MOV     A,R3
003A59 2F                ADD     A,R7
003A5A FF                MOV     R7,A
003A5B EA                MOV     A,R2
003A5C 3E                ADDC    A,R6
003A5D FE                MOV     R6,A
003A5E ED                MOV     A,R5
003A5F 39                ADDC    A,R1
003A60 FD                MOV     R5,A
003A61 EC                MOV     A,R4
003A62 38                ADDC    A,R0
003A63 FC                MOV     R4,A
003A64 904E0B            MOV     DPTR,#ad_temp
003A67 120332            LCALL   ?C?LSTXDATA
  320: 		ad_temp	+= R_AD_F4;
003A6A 904E0B            MOV     DPTR,#ad_temp
003A6D E0                MOVX    A,@DPTR
003A6E F8                MOV     R0,A
003A6F A3                INC     DPTR
003A70 E0                MOVX    A,@DPTR
003A71 F9                MOV     R1,A
003A72 A3                INC     DPTR
003A73 E0                MOVX    A,@DPTR
003A74 FA                MOV     R2,A
003A75 A3                INC     DPTR
003A76 E0                MOVX    A,@DPTR
003A77 FB                MOV     R3,A
003A78 904C8B            MOV     DPTR,#R_AD_F4
003A7B E0                MOVX    A,@DPTR
003A7C FE                MOV     R6,A
003A7D A3                INC     DPTR
003A7E E0                MOVX    A,@DPTR
003A7F FF                MOV     R7,A
003A80 E4                CLR     A
003A81 FC                MOV     R4,A
003A82 FD                MOV     R5,A
003A83 EB                MOV     A,R3
003A84 2F                ADD     A,R7
003A85 FF                MOV     R7,A
003A86 EA                MOV     A,R2
003A87 3E                ADDC    A,R6
003A88 FE                MOV     R6,A
003A89 ED                MOV     A,R5
003A8A 39                ADDC    A,R1
003A8B FD                MOV     R5,A
003A8C EC                MOV     A,R4
003A8D 38                ADDC    A,R0
003A8E FC                MOV     R4,A
003A8F 904E0B            MOV     DPTR,#ad_temp
003A92 120332            LCALL   ?C?LSTXDATA
  321: 		ad_temp	+= R_AD_F5;
003A95 904E0B            MOV     DPTR,#ad_temp
003A98 E0                MOVX    A,@DPTR
003A99 F8                MOV     R0,A
003A9A A3                INC     DPTR
003A9B E0                MOVX    A,@DPTR
003A9C F9                MOV     R1,A
003A9D A3                INC     DPTR
003A9E E0                MOVX    A,@DPTR
003A9F FA                MOV     R2,A
003AA0 A3                INC     DPTR
003AA1 E0                MOVX    A,@DPTR
003AA2 FB                MOV     R3,A
003AA3 904C8D            MOV     DPTR,#R_AD_F5
003AA6 E0                MOVX    A,@DPTR
003AA7 FE                MOV     R6,A
003AA8 A3                INC     DPTR
003AA9 E0                MOVX    A,@DPTR
003AAA FF                MOV     R7,A
003AAB E4                CLR     A
003AAC FC                MOV     R4,A
003AAD FD                MOV     R5,A
003AAE EB                MOV     A,R3
003AAF 2F                ADD     A,R7
003AB0 FF                MOV     R7,A
003AB1 EA                MOV     A,R2
003AB2 3E                ADDC    A,R6
003AB3 FE                MOV     R6,A
003AB4 ED                MOV     A,R5
003AB5 39                ADDC    A,R1
003AB6 FD                MOV     R5,A
003AB7 EC                MOV     A,R4
003AB8 38                ADDC    A,R0
003AB9 FC                MOV     R4,A
003ABA 904E0B            MOV     DPTR,#ad_temp
003ABD 120332            LCALL   ?C?LSTXDATA
  322: 		ad_temp	+= R_AD_F6;
003AC0 904E0B            MOV     DPTR,#ad_temp
003AC3 E0                MOVX    A,@DPTR
003AC4 F8                MOV     R0,A
003AC5 A3                INC     DPTR
003AC6 E0                MOVX    A,@DPTR
003AC7 F9                MOV     R1,A
003AC8 A3                INC     DPTR
003AC9 E0                MOVX    A,@DPTR
003ACA FA                MOV     R2,A
003ACB A3                INC     DPTR
003ACC E0                MOVX    A,@DPTR
003ACD FB                MOV     R3,A
003ACE 904C8F            MOV     DPTR,#R_AD_F6
003AD1 E0                MOVX    A,@DPTR
003AD2 FE                MOV     R6,A
003AD3 A3                INC     DPTR
003AD4 E0                MOVX    A,@DPTR
003AD5 FF                MOV     R7,A
003AD6 E4                CLR     A
003AD7 FC                MOV     R4,A
003AD8 FD                MOV     R5,A
003AD9 EB                MOV     A,R3
003ADA 2F                ADD     A,R7
003ADB FF                MOV     R7,A
003ADC EA                MOV     A,R2
003ADD 3E                ADDC    A,R6
003ADE FE                MOV     R6,A
003ADF ED                MOV     A,R5
003AE0 39                ADDC    A,R1
003AE1 FD                MOV     R5,A
003AE2 EC                MOV     A,R4
003AE3 38                ADDC    A,R0
003AE4 FC                MOV     R4,A
003AE5 904E0B            MOV     DPTR,#ad_temp
003AE8 120332            LCALL   ?C?LSTXDATA
  323: 		ad_temp	+= R_AD_F7;
003AEB 904E0B            MOV     DPTR,#ad_temp
003AEE E0                MOVX    A,@DPTR
003AEF F8                MOV     R0,A
003AF0 A3                INC     DPTR
003AF1 E0                MOVX    A,@DPTR
003AF2 F9                MOV     R1,A
003AF3 A3                INC     DPTR
003AF4 E0                MOVX    A,@DPTR
003AF5 FA                MOV     R2,A
003AF6 A3                INC     DPTR
003AF7 E0                MOVX    A,@DPTR
003AF8 FB                MOV     R3,A
003AF9 904C91            MOV     DPTR,#R_AD_F7
003AFC E0                MOVX    A,@DPTR
003AFD FE                MOV     R6,A
003AFE A3                INC     DPTR
003AFF E0                MOVX    A,@DPTR
003B00 FF                MOV     R7,A
003B01 E4                CLR     A
003B02 FC                MOV     R4,A
003B03 FD                MOV     R5,A
003B04 EB                MOV     A,R3
003B05 2F                ADD     A,R7
003B06 FF                MOV     R7,A
003B07 EA                MOV     A,R2
003B08 3E                ADDC    A,R6
003B09 FE                MOV     R6,A
003B0A ED                MOV     A,R5
003B0B 39                ADDC    A,R1
003B0C FD                MOV     R5,A
003B0D EC                MOV     A,R4
003B0E 38                ADDC    A,R0
003B0F FC                MOV     R4,A
003B10 904E0B            MOV     DPTR,#ad_temp
003B13 120332            LCALL   ?C?LSTXDATA
  324: 		ad_temp	+= R_AD_F8;
003B16 904E0B            MOV     DPTR,#ad_temp
003B19 E0                MOVX    A,@DPTR
003B1A F8                MOV     R0,A
003B1B A3                INC     DPTR
003B1C E0                MOVX    A,@DPTR
003B1D F9                MOV     R1,A
003B1E A3                INC     DPTR
003B1F E0                MOVX    A,@DPTR
003B20 FA                MOV     R2,A
003B21 A3                INC     DPTR
003B22 E0                MOVX    A,@DPTR
003B23 FB                MOV     R3,A
003B24 904C93            MOV     DPTR,#R_AD_F8
003B27 E0                MOVX    A,@DPTR
003B28 FE                MOV     R6,A
003B29 A3                INC     DPTR
003B2A E0                MOVX    A,@DPTR
003B2B FF                MOV     R7,A
003B2C E4                CLR     A
003B2D FC                MOV     R4,A
003B2E FD                MOV     R5,A
003B2F EB                MOV     A,R3
003B30 2F                ADD     A,R7
003B31 FF                MOV     R7,A
003B32 EA                MOV     A,R2
003B33 3E                ADDC    A,R6
003B34 FE                MOV     R6,A
003B35 ED                MOV     A,R5
003B36 39                ADDC    A,R1
003B37 FD                MOV     R5,A
003B38 EC                MOV     A,R4
003B39 38                ADDC    A,R0
003B3A FC                MOV     R4,A
003B3B 904E0B            MOV     DPTR,#ad_temp
003B3E 120332            LCALL   ?C?LSTXDATA
  325: 
  326: 		R_AD_BUF = ad_temp / 8 ;
003B41 E4                CLR     A
003B42 7B08              MOV     R3,#08H
003B44 FA                MOV     R2,A
003B45 F9                MOV     R1,A
003B46 F8                MOV     R0,A
003B47 904E0B            MOV     DPTR,#ad_temp
003B4A E0                MOVX    A,@DPTR
003B4B FC                MOV     R4,A
003B4C A3                INC     DPTR
003B4D E0                MOVX    A,@DPTR
003B4E FD                MOV     R5,A
003B4F A3                INC     DPTR
003B50 E0                MOVX    A,@DPTR
003B51 FE                MOV     R6,A
003B52 A3                INC     DPTR
003B53 E0                MOVX    A,@DPTR
003B54 FF                MOV     R7,A
003B55 120269            LCALL   ?C?ULDIV
003B58 904E09            MOV     DPTR,#R_AD_BUF
003B5B EE                MOV     A,R6
003B5C F0                MOVX    @DPTR,A
003B5D A3                INC     DPTR
003B5E EF                MOV     A,R7
003B5F F0                MOVX    @DPTR,A
  327: 		R_AD_BUF_OLD	=	R_AD_BUF;
003B60 904C83            MOV     DPTR,#R_AD_BUF_OLD
003B63 EE                MOV     A,R6
003B64 F0                MOVX    @DPTR,A
003B65 A3                INC     DPTR
003B66 EF                MOV     A,R7
003B67 F0                MOVX    @DPTR,A
  328: 		}
003B68         ?C0023?CS_SCALE_PROC:
  329: 	return	R_AD_BUF;
003B68 904E09            MOV     DPTR,#R_AD_BUF
003B6B E0                MOVX    A,@DPTR
003B6C FE                MOV     R6,A
003B6D A3                INC     DPTR
003B6E E0                MOVX    A,@DPTR
003B6F FF                MOV     R7,A
  330: }
003B70 22                RET     
----- FUNCTION _CS_Scale_AdcFilter (END) -------


----- FUNCTION CS_Scale_ChangeUnit (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  368: void CS_Scale_ChangeUnit()
  369: {
  370: 	switch(R_Selet_Unit)
  371: 		{
003B71 904CC6            MOV     DPTR,#R_Selet_Unit
003B74 E0                MOVX    A,@DPTR
003B75 14                DEC     A
003B76 6011              JZ      ?C0039?CS_SCALE_PROC
003B78 14                DEC     A
003B79 601C              JZ      ?C0041?CS_SCALE_PROC
003B7B 14                DEC     A
003B7C 6012              JZ      ?C0040?CS_SCALE_PROC
003B7E 2403              ADD     A,#03H
003B80 701B              JNZ     ?C0042?CS_SCALE_PROC
  372: 		case CS_ScaleDisplay_L_kg:
  373: 			R_Selet_Unit=CS_ScaleDisplay_L_lb;
003B82         ?C0038?CS_SCALE_PROC:
  374: 			break;
003B82 904CC6            MOV     DPTR,#R_Selet_Unit
003B85 7401              MOV     A,#01H
003B87 F0                MOVX    @DPTR,A
  375: 		case CS_ScaleDisplay_L_lb:
003B88 22                RET     
  376: 			R_Selet_Unit=CS_ScaleDisplay_L_jin;
003B89         ?C0039?CS_SCALE_PROC:
  377: 			break;
003B89 904CC6            MOV     DPTR,#R_Selet_Unit
003B8C 7403              MOV     A,#03H
003B8E F0                MOVX    @DPTR,A
  378: 		case CS_ScaleDisplay_L_jin:
003B8F 22                RET     
  379: 			R_Selet_Unit=CS_ScaleDisplay_L_gongjin;
003B90         ?C0040?CS_SCALE_PROC:
  380: 			break;
003B90 904CC6            MOV     DPTR,#R_Selet_Unit
003B93 7402              MOV     A,#02H
003B95 F0                MOVX    @DPTR,A
  381: 		case CS_ScaleDisplay_L_gongjin:
003B96 22                RET     
  382: 			R_Selet_Unit=CS_ScaleDisplay_L_kg;
003B97         ?C0041?CS_SCALE_PROC:
  383: 			break;
003B97 E4                CLR     A
003B98 904CC6            MOV     DPTR,#R_Selet_Unit
003B9B F0                MOVX    @DPTR,A
  384: 		default :
003B9C 22                RET     
  385: 			R_Selet_Unit=CS_ScaleDisplay_L_kg;
003B9D         ?C0042?CS_SCALE_PROC:
  386: 			break;
003B9D E4                CLR     A
003B9E 904CC6            MOV     DPTR,#R_Selet_Unit
003BA1 F0                MOVX    @DPTR,A
  387: 		}
  388: }
  389: 
003BA2 22                RET     
----- FUNCTION CS_Scale_ChangeUnit (END) -------


----- FUNCTION _CS_MemoryWeightClear_Timer (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
  885: void CS_MemoryWeightClear_Timer(u8_t option)
  886: {
;---- Variable 'option' assigned to Register 'R7' ----
  887: 	static u8_t xdata timecount; 				//计时变量
  888: 	static u8_t xdata B_Timeout;
  889: 
  890: 	if(option==StartClearMemWeightTimer)
003BA3 EF                MOV     A,R7
003BA4 B40107            CJNE    A,#01H,?C0124?CS_SCALE_PROC
  891: 		{
  892: 		timecount=0;
003BA7 E4                CLR     A
003BA8 904CA9            MOV     DPTR,#timecount
003BAB F0                MOVX    @DPTR,A
  893: 		B_Timeout = false;
003BAC A3                INC     DPTR
003BAD F0                MOVX    @DPTR,A
  894: 		}
003BAE         ?C0124?CS_SCALE_PROC:
  895: 
  896: 	if(option==MemWeightTimerInc)
003BAE EF                MOV     A,R7
003BAF B4020C            CJNE    A,#02H,?C0125?CS_SCALE_PROC
  897: 		{
  898: 		if(timecount<255 ) 
003BB2 904CA9            MOV     DPTR,#timecount
003BB5 E0                MOVX    A,@DPTR
003BB6 C3                CLR     C
003BB7 94FF              SUBB    A,#0FFH
003BB9 5003              JNC     ?C0125?CS_SCALE_PROC
  899: 		timecount++;
003BBB E0                MOVX    A,@DPTR
003BBC 04                INC     A
003BBD F0                MOVX    @DPTR,A
  900: 		}
003BBE         ?C0125?CS_SCALE_PROC:
  901: 	
  902: 	if(B_Timeout == false)
003BBE 904CAA            MOV     DPTR,#B_Timeout
003BC1 E0                MOVX    A,@DPTR
003BC2 7014              JNZ     ?C0129?CS_SCALE_PROC
  903: 		{
  904: 		if(timecount>SoftTimerTimeOut)
003BC4 904CA9            MOV     DPTR,#timecount
003BC7 E0                MOVX    A,@DPTR
003BC8 D3                SETB    C
003BC9 9496              SUBB    A,#096H
003BCB 400B              JC      ?C0129?CS_SCALE_PROC
  905: 			{
  906: 			B_Timeout = true;
003BCD A3                INC     DPTR
003BCE 7401              MOV     A,#01H
003BD0 F0                MOVX    @DPTR,A
  907: 			R_Weight_Mem = 0;	//时间到清记忆重量
003BD1 E4                CLR     A
003BD2 904CC3            MOV     DPTR,#R_Weight_Mem
003BD5 F0                MOVX    @DPTR,A
003BD6 A3                INC     DPTR
003BD7 F0                MOVX    @DPTR,A
  908: 			}
  909: 		}
  910: }
003BD8         ?C0129?CS_SCALE_PROC:
003BD8 22                RET     
----- FUNCTION _CS_MemoryWeightClear_Timer (END) -------


----- FUNCTION CS_Scale_PowerOnProc (BEGIN) -----
 FILE: 'CS_Scale_Proc.c'
 1282: void CS_Scale_PowerOnProc(bool B_Reset)
 1283: {
 1284: 	static u8_t xdata comm_doing;
 1285: 	static u8_t xdata PowerOnState;
 1286: 	
 1287: 	
 1288: 	if(B_Reset)
003BD9 30000A            JNB     B_Reset,?C0184?CS_SCALE_PROC
 1289: 		{
 1290: 		PowerOnState=CS_PowerOn_State1_Reset;
003BDC E4                CLR     A
003BDD 904CB7            MOV     DPTR,#PowerOnState
003BE0 F0                MOVX    @DPTR,A
 1291: 		comm_doing=false;
003BE1 904CB6            MOV     DPTR,#comm_doing
003BE4 F0                MOVX    @DPTR,A
003BE5 22                RET     
 1292: 		return;
 1293: 		}
003BE6         ?C0184?CS_SCALE_PROC:
 1294: 	
 1295: 	//-----------S1
 1296: 	if(PowerOnState==CS_PowerOn_State1_Reset)
003BE6 904CB7            MOV     DPTR,#PowerOnState
003BE9 E0                MOVX    A,@DPTR
003BEA 7018              JNZ     ?C0186?CS_SCALE_PROC
 1297: 		{
 1298: 		if(comm_doing==false)
003BEC 904CB6            MOV     DPTR,#comm_doing
003BEF E0                MOVX    A,@DPTR
003BF0 700A              JNZ     ?C0187?CS_SCALE_PROC
 1299: 			{
 1300: 			comm_doing=true;
003BF2 04                INC     A
003BF3 F0                MOVX    @DPTR,A
 1301: 			R_Weight_Com_Coo.now = CS_CommTo1186_Reset;
003BF4 904D50            MOV     DPTR,#R_Weight_Com_Coo
003BF7 74C5              MOV     A,#0C5H
003BF9 F0                MOVX    @DPTR,A
 1302: 			}
003BFA 8008              SJMP    ?C0186?CS_SCALE_PROC
003BFC         ?C0187?CS_SCALE_PROC:
 1303: 		else
 1304: 			{
 1305: 			comm_doing=false;
003BFC E4                CLR     A
003BFD 904CB6            MOV     DPTR,#comm_doing
003C00 F0                MOVX    @DPTR,A
 1306: 			PowerOnState	= CS_PowerOn_State2_ReadOtp;
003C01 A3                INC     DPTR
003C02 04                INC     A
003C03 F0                MOVX    @DPTR,A
 1307: 			}		
 1308: 		}
003C04         ?C0186?CS_SCALE_PROC:
 1309: 	//-----------S2
 1310: 	if(PowerOnState==CS_PowerOn_State2_ReadOtp)
003C04 904CB7            MOV     DPTR,#PowerOnState
003C07 E0                MOVX    A,@DPTR
003C08 B40125            CJNE    A,#01H,?C0189?CS_SCALE_PROC
 1311: 		{
 1312: 		if(comm_doing==false)
003C0B 904CB6            MOV     DPTR,#comm_doing
003C0E E0                MOVX    A,@DPTR
003C0F 700F              JNZ     ?C0190?CS_SCALE_PROC
 1313: 			{
 1314: 			comm_doing=true;
003C11 04                INC     A
003C12 F0                MOVX    @DPTR,A
 1315: 			R_Weight_Com_Coo.now = CS_CommTo1186_ReadOtp;
003C13 904D50            MOV     DPTR,#R_Weight_Com_Coo
003C16 7484              MOV     A,#084H
003C18 F0                MOVX    @DPTR,A
 1316: 			R_Weight_Com_Coo.sucess=false;
003C19 E4                CLR     A
003C1A 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
003C1D F0                MOVX    @DPTR,A
 1317: 			R_Weight_Com_Coo.fail=false;
003C1E A3                INC     DPTR
003C1F F0                MOVX    @DPTR,A
 1318: 			}
003C20         ?C0190?CS_SCALE_PROC:
 1319: 		if(R_Weight_Com_Coo.sucess==true)
003C20 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
003C23 E0                MOVX    A,@DPTR
003C24 B40109            CJNE    A,#01H,?C0189?CS_SCALE_PROC
 1320: 			{
 1321: 			comm_doing=false;
003C27 E4                CLR     A
003C28 904CB6            MOV     DPTR,#comm_doing
003C2B F0                MOVX    @DPTR,A
 1322: 			PowerOnState =  CS_PowerOn_State3_ReadVersion;
003C2C A3                INC     DPTR
003C2D 7402              MOV     A,#02H
003C2F F0                MOVX    @DPTR,A
 1323: 			}
 1324: 		}
003C30         ?C0189?CS_SCALE_PROC:
 1325: 	//-----------S3
 1326: 	if(PowerOnState==CS_PowerOn_State3_ReadVersion)
003C30 904CB7            MOV     DPTR,#PowerOnState
003C33 E0                MOVX    A,@DPTR
003C34 B40203            CJNE    A,#02H,?C0192?CS_SCALE_PROC
 1327: 		{
 1328: 		PowerOnState =  CS_PowerOn_State4_ReadTime;		
003C37 7403              MOV     A,#03H
003C39 F0                MOVX    @DPTR,A
 1329: 		}
003C3A         ?C0192?CS_SCALE_PROC:
 1330: 	//-----------S4
 1331: 	if(PowerOnState==CS_PowerOn_State4_ReadTime)
003C3A 904CB7            MOV     DPTR,#PowerOnState
003C3D E0                MOVX    A,@DPTR
003C3E B40325            CJNE    A,#03H,?C0193?CS_SCALE_PROC
 1332: 		{
 1333: 		if(comm_doing==false)
003C41 904CB6            MOV     DPTR,#comm_doing
003C44 E0                MOVX    A,@DPTR
003C45 700F              JNZ     ?C0194?CS_SCALE_PROC
 1334: 			{
 1335: 			comm_doing=true;
003C47 04                INC     A
003C48 F0                MOVX    @DPTR,A
 1336: 			R_Weight_Com_Coo.now = CS_CommTo1186_ReadTime;
003C49 904D50            MOV     DPTR,#R_Weight_Com_Coo
003C4C 7482              MOV     A,#082H
003C4E F0                MOVX    @DPTR,A
 1337: 			R_Weight_Com_Coo.sucess=false;
003C4F E4                CLR     A
003C50 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
003C53 F0                MOVX    @DPTR,A
 1338: 			R_Weight_Com_Coo.fail=false;
003C54 A3                INC     DPTR
003C55 F0                MOVX    @DPTR,A
 1339: 			}
003C56         ?C0194?CS_SCALE_PROC:
 1340: 		if(R_Weight_Com_Coo.sucess==true)
003C56 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
003C59 E0                MOVX    A,@DPTR
003C5A B40109            CJNE    A,#01H,?C0193?CS_SCALE_PROC
 1341: 			{
 1342: 			comm_doing=false;
003C5D E4                CLR     A
003C5E 904CB6            MOV     DPTR,#comm_doing
003C61 F0                MOVX    @DPTR,A
 1343: 			PowerOnState =  CS_PowerOn_State5_SetOpenWeight;	
003C62 A3                INC     DPTR
003C63 7404              MOV     A,#04H
003C65 F0                MOVX    @DPTR,A
 1344: 			}
 1345: 		}
003C66         ?C0193?CS_SCALE_PROC:
 1346: 	//-----------S5
 1347: 	if(PowerOnState==CS_PowerOn_State5_SetOpenWeight)
003C66 904CB7            MOV     DPTR,#PowerOnState
003C69 E0                MOVX    A,@DPTR
003C6A B40425            CJNE    A,#04H,?C0196?CS_SCALE_PROC
 1348: 		{
 1349: 		if(comm_doing==false)
003C6D 904CB6            MOV     DPTR,#comm_doing
003C70 E0                MOVX    A,@DPTR
003C71 700F              JNZ     ?C0197?CS_SCALE_PROC
 1350: 			{
 1351: 			comm_doing=true;
003C73 04                INC     A
003C74 F0                MOVX    @DPTR,A
 1352: 			R_Weight_Com_Coo.now = CS_CommTo1186_SetOpenWeight;
003C75 904D50            MOV     DPTR,#R_Weight_Com_Coo
003C78 74A1              MOV     A,#0A1H
003C7A F0                MOVX    @DPTR,A
 1353: 			R_Weight_Com_Coo.sucess=false;
003C7B E4                CLR     A
003C7C 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
003C7F F0                MOVX    @DPTR,A
 1354: 			R_Weight_Com_Coo.fail=false;
003C80 A3                INC     DPTR
003C81 F0                MOVX    @DPTR,A
 1355: 			}
003C82         ?C0197?CS_SCALE_PROC:
 1356: 		if(R_Weight_Com_Coo.sucess==true)
003C82 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
003C85 E0                MOVX    A,@DPTR
003C86 B40109            CJNE    A,#01H,?C0196?CS_SCALE_PROC
 1357: 			{
 1358: 			comm_doing=false;
003C89 E4                CLR     A
003C8A 904CB6            MOV     DPTR,#comm_doing
003C8D F0                MOVX    @DPTR,A
 1359: 			PowerOnState =  CS_PowerOn_State6_ShowOpenPic;
003C8E A3                INC     DPTR
003C8F 7405              MOV     A,#05H
003C91 F0                MOVX    @DPTR,A
 1360: 			}
 1361: 		}
003C92         ?C0196?CS_SCALE_PROC:
 1362: 	//-----------S6
 1363: 	if(PowerOnState==CS_PowerOn_State6_ShowOpenPic)
003C92 904CB7            MOV     DPTR,#PowerOnState
003C95 E0                MOVX    A,@DPTR
003C96 6405              XRL     A,#05H
003C98 7039              JNZ     ?C0199?CS_SCALE_PROC
 1364: 		{
 1365: 		if(comm_doing==false)
003C9A 904CB6            MOV     DPTR,#comm_doing
003C9D E0                MOVX    A,@DPTR
003C9E 7018              JNZ     ?C0200?CS_SCALE_PROC
 1366: 			{
 1367: 			comm_doing=true;	
003CA0 04                INC     A
003CA1 F0                MOVX    @DPTR,A
 1368: 			CS_ScaleDisplay_FreshBuf(DisplayData,8888);
003CA2 7DB8              MOV     R5,#0B8H
003CA4 7C22              MOV     R4,#022H
003CA6 7F21              MOV     R7,#021H
003CA8 1215FE            LCALL   _CS_ScaleDisplay_FreshBuf
 1369: 			R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplay;
003CAB 904D50            MOV     DPTR,#R_Weight_Com_Coo
003CAE 74E0              MOV     A,#0E0H
003CB0 F0                MOVX    @DPTR,A
 1370: 			R_Weight_Com_Coo.sucess=false;
003CB1 E4                CLR     A
003CB2 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
003CB5 F0                MOVX    @DPTR,A
 1371: 			R_Weight_Com_Coo.fail=false;
003CB6 A3                INC     DPTR
003CB7 F0                MOVX    @DPTR,A
 1372: 			
 1373: 			}
003CB8         ?C0200?CS_SCALE_PROC:
 1374: 		if(R_Weight_Com_Coo.sucess==true)
003CB8 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
003CBB E0                MOVX    A,@DPTR
003CBC B40114            CJNE    A,#01H,?C0199?CS_SCALE_PROC
 1375: 			{	
 1376: 			comm_doing=false;
003CBF E4                CLR     A
003CC0 904CB6            MOV     DPTR,#comm_doing
003CC3 F0                MOVX    @DPTR,A
 1377: 			R_Weight_Com_Coo.sucess=false;
003CC4 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
003CC7 F0                MOVX    @DPTR,A
 1378: 			PowerOnState =	CS_PowerOn_State7_ShowOpenPicWait;
003CC8 904CB7            MOV     DPTR,#PowerOnState
003CCB 7406              MOV     A,#06H
003CCD F0                MOVX    @DPTR,A
 1379: 			CS_SoftTimer(ResetSoftTimer);
003CCE 7F02              MOV     R7,#02H
003CD0 120EE1            LCALL   _CS_SoftTimer
 1380: 			}		
 1381: 		}
003CD3         ?C0199?CS_SCALE_PROC:
 1382: 	//-----------S7
 1383: 	if(PowerOnState==CS_PowerOn_State7_ShowOpenPicWait)
003CD3 904CB7            MOV     DPTR,#PowerOnState
003CD6 E0                MOVX    A,@DPTR
003CD7 B40617            CJNE    A,#06H,?C0185?CS_SCALE_PROC
 1384: 		{
 1385: 		if(CS_SoftTimer(GetSoftTimerTime)>200)
003CDA 7F01              MOV     R7,#01H
003CDC 120EE1            LCALL   _CS_SoftTimer
003CDF EF                MOV     A,R7
003CE0 D3                SETB    C
003CE1 94C8              SUBB    A,#0C8H
003CE3 400C              JC      ?C0185?CS_SCALE_PROC
 1386: 			{
 1387: 			R_Scale_state = CS_Scale_state_weighting;
003CE5 904CC5            MOV     DPTR,#R_Scale_state
003CE8 7401              MOV     A,#01H
003CEA F0                MOVX    @DPTR,A
 1388: 			R_Weight_Com_Coo.now = CS_CommTo1186_ReadAd;	
003CEB 904D50            MOV     DPTR,#R_Weight_Com_Coo
003CEE 7480              MOV     A,#080H
003CF0 F0                MOVX    @DPTR,A
 1389: 			}
 1390: 		}
 1391: 
 1392: }
003CF1         ?C0185?CS_SCALE_PROC:
003CF1 22                RET     
----- FUNCTION CS_Scale_PowerOnProc (END) -------


----- FUNCTION CS_1186Com_ReadAdc_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  132: void CS_1186Com_ReadAdc_Proc(void)
  133: {
  134: 	u32_t	data_rec;
  135: 	
  136: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAd)
003CF2 904D50            MOV     DPTR,#R_Weight_Com_Coo
003CF5 E0                MOVX    A,@DPTR
003CF6 B4801F            CJNE    A,#080H,?C0017?CS_COMMTO1186
  137: 		{
  138: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadAd,0);
003CF9 7B00              MOV     R3,#00H
003CFB 7A00              MOV     R2,#00H
003CFD 7900              MOV     R1,#00H
003CFF 7F80              MOV     R7,#080H
003D01 121923            LCALL   _CS_CommTo1186_SendCmd
  139: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadAd;
003D04 904D51            MOV     DPTR,#R_Weight_Com_Coo+01H
003D07 7480              MOV     A,#080H
003D09 F0                MOVX    @DPTR,A
  140: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadAdStandby;
003D0A 904D50            MOV     DPTR,#R_Weight_Com_Coo
003D0D 7401              MOV     A,#01H
003D0F F0                MOVX    @DPTR,A
  141: 		uartTimeoutCnt=0;
003D10 E4                CLR     A
003D11 904D64            MOV     DPTR,#uartTimeoutCnt
003D14 F0                MOVX    @DPTR,A
  142: 		YC_UARTClearBuffer();
003D15 12058E            LCALL   YC_UARTClearBuffer
  143: 		}
003D18         ?C0017?CS_COMMTO1186:
  144: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAdStandby)
003D18 904D50            MOV     DPTR,#R_Weight_Com_Coo
003D1B E0                MOVX    A,@DPTR
003D1C 6401              XRL     A,#01H
003D1E 6002              JZ      $ + 4H
003D20 A1C0              AJMP    ?C0024?CS_COMMTO1186
  145: 		{						
  146: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 9)==9)
003D22 7B01              MOV     R3,#01H
003D24 7A4D              MOV     R2,#HIGH uartRcvBuf
003D26 7940              MOV     R1,#LOW uartRcvBuf
003D28 7D09              MOV     R5,#09H
003D2A FC                MOV     R4,A
003D2B 1207A4            LCALL   _YC_UARTReciveDataExpected
003D2E EF                MOV     A,R7
003D2F 6409              XRL     A,#09H
003D31 4E                ORL     A,R6
003D32 6002              JZ      $ + 4H
003D34 A1C0              AJMP    ?C0024?CS_COMMTO1186
  147: 			{						
  148: 			if(uartRcvBuf[3] == CS_CommTo1186_ReadAd)   
003D36 904D43            MOV     DPTR,#uartRcvBuf+03H
003D39 E0                MOVX    A,@DPTR
003D3A 6480              XRL     A,#080H
003D3C 707C              JNZ     ?C0020?CS_COMMTO1186
  149: 				{
  150: 				B_Weight_AdOk = true;
003D3E 904CD7            MOV     DPTR,#B_Weight_AdOk
003D41 04                INC     A
003D42 F0                MOVX    @DPTR,A
  151: 				data_rec = uartRcvBuf[4];
003D43 904D44            MOV     DPTR,#uartRcvBuf+04H
003D46 E0                MOVX    A,@DPTR
003D47 FF                MOV     R7,A
003D48 E4                CLR     A
003D49 FC                MOV     R4,A
003D4A FD                MOV     R5,A
003D4B FE                MOV     R6,A
;---- Variable 'data_rec' assigned to Register 'R4/R5/R6/R7' ----
  152: 				data_rec = (data_rec<<8) + uartRcvBuf[5];
003D4C 7808              MOV     R0,#08H
003D4E 12031F            LCALL   ?C?LSHL
003D51 A804              MOV     R0,AR4
003D53 A905              MOV     R1,AR5
003D55 AA06              MOV     R2,AR6
003D57 AB07              MOV     R3,AR7
003D59 A3                INC     DPTR
003D5A E0                MOVX    A,@DPTR
003D5B FF                MOV     R7,A
003D5C E4                CLR     A
003D5D FC                MOV     R4,A
003D5E FD                MOV     R5,A
003D5F FE                MOV     R6,A
003D60 EB                MOV     A,R3
003D61 2F                ADD     A,R7
003D62 FF                MOV     R7,A
003D63 EE                MOV     A,R6
003D64 3A                ADDC    A,R2
003D65 FE                MOV     R6,A
003D66 ED                MOV     A,R5
003D67 39                ADDC    A,R1
003D68 FD                MOV     R5,A
003D69 EC                MOV     A,R4
003D6A 38                ADDC    A,R0
003D6B FC                MOV     R4,A
  153: 				data_rec = (data_rec<<8) + uartRcvBuf[6];
003D6C 7808              MOV     R0,#08H
003D6E 12031F            LCALL   ?C?LSHL
003D71 A804              MOV     R0,AR4
003D73 A905              MOV     R1,AR5
003D75 AA06              MOV     R2,AR6
003D77 AB07              MOV     R3,AR7
003D79 A3                INC     DPTR
003D7A E0                MOVX    A,@DPTR
003D7B FF                MOV     R7,A
003D7C E4                CLR     A
003D7D FC                MOV     R4,A
003D7E FD                MOV     R5,A
003D7F FE                MOV     R6,A
003D80 EB                MOV     A,R3
003D81 2F                ADD     A,R7
003D82 FF                MOV     R7,A
003D83 EE                MOV     A,R6
003D84 3A                ADDC    A,R2
003D85 FE                MOV     R6,A
003D86 ED                MOV     A,R5
003D87 39                ADDC    A,R1
003D88 FD                MOV     R5,A
003D89 EC                MOV     A,R4
003D8A 38                ADDC    A,R0
003D8B FC                MOV     R4,A
  154: 				R_AD_Original =data_rec >> 6;	
003D8C 7806              MOV     R0,#06H
003D8E 12030C            LCALL   ?C?ULSHR
003D91 904CD8            MOV     DPTR,#R_AD_Original
003D94 EE                MOV     A,R6
003D95 F0                MOVX    @DPTR,A
003D96 A3                INC     DPTR
003D97 EF                MOV     A,R7
003D98 F0                MOVX    @DPTR,A
  155: 				R_1186sys_state = uartRcvBuf[7];
003D99 904D47            MOV     DPTR,#uartRcvBuf+07H
003D9C E0                MOVX    A,@DPTR
003D9D 904CDA            MOV     DPTR,#R_1186sys_state
003DA0 F0                MOVX    @DPTR,A
  156: 
  157: 				if(R_Scale_state==CS_Scale_state_init)
003DA1 904CC5            MOV     DPTR,#R_Scale_state
003DA4 E0                MOVX    A,@DPTR
003DA5 7006              JNZ     ?C0021?CS_COMMTO1186
  158: 					R_Weight_Com_Coo.now = CS_CommTo1186_Null;
003DA7 904D50            MOV     DPTR,#R_Weight_Com_Coo
003DAA F0                MOVX    @DPTR,A
003DAB 8006              SJMP    ?C0022?CS_COMMTO1186
003DAD         ?C0021?CS_COMMTO1186:
  159: 				else
  160: 					R_Weight_Com_Coo.now = CS_CommTo1186_LcdDisplay;
003DAD 904D50            MOV     DPTR,#R_Weight_Com_Coo
003DB0 74E0              MOV     A,#0E0H
003DB2 F0                MOVX    @DPTR,A
003DB3         ?C0022?CS_COMMTO1186:
  161: 				R_Weight_Com_Coo.sucess=true;
003DB3 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
003DB6 7401              MOV     A,#01H
003DB8 F0                MOVX    @DPTR,A
  162: 				
  163: 				}
003DB9 22                RET     
003DBA         ?C0020?CS_COMMTO1186:
  164: 			else
  165: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
003DBA 904D64            MOV     DPTR,#uartTimeoutCnt
003DBD 7415              MOV     A,#015H
003DBF F0                MOVX    @DPTR,A
  166: 			}
  167: 		}
  168: }
003DC0         ?C0024?CS_COMMTO1186:
003DC0 22                RET     
----- FUNCTION CS_1186Com_ReadAdc_Proc (END) -------


----- FUNCTION CS_1186Com_ReadAdZero_Proc (BEGIN) -----
 FILE: 'CS_CommTo1186.c'
  340: void CS_1186Com_ReadAdZero_Proc(void)
  341: {
  342: 	u32_t	data_rec;
  343: 	u16_t	R_AD_Zero;
  344: 	
  345: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAdZero)
003DC1 904D50            MOV     DPTR,#R_Weight_Com_Coo
003DC4 E0                MOVX    A,@DPTR
003DC5 B4851F            CJNE    A,#085H,?C0051?CS_COMMTO1186
  346: 		{
  347: 		CS_CommTo1186_SendCmd(CS_CommTo1186_ReadAdZero,0);
003DC8 7B00              MOV     R3,#00H
003DCA 7A00              MOV     R2,#00H
003DCC 7900              MOV     R1,#00H
003DCE 7F85              MOV     R7,#085H
003DD0 121923            LCALL   _CS_CommTo1186_SendCmd
  348: 		R_Weight_Com_Coo.pre = CS_CommTo1186_ReadAdZero;
003DD3 904D51            MOV     DPTR,#R_Weight_Com_Coo+01H
003DD6 7485              MOV     A,#085H
003DD8 F0                MOVX    @DPTR,A
  349: 		R_Weight_Com_Coo.now = CS_CommTo1186_ReadAdZeroStandby;
003DD9 904D50            MOV     DPTR,#R_Weight_Com_Coo
003DDC 7406              MOV     A,#06H
003DDE F0                MOVX    @DPTR,A
  350: 		uartTimeoutCnt=0;
003DDF E4                CLR     A
003DE0 904D64            MOV     DPTR,#uartTimeoutCnt
003DE3 F0                MOVX    @DPTR,A
  351: 		YC_UARTClearBuffer();
003DE4 12058E            LCALL   YC_UARTClearBuffer
  352: 		}
003DE7         ?C0051?CS_COMMTO1186:
  353: 	if(R_Weight_Com_Coo.now == CS_CommTo1186_ReadAdZeroStandby)
003DE7 904D50            MOV     DPTR,#R_Weight_Com_Coo
003DEA E0                MOVX    A,@DPTR
003DEB 6406              XRL     A,#06H
003DED 6002              JZ      $ + 4H
003DEF C171              AJMP    ?C0056?CS_COMMTO1186
  354: 		{						
  355: 		if(YC_UARTReciveDataExpected(uartRcvBuf, 8)==8)
003DF1 7B01              MOV     R3,#01H
003DF3 7A4D              MOV     R2,#HIGH uartRcvBuf
003DF5 7940              MOV     R1,#LOW uartRcvBuf
003DF7 7D08              MOV     R5,#08H
003DF9 FC                MOV     R4,A
003DFA 1207A4            LCALL   _YC_UARTReciveDataExpected
003DFD EF                MOV     A,R7
003DFE 6408              XRL     A,#08H
003E00 4E                ORL     A,R6
003E01 706E              JNZ     ?C0056?CS_COMMTO1186
  356: 			{						
  357: 			if(uartRcvBuf[3] == CS_CommTo1186_ReadAdZero)   
003E03 904D43            MOV     DPTR,#uartRcvBuf+03H
003E06 E0                MOVX    A,@DPTR
003E07 6485              XRL     A,#085H
003E09 7060              JNZ     ?C0054?CS_COMMTO1186
  358: 				{
  359: 				data_rec = uartRcvBuf[4];
003E0B A3                INC     DPTR
003E0C E0                MOVX    A,@DPTR
003E0D FF                MOV     R7,A
003E0E E4                CLR     A
003E0F FC                MOV     R4,A
003E10 FD                MOV     R5,A
003E11 FE                MOV     R6,A
;---- Variable 'data_rec' assigned to Register 'R4/R5/R6/R7' ----
  360: 				data_rec = (data_rec<<8) + uartRcvBuf[5];
003E12 7808              MOV     R0,#08H
003E14 12031F            LCALL   ?C?LSHL
003E17 A804              MOV     R0,AR4
003E19 A905              MOV     R1,AR5
003E1B AA06              MOV     R2,AR6
003E1D AB07              MOV     R3,AR7
003E1F A3                INC     DPTR
003E20 E0                MOVX    A,@DPTR
003E21 FF                MOV     R7,A
003E22 E4                CLR     A
003E23 FC                MOV     R4,A
003E24 FD                MOV     R5,A
003E25 FE                MOV     R6,A
003E26 EB                MOV     A,R3
003E27 2F                ADD     A,R7
003E28 FF                MOV     R7,A
003E29 EE                MOV     A,R6
003E2A 3A                ADDC    A,R2
003E2B FE                MOV     R6,A
003E2C ED                MOV     A,R5
003E2D 39                ADDC    A,R1
003E2E FD                MOV     R5,A
003E2F EC                MOV     A,R4
003E30 38                ADDC    A,R0
003E31 FC                MOV     R4,A
  361: 				data_rec = (data_rec<<8) + uartRcvBuf[6];
003E32 7808              MOV     R0,#08H
003E34 12031F            LCALL   ?C?LSHL
003E37 A804              MOV     R0,AR4
003E39 A905              MOV     R1,AR5
003E3B AA06              MOV     R2,AR6
003E3D AB07              MOV     R3,AR7
003E3F A3                INC     DPTR
003E40 E0                MOVX    A,@DPTR
003E41 FF                MOV     R7,A
003E42 E4                CLR     A
003E43 FC                MOV     R4,A
003E44 FD                MOV     R5,A
003E45 FE                MOV     R6,A
003E46 EB                MOV     A,R3
003E47 2F                ADD     A,R7
003E48 FF                MOV     R7,A
003E49 EE                MOV     A,R6
003E4A 3A                ADDC    A,R2
003E4B FE                MOV     R6,A
003E4C ED                MOV     A,R5
003E4D 39                ADDC    A,R1
003E4E FD                MOV     R5,A
003E4F EC                MOV     A,R4
003E50 38                ADDC    A,R0
003E51 FC                MOV     R4,A
  362: 				R_AD_Zero =data_rec >> 6;	
003E52 7806              MOV     R0,#06H
003E54 12030C            LCALL   ?C?ULSHR
;---- Variable 'R_AD_Zero' assigned to Register 'R6/R7' ----
  363: 				CS_Scale_ZeroProc(SetRunningZero,R_AD_Zero);
003E57 AD07              MOV     R5,AR7
003E59 AC06              MOV     R4,AR6
003E5B 7F06              MOV     R7,#06H
003E5D 1212F7            LCALL   _CS_Scale_ZeroProc
  364: 				
  365: 				R_Weight_Com_Coo.now = CS_CommTo1186_Null;
003E60 E4                CLR     A
003E61 904D50            MOV     DPTR,#R_Weight_Com_Coo
003E64 F0                MOVX    @DPTR,A
  366: 				R_Weight_Com_Coo.sucess=true;
003E65 904D52            MOV     DPTR,#R_Weight_Com_Coo+02H
003E68 04                INC     A
003E69 F0                MOVX    @DPTR,A
  367: 				
  368: 				}
003E6A 22                RET     
003E6B         ?C0054?CS_COMMTO1186:
  369: 			else
  370: 				uartTimeoutCnt =CS_CommTo1186_TimeOut;   //手动超时重发
003E6B 904D64            MOV     DPTR,#uartTimeoutCnt
003E6E 7415              MOV     A,#015H
003E70 F0                MOVX    @DPTR,A
  371: 			}
  372: 		}
  373: }
003E71         ?C0056?CS_COMMTO1186:
003E71 22                RET     
----- FUNCTION CS_1186Com_ReadAdZero_Proc (END) -------


----- FUNCTION CS_ScaleDisplay_Debug (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
   54: void CS_ScaleDisplay_Debug()
   55: {
   56: 	u8_t buf[5];
   57: 	CS_ScaleDisplay_HexToBcd(R_Debug_temp,buf);
003E72 904CC7            MOV     DPTR,#R_Debug_temp
003E75 E0                MOVX    A,@DPTR
003E76 FE                MOV     R6,A
003E77 A3                INC     DPTR
003E78 E0                MOVX    A,@DPTR
003E79 FF                MOV     R7,A
003E7A 7B01              MOV     R3,#01H
003E7C 7A4E              MOV     R2,#HIGH buf
003E7E 7927              MOV     R1,#LOW buf
003E80 D1FF              ACALL   _CS_ScaleDisplay_HexToBcd
   58: 		
   59: 	CS_Lcd_Send_Data[0] = CS_ScaleDisplay_LookUpTable(buf[1]);
003E82 904E28            MOV     DPTR,#buf+01H
003E85 E0                MOVX    A,@DPTR
003E86 FF                MOV     R7,A
003E87 1217BA            LCALL   _CS_ScaleDisplay_LookUpTable
003E8A 904D23            MOV     DPTR,#CS_Lcd_Send_Data
003E8D EF                MOV     A,R7
003E8E F0                MOVX    @DPTR,A
   60: 	CS_Lcd_Send_Data[1] = CS_ScaleDisplay_LookUpTable(buf[2]);
003E8F 904E29            MOV     DPTR,#buf+02H
003E92 E0                MOVX    A,@DPTR
003E93 FF                MOV     R7,A
003E94 1217BA            LCALL   _CS_ScaleDisplay_LookUpTable
003E97 904D24            MOV     DPTR,#CS_Lcd_Send_Data+01H
003E9A EF                MOV     A,R7
003E9B F0                MOVX    @DPTR,A
   61: 	CS_Lcd_Send_Data[2] = CS_ScaleDisplay_LookUpTable(buf[3]);
003E9C 904E2A            MOV     DPTR,#buf+03H
003E9F E0                MOVX    A,@DPTR
003EA0 FF                MOV     R7,A
003EA1 1217BA            LCALL   _CS_ScaleDisplay_LookUpTable
003EA4 904D25            MOV     DPTR,#CS_Lcd_Send_Data+02H
003EA7 EF                MOV     A,R7
003EA8 F0                MOVX    @DPTR,A
   62: 	CS_Lcd_Send_Data[3] = CS_ScaleDisplay_LookUpTable(buf[4]);	
003EA9 904E2B            MOV     DPTR,#buf+04H
003EAC E0                MOVX    A,@DPTR
003EAD FF                MOV     R7,A
003EAE 1217BA            LCALL   _CS_ScaleDisplay_LookUpTable
003EB1 904D26            MOV     DPTR,#CS_Lcd_Send_Data+03H
003EB4 EF                MOV     A,R7
003EB5 F0                MOVX    @DPTR,A
   63: 		
   64: 	CS_ScaleDisplay_LcdBuf_rShift4();
003EB6 D1C3              ACALL   CS_ScaleDisplay_LcdBuf_rShift4
   65: 
   66: 	CS_CommTo1186_SendCmd(CS_CommTo1186_LcdDisplay,CS_Lcd_Send_Data);
003EB8 7B01              MOV     R3,#01H
003EBA 7A4D              MOV     R2,#HIGH CS_Lcd_Send_Data
003EBC 7923              MOV     R1,#LOW CS_Lcd_Send_Data
003EBE 7FE0              MOV     R7,#0E0H
003EC0 021923            LJMP    _CS_CommTo1186_SendCmd
   67: 
----- FUNCTION CS_ScaleDisplay_Debug (END) -------


----- FUNCTION CS_ScaleDisplay_LcdBuf_rShift4 (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  195: void CS_ScaleDisplay_LcdBuf_rShift4()
  196: {
  197: 	CS_Lcd_Send_Data[4] = (CS_Lcd_Send_Data[4] & 0xf0) | (CS_Lcd_Send_Data[3] & 0x0f);
  198: 	CS_Lcd_Send_Data[3] = (CS_Lcd_Send_Data[3] & 0xf0) | (CS_Lcd_Send_Data[2] & 0x0f);
003EC3 904D26            MOV     DPTR,#CS_Lcd_Send_Data+03H
003EC6 E0                MOVX    A,@DPTR
003EC7 540F              ANL     A,#0FH
003EC9 FF                MOV     R7,A
003ECA A3                INC     DPTR
003ECB E0                MOVX    A,@DPTR
003ECC 54F0              ANL     A,#0F0H
003ECE 4F                ORL     A,R7
003ECF F0                MOVX    @DPTR,A
  199: 	CS_Lcd_Send_Data[2] = (CS_Lcd_Send_Data[2] & 0xf0) | (CS_Lcd_Send_Data[1] & 0x0f);
003ED0 904D25            MOV     DPTR,#CS_Lcd_Send_Data+02H
003ED3 E0                MOVX    A,@DPTR
003ED4 540F              ANL     A,#0FH
003ED6 FF                MOV     R7,A
003ED7 A3                INC     DPTR
003ED8 E0                MOVX    A,@DPTR
003ED9 54F0              ANL     A,#0F0H
003EDB 4F                ORL     A,R7
003EDC F0                MOVX    @DPTR,A
  200: 	CS_Lcd_Send_Data[1] = (CS_Lcd_Send_Data[1] & 0xf0) | (CS_Lcd_Send_Data[0] & 0x0f);
003EDD 904D24            MOV     DPTR,#CS_Lcd_Send_Data+01H
003EE0 E0                MOVX    A,@DPTR
003EE1 540F              ANL     A,#0FH
003EE3 FF                MOV     R7,A
003EE4 A3                INC     DPTR
003EE5 E0                MOVX    A,@DPTR
003EE6 54F0              ANL     A,#0F0H
003EE8 4F                ORL     A,R7
003EE9 F0                MOVX    @DPTR,A
  201: 	CS_Lcd_Send_Data[0] = CS_Lcd_Send_Data[0] & 0xf0;
003EEA 904D23            MOV     DPTR,#CS_Lcd_Send_Data
003EED E0                MOVX    A,@DPTR
003EEE 540F              ANL     A,#0FH
003EF0 FF                MOV     R7,A
003EF1 A3                INC     DPTR
003EF2 E0                MOVX    A,@DPTR
003EF3 54F0              ANL     A,#0F0H
003EF5 4F                ORL     A,R7
003EF6 F0                MOVX    @DPTR,A
  202: }
003EF7 904D23            MOV     DPTR,#CS_Lcd_Send_Data
003EFA E0                MOVX    A,@DPTR
003EFB 54F0              ANL     A,#0F0H
003EFD F0                MOVX    @DPTR,A
  203: 
003EFE 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdBuf_rShift4 (END) -------


----- FUNCTION _CS_ScaleDisplay_HexToBcd (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  205: void CS_ScaleDisplay_HexToBcd(u16_t HexData,u8_t* buf)
  206: {
003EFF 904E16            MOV     DPTR,#HexData
003F02 EE                MOV     A,R6
003F03 F0                MOVX    @DPTR,A
003F04 A3                INC     DPTR
003F05 EF                MOV     A,R7
003F06 F0                MOVX    @DPTR,A
003F07 A3                INC     DPTR
003F08 EB                MOV     A,R3
003F09 F0                MOVX    @DPTR,A
003F0A A3                INC     DPTR
003F0B EA                MOV     A,R2
003F0C F0                MOVX    @DPTR,A
003F0D A3                INC     DPTR
003F0E E9                MOV     A,R1
003F0F F0                MOVX    @DPTR,A
  207: 	u8_t  i;
  208: 	for(i=0;i<5;i++)
003F10 E4                CLR     A
003F11 A3                INC     DPTR
003F12 F0                MOVX    @DPTR,A
003F13         ?C0036?CS_SCALEDISPLAY:
003F13 904E1B            MOV     DPTR,#i
003F16 E0                MOVX    A,@DPTR
003F17 FB                MOV     R3,A
003F18 C3                CLR     C
003F19 9405              SUBB    A,#05H
003F1B 504C              JNC     ?C0039?CS_SCALEDISPLAY
  209: 		{
  210: 		buf[4-i] =  HexData%10;
003F1D 904E16            MOV     DPTR,#HexData
003F20 E0                MOVX    A,@DPTR
003F21 FE                MOV     R6,A
003F22 A3                INC     DPTR
003F23 E0                MOVX    A,@DPTR
003F24 FF                MOV     R7,A
003F25 7C00              MOV     R4,#00H
003F27 7D0A              MOV     R5,#0AH
003F29 120173            LCALL   ?C?UIDIV
003F2C AF05              MOV     R7,AR5
003F2E EB                MOV     A,R3
003F2F FD                MOV     R5,A
003F30 C3                CLR     C
003F31 7404              MOV     A,#04H
003F33 9D                SUBB    A,R5
003F34 FD                MOV     R5,A
003F35 E4                CLR     A
003F36 9400              SUBB    A,#00H
003F38 FC                MOV     R4,A
003F39 A3                INC     DPTR
003F3A E0                MOVX    A,@DPTR
003F3B FB                MOV     R3,A
003F3C A3                INC     DPTR
003F3D E0                MOVX    A,@DPTR
003F3E FA                MOV     R2,A
003F3F A3                INC     DPTR
003F40 E0                MOVX    A,@DPTR
003F41 F9                MOV     R1,A
003F42 8D82              MOV     DPL,R5
003F44 8C83              MOV     DPH,R4
003F46 EF                MOV     A,R7
003F47 120151            LCALL   ?C?CSTOPTR
  211: 		HexData = HexData /10;
003F4A 904E16            MOV     DPTR,#HexData
003F4D E0                MOVX    A,@DPTR
003F4E FE                MOV     R6,A
003F4F A3                INC     DPTR
003F50 E0                MOVX    A,@DPTR
003F51 FF                MOV     R7,A
003F52 7C00              MOV     R4,#00H
003F54 7D0A              MOV     R5,#0AH
003F56 120173            LCALL   ?C?UIDIV
003F59 904E16            MOV     DPTR,#HexData
003F5C EE                MOV     A,R6
003F5D F0                MOVX    @DPTR,A
003F5E A3                INC     DPTR
003F5F EF                MOV     A,R7
003F60 F0                MOVX    @DPTR,A
  212: 		}	
003F61 904E1B            MOV     DPTR,#i
003F64 E0                MOVX    A,@DPTR
003F65 04                INC     A
003F66 F0                MOVX    @DPTR,A
003F67 80AA              SJMP    ?C0036?CS_SCALEDISPLAY
  213: }
003F69         ?C0039?CS_SCALEDISPLAY:
003F69 22                RET     
----- FUNCTION _CS_ScaleDisplay_HexToBcd (END) -------


----- FUNCTION CS_ScaleDisplay_LcdShowNull (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  235: void CS_ScaleDisplay_LcdShowNull(void)
  236: {
  237: 	CS_Lcd_Send_Data[0] = 0x00;
  238: 	CS_Lcd_Send_Data[1] = 0x00;
003F6A E4                CLR     A
003F6B 904D23            MOV     DPTR,#CS_Lcd_Send_Data
003F6E F0                MOVX    @DPTR,A
  239: 	CS_Lcd_Send_Data[2] = 0x00;
003F6F A3                INC     DPTR
003F70 F0                MOVX    @DPTR,A
  240: 	CS_Lcd_Send_Data[3] = 0x00;
003F71 A3                INC     DPTR
003F72 F0                MOVX    @DPTR,A
  241: 	CS_Lcd_Send_Data[4] = 0x00;
003F73 A3                INC     DPTR
003F74 F0                MOVX    @DPTR,A
  242: }
003F75 A3                INC     DPTR
003F76 F0                MOVX    @DPTR,A
  243: 
003F77 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdShowNull (END) -------


----- FUNCTION CS_ScaleDisplay_LcdShowAll (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  253: void CS_ScaleDisplay_LcdShowAll(void)
  254: {
  255: 	CS_Lcd_Send_Data[0] = 0xFF;
  256: 	CS_Lcd_Send_Data[1] = 0xFF;
003F78 904D23            MOV     DPTR,#CS_Lcd_Send_Data
003F7B 74FF              MOV     A,#0FFH
003F7D F0                MOVX    @DPTR,A
  257: 	CS_Lcd_Send_Data[2] = 0xFF;
003F7E A3                INC     DPTR
003F7F F0                MOVX    @DPTR,A
  258: 	CS_Lcd_Send_Data[3] = 0xFF;
003F80 A3                INC     DPTR
003F81 F0                MOVX    @DPTR,A
  259: 	CS_Lcd_Send_Data[4] = 0xFF;
003F82 A3                INC     DPTR
003F83 F0                MOVX    @DPTR,A
  260: }
003F84 A3                INC     DPTR
003F85 F0                MOVX    @DPTR,A
  261: 
003F86 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdShowAll (END) -------


----- FUNCTION CS_ScaleDisplay_LcdBackup (BEGIN) -----
 FILE: 'CS_ScaleDisplay.c'
  263: void CS_ScaleDisplay_LcdBackup(void)
  264: {
  265: 	CS_Lcd_Send_Data_BAK[0] = CS_Lcd_Send_Data[0];
  266: 	CS_Lcd_Send_Data_BAK[1] = CS_Lcd_Send_Data[1];
003F87 904D23            MOV     DPTR,#CS_Lcd_Send_Data
003F8A E0                MOVX    A,@DPTR
003F8B 904D1D            MOV     DPTR,#CS_Lcd_Send_Data_BAK
003F8E F0                MOVX    @DPTR,A
  267: 	CS_Lcd_Send_Data_BAK[2] = CS_Lcd_Send_Data[2];
003F8F 904D24            MOV     DPTR,#CS_Lcd_Send_Data+01H
003F92 E0                MOVX    A,@DPTR
003F93 904D1E            MOV     DPTR,#CS_Lcd_Send_Data_BAK+01H
003F96 F0                MOVX    @DPTR,A
  268: 	CS_Lcd_Send_Data_BAK[3] = CS_Lcd_Send_Data[3];
003F97 904D25            MOV     DPTR,#CS_Lcd_Send_Data+02H
003F9A E0                MOVX    A,@DPTR
003F9B 904D1F            MOV     DPTR,#CS_Lcd_Send_Data_BAK+02H
003F9E F0                MOVX    @DPTR,A
  269: 	CS_Lcd_Send_Data_BAK[4] = CS_Lcd_Send_Data[4];	
003F9F 904D26            MOV     DPTR,#CS_Lcd_Send_Data+03H
003FA2 E0                MOVX    A,@DPTR
003FA3 904D20            MOV     DPTR,#CS_Lcd_Send_Data_BAK+03H
003FA6 F0                MOVX    @DPTR,A
  270: }
003FA7 904D27            MOV     DPTR,#CS_Lcd_Send_Data+04H
003FAA E0                MOVX    A,@DPTR
003FAB 904D21            MOV     DPTR,#CS_Lcd_Send_Data_BAK+04H
003FAE F0                MOVX    @DPTR,A
  271: 
003FAF 22                RET     
----- FUNCTION CS_ScaleDisplay_LcdBackup (END) -------


